{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/8187/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/8187/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/8187"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/8187"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/8187/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/e2f74de5152fed3cd7cbdb00a9e12c23277a542b"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6179,
            "forks_count": 6179,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1956,
            "open_issues_count": 1956,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-14T22:14:00Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 332755,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91117,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-15T02:58:55Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91117,
            "watchers_count": 91117,
            "web_commit_signoff_required": false
        },
        "sha": "1e7d5e8cdf9827978f42ea114cfd85f9d32b00eb",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Add the function to detect the status of the Caps lock, for the use of the Users and Plugins, `nvim_get_caps_state` function will be used.\r\n\r\nCloses #1480",
    "closed_at": "2025-07-10T18:40:56Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177221313"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177221313"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a leak since the call to `pclose()` is missing.\r\n\r\nAlso, this assumes the user is running with access to X.  What if the user is running in a console or remotely in ssh?  Does `xset` work with Wayland?",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T20:20:40Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177221313",
            "id": 177221313,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzIyMTMxMw==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 188,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107057798,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177221313/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177221313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177221557"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177221557"
                }
            },
            "author_association": "MEMBER",
            "body": "There needs to be error-handling for this.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T20:21:30Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177221557",
            "id": 177221557,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzIyMTU1Nw==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 192,
            "original_position": 38,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107057798,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177221557/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177221557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177222464"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177222464"
                }
            },
            "author_association": "MEMBER",
            "body": "This is making a lot of assumptions about the output from `xset`.  How portable are those assumptions?  Does xset provide a mechanism to request parseable output?  Is there another way to request this information?",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T20:24:17Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177222464",
            "id": 177222464,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzIyMjQ2NA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 193,
            "original_position": 39,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107057798,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177222464/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177222464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177222733"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177222733"
                }
            },
            "author_association": "MEMBER",
            "body": "Prefer to declare variables where they're used instead of at the top of a function.  We specifically require C99 support, so let's take advantage of it.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T20:25:15Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+\n+#elif defined(WIN32)\n+  if ((GetKeyState(VK_CAPITAL) & 0x0001)!=0) {\n+    return 1\n+  } else {\n+    return 0;\n+  }\n+#elif defined(__APPLE__)\n+\n+  kern_return_t kr;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177222733",
            "id": 177222733,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzIyMjczMw==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 207,
            "original_position": 53,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107057798,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177222733/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177222733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177222968"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177222968"
                }
            },
            "author_association": "MEMBER",
            "body": "Does `mdict` also need to be released when `ios` is valid?",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T20:26:02Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+\n+#elif defined(WIN32)\n+  if ((GetKeyState(VK_CAPITAL) & 0x0001)!=0) {\n+    return 1\n+  } else {\n+    return 0;\n+  }\n+#elif defined(__APPLE__)\n+\n+  kern_return_t kr;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool state;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault, (CFDictionaryRef) mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177222968",
            "id": 177222968,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzIyMjk2OA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 219,
            "original_position": 62,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107057798,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177222968/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177222968",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177223110"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177223110"
                }
            },
            "author_association": "MEMBER",
            "body": "Does `kr` need to be closed/released?",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T20:26:29Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+\n+#elif defined(WIN32)\n+  if ((GetKeyState(VK_CAPITAL) & 0x0001)!=0) {\n+    return 1\n+  } else {\n+    return 0;\n+  }\n+#elif defined(__APPLE__)\n+\n+  kern_return_t kr;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool state;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault, (CFDictionaryRef) mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    return -1;\n+  }\n+\n+  kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType, &ioc);",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177223110",
            "id": 177223110,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzIyMzExMA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 221,
            "original_position": 67,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107057798,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177223110/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177223110",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177261814"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177261814"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This also assumes that xset is installed (I have it in a separate package with only two dependents (though one of which is pretty common xdg-utils)) and in $PATH, that shell is POSIX compatible to some extent and that grep is there and in $PATH as well. And, BTW, `popen` is not C99, it is POSIX; and there is libuv for that. I do not like shelling out in C code in any case, but there is no better alternative to xset it code must be limited to calling just `xset` and nothing else, not even a shell. In any case there is no way `grep` will beat even Neovim regexes as they are already loaded, and it does not look like regexes are what is actually needed.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T23:06:41Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177261814",
            "id": 177261814,
            "in_reply_to_id": 177221313,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzI2MTgxNA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 188,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107104001,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177261814/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177261814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177262081"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262081"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "And do not use `STRNCMP` here, with *proper* (i.e. `char` and not `char_u`) types `strncmp` is good and it does type check in place of forcing a cast.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T23:08:03Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177262081",
            "id": 177262081,
            "in_reply_to_id": 177222464,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzI2MjA4MQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 193,
            "original_position": 39,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107104259,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262081/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262081",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177262591"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262591"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Why “find” here? “Determine” sounds better, especially since you are searching something only in case of linux.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T23:11:12Z",
            "diff_hunk": "@@ -1562,3 +1563,15 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+Integer nvim_get_caps_state(Error *err )\n+  FUNC_API_SINCE(4)\n+{\n+  int res = capslock_status();\n+  if (res == -1) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to find the Capslock State\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177262591",
            "id": 177262591,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzI2MjU5MQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 1573,
            "original_position": 19,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 107104827,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262591/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262591",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177262764"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262764"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing `const`. And a lot of style guide violations, though most should be reported.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T23:12:12Z",
            "diff_hunk": "@@ -1562,3 +1563,15 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+Integer nvim_get_caps_state(Error *err )\n+  FUNC_API_SINCE(4)\n+{\n+  int res = capslock_status();",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177262764",
            "id": 177262764,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzI2Mjc2NA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 1570,
            "original_position": 16,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 107105002,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262764/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177262969"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262969"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I do not see why you should use `Integer` here. With `Error *err` argument you do have at least three states with mere `Boolean`: true, false and various errors.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T23:13:22Z",
            "diff_hunk": "@@ -1562,3 +1563,15 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+Integer nvim_get_caps_state(Error *err )",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177262969",
            "id": 177262969,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzI2Mjk2OQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 1567,
            "original_position": 13,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 107105231,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262969/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177262969",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177263411"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177263411"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This hardly fits into `env.c`, `input.c` would be a bit better.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T23:15:59Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177263411",
            "id": 177263411,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzI2MzQxMQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 182,
            "original_position": 28,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107105728,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177263411/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177263411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177264106"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177264106"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Would rather suggest to use boolean and `const char **const error` argument (`*error == NULL` if not error). This lacks error reporting capabilities.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T23:19:40Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177264106",
            "id": 177264106,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzI2NDEwNg==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 181,
            "original_position": 27,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107106511,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177264106/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177264106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177264244"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177264244"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is four lines longer then needed, you can just return the result of comparison.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T23:20:19Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+\n+#elif defined(WIN32)\n+  if ((GetKeyState(VK_CAPITAL) & 0x0001)!=0) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177264244",
            "id": 177264244,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzI2NDI0NA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 200,
            "original_position": 46,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107106663,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177264244/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177264244",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177266557"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177266557"
                }
            },
            "author_association": "MEMBER",
            "body": "@ZyX-I I suggested env.c because input.c thus far has avoided much cross-platform junk. And capslock state isn't necessarily related to parsing input, it is an ongoing state.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T23:34:44Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177266557",
            "id": 177266557,
            "in_reply_to_id": 177263411,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzI2NjU1Nw==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 182,
            "original_position": 28,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107109300,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177266557/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177266557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177267870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177267870"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It is still out of theme. Better add `keyboard.c` then turn `env.c` into yet another incarnation of all-including `util.c`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-26T23:42:48Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177267870",
            "id": 177267870,
            "in_reply_to_id": 177263411,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzI2Nzg3MA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 182,
            "original_position": 28,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107110668,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177267870/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177267870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177404964"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177404964"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, missed it, and also I didn't like `xset` because this is some external application, I was thinking whatif they change their format later and also the installation of xset was also be required, this was just a prototype, for just testing if it was working on my pc or not, so it worked, I will edit it today after the GSoC proposal is finalized",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:28:43Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177404964",
            "id": 177404964,
            "in_reply_to_id": 177221313,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNDk2NA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 188,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107267205,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177404964/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177404964",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177405011"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405011"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, sure, I will do it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:28:55Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177405011",
            "id": 177405011,
            "in_reply_to_id": 177221557,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNTAxMQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 192,
            "original_position": 38,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107267281,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405011/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405011",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177405485"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405485"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, I will do it, I thought here would be no difference for char and unsigned char, will do it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:30:38Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177405485",
            "id": 177405485,
            "in_reply_to_id": 177222464,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNTQ4NQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 193,
            "original_position": 39,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107267851,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405485/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405485",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177405516"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405516"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK sure",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:30:45Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+\n+#elif defined(WIN32)\n+  if ((GetKeyState(VK_CAPITAL) & 0x0001)!=0) {\n+    return 1\n+  } else {\n+    return 0;\n+  }\n+#elif defined(__APPLE__)\n+\n+  kern_return_t kr;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177405516",
            "id": 177405516,
            "in_reply_to_id": 177222733,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNTUxNg==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 207,
            "original_position": 53,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107267894,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405516/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405516",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177405700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405700"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I saw the documentation of `IOServiceGetMatchingService`, they say, if there is an error encountered then it will not release the dictionary, otherwise it will release the space",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:31:32Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+\n+#elif defined(WIN32)\n+  if ((GetKeyState(VK_CAPITAL) & 0x0001)!=0) {\n+    return 1\n+  } else {\n+    return 0;\n+  }\n+#elif defined(__APPLE__)\n+\n+  kern_return_t kr;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool state;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault, (CFDictionaryRef) mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177405700",
            "id": 177405700,
            "in_reply_to_id": 177222968,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNTcwMA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 219,
            "original_position": 62,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107268134,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177405700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177406219"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406219"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "kr is not a pointer but a variable, simple variable, so its space will be allocated on stack, and I think due to the comparsons made, it may be like some integer, but not sure, I will check it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:33:18Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+\n+#elif defined(WIN32)\n+  if ((GetKeyState(VK_CAPITAL) & 0x0001)!=0) {\n+    return 1\n+  } else {\n+    return 0;\n+  }\n+#elif defined(__APPLE__)\n+\n+  kern_return_t kr;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool state;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault, (CFDictionaryRef) mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    return -1;\n+  }\n+\n+  kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType, &ioc);",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177406219",
            "id": 177406219,
            "in_reply_to_id": 177223110,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNjIxOQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 221,
            "original_position": 67,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107268769,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406219/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177406278"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406278"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ok sounds better",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:33:28Z",
            "diff_hunk": "@@ -1562,3 +1563,15 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+Integer nvim_get_caps_state(Error *err )\n+  FUNC_API_SINCE(4)\n+{\n+  int res = capslock_status();\n+  if (res == -1) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to find the Capslock State\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177406278",
            "id": 177406278,
            "in_reply_to_id": 177262591,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNjI3OA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 1573,
            "original_position": 19,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 107268837,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406278/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406278",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177406584"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406584"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, it was presently just for the check of working so no serious attempts for this thing presently was made, so if I make it correct I will do it, I wanted to see the run of the travis and appveor",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:34:34Z",
            "diff_hunk": "@@ -1562,3 +1563,15 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+Integer nvim_get_caps_state(Error *err )\n+  FUNC_API_SINCE(4)\n+{\n+  int res = capslock_status();",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177406584",
            "id": 177406584,
            "in_reply_to_id": 177262764,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNjU4NA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 1570,
            "original_position": 16,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 107269207,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406584/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406584",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177406763"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406763"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I had a thought, that if there was error then I would return -1, and 0 for no and 1 for yes, Boolean was option, I think of it\r\n",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:35:16Z",
            "diff_hunk": "@@ -1562,3 +1563,15 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+Integer nvim_get_caps_state(Error *err )",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177406763",
            "id": 177406763,
            "in_reply_to_id": 177262969,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNjc2Mw==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 1567,
            "original_position": 13,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 107269433,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406763/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177406763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177407344"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177407344"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, I will edit it ",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:37:11Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177407344",
            "id": 177407344,
            "in_reply_to_id": 177263411,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNzM0NA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 182,
            "original_position": 28,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107270059,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177407344/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177407344",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177407526"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177407526"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ok sure I will do it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:37:42Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177407526",
            "id": 177407526,
            "in_reply_to_id": 177264106,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNzUyNg==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 181,
            "original_position": 27,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107270251,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177407526/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177407526",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177407781"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177407781"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "yes it can be made, just `return (GetKeyState(VK_CAPITAL) & 0x0001)!=0` would be better",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:38:40Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+\n+#elif defined(WIN32)\n+  if ((GetKeyState(VK_CAPITAL) & 0x0001)!=0) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177407781",
            "id": 177407781,
            "in_reply_to_id": 177264244,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQwNzc4MQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 200,
            "original_position": 46,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107270544,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177407781/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177407781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177412224"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177412224"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think `xsel` should be hardcoded, it should work more like say clipboard provider. If there is a similar utility for wayland it could then be configured. Something like `os_system()` would be preferable over `popen()`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T12:54:12Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177412224",
            "id": 177412224,
            "in_reply_to_id": 177221313,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQxMjIyNA==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 188,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107275912,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177412224/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177412224",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177441539"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177441539"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I have to work on it and find it, I will try my best",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T14:18:37Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177441539",
            "id": 177441539,
            "in_reply_to_id": 177221313,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQ0MTUzOQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 188,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107311283,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177441539/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177441539",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177579417"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177579417"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "There is no difference after compiling, but macros would be forcing a cast.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T21:32:53Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177579417",
            "id": 177579417,
            "in_reply_to_id": 177222464,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzU3OTQxNw==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 193,
            "original_position": 39,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107476101,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177579417/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177579417",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177581097"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177581097"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "File descriptors also fit into the definition of “simple variable, not a pointer”, yet they do need to be closed. Would not expect that for a variable with type named `kern_return_t` though, it looks more like errno, especially after seeing it checked agaist something like `…_SUCCESS`. Though unless you are going to do with `kr` something other than checking against `KERN_SUCCESS` once (that is, if `kr` cannot be used to create useful error messages or you are not going to do so) I would suggest to remove the variable completely and put calls into the `if`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T21:40:12Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+\n+#elif defined(WIN32)\n+  if ((GetKeyState(VK_CAPITAL) & 0x0001)!=0) {\n+    return 1\n+  } else {\n+    return 0;\n+  }\n+#elif defined(__APPLE__)\n+\n+  kern_return_t kr;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool state;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault, (CFDictionaryRef) mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    return -1;\n+  }\n+\n+  kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType, &ioc);",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177581097",
            "id": 177581097,
            "in_reply_to_id": 177223110,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzU4MTA5Nw==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 221,
            "original_position": 67,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107478242,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177581097/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177581097",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177581493"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177581493"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Though no, based on the code you can only remove the second `kr`. Still that makes first perfect to have `const` in the type.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T21:41:47Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");\n+  if (fp == NULL) {\n+      return -1;\n+  }\n+  fgets(res, sizeof(res), fp);\n+  if (STRNCMP(res + 21, \"on\", 2) == 0) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+\n+#elif defined(WIN32)\n+  if ((GetKeyState(VK_CAPITAL) & 0x0001)!=0) {\n+    return 1\n+  } else {\n+    return 0;\n+  }\n+#elif defined(__APPLE__)\n+\n+  kern_return_t kr;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool state;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault, (CFDictionaryRef) mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    return -1;\n+  }\n+\n+  kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType, &ioc);",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177581493",
            "id": 177581493,
            "in_reply_to_id": 177223110,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzU4MTQ5Mw==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 221,
            "original_position": 67,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 107478689,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177581493/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177581493",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177587203"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177587203"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You do not return anything at all with a error. You may see how dispatch coded, it generates code like\r\n\r\n```C\r\nObject handle_nvim_get_current_line(uint64_t channel_id, Array args, Error *error)\r\n{\r\n  Object ret = NIL;\r\n\r\n  if (args.size != 0) {\r\n    api_set_error(error, kErrorTypeException, \"Wrong number of arguments: expecting 0 but got %zu\", args.size);\r\n    goto cleanup;\r\n  }\r\n\r\n  String rv = nvim_get_current_line(error);\r\n\r\n  if (ERROR_SET(error)) {\r\n    goto cleanup;\r\n  }\r\n\r\n  ret = STRING_OBJ(rv);\r\n\r\ncleanup:\r\n  return ret;\r\n}\r\n```\r\n\r\nwhere you may clearly see NIL returned in case of error. Lua\r\n\r\n```C\r\nstatic int nlua_msgpack_nvim_get_current_line(lua_State *lstate)\r\n{\r\n  Error err = ERROR_INIT;\r\n  if (lua_gettop(lstate) != 0) {\r\n    api_set_error(&err, kErrorTypeValidation, \"Expected 0 arguments\");\r\n    goto exit_0;\r\n  }\r\n  const String ret = nvim_get_current_line(&err);\r\n  nlua_push_String(lstate, ret);\r\n  api_free_string(ret);\r\n\r\n\r\nexit_0:\r\n  if (ERROR_SET(&err)) {\r\n    luaL_where(lstate, 1);\r\n    lua_pushstring(lstate, err.msg);\r\n    api_clear_error(&err);\r\n    lua_concat(lstate, 2);\r\n    return lua_error(lstate);\r\n  }\r\n\r\n  return 1;\r\n}\r\n```\r\n\r\nmay seem different as you could not actually see it not returning anything: value is pushed onto stack regardless of error condition (AFAIR in order to not rely on function not returning something allocated just in case). But `lua_error` is a longjump and the target may and will expect return value from another function, which may be the caller of the `nlua_msgpack_nvim_get_current_line` and not API function itself, with caller having a different contract, or an error condition (what I am saying is that lua error handling with `pcall` and longjumps does not allow failing functions to have meaningful return value even if authors were willing to implement it, this is not the case with VimL where builtin functions do return in case of failure, though you need to be careful not to put failing function inside `try` or do some hacking with `silent` to actually utilize that).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T22:07:11Z",
            "diff_hunk": "@@ -1562,3 +1563,15 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+Integer nvim_get_caps_state(Error *err )",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177587203",
            "id": 177587203,
            "in_reply_to_id": 177262969,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzU4NzIwMw==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 1567,
            "original_position": 13,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 107485557,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177587203/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177587203",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r177587931"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/177587931"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "(Dispatch is in `build/src/nvim/auto/api/private/dispatch_wrappers.generated.h`, lua wrappers are in `build/src/nvim/auto/msgpack_lua_c_bindings.generated.c`, actual generators are both in `src/nvim/generators/gen_api_dispatch.lua`, `src/nvim/CMakeLists.txt` may be used to connect dots.)",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-27T22:10:26Z",
            "diff_hunk": "@@ -1562,3 +1563,15 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+Integer nvim_get_caps_state(Error *err )",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r177587931",
            "id": 177587931,
            "in_reply_to_id": 177262969,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzU4NzkzMQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 1567,
            "original_position": 13,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 107486418,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177587931/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/177587931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178113541"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178113541"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I came to know that its not possible to find out the status of capslock in console mode, I also asked on linux IRC, they said same, for reading the capslock status, I need to hook into the hid interface which may require some special permissions, so initially I should make this function for linux XWindows interface only, moreover I want to say, and encourage to try, try to open console  in linux by `ctrl+alt+f1` login there, then add command `xset -q` this will give error, more over when you press the capslock key, the led for the capslock will not be lighted, so there may be some issues with capslock.\r\nRFC for this discussion",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-29T16:36:00Z",
            "diff_hunk": "@@ -169,6 +178,64 @@ void os_get_hostname(char *hostname, size_t size)\n #endif\n }\n \n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+int capslock_status(void ) {\n+\n+#if defined(__linux__)\n+\n+  FILE *fp = NULL;\n+  char res[1024];\n+  fp = popen(\"xset -q | grep Caps\", \"r\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178113541",
            "id": 178113541,
            "in_reply_to_id": 177221313,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODExMzU0MQ==",
            "original_commit_id": "dd64dc7c61c939fdb9ef866f4e56a820a394037e",
            "original_line": 188,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/os/env.c",
            "position": null,
            "pull_request_review_id": 108119525,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178113541/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178113541",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178309045"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178309045"
                }
            },
            "author_association": "MEMBER",
            "body": "This will be all on one line which isn't valid Lua syntax. You would need newlines:\r\n\r\n```\r\n\"return (function()\\n\"\r\n\"local handle = io.popen('xset q|grep Caps')\\n\"\r\n...\r\n```\r\n\r\nHowever I would suggest putting the Lua function definition into `src/nvim/lua/vim.lua`. See `_os_proc_info` for example. Remember to add it to the \"exported\" list at the end of `src/nvim/lua/vim.lua`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-30T15:13:25Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+bool capslock_status(const char **const err )\n+{\n+  *err = NULL;\n+#if defined(__linux__)\n+  String cmd = cstr_to_string(\"return (function()\"\n+                              \"local handle = io.popen('xset q|grep Caps')\"\n+                              \"local data = handle:read('*all')\"\n+                              \"handle:close()\"\n+                              \"return data end)()\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178309045",
            "id": 178309045,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMwOTA0NQ==",
            "original_commit_id": "c352e6aeda9641c4a40ec0c757ef52b6ef8bfa06",
            "original_line": 37,
            "original_position": 37,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108354432,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178309045/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178309045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178309338"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178309338"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, cool, this is better, I had hard time in finding this, I had to ask from lua developers on their IRC, OK I will use your approach :smile: ",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-30T15:15:05Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+bool capslock_status(const char **const err )\n+{\n+  *err = NULL;\n+#if defined(__linux__)\n+  String cmd = cstr_to_string(\"return (function()\"\n+                              \"local handle = io.popen('xset q|grep Caps')\"\n+                              \"local data = handle:read('*all')\"\n+                              \"handle:close()\"\n+                              \"return data end)()\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178309338",
            "id": 178309338,
            "in_reply_to_id": 178309045,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMwOTMzOA==",
            "original_commit_id": "c352e6aeda9641c4a40ec0c757ef52b6ef8bfa06",
            "original_line": 37,
            "original_position": 37,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108354790,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178309338/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178309338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178311011"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178311011"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this would not be necessary if these includes were done _before_ the `#include \"nvim/...\"` directives. And that's how it should be anyways: system headers always go before applications-specific headers.\r\n\r\nThen only `#undef` should be needed (immediately after the system includes):\r\n\r\n```\r\n#ifdef __APPLE__\r\n# ifdef Boolean\r\n#  undef Boolean\r\n# endif\r\n#endif\r\n```",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-30T15:23:32Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178311011",
            "id": 178311011,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMxMTAxMQ==",
            "original_commit_id": "cbac8265f67597d9f69dd57971b4ae9166f09a56",
            "original_line": 19,
            "original_position": 19,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108356771,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178311011/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178311011",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178312658"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178312658"
                }
            },
            "author_association": "MEMBER",
            "body": "@nimitbhardwaj You could also use the `_system()` Lua function in that same file (again see `_os_proc_info` and `_os_proc_children`, they both use `_system()`) instead of popen.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-30T15:32:40Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+/// @return -1 if error encountered, 1 if capslock active otherwise 0 if not.\n+bool capslock_status(const char **const err )\n+{\n+  *err = NULL;\n+#if defined(__linux__)\n+  String cmd = cstr_to_string(\"return (function()\"\n+                              \"local handle = io.popen('xset q|grep Caps')\"\n+                              \"local data = handle:read('*all')\"\n+                              \"handle:close()\"\n+                              \"return data end)()\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178312658",
            "id": 178312658,
            "in_reply_to_id": 178309045,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMxMjY1OA==",
            "original_commit_id": "c352e6aeda9641c4a40ec0c757ef52b6ef8bfa06",
            "original_line": 37,
            "original_position": 37,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108358834,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178312658/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178312658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178315528"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178315528"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, sure, I try it too on simple .c file too",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-30T15:48:23Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178315528",
            "id": 178315528,
            "in_reply_to_id": 178311011,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMxNTUyOA==",
            "original_commit_id": "cbac8265f67597d9f69dd57971b4ae9166f09a56",
            "original_line": 19,
            "original_position": 19,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108362290,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178315528/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178315528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178319324"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178319324"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think this will not work, because, there was a use of `typedef`, and `typedef` and `#define` are different things\r\nI explain why my code works here, when `nvim/api/private/helpers.h` was included, there was a `typedef bool Boolean;` then when I was going to include `IOKit/*` in that there was a re`typedef` of Boolean, but with other name, so what I did, I changed the name of Boolean to Boolean_I_DONTCARE, what it did, it the places where whas Boolean written, in the code of `IOKit/*` it was replaced by  `Boolean_I_DONTCARE` so, in all places in IOKit, this `Boolean_I_DONTCARE`was used and original Boolean of our neovim `typedef` remain untouched. So It works",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-30T16:10:11Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178319324",
            "id": 178319324,
            "in_reply_to_id": 178311011,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMxOTMyNA==",
            "original_commit_id": "cbac8265f67597d9f69dd57971b4ae9166f09a56",
            "original_line": 19,
            "original_position": 19,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108366832,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178319324/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178319324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178320639"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178320639"
                }
            },
            "author_association": "MEMBER",
            "body": "My mistake, as jamessan said we dealt with this in lang.c",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-30T16:17:16Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178320639",
            "id": 178320639,
            "in_reply_to_id": 178311011,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMyMDYzOQ==",
            "original_commit_id": "cbac8265f67597d9f69dd57971b4ae9166f09a56",
            "original_line": 19,
            "original_position": 19,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108368411,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178320639/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178320639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178320879"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178320879"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, No problem, thanks for your time to check it :smiley: ",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-30T16:18:35Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178320879",
            "id": 178320879,
            "in_reply_to_id": 178311011,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODMyMDg3OQ==",
            "original_commit_id": "cbac8265f67597d9f69dd57971b4ae9166f09a56",
            "original_line": 19,
            "original_position": 19,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108368662,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178320879/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178320879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178429846"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429846"
                }
            },
            "author_association": "MEMBER",
            "body": "I still think we want a convenient way to override this, if someone makes a function that works for wayland (or bulitin console, input method with soft-capslock etc). It is possible to overwrite `vim._os_proc_capsinfo`, but I think there should be \"less friction\" compared to say overriding `_os_proc_info` (desktop env vary a lot faster than basic os services).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-31T11:21:13Z",
            "diff_hunk": "@@ -118,11 +118,21 @@ local function _update_package_paths()\n   last_nvim_paths = cur_nvim_paths\n end\n \n+local function _os_proc_capsinfo()\n+\n+  local cmd = { 'xset', 'q', }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178429846",
            "id": 178429846,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQyOTg0Ng==",
            "original_commit_id": "4ce5a742a876221615385ac214d0ddae3351b104",
            "original_line": 123,
            "original_position": 6,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 108490549,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429846/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178429915"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429915"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, this is true, the functional approach here will be much better than just communicating with shell, there you specified the nvim-x11 but I have to get some time to fully understand its working, I didn't have much exp with wayland now, but if its a need of hour, I can understand it.\r\nAlso would like to listen to the view of others too.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-31T11:26:28Z",
            "diff_hunk": "@@ -118,11 +118,21 @@ local function _update_package_paths()\n   last_nvim_paths = cur_nvim_paths\n end\n \n+local function _os_proc_capsinfo()\n+\n+  local cmd = { 'xset', 'q', }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178429915",
            "id": 178429915,
            "in_reply_to_id": 178429846,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQyOTkxNQ==",
            "original_commit_id": "4ce5a742a876221615385ac214d0ddae3351b104",
            "original_line": 123,
            "original_position": 6,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 108490617,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429915/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178429952"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429952"
                }
            },
            "author_association": "MEMBER",
            "body": "I didn't say this PR should fix wayland, rather just that this function should look more encouraging for a _user config_ to override. Later on we could do clippoard-style provider detection.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-31T11:30:45Z",
            "diff_hunk": "@@ -118,11 +118,21 @@ local function _update_package_paths()\n   last_nvim_paths = cur_nvim_paths\n end\n \n+local function _os_proc_capsinfo()\n+\n+  local cmd = { 'xset', 'q', }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178429952",
            "id": 178429952,
            "in_reply_to_id": 178429846,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQyOTk1Mg==",
            "original_commit_id": "4ce5a742a876221615385ac214d0ddae3351b104",
            "original_line": 123,
            "original_position": 6,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 108490670,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429952/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429952",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178429967"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429967"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes its true",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-31T11:32:19Z",
            "diff_hunk": "@@ -118,11 +118,21 @@ local function _update_package_paths()\n   last_nvim_paths = cur_nvim_paths\n end\n \n+local function _os_proc_capsinfo()\n+\n+  local cmd = { 'xset', 'q', }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178429967",
            "id": 178429967,
            "in_reply_to_id": 178429846,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQyOTk2Nw==",
            "original_commit_id": "4ce5a742a876221615385ac214d0ddae3351b104",
            "original_line": 123,
            "original_position": 6,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 108490695,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429967/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178429967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178430928"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178430928"
                }
            },
            "author_association": "MEMBER",
            "body": "@bfredl Can that wait until another PR? This one is getting too noisy.\r\n\r\n> It is possible to overwrite vim._os_proc_capsinfo\r\n\r\nAny underscore-prefix function in `vim` Lua module is not part of public API, so let's not suggest this to any users.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-31T12:20:20Z",
            "diff_hunk": "@@ -118,11 +118,21 @@ local function _update_package_paths()\n   last_nvim_paths = cur_nvim_paths\n end\n \n+local function _os_proc_capsinfo()\n+\n+  local cmd = { 'xset', 'q', }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178430928",
            "id": 178430928,
            "in_reply_to_id": 178429846,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzMDkyOA==",
            "original_commit_id": "4ce5a742a876221615385ac214d0ddae3351b104",
            "original_line": 123,
            "original_position": 6,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 108491515,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178430928/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178430928",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178431203"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431203"
                }
            },
            "author_association": "MEMBER",
            "body": "@justinmk I thought I _very explictly_ stated that more flexible detection should wait until later. The change I have in mind could be as simple as renaming the function for now (and document it)\r\n\r\n> any underscore-prefix function in vim Lua module is not part of public API, so let's not suggest this to any users.\r\n\r\nI agree with the premise (underscore functions sholudn't be changed), but the conclusion is quite backwards. If some users need to override a \"underscore-prefix function in vim Lua module\" to properly use a new feature, isn't the obvious conclusion that the function should at least be renamed?\r\n",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-31T12:39:32Z",
            "diff_hunk": "@@ -118,11 +118,21 @@ local function _update_package_paths()\n   last_nvim_paths = cur_nvim_paths\n end\n \n+local function _os_proc_capsinfo()\n+\n+  local cmd = { 'xset', 'q', }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178431203",
            "id": 178431203,
            "in_reply_to_id": 178429846,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzMTIwMw==",
            "original_commit_id": "4ce5a742a876221615385ac214d0ddae3351b104",
            "original_line": 123,
            "original_position": 6,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 108491788,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431203/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431203",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178431620"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431620"
                }
            },
            "author_association": "MEMBER",
            "body": "> If some users need to override a \"underscore-prefix function in vim Lua module\" to properly use a new feature, isn't the obvious conclusion that the function should at least be renamed?\r\n\r\nI don't know. What I do know is that underscore-prefixed Lua functions may be removed/renamed in the future and there must not be even the slightest implication that backwards-compatibility will be supported for them in userspace.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-31T13:04:19Z",
            "diff_hunk": "@@ -118,11 +118,21 @@ local function _update_package_paths()\n   last_nvim_paths = cur_nvim_paths\n end\n \n+local function _os_proc_capsinfo()\n+\n+  local cmd = { 'xset', 'q', }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178431620",
            "id": 178431620,
            "in_reply_to_id": 178429846,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzMTYyMA==",
            "original_commit_id": "4ce5a742a876221615385ac214d0ddae3351b104",
            "original_line": 123,
            "original_position": 6,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 108492230,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431620/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431620",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178431702"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431702"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think we should tie backwards-incompatibility to underscore. Worst case in this case is just that the override has no effect. When user ask on gitter how to make soft-capslock (or linux console, as @ZyX-I just mentioned) to work, I don't want to need to say \"In general you should not change underscore functions, but in this case you should change `vim._os_proc_capsinfo` for now\" (lying to them and saying it is impossible is not an option).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-31T13:08:25Z",
            "diff_hunk": "@@ -118,11 +118,21 @@ local function _update_package_paths()\n   last_nvim_paths = cur_nvim_paths\n end\n \n+local function _os_proc_capsinfo()\n+\n+  local cmd = { 'xset', 'q', }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178431702",
            "id": 178431702,
            "in_reply_to_id": 178429846,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzMTcwMg==",
            "original_commit_id": "4ce5a742a876221615385ac214d0ddae3351b104",
            "original_line": 123,
            "original_position": 6,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 108492311,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431702/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431702",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178431801"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431801"
                }
            },
            "author_association": "MEMBER",
            "body": "Also BTW, shouldn't `proc` be dropped from the name?",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-03-31T13:15:07Z",
            "diff_hunk": "@@ -118,11 +118,21 @@ local function _update_package_paths()\n   last_nvim_paths = cur_nvim_paths\n end\n \n+local function _os_proc_capsinfo()\n+\n+  local cmd = { 'xset', 'q', }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178431801",
            "id": 178431801,
            "in_reply_to_id": 178429846,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzMTgwMQ==",
            "original_commit_id": "4ce5a742a876221615385ac214d0ddae3351b104",
            "original_line": 123,
            "original_position": 6,
            "original_start_line": null,
            "path": "src/nvim/lua/vim.lua",
            "position": null,
            "pull_request_review_id": 108492418,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431801/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178431801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178452860"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178452860"
                }
            },
            "author_association": "MEMBER",
            "body": "All functions in `os/*` should be prefixed with `os_`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-01T09:26:56Z",
            "diff_hunk": "@@ -82,12 +165,48 @@ bool capslock_status(const char **const err )\n   IOObjectRelease(ios);\n \n   if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n-                                &state) != kIOReturnSuccess) {\n+                                &stateCaps) != kIOReturnSuccess) {\n     *err = \"Unable to lock the state\";\n     return false;\n   }\n-  IOServiceClose(ioc);\n-  return (bool)state;\n \n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n #endif\n+\n+/// A helper function to be used by `nvim_get_caps_state` API function giving\n+/// the information about the Capslock state.\n+///\n+/// @param err[out]  The error if encountered, otherwise will be NULL\n+/// @return          The status of capslock, `true` if active otherwise `false`\n+bool mods_status(Dictionary *const dict, const char **const err )",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178452860",
            "id": 178452860,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQ1Mjg2MA==",
            "original_commit_id": "1dbcc875b26843bdb562f0002a51b5e0cb9fe9ce",
            "original_line": 194,
            "original_position": 198,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108513751,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178452860/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178452860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178453559"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178453559"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ok I will do it, now traveling, will do in hour or so",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-01T10:05:39Z",
            "diff_hunk": "@@ -82,12 +165,48 @@ bool capslock_status(const char **const err )\n   IOObjectRelease(ios);\n \n   if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n-                                &state) != kIOReturnSuccess) {\n+                                &stateCaps) != kIOReturnSuccess) {\n     *err = \"Unable to lock the state\";\n     return false;\n   }\n-  IOServiceClose(ioc);\n-  return (bool)state;\n \n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n #endif\n+\n+/// A helper function to be used by `nvim_get_caps_state` API function giving\n+/// the information about the Capslock state.\n+///\n+/// @param err[out]  The error if encountered, otherwise will be NULL\n+/// @return          The status of capslock, `true` if active otherwise `false`\n+bool mods_status(Dictionary *const dict, const char **const err )",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178453559",
            "id": 178453559,
            "in_reply_to_id": 178452860,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQ1MzU1OQ==",
            "original_commit_id": "1dbcc875b26843bdb562f0002a51b5e0cb9fe9ce",
            "original_line": 194,
            "original_position": 198,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108514430,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178453559/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178453559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178466023"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466023"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This all should really go to `os_xlib_init` (renamed from `os_xlib_open`): there is no need to reretrieve symbols each time. Do not know why I did not think of that earlier.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-01T18:43:31Z",
            "diff_hunk": "@@ -0,0 +1,222 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kScrollLock = 0x80,\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+\n+/// A helper function to be used to load the libX11\n+static bool os_xlib_open(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// A helper function to be used to get the pointer of the function to be used\n+static bool os_xlib_dlsym(const char *const name, void **const ptr,\n+                       const char **const err)\n+{\n+  const int uds_ret = uv_dlsym(&xlib, name, ptr);\n+  if (uds_ret != 0) {\n+    *err = \"Failed to retrieve the function from X11 library\";\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// Get the status of the Capslock, Numlock and Scrolllock in linux\n+static bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_open(err)) {\n+    return false;\n+  }\n+  _XDisplay *(*_XOpenDisplay)(void *);\n+  int (*_XCloseDisplay)(_XDisplay *);\n+  _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178466023",
            "id": 178466023,
            "line": 137,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQ2NjAyMw==",
            "original_commit_id": "c4107a9cddea2f32dd3ca57d851e43717cf6ce89",
            "original_line": 137,
            "original_position": 104,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": 118,
            "pull_request_review_id": 108526059,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466023/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178466204"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466204"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is not correct, should use one space after `@return` and `@param[...]{two spaces}name{two spaces}{description, aligned to just after latest two spaces}`. No newlines between argument descriptions, function referenced like `func()` (*without* backticks, but *with* parenthesis) and proper sentences in anything, but (oneline!) summary. That is something like\r\n\r\n```C\r\n/// Get information about Num/Caps/Scroll Lock state in linux\r\n///\r\n/// To be used in nvim_get_keyboard_mods_state() API function.\r\n///\r\n/// @param[out]  dict  Pointer to dictionary where information about modifiers\r\n///                    is to be dumped.\r\n/// @param[out]  err  Location where error message is to be saved, set to NULL\r\n///                   if no error.\r\n///\r\n/// @return true in case of error, false otherwise.\r\nbool os_mods_status(Dictionary *const dict, const char **const err)\r\n  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\r\n```\r\n\r\n(I should say though this is not the only style used currently, only what I use. But none of the styles you may find matches what you used here.)",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-01T18:52:00Z",
            "diff_hunk": "@@ -0,0 +1,222 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kScrollLock = 0x80,\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+\n+/// A helper function to be used to load the libX11\n+static bool os_xlib_open(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// A helper function to be used to get the pointer of the function to be used\n+static bool os_xlib_dlsym(const char *const name, void **const ptr,\n+                       const char **const err)\n+{\n+  const int uds_ret = uv_dlsym(&xlib, name, ptr);\n+  if (uds_ret != 0) {\n+    *err = \"Failed to retrieve the function from X11 library\";\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// Get the status of the Capslock, Numlock and Scrolllock in linux\n+static bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_open(err)) {\n+    return false;\n+  }\n+  _XDisplay *(*_XOpenDisplay)(void *);\n+  int (*_XCloseDisplay)(_XDisplay *);\n+  _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get the status of the Capslock, Numlock and Scrolllock in windows\n+bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get the status of the Capslock, Numlock and Scrolllock in MacOS\n+static bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums, stateScroll;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#endif\n+\n+/// A helper function to be used by `nvim_get_keyboard_mods_state` API function\n+/// giving the information about the Capslock, Numlock and Scrollock state.\n+///\n+/// @param dict[out]  The dictionary holding the information of the\n+///                   different mods\n+///\n+/// @param err[out]   The error if encountered, otherwise will be NULL\n+///\n+/// @return           `true` if no error occurs\n+///                   otherwise `false`",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178466204",
            "id": 178466204,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQ2NjIwNA==",
            "original_commit_id": "c4107a9cddea2f32dd3ca57d851e43717cf6ce89",
            "original_line": 203,
            "original_position": 203,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108526232,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466204/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466204",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178466353"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466353"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I would rather do `PUT(*dict, \"capslock\", BOOLEAN_OBJ(mods & kCapsLock));`: it is almost always easier to just write `ret[\"capslock\"]` then any kind of checking whether key is in dictionary, at best it would be something like moving from `d[k]` to `d.get(k, default)`. Though additionally making keys also present allows distinguishing situation between “this kind of lock is checked” vs “this kind of lock is not checked at all”. And note that dictionary keys are inconsistent here (plural vs singular) and it is better to not have capital letter.\r\n\r\nAlso given your comment about OS X I should say that if scroll lock is not checked there then it should not appear in dictionary at all exactly for the purpose of telling the caller that he may not get knowledge of scroll lock status.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-01T19:01:12Z",
            "diff_hunk": "@@ -0,0 +1,222 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kScrollLock = 0x80,\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+\n+/// A helper function to be used to load the libX11\n+static bool os_xlib_open(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// A helper function to be used to get the pointer of the function to be used\n+static bool os_xlib_dlsym(const char *const name, void **const ptr,\n+                       const char **const err)\n+{\n+  const int uds_ret = uv_dlsym(&xlib, name, ptr);\n+  if (uds_ret != 0) {\n+    *err = \"Failed to retrieve the function from X11 library\";\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// Get the status of the Capslock, Numlock and Scrolllock in linux\n+static bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_open(err)) {\n+    return false;\n+  }\n+  _XDisplay *(*_XOpenDisplay)(void *);\n+  int (*_XCloseDisplay)(_XDisplay *);\n+  _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get the status of the Capslock, Numlock and Scrolllock in windows\n+bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get the status of the Capslock, Numlock and Scrolllock in MacOS\n+static bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums, stateScroll;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#endif\n+\n+/// A helper function to be used by `nvim_get_keyboard_mods_state` API function\n+/// giving the information about the Capslock, Numlock and Scrollock state.\n+///\n+/// @param dict[out]  The dictionary holding the information of the\n+///                   different mods\n+///\n+/// @param err[out]   The error if encountered, otherwise will be NULL\n+///\n+/// @return           `true` if no error occurs\n+///                   otherwise `false`\n+bool os_mods_status(Dictionary *const dict, const char **const err )\n+{\n+  char mods = 0;\n+  *err = NULL;\n+  bool status = os_get_locks_status(&mods, err);\n+  if (!status) {\n+      return false;\n+  }\n+  if (mods & kCapsLock) {\n+    PUT(*dict, \"Capslocks\", BOOLEAN_OBJ(true));\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178466353",
            "id": 178466353,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQ2NjM1Mw==",
            "original_commit_id": "c4107a9cddea2f32dd3ca57d851e43717cf6ce89",
            "original_line": 296,
            "original_position": 214,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108526400,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466353/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178466381"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466381"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is not descriptive. You need to specify what keys are possible exactly, what are corresponding values (booleans) and under which circumstances they appear (i.e. state that if lock is checked it will appear, if it is not then it won’t).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-01T19:02:52Z",
            "diff_hunk": "@@ -1562,3 +1563,18 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Capslock, Numlock and Scrollock\n+///\n+/// @return the dictionary holding the data about the locks",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178466381",
            "id": 178466381,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQ2NjM4MQ==",
            "original_commit_id": "c4107a9cddea2f32dd3ca57d851e43717cf6ce89",
            "original_line": 1569,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 108526432,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466381/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178466381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178511510"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178511510"
                }
            },
            "author_association": "MEMBER",
            "body": "Should always return keys. If the state is unknown return `false` as the value. ",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T09:01:07Z",
            "diff_hunk": "@@ -1036,5 +1036,13 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('give empty dictionary for testing as they are off in CI', function()\n+      -- For this test, if you are testing on your PC, turn the capslock,\n+      -- Numlock and Scrollock off, this tests the presense of these mods\n+      -- and on the environment of testing they are supposed to be turn off\n+      eq({}, meths.get_keyboard_mods_state())",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178511510",
            "id": 178511510,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODUxMTUxMA==",
            "original_commit_id": "c4107a9cddea2f32dd3ca57d851e43717cf6ce89",
            "original_line": 1044,
            "original_position": 9,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 108576600,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178511510/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178511510",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178559206"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559206"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Oh thats it, I did reverse when I was implementing nvim_get_commands, if they were not there don't add them, BTW I will add it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T14:49:24Z",
            "diff_hunk": "@@ -1036,5 +1036,13 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('give empty dictionary for testing as they are off in CI', function()\n+      -- For this test, if you are testing on your PC, turn the capslock,\n+      -- Numlock and Scrollock off, this tests the presense of these mods\n+      -- and on the environment of testing they are supposed to be turn off\n+      eq({}, meths.get_keyboard_mods_state())",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178559206",
            "id": 178559206,
            "in_reply_to_id": 178511510,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU1OTIwNg==",
            "original_commit_id": "c4107a9cddea2f32dd3ca57d851e43717cf6ce89",
            "original_line": 1044,
            "original_position": 9,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 108633723,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559206/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559206",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178559235"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559235"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, sure\r\n",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T14:49:32Z",
            "diff_hunk": "@@ -1562,3 +1563,18 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Capslock, Numlock and Scrollock\n+///\n+/// @return the dictionary holding the data about the locks",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178559235",
            "id": 178559235,
            "in_reply_to_id": 178466381,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU1OTIzNQ==",
            "original_commit_id": "c4107a9cddea2f32dd3ca57d851e43717cf6ce89",
            "original_line": 1569,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 108633760,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559235/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559235",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178559313"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559313"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I also find it right now",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T14:49:52Z",
            "diff_hunk": "@@ -0,0 +1,222 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kScrollLock = 0x80,\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+\n+/// A helper function to be used to load the libX11\n+static bool os_xlib_open(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// A helper function to be used to get the pointer of the function to be used\n+static bool os_xlib_dlsym(const char *const name, void **const ptr,\n+                       const char **const err)\n+{\n+  const int uds_ret = uv_dlsym(&xlib, name, ptr);\n+  if (uds_ret != 0) {\n+    *err = \"Failed to retrieve the function from X11 library\";\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// Get the status of the Capslock, Numlock and Scrolllock in linux\n+static bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_open(err)) {\n+    return false;\n+  }\n+  _XDisplay *(*_XOpenDisplay)(void *);\n+  int (*_XCloseDisplay)(_XDisplay *);\n+  _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get the status of the Capslock, Numlock and Scrolllock in windows\n+bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get the status of the Capslock, Numlock and Scrolllock in MacOS\n+static bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums, stateScroll;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#endif\n+\n+/// A helper function to be used by `nvim_get_keyboard_mods_state` API function\n+/// giving the information about the Capslock, Numlock and Scrollock state.\n+///\n+/// @param dict[out]  The dictionary holding the information of the\n+///                   different mods\n+///\n+/// @param err[out]   The error if encountered, otherwise will be NULL\n+///\n+/// @return           `true` if no error occurs\n+///                   otherwise `false`\n+bool os_mods_status(Dictionary *const dict, const char **const err )\n+{\n+  char mods = 0;\n+  *err = NULL;\n+  bool status = os_get_locks_status(&mods, err);\n+  if (!status) {\n+      return false;\n+  }\n+  if (mods & kCapsLock) {\n+    PUT(*dict, \"Capslocks\", BOOLEAN_OBJ(true));\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178559313",
            "id": 178559313,
            "in_reply_to_id": 178466353,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU1OTMxMw==",
            "original_commit_id": "c4107a9cddea2f32dd3ca57d851e43717cf6ce89",
            "original_line": 296,
            "original_position": 214,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108633851,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559313/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178559350"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559350"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Oks, no problem",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T14:50:03Z",
            "diff_hunk": "@@ -0,0 +1,222 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kScrollLock = 0x80,\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+\n+/// A helper function to be used to load the libX11\n+static bool os_xlib_open(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// A helper function to be used to get the pointer of the function to be used\n+static bool os_xlib_dlsym(const char *const name, void **const ptr,\n+                       const char **const err)\n+{\n+  const int uds_ret = uv_dlsym(&xlib, name, ptr);\n+  if (uds_ret != 0) {\n+    *err = \"Failed to retrieve the function from X11 library\";\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// Get the status of the Capslock, Numlock and Scrolllock in linux\n+static bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_open(err)) {\n+    return false;\n+  }\n+  _XDisplay *(*_XOpenDisplay)(void *);\n+  int (*_XCloseDisplay)(_XDisplay *);\n+  _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178559350",
            "id": 178559350,
            "in_reply_to_id": 178466023,
            "line": 137,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU1OTM1MA==",
            "original_commit_id": "c4107a9cddea2f32dd3ca57d851e43717cf6ce89",
            "original_line": 137,
            "original_position": 104,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": 118,
            "pull_request_review_id": 108633905,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559350/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559350",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178559370"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559370"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T14:50:09Z",
            "diff_hunk": "@@ -0,0 +1,222 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kScrollLock = 0x80,\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+\n+/// A helper function to be used to load the libX11\n+static bool os_xlib_open(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// A helper function to be used to get the pointer of the function to be used\n+static bool os_xlib_dlsym(const char *const name, void **const ptr,\n+                       const char **const err)\n+{\n+  const int uds_ret = uv_dlsym(&xlib, name, ptr);\n+  if (uds_ret != 0) {\n+    *err = \"Failed to retrieve the function from X11 library\";\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// Get the status of the Capslock, Numlock and Scrolllock in linux\n+static bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_open(err)) {\n+    return false;\n+  }\n+  _XDisplay *(*_XOpenDisplay)(void *);\n+  int (*_XCloseDisplay)(_XDisplay *);\n+  _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get the status of the Capslock, Numlock and Scrolllock in windows\n+bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get the status of the Capslock, Numlock and Scrolllock in MacOS\n+static bool os_get_locks_status(char *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums, stateScroll;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#endif\n+\n+/// A helper function to be used by `nvim_get_keyboard_mods_state` API function\n+/// giving the information about the Capslock, Numlock and Scrollock state.\n+///\n+/// @param dict[out]  The dictionary holding the information of the\n+///                   different mods\n+///\n+/// @param err[out]   The error if encountered, otherwise will be NULL\n+///\n+/// @return           `true` if no error occurs\n+///                   otherwise `false`",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178559370",
            "id": 178559370,
            "in_reply_to_id": 178466204,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU1OTM3MA==",
            "original_commit_id": "c4107a9cddea2f32dd3ca57d851e43717cf6ce89",
            "original_line": 203,
            "original_position": 203,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108633929,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559370/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178559370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178652933"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178652933"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Still not specific. And below line has unwanted space.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:15:55Z",
            "diff_hunk": "@@ -1562,3 +1563,18 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Caps/Num lock\n+///\n+/// @return the dictionary holding the data about the locks",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178652933",
            "id": 178652933,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1MjkzMw==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 1569,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 108745651,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178652933/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178652933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178653244"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653244"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ah yes, may be missed this detail, sorry",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:17:23Z",
            "diff_hunk": "@@ -1562,3 +1563,18 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Caps/Num lock\n+///\n+/// @return the dictionary holding the data about the locks",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178653244",
            "id": 178653244,
            "in_reply_to_id": 178652933,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1MzI0NA==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 1569,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 108746036,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653244/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653244",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178653291"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653291"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This function gets state for scroll lock as well.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:17:35Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178653291",
            "id": 178653291,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1MzI5MQ==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108746091,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653291/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178653352"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653352"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "No empty line between parameters.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:17:51Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178653352",
            "id": 178653352,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1MzM1Mg==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 84,
            "original_position": 84,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108746162,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653352/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653352",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178653644"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653644"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "No, the scroll lock is not working in MacOS, so shouldn't we drop it, as you said?",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:19:12Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178653644",
            "id": 178653644,
            "in_reply_to_id": 178653291,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1MzY0NA==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108746520,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653644/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178653674"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653674"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:19:21Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178653674",
            "id": 178653674,
            "in_reply_to_id": 178653352,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1MzY3NA==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 84,
            "original_position": 84,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108746564,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653674/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178653674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178654043"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654043"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Function does not do anything useful due to this. BTW, is not there a possibility to get scroll lock state there as well? It is better to omit relevant key in OS X only rather then everywhere.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:21:07Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178654043",
            "id": 178654043,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NDA0Mw==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 140,
            "original_position": 140,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108747039,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654043/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654043",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178654238"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654238"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Should have `#else` with a dummy returning true and zero mask I think.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:21:57Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178654238",
            "id": 178654238,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NDIzOA==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 274,
            "original_position": 207,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108747283,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654238/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178654775"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654775"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If you do not want to add `#ifdef` here (understandable, I also would not) then define `kOSModQueryMask` enum near `os_get_locks_status` function and write code like\r\n\r\n```C\r\nif (kOSModQueryMask & kCapsLock) {\r\n  PUT(…);\r\n}\r\n```\r\n\r\nOr, probably better, make this mask another return: not needed now, but will help refactoring a thing into providers.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:24:28Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, const char **const err )\n+{\n+  int mods = 0;\n+  *err = NULL;\n+  bool status = os_get_locks_status(&mods, err);\n+  if (!status) {\n+      return false;\n+  }\n+  PUT(*dict, \"CapsLock\", BOOLEAN_OBJ(mods & kCapsLock));\n+  PUT(*dict, \"NumLock\", BOOLEAN_OBJ(mods & kNumLock));",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178654775",
            "id": 178654775,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NDc3NQ==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 229,
            "original_position": 229,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108747951,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654775/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654775",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178654949"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654949"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`status` variable may be removed, such code is normally written like `if (!os_get_locks_status(…))`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:25:08Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, const char **const err )\n+{\n+  int mods = 0;\n+  *err = NULL;\n+  bool status = os_get_locks_status(&mods, err);\n+  if (!status) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178654949",
            "id": 178654949,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NDk0OQ==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 225,
            "original_position": 225,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108748144,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654949/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654949",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178654980"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654980"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Okk, here it is possible to get the scrollock, and may be I forgot to remove this line, thanks for the review :smiley: ",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:25:15Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178654980",
            "id": 178654980,
            "in_reply_to_id": 178654043,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NDk4MA==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 140,
            "original_position": 140,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108748186,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654980/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178654980",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178655059"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655059"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Here is unneeded space.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:25:36Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, const char **const err )",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178655059",
            "id": 178655059,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NTA1OQ==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 220,
            "original_position": 220,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108748285,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655059/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178655138"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655138"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, sure, I think this would be perfect, whatif there was some other platform using neovim",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:25:57Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178655138",
            "id": 178655138,
            "in_reply_to_id": 178654238,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NTEzOA==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 274,
            "original_position": 207,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108748387,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655138/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178655176"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655176"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is universal wrapper, nothing to do with MacOS. And missing scroll lock.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:26:08Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps Lock state in MacOS",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178655176",
            "id": 178655176,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NTE3Ng==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 210,
            "original_position": 210,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108748432,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655176/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655176",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178655413"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655413"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Function should return here.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:27:03Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178655413",
            "id": 178655413,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NTQxMw==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 64,
            "original_position": 64,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108748692,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655413/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178655527"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655527"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing scroll lock and documentation.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:27:37Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178655527",
            "id": 178655527,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NTUyNw==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 45,
            "original_position": 45,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108748838,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655527/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178655655"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655655"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing name and references in documentation of other functions (name is only to be able to make those references, it could not be in an argument type for obvious reasons).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:28:14Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178655655",
            "id": 178655655,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NTY1NQ==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108748999,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655655/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178655655",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178656175"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178656175"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I only said to drop it *on Mac OS X*. Not *everywhere*.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:30:25Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178656175",
            "id": 178656175,
            "in_reply_to_id": 178653291,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NjE3NQ==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108749633,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178656175/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178656175",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178657688"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178657688"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "One thing is here unclear, \r\n\r\n```\r\n///\r\n/// @param[out]  dict  Pointer to dictionary where information about modifiers\r\n///                    is to be dumped.\r\n/// @param[out]  err  Location where error message is to be saved, set to NULL\r\n///                   if no error.\r\n///\r\n/// @return true in case of error, false otherwise.\r\n```\r\nThe code you provided, there was a space after the params, before the @ return",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:37:05Z",
            "diff_hunk": "@@ -1562,3 +1563,18 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Caps/Num lock\n+///\n+/// @return the dictionary holding the data about the locks",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178657688",
            "id": 178657688,
            "in_reply_to_id": 178652933,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1NzY4OA==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 1569,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 108751384,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178657688/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178657688",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178658827"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178658827"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Just a copy, replace error",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:42:10Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps Lock state in MacOS",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178658827",
            "id": 178658827,
            "in_reply_to_id": 178655176,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY1ODgyNw==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 210,
            "original_position": 210,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108752770,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178658827/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178658827",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178660546"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178660546"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Line below contains function declaration, not documentation. It has space before parenthesis.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T21:49:47Z",
            "diff_hunk": "@@ -1562,3 +1563,18 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Caps/Num lock\n+///\n+/// @return the dictionary holding the data about the locks",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178660546",
            "id": 178660546,
            "in_reply_to_id": 178652933,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY2MDU0Ng==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 1569,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 108754822,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178660546/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178660546",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178666000"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178666000"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I want some info about this `kOSModQueryMask`, why its useful, what its value will be, do you mean, I make the enum of the integer pointer `mods`, so its value can be used in more convenient manner",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-02T22:16:24Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return (GetKeyState(VK_CAPITAL) & 0x0001) != 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmas\n+///\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, const char **const err )\n+{\n+  int mods = 0;\n+  *err = NULL;\n+  bool status = os_get_locks_status(&mods, err);\n+  if (!status) {\n+      return false;\n+  }\n+  PUT(*dict, \"CapsLock\", BOOLEAN_OBJ(mods & kCapsLock));\n+  PUT(*dict, \"NumLock\", BOOLEAN_OBJ(mods & kNumLock));",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178666000",
            "id": 178666000,
            "in_reply_to_id": 178654775,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY2NjAwMA==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 229,
            "original_position": 229,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 108761119,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178666000/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178666000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178963837"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178963837"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This will yield three false values for the `#else` case. It should yield empty dictionary instead, *for querying lock states being not supported*. And I do not see scroll lock support in OS X code as well, so this key also must be out in this case. This is exactly what I was talking about when I said about returning mask.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:12:46Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#else\n+/// A dummy function to be used by os_mod_status() if none of the above\n+/// platforms were detected\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask. Sets to 0 for dummy\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error. No error detected for dummy\n+///\n+/// @return true for all the cases\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps/Scroll Lock state\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, const char **const err)\n+{\n+  int mods = 0;\n+  *err = NULL;\n+  if (!os_get_locks_status(&mods, err)) {\n+      return false;\n+  }\n+  PUT(*dict, \"CapsLock\", BOOLEAN_OBJ(mods & kCapsLock));\n+  PUT(*dict, \"NumLock\", BOOLEAN_OBJ(mods & kNumLock));\n+  PUT(*dict, \"ScrollLock\", BOOLEAN_OBJ(mods & kScrollLock));",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178963837",
            "id": 178963837,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2MzgzNw==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 248,
            "original_position": 248,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178963837/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178963837",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178964951"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178964951"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`||` returns a boolean, you should not check that against zero. Also you need to restore `xlib_dlsym`, it gave more precise error messages, nothing prevents `*err` from pointing to a static buffer with constructed string there.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:17:01Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178964951",
            "id": 178964951,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2NDk1MQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 75,
            "original_position": 75,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178964951/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178964951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178965112"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178965112"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing reason why library failed to open in error message.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:17:40Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178965112",
            "id": 178965112,
            "in_reply_to_id": 178655413,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2NTExMg==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 64,
            "original_position": 64,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178965112/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178965112",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178965309"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178965309"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing exact number returned by XkbGetState.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:18:20Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178965309",
            "id": 178965309,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2NTMwOQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 117,
            "original_position": 117,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178965309/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178965309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178965505"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178965505"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Wondering whether this or the latter function have more advanced error reporting.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:19:10Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178965505",
            "id": 178965505,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2NTUwNQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 186,
            "original_position": 186,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178965505/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178965505",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178966214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966214"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It should be documented somewhere that those values are fo X11 in case somebody would be wondering why such weird values and not 1-2-4, or will want to add a new one. Or, maybe cleaner, do not have some priveledged system and really have 1-2-4 here and another enum below for X11.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:22:07Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178966214",
            "id": 178966214,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2NjIxNA==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 55,
            "original_position": 49,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966214/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178966383"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966383"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing dot and pointer to the bitmask enum.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:22:52Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178966383",
            "id": 178966383,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2NjM4Mw==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 87,
            "original_position": 87,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966383/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178966410"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966410"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing dot and pointer to the bitmask enum.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:22:59Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178966410",
            "id": 178966410,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2NjQxMA==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966410/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966410",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178966434"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966434"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing dot and pointer to the bitmask enum.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:23:06Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178966434",
            "id": 178966434,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2NjQzNA==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 160,
            "original_position": 160,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966434/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178966434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178967454"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967454"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think to not have failures which are doing nothing more then annoy user it is better to check that\r\n\r\n1. Result of the method is either one of the known errors or a dictionary.\r\n2. If result is a dictionary then it contains only keys from a known set of three keys.\r\n3. If result is a dictionary then all values attached to keys are booleans.\r\n\r\nAnd no specific values.\r\n\r\nAlso unless CI has X11 libraries available and X server running (so connecting to it works), should not that produce error?",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:27:32Z",
            "diff_hunk": "@@ -1036,5 +1036,13 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('give empty dictionary for testing as they are off in CI', function()\n+      -- For this test, if you are testing on your PC, turn the capslock,\n+      -- Numlock and Scrollock off, this tests the presense of these mods\n+      -- and on the environment of testing they are supposed to be turn off\n+      eq({CapsLock = false, NumLock = false, ScrollLock = false}, meths.get_keyboard_mods_state())\n+    end)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178967454",
            "id": 178967454,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2NzQ1NA==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 1068,
            "original_position": 10,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967454/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178967799"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967799"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`ios` should be declared here. Based on the later interactions maybe also be `const io_service_t`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:28:57Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178967799",
            "id": 178967799,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2Nzc5OQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 173,
            "original_position": 173,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967799/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967799",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178967885"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967885"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`mdict` should be declared here. Probably also `const`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:29:17Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178967885",
            "id": 178967885,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2Nzg4NQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 172,
            "original_position": 172,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967885/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967885",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178967959"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967959"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "One variable per line. And near the place of actual usage, not here.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:29:37Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178967959",
            "id": 178967959,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2Nzk1OQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 171,
            "original_position": 171,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967959/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178967959",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178968157"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968157"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`ioc` should be declared here.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:30:26Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178968157",
            "id": 178968157,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2ODE1Nw==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 226,
            "original_position": 183,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968157/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178968403"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968403"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Message does not tell about which state failed to lock. And based on function name I would say that you do not *lock* state, you *get* state of the lock.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:31:28Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178968403",
            "id": 178968403,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2ODQwMw==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 193,
            "original_position": 193,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968403/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968403",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178968464"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968464"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Same as above.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:31:44Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178968464",
            "id": 178968464,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2ODQ2NA==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 199,
            "original_position": 199,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968464/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178968611"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968611"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I would really go with a single boolean, nothing would be bad if you do not defer the checks.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:32:21Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178968611",
            "id": 178968611,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2ODYxMQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 254,
            "original_position": 204,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968611/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968611",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178968659"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968659"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "There is `|=` operator.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:32:32Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178968659",
            "id": 178968659,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2ODY1OQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 203,
            "original_position": 203,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968659/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178968685"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968685"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`|=`",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:32:41Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178968685",
            "id": 178968685,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2ODY4NQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 206,
            "original_position": 206,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968685/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178968753"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968753"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing dot.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:32:59Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#else\n+/// A dummy function to be used by os_mod_status() if none of the above\n+/// platforms were detected\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask. Sets to 0 for dummy",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178968753",
            "id": 178968753,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2ODc1Mw==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 216,
            "original_position": 216,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968753/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178968771"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968771"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing dot.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:33:05Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#else\n+/// A dummy function to be used by os_mod_status() if none of the above\n+/// platforms were detected\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask. Sets to 0 for dummy\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error. No error detected for dummy",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178968771",
            "id": 178968771,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2ODc3MQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 218,
            "original_position": 218,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968771/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968771",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178968849"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968849"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Too long for a summary.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:33:24Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#else\n+/// A dummy function to be used by os_mod_status() if none of the above\n+/// platforms were detected",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178968849",
            "id": 178968849,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2ODg0OQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 213,
            "original_position": 213,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968849/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178968849",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178969193"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178969193"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing error number in message.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:34:51Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178969193",
            "id": 178969193,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2OTE5Mw==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 98,
            "original_position": 98,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178969193/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178969193",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r178969701"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/178969701"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Since there already is `Dictionary` then it is fine to carry `Error*` over as well. And `Error` *does* have a buffer you could format messages into, with `api_set_error` function being already printf-like.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-03T21:37:04Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#else\n+/// A dummy function to be used by os_mod_status() if none of the above\n+/// platforms were detected\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask. Sets to 0 for dummy\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error. No error detected for dummy\n+///\n+/// @return true for all the cases\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps/Scroll Lock state\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, const char **const err)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r178969701",
            "id": 178969701,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODk2OTcwMQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 239,
            "original_position": 239,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109119161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178969701/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/178969701",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179148187"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179148187"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I thought using this err message will enhance the abstraction, suppose if the error message used was something so specific, then it may be hard to understand for the person who is using this function, but if the error is supposed for the core developers, I don't think it would be needed, because, the presence of error would be easily traced by `gdb` so, why is there a need, I thought that providing simple error message will be better",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T13:55:33Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+enum {\n+    kNumLock = 0x10,\n+    kCapsLock = 0x02,\n+};\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179148187",
            "id": 179148187,
            "in_reply_to_id": 178655413,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE0ODE4Nw==",
            "original_commit_id": "bc02e02c3aba278565c97289b264c8a3ae339c02",
            "original_line": 64,
            "original_position": 64,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109336472,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179148187/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179148187",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179148354"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179148354"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK I make the changes",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T13:55:56Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#else\n+/// A dummy function to be used by os_mod_status() if none of the above\n+/// platforms were detected\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask. Sets to 0 for dummy\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error. No error detected for dummy\n+///\n+/// @return true for all the cases\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps/Scroll Lock state\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, const char **const err)\n+{\n+  int mods = 0;\n+  *err = NULL;\n+  if (!os_get_locks_status(&mods, err)) {\n+      return false;\n+  }\n+  PUT(*dict, \"CapsLock\", BOOLEAN_OBJ(mods & kCapsLock));\n+  PUT(*dict, \"NumLock\", BOOLEAN_OBJ(mods & kNumLock));\n+  PUT(*dict, \"ScrollLock\", BOOLEAN_OBJ(mods & kScrollLock));",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179148354",
            "id": 179148354,
            "in_reply_to_id": 178963837,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE0ODM1NA==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 248,
            "original_position": 248,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109336667,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179148354/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179148354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179149041"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179149041"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This makes the sense to me now",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T13:57:45Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#else\n+/// A dummy function to be used by os_mod_status() if none of the above\n+/// platforms were detected\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask. Sets to 0 for dummy\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error. No error detected for dummy\n+///\n+/// @return true for all the cases\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps/Scroll Lock state\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, const char **const err)\n+{\n+  int mods = 0;\n+  *err = NULL;\n+  if (!os_get_locks_status(&mods, err)) {\n+      return false;\n+  }\n+  PUT(*dict, \"CapsLock\", BOOLEAN_OBJ(mods & kCapsLock));\n+  PUT(*dict, \"NumLock\", BOOLEAN_OBJ(mods & kNumLock));\n+  PUT(*dict, \"ScrollLock\", BOOLEAN_OBJ(mods & kScrollLock));",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179149041",
            "id": 179149041,
            "in_reply_to_id": 178963837,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE0OTA0MQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 248,
            "original_position": 248,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109337469,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179149041/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179149041",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179209960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179209960"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, it was better",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T16:49:21Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179209960",
            "id": 179209960,
            "in_reply_to_id": 178964951,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTIwOTk2MA==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 75,
            "original_position": 75,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109411358,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179209960/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179209960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179219206"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179219206"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is really handy, I wanted to add the error handling in printf like way",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T17:20:11Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#else\n+/// A dummy function to be used by os_mod_status() if none of the above\n+/// platforms were detected\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask. Sets to 0 for dummy\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error. No error detected for dummy\n+///\n+/// @return true for all the cases\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  return true;\n+}\n+#endif\n+\n+/// Get information about Num/Caps/Scroll Lock state\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, const char **const err)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179219206",
            "id": 179219206,
            "in_reply_to_id": 178969701,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTIxOTIwNg==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 239,
            "original_position": 239,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109422259,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179219206/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179219206",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179219471"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179219471"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "e will always be 0, its hardcoded, as per the [ans](https://stackoverflow.com/questions/23083523/what-does-xclosedisplay-return?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa) of the stackoverflow.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T17:21:04Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179219471",
            "id": 179219471,
            "in_reply_to_id": 178969193,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTIxOTQ3MQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 98,
            "original_position": 98,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109422603,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179219471/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179219471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179219798"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179219798"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ok, I edited it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T17:22:13Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods = *mods | kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return true;\n+}\n+#else\n+/// A dummy function to be used by os_mod_status() if none of the above\n+/// platforms were detected",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179219798",
            "id": 179219798,
            "in_reply_to_id": 178968849,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTIxOTc5OA==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 213,
            "original_position": 213,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109422978,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179219798/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179219798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179220393"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179220393"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Done corrected",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T17:24:06Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179220393",
            "id": 179220393,
            "in_reply_to_id": 178968464,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTIyMDM5Mw==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 199,
            "original_position": 199,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109423676,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179220393/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179220393",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179220408"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179220408"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Corrected",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T17:24:09Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179220408",
            "id": 179220408,
            "in_reply_to_id": 178968403,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTIyMDQwOA==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 193,
            "original_position": 193,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109423692,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179220408/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179220408",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179220479"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179220479"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, sure, we are using C99",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T17:24:25Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179220479",
            "id": 179220479,
            "in_reply_to_id": 178968157,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTIyMDQ3OQ==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 226,
            "original_position": 183,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109423781,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179220479/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179220479",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179221487"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179221487"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I think I really should change it, 0x01, 0x02, 0x04 would be much better.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T17:27:35Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179221487",
            "id": 179221487,
            "in_reply_to_id": 178966214,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTIyMTQ4Nw==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 55,
            "original_position": 49,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109424928,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179221487/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179221487",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179245056"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179245056"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "two Boolean is I think provide more information, as they state why use them, so.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T18:46:41Z",
            "diff_hunk": "@@ -0,0 +1,250 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+    char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+#endif\n+\n+#ifdef WIN32\n+#include <Winuser.h>\n+#endif\n+\n+#ifdef __APPLE__\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+#endif\n+\n+\n+/// Masks for the specific lock status\n+typedef enum {\n+    kNumLock = 0x10,  ///< Mask used to check if the NumLock is active\n+    kCapsLock = 0x02,  ///< Mask used to check if the NumLock is active\n+    kScrollLock = 0x80,  ///< Mask used to check if the NumLock is active\n+} KbdLocks;\n+\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(const char **const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    *err = \"Failed to open library libX11\";\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if ((uv_dlsym(&xlib, \"XOpenDisplay\", (void **)&_XOpenDisplay)\n+       || uv_dlsym(&xlib, \"XCloseDisplay\", (void **)&_XCloseDisplay)\n+       || uv_dlsym(&xlib, \"XkbGetState\", (void **)&_XkbGetState)) != 0) {\n+    *err = \"Unable to get the functions of X11\";\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+#define CLOSE_DISPLAY(display) \\\n+  do { \\\n+    const int e = _XCloseDisplay(display); \\\n+    if (e) { \\\n+      *err = \"XCloseDisplay unable to close the display\"; \\\n+      return false; \\\n+    } \\\n+  } while (0)\n+  *mods = 0;\n+  *err = NULL;\n+  if (!os_xlib_init(err)) {\n+    return false;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    *err = \"Couldn't open the display\";\n+    return false;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    *err = \"Non-zero status returned by XkbGetState\";\n+    CLOSE_DISPLAY(display);\n+  }\n+  *mods = xkb_state.data[kLockedModsOffset];\n+\n+  CLOSE_DISPLAY(display);\n+  return true;\n+#undef CLOSE_DISPLAY\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *mods = 0;\n+  *err = NULL;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods = *mods | kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods = *mods | kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods = *mods | kScrollLock;\n+  }\n+  return true;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a bitmask\n+/// @param[out]  err  Location where error message is to be saved, set to NULL\n+///                   if no error.\n+///\n+/// @return true in case of error, false otherwise.\n+static bool os_get_locks_status(int *const mods, const char **const err)\n+{\n+  *err = NULL;\n+  io_service_t ios;\n+  io_connect_t ioc;\n+  CFMutableDictionaryRef mdict;\n+  bool stateCaps, stateNums;\n+  mdict = IOServiceMatching(kIOHIDSystemClass);\n+  ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                    (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    *err = \"Unable to start service to query data\";\n+    return false;\n+  }\n+\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    *err = \"Unable to query data\";\n+    return false;\n+  }\n+  IOObjectRelease(ios);\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    *err = \"Unable to lock the state\";\n+    return false;\n+  }\n+  if (stateCaps) {\n+    *mods = *mods | kCapsLock;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179245056",
            "id": 179245056,
            "in_reply_to_id": 178968611,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI0NTA1Ng==",
            "original_commit_id": "05e6bf1c3c4406711fed44cee303d89ae62b81cd",
            "original_line": 254,
            "original_position": 204,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109453401,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179245056/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179245056",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179285181"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285181"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It is by no means a pointer to enum, it is a pointer to a mere integer and enum is nothing more then a place where you can see possible values. Though if you want to have a type for mask (normally mask has no type, and especially not something other then `int` or `unsigned` unless you really have many bits or need to conserve space) it would be good to make reference to enum only in type documentation.\r\n\r\nIn any case Neovim types are CamelCase. And they by no means should ever end with `_t`, that is oftenly used by various system headers. You may see *legacy* types ending with `_T`, but I repeat that Neovim ones are CamelCase.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:14:40Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179285181",
            "id": 179285181,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4NTE4MQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 167,
            "original_position": 167,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285181/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179285383"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285383"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing documentation.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:15:29Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179285383",
            "id": 179285383,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4NTM4Mw==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 25,
            "original_position": 25,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285383/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179285708"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285708"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Specifically need to point that this is an `offsetof` of the relevant (`locked_mods`) attribute of original `XStatus` structure.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:16:44Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179285708",
            "id": 179285708,
            "in_reply_to_id": 179285383,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4NTcwOA==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 25,
            "original_position": 25,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285708/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285708",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179285929"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285929"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Types are CamelCase.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:17:38Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179285929",
            "id": 179285929,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4NTkyOQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 34,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285929/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179285929",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179286030"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286030"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing import of generated function declarations after all types were defined.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:18:00Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179286030",
            "id": 179286030,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4NjAzMA==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 63,
            "original_position": 65,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286030/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286030",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179286124"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286124"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "See comment somewhere above or below (depends on which GH tab you view from: below in code, but above when sorted by time).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:18:26Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179286124",
            "id": 179286124,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4NjEyNA==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 64,
            "original_position": 64,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286124/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179286270"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286270"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "See comment somewhere above or below (depends on which GH tab you view from: below in code, but above when sorted by time).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:19:06Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179286270",
            "id": 179286270,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4NjI3MA==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 115,
            "original_position": 115,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286270/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286270",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179286466"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286466"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "API errors do not have error codes (unfortunately, there ought to be some locked identifiers but are no now).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:19:59Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179286466",
            "id": 179286466,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4NjQ2Ng==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 138,
            "original_position": 138,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286466/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286466",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179286679"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286679"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "See comment somewhere above.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:20:45Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179286679",
            "id": 179286679,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4NjY3OQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 193,
            "original_position": 193,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286679/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286679",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179286885"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286885"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "No error code.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:21:25Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179286885",
            "id": 179286885,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4Njg4NQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 129,
            "original_position": 129,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286885/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179286885",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179287116"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179287116"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Also should have no `\\n`. And what is the last argument doing here?",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:22:17Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179287116",
            "id": 179287116,
            "in_reply_to_id": 179286885,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4NzExNg==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 129,
            "original_position": 129,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179287116/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179287116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179287960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179287960"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Should have no `\\n`, no error code and no `libX11.so` directly in a string. Something like `(\"Unable to load \" XLIB_NAME \": %s\", uv_dlerror(&xlib))` (`XLIB_NAME` was as `%s` in my original code because `emsgf` messages are supposed to be translated and that is not the case here).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:25:27Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179287960",
            "id": 179287960,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4Nzk2MA==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 96,
            "original_position": 96,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179287960/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179287960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179289389"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179289389"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "No `\\n`, no error code and really no mention of `uv_dlsym`. These messages are *both* for developers and users, so they should omit some implementation details (in any case anybody familiar with the codebase or, at least, grep will find them), yet if possible provide enough information to answer user without reproducing the problem if he pops on GH with his issue (or allow user to solve problem himself if he is proficient enough).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:31:00Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179289389",
            "id": 179289389,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4OTM4OQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 80,
            "original_position": 80,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179289389/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179289389",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179289750"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179289750"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If you look at `man dlsym` you will see that it mentions “obtaining” addresses of symbols and not opening them. What is opening is `uv_dlopen`, symbols do not have any such state attached to be able to be opened.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:32:25Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179289750",
            "id": 179289750,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI4OTc1MA==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 79,
            "original_position": 79,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179289750/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179289750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179290108"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179290108"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Also there should be no `\\n` and no need to mention XkbGetState.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:33:58Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179290108",
            "id": 179290108,
            "in_reply_to_id": 179286466,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5MDEwOA==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 138,
            "original_position": 138,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179290108/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179290108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179290214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179290214"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Should be no `\\n`, no error code and no function.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T21:34:27Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179290214",
            "id": 179290214,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5MDIxNA==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 208,
            "original_position": 208,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179290214/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179290214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179296789"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179296789"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Should be no `\\n`, no error code and no function.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:02:42Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceGetMatchingService() Failed\");\n+    return -1;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179296789",
            "id": 179296789,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5Njc4OQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 219,
            "original_position": 219,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179296789/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179296789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179296813"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179296813"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Should be no `\\n`, no error code and no function.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:02:49Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceGetMatchingService() Failed\");\n+    return -1;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceOpen() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                      &stateCaps)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5778: Unable to query CapsLock state.\\n\"",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179296813",
            "id": 179296813,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5NjgxMw==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 230,
            "original_position": 230,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179296813/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179296813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179296831"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179296831"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Should be no `\\n`, no error code and no function.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:02:54Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceGetMatchingService() Failed\");\n+    return -1;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceOpen() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                      &stateCaps)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5778: Unable to query CapsLock state.\\n\"\n+                  \"IOHIDGetModifierLockState() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+\n+  bool stateNums;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDNumLockState,\n+                                      &stateNums)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5779: Unable to query NumLock state:\\n\"",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179296831",
            "id": 179296831,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5NjgzMQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 240,
            "original_position": 240,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179296831/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179296831",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179297463"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179297463"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is ambiguous: what is “an intereg specified for given OS” supposed to mean? Should be something like “-1 in case of error and a mask specifying which values in `mods` are valid otherwise” (no mention of OS because it is really not OS-specific, just we do not support linux terminal or wayland currently and have no providers either).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:05:55Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179297463",
            "id": 179297463,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5NzQ2Mw==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 197,
            "original_position": 197,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179297463/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179297463",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179298117"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179298117"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "See comment somewhere above.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:09:10Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceGetMatchingService() Failed\");\n+    return -1;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceOpen() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                      &stateCaps)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5778: Unable to query CapsLock state.\\n\"\n+                  \"IOHIDGetModifierLockState() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+\n+  bool stateNums;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDNumLockState,\n+                                      &stateNums)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5779: Unable to query NumLock state:\\n\"\n+                  \"IOHIDGetModifierLockState() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+  if (stateCaps) {\n+    *mods |= kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods |= kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return kCapsLock | kNumLock;\n+}\n+#else\n+/// Dummy function used in case of no known platform detected.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179298117",
            "id": 179298117,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5ODExNw==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 257,
            "original_position": 257,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179298117/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179298117",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179298489"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179298489"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It sounds like `err` contains description of location where error message is saved alongside with location itself. This is not the case, remove “and description”.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:10:57Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceGetMatchingService() Failed\");\n+    return -1;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceOpen() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                      &stateCaps)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5778: Unable to query CapsLock state.\\n\"\n+                  \"IOHIDGetModifierLockState() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+\n+  bool stateNums;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDNumLockState,\n+                                      &stateNums)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5779: Unable to query NumLock state:\\n\"\n+                  \"IOHIDGetModifierLockState() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+  if (stateCaps) {\n+    *mods |= kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods |= kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return kCapsLock | kNumLock;\n+}\n+#else\n+/// Dummy function used in case of no known platform detected.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return 0 for all the cases.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  return 0;\n+}\n+#endif\n+\n+/// Get information about Num/Caps/Scroll Lock state.\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location and description where error message is to",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179298489",
            "id": 179298489,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5ODQ4OQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 275,
            "original_position": 275,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179298489/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179298489",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179298753"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179298753"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "One variable per line. Also `os_mod` may be `const`, it is generally easier to read without assignments inside `if()`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:12:06Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceGetMatchingService() Failed\");\n+    return -1;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5777: Unable to initiate the service.\\n\"\n+                  \"IOServiceOpen() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                      &stateCaps)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5778: Unable to query CapsLock state.\\n\"\n+                  \"IOHIDGetModifierLockState() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+\n+  bool stateNums;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDNumLockState,\n+                                      &stateNums)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5779: Unable to query NumLock state:\\n\"\n+                  \"IOHIDGetModifierLockState() Failed: %d\", (int)kr);\n+    return -1;\n+  }\n+  if (stateCaps) {\n+    *mods |= kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods |= kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return kCapsLock | kNumLock;\n+}\n+#else\n+/// Dummy function used in case of no known platform detected.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return 0 for all the cases.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  return 0;\n+}\n+#endif\n+\n+/// Get information about Num/Caps/Scroll Lock state.\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return true in case of error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, Error *const err)\n+{\n+  mod_mask_t mods = 0, os_mod = 0;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179298753",
            "id": 179298753,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5ODc1Mw==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 281,
            "original_position": 281,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179298753/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179298753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179299049"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299049"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "These should be indented, one space between hash and text. Also I would really suggest to get rid of newlines below and above.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:13:27Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179299049",
            "id": 179299049,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5OTA0OQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299049/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299049",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179299093"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299093"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Indentation, lines.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:13:39Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179299093",
            "id": 179299093,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5OTA5Mw==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 40,
            "original_position": 40,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299093/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299093",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179299185"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299185"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Indentation, lines.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:14:08Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179299185",
            "id": 179299185,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5OTE4NQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 18,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299185/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179299438"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299438"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Also inconsistent, below you use `#if`..`#elif` for basically the same task.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-04T22:15:11Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179299438",
            "id": 179299438,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5OTQzOA==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 44,
            "original_position": 44,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109502846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299438/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179299438",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179437351"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179437351"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ok, got it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T11:57:18Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179437351",
            "id": 179437351,
            "in_reply_to_id": 179285181,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQzNzM1MQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 167,
            "original_position": 167,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109679204,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179437351/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179437351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179437449"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179437449"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "ok",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T11:57:48Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179437449",
            "id": 179437449,
            "in_reply_to_id": 179285929,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQzNzQ0OQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 34,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109679333,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179437449/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179437449",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179440322"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179440322"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Is the indentation is required for `include`s too, some of the files in neovim code use indentation for `include`s but some code don't use it, so it was ambiguous to me as earlier I used no space.\r\n\r\nI add space, if the coding style says",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T12:09:44Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179440322",
            "id": 179440322,
            "in_reply_to_id": 179299049,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MDMyMg==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109682579,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179440322/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179440322",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179441565"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179441565"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, I thought the OS or platform determines it, like I learn that scroll lock was in extended keyboard of MacOS, so thought about it. But yes, its a mask, better to write the mask",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T12:14:59Z",
            "diff_hunk": "@@ -0,0 +1,295 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#ifdef __linux__\n+\n+#define XLIB_NAME \"libX11.so.6\"\n+typedef void *_XDisplay;\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+///\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    xNumLock = 0x10,  ///< Mask for NumLock\n+    xCapsLock = 0x02,  ///< Mask for CapsLock\n+    xScrollLock = 0x80,  ///< Mask for ScrollLock\n+} xlib_KbdLocks;\n+\n+#endif\n+\n+#ifdef WIN32\n+\n+#include <Winuser.h>\n+\n+#endif\n+\n+#ifdef __APPLE__\n+\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+\n+#endif\n+\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+typedef int32_t mod_mask_t;\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E6000: Unable to open %s function from X11\\n\"\n+                  \"uv_dlsym Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5999: Unable to load libX11.so library\\n\"\n+                  \"uv_dlopen Failed: %s\", uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5666: Unable to open the display\\n\"\n+                  \"XOpenDisplay Failed\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"E5888: Unable to get keyboard state of the display\\n\"\n+                  \"XkbGetState Failed: %d\", status);\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & xNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & xCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & xScrollLock) {\n+    *mods |= xScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.\n+static mod_mask_t os_get_locks_status(mod_mask_t *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to enum KbdLocks.\n+/// @param[out]  err  Location and description where error message is to\n+///                   be saved.\n+///\n+/// @return -1 in case of error otherwise an integer specified for given OS.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179441565",
            "id": 179441565,
            "in_reply_to_id": 179297463,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ0MTU2NQ==",
            "original_commit_id": "8c75bc79f3209304a31bcd23342c122b542a2332",
            "original_line": 197,
            "original_position": 197,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109684099,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179441565/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179441565",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179601204"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179601204"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I would highly suggest to remove all spaces after `#` and reassign them manually. There are not too much things to indent, and these statements are definitely not one of those.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:07:20Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179601204",
            "id": 179601204,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwMTIwNA==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179601204/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179601204",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179601282"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179601282"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Still missing documentation.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:07:41Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179601282",
            "id": 179601282,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwMTI4Mg==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 22,
            "original_position": 22,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179601282/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179601282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179602423"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602423"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This looks obscure. Previous variant was absolutely fine, except for the naming of the type, this one adds *third* block of OS-specific things. One with types and one with actual functions are necessary because types are needed to be defined before including generated declarations and functions should be put after, but I do not really see why this needs to exist and additionally you have a bunch of needless magic numbers here.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:12:21Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179602423",
            "id": 179602423,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwMjQyMw==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 64,
            "original_position": 64,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602423/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179602689"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602689"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Return type here has all the reasons to be exactly the same type as `*mods`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:13:26Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179602689",
            "id": 179602689,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwMjY4OQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 124,
            "original_position": 124,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602689/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179602724"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602724"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Return type here has all the reasons to be exactly the same type as `*mods`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:13:35Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179602724",
            "id": 179602724,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwMjcyNA==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 174,
            "original_position": 174,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602724/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602724",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179602767"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602767"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Return type here has all the reasons to be exactly the same type as `*mods`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:13:45Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179602767",
            "id": 179602767,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwMjc2Nw==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 200,
            "original_position": 200,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602767/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179602821"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602821"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Return type here has all the reasons to be exactly the same type as `*mods`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:13:59Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");\n+    return kErrored;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the service.\");\n+    return kErrored;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                      &stateCaps)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query CapsLock state.\");\n+    return kErrored;\n+  }\n+\n+  bool stateNums;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDNumLockState,\n+                                      &stateNums)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query NumLock state.\");\n+    return kErrored;\n+  }\n+  if (stateCaps) {\n+    *mods |= kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods |= kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return kMacOSMod;\n+}\n+# else\n+/// Dummy function used in case of no known platform detected.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return Always return kUnknownOS.\n+static const OSModMask os_get_locks_status(int *const mods, Error *const err)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179602821",
            "id": 179602821,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwMjgyMQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 259,
            "original_position": 259,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602821/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179602821",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179603434"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179603434"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You may see errors in other files, they normally do not have dot at the end. E.g. in `src/nvim/api/vim.c` there are only two messages in `nvim_call_function` with a dot (apparently somebody did not read surrounding code too).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:16:26Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179603434",
            "id": 179603434,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwMzQzNA==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 83,
            "original_position": 83,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179603434/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179603434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179603507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179603507"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Dot.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:16:47Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179603507",
            "id": 179603507,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwMzUwNw==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 99,
            "original_position": 99,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179603507/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179603507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179603555"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179603555"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Dot.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:16:58Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179603555",
            "id": 179603555,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwMzU1NQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179603555/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179603555",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179604195"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604195"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Dot.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:19:49Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179604195",
            "id": 179604195,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNDE5NQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 141,
            "original_position": 141,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604195/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604195",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179604242"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604242"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Dot.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:20:03Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179604242",
            "id": 179604242,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNDI0Mg==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 210,
            "original_position": 210,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604242/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179604329"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604329"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Dot.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:20:24Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");\n+    return kErrored;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the service.\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179604329",
            "id": 179604329,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNDMyOQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 220,
            "original_position": 220,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604329/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604329",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179604534"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604534"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Also I see that this error mentions “initiating service” while function name states it is “getting matching service”.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:21:13Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179604534",
            "id": 179604534,
            "in_reply_to_id": 179604242,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNDUzNA==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 210,
            "original_position": 210,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604534/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604534",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179604775"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604775"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "And this error message is almost the same, but function now states it opens service. Both functions do not talk about initiating anything thus.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:22:06Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");\n+    return kErrored;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the service.\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179604775",
            "id": 179604775,
            "in_reply_to_id": 179604329,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNDc3NQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 220,
            "original_position": 220,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604775/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604775",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179604927"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604927"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You are not using `kr` so it is not needed at all.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:22:43Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");\n+    return kErrored;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the service.\");\n+    return kErrored;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179604927",
            "id": 179604927,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNDkyNw==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 226,
            "original_position": 226,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604927/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604927",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179604967"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604967"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Remove `kr`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:22:56Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");\n+    return kErrored;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179604967",
            "id": 179604967,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNDk2Nw==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 216,
            "original_position": 216,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604967/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179604992"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604992"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Remove `kr`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:23:01Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");\n+    return kErrored;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179604992",
            "id": 179604992,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNDk5Mg==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 215,
            "original_position": 215,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604992/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179604992",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179605046"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179605046"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Remove `kr`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:23:15Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");\n+    return kErrored;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the service.\");\n+    return kErrored;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                      &stateCaps)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query CapsLock state.\");\n+    return kErrored;\n+  }\n+\n+  bool stateNums;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDNumLockState,",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179605046",
            "id": 179605046,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNTA0Ng==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 235,
            "original_position": 235,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179605046/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179605046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179605063"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179605063"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Dot.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:23:19Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");\n+    return kErrored;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the service.\");\n+    return kErrored;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                      &stateCaps)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query CapsLock state.\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179605063",
            "id": 179605063,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNTA2Mw==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 230,
            "original_position": 230,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179605063/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179605063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179605089"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179605089"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Dot.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:23:25Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return kErrored;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display.\");\n+    return kErrored;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display.\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kLinuxMod;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kWin32Mod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kWin32Mod;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kMacOSMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the IOService.\");\n+    return kErrored;\n+  }\n+\n+  io_connect_t ioc;\n+  kern_return_t kr;\n+  if ((kr = IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                          &ioc)) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to initiate the service.\");\n+    return kErrored;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                      &stateCaps)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query CapsLock state.\");\n+    return kErrored;\n+  }\n+\n+  bool stateNums;\n+  if ((kr = IOHIDGetModifierLockState(ioc, kIOHIDNumLockState,\n+                                      &stateNums)) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query NumLock state.\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179605089",
            "id": 179605089,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwNTA4OQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 239,
            "original_position": 239,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109878086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179605089/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179605089",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179608151"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608151"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "No, I didn't understand what to indent, I saw some of the code of the codebase, there was mixed use, some `include`s were indented, some were not, so it was the problem",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:36:21Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179608151",
            "id": 179608151,
            "in_reply_to_id": 179601204,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwODE1MQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109886480,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608151/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179608198"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608198"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "May be its a leftover, I didn't expect to add a comment here",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:36:37Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179608198",
            "id": 179608198,
            "in_reply_to_id": 179601282,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwODE5OA==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 22,
            "original_position": 22,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109886542,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608198/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608198",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179608471"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608471"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I was thinking of this variant, needed a review about it, our timezones are opposite, now its 3 am, so couldn't ask, so left for review, now im awake, I will fix it now",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:37:52Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179608471",
            "id": 179608471,
            "in_reply_to_id": 179602423,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwODQ3MQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 64,
            "original_position": 64,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109886878,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608471/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179608526"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608526"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, yes",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T21:38:07Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>\n+# include <string.h>\n+# include <stdio.h>\n+\n+# include <uv.h>\n+\n+# include \"nvim/api/private/helpers.h\"\n+# include \"nvim/api/private/defs.h\"\n+# include \"nvim/lua/executor.h\"\n+# include \"nvim/os/keyboard.h\"\n+# include \"nvim/vim.h\"\n+# include \"nvim/version.h\"\n+\n+#  if defined(__linux__)\n+#  define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+///\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+# include <Winuser.h>\n+# elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// The enum to be used as a return type for os_get_locks_status() function\n+typedef enum {\n+  kLinuxMod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kWin32Mod = 0x07,  ///< All three locks, kNumLock | kCapsLock | kScrollLock\n+  kMacOSMod = 0x03,  ///< Support two locks, kNumLock | kCapsLock\n+  kErrored = -0x01,  ///< The invalid status, some error occured\n+  kUnknownOS = 0x00,  ///< The function is not supported by given platform or OS\n+} OSModQuery;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11.\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s.\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return kErrored in case of error and kLinuxMod specifying which values\n+///         in mods are valid otherwise.\n+static OSModQuery os_get_locks_status(int *const mods, Error *const err)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179608526",
            "id": 179608526,
            "in_reply_to_id": 179602689,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYwODUyNg==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 124,
            "original_position": 124,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109886944,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608526/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179608526",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179613349"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179613349"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I would suggest to look at some newer files, which were not inherited from Vim. E.g. everything in `src/nvim/api`, or `src/nvim/eval` (the latter was created by me and should be more consistent with my comments: there are some things not covered by a style guide which are done differently, I also sometimes see direct violations of the portions of the style guide which are not covered by linter, some of them even done by me: e.g. until I did spot that casts are to be made without space and adjusted linter to check that all my code used to have space after a cast).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:02:03Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179613349",
            "id": 179613349,
            "in_reply_to_id": 179601204,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxMzM0OQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109893054,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179613349/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179613349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179614217"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179614217"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It is the inside of `#if` which should be indented, not the other way around. Wondering where have you seen code like this, this is a very fresh idea of formatting preprocessor directives in C for me.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:06:34Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+# if defined(__linux__)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179614217",
            "id": 179614217,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxNDIxNw==",
            "original_commit_id": "f8bf02da873b62e90ac7631c6db14c7a99a3dd2d",
            "original_line": 17,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109894114,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179614217/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179614217",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179614320"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179614320"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This part was perfectly fine and could’ve been used as an example.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:07:07Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+# if defined(__linux__)\n+#define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+#include <Winuser.h>\n+# elif defined(__APPLE__)\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+# ifdef INCLUDE_GENERATED_DECLARATIONS\n+#include \"os/keyboard.c.generated.h\"\n+# endif",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179614320",
            "id": 179614320,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxNDMyMA==",
            "original_commit_id": "f8bf02da873b62e90ac7631c6db14c7a99a3dd2d",
            "original_line": 62,
            "original_position": 62,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109894255,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179614320/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179614320",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179614735"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179614735"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I understand it now, may be there was such a line about it in the style guide regarding this.\r\nThanks for reviews and helping me to learn about coding conversions, after this PR the same errors are not expected again, though it took some of your time on this PR.\r\nThanks :+1: :smile: ",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:09:26Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+# include <assert.h>",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179614735",
            "id": 179614735,
            "in_reply_to_id": 179601204,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxNDczNQ==",
            "original_commit_id": "e7cc12bd00f6234980df41c068da337bef43ff4f",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109894783,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179614735/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179614735",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179615111"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615111"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I did just `git grep '# if'` a huge output came out, so I thought this would be the new way, as some code is of vim, the new added code would be of neovim which is using this",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:11:38Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+# if defined(__linux__)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179615111",
            "id": 179615111,
            "in_reply_to_id": 179614217,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxNTExMQ==",
            "original_commit_id": "f8bf02da873b62e90ac7631c6db14c7a99a3dd2d",
            "original_line": 17,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109895237,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615111/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615111",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179615150"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615150"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Using `M` is weird. Also matching what? Based on the invocation of the function alone I would spelled that as “Unable to get service for default master port”. Though after viewing documentation it looks like it should be “Unable to get service for HID system class”.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:11:52Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+# if defined(__linux__)\n+#define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+#include <Winuser.h>\n+# elif defined(__APPLE__)\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+# ifdef INCLUDE_GENERATED_DECLARATIONS\n+#include \"os/keyboard.c.generated.h\"\n+# endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static const ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static const ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static const ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get the Matching IOService\");",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179615150",
            "id": 179615150,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxNTE1MA==",
            "original_commit_id": "f8bf02da873b62e90ac7631c6db14c7a99a3dd2d",
            "original_line": 204,
            "original_position": 204,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109895287,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615150/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615150",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179615233"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615233"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "for instance see `fileio.c`",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:12:22Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+# if defined(__linux__)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179615233",
            "id": 179615233,
            "in_reply_to_id": 179614217,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxNTIzMw==",
            "original_commit_id": "f8bf02da873b62e90ac7631c6db14c7a99a3dd2d",
            "original_line": 17,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109895397,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615233/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615233",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179615517"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615517"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Still references `kUnknownOS`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:13:56Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+# if defined(__linux__)\n+#define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+# elif defined(WIN32)\n+#include <Winuser.h>\n+# elif defined(__APPLE__)\n+#define Boolean Boolean_I_Dont_Care\n+#include <IOKit/IOKitLib.h>\n+#include <IOKit/IOReturn.h>\n+#include <IOKit/hidsystem/IOHIDLib.h>\n+#include <IOKit/hidsystem/IOHIDParameter.h>\n+#include <CoreFoundation/CoreFoundation.h>\n+#undef Boolean\n+# endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+# ifdef INCLUDE_GENERATED_DECLARATIONS\n+#include \"os/keyboard.c.generated.h\"\n+# endif\n+\n+# if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static const ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+# elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static const ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+# elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static const ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get the Matching IOService\");\n+    return -1;\n+  }\n+\n+  io_connect_t ioc;\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the IOService\");\n+    return -1;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query CapsLock state\");\n+    return -1;\n+  }\n+\n+  bool stateNums;\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDNumLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query NumLock state\");\n+    return -1;\n+  }\n+  if (stateCaps) {\n+    *mods |= kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods |= kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return kCapsLock | kNumLock;\n+}\n+# else\n+/// Dummy function used in case of no known platform detected.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return Always return kUnknownOS.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179615517",
            "id": 179615517,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxNTUxNw==",
            "original_commit_id": "f8bf02da873b62e90ac7631c6db14c7a99a3dd2d",
            "original_line": 251,
            "original_position": 251,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109895756,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615517/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179615517",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179617117"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179617117"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`fileio.c` had an `#if` inside an `#if`. (Note past tense, it is inherited file.) Pretty sure that if inside were any preprocessor directives then they would be indented further. You may see lots of preprocessor directives which are indented more or less fine in `vim.h`, even though this is an inherited file and still has some flaws. And most extreme examples of nesting in `func_attr.h`: file contains basically nothing, but macros, and it is a new file, not inherited.\r\n\r\nThe key point is that `#if…` increase indentation like in any other code with regular `if()`, `#else…` is on the same level as corresponding `#if` and `#endif` is both at the same level and makes further directives appear same indented. When nesting preprocessor directives increased indentation applies *only* to lines starting with `#`, not to the lines which are still part of the preprocessor directives, but appear below (i.e. those which are continuation, denoted by continuation character (backslash) on the previous line) and not to the other code.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:22:39Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+# if defined(__linux__)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179617117",
            "id": 179617117,
            "in_reply_to_id": 179614217,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxNzExNw==",
            "original_commit_id": "f8bf02da873b62e90ac7631c6db14c7a99a3dd2d",
            "original_line": 17,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109897639,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179617117/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179617117",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179617212"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179617212"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, may be this was the effect of the indentation, I thought wrong",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:23:11Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+# if defined(__linux__)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179617212",
            "id": 179617212,
            "in_reply_to_id": 179614217,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxNzIxMg==",
            "original_commit_id": "f8bf02da873b62e90ac7631c6db14c7a99a3dd2d",
            "original_line": 17,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109897747,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179617212/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179617212",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179617518"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179617518"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I got this\r\n",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:24:41Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+# if defined(__linux__)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179617518",
            "id": 179617518,
            "in_reply_to_id": 179614217,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYxNzUxOA==",
            "original_commit_id": "f8bf02da873b62e90ac7631c6db14c7a99a3dd2d",
            "original_line": 17,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109898096,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179617518/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179617518",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179620520"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179620520"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It is supposed to be phrased like `@return` is the start of the sentence. E.g. in this case it would be `@return always 0.` (as you could not move “always” before `@return`). You may see in https://neovim.io/doc/dev/typval_8c.html#a2aeea7f4caab15609a6249a8d1e9a587 actually why it is so: `@return` starting block is rendered as a block which starts with an outstanding “Returns” header.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:42:14Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get service for default master port\");\n+    return -1;\n+  }\n+\n+  io_connect_t ioc;\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get service for HID system class\");\n+    return -1;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query CapsLock state\");\n+    return -1;\n+  }\n+\n+  bool stateNums;\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDNumLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query NumLock state\");\n+    return -1;\n+  }\n+  if (stateCaps) {\n+    *mods |= kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods |= kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return kCapsLock | kNumLock;\n+}\n+#else\n+/// Dummy function used in case of no known platform detected.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return Always return 0.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179620520",
            "id": 179620520,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYyMDUyMA==",
            "original_commit_id": "947cf8ec638edbb4b99336afe0c0cb1b3edeb61f",
            "original_line": 251,
            "original_position": 251,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109901568,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179620520/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179620520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179620743"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179620743"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Missing `be`. And “and false if it is not”.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:43:31Z",
            "diff_hunk": "@@ -1562,3 +1563,20 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Caps/Num/Scroll lock.\n+///\n+/// This info will be in form of the dictionary, having\n+/// `CapsLock`, `NumLock` and `ScrollLock` as the entities\n+/// iff they are supported by their respective OS and are implemented.\n+///\n+/// The values for keys will true if the respective lock is active.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179620743",
            "id": 179620743,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYyMDc0Mw==",
            "original_commit_id": "947cf8ec638edbb4b99336afe0c0cb1b3edeb61f",
            "original_line": 1573,
            "original_position": 19,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 109901819,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179620743/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179620743",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179620889"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179620889"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Would be a good idea to add `FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT` to all these functions.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:44:28Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static ModMask os_get_locks_status(ModMask *const mods, Error *const err)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179620889",
            "id": 179620889,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYyMDg4OQ==",
            "original_commit_id": "947cf8ec638edbb4b99336afe0c0cb1b3edeb61f",
            "original_line": 198,
            "original_position": 194,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109901974,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179620889/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179620889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179621103"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179621103"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "And `FUNC_ATTR_NONNULL_ALL` here (warning for unused result is not needed as result is actually redundant).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-05T22:45:51Z",
            "diff_hunk": "@@ -0,0 +1,285 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *const err)\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions\n+static bool os_xlib_init(Error *const err)\n+{\n+  if (xlib_opened) {\n+    return true;\n+  }\n+  const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\n+  if (udl_ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to load \" XLIB_NAME \": %s\",\n+                  uv_dlerror(&xlib));\n+    return false;\n+  } else {\n+    xlib_opened = true;\n+  }\n+\n+  if (!os_xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay, err)\n+      || !os_xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay, err)\n+      || !os_xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState, err)) {\n+    return false;\n+  }\n+  return xlib_opened;\n+}\n+\n+/// Get information about Num/Caps/Scroll Lock state in Linux\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  if (!os_xlib_init(err)) {\n+    return -1;\n+  }\n+\n+  _XDisplay *const display = _XOpenDisplay(NULL);\n+  if (display == NULL) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to open the display\");\n+    return -1;\n+  }\n+\n+  _XkbStateRec xkb_state;\n+  const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\n+  if (status) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get keyboard state of the display\");\n+\n+    _XCloseDisplay(display);\n+  }\n+\n+  int state = xkb_state.data[kLockedModsOffset];\n+  if (state & kXNumLock) {\n+    *mods |= kNumLock;\n+  }\n+\n+  if (state & kXCapsLock) {\n+    *mods |= kCapsLock;\n+  }\n+\n+  if (state & kXScrollLock) {\n+    *mods |= kScrollLock;\n+  }\n+\n+  _XCloseDisplay(display);\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(WIN32)\n+/// Get information about Num/Caps/Scroll Lock state in Windows.\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  if (GetKeyState(VK_CAPITAL) & 0x0001) {\n+    *mods |= kCapsLock;\n+  }\n+  if (GetKeyState(VK_NUMLOCK) & 0x0001) {\n+    *mods |= kNumLock;\n+  }\n+  if (GetKeyState(VK_SCROLL) & 0x0001) {\n+    *mods |= kScrollLock;\n+  }\n+  return kCapsLock | kNumLock | kScrollLock;\n+}\n+\n+#elif defined(__APPLE__)\n+/// Get information about Num/Caps Lock state in MacOS\n+///\n+/// To be used in os_mods_status() function.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return -1 in case of error and a mask specifying which values\n+///         in mods are valid otherwise.\n+static ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  const CFMutableDictionaryRef mdict = IOServiceMatching(kIOHIDSystemClass);\n+  const io_service_t ios = IOServiceGetMatchingService(kIOMasterPortDefault,\n+                                                       (CFDictionaryRef)mdict);\n+  if (!ios) {\n+    if (mdict) {\n+      CFRelease(mdict);\n+    }\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get service for default master port\");\n+    return -1;\n+  }\n+\n+  io_connect_t ioc;\n+  if (IOServiceOpen(ios, mach_task_self(), kIOHIDParamConnectType,\n+                    &ioc) != kIOReturnSuccess) {\n+    IOObjectRelease(ios);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to get service for HID system class\");\n+    return -1;\n+  }\n+  IOObjectRelease(ios);\n+\n+  bool stateCaps;\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDCapsLockState,\n+                                &stateCaps) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query CapsLock state\");\n+    return -1;\n+  }\n+\n+  bool stateNums;\n+  if (IOHIDGetModifierLockState(ioc, kIOHIDNumLockState,\n+                                &stateNums) != kIOReturnSuccess) {\n+    IOServiceClose(ioc);\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to query NumLock state\");\n+    return -1;\n+  }\n+  if (stateCaps) {\n+    *mods |= kCapsLock;\n+  }\n+  if (stateNums) {\n+    *mods |= kNumLock;\n+  }\n+  IOServiceClose(ioc);\n+  return kCapsLock | kNumLock;\n+}\n+#else\n+/// Dummy function used in case of no known platform detected.\n+///\n+/// @param[out]  mods  Holds the information about the status of various locks\n+///                    in form of a pointer to integer bitmask.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return Always return 0.\n+static ModMask os_get_locks_status(ModMask *const mods, Error *const err)\n+{\n+  *mods = 0;\n+  return 0;\n+}\n+#endif\n+\n+/// Get information about Num/Caps/Scroll Lock state.\n+///\n+/// To be used in nvim_get_keyboard_mods_state() function.\n+///\n+/// @param[out]  dict  Pointer to dictionary where information about modifiers\n+///                    is to be dumped.\n+/// @param[out]  err  Location where error message is to be saved\n+///\n+/// @return true in case of no error, false otherwise.\n+bool os_mods_status(Dictionary *const dict, Error *const err)",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179621103",
            "id": 179621103,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTYyMTEwMw==",
            "original_commit_id": "947cf8ec638edbb4b99336afe0c0cb1b3edeb61f",
            "original_line": 274,
            "original_position": 268,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 109902226,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179621103/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179621103",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179942943"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179942943"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Never check boolean variables for equality to something in conditions, they are boolean precisely for them to be put in condition directly.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T10:25:24Z",
            "diff_hunk": "@@ -1036,5 +1036,33 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('on linux either xlib11 is available or not', function()\n+      if os_name() == 'unix' then\n+        local status, rv = pcall(nvim, \"get_keyboard_mods_state\")\n+        if status == true then",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179942943",
            "id": 179942943,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0Mjk0Mw==",
            "original_commit_id": "f11bc6a3345097a168694732d6d654da0e1a0290",
            "original_line": 1043,
            "original_position": 9,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110282444,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179942943/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179942943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179942962"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179942962"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "As I said it should not assume specific state of locks. Check for presence of all keys and check for corresponding values being boolean.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T10:26:33Z",
            "diff_hunk": "@@ -1036,5 +1036,33 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('on linux either xlib11 is available or not', function()\n+      if os_name() == 'unix' then\n+        local status, rv = pcall(nvim, \"get_keyboard_mods_state\")\n+        if status == true then\n+          eq(rv, {CapsLock=false, NumLock=false, ScrollLock=false})",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179942962",
            "id": 179942962,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0Mjk2Mg==",
            "original_commit_id": "f11bc6a3345097a168694732d6d654da0e1a0290",
            "original_line": 1044,
            "original_position": 10,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110282444,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179942962/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179942962",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179942998"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179942998"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "And I would really suggest to have *one* test as they are mutually exclusive and are supposed to share a code for checking return value.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T10:27:47Z",
            "diff_hunk": "@@ -1036,5 +1036,33 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('on linux either xlib11 is available or not', function()\n+      if os_name() == 'unix' then\n+        local status, rv = pcall(nvim, \"get_keyboard_mods_state\")\n+        if status == true then\n+          eq(rv, {CapsLock=false, NumLock=false, ScrollLock=false})\n+        else\n+          eq(\"Unable to load \", string.match(rv, \"Unable to load *\"))\n+        end\n+      end\n+    end)\n+    it('on windows there is always an acceptance', function()\n+      if os_name() == 'windows' then",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179942998",
            "id": 179942998,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0Mjk5OA==",
            "original_commit_id": "f11bc6a3345097a168694732d6d654da0e1a0290",
            "original_line": 1051,
            "original_position": 17,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110282444,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179942998/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179942998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179943052"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943052"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This also has wrong alignment, dictionary is not an argument to `nvim()`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T10:30:40Z",
            "diff_hunk": "@@ -1036,5 +1036,33 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('on linux either xlib11 is available or not', function()\n+      if os_name() == 'unix' then\n+        local status, rv = pcall(nvim, \"get_keyboard_mods_state\")\n+        if status == true then\n+          eq(rv, {CapsLock=false, NumLock=false, ScrollLock=false})\n+        else\n+          eq(\"Unable to load \", string.match(rv, \"Unable to load *\"))\n+        end\n+      end\n+    end)\n+    it('on windows there is always an acceptance', function()\n+      if os_name() == 'windows' then\n+        eq(nvim('get_keyboard_mods_state'),\n+                {CapsLock=false, NumLock=false, ScrollLock=false})",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179943052",
            "id": 179943052,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzA1Mg==",
            "original_commit_id": "f11bc6a3345097a168694732d6d654da0e1a0290",
            "original_line": 1053,
            "original_position": 19,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110282444,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943052/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179943098"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943098"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ah, and there is such a thing as `meths` dictionary-like object. You don’t need `nvim`, you can use `meth.get_keyboard_mods_state` function. I use that in all new tests as it is less verbose.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T10:32:16Z",
            "diff_hunk": "@@ -1036,5 +1036,33 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('on linux either xlib11 is available or not', function()\n+      if os_name() == 'unix' then\n+        local status, rv = pcall(nvim, \"get_keyboard_mods_state\")",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179943098",
            "id": 179943098,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzA5OA==",
            "original_commit_id": "f11bc6a3345097a168694732d6d654da0e1a0290",
            "original_line": 1042,
            "original_position": 8,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110282444,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943098/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179943364"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943364"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "No, nvim is a function which calls the function `nvim_get_keyboard_mods_state`, whose output is checked by eq, the dictionary is outside the `nvim` function.\r\nI will replace the `nvim` although, due to the next review",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T10:43:32Z",
            "diff_hunk": "@@ -1036,5 +1036,33 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('on linux either xlib11 is available or not', function()\n+      if os_name() == 'unix' then\n+        local status, rv = pcall(nvim, \"get_keyboard_mods_state\")\n+        if status == true then\n+          eq(rv, {CapsLock=false, NumLock=false, ScrollLock=false})\n+        else\n+          eq(\"Unable to load \", string.match(rv, \"Unable to load *\"))\n+        end\n+      end\n+    end)\n+    it('on windows there is always an acceptance', function()\n+      if os_name() == 'windows' then\n+        eq(nvim('get_keyboard_mods_state'),\n+                {CapsLock=false, NumLock=false, ScrollLock=false})",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179943364",
            "id": 179943364,
            "in_reply_to_id": 179943052,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzM2NA==",
            "original_commit_id": "f11bc6a3345097a168694732d6d654da0e1a0290",
            "original_line": 1053,
            "original_position": 19,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110282903,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943364/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179943397"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943397"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, I thought this was also good, Sure, I replace it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T10:44:40Z",
            "diff_hunk": "@@ -1036,5 +1036,33 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('on linux either xlib11 is available or not', function()\n+      if os_name() == 'unix' then\n+        local status, rv = pcall(nvim, \"get_keyboard_mods_state\")\n+        if status == true then\n+          eq(rv, {CapsLock=false, NumLock=false, ScrollLock=false})",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179943397",
            "id": 179943397,
            "in_reply_to_id": 179942962,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzM5Nw==",
            "original_commit_id": "f11bc6a3345097a168694732d6d654da0e1a0290",
            "original_line": 1044,
            "original_position": 10,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110282935,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943397/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943397",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179943400"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943400"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OKs\r\n",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T10:44:53Z",
            "diff_hunk": "@@ -1036,5 +1036,33 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('on linux either xlib11 is available or not', function()\n+      if os_name() == 'unix' then\n+        local status, rv = pcall(nvim, \"get_keyboard_mods_state\")\n+        if status == true then",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179943400",
            "id": 179943400,
            "in_reply_to_id": 179942943,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0MzQwMA==",
            "original_commit_id": "f11bc6a3345097a168694732d6d654da0e1a0290",
            "original_line": 1043,
            "original_position": 9,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110282939,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943400/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179943400",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179944304"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944304"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "By the way, I missed the fact, but `eq` is `eq(expected, actual)`, not the other way around.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T11:20:28Z",
            "diff_hunk": "@@ -1036,5 +1036,33 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('on linux either xlib11 is available or not', function()\n+      if os_name() == 'unix' then\n+        local status, rv = pcall(nvim, \"get_keyboard_mods_state\")\n+        if status == true then\n+          eq(rv, {CapsLock=false, NumLock=false, ScrollLock=false})",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179944304",
            "id": 179944304,
            "in_reply_to_id": 179942962,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0NDMwNA==",
            "original_commit_id": "f11bc6a3345097a168694732d6d654da0e1a0290",
            "original_line": 1044,
            "original_position": 10,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110283851,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944304/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944304",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179944890"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944890"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This does not check for keys being boolean, it checks for keys being false. Also do not use three copy-pasted `if` blocks, it is far better with `for _, k in ipairs({'CapsLock', …})`.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T11:45:03Z",
            "diff_hunk": "@@ -1036,5 +1036,29 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('returs a dictionary on or the specific error', function()\n+        -- Returns the dictionary on success otherwise a specified error\n+        -- if the resources were not present on the system.\n+\n+        local status, rv = pcall(meths.get_keyboard_mods_state)\n+        if status then\n+          if rv['CapsLock'] ~= nil then\n+            eq(false, rv['CapsLock'])",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179944890",
            "id": 179944890,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0NDg5MA==",
            "original_commit_id": "09e1699aa970fe5ba9966eb82be37adf8d2215f1",
            "original_line": 1047,
            "original_position": 13,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110284460,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944890/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944890",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179944919"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944919"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, I will do it, within an hour",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T11:46:22Z",
            "diff_hunk": "@@ -1036,5 +1036,29 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('returs a dictionary on or the specific error', function()\n+        -- Returns the dictionary on success otherwise a specified error\n+        -- if the resources were not present on the system.\n+\n+        local status, rv = pcall(meths.get_keyboard_mods_state)\n+        if status then\n+          if rv['CapsLock'] ~= nil then\n+            eq(false, rv['CapsLock'])",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179944919",
            "id": 179944919,
            "in_reply_to_id": 179944890,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0NDkxOQ==",
            "original_commit_id": "09e1699aa970fe5ba9966eb82be37adf8d2215f1",
            "original_line": 1047,
            "original_position": 13,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110284491,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944919/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944919",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179944949"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944949"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Though actually no, the other way around:\r\n\r\n```Lua\r\nfor k, v in pairs(rv) do\r\n  eq(true, ({CapsLock=true, …})[k])  -- Check that key is one of the expected keys\r\n  eq('boolean', type(v))\r\nendfor\r\n```",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T11:47:34Z",
            "diff_hunk": "@@ -1036,5 +1036,29 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('returs a dictionary on or the specific error', function()\n+        -- Returns the dictionary on success otherwise a specified error\n+        -- if the resources were not present on the system.\n+\n+        local status, rv = pcall(meths.get_keyboard_mods_state)\n+        if status then\n+          if rv['CapsLock'] ~= nil then\n+            eq(false, rv['CapsLock'])",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179944949",
            "id": 179944949,
            "in_reply_to_id": 179944890,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0NDk0OQ==",
            "original_commit_id": "09e1699aa970fe5ba9966eb82be37adf8d2215f1",
            "original_line": 1047,
            "original_position": 13,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110284516,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944949/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179944949",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179948548"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948548"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This should be aligned with first `\"` on the previous line.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T13:54:00Z",
            "diff_hunk": "@@ -1036,5 +1036,25 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('returs a dictionary on or the specific error', function()\n+        -- Returns the dictionary on success otherwise a specified error\n+        -- if the resources were not present on the system.\n+\n+        local status, rv = pcall(meths.get_keyboard_mods_state)\n+        if status then\n+          for k, v in pairs(rv) do\n+            eq(true, ({CapsLock=true, NumLock=true, ScrollLock=true})[k])\n+            eq('boolean', type(v))\n+          end\n+        else\n+          if os_name() == 'unix' then\n+            eq(\"Unable to load \", string.match(rv, \"Unable to load *\"))\n+          elseif os_name() == 'osx' then\n+            eq(\"Unable to get service \",\n+                 string.match(rv, \"Unable to get service *\"))",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179948548",
            "id": 179948548,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0ODU0OA==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 1055,
            "original_position": 21,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110288201,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948548/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948548",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179948647"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948647"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Respective to what? And it is not OS-specific in longer term, it is implementation-specific. Just say about checking for them being implemented.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T13:57:23Z",
            "diff_hunk": "@@ -1562,3 +1563,21 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Caps/Num/Scroll lock.\n+///\n+/// This info will be in form of the dictionary, having\n+/// `CapsLock`, `NumLock` and `ScrollLock` as the entities\n+/// iff they are supported by their respective OS and are implemented.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179948647",
            "id": 179948647,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0ODY0Nw==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 1571,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 110288299,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948647/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948647",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179948653"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948653"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "not",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T13:57:38Z",
            "diff_hunk": "@@ -1562,3 +1563,21 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Caps/Num/Scroll lock.\n+///\n+/// This info will be in form of the dictionary, having\n+/// `CapsLock`, `NumLock` and `ScrollLock` as the entities\n+/// iff they are supported by their respective OS and are implemented.\n+///\n+/// The values for keys will be true if the respective lock is active and false\n+/// if it is no.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179948653",
            "id": 179948653,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0ODY1Mw==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 1574,
            "original_position": 20,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 110288308,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948653/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179948694"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948694"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "2 extra spaces, OK",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T13:59:05Z",
            "diff_hunk": "@@ -1036,5 +1036,25 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()\n+    it('returs a dictionary on or the specific error', function()\n+        -- Returns the dictionary on success otherwise a specified error\n+        -- if the resources were not present on the system.\n+\n+        local status, rv = pcall(meths.get_keyboard_mods_state)\n+        if status then\n+          for k, v in pairs(rv) do\n+            eq(true, ({CapsLock=true, NumLock=true, ScrollLock=true})[k])\n+            eq('boolean', type(v))\n+          end\n+        else\n+          if os_name() == 'unix' then\n+            eq(\"Unable to load \", string.match(rv, \"Unable to load *\"))\n+          elseif os_name() == 'osx' then\n+            eq(\"Unable to get service \",\n+                 string.match(rv, \"Unable to get service *\"))",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179948694",
            "id": 179948694,
            "in_reply_to_id": 179948548,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0ODY5NA==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 1055,
            "original_position": 21,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110288350,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948694/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179948707"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948707"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, now, it was a previous comment",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T13:59:28Z",
            "diff_hunk": "@@ -1562,3 +1563,21 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Caps/Num/Scroll lock.\n+///\n+/// This info will be in form of the dictionary, having\n+/// `CapsLock`, `NumLock` and `ScrollLock` as the entities\n+/// iff they are supported by their respective OS and are implemented.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179948707",
            "id": 179948707,
            "in_reply_to_id": 179948647,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0ODcwNw==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 1571,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 110288364,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948707/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948707",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179948848"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948848"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Documentation string looks strange and it is missing documentation about arguments and return value.\r\n\r\n```C\r\n/// Load symbol from previously opened X11 library\r\n///\r\n/// Requires os_xlib_init() to successfully load library before calling this.\r\n///\r\n/// @param[in]  name  Symbol to load. Assumes it being a function name.\r\n/// @param[out]  fun  Location where to put load results.\r\n/// @param[out]  err  Location where to save error.\r\n///\r\n/// @return true if loading was successfull, false otherwise.\r\n```",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:03:32Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179948848",
            "id": 179948848,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0ODg0OA==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 71,
            "original_position": 71,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 110288501,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948848/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179948995"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948995"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK\r\n\r\n`@ /// @param[in]  name  Symbol to load. Assumes it being a function name.`\r\n\r\n\r\nShouldn't there be obtain instead of load, as you told of a reason earlier, because of the documentation of the uv_dlsym\r\n",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:09:17Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179948995",
            "id": 179948995,
            "in_reply_to_id": 179948848,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0ODk5NQ==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 71,
            "original_position": 71,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 110288640,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948995/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179948995",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179949000"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949000"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This also missing documentation about return value. And do not add noise about something being a “helper function”, most functions are like this.\r\n\r\n```C\r\n/// Initialize global variables, loading X11 library and required functions\r\n///\r\n/// @param[out]  err  Location where error is saved.\r\n///\r\n/// @return true if everything was loaded successfully, false otherwise.\r\n```\r\n\r\n(and do not use “helper function” here, there is no clear definition of “helper” for this statement to be useful, but it does occupy place)",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:09:32Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *err)\n+  FUNC_ATTR_NONNULL_ALL\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179949000",
            "id": 179949000,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0OTAwMA==",
            "original_commit_id": "b3a2fb2d7c8bd4f5b86f2215deb51dbae715d4c8",
            "original_line": 85,
            "original_position": 85,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 110288624,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949000/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179949034"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949034"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "There was an update as second paragraph was incorrect.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:11:13Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179949034",
            "id": 179949034,
            "in_reply_to_id": 179948848,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0OTAzNA==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 71,
            "original_position": 71,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 110288624,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949034/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179949059"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949059"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Obtain is also good.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:12:17Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179949059",
            "id": 179949059,
            "in_reply_to_id": 179948848,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0OTA1OQ==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 71,
            "original_position": 71,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 110288710,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949059/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179949128"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949128"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:13:58Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11\n+static bool os_xlib_dlsym(const char *name, void **fun, Error *err)\n+  FUNC_ATTR_NONNULL_ALL\n+{\n+  const int ret = uv_dlsym(&xlib, name, fun);\n+  if (ret != 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"Unable to obtain %s function from X11\",\n+                  name);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/// A helper function to be used to load the libX11 and required functions",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179949128",
            "id": 179949128,
            "in_reply_to_id": 179949000,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0OTEyOA==",
            "original_commit_id": "b3a2fb2d7c8bd4f5b86f2215deb51dbae715d4c8",
            "original_line": 85,
            "original_position": 85,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 110288772,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949128/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949128",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179949159"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949159"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "BTW, cite code with `@…` as code. You can invite users like this, though I think `@param` as an organization does not mind, maybe it is even actually a dummy created by GH team.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:14:53Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179949159",
            "id": 179949159,
            "in_reply_to_id": 179948848,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0OTE1OQ==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 71,
            "original_position": 71,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 110288808,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949159/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949159",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179949247"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949247"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Oh, thats it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:17:32Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// A helper function to be used to load a function of libX11",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179949247",
            "id": 179949247,
            "in_reply_to_id": 179948848,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0OTI0Nw==",
            "original_commit_id": "f37781683beeb281f8f0914011533ca556b58060",
            "original_line": 71,
            "original_position": 71,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 110288895,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949247/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949247",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179949919"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949919"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This now sounds as if all keys are always present.\r\n\r\n```C\r\n/// Get information about keyboard locks state\r\n///\r\n/// @return dictionary with up to three keys, depending on which checks are\r\n///         implemented: `CapsLock`, `NumLock` and `ScrollLock`. Corresponding\r\n///         values are booleans, true if relevant lock is active and false\r\n///         otherwise. Dictionary may contain more keys in the future.\r\n```",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:39:31Z",
            "diff_hunk": "@@ -1562,3 +1563,20 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Caps/Num/Scroll lock.\n+///\n+/// This info will be in form of the dictionary, having\n+/// `CapsLock`, `NumLock` and `ScrollLock` as the keys of dictionary",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179949919",
            "id": 179949919,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0OTkxOQ==",
            "original_commit_id": "c25c46ee543d917d3cb7d02ab526bbfd81874a73",
            "original_line": 1570,
            "original_position": 16,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 110289592,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949919/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949919",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179949943"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949943"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, I edit it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:40:18Z",
            "diff_hunk": "@@ -1562,3 +1563,20 @@ Object nvim_get_proc(Integer pid, Error *err)\n #endif\n   return rvobj;\n }\n+\n+/// Give the info of the state of the Caps/Num/Scroll lock.\n+///\n+/// This info will be in form of the dictionary, having\n+/// `CapsLock`, `NumLock` and `ScrollLock` as the keys of dictionary",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179949943",
            "id": 179949943,
            "in_reply_to_id": 179949919,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0OTk0Mw==",
            "original_commit_id": "c25c46ee543d917d3cb7d02ab526bbfd81874a73",
            "original_line": 1570,
            "original_position": 16,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 110289610,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949943/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179949999"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949999"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You picked a wrong version of this paragraph, I updated that later: this function is called from within `os_xlib_init()` so it can’t require it to be called successfully. Updated variant was “Requires os_xlib_init() to successfully load library before calling this.”.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:41:50Z",
            "diff_hunk": "@@ -0,0 +1,304 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// Load symbol from previously opened X11 library\n+///\n+/// Requires os_xlib_init() to be called successfully before.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179949999",
            "id": 179949999,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk0OTk5OQ==",
            "original_commit_id": "c25c46ee543d917d3cb7d02ab526bbfd81874a73",
            "original_line": 73,
            "original_position": 73,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 110289668,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949999/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179949999",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179950037"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950037"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Oh, no problem, I didn't see it",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:42:56Z",
            "diff_hunk": "@@ -0,0 +1,304 @@\n+// This is an open source non-commercial project. Dear PVS-Studio, please check\n+// it. PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include <uv.h>\n+\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/lua/executor.h\"\n+#include \"nvim/os/keyboard.h\"\n+#include \"nvim/vim.h\"\n+#include \"nvim/version.h\"\n+\n+#if defined(__linux__)\n+# define XLIB_NAME \"libX11.so.6\"\n+\n+typedef void *_XDisplay;\n+\n+/// Holds the data of the present state of Keyboard\n+typedef struct {\n+  char data[18];\n+} _XkbStateRec;\n+typedef int _XStatus;\n+\n+/// The offset of the keyboard lock modes for X11\n+enum { kLockedModsOffset = 9 };\n+enum { _XkbUseCoreKbd = 0x0100 };\n+\n+/// Masks used in libX11 for different Lock states\n+typedef enum {\n+    kXNumLock = 0x10,  ///< Mask for NumLock\n+    kXCapsLock = 0x02,  ///< Mask for CapsLock\n+    kXScrollLock = 0x80,  ///< Mask for ScrollLock\n+} XlibKbdLocks;\n+#elif defined(WIN32)\n+# include <Winuser.h>\n+#elif defined(__APPLE__)\n+# define Boolean Boolean_I_Dont_Care\n+# include <IOKit/IOKitLib.h>\n+# include <IOKit/IOReturn.h>\n+# include <IOKit/hidsystem/IOHIDLib.h>\n+# include <IOKit/hidsystem/IOHIDParameter.h>\n+# include <CoreFoundation/CoreFoundation.h>\n+# undef Boolean\n+#endif\n+\n+/// Masks for the specific keyboard lock status\n+typedef enum {\n+  kNumLock = 0x01,  ///< Mask used to check if the NumLock is active\n+  kCapsLock = 0x02,  ///< Mask used to check if the CapsLock is active\n+  kScrollLock = 0x04,  ///< Mask used to check if the ScrollLock is active\n+} KbdLocks;\n+\n+/// Used as a bitmask for the status of the different Lock Status\n+typedef int ModMask;\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"os/keyboard.c.generated.h\"\n+#endif\n+\n+#if defined(__linux__)\n+static bool xlib_opened = false;\n+static uv_lib_t xlib;\n+static _XDisplay *(*_XOpenDisplay)(void *);\n+static int (*_XCloseDisplay)(_XDisplay *);\n+static _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\n+\n+/// Load symbol from previously opened X11 library\n+///\n+/// Requires os_xlib_init() to be called successfully before.",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179950037",
            "id": 179950037,
            "in_reply_to_id": 179949999,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk1MDAzNw==",
            "original_commit_id": "c25c46ee543d917d3cb7d02ab526bbfd81874a73",
            "original_line": 73,
            "original_position": 73,
            "original_start_line": null,
            "path": "src/nvim/os/keyboard.c",
            "position": null,
            "pull_request_review_id": 110289696,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950037/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179950161"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950161"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "BTW if you readd newline here you will have a PR with only added lines in PR statistics and no removed ones.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:46:51Z",
            "diff_hunk": "@@ -1036,5 +1036,25 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179950161",
            "id": 179950161,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk1MDE2MQ==",
            "original_commit_id": "be5818cce2d819fdf18bf255236242e368eaefea",
            "original_line": 1040,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110289824,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950161/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179950253"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950253"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If it looks tidy, I add a new line, otherwise there should be no problem of removing a line as it don't matter of PR stats(is it? As I think work is what is needed)",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:50:07Z",
            "diff_hunk": "@@ -1036,5 +1036,25 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179950253",
            "id": 179950253,
            "in_reply_to_id": 179950161,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk1MDI1Mw==",
            "original_commit_id": "be5818cce2d819fdf18bf255236242e368eaefea",
            "original_line": 1040,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110289915,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950253/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179950379"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950379"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It would just make PR rather unique: I do not remember any PRs which do touch `*.c` files but do not have any removed lines in PR statistics.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:54:02Z",
            "diff_hunk": "@@ -1036,5 +1036,25 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179950379",
            "id": 179950379,
            "in_reply_to_id": 179950161,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk1MDM3OQ==",
            "original_commit_id": "be5818cce2d819fdf18bf255236242e368eaefea",
            "original_line": 1040,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110290028,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950379/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950379",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r179950469"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950469"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "OK, then its good now",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-08T14:57:43Z",
            "diff_hunk": "@@ -1036,5 +1036,25 @@ describe('api', function()\n       eq(expected, nvim(\"list_uis\"))\n     end)\n   end)\n-\n+  describe('nvim_get_keyboard_mods_state', function()",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r179950469",
            "id": 179950469,
            "in_reply_to_id": 179950161,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk1MDQ2OQ==",
            "original_commit_id": "be5818cce2d819fdf18bf255236242e368eaefea",
            "original_line": 1040,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 110290123,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950469/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/179950469",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r180918514"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/180918514"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`<space>*` means “space repeated zero or more times” and not “space followed by any number of any characters”. I.e. having asterisk here is absolutely pointless, removing it will not change conditions under which tests pass at all, though theoretically may alter the error message (i.e. make “*error message part* then two spaces” fail with “‘*error message part* then space’ not equal to ‘*error message part* then two spaces’” error rather then “‘*error message part* then space’ not equal to `nil`” error).",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-11T22:37:10Z",
            "diff_hunk": "@@ -1037,4 +1037,31 @@ describe('api', function()\n     end)\n   end)\n \n+  describe('nvim_get_keyboard_mods', function()\n+    it('returs a dictionary on or the specific error', function()\n+      -- Returns the dictionary on success otherwise a specified error\n+      -- if the resources were not present on the system.\n+\n+      local status, rv = pcall(meths.get_keyboard_mods)\n+      if status then\n+        for k, v in pairs(rv) do\n+          eq(true, ({CapsLock=true, NumLock=true, ScrollLock=true})[k])\n+          eq('boolean', type(v))\n+        end\n+      else\n+        if os_name() == 'unix' then\n+          local errMch = string.match(rv, \"Unable to load *\")",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r180918514",
            "id": 180918514,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkxODUxNA==",
            "original_commit_id": "cab135796e6a95b410cb8302dbc14869ac934846",
            "original_line": 1053,
            "original_position": 17,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 111427123,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/180918514/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/180918514",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/8187#discussion_r180919231"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/8187"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/180919231"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "And, BTW, `string` “module” needs not be used, `string.match(str, re)` is the same thing as `str:match(re)` as long as `str` has string type.",
            "commit_id": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
            "created_at": "2018-04-11T22:40:55Z",
            "diff_hunk": "@@ -1037,4 +1037,31 @@ describe('api', function()\n     end)\n   end)\n \n+  describe('nvim_get_keyboard_mods', function()\n+    it('returs a dictionary on or the specific error', function()\n+      -- Returns the dictionary on success otherwise a specified error\n+      -- if the resources were not present on the system.\n+\n+      local status, rv = pcall(meths.get_keyboard_mods)\n+      if status then\n+        for k, v in pairs(rv) do\n+          eq(true, ({CapsLock=true, NumLock=true, ScrollLock=true})[k])\n+          eq('boolean', type(v))\n+        end\n+      else\n+        if os_name() == 'unix' then\n+          local errMch = string.match(rv, \"Unable to load *\")",
            "html_url": "https://github.com/neovim/neovim/pull/8187#discussion_r180919231",
            "id": 180919231,
            "in_reply_to_id": 180918514,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDkxOTIzMQ==",
            "original_commit_id": "cab135796e6a95b410cb8302dbc14869ac934846",
            "original_line": 1053,
            "original_position": 17,
            "original_start_line": null,
            "path": "test/functional/api/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 111427921,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/180919231/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-04-15T07:07:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/180919231",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I will add the tests and documentation of the api function soon, but presently the review and verification of the functionality of MacOS and Windows needed",
            "created_at": "2018-03-26T19:04:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-376276735",
            "id": 376276735,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjI3NjczNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/376276735/reactions"
            },
            "updated_at": "2018-03-26T19:04:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/376276735",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "OK, sure I will edit these changes, and will edit the PR before today's Night (Indian Night) or tomorrow, because today I also have to finalize the GSoC proposal",
            "created_at": "2018-03-27T12:39:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-376509681",
            "id": 376509681,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjUwOTY4MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/376509681/reactions"
            },
            "updated_at": "2018-03-27T12:39:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/376509681",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Made the changes for the Windows, it will work all fine, for linux, presently using popen and pclose, added better error handling, removed the kern_return_t\r\n\r\nWill work on making the new file for this stuff later, when more conversation on this will be done, because, its now unclear, where to put this code, this is a single function, will it be better to make a new file for this, in keyboard.c, or is it better to leave it here, or it is better to put it in input.c.\r\n\r\nFor linux, section, there is a query, will not posix work, I saw by greping, there is a use of popen in `src/nvim/log.c`, and I read about spawning new processes in a process, but libuv is good when we are spawing multiple processes of similar type from one process, but here we are doing this only once. So some light on this is also needed.\r\n",
            "created_at": "2018-03-29T20:41:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377365655",
            "id": 377365655,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzM2NTY1NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377365655/reactions"
            },
            "updated_at": "2018-03-29T20:41:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377365655",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  use of popen in src/nvim/log.c, and I read about spawning new processes in a process, \r\n\r\nlog.c is an exception because it may be used before we have even initialized libuv. \r\n\r\nFor this PR, I would fallback to Lua in the `api/vim.c` implementation. See how `nvim_get_proc*` does it: https://github.com/nimitbhardwaj/neovim/blob/f8d19ae7ab30987ccf3c09c29a41fed715d5cb8b/src/nvim/api/vim.c#L1503-L1506\r\n\r\nOr you could use `os_system` (C instead of Lua).",
            "created_at": "2018-03-29T22:00:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377385665",
            "id": 377385665,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzM4NTY2NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377385665/reactions"
            },
            "updated_at": "2018-03-29T22:00:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377385665",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@nimitbhardwaj `log.c` is a debug stuff, not used for actual release and also optional for debug builds as well, not to mention the fact that `log_callstack` is used exactly nowhere side from *intermediate* commits in a PR or non-committed code. Things are different if what you want is going to core.",
            "created_at": "2018-03-29T22:00:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377385785",
            "id": 377385785,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzM4NTc4NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377385785/reactions"
            },
            "updated_at": "2018-03-29T22:00:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377385785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "OK, got it, thanks on it :smile: ",
            "created_at": "2018-03-30T06:30:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377457092",
            "id": 377457092,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzQ1NzA5Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377457092/reactions"
            },
            "updated_at": "2018-03-30T06:30:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377457092",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Make the new source file,` os/keyboard.c` for the work, and also used the lua for getting the output for the shell command",
            "created_at": "2018-03-30T12:28:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377514437",
            "id": 377514437,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzUxNDQzNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377514437/reactions"
            },
            "updated_at": "2018-03-30T12:28:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377514437",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Now, if linux is fine, next work will be on MacOS, because, I think windows is correct, macOS functions are not all clear to me, I just have some Idea and read the code and documentation governing it, but still there are some typedefs which were previously posing problems.",
            "created_at": "2018-03-30T12:30:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377514756",
            "id": 377514756,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzUxNDc1Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377514756/reactions"
            },
            "updated_at": "2018-03-30T12:30:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377514756",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Now the error left for us is, `typedef redefinition with different types ('unsigned char' vs 'bool')`, this occurs in macOS, there is \r\n```text\r\n/usr/include/MacTypes.h:309:41: error: typedef redefinition with different types ('unsigned char' vs 'bool')\r\n\r\ntypedef unsigned char                   Boolean;\r\n```\r\nin macos library, and \r\n```text\r\n../src/nvim/api/private/defs.h:68:14: note: previous definition is here\r\n\r\ntypedef bool Boolean;\r\n```\r\nwe use it\r\n\r\nEdit:\r\nMay be [this](https://stackoverflow.com/a/27436052/5658353) this thing is handy",
            "created_at": "2018-03-30T13:45:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377527264",
            "id": 377527264,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzUyNzI2NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377527264/reactions"
            },
            "updated_at": "2018-03-30T13:50:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377527264",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Now only one error persists, the `KR_SUCCESS` not defined, i don't know why it exists, I included the `IOKit/IOReturn.h` which should fix it acc to doc",
            "created_at": "2018-03-30T14:51:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377540575",
            "id": 377540575,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU0MDU3NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377540575/reactions"
            },
            "updated_at": "2018-03-30T14:51:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377540575",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Now if the error persists, I am leaving coding",
            "created_at": "2018-03-30T15:15:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377546997",
            "id": 377546997,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU0Njk5Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377546997/reactions"
            },
            "updated_at": "2018-03-30T15:15:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377546997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The work is done, it was working fine on my PC, now this is done, time is now to make a test.\r\nAlso if there are changes, I am happy to apply, but I think most of the work on coding is done.\r\nFor test I want to ask, the place where the test are run, on CI, does it have xset etc, so whatif tests not work there",
            "created_at": "2018-03-30T16:44:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377566836",
            "id": 377566836,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU2NjgzNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377566836/reactions"
            },
            "updated_at": "2018-03-30T16:45:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377566836",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> on CI, does it have xset etc, so whatif tests not work there\r\n\r\nSomething like this (add it to `test/functional/api/vim_spec.lua`):\r\n\r\n```lua\r\n    local eq = helpers.eq\r\n    local meths = helpers.meths\r\n\r\n    it('...', function()\r\n      eq(false, meths.get_caps_state())\r\n    end)\r\n\r\n```\r\n\r\nNote that testing \"false\" state is good enough, to exercise the codepath. Can't set capslock from the tests to check \"true\" state.  \r\n\r\nThe test will fail if the developer actually _has_ capslock enabled :)",
            "created_at": "2018-03-30T19:04:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377598247",
            "id": 377598247,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzU5ODI0Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377598247/reactions"
            },
            "updated_at": "2018-03-31T09:09:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377598247",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk If code is going to proceed relying on `xset` then tests just should put *their* `xset` into `$PATH`. For the same reason there must not be something pending that depends on `has_xset()`, test should check for failure when `xset` is definitely not there (because `$PATH` got empty or the like) and test should check for true/false when `xset` is there and with output like there is a keyboard with different status and test should check for failure again if there is no keyboard (and not sure about multiple keyboards with different caps lock status (if that is possible at all, never tried to connect many of them)). Possibly also another test which checks that actual `xset` output is sane on the machine so that if some developer has machine with strange `xset` he would be able to notice that and report.\r\n\r\nFor other environments it would be logical to retrieve status somehow in lua and check that status matches. Do not forget that there are three expected statuses and additional possible: caps lock active, caps lock turned off, no keyboard (+ no X on linux), many keyboards (additional, normally unexpected, but who knows: maybe Neovim is being used by an administrator in process of setting up the one machine to serve multiple users directly (not via clients) which already has all keyboards attached, but has not yet configured them to be distributed).",
            "created_at": "2018-03-30T21:35:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377628642",
            "id": 377628642,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzYyODY0Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377628642/reactions"
            },
            "updated_at": "2018-03-30T21:35:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377628642",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ZyX-I you mean a fake `xset` similar to `test/functional/fixtures/shell-test.c` ? Sounds good, but that can be done later. In the meantime we can just expect `false` always. \r\n\r\nI modified my code sample above.",
            "created_at": "2018-03-31T09:08:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377678718",
            "id": 377678718,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY3ODcxOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377678718/reactions"
            },
            "updated_at": "2018-03-31T09:08:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377678718",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "OK, I now make the changes, so I need to check for false always, lets play with the code and tell my status",
            "created_at": "2018-03-31T10:39:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377683799",
            "id": 377683799,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY4Mzc5OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377683799/reactions"
            },
            "updated_at": "2018-03-31T10:42:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377683799",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This work is done, I tried the test, this test passes when I do `TEST_FILE=test/functional/api/vim_spec.lua make functionaltest` iff Capslock is off, but if the capslock is active this test fails, so I write the condition in the it, capslock should be off if testing",
            "created_at": "2018-03-31T11:00:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377684890",
            "id": 377684890,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY4NDg5MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377684890/reactions"
            },
            "updated_at": "2018-03-31T11:00:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377684890",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "As I tested the code in console mode of linux, on `make functionaltest` test I added is failed, so I think this test which is added should be an optional test, I think of it, there would be a function `has_xset` as described by @ZyX-I , then if its true then the test will be performed, but first lets get the results of the CI testing",
            "created_at": "2018-03-31T11:14:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377685592",
            "id": 377685592,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY4NTU5Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377685592/reactions"
            },
            "updated_at": "2018-03-31T11:14:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377685592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is everyone happy with `nvim_get_caps_state` name or should it be more general, like `nvim_get_key_mods` (returning a Dictionary like `{'capslock':true}`, with potential to extend later)?",
            "created_at": "2018-03-31T12:21:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377689272",
            "id": 377689272,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY4OTI3Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377689272/reactions"
            },
            "updated_at": "2018-03-31T12:22:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377689272",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk I do not see why it should be postponed. There is no need in writing a thing in C, and even if there was it would be something as simple as “just print environment variable value” or “just output file from a terminal”. I am personally fine with this function non-existent, and dictionary sounds better: never had much problems with capslock, but numpad is a thing I constantly use and I learned from expeirence that activating scroll lock will trash keyboard interactions with i3 and fluxbox (and does not have any indication as indicator is reserved for layout changes).",
            "created_at": "2018-03-31T12:34:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377690001",
            "id": 377690001,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5MDAwMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377690001/reactions"
            },
            "updated_at": "2018-03-31T12:34:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377690001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "By the way, came to think about that: what is being read about caps lock is the “XKB indicators” setting, right? Based on my experience with scroll lock I may say that it is *not* right way to query status as one can have LED on (or e.g. set to track HDD activity), but lock off. Also to query LED status there appears to exist `/sys/class/leds`.\r\n\r\nBTW, found a thing which is going to work in linux console (no X, I mean): `setleds`. Not working in screen in console though.",
            "created_at": "2018-03-31T12:59:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377691418",
            "id": 377691418,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5MTQxOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377691418/reactions"
            },
            "updated_at": "2018-03-31T12:59:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377691418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Based on my experience with scroll lock I may say that it is not right way to query status as one can have LED on (or e.g. set to track HDD activity), but lock off\r\n\r\nIf it does _something useful_ that can help users it's worth doing. Doesn't have to be perfect, though perfection is welcome in future PRs.",
            "created_at": "2018-03-31T13:06:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377691803",
            "id": 377691803,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5MTgwMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377691803/reactions"
            },
            "updated_at": "2018-03-31T13:06:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377691803",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "What is needed is as simple as\r\n\r\n```C\r\n#include <stdio.h>\r\n#include <X11/X.h>\r\n#include <X11/XKBlib.h>\r\n\r\nint main(const int argc, const char *const *const argv,\r\n         const char *const *const environ)\r\n{\r\n    Display *display = XOpenDisplay(NULL);\r\n    if (display == NULL) {\r\n        fprintf(stderr, \"Couldn't open display\\n\");\r\n        return 2;\r\n    }\r\n    XkbStateRec xkb_state;\r\n    Status status = XkbGetState(display, XkbUseCoreKbd, &xkb_state);\r\n    if (status) {\r\n        fprintf(stderr, \"XkbGetState returned %d\\n\", status);\r\n        int err = XCloseDisplay(display);\r\n        if (err) {\r\n            fprintf(stderr, \"XCloseDisplay returned %d\\n\", err);\r\n            return 3;\r\n        }\r\n        return 1;\r\n    }\r\n    printf(\"state.locked_mods=%02x\\n\", xkb_state.locked_mods);\r\n    int err = XCloseDisplay(display);\r\n    if (err) {\r\n        fprintf(stderr, \"XCloseDisplay returned %d\\n\", err);\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n```\r\n\r\n`locked_mods` uses 0x10 for num lock, 0x80 for scroll and 0x02 for caps. Not sure where exactly in C headers those constants live, but in any case that is better then `xset`.",
            "created_at": "2018-03-31T13:21:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377692577",
            "id": 377692577,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5MjU3Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377692577/reactions"
            },
            "updated_at": "2018-03-31T13:22:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377692577",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think of code for numslock is also a good option, but the talk above was a huge for me, I was gone for 1 hr. OK, so, what is conclusion, I read about the above code, I understood it. But one problem is there, I think in neovim we don't include X11, as @bfredl told earlier, this will be included indirectly using the nvimx11, his repo.\r\nDid I missed something",
            "created_at": "2018-03-31T13:36:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377693521",
            "id": 377693521,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5MzUyMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377693521/reactions"
            },
            "updated_at": "2018-03-31T13:36:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377693521",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@nimitbhardwaj Linking is not an option. But `uv_dlopen` should be fine. I am currently writing a code which should work with this variant.",
            "created_at": "2018-03-31T13:50:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377694465",
            "id": 377694465,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5NDQ2NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377694465/reactions"
            },
            "updated_at": "2018-03-31T13:50:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377694465",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "OK, thanks",
            "created_at": "2018-03-31T14:00:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377695107",
            "id": 377695107,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5NTEwNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377695107/reactions"
            },
            "updated_at": "2018-03-31T14:00:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377695107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This works for me, though as a standalone binary:\r\n\r\n```C\r\n#include <stdio.h>\r\n#include <stdbool.h>\r\n#include <uv.h>\r\n\r\n#define emsgf(...) \\\r\n    fprintf(stderr, __VA_ARGS__)\r\n\r\n#define XLIB_NAME \"libX11.so.6\"\r\n\r\ntypedef void *_XDisplay;\r\ntypedef struct {\r\n    char data[18];\r\n} _XkbStateRec;\r\ntypedef int _XStatus;\r\n\r\nenum { kLockedModsOffset = 9 };\r\nenum { _XkbUseCoreKbd = 0x0100 };\r\nenum {\r\n    kXlibScrollLock = 0x80,\r\n    kXlibNumLock = 0x10,\r\n    kXlibCapsLock = 0x02,\r\n};\r\n\r\nstatic bool xlib_opened = false;\r\nstatic uv_lib_t xlib;\r\n\r\nstatic bool xlib_open(void)\r\n{\r\n    if (xlib_opened) {\r\n        return true;\r\n    }\r\n    const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);\r\n    if (udl_ret != 0) {\r\n        emsgf(\"E5316: Failed to open library %s: %s\",\r\n              XLIB_NAME, uv_dlerror(&xlib));\r\n    } else {\r\n        xlib_opened = true;\r\n    }\r\n    return xlib_opened;\r\n}\r\n\r\nstatic bool xlib_dlsym(const char *const name, void **const ptr)\r\n{\r\n    const int uds_ret = uv_dlsym(&xlib, name, ptr);\r\n    if (uds_ret != 0) {\r\n        emsgf(\"E5317: Failed to get symbol %s from library %s: %s\",\r\n              name, XLIB_NAME, uv_dlerror(&xlib));\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nstatic bool xlib_get_lock_status(char *const mods)\r\n{\r\n#define CLOSE_DISPLAY(display) \\\r\n    do { \\\r\n        const int err = _XCloseDisplay(display); \\\r\n        if (err) { \\\r\n            emsgf(\"E5318: XCloseDisplay returned %d\\n\", err); \\\r\n            return false; \\\r\n        } \\\r\n    } while (0)\r\n    *mods = 0;\r\n    if (!xlib_open()) {\r\n        return false;\r\n    }\r\n    _XDisplay *(*_XOpenDisplay)(void *);\r\n    int (*_XCloseDisplay)(_XDisplay *);\r\n    _XStatus (*_XkbGetState)(_XDisplay *, unsigned, _XkbStateRec *);\r\n    if (!xlib_dlsym(\"XOpenDisplay\", (void **)&_XOpenDisplay)\r\n        || !xlib_dlsym(\"XCloseDisplay\", (void **)&_XCloseDisplay)\r\n        || !xlib_dlsym(\"XkbGetState\", (void **)&_XkbGetState)) {\r\n        return false;\r\n    }\r\n\r\n    _XDisplay *const display = _XOpenDisplay(NULL);\r\n    if (display == NULL) {\r\n        emsgf(\"E5319: Couldn't open display\\n\");\r\n        return false;\r\n    }\r\n\r\n    _XkbStateRec xkb_state;\r\n    const _XStatus status = _XkbGetState(display, _XkbUseCoreKbd, &xkb_state);\r\n    if (status) {\r\n        emsgf(\"E5320: XkbGetState returned %d\\n\", status);\r\n        CLOSE_DISPLAY(display);\r\n    }\r\n    *mods = xkb_state.data[kLockedModsOffset];\r\n\r\n    CLOSE_DISPLAY(display);\r\n    return true;\r\n#undef CLOSE_DISPLAY\r\n}\r\n\r\nint main(const int argc, const char *const *const argv,\r\n         const char *const *const environ)\r\n{\r\n    char mods;\r\n    if (!xlib_get_lock_status(&mods)) {\r\n        return 1;\r\n    }\r\n    if (mods & kXlibScrollLock) {\r\n        puts(\"ScrollLock active\");\r\n    }\r\n    if (mods & kXlibNumLock) {\r\n        puts(\"NumLock active\");\r\n    }\r\n    if (mods & kXlibCapsLock) {\r\n        puts(\"CapsLock active\");\r\n    }\r\n}\r\n```",
            "created_at": "2018-03-31T14:03:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377695296",
            "id": 377695296,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5NTI5Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377695296/reactions"
            },
            "updated_at": "2018-03-31T14:03:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377695296",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes, this seems better than using `xset` it can be used in non-console mode, but is giving error on console.\r\n\r\nBut also there would be changes required for windows and macOS",
            "created_at": "2018-03-31T14:10:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377695740",
            "id": 377695740,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5NTc0MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377695740/reactions"
            },
            "updated_at": "2018-03-31T14:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377695740",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@nimitbhardwaj This is also better because it queries actual lock status and not LED status. Wayland and raw terminals are still a problem though.",
            "created_at": "2018-03-31T14:16:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377696051",
            "id": 377696051,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5NjA1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377696051/reactions"
            },
            "updated_at": "2018-03-31T14:16:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377696051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "One thing I have concern of, there is use of `libX11.so.6`, I want to ask if suppose I add above code the the code I created for this PR, then there is libX11, it seems according to me, it is loaded by libuv here in the line `    const int udl_ret = uv_dlopen(XLIB_NAME, &xlib);`, I want to ask here we use the code of libX11, but we could do so by includeing it too, isn't it, why we do so. This thing is not so clear to me now.\r\n\r\nAfter this work, or after simple including and linking, the state of the program would be the same, the library will be loaded.",
            "created_at": "2018-03-31T14:35:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377697249",
            "id": 377697249,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5NzI0OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377697249/reactions"
            },
            "updated_at": "2018-03-31T14:39:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377697249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@nimitbhardwaj First, completely not the same, you could use new symbols only through `dlsym`. Second, linking at compile time *will prevent Neovim from running if library is not available*. Not able to load library via `uv_dlopen` will not even crash Neovim, not to mention preventing it from running. Third, if caps lock is not queried then library is not loaded at all.",
            "created_at": "2018-03-31T14:42:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377697729",
            "id": 377697729,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5NzcyOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377697729/reactions"
            },
            "updated_at": "2018-03-31T14:42:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377697729",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Understood it completely, the code was big, initially I thought it would be a tough code, but as I read it became clear, now I think the code is so cool. :+1: ",
            "created_at": "2018-03-31T14:45:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377697955",
            "id": 377697955,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5Nzk1NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377697955/reactions"
            },
            "updated_at": "2018-03-31T14:46:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377697955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ok, I will add this code, adjust it accordingly, and also change the codes for the windows and mac(which seems not too difficult), I also want a word from @bfredl @justinmk @jamessan who reviewed this PR",
            "created_at": "2018-03-31T14:48:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377698105",
            "id": 377698105,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5ODEwNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377698105/reactions"
            },
            "updated_at": "2018-03-31T14:48:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377698105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Code consists of primary error handling. The fact that I avoided using X headers while at the same time also avoiding conflicts with names from there also contributed. BTW, just to be safe maybe it is good idea to make `data` array have 64 bytes: it does not need to be exactly the same size as original structure like it is now.",
            "created_at": "2018-03-31T14:51:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377698319",
            "id": 377698319,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5ODMxOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377698319/reactions"
            },
            "updated_at": "2018-03-31T14:51:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377698319",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think @ZyX-I 's approach fine for now. Tough in the long run (which means later than this PR)  I don't think we want to indirect every Xlib/Xcb call through a symbol lookup. Rather have `nvim_X11.so` which can link directly to X (and only be built on system with X11 headers), this can then export a small clean interface, which either is accessed with `uv_dlopen`/`uv_dlsym` like this or with lua cffi like bfredl/nvim-x11 does. ",
            "created_at": "2018-03-31T15:04:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377699246",
            "id": 377699246,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5OTI0Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377699246/reactions"
            },
            "updated_at": "2018-03-31T15:04:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377699246",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bfredl I do not see why indirecting Xlib/Xcb calls through a symbol lookup should be a problem (though I really should’ve cached that). I still like the idea of such proxy, but for different reasons: proxy may not only link directly, it may also include headers in place of either creating strange types or maintaining a copy, at the same time having its own headers which do not introduce dependency on X11 when being included.",
            "created_at": "2018-03-31T21:47:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377725820",
            "id": 377725820,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzcyNTgyMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377725820/reactions"
            },
            "updated_at": "2018-03-31T21:47:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377725820",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I didn't say it was a problem, it is just a matter of convenience. If we later on add  X11 clipboard support though the same mechanism (to properly support vimenc format), then the libX11 API surface is going to be quite large, but the interface to nvim can be three functions (get, set, and an integration to let libuv watch the X11 file descriptor, currently nvim-x11 cheats on the latter and uses the global symbol for the uv_loop_t). ",
            "created_at": "2018-04-01T07:53:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377769793",
            "id": 377769793,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3Nzc2OTc5Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377769793/reactions"
            },
            "updated_at": "2018-04-01T07:53:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377769793",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I made the changes, this was a little bit big edit, so please check if there is room of edits, I know the tests and doc for it is outdated, I will change them too, but first main thing is the code, its working on my computer.\r\nOne more thing there, I check macOS, there was no ScrollLock, it was may be added later, I read they say its in extended apple keyboard, and even there to activate it some combination with `F11` is needed (may be with some other function key), so please check the code if its correct, I know there would be some changes in the code in future too, so please check if I keep this in mind.",
            "created_at": "2018-04-01T09:23:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377774192",
            "id": 377774192,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3Nzc3NDE5Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377774192/reactions"
            },
            "updated_at": "2018-04-01T09:23:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377774192",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Why the error occur, travis is falling completely\r\n",
            "created_at": "2018-04-01T15:12:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-377793405",
            "id": 377793405,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3Nzc5MzQwNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377793405/reactions"
            },
            "updated_at": "2018-04-01T15:12:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/377793405",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Done sirs, I did it a little bit late, as I was in a college competition :smile: ",
            "created_at": "2018-04-02T20:11:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-378030038",
            "id": 378030038,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODAzMDAzOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378030038/reactions"
            },
            "updated_at": "2018-04-02T20:11:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378030038",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I make the necessary changes, but for the case of `kOSModQueryMask`, its use is unclear to me, where it can be used, because I `mods` is now platform independent, so its use is unclear to me now",
            "created_at": "2018-04-03T15:20:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-378288417",
            "id": 378288417,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODI4ODQxNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378288417/reactions"
            },
            "updated_at": "2018-04-03T15:20:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378288417",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "There is no need for an error check in `const int e = _XCloseDisplay(display);`, [here](https://stackoverflow.com/questions/23083523/what-does-xclosedisplay-return?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa) is explaination",
            "created_at": "2018-04-04T17:09:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-378674966",
            "id": 378674966,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY3NDk2Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378674966/reactions"
            },
            "updated_at": "2018-04-04T17:09:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378674966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I will make the changes in the test, but I have made the changes in the code this seems to be fine according to me, for the case of using the enum for the mask, I used this with typedef, which I think is better now.\r\n\r\nHope the reviewers would like this too, I will make the tests",
            "created_at": "2018-04-04T20:37:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-378736970",
            "id": 378736970,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODczNjk3MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378736970/reactions"
            },
            "updated_at": "2018-04-04T20:37:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378736970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I thought using this err message will enhance the abstraction, suppose if the error message used was something so specific, then it may be hard to understand for the person who is using this function, but if the error is supposed for the core developers, I don't think it would be needed, because, the presence of error would be easily traced by gdb so, why is there a need, I thought that providing simple error message will be better\r\n\r\nNobody ever bothers with using `gdb` if they have other means of debugging. This is a last resort as it rather time-consuming, at the same time requires a certain mix of understanding and not understanding code and may prevent error from actually occurring. Error message is there so that users may understand the issue, fix if it is simple (dlsym reporting access error and dlsym reporting failure to find *are* fixable by user, especially if there is decent error message, dlsym reporting error without specifics is most likely *not*), report if it is not and get understanding out of developers of where it happened and what may be the cause.\r\n\r\nThat does not need to mention `uv_dlsym`: anybody proficient enough knows what may be used to open libraries, anybody not may either infer actions from error message saying that it tried to *open library* and failed with *permission error* (based on what I know this is the kind of error message reported by `uv_dlerror`) or easily find such person in chat. Without “permission error” bit inferring actions is too hard and whoever person willing to help will have to do lots of actions named “remote debugging” just to get that “permission error” bit, and you honestly can *never* expect “remote debugging” to work with `gdb` because 1. people *do errors* thus part of “remote debugging” is always figuring whether you were understood right and whether after you were understood right actions were performed without mistakes and 2. most likely *do have optimized builds and no libuv debugging symbols*.\r\n\r\nAs for error identifier (error code in most messages): it is for linking in help and for matching in `:catch`. Both could apply to API errors, but they do *not* now, so API errors have no error code.",
            "created_at": "2018-04-04T22:01:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-378759141",
            "id": 378759141,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc1OTE0MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378759141/reactions"
            },
            "updated_at": "2018-04-04T22:01:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378759141",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@ZyX-I thanks for information, I get it now",
            "created_at": "2018-04-05T11:53:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-378910555",
            "id": 378910555,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODkxMDU1NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378910555/reactions"
            },
            "updated_at": "2018-04-05T11:53:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/378910555",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I made the changes",
            "created_at": "2018-04-05T22:00:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379089979",
            "id": 379089979,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA4OTk3OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379089979/reactions"
            },
            "updated_at": "2018-04-05T22:00:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379089979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I made the changes",
            "created_at": "2018-04-05T22:27:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379095509",
            "id": 379095509,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA5NTUwOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379095509/reactions"
            },
            "updated_at": "2018-04-05T22:27:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379095509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I finalize the PR, the tests are added if there are now other issues, this PR can be merged.\r\n@jamessan  @bfredl  @ZyX-I  @justinmk ",
            "created_at": "2018-04-08T10:18:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379538622",
            "id": 379538622,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTUzODYyMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379538622/reactions"
            },
            "updated_at": "2018-04-08T10:18:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379538622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Changes are made",
            "created_at": "2018-04-08T11:42:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379543685",
            "id": 379543685,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU0MzY4NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379543685/reactions"
            },
            "updated_at": "2018-04-08T11:42:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379543685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "its done",
            "created_at": "2018-04-08T13:36:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379551200",
            "id": 379551200,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU1MTIwMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379551200/reactions"
            },
            "updated_at": "2018-04-08T13:36:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379551200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The reason for the failure of the C Travis tests for linux is a check `eq(\"Unable to load\"...)` What here can be done?\r\n\r\nThere is a possibility that the failure is due because some other error occurs apart from `Unable to load` ",
            "created_at": "2018-04-08T15:46:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379560114",
            "id": 379560114,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU2MDExNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379560114/reactions"
            },
            "updated_at": "2018-04-08T15:47:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379560114",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "You need to modify test so that it shows actual error message. There [is](https://github.com/Olivine-Labs/luassert/blob/master/src/assertions.lua#L315) `assert.matches` for that, though `assert` module is rarely used directly in our tests for some reason. Though first check locally against static strings, it is not exactly a documented feature as far as I see; busted and friends never had good documentation actually: you may see that luassert readme points to busted documentation, but busted documentation is 1. not a luassert documentation and 2. does not mention the function I pointed out.",
            "created_at": "2018-04-08T16:03:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379561277",
            "id": 379561277,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU2MTI3Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379561277/reactions"
            },
            "updated_at": "2018-04-08T16:03:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379561277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "One more option, just add `eq(\"\", rv)`, there will be failure in the ci, and so the error message will be known, and appropriate actions can be taken.\r\n\r\nA very lazy way to do things",
            "created_at": "2018-04-09T20:45:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379888447",
            "id": 379888447,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTg4ODQ0Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379888447/reactions"
            },
            "updated_at": "2018-04-09T20:49:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379888447",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@nimitbhardwaj It is not a right way to do things. `assert.matches` will help if somebody runs into the problem again for a different reason, but `eq('', rv)` needs to be removed.",
            "created_at": "2018-04-09T21:19:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379897327",
            "id": 379897327,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTg5NzMyNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379897327/reactions"
            },
            "updated_at": "2018-04-09T21:19:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379897327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Error detected in CI, the error was `Unable to open the display` for linux(on two tests one with CLang and with gcc with -m32), I got the reason, I now assume that there is a library X11 in linux, but the environment variable is not set which links the library with the display of the computer monitor, [here](https://linux.die.net/man/3/xopendisplay) explains it better\r\n\r\nAnd also one of the error was `Unable to load the X11: No such file or directory` this states that the Library is not present, this failure was on the test with simple gcc, for functional tests\r\n\r\nAnd for the MacOS, I didn't find the appropriate reason which type of error occurs\r\n\r\nI would like to get some feedback of it, I will then add the changes tomorrow",
            "created_at": "2018-04-09T21:21:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379898027",
            "id": 379898027,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTg5ODAyNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379898027/reactions"
            },
            "updated_at": "2018-04-09T21:29:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379898027",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Inability to open display is not a good reason to fail tests. And environment variable would not be set to conserve CPU and memory: travis can be used to test GUI apps, but X server consumes resources so it is not a good idea to run it unless required.\r\n\r\nNote that there are cases when X11 libraries are going to be missing, test should check for both errors.",
            "created_at": "2018-04-09T21:33:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-379900951",
            "id": 379900951,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTkwMDk1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379900951/reactions"
            },
            "updated_at": "2018-04-09T21:33:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/379900951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The tests are done, the tests are now positive for my test, One test of the travis fails, but its failure is not due to me, some other error is there, and the windows testing will be complete, so I think work is done",
            "created_at": "2018-04-10T11:34:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-380067317",
            "id": 380067317,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDA2NzMxNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/380067317/reactions"
            },
            "updated_at": "2018-04-10T11:34:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/380067317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@nimitbhardwaj would you mind rebasing once more? Quickbuild should be green now, after rebasing onto master.",
            "created_at": "2018-04-14T22:35:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-381365441",
            "id": 381365441,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM2NTQ0MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/381365441/reactions"
            },
            "updated_at": "2018-04-14T22:35:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/381365441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "OK, I rebase it ",
            "created_at": "2018-04-15T07:01:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-381385021",
            "id": 381385021,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM4NTAyMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/381385021/reactions"
            },
            "updated_at": "2018-04-15T07:01:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/381385021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I \r\n\r\nI saw one mention of [/sys/class/leds/inputN::capslock/brightness](https://www.kernel.org/doc/html/latest/leds/leds-class.html) in this thread, but no followup. This looks promising.\r\n\r\n1. This appears to work on wayland\r\n2. It also appears to work when there is no graphical session\r\n3. I see no reason why this would not work on X11 because the API is provided by the linux kernel. Different GUI stack, same kernel\r\n4. The code is simple - just open a file and read it\r\n\r\nIs there some issue with this I am not aware of? The only problem I can think of is guessing whether it is input1, input2, input3, ...\r\n\r\n```\r\n$ cat '/sys/class/leds/input2::capslock/brightness' # when capslock off - 0\r\n0\r\n$ cat '/sys/class/leds/input2::capslock/brightness' # when capslock on - not zero\r\n1\r\n```\r\n\r\n> By the way, came to think about that: what is being read about caps lock is the “XKB indicators” setting, right? Based on my experience with scroll lock I may say that it is _not_ right way to query status as one can have LED on (or e.g. set to track HDD activity), but lock off. Also to query LED status there appears to exist `/sys/class/leds`.\r\n> \r\n> BTW, found a thing which is going to work in linux console (no X, I mean): `setleds`. Not working in screen in console though.\r\n\r\n\r\n",
            "created_at": "2023-11-23T14:46:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-1824554925",
            "id": 1824554925,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "IC_kwDOAPphoM5swH-t",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1824554925/reactions"
            },
            "updated_at": "2023-11-23T14:47:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1824554925",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52621858?v=4",
                "events_url": "https://api.github.com/users/hexagonrecursion/events{/privacy}",
                "followers_url": "https://api.github.com/users/hexagonrecursion/followers",
                "following_url": "https://api.github.com/users/hexagonrecursion/following{/other_user}",
                "gists_url": "https://api.github.com/users/hexagonrecursion/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hexagonrecursion",
                "id": 52621858,
                "login": "hexagonrecursion",
                "node_id": "MDQ6VXNlcjUyNjIxODU4",
                "organizations_url": "https://api.github.com/users/hexagonrecursion/orgs",
                "received_events_url": "https://api.github.com/users/hexagonrecursion/received_events",
                "repos_url": "https://api.github.com/users/hexagonrecursion/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hexagonrecursion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hexagonrecursion/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hexagonrecursion",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "It looks like no one mentioned [wl_keyboard::modifiers](https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_keyboard-event-modifiers) yet - the wayland protocol does have a built-in way to find the current state of caps lock and num lock. Probably scroll lock too, but that key does not work on my keyboard. [I tested this with the wev debug utility that prints wayland \"events\"](https://man.archlinux.org/man/extra/wev/wev.1.en). It may be a good idea to defer wayland support to a future pull request.\r\n\r\nEdit: After some more testing with wev in gnome-shell and in sway it appears that **only the window that has keyboard focus** receives wl_keyboard::modifiers events. For us this is either the app --embedding neovim or the terminal emulator. If '/sys/class/leds/input<INSERT NUMBER HERE>::capslock/brightness' does not work for us (I don't know. Why not?), wayland suport may require us to extend the RPC protocol to make the client notify us when caps is pressed/released. For terminal emulators in wayland we may need to modify the emulators to add  a new control sequence similar to how focus-in and focus-out events work.",
            "created_at": "2023-11-25T12:11:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-1826293942",
            "id": 1826293942,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "IC_kwDOAPphoM5s2wi2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1826293942/reactions"
            },
            "updated_at": "2023-11-27T13:03:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1826293942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/52621858?v=4",
                "events_url": "https://api.github.com/users/hexagonrecursion/events{/privacy}",
                "followers_url": "https://api.github.com/users/hexagonrecursion/followers",
                "following_url": "https://api.github.com/users/hexagonrecursion/following{/other_user}",
                "gists_url": "https://api.github.com/users/hexagonrecursion/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hexagonrecursion",
                "id": 52621858,
                "login": "hexagonrecursion",
                "node_id": "MDQ6VXNlcjUyNjIxODU4",
                "organizations_url": "https://api.github.com/users/hexagonrecursion/orgs",
                "received_events_url": "https://api.github.com/users/hexagonrecursion/received_events",
                "repos_url": "https://api.github.com/users/hexagonrecursion/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hexagonrecursion/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hexagonrecursion/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hexagonrecursion",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "see https://github.com/neovim/neovim/issues/1480#issuecomment-3058534007",
            "created_at": "2025-07-10T18:40:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/8187#issuecomment-3058536681",
            "id": 3058536681,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
            "node_id": "IC_kwDOAPphoM62TZDp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3058536681/reactions"
            },
            "updated_at": "2025-07-10T18:40:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3058536681",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/8187/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/8187/commits",
    "created_at": "2018-03-26T19:03:34Z",
    "diff_url": "https://github.com/neovim/neovim/pull/8187.diff",
    "draft": false,
    "head": {
        "label": "nimitbhardwaj:capslock_status",
        "ref": "capslock_status",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/nimitbhardwaj/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/nimitbhardwaj/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/nimitbhardwaj/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/nimitbhardwaj/neovim/branches{/branch}",
            "clone_url": "https://github.com/nimitbhardwaj/neovim.git",
            "collaborators_url": "https://api.github.com/repos/nimitbhardwaj/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/nimitbhardwaj/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/nimitbhardwaj/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/nimitbhardwaj/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/nimitbhardwaj/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/nimitbhardwaj/neovim/contributors",
            "created_at": "2018-02-13T11:13:06Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/nimitbhardwaj/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/nimitbhardwaj/neovim/downloads",
            "events_url": "https://api.github.com/repos/nimitbhardwaj/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/nimitbhardwaj/neovim/forks",
            "full_name": "nimitbhardwaj/neovim",
            "git_commits_url": "https://api.github.com/repos/nimitbhardwaj/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/nimitbhardwaj/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/nimitbhardwaj/neovim/git/tags{/sha}",
            "git_url": "git://github.com/nimitbhardwaj/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://salt.bountysource.com/teams/neovim",
            "hooks_url": "https://api.github.com/repos/nimitbhardwaj/neovim/hooks",
            "html_url": "https://github.com/nimitbhardwaj/neovim",
            "id": 121373381,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/nimitbhardwaj/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/nimitbhardwaj/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/nimitbhardwaj/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/nimitbhardwaj/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/nimitbhardwaj/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/nimitbhardwaj/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/nimitbhardwaj/neovim/merges",
            "milestones_url": "https://api.github.com/repos/nimitbhardwaj/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjEzNzMzODE=",
            "notifications_url": "https://api.github.com/repos/nimitbhardwaj/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
                "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
                "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
                "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
                "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nimitbhardwaj",
                "id": 15214129,
                "login": "nimitbhardwaj",
                "node_id": "MDQ6VXNlcjE1MjE0MTI5",
                "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
                "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
                "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nimitbhardwaj",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/nimitbhardwaj/neovim/pulls{/number}",
            "pushed_at": "2018-04-21T12:37:26Z",
            "releases_url": "https://api.github.com/repos/nimitbhardwaj/neovim/releases{/id}",
            "size": 67713,
            "ssh_url": "git@github.com:nimitbhardwaj/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/nimitbhardwaj/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/nimitbhardwaj/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/nimitbhardwaj/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/nimitbhardwaj/neovim/subscription",
            "svn_url": "https://github.com/nimitbhardwaj/neovim",
            "tags_url": "https://api.github.com/repos/nimitbhardwaj/neovim/tags",
            "teams_url": "https://api.github.com/repos/nimitbhardwaj/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/nimitbhardwaj/neovim/git/trees{/sha}",
            "updated_at": "2018-02-13T11:13:14Z",
            "url": "https://api.github.com/repos/nimitbhardwaj/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
            "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
            "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
            "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
            "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/nimitbhardwaj",
            "id": 15214129,
            "login": "nimitbhardwaj",
            "node_id": "MDQ6VXNlcjE1MjE0MTI5",
            "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
            "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
            "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/nimitbhardwaj",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/8187",
    "id": 177538281,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8187",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "OS resources, pipes, streams",
            "id": 713599092,
            "name": "system",
            "node_id": "MDU6TGFiZWw3MTM1OTkwOTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/system"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTc3NTM4Mjgx",
    "number": 8187,
    "patch_url": "https://github.com/neovim/neovim/pull/8187.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/8187/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/e2f74de5152fed3cd7cbdb00a9e12c23277a542b",
    "title": "Functionality for detecting Capslock status",
    "updated_at": "2025-07-10T18:41:10Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/8187",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/15214129?v=4",
        "events_url": "https://api.github.com/users/nimitbhardwaj/events{/privacy}",
        "followers_url": "https://api.github.com/users/nimitbhardwaj/followers",
        "following_url": "https://api.github.com/users/nimitbhardwaj/following{/other_user}",
        "gists_url": "https://api.github.com/users/nimitbhardwaj/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/nimitbhardwaj",
        "id": 15214129,
        "login": "nimitbhardwaj",
        "node_id": "MDQ6VXNlcjE1MjE0MTI5",
        "organizations_url": "https://api.github.com/users/nimitbhardwaj/orgs",
        "received_events_url": "https://api.github.com/users/nimitbhardwaj/received_events",
        "repos_url": "https://api.github.com/users/nimitbhardwaj/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/nimitbhardwaj/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nimitbhardwaj/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/nimitbhardwaj",
        "user_view_type": "public"
    }
}