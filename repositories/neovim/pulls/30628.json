{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30628/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30628/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/30628"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30628"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30628/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/5b410d1e491d628a01d94819e5948c5af62198e3"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6249,
            "forks_count": 6249,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1985,
            "open_issues_count": 1985,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-08-11T22:39:04Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 336901,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91885,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-08-12T02:40:46Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91885,
            "watchers_count": 91885,
            "web_commit_signoff_required": false
        },
        "sha": "65b1733405e558e80527096a0ba42b5a678c9b54",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Based on issue #30376, I have made this change so that you can run commands when using the `read` command, and have their output added to the current buffer.\r\n\r\nThe current implementation uses vim script to basically do a `:put=execute('{cmd}')`, and I am happy to re-implement this in C if that would be better, but I would like to get some feedback on the tests and expected behaviour first. \r\n\r\nclose #30376\r\nclose #31909",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1814943731"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1814943731"
                }
            },
            "author_association": "MEMBER",
            "body": "this is already coverage of basic `:read` functionality in `test/old/` , so don't spend a lot of time adding more of that here. unless it is helping you during development, or you noticed some gaps in test/old/.",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-24T13:02:58Z",
            "diff_hunk": "@@ -0,0 +1,75 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear = t.eq, t.write_file, n.clear\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text at specific position', function()\n+    test_read('0read ' .. tmp_file, inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)\n+  end)\n+  it('sets fileformat, fileencoding, bomb correctly', function()",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1814943731",
            "id": 1814943731,
            "line": 68,
            "node_id": "PRRC_kwDOAPphoM5sLdfz",
            "original_commit_id": "85b6b2117d08d2d9dee2b53fddef9060959f38d8",
            "original_line": 68,
            "original_position": 57,
            "original_start_line": null,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 68,
            "pull_request_review_id": 2392432507,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1814943731/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-24T13:02:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1814943731",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1816992500"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1816992500"
                }
            },
            "author_association": "NONE",
            "body": "`execute()` seems to add an extra empty line above the output, so I have to jump back to the top of the inserted text and delete this line, so that we get behaviour that is more similar to reading a file. ",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-25T16:16:45Z",
            "diff_hunk": "@@ -5640,6 +5641,20 @@ static void ex_syncbind(exarg_T *eap)\n   }\n }\n \n+void do_read_cmd(exarg_T *eap)\n+{\n+  char *cmd = eap->arg + 1;\n+  StringBuilder put_cmd = KV_INITIAL_VALUE;\n+  kv_printf(put_cmd, \"try | \");\n+  kv_printf(put_cmd, \"%dput=execute('%s') | \", eap->line2, cmd);\n+  kv_printf(put_cmd, \"execute 'norm! `.' | \");",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1816992500",
            "id": 1816992500,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sTRr0",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 5650,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 2395783348,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1816992500/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-25T16:16:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1816992500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1816995825"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1816995825"
                }
            },
            "author_association": "NONE",
            "body": "wrapping things in a `try` means that if there is an error with the command no text is inserted into the buffer. \r\n\r\nThis _feels_ like the right behaviour to me, but potentially could someone want the error text inserted? When using `read !cmd` text will be inserted into the buffer even if there is an error. ",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-25T16:19:17Z",
            "diff_hunk": "@@ -5640,6 +5641,20 @@ static void ex_syncbind(exarg_T *eap)\n   }\n }\n \n+void do_read_cmd(exarg_T *eap)\n+{\n+  char *cmd = eap->arg + 1;\n+  StringBuilder put_cmd = KV_INITIAL_VALUE;\n+  kv_printf(put_cmd, \"try | \");",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1816995825",
            "id": 1816995825,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sTSfx",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 5648,
            "original_position": 16,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 2395788831,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1816995825/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-25T16:19:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1816995825",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1816997966"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1816997966"
                }
            },
            "author_association": "NONE",
            "body": "`:read {path}` and `read !{cmd}` leave the cursor in different positions. For my implementation of `:read :cmd` I leave the cursor in the same position as when reading a file. ",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-25T16:21:16Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1816997966",
            "id": 1816997966,
            "line": 46,
            "node_id": "PRRC_kwDOAPphoM5sTTBO",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": null,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 46,
            "pull_request_review_id": 2395793045,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1816997966/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-25T16:21:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1816997966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1817001746"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817001746"
                }
            },
            "author_association": "NONE",
            "body": "I'm not sure if this error message is the best it could be. Should I have it say `Vim(read):E492: ...`\r\n\r\nAlternatively, the error text could be written to the buffer. I don't _think_ it should, but I can see how someone might want that behaviour. ",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-25T16:24:01Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)\n+  end)\n+  it('inserts text from file at specific position', function()\n+    test_read('0read ' .. tmp_file, inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from cmd at specific position', function()\n+    test_read('0read !cat ' .. tmp_file, inserted_start)\n+    eq({ 0, 2, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from cmd at specific position', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('0read :echo lines', inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('sets fileformat, fileencoding, bomb correctly', function()\n+    execute('set fileformat=dos')\n+    execute('set fileencoding=latin1')\n+    execute('set bomb')\n+    execute('read ++edit ' .. tmp_file)\n+    eq('fileformat=unix', vim.trim(execute('set fileformat?')))\n+    eq('fileencoding=utf-8', vim.trim(execute('set fileencoding?')))\n+    eq('nobomb', vim.trim(execute('set bomb?')))\n+  end)\n+  it('file reads can be undone', function()\n+    test_undo('read ' .. tmp_file)\n+  end)\n+  it('shell reads can be undone', function()\n+    test_undo('read !cat ' .. tmp_file)\n+  end)\n+  it('command reads can be undone', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_undo('read :echo lines')\n+  end)\n+  it('errors out correctly when a non-existant file is used', function()\n+    eq(\"Vim(read):E484: Can't open file asdfasdf\", pcall_err(execute, ':read asdfasdf'))\n+  end)\n+  it('errors out correctly when an invalid command is used', function()\n+    eq('Vim:E492: Not an editor command: asdfasdf', pcall_err(execute, ':read :asdfasdf'))",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1817001746",
            "id": 1817001746,
            "line": 92,
            "node_id": "PRRC_kwDOAPphoM5sTT8S",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 92,
            "original_position": 91,
            "original_start_line": null,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 92,
            "pull_request_review_id": 2395800277,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817001746/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-25T16:24:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817001746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1817049699"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817049699"
                }
            },
            "author_association": "MEMBER",
            "body": "> Should I have it say `Vim(read):E492: ...`\r\n\r\nif it's not much trouble then I think so.\r\n\r\n> Alternatively, the error text could be written to the buffer\r\n\r\n`execute()` appears to capture error messages. But for now, let's optimize for implementation simplicity. Can always revisit later if needed.",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-25T16:56:25Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)\n+  end)\n+  it('inserts text from file at specific position', function()\n+    test_read('0read ' .. tmp_file, inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from cmd at specific position', function()\n+    test_read('0read !cat ' .. tmp_file, inserted_start)\n+    eq({ 0, 2, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from cmd at specific position', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('0read :echo lines', inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('sets fileformat, fileencoding, bomb correctly', function()\n+    execute('set fileformat=dos')\n+    execute('set fileencoding=latin1')\n+    execute('set bomb')\n+    execute('read ++edit ' .. tmp_file)\n+    eq('fileformat=unix', vim.trim(execute('set fileformat?')))\n+    eq('fileencoding=utf-8', vim.trim(execute('set fileencoding?')))\n+    eq('nobomb', vim.trim(execute('set bomb?')))\n+  end)\n+  it('file reads can be undone', function()\n+    test_undo('read ' .. tmp_file)\n+  end)\n+  it('shell reads can be undone', function()\n+    test_undo('read !cat ' .. tmp_file)\n+  end)\n+  it('command reads can be undone', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_undo('read :echo lines')\n+  end)\n+  it('errors out correctly when a non-existant file is used', function()\n+    eq(\"Vim(read):E484: Can't open file asdfasdf\", pcall_err(execute, ':read asdfasdf'))\n+  end)\n+  it('errors out correctly when an invalid command is used', function()\n+    eq('Vim:E492: Not an editor command: asdfasdf', pcall_err(execute, ':read :asdfasdf'))",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1817049699",
            "id": 1817049699,
            "in_reply_to_id": 1817001746,
            "line": 92,
            "node_id": "PRRC_kwDOAPphoM5sTfpj",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 92,
            "original_position": 91,
            "original_start_line": null,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 92,
            "pull_request_review_id": 2395881517,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817049699/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-25T16:56:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817049699",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1817055800"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817055800"
                }
            },
            "author_association": "MEMBER",
            "body": "will need to escape single-quotes, possibly other stuff. actually, all that could be avoided, including support for double quotes (\"), by storing `cmd` in a temporary `g:_blah` var, then doing:\r\n\r\n```suggestion\r\n  kv_printf(put_cmd, \"%dput=execute(g:_blah) | \", eap->line2, cmd);\r\n```",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-25T17:01:28Z",
            "diff_hunk": "@@ -5640,6 +5641,20 @@ static void ex_syncbind(exarg_T *eap)\n   }\n }\n \n+void do_read_cmd(exarg_T *eap)\n+{\n+  char *cmd = eap->arg + 1;\n+  StringBuilder put_cmd = KV_INITIAL_VALUE;\n+  kv_printf(put_cmd, \"try | \");\n+  kv_printf(put_cmd, \"%dput=execute('%s') | \", eap->line2, cmd);",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1817055800",
            "id": 1817055800,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sThI4",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 5649,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 2395891704,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817055800/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-25T17:01:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817055800",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1817541607"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817541607"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\t\t\tExecute Ex command {cmd} and insert its output below\r\n\t\t\tthe cursor or the specified line.\r\n```",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-26T01:44:09Z",
            "diff_hunk": "@@ -2000,14 +2000,20 @@ NOTE: These commands cannot be used with |:global| or |:vglobal|.\n \n \t\t\t\t\t\t\t*:r!* *:read!*\n :[range]r[ead] [++opt] !{cmd}\n-\t\t\tExecute {cmd} and insert its standard output below\n-\t\t\tthe cursor or the specified line.  A temporary file is\n-\t\t\tused to store the output of the command which is then\n-\t\t\tread into the buffer.  'shellredir' is used to save\n-\t\t\tthe output of the command, which can be set to include\n-\t\t\tstderr or not.  {cmd} is executed like with \":!{cmd}\",\n-\t\t\tany '!' is replaced with the previous command |:!|.\n-\t\t\tSee |++opt| for the possible values of [++opt].\n+\t\t\tExecute shell {cmd} and insert its standard output\n+\t\t\tbelow the cursor or the specified line.  A temporary\n+\t\t\tfile is used to store the output of the command which\n+\t\t\tis then\tread into the buffer.  'shellredir' is used to\n+\t\t\tsave the output of the command, which can be set to\n+\t\t\tinclude stderr or not.  {cmd} is executed like with\n+\t\t\t\":!{cmd}\", any '!' is replaced with the previous\n+\t\t\tcommand |:!|. See |++opt| for the possible values of\n+\t\t\t[++opt].\n+\n+\t\t\t\t\t\t\t*:r:* *:read:*\n+:[range]r[ead] :{cmd}\n+\t\t\tExecute vim {cmd} and insert its output below the\n+\t\t\tspecified line",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1817541607",
            "id": 1817541607,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sVXvn",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 2016,
            "original_position": 25,
            "original_start_line": 2015,
            "path": "runtime/doc/insert.txt",
            "position": null,
            "pull_request_review_id": 2397016726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817541607/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-26T01:44:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1817541607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1818810464"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818810464"
                }
            },
            "author_association": "NONE",
            "body": "It would actually be marginally simpler to have the error text written to the buffer. That is what would happen if I didn't wrap the vimscript up in a `try` clause. \r\n\r\nWhen you say we can revisit later on, do you mean before completing the pull request, or some time after this is merged? I imagine this would become a breaking change, so I would want to get it right. ",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-28T10:33:41Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)\n+  end)\n+  it('inserts text from file at specific position', function()\n+    test_read('0read ' .. tmp_file, inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from cmd at specific position', function()\n+    test_read('0read !cat ' .. tmp_file, inserted_start)\n+    eq({ 0, 2, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from cmd at specific position', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('0read :echo lines', inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('sets fileformat, fileencoding, bomb correctly', function()\n+    execute('set fileformat=dos')\n+    execute('set fileencoding=latin1')\n+    execute('set bomb')\n+    execute('read ++edit ' .. tmp_file)\n+    eq('fileformat=unix', vim.trim(execute('set fileformat?')))\n+    eq('fileencoding=utf-8', vim.trim(execute('set fileencoding?')))\n+    eq('nobomb', vim.trim(execute('set bomb?')))\n+  end)\n+  it('file reads can be undone', function()\n+    test_undo('read ' .. tmp_file)\n+  end)\n+  it('shell reads can be undone', function()\n+    test_undo('read !cat ' .. tmp_file)\n+  end)\n+  it('command reads can be undone', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_undo('read :echo lines')\n+  end)\n+  it('errors out correctly when a non-existant file is used', function()\n+    eq(\"Vim(read):E484: Can't open file asdfasdf\", pcall_err(execute, ':read asdfasdf'))\n+  end)\n+  it('errors out correctly when an invalid command is used', function()\n+    eq('Vim:E492: Not an editor command: asdfasdf', pcall_err(execute, ':read :asdfasdf'))",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1818810464",
            "id": 1818810464,
            "in_reply_to_id": 1817001746,
            "line": 92,
            "node_id": "PRRC_kwDOAPphoM5saNhg",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 92,
            "original_position": 91,
            "original_start_line": null,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 92,
            "pull_request_review_id": 2398673728,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818810464/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T10:33:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818810464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1818940328"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818940328"
                }
            },
            "author_association": "MEMBER",
            "body": "I mean after this is merged. That's a good instinct and a good general practice, but sometimes features like this need to see real-world usage before we fully decide the interface. Especially when \"the stakes are low\", as with this particular behavior decision (error capture vs no error capture).\r\n\r\nErrors are not the common case so I think it's better to just optimize for code simplicity here. Thuse removing the try/catch sounds good.",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-28T12:02:49Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)\n+  end)\n+  it('inserts text from file at specific position', function()\n+    test_read('0read ' .. tmp_file, inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from cmd at specific position', function()\n+    test_read('0read !cat ' .. tmp_file, inserted_start)\n+    eq({ 0, 2, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from cmd at specific position', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('0read :echo lines', inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('sets fileformat, fileencoding, bomb correctly', function()\n+    execute('set fileformat=dos')\n+    execute('set fileencoding=latin1')\n+    execute('set bomb')\n+    execute('read ++edit ' .. tmp_file)\n+    eq('fileformat=unix', vim.trim(execute('set fileformat?')))\n+    eq('fileencoding=utf-8', vim.trim(execute('set fileencoding?')))\n+    eq('nobomb', vim.trim(execute('set bomb?')))\n+  end)\n+  it('file reads can be undone', function()\n+    test_undo('read ' .. tmp_file)\n+  end)\n+  it('shell reads can be undone', function()\n+    test_undo('read !cat ' .. tmp_file)\n+  end)\n+  it('command reads can be undone', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_undo('read :echo lines')\n+  end)\n+  it('errors out correctly when a non-existant file is used', function()\n+    eq(\"Vim(read):E484: Can't open file asdfasdf\", pcall_err(execute, ':read asdfasdf'))\n+  end)\n+  it('errors out correctly when an invalid command is used', function()\n+    eq('Vim:E492: Not an editor command: asdfasdf', pcall_err(execute, ':read :asdfasdf'))",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1818940328",
            "id": 1818940328,
            "in_reply_to_id": 1817001746,
            "line": 92,
            "node_id": "PRRC_kwDOAPphoM5satOo",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 92,
            "original_position": 91,
            "original_start_line": null,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 92,
            "pull_request_review_id": 2398876816,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818940328/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T12:02:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818940328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1818955423"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818955423"
                }
            },
            "author_association": "NONE",
            "body": "OK, I am now using an api call to put {cmd} directly into a global variable. I haven't updated the unit tests yet though as I think I am going to have to take some time to understand how things are being parsed before being to `ex_read`. For example, the big issue with double quotes (as I understand it right now) is that these cause the text to be marked as a comment and chopped off before `eap` is passed to `ex_read`.",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-28T12:14:37Z",
            "diff_hunk": "@@ -5640,6 +5641,20 @@ static void ex_syncbind(exarg_T *eap)\n   }\n }\n \n+void do_read_cmd(exarg_T *eap)\n+{\n+  char *cmd = eap->arg + 1;\n+  StringBuilder put_cmd = KV_INITIAL_VALUE;\n+  kv_printf(put_cmd, \"try | \");\n+  kv_printf(put_cmd, \"%dput=execute('%s') | \", eap->line2, cmd);",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1818955423",
            "id": 1818955423,
            "in_reply_to_id": 1817055800,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5saw6f",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 5649,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 2398904514,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818955423/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T12:14:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818955423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1818960192"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818960192"
                }
            },
            "author_association": "MEMBER",
            "body": "also need a test that checks behavior with `|`\r\n```suggestion\r\n    test_read('read :foo | bar | baz', inserted_middle)\r\n```",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-28T12:18:03Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1818960192",
            "id": 1818960192,
            "line": 51,
            "node_id": "PRRC_kwDOAPphoM5sayFA",
            "original_commit_id": "fe2244a86be41f61d50686abb500d704f7c612ee",
            "original_line": 51,
            "original_position": 51,
            "original_start_line": null,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 51,
            "pull_request_review_id": 2398912189,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818960192/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T12:18:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818960192",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1818960219"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818960219"
                }
            },
            "author_association": "NONE",
            "body": "Cool. I know it is pretty low stakes, and the best course of action is to see how it goes, but I didn't want to make an assumption. ",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-28T12:18:04Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)\n+  end)\n+  it('inserts text from file at specific position', function()\n+    test_read('0read ' .. tmp_file, inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from cmd at specific position', function()\n+    test_read('0read !cat ' .. tmp_file, inserted_start)\n+    eq({ 0, 2, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from cmd at specific position', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('0read :echo lines', inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('sets fileformat, fileencoding, bomb correctly', function()\n+    execute('set fileformat=dos')\n+    execute('set fileencoding=latin1')\n+    execute('set bomb')\n+    execute('read ++edit ' .. tmp_file)\n+    eq('fileformat=unix', vim.trim(execute('set fileformat?')))\n+    eq('fileencoding=utf-8', vim.trim(execute('set fileencoding?')))\n+    eq('nobomb', vim.trim(execute('set bomb?')))\n+  end)\n+  it('file reads can be undone', function()\n+    test_undo('read ' .. tmp_file)\n+  end)\n+  it('shell reads can be undone', function()\n+    test_undo('read !cat ' .. tmp_file)\n+  end)\n+  it('command reads can be undone', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_undo('read :echo lines')\n+  end)\n+  it('errors out correctly when a non-existant file is used', function()\n+    eq(\"Vim(read):E484: Can't open file asdfasdf\", pcall_err(execute, ':read asdfasdf'))\n+  end)\n+  it('errors out correctly when an invalid command is used', function()\n+    eq('Vim:E492: Not an editor command: asdfasdf', pcall_err(execute, ':read :asdfasdf'))",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1818960219",
            "id": 1818960219,
            "in_reply_to_id": 1817001746,
            "line": 92,
            "node_id": "PRRC_kwDOAPphoM5sayFb",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 92,
            "original_position": 91,
            "original_start_line": null,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 92,
            "pull_request_review_id": 2398912225,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818960219/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T12:18:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818960219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1818963700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818963700"
                }
            },
            "author_association": "MEMBER",
            "body": "yeah it's possible that double quotes can't easily be supported because the cmdline is parsed before control reaches the code you have added here. can forget about that for now.",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-28T12:20:40Z",
            "diff_hunk": "@@ -5640,6 +5641,20 @@ static void ex_syncbind(exarg_T *eap)\n   }\n }\n \n+void do_read_cmd(exarg_T *eap)\n+{\n+  char *cmd = eap->arg + 1;\n+  StringBuilder put_cmd = KV_INITIAL_VALUE;\n+  kv_printf(put_cmd, \"try | \");\n+  kv_printf(put_cmd, \"%dput=execute('%s') | \", eap->line2, cmd);",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1818963700",
            "id": 1818963700,
            "in_reply_to_id": 1817055800,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5say70",
            "original_commit_id": "adcdfd12f1d8a0ef540ec3b6c39cbb0f3b58a4ae",
            "original_line": 5649,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 2398917859,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818963700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T12:20:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818963700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1818965354"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818965354"
                }
            },
            "author_association": "MEMBER",
            "body": "unlet the `g:` var after",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-28T12:21:54Z",
            "diff_hunk": "@@ -5643,16 +5644,29 @@ static void ex_syncbind(exarg_T *eap)\n \n void do_read_cmd(exarg_T *eap)\n {\n-  char *cmd = eap->arg + 1;\n+  Object cmd = CSTR_AS_OBJ(eap->arg + 1);\n+  String cmd_var_name = cstr_as_string(\"_ex_cmd\");\n   StringBuilder put_cmd = KV_INITIAL_VALUE;\n+  Error error = ERROR_INIT;\n+  nvim_set_var(cmd_var_name, cmd, &error);\n+  if (error.type != kErrorTypeNone) {\n+    emsg(error.msg);\n+    return;\n+  }\n+\n   kv_printf(put_cmd, \"try | \");\n-  kv_printf(put_cmd, \"%dput=execute('%s') | \", eap->line2, cmd);\n-  kv_printf(put_cmd, \"execute 'norm! `.' | \");\n+  kv_printf(put_cmd, \"%dput=execute(g:%s) | \", eap->line2, cmd_var_name.data);\n+  kv_printf(put_cmd, \"execute 'norm! )`.' | \");\n   kv_printf(put_cmd, \"execute 'd _' | \");\n   kv_printf(put_cmd, \"endtry\");",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1818965354",
            "id": 1818965354,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sazVq",
            "original_commit_id": "fe2244a86be41f61d50686abb500d704f7c612ee",
            "original_line": 5661,
            "original_position": 29,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 2398920475,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818965354/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T12:21:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818965354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1818966531"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818966531"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n• |:read:| reads the output of an Ex command and into the buffer. Example:>\r\n  :read :ls\r\n```",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-10-28T12:22:49Z",
            "diff_hunk": "@@ -159,6 +159,7 @@ EDITOR\n   \"~/\" are now expanded to the user's profile directory, not a relative path\n   to a literal \"~\" directory.\n • |hl-PmenuMatch| and |hl-PmenuMatchSel| show matched text in completion popup.\n+• |:read:| can now execute an Ex command and insert the output into the buffer.",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1818966531",
            "id": 1818966531,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sazoD",
            "original_commit_id": "fe2244a86be41f61d50686abb500d704f7c612ee",
            "original_line": 162,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2398922376,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818966531/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T12:22:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1818966531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1885055892"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885055892"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n• |:read:| reads the output of an Ex command into the buffer. Example:>\r\n    :read\r\n    :ls\r\n<\r\n```",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-12-14T12:37:08Z",
            "diff_hunk": "@@ -212,6 +212,8 @@ EDITOR\n   \"~/\" are now expanded to the user's profile directory, not a relative path\n   to a literal \"~\" directory.\n • |hl-PmenuMatch| and |hl-PmenuMatchSel| show matched text in completion popup.\n+• |:read:| reads the output of an Ex command into the buffer. Example:> :read\n+  :ls",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1885055892",
            "id": 1885055892,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wW6uU",
            "original_commit_id": "c792dbc0138afd4fb67d19466342f112ca2608bc",
            "original_line": 216,
            "original_position": 5,
            "original_start_line": 215,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2503823014,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885055892/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-14T12:37:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885055892",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1885055930"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885055930"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\t\t\tthe cursor or the specified line.\r\n```",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-12-14T12:37:17Z",
            "diff_hunk": "@@ -2010,14 +2010,20 @@ NOTE: These commands cannot be used with |:global| or |:vglobal|.\n \n \t\t\t\t\t\t\t*:r!* *:read!*\n :[range]r[ead] [++opt] !{cmd}\n-\t\t\tExecute {cmd} and insert its standard output below\n-\t\t\tthe cursor or the specified line.  A temporary file is\n-\t\t\tused to store the output of the command which is then\n-\t\t\tread into the buffer.  'shellredir' is used to save\n-\t\t\tthe output of the command, which can be set to include\n-\t\t\tstderr or not.  {cmd} is executed like with \":!{cmd}\",\n-\t\t\tany '!' is replaced with the previous command |:!|.\n-\t\t\tSee |++opt| for the possible values of [++opt].\n+\t\t\tExecute shell {cmd} and insert its standard output\n+\t\t\tbelow the cursor or the specified line.  A temporary\n+\t\t\tfile is used to store the output of the command which\n+\t\t\tis then\tread into the buffer.  'shellredir' is used to\n+\t\t\tsave the output of the command, which can be set to\n+\t\t\tinclude stderr or not.  {cmd} is executed like with\n+\t\t\t\":!{cmd}\", any '!' is replaced with the previous\n+\t\t\tcommand |:!|. See |++opt| for the possible values of\n+\t\t\t[++opt].\n+\n+\t\t\t\t\t\t\t*:r:* *:read:*\n+:[range]r[ead] :{cmd}\n+\t\t\tExecute Ex command {cmd} and insert its output below\n+\t\t\tthe cursor or the specified line",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1885055930",
            "id": 1885055930,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wW6u6",
            "original_commit_id": "c792dbc0138afd4fb67d19466342f112ca2608bc",
            "original_line": 2026,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/doc/insert.txt",
            "position": null,
            "pull_request_review_id": 2503823081,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885055930/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-14T12:37:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885055930",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1885055964"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885055964"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\t\t\tcommand |:!|.\r\n\t\t\tSee |++opt| for the possible values of [++opt].\r\n```",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-12-14T12:37:41Z",
            "diff_hunk": "@@ -2010,14 +2010,20 @@ NOTE: These commands cannot be used with |:global| or |:vglobal|.\n \n \t\t\t\t\t\t\t*:r!* *:read!*\n :[range]r[ead] [++opt] !{cmd}\n-\t\t\tExecute {cmd} and insert its standard output below\n-\t\t\tthe cursor or the specified line.  A temporary file is\n-\t\t\tused to store the output of the command which is then\n-\t\t\tread into the buffer.  'shellredir' is used to save\n-\t\t\tthe output of the command, which can be set to include\n-\t\t\tstderr or not.  {cmd} is executed like with \":!{cmd}\",\n-\t\t\tany '!' is replaced with the previous command |:!|.\n-\t\t\tSee |++opt| for the possible values of [++opt].\n+\t\t\tExecute shell {cmd} and insert its standard output\n+\t\t\tbelow the cursor or the specified line.  A temporary\n+\t\t\tfile is used to store the output of the command which\n+\t\t\tis then\tread into the buffer.  'shellredir' is used to\n+\t\t\tsave the output of the command, which can be set to\n+\t\t\tinclude stderr or not.  {cmd} is executed like with\n+\t\t\t\":!{cmd}\", any '!' is replaced with the previous\n+\t\t\tcommand |:!|. See |++opt| for the possible values of\n+\t\t\t[++opt].",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1885055964",
            "id": 1885055964,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wW6vc",
            "original_commit_id": "c792dbc0138afd4fb67d19466342f112ca2608bc",
            "original_line": 2021,
            "original_position": 20,
            "original_start_line": 2020,
            "path": "runtime/doc/insert.txt",
            "position": null,
            "pull_request_review_id": 2503823287,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885055964/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-14T12:37:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885055964",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1885056185"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885056185"
                }
            },
            "author_association": "MEMBER",
            "body": "still need this",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-12-14T12:39:12Z",
            "diff_hunk": "@@ -0,0 +1,93 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1885056185",
            "id": 1885056185,
            "in_reply_to_id": 1818960192,
            "line": 51,
            "node_id": "PRRC_kwDOAPphoM5wW6y5",
            "original_commit_id": "fe2244a86be41f61d50686abb500d704f7c612ee",
            "original_line": 51,
            "original_position": 51,
            "original_start_line": null,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 51,
            "pull_request_review_id": 2503823943,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885056185/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-14T12:39:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885056185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r1885056291"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885056291"
                }
            },
            "author_association": "MEMBER",
            "body": "still need this",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2024-12-14T12:39:31Z",
            "diff_hunk": "@@ -5643,16 +5644,29 @@ static void ex_syncbind(exarg_T *eap)\n \n void do_read_cmd(exarg_T *eap)\n {\n-  char *cmd = eap->arg + 1;\n+  Object cmd = CSTR_AS_OBJ(eap->arg + 1);\n+  String cmd_var_name = cstr_as_string(\"_ex_cmd\");\n   StringBuilder put_cmd = KV_INITIAL_VALUE;\n+  Error error = ERROR_INIT;\n+  nvim_set_var(cmd_var_name, cmd, &error);\n+  if (error.type != kErrorTypeNone) {\n+    emsg(error.msg);\n+    return;\n+  }\n+\n   kv_printf(put_cmd, \"try | \");\n-  kv_printf(put_cmd, \"%dput=execute('%s') | \", eap->line2, cmd);\n-  kv_printf(put_cmd, \"execute 'norm! `.' | \");\n+  kv_printf(put_cmd, \"%dput=execute(g:%s) | \", eap->line2, cmd_var_name.data);\n+  kv_printf(put_cmd, \"execute 'norm! )`.' | \");\n   kv_printf(put_cmd, \"execute 'd _' | \");\n   kv_printf(put_cmd, \"endtry\");",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r1885056291",
            "id": 1885056291,
            "in_reply_to_id": 1818965354,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wW60j",
            "original_commit_id": "fe2244a86be41f61d50686abb500d704f7c612ee",
            "original_line": 5661,
            "original_position": 29,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 2503824094,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885056291/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-14T12:39:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1885056291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r2268145275"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268145275"
                }
            },
            "author_association": "MEMBER",
            "body": "This should be `static`, it's not used outside of this module. And it needs a docstring.\n\n```suggestion\n/// Implements \":read :foo ...\", i.e. reads the output of a \":foo ...\" cmd.\nstatic void do_read_cmd(exarg_T *eap)\n```",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2025-08-11T22:25:23Z",
            "diff_hunk": "@@ -5820,6 +5822,31 @@ static void ex_syncbind(exarg_T *eap)\n   }\n }\n \n+void do_read_cmd(exarg_T *eap)",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r2268145275",
            "id": 2268145275,
            "line": 5825,
            "node_id": "PRRC_kwDOAPphoM6HMSZ7",
            "original_commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "original_line": 5825,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": 15,
            "pull_request_review_id": 3107951453,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268145275/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-11T22:25:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268145275",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r2268148315"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268148315"
                }
            },
            "author_association": "MEMBER",
            "body": "these are thoroughly tested elsewhere. don't need them here.",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2025-08-11T22:27:19Z",
            "diff_hunk": "@@ -0,0 +1,94 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r2268148315",
            "id": 2268148315,
            "line": 45,
            "node_id": "PRRC_kwDOAPphoM6HMTJb",
            "original_commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "original_line": 45,
            "original_position": 45,
            "original_start_line": 40,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 45,
            "pull_request_review_id": 3107956613,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268148315/reactions"
            },
            "side": "RIGHT",
            "start_line": 40,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-11T22:27:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268148315",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r2268148503"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268148503"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\ndescribe(':read :cmd', function()\n```",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2025-08-11T22:27:27Z",
            "diff_hunk": "@@ -0,0 +1,94 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r2268148503",
            "id": 2268148503,
            "line": 30,
            "node_id": "PRRC_kwDOAPphoM6HMTMX",
            "original_commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "original_line": 30,
            "original_position": 30,
            "original_start_line": null,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 30,
            "pull_request_review_id": 3107956826,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268148503/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-11T22:27:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268148503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r2268149318"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268149318"
                }
            },
            "author_association": "MEMBER",
            "body": "just put these in a single `it('failure modes'` block.",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2025-08-11T22:28:06Z",
            "diff_hunk": "@@ -0,0 +1,94 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from Ex command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)\n+  end)\n+  it('inserts text from file at specific position', function()\n+    test_read('0read ' .. tmp_file, inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell cmd at specific position', function()\n+    test_read('0read !cat ' .. tmp_file, inserted_start)\n+    eq({ 0, 2, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('executes next command when using |', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    execute(\"let guard = 'fail'\")\n+    test_read(\"read :echo lines | let guard='pass'\", inserted_middle)\n+    eq('pass', vim.trim(execute('echo guard')))\n+  end)\n+  it('sets fileformat, fileencoding, bomb correctly', function()\n+    execute('set fileformat=dos')\n+    execute('set fileencoding=latin1')\n+    execute('set bomb')\n+    execute('read ++edit ' .. tmp_file)\n+    eq('fileformat=unix', vim.trim(execute('set fileformat?')))\n+    eq('fileencoding=utf-8', vim.trim(execute('set fileencoding?')))\n+    eq('nobomb', vim.trim(execute('set bomb?')))\n+  end)\n+  it('file reads can be undone', function()\n+    test_undo('read ' .. tmp_file)\n+  end)\n+  it('shell reads can be undone', function()\n+    test_undo('read !cat ' .. tmp_file)\n+  end)\n+  it('command reads can be undone', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_undo('read :echo lines')\n+  end)\n+  it('errors out correctly when a non-existant file is used', function()\n+    eq(\"Vim(read):E484: Can't open file asdfasdf\", pcall_err(execute, ':read asdfasdf'))\n+  end)\n+  it('errors out correctly when an invalid command is used', function()",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r2268149318",
            "id": 2268149318,
            "line": 91,
            "node_id": "PRRC_kwDOAPphoM6HMTZG",
            "original_commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "original_line": 91,
            "original_position": 91,
            "original_start_line": 88,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 91,
            "pull_request_review_id": 3107957715,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268149318/reactions"
            },
            "side": "RIGHT",
            "start_line": 88,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-11T22:28:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268149318",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r2268150107"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268150107"
                }
            },
            "author_association": "MEMBER",
            "body": "drop these. we already have tests for this elsewhere.\n\nthis PR should only add tests for `:read :cmd`",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2025-08-11T22:28:43Z",
            "diff_hunk": "@@ -0,0 +1,94 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from Ex command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)\n+  end)\n+  it('inserts text from file at specific position', function()\n+    test_read('0read ' .. tmp_file, inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell cmd at specific position', function()\n+    test_read('0read !cat ' .. tmp_file, inserted_start)\n+    eq({ 0, 2, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('executes next command when using |', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    execute(\"let guard = 'fail'\")\n+    test_read(\"read :echo lines | let guard='pass'\", inserted_middle)\n+    eq('pass', vim.trim(execute('echo guard')))\n+  end)\n+  it('sets fileformat, fileencoding, bomb correctly', function()\n+    execute('set fileformat=dos')\n+    execute('set fileencoding=latin1')\n+    execute('set bomb')\n+    execute('read ++edit ' .. tmp_file)\n+    eq('fileformat=unix', vim.trim(execute('set fileformat?')))\n+    eq('fileencoding=utf-8', vim.trim(execute('set fileencoding?')))\n+    eq('nobomb', vim.trim(execute('set bomb?')))\n+  end)\n+  it('file reads can be undone', function()\n+    test_undo('read ' .. tmp_file)\n+  end)\n+  it('shell reads can be undone', function()\n+    test_undo('read !cat ' .. tmp_file)",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r2268150107",
            "id": 2268150107,
            "line": 81,
            "node_id": "PRRC_kwDOAPphoM6HMTlb",
            "original_commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "original_line": 81,
            "original_position": 81,
            "original_start_line": 77,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 81,
            "pull_request_review_id": 3107958616,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268150107/reactions"
            },
            "side": "RIGHT",
            "start_line": 77,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-11T22:29:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268150107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30628#discussion_r2268150897"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30628"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268150897"
                }
            },
            "author_association": "MEMBER",
            "body": "drop",
            "commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "created_at": "2025-08-11T22:29:24Z",
            "diff_hunk": "@@ -0,0 +1,94 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local eq, write_file, clear, pcall_err = t.eq, t.write_file, n.clear, t.pcall_err\n+local fn = n.fn\n+local setline, getline, setcharpos, execute = fn.setline, fn.getline, fn.setcharpos, fn.execute\n+\n+local tmp_file = 'text.txt'\n+local original_text = { 'First', 'Last' }\n+local read_text = { ' This is a line starts with a space', '  This one starts with two spaces.' }\n+local inserted_middle = { original_text[1], read_text[1], read_text[2], original_text[2] }\n+local inserted_start = { read_text[1], read_text[2], original_text[1], original_text[2] }\n+\n+local function test_read(cmd, expected)\n+  setline(1, original_text)\n+  setcharpos('.', { 0, 0, 0 })\n+  execute(cmd)\n+  for i, e in ipairs(expected) do\n+    eq(e, getline(i))\n+  end\n+end\n+\n+local function test_undo(cmd)\n+  setline(1, original_text)\n+  execute(cmd)\n+  execute('undo')\n+  eq(original_text, { getline(1), getline(2) })\n+end\n+\n+describe(':read', function()\n+  local function cleanup()\n+    os.remove(tmp_file)\n+  end\n+  before_each(function()\n+    clear()\n+    cleanup()\n+    write_file(tmp_file, table.concat(read_text, '\\n'), true)\n+  end)\n+  after_each(cleanup)\n+  it('inserts text from file', function()\n+    test_read('read ' .. tmp_file, inserted_middle)\n+    eq({ 0, 2, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell', function()\n+    test_read('read !cat ' .. tmp_file, inserted_middle)\n+    eq({ 0, 3, 3, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from Ex command', function()\n+    local make_lines = string.format('let lines=\"%s\"', table.concat(read_text, '\\\\n'))\n+    execute(make_lines)\n+    test_read('read :echo lines', inserted_middle)\n+  end)\n+  it('inserts text from file at specific position', function()\n+    test_read('0read ' .. tmp_file, inserted_start)\n+    eq({ 0, 1, 2, 0 }, fn.getpos('.'))\n+  end)\n+  it('inserts text from shell cmd at specific position', function()",
            "html_url": "https://github.com/neovim/neovim/pull/30628#discussion_r2268150897",
            "id": 2268150897,
            "line": 57,
            "node_id": "PRRC_kwDOAPphoM6HMTxx",
            "original_commit_id": "5b410d1e491d628a01d94819e5948c5af62198e3",
            "original_line": 57,
            "original_position": 57,
            "original_start_line": 53,
            "path": "test/functional/ex_cmds/read_spec.lua",
            "position": 57,
            "pull_request_review_id": 3107959545,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268150897/reactions"
            },
            "side": "RIGHT",
            "start_line": 53,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-11T22:29:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2268150897",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "definitely wouldn't use a temp file. likely the best way to implement this is to re-use the internals of `:help execute()` : https://github.com/neovim/neovim/blob/e049c6e4c08a141c94218672e770f86f91c27a11/src/nvim/eval/funcs.c#L1592-L1594\r\n\r\nOr rather than directly using those internals, the C code can invoke vimscript:\r\n\r\n    execute(printf(\"put=execute('%s')\", substitute(escape(<q-args>, '\"')\r\n\r\nNote also that \"mods\" should be supported, i.e. `:split read :foo` should collect the output of `:foo` *before*` splitting the window (otherwise this isn't useful).\r\n\r\nAdding tests is the most valuable part of this work, because it defines the \"specification\", so then we can improve the implementation later. A good place for tests would be `test/functional/ex_cmds/` . There is currently no `read_spec.lua` in there, but perhaps could use `test/functional/ex_cmds/write_spec.lua` as a starting point.\r\n\r\nYou can [run a specific test](https://github.com/neovim/neovim/blob/master/test/README.md#filter-by-file) like this:\r\n\r\n    TEST_FILE=test/functional/example_spec.lua make functionaltest",
            "created_at": "2024-10-17T08:50:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/30628#issuecomment-2418944607",
            "id": 2418944607,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30628",
            "node_id": "IC_kwDOAPphoM6QLipf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2418944607/reactions"
            },
            "updated_at": "2024-10-17T08:54:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2418944607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "OK thanks for the advice. It looks like I won't have time to work on this until some time next week, but I will probably have more questions on Tuesday or Wednesday.",
            "created_at": "2024-10-17T10:51:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/30628#issuecomment-2419198065",
            "id": 2419198065,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30628",
            "node_id": "IC_kwDOAPphoM6QMghx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2419198065/reactions"
            },
            "updated_at": "2024-10-17T10:51:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2419198065",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk I have pushed some tests and implemented the basic solution of having the C code defer to vimscript. \r\n\r\nAs you can see one of the unit tests is failing as vim is not handling quotations the way I expected it to. It looks like the behaviour is slightly different depending on which code path you go down. For example, `:execute('echo \"line1\\nline2\"')` will echo two lines, but  `$put =execute('echo \"line1\\nline2\"')`  results in \r\n\r\n```\r\nE115: Missing quote: 'echo\r\nE116: Invalid arguments for function execute\r\n```\r\n\r\nDoes that seem right to you?\r\n\r\nAlso what is the expected behaviour when interacting with `:split`? Right now if I do `:split +read !ls` it tells me that it cannot find the file `ls`. If split + read doesn't work with shell commands, should I also implement that?",
            "created_at": "2024-10-22T16:53:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/30628#issuecomment-2429788577",
            "id": 2429788577,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30628",
            "node_id": "IC_kwDOAPphoM6Q06Gh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2429788577/reactions"
            },
            "updated_at": "2024-10-22T16:53:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2429788577",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "BTW - the way I am going, my commit history is going to be quite messy. Should I rebase as I go, or do it at the end?",
            "created_at": "2024-10-22T16:54:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/30628#issuecomment-2429791737",
            "id": 2429791737,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30628",
            "node_id": "IC_kwDOAPphoM6Q0635",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2429791737/reactions"
            },
            "updated_at": "2024-10-22T16:54:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2429791737",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @justinmk I have pushed some tests and implemented the basic solution of having the C code defer to vimscript.\r\n> \r\n> As you can see one of the unit tests is failing as vim is not handling quotations the way I expected it to. It looks like the behaviour is slightly different depending on which code path you go down. For example, `:execute('echo \"line1\\nline2\"')` will echo two lines, but `$put =execute('echo \"line1\\nline2\"')` results in\r\n> \r\n> ```\r\n> E115: Missing quote: 'echo\r\n> E116: Invalid arguments for function execute\r\n> ```\r\n> \r\n> Does that seem right to you?\r\n> \r\n> Also what is the expected behaviour when interacting with `:split`? Right now if I do `:split +read !ls` it tells me that it cannot find the file `ls`. If split + read doesn't work with shell commands, should I also implement that?\r\n\r\nYou cannot use `\"` in a `:put` Ex command, as `\"` starts a comment.",
            "created_at": "2024-10-22T23:54:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/30628#issuecomment-2430524916",
            "id": 2430524916,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30628",
            "node_id": "IC_kwDOAPphoM6Q3t30",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2430524916/reactions"
            },
            "updated_at": "2024-10-22T23:54:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2430524916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk Apologies for leaving this hanging so long. I had something come up at work. I'm going to rebase this and see how it looks. ",
            "created_at": "2024-12-13T14:31:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/30628#issuecomment-2541587524",
            "id": 2541587524,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30628",
            "node_id": "IC_kwDOAPphoM6XfYxE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2541587524/reactions"
            },
            "updated_at": "2024-12-13T14:31:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2541587524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for updating this, but there are still unresolved comments. \r\n\r\n- Unless I'm mistaken, the `_ex_cmd` var [still needs](https://github.com/neovim/neovim/pull/30628#discussion_r1885056291) to be `:unlet`.\r\n- Only add tests for the new functionality. There are already zillions of tests for the old functionality.\r\n- The implementation probably needs improvement, but since it's pretty isolated, it matters more that we add test coverage here, so we can iterate on the implementation.\r\n\r\nAlso, a potential followup is to support `:hor read :foo`, or some other way to put the output into a new window or buffer. Because otherwise, there's no way to read the state of the current buffer without also inserting-into the current buffer. That can be a followup, but it's rather necessary.",
            "created_at": "2025-08-11T22:31:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/30628#issuecomment-3177085440",
            "id": 3177085440,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30628",
            "node_id": "IC_kwDOAPphoM69XnoA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3177085440/reactions"
            },
            "updated_at": "2025-08-11T22:32:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3177085440",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30628/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/30628/commits",
    "created_at": "2024-10-02T17:21:48Z",
    "diff_url": "https://github.com/neovim/neovim/pull/30628.diff",
    "draft": false,
    "head": {
        "label": "bwalshe:read_cmd_to_buffer",
        "ref": "read_cmd_to_buffer",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/bwalshe/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/bwalshe/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/bwalshe/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/bwalshe/neovim/branches{/branch}",
            "clone_url": "https://github.com/bwalshe/neovim.git",
            "collaborators_url": "https://api.github.com/repos/bwalshe/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/bwalshe/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/bwalshe/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/bwalshe/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/bwalshe/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/bwalshe/neovim/contributors",
            "created_at": "2024-10-02T11:40:41Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/bwalshe/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/bwalshe/neovim/downloads",
            "events_url": "https://api.github.com/repos/bwalshe/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/bwalshe/neovim/forks",
            "full_name": "bwalshe/neovim",
            "git_commits_url": "https://api.github.com/repos/bwalshe/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/bwalshe/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/bwalshe/neovim/git/tags{/sha}",
            "git_url": "git://github.com/bwalshe/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/bwalshe/neovim/hooks",
            "html_url": "https://github.com/bwalshe/neovim",
            "id": 866505821,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/bwalshe/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/bwalshe/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/bwalshe/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/bwalshe/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/bwalshe/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/bwalshe/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/bwalshe/neovim/merges",
            "milestones_url": "https://api.github.com/repos/bwalshe/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOM6XUXQ",
            "notifications_url": "https://api.github.com/repos/bwalshe/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
                "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bwalshe/followers",
                "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bwalshe",
                "id": 8626587,
                "login": "bwalshe",
                "node_id": "MDQ6VXNlcjg2MjY1ODc=",
                "organizations_url": "https://api.github.com/users/bwalshe/orgs",
                "received_events_url": "https://api.github.com/users/bwalshe/received_events",
                "repos_url": "https://api.github.com/users/bwalshe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bwalshe",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/bwalshe/neovim/pulls{/number}",
            "pushed_at": "2024-12-16T10:17:57Z",
            "releases_url": "https://api.github.com/repos/bwalshe/neovim/releases{/id}",
            "size": 290931,
            "ssh_url": "git@github.com:bwalshe/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/bwalshe/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/bwalshe/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/bwalshe/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/bwalshe/neovim/subscription",
            "svn_url": "https://github.com/bwalshe/neovim",
            "tags_url": "https://api.github.com/repos/bwalshe/neovim/tags",
            "teams_url": "https://api.github.com/repos/bwalshe/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/bwalshe/neovim/git/trees{/sha}",
            "updated_at": "2024-12-13T14:36:08Z",
            "url": "https://api.github.com/repos/bwalshe/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "5b410d1e491d628a01d94819e5948c5af62198e3",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
            "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
            "followers_url": "https://api.github.com/users/bwalshe/followers",
            "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
            "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bwalshe",
            "id": 8626587,
            "login": "bwalshe",
            "node_id": "MDQ6VXNlcjg2MjY1ODc=",
            "organizations_url": "https://api.github.com/users/bwalshe/orgs",
            "received_events_url": "https://api.github.com/users/bwalshe/received_events",
            "repos_url": "https://api.github.com/users/bwalshe/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bwalshe",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/30628",
    "id": 2103958130,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30628",
    "labels": [],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM59Z9py",
    "number": 30628,
    "patch_url": "https://github.com/neovim/neovim/pull/30628.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/30628/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/5b410d1e491d628a01d94819e5948c5af62198e3",
    "title": "\":read :cmd\" reads Ex command \":cmd\" output",
    "updated_at": "2025-08-11T22:32:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/30628",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8626587?v=4",
        "events_url": "https://api.github.com/users/bwalshe/events{/privacy}",
        "followers_url": "https://api.github.com/users/bwalshe/followers",
        "following_url": "https://api.github.com/users/bwalshe/following{/other_user}",
        "gists_url": "https://api.github.com/users/bwalshe/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/bwalshe",
        "id": 8626587,
        "login": "bwalshe",
        "node_id": "MDQ6VXNlcjg2MjY1ODc=",
        "organizations_url": "https://api.github.com/users/bwalshe/orgs",
        "received_events_url": "https://api.github.com/users/bwalshe/received_events",
        "repos_url": "https://api.github.com/users/bwalshe/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/bwalshe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bwalshe/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/bwalshe",
        "user_view_type": "public"
    }
}