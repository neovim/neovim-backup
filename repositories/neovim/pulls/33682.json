{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33682/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33682/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/33682"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33682"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33682/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/fe70b3fcc5100f18046a745827e4227d3510befe"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6050,
            "forks_count": 6050,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1919,
            "open_issues_count": 1919,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-04-29T02:05:46Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 319440,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 89035,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-04-29T02:12:25Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 89035,
            "watchers_count": 89035,
            "web_commit_signoff_required": false
        },
        "sha": "52a4bc45488cb1f626b02be5512cd0301cd48cb8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "- sort fields alphabetically.\r\n- in the `vim.lsp.Client` docs, reference `vim.lsp.ClientConfig` instead of duplicating its docs.\r\n- cleanup lots of redundant-yet-drifted field docs.\r\n\r\n<!--\r\n  Thank you for contributing to Neovim!\r\n  If this is your first time, check out https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#pull-requests-prs\r\n  for our PR guidelines.\r\n-->\r\n",
    "closed_at": "2025-04-27T22:44:11Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33682#discussion_r2062737077"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2062737077"
                }
            },
            "author_association": "MEMBER",
            "body": "vim.lsp.Client has this `config` field, so I don't get why it also duplicates many of the `config` fields in itself. E.g. `flags`, `offset_encoding`, etc., are fields on `config`, yet they are also fields directly on `vim.lsp.Client`.",
            "commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "created_at": "2025-04-27T22:30:23Z",
            "diff_hunk": "@@ -43,125 +56,129 @@ local validate = vim.validate\n --- (default: cwd)\n --- @field cmd_cwd? string\n ---\n---- Environment flags to pass to the LSP on spawn.\n---- Must be specified using a table.\n---- Non-string values are coerced to string.\n+--- Environment variables passed to the LSP process on spawn. Non-string values are coerced to\n+--- string.\n --- Example:\n --- ```lua\n---- { PORT = 8080; HOST = \"0.0.0.0\"; }\n+--- { PORT = 8080; HOST = '0.0.0.0'; }\n --- ```\n --- @field cmd_env? table\n ---\n+--- Client commands. Map of command names to user-defined functions. Commands passed to `start()`\n+--- take precedence over the global command registry. Each key must be a unique command name, and\n+--- the value is a function which is called if any LSP action (code action, code lenses, …) triggers\n+--- the command.\n+--- @field commands? table<string,fun(command: lsp.Command, ctx: table)>\n+---\n --- Daemonize the server process so that it runs in a separate process group from Nvim.\n --- Nvim will shutdown the process on exit, but if Nvim fails to exit cleanly this could leave\n --- behind orphaned server processes.\n --- (default: true)\n --- @field detached? boolean\n ---\n---- List of workspace folders passed to the language server.\n---- For backwards compatibility rootUri and rootPath will be derived from the first workspace\n---- folder in this list. See `workspaceFolders` in the LSP spec.\n---- @field workspace_folders? lsp.WorkspaceFolder[]\n----\n---- (default false) Server requires a workspace (no \"single file\" support). Note: Without\n---- a workspace, cross-file features (navigation, hover) may or may not work depending on the\n---- language server, even if the server doesn't require a workspace.\n---- @field workspace_required? boolean\n+--- A table with flags for the client. The current (experimental) flags are:\n+--- @field flags? vim.lsp.Client.Flags\n ---\n---- Map overriding the default capabilities defined by |vim.lsp.protocol.make_client_capabilities()|,\n---- passed to the language server on initialization. Hint: use make_client_capabilities() and modify\n---- its result.\n---- - Note: To send an empty dictionary use |vim.empty_dict()|, else it will be encoded as an\n----   array.\n---- @field capabilities? lsp.ClientCapabilities\n+--- Language ID as string. Defaults to the buffer filetype.\n+--- @field get_language_id? fun(bufnr: integer, filetype: string): string\n ---\n---- Map of language server method names to |lsp-handler|\n+--- Map of LSP method names to |lsp-handler|s.\n --- @field handlers? table<string,function>\n ---\n---- Map with language server specific settings.\n---- See the {settings} in |vim.lsp.Client|.\n---- @field settings? lsp.LSPObject\n----\n---- Table that maps string of clientside commands to user-defined functions.\n---- Commands passed to `start()` take precedence over the global command registry. Each key\n---- must be a unique command name, and the value is a function which is called if any LSP action\n---- (code action, code lenses, ...) triggers the command.\n---- @field commands? table<string,fun(command: lsp.Command, ctx: table)>\n----\n --- Values to pass in the initialization request as `initializationOptions`. See `initialize` in\n --- the LSP spec.\n --- @field init_options? lsp.LSPObject\n ---\n---- Name in log messages.\n---- (default: client-id)\n+--- (default: client-id) Name in logs and user messages.\n --- @field name? string\n ---\n---- Language ID as string. Defaults to the buffer filetype.\n---- @field get_language_id? fun(bufnr: integer, filetype: string): string\n----\n---- Called \"position encoding\" in LSP spec, the encoding that the LSP server expects.\n---- Client does not verify this is correct.\n+--- Called \"position encoding\" in LSP spec. The encoding that the LSP server expects, used for\n+--- communication. Not validated. Can be modified in `on_init` before text is sent to the server.\n --- @field offset_encoding? 'utf-8'|'utf-16'|'utf-32'\n ---\n+--- Callback invoked when client attaches to a buffer.\n+--- @field on_attach? elem_or_list<fun(client: vim.lsp.Client, bufnr: integer)>\n+---\n --- Callback invoked when the client operation throws an error. `code` is a number describing the error.\n --- Other arguments may be passed depending on the error kind.  See `vim.lsp.rpc.client_errors`\n --- for possible errors. Use `vim.lsp.rpc.client_errors[code]` to get human-friendly name.\n --- @field on_error? fun(code: integer, err: string)\n ---\n---- Callback invoked before the LSP \"initialize\" phase, where `params` contains the parameters\n---- being sent to the server and `config` is the config that was passed to |vim.lsp.start()|.\n---- You can use this to modify parameters before they are sent.\n---- @field before_init? fun(params: lsp.InitializeParams, config: vim.lsp.ClientConfig)\n+--- Callback invoked on client exit.\n+---   - code: exit code of the process\n+---   - signal: number describing the signal used to terminate (if any)\n+---   - client_id: client handle\n+--- @field on_exit? elem_or_list<fun(code: integer, signal: integer, client_id: integer)>\n ---\n --- Callback invoked after LSP \"initialize\", where `result` is a table of `capabilities` and\n --- anything else the server may send. For example, clangd sends `init_result.offsetEncoding` if\n --- `capabilities.offsetEncoding` was sent to it. You can only modify the `client.offset_encoding`\n --- here before any notifications are sent.\n --- @field on_init? elem_or_list<fun(client: vim.lsp.Client, init_result: lsp.InitializeResult)>\n ---\n---- Callback invoked on client exit.\n----   - code: exit code of the process\n----   - signal: number describing the signal used to terminate (if any)\n----   - client_id: client handle\n---- @field on_exit? elem_or_list<fun(code: integer, signal: integer, client_id: integer)>\n+--- Directory where the LSP server will base its workspaceFolders, rootUri, and rootPath on initialization.\n+--- @field root_dir? string\n ---\n---- Callback invoked when client attaches to a buffer.\n---- @field on_attach? elem_or_list<fun(client: vim.lsp.Client, bufnr: integer)>\n+--- Map of language server-specific settings, decided by the client. Sent to the LS if requested via\n+--- `workspace/configuration`. Keys are case-sensitive.\n+--- @field settings? lsp.LSPObject\n ---\n --- Passed directly to the language server in the initialize request. Invalid/empty values will\n --- (default: \"off\")\n --- @field trace? 'off'|'messages'|'verbose'\n ---\n---- A table with flags for the client. The current (experimental) flags are:\n---- @field flags? vim.lsp.Client.Flags\n+--- List of workspace folders passed to the language server. For backwards compatibility rootUri and\n+--- rootPath are derived from the first workspace folder in this list. Can be `null` if the client\n+--- supports workspace folders but none are configured. See `workspaceFolders` in LSP spec.\n+--- @field workspace_folders? lsp.WorkspaceFolder[]\n ---\n---- Directory where the LSP server will base its workspaceFolders, rootUri, and rootPath on initialization.\n---- @field root_dir? string\n+--- (default false) Server requires a workspace (no \"single file\" support). Note: Without\n+--- a workspace, cross-file features (navigation, hover) may or may not work depending on the\n+--- language server, even if the server doesn't require a workspace.\n+--- @field workspace_required? boolean\n \n --- @class vim.lsp.Client.Progress: vim.Ringbuf<{token: integer|string, value: any}>\n --- @field pending table<lsp.ProgressToken,lsp.LSPAny>\n \n --- @class vim.lsp.Client\n ---\n+--- @field attached_buffers table<integer,true>\n+---\n+--- Capabilities provided by the client (editor or tool), at startup.\n+--- @field capabilities lsp.ClientCapabilities\n+---\n+--- Client commands. See [vim.lsp.ClientConfig].\n+--- @field commands table<string,fun(command: lsp.Command, ctx: table)>\n+---\n+--- Copy of the config passed to |vim.lsp.start()|.\n+--- @field config vim.lsp.ClientConfig",
            "html_url": "https://github.com/neovim/neovim/pull/33682#discussion_r2062737077",
            "id": 2062737077,
            "line": 154,
            "node_id": "PRRC_kwDOAPphoM568t61",
            "original_commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "original_line": 154,
            "original_position": 171,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": 171,
            "pull_request_review_id": 2797756018,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2062737077/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-27T22:31:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2062737077",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33682#discussion_r2063642834"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063642834"
                }
            },
            "author_association": "MEMBER",
            "body": "Most of these fields are optional in the config, but required in the client.",
            "commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "created_at": "2025-04-28T13:18:20Z",
            "diff_hunk": "@@ -43,125 +56,129 @@ local validate = vim.validate\n --- (default: cwd)\n --- @field cmd_cwd? string\n ---\n---- Environment flags to pass to the LSP on spawn.\n---- Must be specified using a table.\n---- Non-string values are coerced to string.\n+--- Environment variables passed to the LSP process on spawn. Non-string values are coerced to\n+--- string.\n --- Example:\n --- ```lua\n---- { PORT = 8080; HOST = \"0.0.0.0\"; }\n+--- { PORT = 8080; HOST = '0.0.0.0'; }\n --- ```\n --- @field cmd_env? table\n ---\n+--- Client commands. Map of command names to user-defined functions. Commands passed to `start()`\n+--- take precedence over the global command registry. Each key must be a unique command name, and\n+--- the value is a function which is called if any LSP action (code action, code lenses, …) triggers\n+--- the command.\n+--- @field commands? table<string,fun(command: lsp.Command, ctx: table)>\n+---\n --- Daemonize the server process so that it runs in a separate process group from Nvim.\n --- Nvim will shutdown the process on exit, but if Nvim fails to exit cleanly this could leave\n --- behind orphaned server processes.\n --- (default: true)\n --- @field detached? boolean\n ---\n---- List of workspace folders passed to the language server.\n---- For backwards compatibility rootUri and rootPath will be derived from the first workspace\n---- folder in this list. See `workspaceFolders` in the LSP spec.\n---- @field workspace_folders? lsp.WorkspaceFolder[]\n----\n---- (default false) Server requires a workspace (no \"single file\" support). Note: Without\n---- a workspace, cross-file features (navigation, hover) may or may not work depending on the\n---- language server, even if the server doesn't require a workspace.\n---- @field workspace_required? boolean\n+--- A table with flags for the client. The current (experimental) flags are:\n+--- @field flags? vim.lsp.Client.Flags\n ---\n---- Map overriding the default capabilities defined by |vim.lsp.protocol.make_client_capabilities()|,\n---- passed to the language server on initialization. Hint: use make_client_capabilities() and modify\n---- its result.\n---- - Note: To send an empty dictionary use |vim.empty_dict()|, else it will be encoded as an\n----   array.\n---- @field capabilities? lsp.ClientCapabilities\n+--- Language ID as string. Defaults to the buffer filetype.\n+--- @field get_language_id? fun(bufnr: integer, filetype: string): string\n ---\n---- Map of language server method names to |lsp-handler|\n+--- Map of LSP method names to |lsp-handler|s.\n --- @field handlers? table<string,function>\n ---\n---- Map with language server specific settings.\n---- See the {settings} in |vim.lsp.Client|.\n---- @field settings? lsp.LSPObject\n----\n---- Table that maps string of clientside commands to user-defined functions.\n---- Commands passed to `start()` take precedence over the global command registry. Each key\n---- must be a unique command name, and the value is a function which is called if any LSP action\n---- (code action, code lenses, ...) triggers the command.\n---- @field commands? table<string,fun(command: lsp.Command, ctx: table)>\n----\n --- Values to pass in the initialization request as `initializationOptions`. See `initialize` in\n --- the LSP spec.\n --- @field init_options? lsp.LSPObject\n ---\n---- Name in log messages.\n---- (default: client-id)\n+--- (default: client-id) Name in logs and user messages.\n --- @field name? string\n ---\n---- Language ID as string. Defaults to the buffer filetype.\n---- @field get_language_id? fun(bufnr: integer, filetype: string): string\n----\n---- Called \"position encoding\" in LSP spec, the encoding that the LSP server expects.\n---- Client does not verify this is correct.\n+--- Called \"position encoding\" in LSP spec. The encoding that the LSP server expects, used for\n+--- communication. Not validated. Can be modified in `on_init` before text is sent to the server.\n --- @field offset_encoding? 'utf-8'|'utf-16'|'utf-32'\n ---\n+--- Callback invoked when client attaches to a buffer.\n+--- @field on_attach? elem_or_list<fun(client: vim.lsp.Client, bufnr: integer)>\n+---\n --- Callback invoked when the client operation throws an error. `code` is a number describing the error.\n --- Other arguments may be passed depending on the error kind.  See `vim.lsp.rpc.client_errors`\n --- for possible errors. Use `vim.lsp.rpc.client_errors[code]` to get human-friendly name.\n --- @field on_error? fun(code: integer, err: string)\n ---\n---- Callback invoked before the LSP \"initialize\" phase, where `params` contains the parameters\n---- being sent to the server and `config` is the config that was passed to |vim.lsp.start()|.\n---- You can use this to modify parameters before they are sent.\n---- @field before_init? fun(params: lsp.InitializeParams, config: vim.lsp.ClientConfig)\n+--- Callback invoked on client exit.\n+---   - code: exit code of the process\n+---   - signal: number describing the signal used to terminate (if any)\n+---   - client_id: client handle\n+--- @field on_exit? elem_or_list<fun(code: integer, signal: integer, client_id: integer)>\n ---\n --- Callback invoked after LSP \"initialize\", where `result` is a table of `capabilities` and\n --- anything else the server may send. For example, clangd sends `init_result.offsetEncoding` if\n --- `capabilities.offsetEncoding` was sent to it. You can only modify the `client.offset_encoding`\n --- here before any notifications are sent.\n --- @field on_init? elem_or_list<fun(client: vim.lsp.Client, init_result: lsp.InitializeResult)>\n ---\n---- Callback invoked on client exit.\n----   - code: exit code of the process\n----   - signal: number describing the signal used to terminate (if any)\n----   - client_id: client handle\n---- @field on_exit? elem_or_list<fun(code: integer, signal: integer, client_id: integer)>\n+--- Directory where the LSP server will base its workspaceFolders, rootUri, and rootPath on initialization.\n+--- @field root_dir? string\n ---\n---- Callback invoked when client attaches to a buffer.\n---- @field on_attach? elem_or_list<fun(client: vim.lsp.Client, bufnr: integer)>\n+--- Map of language server-specific settings, decided by the client. Sent to the LS if requested via\n+--- `workspace/configuration`. Keys are case-sensitive.\n+--- @field settings? lsp.LSPObject\n ---\n --- Passed directly to the language server in the initialize request. Invalid/empty values will\n --- (default: \"off\")\n --- @field trace? 'off'|'messages'|'verbose'\n ---\n---- A table with flags for the client. The current (experimental) flags are:\n---- @field flags? vim.lsp.Client.Flags\n+--- List of workspace folders passed to the language server. For backwards compatibility rootUri and\n+--- rootPath are derived from the first workspace folder in this list. Can be `null` if the client\n+--- supports workspace folders but none are configured. See `workspaceFolders` in LSP spec.\n+--- @field workspace_folders? lsp.WorkspaceFolder[]\n ---\n---- Directory where the LSP server will base its workspaceFolders, rootUri, and rootPath on initialization.\n---- @field root_dir? string\n+--- (default false) Server requires a workspace (no \"single file\" support). Note: Without\n+--- a workspace, cross-file features (navigation, hover) may or may not work depending on the\n+--- language server, even if the server doesn't require a workspace.\n+--- @field workspace_required? boolean\n \n --- @class vim.lsp.Client.Progress: vim.Ringbuf<{token: integer|string, value: any}>\n --- @field pending table<lsp.ProgressToken,lsp.LSPAny>\n \n --- @class vim.lsp.Client\n ---\n+--- @field attached_buffers table<integer,true>\n+---\n+--- Capabilities provided by the client (editor or tool), at startup.\n+--- @field capabilities lsp.ClientCapabilities\n+---\n+--- Client commands. See [vim.lsp.ClientConfig].\n+--- @field commands table<string,fun(command: lsp.Command, ctx: table)>\n+---\n+--- Copy of the config passed to |vim.lsp.start()|.\n+--- @field config vim.lsp.ClientConfig",
            "html_url": "https://github.com/neovim/neovim/pull/33682#discussion_r2063642834",
            "id": 2063642834,
            "in_reply_to_id": 2062737077,
            "line": 154,
            "node_id": "PRRC_kwDOAPphoM57ALDS",
            "original_commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "original_line": 154,
            "original_position": 171,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": 171,
            "pull_request_review_id": 2799274545,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063642834/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T13:18:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063642834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33682#discussion_r2063653080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063653080"
                }
            },
            "author_association": "MEMBER",
            "body": "This has lost of special default formatting. Should be `(`string`, default: client-id)`\r\n\r\n",
            "commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "created_at": "2025-04-28T13:23:56Z",
            "diff_hunk": "@@ -1318,65 +1317,58 @@ Lua module: vim.lsp.client                                        *lsp-client*\n                                |vim.lsp.rpc.connect()|\n       • {cmd_cwd}?             (`string`, default: cwd) Directory to launch\n                                the `cmd` process. Not related to `root_dir`.\n-      • {cmd_env}?             (`table`) Environment flags to pass to the LSP\n-                               on spawn. Must be specified using a table.\n-                               Non-string values are coerced to string.\n-                               Example: >lua\n-                                   { PORT = 8080; HOST = \"0.0.0.0\"; }\n+      • {cmd_env}?             (`table`) Environment variables passed to the\n+                               LSP process on spawn. Non-string values are\n+                               coerced to string. Example: >lua\n+                                   { PORT = 8080; HOST = '0.0.0.0'; }\n <\n-      • {detached}?            (`boolean`, default: true) Daemonize the server\n-                               process so that it runs in a separate process\n-                               group from Nvim. Nvim will shutdown the process\n-                               on exit, but if Nvim fails to exit cleanly this\n-                               could leave behind orphaned server processes.\n-      • {workspace_folders}?   (`lsp.WorkspaceFolder[]`) List of workspace\n-                               folders passed to the language server. For\n-                               backwards compatibility rootUri and rootPath\n-                               will be derived from the first workspace folder\n-                               in this list. See `workspaceFolders` in the LSP\n-                               spec.\n-      • {workspace_required}?  (`boolean`) (default false) Server requires a\n-                               workspace (no \"single file\" support). Note:\n-                               Without a workspace, cross-file features\n-                               (navigation, hover) may or may not work\n-                               depending on the language server, even if the\n-                               server doesn't require a workspace.\n-      • {capabilities}?        (`lsp.ClientCapabilities`) Map overriding the\n-                               default capabilities defined by\n-                               |vim.lsp.protocol.make_client_capabilities()|,\n-                               passed to the language server on\n-                               initialization. Hint: use\n-                               make_client_capabilities() and modify its\n-                               result.\n-                               • Note: To send an empty dictionary use\n-                                 |vim.empty_dict()|, else it will be encoded\n-                                 as an array.\n-      • {handlers}?            (`table<string,function>`) Map of language\n-                               server method names to |lsp-handler|\n-      • {settings}?            (`lsp.LSPObject`) Map with language server\n-                               specific settings. See the {settings} in\n-                               |vim.lsp.Client|.\n       • {commands}?            (`table<string,fun(command: lsp.Command, ctx: table)>`)\n-                               Table that maps string of clientside commands\n-                               to user-defined functions. Commands passed to\n+                               Client commands. Map of command names to\n+                               user-defined functions. Commands passed to\n                                `start()` take precedence over the global\n                                command registry. Each key must be a unique\n                                command name, and the value is a function which\n                                is called if any LSP action (code action, code\n-                               lenses, ...) triggers the command.\n+                               lenses, …) triggers the command.\n+      • {detached}?            (`boolean`, default: true) Daemonize the server\n+                               process so that it runs in a separate process\n+                               group from Nvim. Nvim will shutdown the process\n+                               on exit, but if Nvim fails to exit cleanly this\n+                               could leave behind orphaned server processes.\n+      • {flags}?               (`table`) A table with flags for the client.\n+                               The current (experimental) flags are:\n+                               • {allow_incremental_sync}? (`boolean`,\n+                                 default: `true`) Allow using incremental sync\n+                                 for buffer edits\n+                               • {debounce_text_changes} (`integer`, default:\n+                                 `150`) Debounce `didChange` notifications to\n+                                 the server by the given number in\n+                                 milliseconds. No debounce occurs if `nil`.\n+                               • {exit_timeout} (`integer|false`, default:\n+                                 `false`) Milliseconds to wait for server to\n+                                 exit cleanly after sending the \"shutdown\"\n+                                 request before sending kill -15. If set to\n+                                 false, nvim exits immediately after sending\n+                                 the \"shutdown\" request to the server.\n+      • {get_language_id}?     (`fun(bufnr: integer, filetype: string): string`)\n+                               Language ID as string. Defaults to the buffer\n+                               filetype.\n+      • {handlers}?            (`table<string,function>`) Map of LSP method\n+                               names to |lsp-handler|s.\n       • {init_options}?        (`lsp.LSPObject`) Values to pass in the\n                                initialization request as\n                                `initializationOptions`. See `initialize` in\n                                the LSP spec.\n-      • {name}?                (`string`, default: client-id) Name in log\n-                               messages.\n-      • {get_language_id}?     (`fun(bufnr: integer, filetype: string): string`)\n-                               Language ID as string. Defaults to the buffer\n-                               filetype.\n+      • {name}?                (`string`) (default: client-id) Name in logs",
            "html_url": "https://github.com/neovim/neovim/pull/33682#discussion_r2063653080",
            "id": 2063653080,
            "line": 1362,
            "node_id": "PRRC_kwDOAPphoM57ANjY",
            "original_commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "original_line": 1362,
            "original_position": 278,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 278,
            "pull_request_review_id": 2799293025,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063653080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T13:23:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063653080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33682#discussion_r2063654843"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063654843"
                }
            },
            "author_association": "MEMBER",
            "body": "The default here also isn't correctly formatted, though it wasn't before.",
            "commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "created_at": "2025-04-28T13:24:51Z",
            "diff_hunk": "@@ -1401,36 +1392,30 @@ Lua module: vim.lsp.client                                        *lsp-client*\n                                You can only modify the\n                                `client.offset_encoding` here before any\n                                notifications are sent.\n-      • {on_exit}?             (`elem_or_list<fun(code: integer, signal: integer, client_id: integer)>`)\n-                               Callback invoked on client exit.\n-                               • code: exit code of the process\n-                               • signal: number describing the signal used to\n-                                 terminate (if any)\n-                               • client_id: client handle\n-      • {on_attach}?           (`elem_or_list<fun(client: vim.lsp.Client, bufnr: integer)>`)\n-                               Callback invoked when client attaches to a\n-                               buffer.\n-      • {trace}?               (`'off'|'messages'|'verbose'`, default: \"off\")\n-                               Passed directly to the language server in the\n-                               initialize request. Invalid/empty values will\n-      • {flags}?               (`table`) A table with flags for the client.\n-                               The current (experimental) flags are:\n-                               • {allow_incremental_sync}? (`boolean`,\n-                                 default: `true`) Allow using incremental sync\n-                                 for buffer edits\n-                               • {debounce_text_changes} (`integer`, default:\n-                                 `150`) Debounce `didChange` notifications to\n-                                 the server by the given number in\n-                                 milliseconds. No debounce occurs if `nil`.\n-                               • {exit_timeout} (`integer|false`, default:\n-                                 `false`) Milliseconds to wait for server to\n-                                 exit cleanly after sending the \"shutdown\"\n-                                 request before sending kill -15. If set to\n-                                 false, nvim exits immediately after sending\n-                                 the \"shutdown\" request to the server.\n       • {root_dir}?            (`string`) Directory where the LSP server will\n                                base its workspaceFolders, rootUri, and\n                                rootPath on initialization.\n+      • {settings}?            (`lsp.LSPObject`) Map of language\n+                               server-specific settings, decided by the\n+                               client. Sent to the LS if requested via\n+                               `workspace/configuration`. Keys are\n+                               case-sensitive.\n+      • {trace}?               (`'off'|'messages'|'verbose'`, default: \"off\")\n+                               Passed directly to the language server in the\n+                               initialize request. Invalid/empty values will\n+      • {workspace_folders}?   (`lsp.WorkspaceFolder[]`) List of workspace\n+                               folders passed to the language server. For\n+                               backwards compatibility rootUri and rootPath\n+                               are derived from the first workspace folder in\n+                               this list. Can be `null` if the client supports\n+                               workspace folders but none are configured. See\n+                               `workspaceFolders` in LSP spec.\n+      • {workspace_required}?  (`boolean`) (default false) Server requires a",
            "html_url": "https://github.com/neovim/neovim/pull/33682#discussion_r2063654843",
            "id": 2063654843,
            "line": 1413,
            "node_id": "PRRC_kwDOAPphoM57AN-7",
            "original_commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "original_line": 1413,
            "original_position": 363,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 363,
            "pull_request_review_id": 2799295818,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063654843/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T13:24:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063654843",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33682#discussion_r2063685639"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063685639"
                }
            },
            "author_association": "MEMBER",
            "body": "What is the markup for that here: https://github.com/neovim/neovim/blob/43f3c4a48f6cc3a4c4173591a59b8e3fcdb96759/runtime/lua/vim/lsp/client.lua#L92-L93 ?",
            "commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "created_at": "2025-04-28T13:41:08Z",
            "diff_hunk": "@@ -1318,65 +1317,58 @@ Lua module: vim.lsp.client                                        *lsp-client*\n                                |vim.lsp.rpc.connect()|\n       • {cmd_cwd}?             (`string`, default: cwd) Directory to launch\n                                the `cmd` process. Not related to `root_dir`.\n-      • {cmd_env}?             (`table`) Environment flags to pass to the LSP\n-                               on spawn. Must be specified using a table.\n-                               Non-string values are coerced to string.\n-                               Example: >lua\n-                                   { PORT = 8080; HOST = \"0.0.0.0\"; }\n+      • {cmd_env}?             (`table`) Environment variables passed to the\n+                               LSP process on spawn. Non-string values are\n+                               coerced to string. Example: >lua\n+                                   { PORT = 8080; HOST = '0.0.0.0'; }\n <\n-      • {detached}?            (`boolean`, default: true) Daemonize the server\n-                               process so that it runs in a separate process\n-                               group from Nvim. Nvim will shutdown the process\n-                               on exit, but if Nvim fails to exit cleanly this\n-                               could leave behind orphaned server processes.\n-      • {workspace_folders}?   (`lsp.WorkspaceFolder[]`) List of workspace\n-                               folders passed to the language server. For\n-                               backwards compatibility rootUri and rootPath\n-                               will be derived from the first workspace folder\n-                               in this list. See `workspaceFolders` in the LSP\n-                               spec.\n-      • {workspace_required}?  (`boolean`) (default false) Server requires a\n-                               workspace (no \"single file\" support). Note:\n-                               Without a workspace, cross-file features\n-                               (navigation, hover) may or may not work\n-                               depending on the language server, even if the\n-                               server doesn't require a workspace.\n-      • {capabilities}?        (`lsp.ClientCapabilities`) Map overriding the\n-                               default capabilities defined by\n-                               |vim.lsp.protocol.make_client_capabilities()|,\n-                               passed to the language server on\n-                               initialization. Hint: use\n-                               make_client_capabilities() and modify its\n-                               result.\n-                               • Note: To send an empty dictionary use\n-                                 |vim.empty_dict()|, else it will be encoded\n-                                 as an array.\n-      • {handlers}?            (`table<string,function>`) Map of language\n-                               server method names to |lsp-handler|\n-      • {settings}?            (`lsp.LSPObject`) Map with language server\n-                               specific settings. See the {settings} in\n-                               |vim.lsp.Client|.\n       • {commands}?            (`table<string,fun(command: lsp.Command, ctx: table)>`)\n-                               Table that maps string of clientside commands\n-                               to user-defined functions. Commands passed to\n+                               Client commands. Map of command names to\n+                               user-defined functions. Commands passed to\n                                `start()` take precedence over the global\n                                command registry. Each key must be a unique\n                                command name, and the value is a function which\n                                is called if any LSP action (code action, code\n-                               lenses, ...) triggers the command.\n+                               lenses, …) triggers the command.\n+      • {detached}?            (`boolean`, default: true) Daemonize the server\n+                               process so that it runs in a separate process\n+                               group from Nvim. Nvim will shutdown the process\n+                               on exit, but if Nvim fails to exit cleanly this\n+                               could leave behind orphaned server processes.\n+      • {flags}?               (`table`) A table with flags for the client.\n+                               The current (experimental) flags are:\n+                               • {allow_incremental_sync}? (`boolean`,\n+                                 default: `true`) Allow using incremental sync\n+                                 for buffer edits\n+                               • {debounce_text_changes} (`integer`, default:\n+                                 `150`) Debounce `didChange` notifications to\n+                                 the server by the given number in\n+                                 milliseconds. No debounce occurs if `nil`.\n+                               • {exit_timeout} (`integer|false`, default:\n+                                 `false`) Milliseconds to wait for server to\n+                                 exit cleanly after sending the \"shutdown\"\n+                                 request before sending kill -15. If set to\n+                                 false, nvim exits immediately after sending\n+                                 the \"shutdown\" request to the server.\n+      • {get_language_id}?     (`fun(bufnr: integer, filetype: string): string`)\n+                               Language ID as string. Defaults to the buffer\n+                               filetype.\n+      • {handlers}?            (`table<string,function>`) Map of LSP method\n+                               names to |lsp-handler|s.\n       • {init_options}?        (`lsp.LSPObject`) Values to pass in the\n                                initialization request as\n                                `initializationOptions`. See `initialize` in\n                                the LSP spec.\n-      • {name}?                (`string`, default: client-id) Name in log\n-                               messages.\n-      • {get_language_id}?     (`fun(bufnr: integer, filetype: string): string`)\n-                               Language ID as string. Defaults to the buffer\n-                               filetype.\n+      • {name}?                (`string`) (default: client-id) Name in logs",
            "html_url": "https://github.com/neovim/neovim/pull/33682#discussion_r2063685639",
            "id": 2063685639,
            "in_reply_to_id": 2063653080,
            "line": 1362,
            "node_id": "PRRC_kwDOAPphoM57AVgH",
            "original_commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "original_line": 1362,
            "original_position": 278,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 278,
            "pull_request_review_id": 2799346849,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063685639/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T13:41:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063685639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33682#discussion_r2063688810"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063688810"
                }
            },
            "author_association": "MEMBER",
            "body": "What is the syntax for that? https://github.com/neovim/neovim/blob/43f3c4a48f6cc3a4c4173591a59b8e3fcdb96759/runtime/lua/vim/lsp/client.lua#L135-L138",
            "commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "created_at": "2025-04-28T13:42:34Z",
            "diff_hunk": "@@ -1401,36 +1392,30 @@ Lua module: vim.lsp.client                                        *lsp-client*\n                                You can only modify the\n                                `client.offset_encoding` here before any\n                                notifications are sent.\n-      • {on_exit}?             (`elem_or_list<fun(code: integer, signal: integer, client_id: integer)>`)\n-                               Callback invoked on client exit.\n-                               • code: exit code of the process\n-                               • signal: number describing the signal used to\n-                                 terminate (if any)\n-                               • client_id: client handle\n-      • {on_attach}?           (`elem_or_list<fun(client: vim.lsp.Client, bufnr: integer)>`)\n-                               Callback invoked when client attaches to a\n-                               buffer.\n-      • {trace}?               (`'off'|'messages'|'verbose'`, default: \"off\")\n-                               Passed directly to the language server in the\n-                               initialize request. Invalid/empty values will\n-      • {flags}?               (`table`) A table with flags for the client.\n-                               The current (experimental) flags are:\n-                               • {allow_incremental_sync}? (`boolean`,\n-                                 default: `true`) Allow using incremental sync\n-                                 for buffer edits\n-                               • {debounce_text_changes} (`integer`, default:\n-                                 `150`) Debounce `didChange` notifications to\n-                                 the server by the given number in\n-                                 milliseconds. No debounce occurs if `nil`.\n-                               • {exit_timeout} (`integer|false`, default:\n-                                 `false`) Milliseconds to wait for server to\n-                                 exit cleanly after sending the \"shutdown\"\n-                                 request before sending kill -15. If set to\n-                                 false, nvim exits immediately after sending\n-                                 the \"shutdown\" request to the server.\n       • {root_dir}?            (`string`) Directory where the LSP server will\n                                base its workspaceFolders, rootUri, and\n                                rootPath on initialization.\n+      • {settings}?            (`lsp.LSPObject`) Map of language\n+                               server-specific settings, decided by the\n+                               client. Sent to the LS if requested via\n+                               `workspace/configuration`. Keys are\n+                               case-sensitive.\n+      • {trace}?               (`'off'|'messages'|'verbose'`, default: \"off\")\n+                               Passed directly to the language server in the\n+                               initialize request. Invalid/empty values will\n+      • {workspace_folders}?   (`lsp.WorkspaceFolder[]`) List of workspace\n+                               folders passed to the language server. For\n+                               backwards compatibility rootUri and rootPath\n+                               are derived from the first workspace folder in\n+                               this list. Can be `null` if the client supports\n+                               workspace folders but none are configured. See\n+                               `workspaceFolders` in LSP spec.\n+      • {workspace_required}?  (`boolean`) (default false) Server requires a",
            "html_url": "https://github.com/neovim/neovim/pull/33682#discussion_r2063688810",
            "id": 2063688810,
            "in_reply_to_id": 2063654843,
            "line": 1413,
            "node_id": "PRRC_kwDOAPphoM57AWRq",
            "original_commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "original_line": 1413,
            "original_position": 363,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 363,
            "pull_request_review_id": 2799351787,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063688810/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T13:42:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063688810",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33682#discussion_r2063720343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063720343"
                }
            },
            "author_association": "MEMBER",
            "body": "As it was before. `(default: client-id)` needs to be on its own line.",
            "commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "created_at": "2025-04-28T13:57:07Z",
            "diff_hunk": "@@ -1318,65 +1317,58 @@ Lua module: vim.lsp.client                                        *lsp-client*\n                                |vim.lsp.rpc.connect()|\n       • {cmd_cwd}?             (`string`, default: cwd) Directory to launch\n                                the `cmd` process. Not related to `root_dir`.\n-      • {cmd_env}?             (`table`) Environment flags to pass to the LSP\n-                               on spawn. Must be specified using a table.\n-                               Non-string values are coerced to string.\n-                               Example: >lua\n-                                   { PORT = 8080; HOST = \"0.0.0.0\"; }\n+      • {cmd_env}?             (`table`) Environment variables passed to the\n+                               LSP process on spawn. Non-string values are\n+                               coerced to string. Example: >lua\n+                                   { PORT = 8080; HOST = '0.0.0.0'; }\n <\n-      • {detached}?            (`boolean`, default: true) Daemonize the server\n-                               process so that it runs in a separate process\n-                               group from Nvim. Nvim will shutdown the process\n-                               on exit, but if Nvim fails to exit cleanly this\n-                               could leave behind orphaned server processes.\n-      • {workspace_folders}?   (`lsp.WorkspaceFolder[]`) List of workspace\n-                               folders passed to the language server. For\n-                               backwards compatibility rootUri and rootPath\n-                               will be derived from the first workspace folder\n-                               in this list. See `workspaceFolders` in the LSP\n-                               spec.\n-      • {workspace_required}?  (`boolean`) (default false) Server requires a\n-                               workspace (no \"single file\" support). Note:\n-                               Without a workspace, cross-file features\n-                               (navigation, hover) may or may not work\n-                               depending on the language server, even if the\n-                               server doesn't require a workspace.\n-      • {capabilities}?        (`lsp.ClientCapabilities`) Map overriding the\n-                               default capabilities defined by\n-                               |vim.lsp.protocol.make_client_capabilities()|,\n-                               passed to the language server on\n-                               initialization. Hint: use\n-                               make_client_capabilities() and modify its\n-                               result.\n-                               • Note: To send an empty dictionary use\n-                                 |vim.empty_dict()|, else it will be encoded\n-                                 as an array.\n-      • {handlers}?            (`table<string,function>`) Map of language\n-                               server method names to |lsp-handler|\n-      • {settings}?            (`lsp.LSPObject`) Map with language server\n-                               specific settings. See the {settings} in\n-                               |vim.lsp.Client|.\n       • {commands}?            (`table<string,fun(command: lsp.Command, ctx: table)>`)\n-                               Table that maps string of clientside commands\n-                               to user-defined functions. Commands passed to\n+                               Client commands. Map of command names to\n+                               user-defined functions. Commands passed to\n                                `start()` take precedence over the global\n                                command registry. Each key must be a unique\n                                command name, and the value is a function which\n                                is called if any LSP action (code action, code\n-                               lenses, ...) triggers the command.\n+                               lenses, …) triggers the command.\n+      • {detached}?            (`boolean`, default: true) Daemonize the server\n+                               process so that it runs in a separate process\n+                               group from Nvim. Nvim will shutdown the process\n+                               on exit, but if Nvim fails to exit cleanly this\n+                               could leave behind orphaned server processes.\n+      • {flags}?               (`table`) A table with flags for the client.\n+                               The current (experimental) flags are:\n+                               • {allow_incremental_sync}? (`boolean`,\n+                                 default: `true`) Allow using incremental sync\n+                                 for buffer edits\n+                               • {debounce_text_changes} (`integer`, default:\n+                                 `150`) Debounce `didChange` notifications to\n+                                 the server by the given number in\n+                                 milliseconds. No debounce occurs if `nil`.\n+                               • {exit_timeout} (`integer|false`, default:\n+                                 `false`) Milliseconds to wait for server to\n+                                 exit cleanly after sending the \"shutdown\"\n+                                 request before sending kill -15. If set to\n+                                 false, nvim exits immediately after sending\n+                                 the \"shutdown\" request to the server.\n+      • {get_language_id}?     (`fun(bufnr: integer, filetype: string): string`)\n+                               Language ID as string. Defaults to the buffer\n+                               filetype.\n+      • {handlers}?            (`table<string,function>`) Map of LSP method\n+                               names to |lsp-handler|s.\n       • {init_options}?        (`lsp.LSPObject`) Values to pass in the\n                                initialization request as\n                                `initializationOptions`. See `initialize` in\n                                the LSP spec.\n-      • {name}?                (`string`, default: client-id) Name in log\n-                               messages.\n-      • {get_language_id}?     (`fun(bufnr: integer, filetype: string): string`)\n-                               Language ID as string. Defaults to the buffer\n-                               filetype.\n+      • {name}?                (`string`) (default: client-id) Name in logs",
            "html_url": "https://github.com/neovim/neovim/pull/33682#discussion_r2063720343",
            "id": 2063720343,
            "in_reply_to_id": 2063653080,
            "line": 1362,
            "node_id": "PRRC_kwDOAPphoM57Ad-X",
            "original_commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "original_line": 1362,
            "original_position": 278,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 278,
            "pull_request_review_id": 2799403565,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063720343/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T13:57:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063720343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33682#discussion_r2063723492"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063723492"
                }
            },
            "author_association": "MEMBER",
            "body": "Remove `(default false)` and add `(default: `false`)` directly above the `@field` line.\r\n\r\n```lua\r\n --- Server requires a workspace (no \"single file\" support). Note: Without \r\n --- a workspace, cross-file features (navigation, hover) may or may not work depending on the \r\n --- language server, even if the server doesn't require a workspace. \r\n --- (default: `false`)\r\n --- @field workspace_required? boolean \r\n```",
            "commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "created_at": "2025-04-28T13:58:35Z",
            "diff_hunk": "@@ -1401,36 +1392,30 @@ Lua module: vim.lsp.client                                        *lsp-client*\n                                You can only modify the\n                                `client.offset_encoding` here before any\n                                notifications are sent.\n-      • {on_exit}?             (`elem_or_list<fun(code: integer, signal: integer, client_id: integer)>`)\n-                               Callback invoked on client exit.\n-                               • code: exit code of the process\n-                               • signal: number describing the signal used to\n-                                 terminate (if any)\n-                               • client_id: client handle\n-      • {on_attach}?           (`elem_or_list<fun(client: vim.lsp.Client, bufnr: integer)>`)\n-                               Callback invoked when client attaches to a\n-                               buffer.\n-      • {trace}?               (`'off'|'messages'|'verbose'`, default: \"off\")\n-                               Passed directly to the language server in the\n-                               initialize request. Invalid/empty values will\n-      • {flags}?               (`table`) A table with flags for the client.\n-                               The current (experimental) flags are:\n-                               • {allow_incremental_sync}? (`boolean`,\n-                                 default: `true`) Allow using incremental sync\n-                                 for buffer edits\n-                               • {debounce_text_changes} (`integer`, default:\n-                                 `150`) Debounce `didChange` notifications to\n-                                 the server by the given number in\n-                                 milliseconds. No debounce occurs if `nil`.\n-                               • {exit_timeout} (`integer|false`, default:\n-                                 `false`) Milliseconds to wait for server to\n-                                 exit cleanly after sending the \"shutdown\"\n-                                 request before sending kill -15. If set to\n-                                 false, nvim exits immediately after sending\n-                                 the \"shutdown\" request to the server.\n       • {root_dir}?            (`string`) Directory where the LSP server will\n                                base its workspaceFolders, rootUri, and\n                                rootPath on initialization.\n+      • {settings}?            (`lsp.LSPObject`) Map of language\n+                               server-specific settings, decided by the\n+                               client. Sent to the LS if requested via\n+                               `workspace/configuration`. Keys are\n+                               case-sensitive.\n+      • {trace}?               (`'off'|'messages'|'verbose'`, default: \"off\")\n+                               Passed directly to the language server in the\n+                               initialize request. Invalid/empty values will\n+      • {workspace_folders}?   (`lsp.WorkspaceFolder[]`) List of workspace\n+                               folders passed to the language server. For\n+                               backwards compatibility rootUri and rootPath\n+                               are derived from the first workspace folder in\n+                               this list. Can be `null` if the client supports\n+                               workspace folders but none are configured. See\n+                               `workspaceFolders` in LSP spec.\n+      • {workspace_required}?  (`boolean`) (default false) Server requires a",
            "html_url": "https://github.com/neovim/neovim/pull/33682#discussion_r2063723492",
            "id": 2063723492,
            "in_reply_to_id": 2063654843,
            "line": 1413,
            "node_id": "PRRC_kwDOAPphoM57Aevk",
            "original_commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "original_line": 1413,
            "original_position": 363,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 363,
            "pull_request_review_id": 2799408506,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063723492/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T13:58:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063723492",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33682#discussion_r2063731947"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063731947"
                }
            },
            "author_association": "MEMBER",
            "body": "thanks, fixed in https://github.com/neovim/neovim/pull/33687",
            "commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "created_at": "2025-04-28T14:02:30Z",
            "diff_hunk": "@@ -1318,65 +1317,58 @@ Lua module: vim.lsp.client                                        *lsp-client*\n                                |vim.lsp.rpc.connect()|\n       • {cmd_cwd}?             (`string`, default: cwd) Directory to launch\n                                the `cmd` process. Not related to `root_dir`.\n-      • {cmd_env}?             (`table`) Environment flags to pass to the LSP\n-                               on spawn. Must be specified using a table.\n-                               Non-string values are coerced to string.\n-                               Example: >lua\n-                                   { PORT = 8080; HOST = \"0.0.0.0\"; }\n+      • {cmd_env}?             (`table`) Environment variables passed to the\n+                               LSP process on spawn. Non-string values are\n+                               coerced to string. Example: >lua\n+                                   { PORT = 8080; HOST = '0.0.0.0'; }\n <\n-      • {detached}?            (`boolean`, default: true) Daemonize the server\n-                               process so that it runs in a separate process\n-                               group from Nvim. Nvim will shutdown the process\n-                               on exit, but if Nvim fails to exit cleanly this\n-                               could leave behind orphaned server processes.\n-      • {workspace_folders}?   (`lsp.WorkspaceFolder[]`) List of workspace\n-                               folders passed to the language server. For\n-                               backwards compatibility rootUri and rootPath\n-                               will be derived from the first workspace folder\n-                               in this list. See `workspaceFolders` in the LSP\n-                               spec.\n-      • {workspace_required}?  (`boolean`) (default false) Server requires a\n-                               workspace (no \"single file\" support). Note:\n-                               Without a workspace, cross-file features\n-                               (navigation, hover) may or may not work\n-                               depending on the language server, even if the\n-                               server doesn't require a workspace.\n-      • {capabilities}?        (`lsp.ClientCapabilities`) Map overriding the\n-                               default capabilities defined by\n-                               |vim.lsp.protocol.make_client_capabilities()|,\n-                               passed to the language server on\n-                               initialization. Hint: use\n-                               make_client_capabilities() and modify its\n-                               result.\n-                               • Note: To send an empty dictionary use\n-                                 |vim.empty_dict()|, else it will be encoded\n-                                 as an array.\n-      • {handlers}?            (`table<string,function>`) Map of language\n-                               server method names to |lsp-handler|\n-      • {settings}?            (`lsp.LSPObject`) Map with language server\n-                               specific settings. See the {settings} in\n-                               |vim.lsp.Client|.\n       • {commands}?            (`table<string,fun(command: lsp.Command, ctx: table)>`)\n-                               Table that maps string of clientside commands\n-                               to user-defined functions. Commands passed to\n+                               Client commands. Map of command names to\n+                               user-defined functions. Commands passed to\n                                `start()` take precedence over the global\n                                command registry. Each key must be a unique\n                                command name, and the value is a function which\n                                is called if any LSP action (code action, code\n-                               lenses, ...) triggers the command.\n+                               lenses, …) triggers the command.\n+      • {detached}?            (`boolean`, default: true) Daemonize the server\n+                               process so that it runs in a separate process\n+                               group from Nvim. Nvim will shutdown the process\n+                               on exit, but if Nvim fails to exit cleanly this\n+                               could leave behind orphaned server processes.\n+      • {flags}?               (`table`) A table with flags for the client.\n+                               The current (experimental) flags are:\n+                               • {allow_incremental_sync}? (`boolean`,\n+                                 default: `true`) Allow using incremental sync\n+                                 for buffer edits\n+                               • {debounce_text_changes} (`integer`, default:\n+                                 `150`) Debounce `didChange` notifications to\n+                                 the server by the given number in\n+                                 milliseconds. No debounce occurs if `nil`.\n+                               • {exit_timeout} (`integer|false`, default:\n+                                 `false`) Milliseconds to wait for server to\n+                                 exit cleanly after sending the \"shutdown\"\n+                                 request before sending kill -15. If set to\n+                                 false, nvim exits immediately after sending\n+                                 the \"shutdown\" request to the server.\n+      • {get_language_id}?     (`fun(bufnr: integer, filetype: string): string`)\n+                               Language ID as string. Defaults to the buffer\n+                               filetype.\n+      • {handlers}?            (`table<string,function>`) Map of LSP method\n+                               names to |lsp-handler|s.\n       • {init_options}?        (`lsp.LSPObject`) Values to pass in the\n                                initialization request as\n                                `initializationOptions`. See `initialize` in\n                                the LSP spec.\n-      • {name}?                (`string`, default: client-id) Name in log\n-                               messages.\n-      • {get_language_id}?     (`fun(bufnr: integer, filetype: string): string`)\n-                               Language ID as string. Defaults to the buffer\n-                               filetype.\n+      • {name}?                (`string`) (default: client-id) Name in logs",
            "html_url": "https://github.com/neovim/neovim/pull/33682#discussion_r2063731947",
            "id": 2063731947,
            "in_reply_to_id": 2063653080,
            "line": 1362,
            "node_id": "PRRC_kwDOAPphoM57Agzr",
            "original_commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "original_line": 1362,
            "original_position": 278,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 278,
            "pull_request_review_id": 2799422767,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063731947/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T14:02:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063731947",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33682#discussion_r2063732142"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33682"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063732142"
                }
            },
            "author_association": "MEMBER",
            "body": "thanks, fixed in https://github.com/neovim/neovim/pull/33687",
            "commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "created_at": "2025-04-28T14:02:36Z",
            "diff_hunk": "@@ -1401,36 +1392,30 @@ Lua module: vim.lsp.client                                        *lsp-client*\n                                You can only modify the\n                                `client.offset_encoding` here before any\n                                notifications are sent.\n-      • {on_exit}?             (`elem_or_list<fun(code: integer, signal: integer, client_id: integer)>`)\n-                               Callback invoked on client exit.\n-                               • code: exit code of the process\n-                               • signal: number describing the signal used to\n-                                 terminate (if any)\n-                               • client_id: client handle\n-      • {on_attach}?           (`elem_or_list<fun(client: vim.lsp.Client, bufnr: integer)>`)\n-                               Callback invoked when client attaches to a\n-                               buffer.\n-      • {trace}?               (`'off'|'messages'|'verbose'`, default: \"off\")\n-                               Passed directly to the language server in the\n-                               initialize request. Invalid/empty values will\n-      • {flags}?               (`table`) A table with flags for the client.\n-                               The current (experimental) flags are:\n-                               • {allow_incremental_sync}? (`boolean`,\n-                                 default: `true`) Allow using incremental sync\n-                                 for buffer edits\n-                               • {debounce_text_changes} (`integer`, default:\n-                                 `150`) Debounce `didChange` notifications to\n-                                 the server by the given number in\n-                                 milliseconds. No debounce occurs if `nil`.\n-                               • {exit_timeout} (`integer|false`, default:\n-                                 `false`) Milliseconds to wait for server to\n-                                 exit cleanly after sending the \"shutdown\"\n-                                 request before sending kill -15. If set to\n-                                 false, nvim exits immediately after sending\n-                                 the \"shutdown\" request to the server.\n       • {root_dir}?            (`string`) Directory where the LSP server will\n                                base its workspaceFolders, rootUri, and\n                                rootPath on initialization.\n+      • {settings}?            (`lsp.LSPObject`) Map of language\n+                               server-specific settings, decided by the\n+                               client. Sent to the LS if requested via\n+                               `workspace/configuration`. Keys are\n+                               case-sensitive.\n+      • {trace}?               (`'off'|'messages'|'verbose'`, default: \"off\")\n+                               Passed directly to the language server in the\n+                               initialize request. Invalid/empty values will\n+      • {workspace_folders}?   (`lsp.WorkspaceFolder[]`) List of workspace\n+                               folders passed to the language server. For\n+                               backwards compatibility rootUri and rootPath\n+                               are derived from the first workspace folder in\n+                               this list. Can be `null` if the client supports\n+                               workspace folders but none are configured. See\n+                               `workspaceFolders` in LSP spec.\n+      • {workspace_required}?  (`boolean`) (default false) Server requires a",
            "html_url": "https://github.com/neovim/neovim/pull/33682#discussion_r2063732142",
            "id": 2063732142,
            "in_reply_to_id": 2063654843,
            "line": 1413,
            "node_id": "PRRC_kwDOAPphoM57Ag2u",
            "original_commit_id": "fe70b3fcc5100f18046a745827e4227d3510befe",
            "original_line": 1413,
            "original_position": 363,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 363,
            "pull_request_review_id": 2799423071,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063732142/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T14:02:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063732142",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33682/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/33682/commits",
    "created_at": "2025-04-27T22:28:21Z",
    "diff_url": "https://github.com/neovim/neovim/pull/33682.diff",
    "draft": false,
    "head": {
        "label": "justinmk:doc2",
        "ref": "doc2",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/justinmk/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/justinmk/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/justinmk/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/justinmk/neovim/branches{/branch}",
            "clone_url": "https://github.com/justinmk/neovim.git",
            "collaborators_url": "https://api.github.com/repos/justinmk/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/justinmk/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/justinmk/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/justinmk/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/justinmk/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/justinmk/neovim/contributors",
            "created_at": "2014-02-28T23:17:54Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/justinmk/neovim/deployments",
            "description": "somewhere in todo.txt",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/justinmk/neovim/downloads",
            "events_url": "https://api.github.com/repos/justinmk/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/justinmk/neovim/forks",
            "full_name": "justinmk/neovim",
            "git_commits_url": "https://api.github.com/repos/justinmk/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/justinmk/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/justinmk/neovim/git/tags{/sha}",
            "git_url": "git://github.com/justinmk/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "http://neovim.io",
            "hooks_url": "https://api.github.com/repos/justinmk/neovim/hooks",
            "html_url": "https://github.com/justinmk/neovim",
            "id": 17302877,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/justinmk/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/justinmk/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/justinmk/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/justinmk/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/justinmk/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/justinmk/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/justinmk/neovim/merges",
            "milestones_url": "https://api.github.com/repos/justinmk/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNzMwMjg3Nw==",
            "notifications_url": "https://api.github.com/repos/justinmk/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/justinmk/neovim/pulls{/number}",
            "pushed_at": "2025-04-28T14:03:44Z",
            "releases_url": "https://api.github.com/repos/justinmk/neovim/releases{/id}",
            "size": 311839,
            "ssh_url": "git@github.com:justinmk/neovim.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/justinmk/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/justinmk/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/justinmk/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/justinmk/neovim/subscription",
            "svn_url": "https://github.com/justinmk/neovim",
            "tags_url": "https://api.github.com/repos/justinmk/neovim/tags",
            "teams_url": "https://api.github.com/repos/justinmk/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/justinmk/neovim/git/trees{/sha}",
            "updated_at": "2025-01-13T16:10:06Z",
            "url": "https://api.github.com/repos/justinmk/neovim",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "fe70b3fcc5100f18046a745827e4227d3510befe",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/33682",
    "id": 2484446178,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33682",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "filetype detection, filetype.lua, ftplugins",
            "id": 3708202139,
            "name": "filetype",
            "node_id": "LA_kwDOAPphoM7dBqyb",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filetype"
        }
    ],
    "locked": false,
    "merge_commit_sha": "644c6188254b79c8a200ba474cf3b9b478185e16",
    "merged_at": "2025-04-27T22:44:11Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6UFaPi",
    "number": 33682,
    "patch_url": "https://github.com/neovim/neovim/pull/33682.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/33682/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/fe70b3fcc5100f18046a745827e4227d3510befe",
    "title": "docs: lsp, lua",
    "updated_at": "2025-04-28T14:02:36Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/33682",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}