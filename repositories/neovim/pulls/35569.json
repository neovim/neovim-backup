{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35569/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35569/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35569"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35569"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35569/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35569"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/d160447c31509f42d9fbcd5a7c4fef65381f982e"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6310,
            "forks_count": 6310,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1996,
            "open_issues_count": 1996,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-09-09T01:58:55Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 341252,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 92608,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-09-09T02:05:07Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 92608,
            "watchers_count": 92608,
            "web_commit_signoff_required": false
        },
        "sha": "069be911064d0e64f1efc13348dbb878afaf347f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Running `:connect` without any address provided will provide the user with a list of options to connect to, including ssh hosts configured on the system.\r\nRunning `:connect ssh://host` will attempt to connect to host via connect and run Neovim remotely on the system.\r\n\r\nI need some help writing the tests, not sure how to do that at all for this.\r\n\r\nFor the longest time I couldn't figure out how to avoid making the user input their password multiple time for password based authentication. Got the idea for caching prompts and responses from this plugin: https://github.com/amitds1997/remote-nvim.nvim/. Thanks a lot to https://github.com/amitds1997 for their amazing work.\r\n\r\nReference issue: https://github.com/neovim/neovim/issues/34257",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35569#discussion_r2312707616"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312707616"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- Starts a Nvim server on the remote machine via ssh and tunnels it to a local socket.\r\n```",
            "commit_id": "d160447c31509f42d9fbcd5a7c4fef65381f982e",
            "created_at": "2025-09-01T00:51:50Z",
            "diff_hunk": "@@ -234,4 +238,198 @@ function M.get_hosts()\n   return M.parse_config(config_path)\n end\n \n+-- Prompts table obtained from https://github.com/amitds1997/remote-nvim.nvim/blob/9992c2fb8bf4f11aca2c8be8db286b506f92efcb/lua/remote-nvim/init.lua#L110-L145\n+local ssh_prompts = {\n+  {\n+    prompt = 'password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'continue connecting (yes/no/[fingerprint])?',\n+    type = 'plain',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password for',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Enter passphrase',\n+    type = 'secret',\n+    value = '',\n+  },\n+}\n+\n+local stdout = {} ---@type string[]\n+local processed_idx = 0\n+local job_id = 0\n+local is_remote_running = false\n+\n+local function _run_cmd(cmd, on_exit)\n+  stdout = {}\n+  processed_idx = 0\n+\n+  job_id = vim.fn.jobstart(cmd, {\n+    pty = true,\n+    on_stdout = function(_job_id, data, _event)\n+      data = data ---@type string[]\n+      for _, chunk in ipairs(data) do\n+        local line = chunk:gsub('\\r', '\\n')\n+        table.insert(stdout, line)\n+      end\n+\n+      local unprocessed_data = table.concat(vim.list_slice(stdout, processed_idx + 1))\n+      if unprocessed_data:find('Tunnel created successfully') then\n+        is_remote_running = true\n+      end\n+      for i, prompt in ipairs(ssh_prompts) do\n+        if unprocessed_data:find(vim.pesc(prompt.prompt)) then\n+          local resp = ''\n+          if prompt.value ~= '' then\n+            resp = prompt.value\n+          else\n+            local unprocessed_data_lines = vim.split(vim.trim(unprocessed_data), '\\n')\n+            local input_label =\n+              string.format('%s ', unprocessed_data_lines[#unprocessed_data_lines])\n+            if prompt.type == 'secret' then\n+              resp = vim.fn.inputsecret(input_label)\n+            else\n+              resp = vim.fn.input(input_label)\n+            end\n+            vim.cmd('redraw')\n+          end\n+\n+          ssh_prompts[i].value = resp\n+          processed_idx = #stdout\n+          vim.api.nvim_chan_send(job_id, resp .. '\\n')\n+        end\n+      end\n+    end,\n+    on_exit = function(chan_id, data, event)\n+      if on_exit ~= nil then\n+        on_exit(chan_id, data, event)\n+      end\n+    end,\n+  })\n+\n+  return job_id\n+end\n+\n+--- Starts a server on the remote machine via ssh and tunnels it to a local socket.",
            "html_url": "https://github.com/neovim/neovim/pull/35569#discussion_r2312707616",
            "id": 2312707616,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6J2R4g",
            "original_commit_id": "4ef865d5fabd7576e1b2a8cbeba3519cfbeb9b0a",
            "original_line": 325,
            "original_position": 105,
            "original_start_line": null,
            "path": "runtime/lua/vim/net/_ssh.lua",
            "position": 1,
            "pull_request_review_id": 3171875228,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312707616/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-01T00:51:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312707616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35569#discussion_r2312708113"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312708113"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    error('\"ssh\" client not found')\r\n```",
            "commit_id": "d160447c31509f42d9fbcd5a7c4fef65381f982e",
            "created_at": "2025-09-01T00:52:38Z",
            "diff_hunk": "@@ -234,4 +238,198 @@ function M.get_hosts()\n   return M.parse_config(config_path)\n end\n \n+-- Prompts table obtained from https://github.com/amitds1997/remote-nvim.nvim/blob/9992c2fb8bf4f11aca2c8be8db286b506f92efcb/lua/remote-nvim/init.lua#L110-L145\n+local ssh_prompts = {\n+  {\n+    prompt = 'password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'continue connecting (yes/no/[fingerprint])?',\n+    type = 'plain',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password for',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Enter passphrase',\n+    type = 'secret',\n+    value = '',\n+  },\n+}\n+\n+local stdout = {} ---@type string[]\n+local processed_idx = 0\n+local job_id = 0\n+local is_remote_running = false\n+\n+local function _run_cmd(cmd, on_exit)\n+  stdout = {}\n+  processed_idx = 0\n+\n+  job_id = vim.fn.jobstart(cmd, {\n+    pty = true,\n+    on_stdout = function(_job_id, data, _event)\n+      data = data ---@type string[]\n+      for _, chunk in ipairs(data) do\n+        local line = chunk:gsub('\\r', '\\n')\n+        table.insert(stdout, line)\n+      end\n+\n+      local unprocessed_data = table.concat(vim.list_slice(stdout, processed_idx + 1))\n+      if unprocessed_data:find('Tunnel created successfully') then\n+        is_remote_running = true\n+      end\n+      for i, prompt in ipairs(ssh_prompts) do\n+        if unprocessed_data:find(vim.pesc(prompt.prompt)) then\n+          local resp = ''\n+          if prompt.value ~= '' then\n+            resp = prompt.value\n+          else\n+            local unprocessed_data_lines = vim.split(vim.trim(unprocessed_data), '\\n')\n+            local input_label =\n+              string.format('%s ', unprocessed_data_lines[#unprocessed_data_lines])\n+            if prompt.type == 'secret' then\n+              resp = vim.fn.inputsecret(input_label)\n+            else\n+              resp = vim.fn.input(input_label)\n+            end\n+            vim.cmd('redraw')\n+          end\n+\n+          ssh_prompts[i].value = resp\n+          processed_idx = #stdout\n+          vim.api.nvim_chan_send(job_id, resp .. '\\n')\n+        end\n+      end\n+    end,\n+    on_exit = function(chan_id, data, event)\n+      if on_exit ~= nil then\n+        on_exit(chan_id, data, event)\n+      end\n+    end,\n+  })\n+\n+  return job_id\n+end\n+\n+--- Starts a server on the remote machine via ssh and tunnels it to a local socket.\n+---@param address string\n+---@return string local_socket\n+function M.connect_to_address(address)\n+  if not address or address == '' then\n+    error('invalid SSH address given')\n+  end\n+\n+  if vim.fn.executable('ssh') ~= 1 then\n+    error('ssh not installed on system')",
            "html_url": "https://github.com/neovim/neovim/pull/35569#discussion_r2312708113",
            "id": 2312708113,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6J2SAR",
            "original_commit_id": "4ef865d5fabd7576e1b2a8cbeba3519cfbeb9b0a",
            "original_line": 334,
            "original_position": 114,
            "original_start_line": null,
            "path": "runtime/lua/vim/net/_ssh.lua",
            "position": 1,
            "pull_request_review_id": 3171876434,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312708113/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-01T00:53:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312708113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35569#discussion_r2312721810"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312721810"
                }
            },
            "author_association": "MEMBER",
            "body": "why is the command passed as a string? jobstart() accepts a list, which avoids quoting problems and shell configuration quirks.",
            "commit_id": "d160447c31509f42d9fbcd5a7c4fef65381f982e",
            "created_at": "2025-09-01T01:16:23Z",
            "diff_hunk": "@@ -234,4 +238,198 @@ function M.get_hosts()\n   return M.parse_config(config_path)\n end\n \n+-- Prompts table obtained from https://github.com/amitds1997/remote-nvim.nvim/blob/9992c2fb8bf4f11aca2c8be8db286b506f92efcb/lua/remote-nvim/init.lua#L110-L145\n+local ssh_prompts = {\n+  {\n+    prompt = 'password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'continue connecting (yes/no/[fingerprint])?',\n+    type = 'plain',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password for',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Enter passphrase',\n+    type = 'secret',\n+    value = '',\n+  },\n+}\n+\n+local stdout = {} ---@type string[]\n+local processed_idx = 0\n+local job_id = 0\n+local is_remote_running = false\n+\n+local function _run_cmd(cmd, on_exit)\n+  stdout = {}\n+  processed_idx = 0\n+\n+  job_id = vim.fn.jobstart(cmd, {\n+    pty = true,\n+    on_stdout = function(_job_id, data, _event)\n+      data = data ---@type string[]\n+      for _, chunk in ipairs(data) do\n+        local line = chunk:gsub('\\r', '\\n')\n+        table.insert(stdout, line)\n+      end\n+\n+      local unprocessed_data = table.concat(vim.list_slice(stdout, processed_idx + 1))\n+      if unprocessed_data:find('Tunnel created successfully') then\n+        is_remote_running = true\n+      end\n+      for i, prompt in ipairs(ssh_prompts) do\n+        if unprocessed_data:find(vim.pesc(prompt.prompt)) then\n+          local resp = ''\n+          if prompt.value ~= '' then\n+            resp = prompt.value\n+          else\n+            local unprocessed_data_lines = vim.split(vim.trim(unprocessed_data), '\\n')\n+            local input_label =\n+              string.format('%s ', unprocessed_data_lines[#unprocessed_data_lines])\n+            if prompt.type == 'secret' then\n+              resp = vim.fn.inputsecret(input_label)\n+            else\n+              resp = vim.fn.input(input_label)\n+            end\n+            vim.cmd('redraw')\n+          end\n+\n+          ssh_prompts[i].value = resp\n+          processed_idx = #stdout\n+          vim.api.nvim_chan_send(job_id, resp .. '\\n')\n+        end\n+      end\n+    end,\n+    on_exit = function(chan_id, data, event)\n+      if on_exit ~= nil then\n+        on_exit(chan_id, data, event)\n+      end\n+    end,\n+  })\n+\n+  return job_id\n+end\n+\n+--- Starts a server on the remote machine via ssh and tunnels it to a local socket.\n+---@param address string\n+---@return string local_socket\n+function M.connect_to_address(address)\n+  if not address or address == '' then\n+    error('invalid SSH address given')\n+  end\n+\n+  if vim.fn.executable('ssh') ~= 1 then\n+    error('ssh not installed on system')\n+  end\n+\n+  -- Reset the prompts table\n+  for i, prompt in ipairs(ssh_prompts) do\n+    if prompt.value ~= '' then\n+      ssh_prompts[i].value = ''\n+    end\n+  end\n+\n+  local remote_has_nvim = false\n+  local check_cmd = string.format('ssh -t %s %s', address, vim.fn.shellescape('nvim --clean -v'))\n+  local check_on_exit = function(_job_id, _data, _event)\n+    local check_str = table.concat(stdout, '')\n+    if check_str:find('NVIM v.*') ~= nil then\n+      remote_has_nvim = true\n+    end\n+  end\n+  local check_id = _run_cmd(check_cmd, check_on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/35569#discussion_r2312721810",
            "id": 2312721810,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6J2VWS",
            "original_commit_id": "4ef865d5fabd7576e1b2a8cbeba3519cfbeb9b0a",
            "original_line": 356,
            "original_position": 132,
            "original_start_line": 345,
            "path": "runtime/lua/vim/net/_ssh.lua",
            "position": 1,
            "pull_request_review_id": 3171894552,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312721810/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-01T01:16:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312721810",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35569#discussion_r2312723899"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312723899"
                }
            },
            "author_association": "MEMBER",
            "body": "all the escaping and shellecape() would not be needed if the full command was passed as a list:\r\n\r\n    cmd = { 'ssh', '-t', address, \"nvim --headless --cmd 'echo...\" }\r\n",
            "commit_id": "d160447c31509f42d9fbcd5a7c4fef65381f982e",
            "created_at": "2025-09-01T01:17:57Z",
            "diff_hunk": "@@ -234,4 +238,198 @@ function M.get_hosts()\n   return M.parse_config(config_path)\n end\n \n+-- Prompts table obtained from https://github.com/amitds1997/remote-nvim.nvim/blob/9992c2fb8bf4f11aca2c8be8db286b506f92efcb/lua/remote-nvim/init.lua#L110-L145\n+local ssh_prompts = {\n+  {\n+    prompt = 'password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'continue connecting (yes/no/[fingerprint])?',\n+    type = 'plain',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password for',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Enter passphrase',\n+    type = 'secret',\n+    value = '',\n+  },\n+}\n+\n+local stdout = {} ---@type string[]\n+local processed_idx = 0\n+local job_id = 0\n+local is_remote_running = false\n+\n+local function _run_cmd(cmd, on_exit)\n+  stdout = {}\n+  processed_idx = 0\n+\n+  job_id = vim.fn.jobstart(cmd, {\n+    pty = true,\n+    on_stdout = function(_job_id, data, _event)\n+      data = data ---@type string[]\n+      for _, chunk in ipairs(data) do\n+        local line = chunk:gsub('\\r', '\\n')\n+        table.insert(stdout, line)\n+      end\n+\n+      local unprocessed_data = table.concat(vim.list_slice(stdout, processed_idx + 1))\n+      if unprocessed_data:find('Tunnel created successfully') then\n+        is_remote_running = true\n+      end\n+      for i, prompt in ipairs(ssh_prompts) do\n+        if unprocessed_data:find(vim.pesc(prompt.prompt)) then\n+          local resp = ''\n+          if prompt.value ~= '' then\n+            resp = prompt.value\n+          else\n+            local unprocessed_data_lines = vim.split(vim.trim(unprocessed_data), '\\n')\n+            local input_label =\n+              string.format('%s ', unprocessed_data_lines[#unprocessed_data_lines])\n+            if prompt.type == 'secret' then\n+              resp = vim.fn.inputsecret(input_label)\n+            else\n+              resp = vim.fn.input(input_label)\n+            end\n+            vim.cmd('redraw')\n+          end\n+\n+          ssh_prompts[i].value = resp\n+          processed_idx = #stdout\n+          vim.api.nvim_chan_send(job_id, resp .. '\\n')\n+        end\n+      end\n+    end,\n+    on_exit = function(chan_id, data, event)\n+      if on_exit ~= nil then\n+        on_exit(chan_id, data, event)\n+      end\n+    end,\n+  })\n+\n+  return job_id\n+end\n+\n+--- Starts a server on the remote machine via ssh and tunnels it to a local socket.\n+---@param address string\n+---@return string local_socket\n+function M.connect_to_address(address)\n+  if not address or address == '' then\n+    error('invalid SSH address given')\n+  end\n+\n+  if vim.fn.executable('ssh') ~= 1 then\n+    error('ssh not installed on system')\n+  end\n+\n+  -- Reset the prompts table\n+  for i, prompt in ipairs(ssh_prompts) do\n+    if prompt.value ~= '' then\n+      ssh_prompts[i].value = ''\n+    end\n+  end\n+\n+  local remote_has_nvim = false\n+  local check_cmd = string.format('ssh -t %s %s', address, vim.fn.shellescape('nvim --clean -v'))\n+  local check_on_exit = function(_job_id, _data, _event)\n+    local check_str = table.concat(stdout, '')\n+    if check_str:find('NVIM v.*') ~= nil then\n+      remote_has_nvim = true\n+    end\n+  end\n+  local check_id = _run_cmd(check_cmd, check_on_exit)\n+\n+  vim.fn.jobwait({ check_id })\n+\n+  if not remote_has_nvim then\n+    error('Neovim needs to be installed on the remote machine')\n+  end\n+\n+  local local_socket = vim.fn.stdpath('run') .. '/host_nvim_' .. vim.fn.getpid() .. '.pipe'\n+  local remote_socket = ''\n+\n+  local find_socket_cmd = string.format(\n+    'ssh -t %s %s',\n+    address,\n+    vim.fn.shellescape(\n+      'nvim --headless --cmd \\'echo \"Free server: \" . v:servername . nr2char(10) | :qall\\''",
            "html_url": "https://github.com/neovim/neovim/pull/35569#discussion_r2312723899",
            "id": 2312723899,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6J2V27",
            "original_commit_id": "4ef865d5fabd7576e1b2a8cbeba3519cfbeb9b0a",
            "original_line": 367,
            "original_position": 147,
            "original_start_line": null,
            "path": "runtime/lua/vim/net/_ssh.lua",
            "position": 1,
            "pull_request_review_id": 3171897520,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312723899/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-01T01:17:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2312723899",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35569#discussion_r2313013524"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2313013524"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I was using lists initially but I switched to using strings for I reason I can't remember now while trying different things to make this work. I've changed the strings to lists now.",
            "commit_id": "d160447c31509f42d9fbcd5a7c4fef65381f982e",
            "created_at": "2025-09-01T06:35:20Z",
            "diff_hunk": "@@ -234,4 +238,198 @@ function M.get_hosts()\n   return M.parse_config(config_path)\n end\n \n+-- Prompts table obtained from https://github.com/amitds1997/remote-nvim.nvim/blob/9992c2fb8bf4f11aca2c8be8db286b506f92efcb/lua/remote-nvim/init.lua#L110-L145\n+local ssh_prompts = {\n+  {\n+    prompt = 'password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'continue connecting (yes/no/[fingerprint])?',\n+    type = 'plain',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password for',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Enter passphrase',\n+    type = 'secret',\n+    value = '',\n+  },\n+}\n+\n+local stdout = {} ---@type string[]\n+local processed_idx = 0\n+local job_id = 0\n+local is_remote_running = false\n+\n+local function _run_cmd(cmd, on_exit)\n+  stdout = {}\n+  processed_idx = 0\n+\n+  job_id = vim.fn.jobstart(cmd, {\n+    pty = true,\n+    on_stdout = function(_job_id, data, _event)\n+      data = data ---@type string[]\n+      for _, chunk in ipairs(data) do\n+        local line = chunk:gsub('\\r', '\\n')\n+        table.insert(stdout, line)\n+      end\n+\n+      local unprocessed_data = table.concat(vim.list_slice(stdout, processed_idx + 1))\n+      if unprocessed_data:find('Tunnel created successfully') then\n+        is_remote_running = true\n+      end\n+      for i, prompt in ipairs(ssh_prompts) do\n+        if unprocessed_data:find(vim.pesc(prompt.prompt)) then\n+          local resp = ''\n+          if prompt.value ~= '' then\n+            resp = prompt.value\n+          else\n+            local unprocessed_data_lines = vim.split(vim.trim(unprocessed_data), '\\n')\n+            local input_label =\n+              string.format('%s ', unprocessed_data_lines[#unprocessed_data_lines])\n+            if prompt.type == 'secret' then\n+              resp = vim.fn.inputsecret(input_label)\n+            else\n+              resp = vim.fn.input(input_label)\n+            end\n+            vim.cmd('redraw')\n+          end\n+\n+          ssh_prompts[i].value = resp\n+          processed_idx = #stdout\n+          vim.api.nvim_chan_send(job_id, resp .. '\\n')\n+        end\n+      end\n+    end,\n+    on_exit = function(chan_id, data, event)\n+      if on_exit ~= nil then\n+        on_exit(chan_id, data, event)\n+      end\n+    end,\n+  })\n+\n+  return job_id\n+end\n+\n+--- Starts a server on the remote machine via ssh and tunnels it to a local socket.\n+---@param address string\n+---@return string local_socket\n+function M.connect_to_address(address)\n+  if not address or address == '' then\n+    error('invalid SSH address given')\n+  end\n+\n+  if vim.fn.executable('ssh') ~= 1 then\n+    error('ssh not installed on system')\n+  end\n+\n+  -- Reset the prompts table\n+  for i, prompt in ipairs(ssh_prompts) do\n+    if prompt.value ~= '' then\n+      ssh_prompts[i].value = ''\n+    end\n+  end\n+\n+  local remote_has_nvim = false\n+  local check_cmd = string.format('ssh -t %s %s', address, vim.fn.shellescape('nvim --clean -v'))\n+  local check_on_exit = function(_job_id, _data, _event)\n+    local check_str = table.concat(stdout, '')\n+    if check_str:find('NVIM v.*') ~= nil then\n+      remote_has_nvim = true\n+    end\n+  end\n+  local check_id = _run_cmd(check_cmd, check_on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/35569#discussion_r2313013524",
            "id": 2313013524,
            "in_reply_to_id": 2312721810,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6J3ckU",
            "original_commit_id": "4ef865d5fabd7576e1b2a8cbeba3519cfbeb9b0a",
            "original_line": 356,
            "original_position": 132,
            "original_start_line": 345,
            "path": "runtime/lua/vim/net/_ssh.lua",
            "position": 1,
            "pull_request_review_id": 3172264128,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2313013524/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-01T06:35:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2313013524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35569#discussion_r2323731198"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2323731198"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`jobstart` doesn't treat string and lists the same way. From `:h jobstart`: \r\n\r\n```\r\nIf {cmd} is a List it runs directly (no 'shell').\r\nIf {cmd} is a String it runs in the 'shell'\r\n```\r\n\r\nThis list behavior was causing some issues with the command to find a free socket on the remote machine, so I've changed just that one to a string instead. \r\n",
            "commit_id": "d160447c31509f42d9fbcd5a7c4fef65381f982e",
            "created_at": "2025-09-04T23:15:37Z",
            "diff_hunk": "@@ -234,4 +238,198 @@ function M.get_hosts()\n   return M.parse_config(config_path)\n end\n \n+-- Prompts table obtained from https://github.com/amitds1997/remote-nvim.nvim/blob/9992c2fb8bf4f11aca2c8be8db286b506f92efcb/lua/remote-nvim/init.lua#L110-L145\n+local ssh_prompts = {\n+  {\n+    prompt = 'password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'continue connecting (yes/no/[fingerprint])?',\n+    type = 'plain',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password for',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Enter passphrase',\n+    type = 'secret',\n+    value = '',\n+  },\n+}\n+\n+local stdout = {} ---@type string[]\n+local processed_idx = 0\n+local job_id = 0\n+local is_remote_running = false\n+\n+local function _run_cmd(cmd, on_exit)\n+  stdout = {}\n+  processed_idx = 0\n+\n+  job_id = vim.fn.jobstart(cmd, {\n+    pty = true,\n+    on_stdout = function(_job_id, data, _event)\n+      data = data ---@type string[]\n+      for _, chunk in ipairs(data) do\n+        local line = chunk:gsub('\\r', '\\n')\n+        table.insert(stdout, line)\n+      end\n+\n+      local unprocessed_data = table.concat(vim.list_slice(stdout, processed_idx + 1))\n+      if unprocessed_data:find('Tunnel created successfully') then\n+        is_remote_running = true\n+      end\n+      for i, prompt in ipairs(ssh_prompts) do\n+        if unprocessed_data:find(vim.pesc(prompt.prompt)) then\n+          local resp = ''\n+          if prompt.value ~= '' then\n+            resp = prompt.value\n+          else\n+            local unprocessed_data_lines = vim.split(vim.trim(unprocessed_data), '\\n')\n+            local input_label =\n+              string.format('%s ', unprocessed_data_lines[#unprocessed_data_lines])\n+            if prompt.type == 'secret' then\n+              resp = vim.fn.inputsecret(input_label)\n+            else\n+              resp = vim.fn.input(input_label)\n+            end\n+            vim.cmd('redraw')\n+          end\n+\n+          ssh_prompts[i].value = resp\n+          processed_idx = #stdout\n+          vim.api.nvim_chan_send(job_id, resp .. '\\n')\n+        end\n+      end\n+    end,\n+    on_exit = function(chan_id, data, event)\n+      if on_exit ~= nil then\n+        on_exit(chan_id, data, event)\n+      end\n+    end,\n+  })\n+\n+  return job_id\n+end\n+\n+--- Starts a server on the remote machine via ssh and tunnels it to a local socket.\n+---@param address string\n+---@return string local_socket\n+function M.connect_to_address(address)\n+  if not address or address == '' then\n+    error('invalid SSH address given')\n+  end\n+\n+  if vim.fn.executable('ssh') ~= 1 then\n+    error('ssh not installed on system')\n+  end\n+\n+  -- Reset the prompts table\n+  for i, prompt in ipairs(ssh_prompts) do\n+    if prompt.value ~= '' then\n+      ssh_prompts[i].value = ''\n+    end\n+  end\n+\n+  local remote_has_nvim = false\n+  local check_cmd = string.format('ssh -t %s %s', address, vim.fn.shellescape('nvim --clean -v'))\n+  local check_on_exit = function(_job_id, _data, _event)\n+    local check_str = table.concat(stdout, '')\n+    if check_str:find('NVIM v.*') ~= nil then\n+      remote_has_nvim = true\n+    end\n+  end\n+  local check_id = _run_cmd(check_cmd, check_on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/35569#discussion_r2323731198",
            "id": 2323731198,
            "in_reply_to_id": 2312721810,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6KgVL-",
            "original_commit_id": "4ef865d5fabd7576e1b2a8cbeba3519cfbeb9b0a",
            "original_line": 356,
            "original_position": 132,
            "original_start_line": 345,
            "path": "runtime/lua/vim/net/_ssh.lua",
            "position": 1,
            "pull_request_review_id": 3187521288,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2323731198/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-04T23:15:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2323731198",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35569#discussion_r2325677399"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2325677399"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "nvm, got it working with a list as well.",
            "commit_id": "d160447c31509f42d9fbcd5a7c4fef65381f982e",
            "created_at": "2025-09-05T17:33:19Z",
            "diff_hunk": "@@ -234,4 +238,198 @@ function M.get_hosts()\n   return M.parse_config(config_path)\n end\n \n+-- Prompts table obtained from https://github.com/amitds1997/remote-nvim.nvim/blob/9992c2fb8bf4f11aca2c8be8db286b506f92efcb/lua/remote-nvim/init.lua#L110-L145\n+local ssh_prompts = {\n+  {\n+    prompt = 'password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'continue connecting (yes/no/[fingerprint])?',\n+    type = 'plain',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password for',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Password:',\n+    type = 'secret',\n+    value = '',\n+  },\n+  {\n+    prompt = 'Enter passphrase',\n+    type = 'secret',\n+    value = '',\n+  },\n+}\n+\n+local stdout = {} ---@type string[]\n+local processed_idx = 0\n+local job_id = 0\n+local is_remote_running = false\n+\n+local function _run_cmd(cmd, on_exit)\n+  stdout = {}\n+  processed_idx = 0\n+\n+  job_id = vim.fn.jobstart(cmd, {\n+    pty = true,\n+    on_stdout = function(_job_id, data, _event)\n+      data = data ---@type string[]\n+      for _, chunk in ipairs(data) do\n+        local line = chunk:gsub('\\r', '\\n')\n+        table.insert(stdout, line)\n+      end\n+\n+      local unprocessed_data = table.concat(vim.list_slice(stdout, processed_idx + 1))\n+      if unprocessed_data:find('Tunnel created successfully') then\n+        is_remote_running = true\n+      end\n+      for i, prompt in ipairs(ssh_prompts) do\n+        if unprocessed_data:find(vim.pesc(prompt.prompt)) then\n+          local resp = ''\n+          if prompt.value ~= '' then\n+            resp = prompt.value\n+          else\n+            local unprocessed_data_lines = vim.split(vim.trim(unprocessed_data), '\\n')\n+            local input_label =\n+              string.format('%s ', unprocessed_data_lines[#unprocessed_data_lines])\n+            if prompt.type == 'secret' then\n+              resp = vim.fn.inputsecret(input_label)\n+            else\n+              resp = vim.fn.input(input_label)\n+            end\n+            vim.cmd('redraw')\n+          end\n+\n+          ssh_prompts[i].value = resp\n+          processed_idx = #stdout\n+          vim.api.nvim_chan_send(job_id, resp .. '\\n')\n+        end\n+      end\n+    end,\n+    on_exit = function(chan_id, data, event)\n+      if on_exit ~= nil then\n+        on_exit(chan_id, data, event)\n+      end\n+    end,\n+  })\n+\n+  return job_id\n+end\n+\n+--- Starts a server on the remote machine via ssh and tunnels it to a local socket.\n+---@param address string\n+---@return string local_socket\n+function M.connect_to_address(address)\n+  if not address or address == '' then\n+    error('invalid SSH address given')\n+  end\n+\n+  if vim.fn.executable('ssh') ~= 1 then\n+    error('ssh not installed on system')\n+  end\n+\n+  -- Reset the prompts table\n+  for i, prompt in ipairs(ssh_prompts) do\n+    if prompt.value ~= '' then\n+      ssh_prompts[i].value = ''\n+    end\n+  end\n+\n+  local remote_has_nvim = false\n+  local check_cmd = string.format('ssh -t %s %s', address, vim.fn.shellescape('nvim --clean -v'))\n+  local check_on_exit = function(_job_id, _data, _event)\n+    local check_str = table.concat(stdout, '')\n+    if check_str:find('NVIM v.*') ~= nil then\n+      remote_has_nvim = true\n+    end\n+  end\n+  local check_id = _run_cmd(check_cmd, check_on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/35569#discussion_r2325677399",
            "id": 2325677399,
            "in_reply_to_id": 2312721810,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6KnwVX",
            "original_commit_id": "4ef865d5fabd7576e1b2a8cbeba3519cfbeb9b0a",
            "original_line": 356,
            "original_position": 132,
            "original_start_line": 345,
            "path": "runtime/lua/vim/net/_ssh.lua",
            "position": 1,
            "pull_request_review_id": 3190268833,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2325677399/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-05T17:33:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2325677399",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "~It seems like the tests are failing because there is no `~/.ssh/config` file. Should I update the code to not throw an error if it fails to read the config or create a temporary file for the purposes of the test?~\r\n\r\nJust added a check for whether the file is readable using `vim.fn.filereadable()` 😅",
            "created_at": "2025-08-31T18:42:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/35569#issuecomment-3240334809",
            "id": 3240334809,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35569",
            "node_id": "IC_kwDOAPphoM7BI5XZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3240334809/reactions"
            },
            "updated_at": "2025-08-31T21:15:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3240334809",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Here is a video showcasing the `connect ssh://` feature. `siddhant@localhost` is directed to a Linux VM running on VirtualBox. Sorry for the flickering, couldn't figure out how to screengrab properly.\r\n\r\nhttps://github.com/user-attachments/assets/5a1bc109-3298-4873-845a-0f9424fe7ca0\r\n\r\n",
            "created_at": "2025-08-31T19:21:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/35569#issuecomment-3240357196",
            "id": 3240357196,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35569",
            "node_id": "IC_kwDOAPphoM7BI-1M",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3240357196/reactions"
            },
            "updated_at": "2025-08-31T19:21:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3240357196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Linter is failing with:\r\n\r\n```\r\n/home/runner/work/neovim/neovim/runtime/lua/vim/net/_ssh.lua:294:17: value assigned to variable resp is unused\r\n```\r\n\r\nbut `resp` is being used a few lines later here:\r\n\r\n```lua\r\n          ssh_prompts[i].value = resp\r\n          processed_idx = #stdout\r\n          vim.api.nvim_chan_send(job_id, resp .. '\\n')\r\n```\r\n\r\nNot sure why it's failing",
            "created_at": "2025-09-03T11:28:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/35569#issuecomment-3248844382",
            "id": 3248844382,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35569",
            "node_id": "IC_kwDOAPphoM7BpW5e",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3248844382/reactions"
            },
            "updated_at": "2025-09-03T11:28:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3248844382",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "For a test, I have currently thought of this: calling `:connect ssh://localhost' should have one of three possible results (barring errors): \r\n\r\n1. It prompts the user for a password\r\n2. It asks the user whether they would like to verify the keyring\r\n3. It connects to a server running on localhost\r\n\r\nSo, we call `:connect ...` and then test for each of the separate possibilities (simply quit the command if it asks for any prompts).\r\nNot sure how we would check for the error situations though (ssh not being installed)\r\n\r\nThoughts @justinmk ?",
            "created_at": "2025-09-03T14:41:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/35569#issuecomment-3249555287",
            "id": 3249555287,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35569",
            "node_id": "IC_kwDOAPphoM7BsEdX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3249555287/reactions"
            },
            "updated_at": "2025-09-03T14:41:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3249555287",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I didn't like how the command to find a free socket on the remote machine was working before, felt a bit flaky (there were some false positive possibilities), so I've changed it. The current method will enforce a minimum version of Neovim on the remote machine, I'm not sure if this is a problem.",
            "created_at": "2025-09-04T23:13:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/35569#issuecomment-3256232363",
            "id": 3256232363,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35569",
            "node_id": "IC_kwDOAPphoM7CFimr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3256232363/reactions"
            },
            "updated_at": "2025-09-04T23:16:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3256232363",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've added a few basic test which does validation on the address passed to `ssh.connect_to_host()` (can't be nil, cant be empty, can't contain spaces)",
            "created_at": "2025-09-05T17:37:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/35569#issuecomment-3259237082",
            "id": 3259237082,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35569",
            "node_id": "IC_kwDOAPphoM7CRALa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3259237082/reactions"
            },
            "updated_at": "2025-09-05T17:37:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3259237082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Not sure how we would check for the error situations though (ssh not being installed)\r\n\r\nExercising the codepaths is the first priority. Exercising failure modes is also important, but can be a later step.",
            "created_at": "2025-09-07T22:12:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/35569#issuecomment-3264104309",
            "id": 3264104309,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35569",
            "node_id": "IC_kwDOAPphoM7Cjkd1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3264104309/reactions"
            },
            "updated_at": "2025-09-07T22:12:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3264104309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35569/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35569/commits",
    "created_at": "2025-08-31T18:07:38Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35569.diff",
    "draft": true,
    "head": {
        "label": "siddhantdev:ssh-connect",
        "ref": "ssh-connect",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/siddhantdev/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/siddhantdev/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/siddhantdev/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/siddhantdev/neovim/branches{/branch}",
            "clone_url": "https://github.com/siddhantdev/neovim.git",
            "collaborators_url": "https://api.github.com/repos/siddhantdev/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/siddhantdev/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/siddhantdev/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/siddhantdev/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/siddhantdev/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/siddhantdev/neovim/contributors",
            "created_at": "2024-12-25T05:21:52Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/siddhantdev/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/siddhantdev/neovim/downloads",
            "events_url": "https://api.github.com/repos/siddhantdev/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/siddhantdev/neovim/forks",
            "full_name": "siddhantdev/neovim",
            "git_commits_url": "https://api.github.com/repos/siddhantdev/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/siddhantdev/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/siddhantdev/neovim/git/tags{/sha}",
            "git_url": "git://github.com/siddhantdev/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/siddhantdev/neovim/hooks",
            "html_url": "https://github.com/siddhantdev/neovim",
            "id": 908089530,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/siddhantdev/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/siddhantdev/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/siddhantdev/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/siddhantdev/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/siddhantdev/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/siddhantdev/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/siddhantdev/neovim/merges",
            "milestones_url": "https://api.github.com/repos/siddhantdev/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDONiBYug",
            "notifications_url": "https://api.github.com/repos/siddhantdev/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/siddhantdev/neovim/pulls{/number}",
            "pushed_at": "2025-09-08T05:28:36Z",
            "releases_url": "https://api.github.com/repos/siddhantdev/neovim/releases{/id}",
            "size": 337206,
            "ssh_url": "git@github.com:siddhantdev/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/siddhantdev/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/siddhantdev/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/siddhantdev/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/siddhantdev/neovim/subscription",
            "svn_url": "https://github.com/siddhantdev/neovim",
            "tags_url": "https://api.github.com/repos/siddhantdev/neovim/tags",
            "teams_url": "https://api.github.com/repos/siddhantdev/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/siddhantdev/neovim/git/trees{/sha}",
            "updated_at": "2025-08-28T19:31:55Z",
            "url": "https://api.github.com/repos/siddhantdev/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "d160447c31509f42d9fbcd5a7c4fef65381f982e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
            "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
            "followers_url": "https://api.github.com/users/siddhantdev/followers",
            "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
            "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/siddhantdev",
            "id": 68201519,
            "login": "siddhantdev",
            "node_id": "MDQ6VXNlcjY4MjAxNTE5",
            "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
            "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
            "repos_url": "https://api.github.com/users/siddhantdev/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/siddhantdev",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35569",
    "id": 2787958334,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35569",
    "labels": [
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "locked": false,
    "merge_commit_sha": "2e21c73d032bb17b673ecc7c72055da9dab58e8a",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6mLN4-",
    "number": 35569,
    "patch_url": "https://github.com/neovim/neovim/pull/35569.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35569/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/d160447c31509f42d9fbcd5a7c4fef65381f982e",
    "title": "feat: integrate ssh into :connect",
    "updated_at": "2025-09-07T22:12:21Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35569",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
        "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
        "followers_url": "https://api.github.com/users/siddhantdev/followers",
        "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
        "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/siddhantdev",
        "id": 68201519,
        "login": "siddhantdev",
        "node_id": "MDQ6VXNlcjY4MjAxNTE5",
        "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
        "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
        "repos_url": "https://api.github.com/users/siddhantdev/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/siddhantdev",
        "user_view_type": "public"
    }
}