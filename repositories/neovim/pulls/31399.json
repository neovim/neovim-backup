{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31399/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31399/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31399"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31399"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31399/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/e5901549faa4b43a81b99572b2461529d8106a0a"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6078,
            "forks_count": 6078,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1941,
            "open_issues_count": 1941,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-05-13T02:35:42Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 322833,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 89461,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-05-13T02:46:10Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 89461,
            "watchers_count": 89461,
            "web_commit_signoff_required": false
        },
        "sha": "50c200fcd4749f98ebf7e9f55fddb10f99085327",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "# Task List\r\n\r\n- [x] A static image you can place within neovim (supporting just PNG or whatever works by default in terminals)\r\n    ```lua\r\n    -- Supports loading PNG images into memory\r\n    local img = vim.ui.img.load(\"/path/to/img.png\")\r\n\r\n    -- Supports lazy-loading image, deferring to a provider\r\n    local img = vim.ui.img.new({ filename = \"/path/to/img.png\" })\r\n\r\n    -- Supports specifying an image and explicitly providing the data\r\n    local img = vim.ui.img.new({ data = \"...\", filename = \"/path/to/img.png\" })\r\n\r\n    -- Once created, can be shown, returning an id\r\n    -- tied to the displayed image\r\n    local id = img:show() -- Places in top-left of editor with default size\r\n    local id = img:show({ pos = { x = 4, y = 8 })\r\n    local id = img:show({ relative = \"cursor\" })\r\n    ```\r\n- [x] Support deleting the image placed within neovim\r\n    ```lua\r\n    local img = vim.ui.img.new({ filename = \"/path/to/img.png\" })\r\n    local id = img:show()\r\n\r\n    -- Supports hiding image by the id returned from displaying it\r\n    img:hide(id)\r\n\r\n    -- Supports hiding all places where the image was displayed\r\n    img:hide()\r\n    ```\r\n- [x] Dynamically resize/move an image\r\n    ```lua\r\n    local img = vim.ui.img.new({ filename = \"/path/to/img.png\" })\r\n    local id = img:show({ pos = { x = 1, y = 2, unit = \"cell\" } })\r\n\r\n    -- Supports updating a displayed image with a new position\r\n    img:update(id, { pos = { x = 5, y = 6, unit = \"cell\" } })\r\n\r\n    -- Supports resizing a displayed image\r\n    img:update(id, { size = { width = 10, height = 5, unit = \"cell\" } })\r\n    ```\r\n- [x] Abstraction for 3rd parties to support images in neovim\r\n    ```lua\r\n    -- Providers implement a small API to support showing and hiding images\r\n    vim.ui.img.providers['neovide'] = vim.ui.img.providers.new({\r\n        ---@param img vim.ui.Image image data container to display\r\n        ---@param opts? vim.ui.img.Opts specification of how to display the image\r\n        ---@return integer id unique identifier connected to the displayed image (not vim.ui.Image)\r\n        show = function(img, opts)\r\n            -- Implement here\r\n        end,\r\n\r\n        ---@param ids integer[] list of displayed image ids to hide\r\n        hide = function(ids)\r\n            -- Implement here\r\n        end,\r\n    })\r\n\r\n    -- Load an image to display, nothing different here\r\n    local img = vim.ui.img.load(\"/path/to/img.png\")\r\n\r\n    -- Use the custom provider either by passing it by name\r\n    -- or directly passing in the provider instance itself\r\n    local id = img:show(img, { provider = 'neovide' })\r\n    img:hide(id, { provider = vim.ui.img.providers['neovide'] })\r\n    ```\r\n- [ ] Injection of an image into a buffer within neovim (tracking its movement properly, possibly through the use of extmarks); this involves reflowing text around the image (in my mind) versus just covering it up or placing behind it. Think to the examples of images within markdown/org documents but with images as first-class citizens\r\n\r\n## Out of Scope for this PR\r\n\r\n1. Multiple image type support (bmp, jpg at least) within neovim (seems like the common way is to farm out to imagemagick, which I'm not a fan of, but seems like what we'd have to do first)\r\n2. Video/gif support (there are reasons why this would be neat, but not a dealbreaker if we want to exclude this from neovim core)\r\n\r\n---\r\n\r\n# OLDER INFORMATION\r\n\r\nAlright, let's try this again without the massive amount of pull requests. 😄 Each commit here should be a standalone change, and I'll document the processes here.\r\n\r\nThis is geared towards tackling #30889, specifically on supporting\r\n\r\n1. Ability to load an image into memory\r\n2. Display an image with absolute coordinates\r\n3. Support different backends for rendering images such as iterm2 and kitty\r\n4. Smartly detect the type(s) of backend graphics supported\r\n\r\nThings for later PRs would include\r\n\r\n1. Inline image support (attach to a buffer, reflow text around it)\r\n2. Alternative image formats (I think PNG is what is supported right now?)\r\n3. Video feeds (more complex, more limited backend support)\r\n\r\n## Breakdown of commits\r\n\r\n### 1. Loading an image into memory\r\n\r\nImplements `vim.img.load()` to load from a file or wrap base64 encoded bytes as a `vim.img.Image` instance.\r\n\r\n### 2. Implement skeleton of vim.img.show() without backends\r\n\r\nImplements the skeleton of `vim.img.show()` with any backend implemented.\r\n\r\n### 3. Implement vim.img._terminal to support basic functionality needed for backends\r\n\r\nImplements a `vim.img._terminal` module that supports writing to the tty tied to neovim as well as basic operations to manipulate the cursor, needed for backend implementations.\r\n\r\n### 4. Implement `vim.img.Image` method `for_each_chunk` to streamline backend processing\r\n\r\nImplements a method `image:for_each_chunk` for instances of `vim.img.Image`. This method streamlines chunked iteration of image bytes, which is important when working with ssh or tmux and a protocol that supports chunked image rendering such as `iterm2` or `kitty`.\r\n\r\n### 5. Implement iterm2 backend\r\n\r\nImplements the iterm2 backend, supporting both iTerm 3.5+ support for multipart images, and falling back to older protocol that sends the entire image at once, which is needed for support on other terminals such as WezTerm.\r\n\r\n### 6. Implement kitty backend\r\n\r\nImplements the kitty graphics protocol as a backend, using kitty's chunked image rendering, which should work within tmux and ssh if we keep the chunks small enough.\r\n\r\n### 7. Implement `vim.img.protocol()` to detect preferred graphics protocol\r\n\r\nImplements `vim.img.protocol()` that can be used to detect the preferred graphics protocol.\r\n\r\nThis is a reverse-engineered copy of how `timg` implements graphics protocol support, and relies on a couple of terminal queries, hence we implement `vim.img._terminal.query()` and `vim.img._terminal.graphics.detect()` to support figuring out if the terminal supports iterm2, kitty, or sixel protocols and mirrors the logic from `timg`.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1864093226"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864093226"
                }
            },
            "author_association": "MEMBER",
            "body": "Imo it would also be nice to be able to do something like this:\r\n\r\n```lua\r\nlocal image = vim.img.load({\r\n    filename = \"/Users/senkwich/Pictures/org-roam-logo.png\",\r\n})\r\n\r\nimage:show({\r\n    pos = { row = 8, col = 8 }, \r\n    backend = \"iterm2\",\r\n})\r\n```\r\n\r\nwhat do you think?",
            "commit_id": "33ee5810ddf72d6cb9ec0497af01e3d7003c9963",
            "created_at": "2024-11-30T05:26:53Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1864093226",
            "id": 1864093226,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vG84q",
            "original_commit_id": "33ee5810ddf72d6cb9ec0497af01e3d7003c9963",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 1,
            "pull_request_review_id": 2470715000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864093226/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-11-30T05:26:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864093226",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1864321758"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864321758"
                }
            },
            "author_association": "NONE",
            "body": "> Imo it would also be nice to be able to do something like this:\n> \n> ```lua\n> local image = vim.img.load({\n>     filename = \"/Users/senkwich/Pictures/org-roam-logo.png\",\n> })\n> \n> image:show({\n>     pos = { row = 8, col = 8 }, \n>     backend = \"iterm2\",\n> })\n> ```\n> \n> what do you think?\n\nSure, seems fine to me. It'd defer to `vim.img.show` underneath. Or we move the logic of show to it and call out to it within show. ",
            "commit_id": "33ee5810ddf72d6cb9ec0497af01e3d7003c9963",
            "created_at": "2024-11-30T16:43:48Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1864321758",
            "id": 1864321758,
            "in_reply_to_id": 1864093226,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vH0re",
            "original_commit_id": "33ee5810ddf72d6cb9ec0497af01e3d7003c9963",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 1,
            "pull_request_review_id": 2470949395,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864321758/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-11-30T16:43:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864321758",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1864375317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864375317"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  local handle = assert(io.open(M.tty_name(), \"w\"))\r\n```\r\n\r\nDoes the same since the return type on error is `{ nil, \"%s: No such file or directory\", 2 }`.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-11-30T17:43:50Z",
            "diff_hunk": "@@ -0,0 +1,133 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = \"\\x07\", -- aka ^G\n+  ESC = \"\\x1B\", -- aka ^[ aka \\033\n+}\n+\n+---Retrieve the tty name used by the editor.\n+---\n+---E.g. /dev/ttys008\n+---@return string|nil\n+local function get_tty_name()\n+  if vim.fn.has(\"win32\") == 1 then\n+    -- On windows, we use \\\\.\\CON for reading and writing\n+    return \"\\\\\\\\.\\\\CON\"\n+  else\n+    -- Linux/Mac: Use `tty` command, which reads the terminal name\n+    --            in the form of something like /dev/ttys008\n+    local handle = io.popen(\"tty 2>/dev/null\")\n+    if not handle then return nil end\n+    local result = handle:read(\"*a\")\n+    handle:close()\n+    result = vim.fn.trim(result)\n+    if result == \"\" then return nil end\n+    return result\n+  end\n+end\n+\n+---Returns the name of the tty associated with the terminal.\n+---@return string\n+function M.tty_name()\n+  if not M.__tty_name then\n+    M.__tty_name = assert(get_tty_name(), \"failed to read editor tty name\")\n+  end\n+\n+  return M.__tty_name\n+end\n+\n+---Writes data to the editor tty.\n+---@param ... string|number\n+function M.write(...)\n+  local handle = io.open(M.tty_name(), \"w\")\n+  if not handle then\n+    error(\"failed to open \" .. M.tty_name())\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1864375317",
            "id": 1864375317,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vIBwV",
            "original_commit_id": "33ee5810ddf72d6cb9ec0497af01e3d7003c9963",
            "original_line": 47,
            "original_position": 47,
            "original_start_line": 44,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2470994902,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864375317/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-30T17:44:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1864375317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865785053"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865785053"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim.ui.img` seems like the right place for this (else why do we have `vim.ui`? :)",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T12:44:17Z",
            "diff_hunk": "@@ -31,6 +31,7 @@ for k, v in pairs({\n   loader = true,\n   func = true,\n   F = true,\n+  img = true,",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865785053",
            "id": 1865785053,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vNZ7d",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 34,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2472597418,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865785053/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T12:44:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865785053",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865788219"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865788219"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a need for this to be defined on `vim`? usually code should just `require()` stuff, just-in-time if it wants \"lazy\" behavior.\r\n\r\n `vim._defer_require` is for things that we actually need on `vim.*`.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T12:46:42Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+local img = vim._defer_require('vim.img', {\n+  _backend = ..., --- @module 'vim.img._backend'\n+  _detect = ..., --- @module 'vim.img._detect'\n+  _image = ..., --- @module 'vim.img._image'\n+  _terminal = ..., --- @module 'vim.img._terminal'",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865788219",
            "id": 1865788219,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vNas7",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/img.lua",
            "position": null,
            "pull_request_review_id": 2472602585,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865788219/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T12:46:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865788219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865791901"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865791901"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's try to orient around \"UI\", not \"terminal\", where possible. This might only support terminals for now. But there is really no need to mention \"neovim\" etc here anyway.\r\n\r\n```suggestion\r\n--- Displays an image. Currently only supports the |TUI|.\r\n```",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T12:49:23Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+local img = vim._defer_require('vim.img', {\n+  _backend = ..., --- @module 'vim.img._backend'\n+  _detect = ..., --- @module 'vim.img._detect'\n+  _image = ..., --- @module 'vim.img._image'\n+  _terminal = ..., --- @module 'vim.img._terminal'\n+})\n+\n+---Loads an image into memory, returning a wrapper around the image.\n+---\n+---Accepts `data` as base64-encoded bytes, or a `filename` that will be loaded.\n+---@param opts {data?:string, filename?:string}\n+---@return vim.img.Image\n+function img.load(opts)\n+  return img._image:new(opts)\n+end\n+\n+img.protocol = (function()\n+  ---@class vim.img.Protocol 'iterm2'|'kitty'|'sixel'\n+\n+  ---@type vim.img.Protocol|nil\n+  local protocol = nil\n+\n+  local loaded = false\n+\n+  ---Determines the preferred graphics protocol to use by default.\n+  ---\n+  ---@return vim.img.Protocol|nil\n+  return function()\n+    if not loaded then\n+      local graphics = img._detect().graphics\n+\n+      ---@diagnostic disable-next-line:cast-type-mismatch\n+      ---@cast graphics vim.img.Protocol|nil\n+      protocol = graphics\n+\n+      loaded = true\n+    end\n+\n+    return protocol\n+  end\n+end)()\n+\n+---@class vim.img.Opts: vim.img.Backend.RenderOpts\n+---@field backend? vim.img.Protocol|vim.img.Backend\n+\n+---Displays the image within the terminal used by neovim.",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865791901",
            "id": 1865791901,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vNbmd",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": null,
            "path": "runtime/lua/vim/img.lua",
            "position": null,
            "pull_request_review_id": 2472608213,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865791901/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T12:50:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865791901",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865796429"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865796429"
                }
            },
            "author_association": "MEMBER",
            "body": "would \"provider\" fit here? that aligns with our existing vocabulary. or \"strategy\", I guess.\r\n```suggestion\r\n---@class vim.img.Provider\r\n```",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T12:52:55Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+---@class vim.img.Backend",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865796429",
            "id": 1865796429,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vNctN",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_backend.lua",
            "position": null,
            "pull_request_review_id": 2472615517,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865796429/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T12:52:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865796429",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865801668"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865801668"
                }
            },
            "author_association": "MEMBER",
            "body": "should this live in `runtime/lua/vim/termcap.lua` ? cc @gpanders ",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T12:56:29Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865801668",
            "id": 1865801668,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vNd_E",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": 1,
            "pull_request_review_id": 2472623185,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865801668/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-12-02T12:56:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865801668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865804083"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865804083"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a `on_xx` name that makes sense here, instead of `cb` / `callback` (which are discouraged)\r\n\r\n```suggestion\r\nfunction M:load_from_file(filename, on_load)\r\n```",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T12:58:09Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)\n+  opts = opts or {}\n+\n+  -- Chunk size, defaulting to 4k\n+  local chunk_size = opts.size or 4096\n+\n+  local data = self.data\n+  if not data then\n+    return\n+  end\n+\n+  local pos = 1\n+  local len = string.len(data)\n+  while pos <= len do\n+    -- Get our next chunk from [pos, pos + chunk_size)\n+    local end_pos = pos + chunk_size - 1\n+    local chunk = data:sub(pos, end_pos)\n+\n+    -- If we have a chunk available, invoke our callback\n+    if string.len(chunk) > 0 then\n+      local has_more = end_pos + 1 <= len\n+      pcall(f, chunk, pos, has_more)\n+    end\n+\n+    pos = end_pos + 1\n+  end\n+end\n+\n+---Displays the image within the terminal used by neovim.\n+---@param opts? vim.img.Opts\n+function M:show(opts)\n+  vim.img.show(self, opts)\n+end\n+\n+---Loads data for an image from a file, replacing any existing data.\n+---If a callback provided, will load asynchronously; otherwise, is blocking.\n+---@param filename string\n+---@param cb fun(err:string|nil, image:vim.img.Image|nil)\n+---@overload fun(filename:string):vim.img.Image\n+function M:load_from_file(filename, cb)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865804083",
            "id": 1865804083,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vNekz",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": null,
            "pull_request_review_id": 2472626732,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 2,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865804083/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T12:58:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865804083",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865806661"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865806661"
                }
            },
            "author_association": "MEMBER",
            "body": "why is this code not in `runtime/lua/vim/img.lua` ?",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T12:59:57Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865806661",
            "id": 1865806661,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vNfNF",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 1,
            "pull_request_review_id": 2472630752,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865806661/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-12-02T12:59:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865806661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1865811123"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865811123"
                }
            },
            "author_association": "MEMBER",
            "body": "RFC: should we use pixels consistently, and maybe provide a `pixels_to_cells` util function (and `cells_to_pixels`)?\r\n\r\nAfter all, even for `crop` I would guess it will be very common to want to decide the crop dimensions based on cells. ",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T13:03:07Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+---@class vim.img.Backend\n+---@field render fun(image:vim.img.Image, opts?:vim.img.Backend.RenderOpts)\n+\n+---@class vim.img.Backend.RenderOpts\n+---@field crop? {x:integer, y:integer, width:integer, height:integer} units are pixels\n+---@field pos? {row:integer, col:integer} units are cells\n+---@field size? {width:integer, height:integer} units are cells",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1865811123",
            "id": 1865811123,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vNgSz",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 5,
            "path": "runtime/lua/vim/img/_backend.lua",
            "position": null,
            "pull_request_review_id": 2472637581,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865811123/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-02T13:03:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1865811123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866064296"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866064296"
                }
            },
            "author_association": "MEMBER",
            "body": "`:help dev-patterns`\r\n\r\n```suggestion\r\nfunction M:for_each_chunk(opts, f)\r\n```\r\n\r\nIf you want to support optional `opts`, make it an \"overload\".",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T15:32:12Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866064296",
            "id": 1866064296,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vOeGo",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": null,
            "pull_request_review_id": 2473041675,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866064296/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:33:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866064296",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866073747"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866073747"
                }
            },
            "author_association": "MEMBER",
            "body": "normally new() would not be an instance/self method, see e.g. `Iter.new` https://github.com/neovim/neovim/blob/c7ec010ade0832e43c7a319ea69fae642771479d/runtime/lua/vim/iter.lua#L1018",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T15:37:55Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866073747",
            "id": 1866073747,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vOgaT",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 10,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": null,
            "pull_request_review_id": 2473057382,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866073747/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:37:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866073747",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866076814"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866076814"
                }
            },
            "author_association": "MEMBER",
            "body": "nit: probably should be an error? or this should force it to load?\r\n\r\nor alternatively, this could check `size() == 0`, then we don't need `is_loaded()` (until proven otherwise)",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T15:39:06Z",
            "diff_hunk": "@@ -0,0 +1,108 @@\n+---@class vim.img.KittyBackend: vim.img.Backend\n+local M = {}\n+\n+---For kitty, we need to write an image in chunks\n+---\n+---Graphics codes are in this form:\n+---\n+---    <ESC>_G<control data>;<payload><ESC>\\\n+---\n+---To stream data for a PNG, we specify the format `f=100`.\n+---\n+---To simultaneously transmit and display an image, we use `a=T`.\n+---\n+---Chunking data (such as from over a network) requires the\n+---specification of `m=0|1`, where all chunks must have a\n+---value of `1` except the very last chunk.\n+---@param data string\n+local function write_seq(data)\n+  local terminal = require('vim.img._terminal')\n+\n+  terminal.write(terminal.code.ESC .. '_G') -- Begin sequence\n+  terminal.write(data) -- Primary data\n+  terminal.write(terminal.code.ESC .. '\\\\') -- End sequence\n+end\n+\n+---Builds a header table of key value pairs.\n+---@param opts vim.img.Backend.RenderOpts\n+---@return table<string, string>\n+local function make_header(opts)\n+  ---@type table<string, string>\n+  local header = {}\n+\n+  header['a'] = 'T'\n+  header['f'] = '100'\n+\n+  local crop = opts.crop\n+  local size = opts.size\n+\n+  if crop then\n+    header['x'] = tostring(crop.x)\n+    header['y'] = tostring(crop.y)\n+    header['w'] = tostring(crop.width)\n+    header['h'] = tostring(crop.height)\n+  end\n+\n+  if size then\n+    header['c'] = tostring(size.width)\n+    header['r'] = tostring(size.height)\n+  end\n+\n+  return header\n+end\n+\n+---@param image vim.img.Image\n+---@param opts vim.img.Backend.RenderOpts\n+local function write_multipart_image(image, opts)\n+  image:for_each_chunk(function(chunk, pos, has_more)\n+    local data = {}\n+\n+    -- If at the beginning of our image, mark as a PNG to be\n+    -- transmitted and displayed immediately\n+    if pos == 1 then\n+      -- Add an entry in our data to write out to the terminal\n+      -- that is \"k=v,\" for the key-value entries from the header\n+      for key, value in pairs(make_header(opts)) do\n+        table.insert(data, key .. '=' .. value .. ',')\n+      end\n+    end\n+\n+    -- If we are still sending chunks and not at the end\n+    if has_more then\n+      table.insert(data, 'm=1')\n+    else\n+      table.insert(data, 'm=0')\n+    end\n+\n+    -- If we have a chunk available, write it\n+    if string.len(chunk) > 0 then\n+      table.insert(data, ';')\n+      table.insert(data, chunk)\n+    end\n+\n+    write_seq(table.concat(data))\n+  end)\n+end\n+\n+---@param image vim.img.Image\n+---@param opts? vim.img.Backend.RenderOpts\n+function M.render(image, opts)\n+  local terminal = require('vim.img._terminal')\n+\n+  if not image:is_loaded() then\n+    return",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866076814",
            "id": 1866076814,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vOhKO",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 93,
            "original_position": 93,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_backend/kitty.lua",
            "position": null,
            "pull_request_review_id": 2473061654,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866076814/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:41:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866076814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866083848"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866083848"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we return an iterator instead (`:help iterator`)? That is more idiomatic, and composes with `vim.iter`, `ipairs()`, etc.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T15:42:49Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866083848",
            "id": 1866083848,
            "in_reply_to_id": 1866064296,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vOi4I",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": null,
            "pull_request_review_id": 2473072508,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866083848/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:43:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866083848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866086124"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866086124"
                }
            },
            "author_association": "NONE",
            "body": "> RFC: should we use pixels consistently, and maybe provide a pixels_to_cells util function (and cells_to_pixels)?\r\n\r\nI saw something like that in `image.nvim`, so it'd be a good idea. I wasn't happy that the units were different between crop and the others. For me personally, I don't know how I'd think of crop in cells, though, as it's in relation to the raw image file whereas `pos` and `size` are in relation to placement on top of neovim.\r\n\r\nSo two different coordinate spaces; however, happy to switch `crop` to be the same units",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T15:44:10Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+---@class vim.img.Backend\n+---@field render fun(image:vim.img.Image, opts?:vim.img.Backend.RenderOpts)\n+\n+---@class vim.img.Backend.RenderOpts\n+---@field crop? {x:integer, y:integer, width:integer, height:integer} units are pixels\n+---@field pos? {row:integer, col:integer} units are cells\n+---@field size? {width:integer, height:integer} units are cells",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866086124",
            "id": 1866086124,
            "in_reply_to_id": 1865811123,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vOjbs",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 5,
            "path": "runtime/lua/vim/img/_backend.lua",
            "position": null,
            "pull_request_review_id": 2473075922,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866086124/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-02T15:44:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866086124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866099662"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866099662"
                }
            },
            "author_association": "NONE",
            "body": "Just a separation of responsibilities to different files. Can merge it into `img.lua` if that's a better practice.",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:51:46Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866099662",
            "id": 1866099662,
            "in_reply_to_id": 1865806661,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vOmvO",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 1,
            "pull_request_review_id": 2473095971,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866099662/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-12-02T15:51:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866099662",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866104355"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866104355"
                }
            },
            "author_association": "NONE",
            "body": "Happy for it to live wherever you'd like. It felt odd to have this live under `img`, and I was unaware of `termcap.lua`. Let me know what you'd like to do.\r\n\r\nAlso happy to break out this logic to a separate PR if we want to review and merge this logic separately. It'd need to be handled prior to the image work, though. Or it can live in this PR.",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-02T15:54:29Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866104355",
            "id": 1866104355,
            "in_reply_to_id": 1865801668,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5vOn4j",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": 1,
            "pull_request_review_id": 2473102898,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866104355/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-12-02T15:54:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866104355",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866112258"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866112258"
                }
            },
            "author_association": "NONE",
            "body": "@justinmk sure, happy to put it there. Would you like me to refactor this PR to have it placed under the namespace?",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T15:59:10Z",
            "diff_hunk": "@@ -31,6 +31,7 @@ for k, v in pairs({\n   loader = true,\n   func = true,\n   F = true,\n+  img = true,",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866112258",
            "id": 1866112258,
            "in_reply_to_id": 1865785053,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vOp0C",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 34,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2473115154,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866112258/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:59:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866112258",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866113370"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866113370"
                }
            },
            "author_association": "NONE",
            "body": "Cool, I wasn't sure the best practice here. I just looked at how `vim.lsp` was done and copied it. So I can switch to regular `require` instead.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T15:59:48Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+local img = vim._defer_require('vim.img', {\n+  _backend = ..., --- @module 'vim.img._backend'\n+  _detect = ..., --- @module 'vim.img._detect'\n+  _image = ..., --- @module 'vim.img._image'\n+  _terminal = ..., --- @module 'vim.img._terminal'",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866113370",
            "id": 1866113370,
            "in_reply_to_id": 1865788219,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vOqFa",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/img.lua",
            "position": null,
            "pull_request_review_id": 2473116850,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866113370/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T15:59:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866113370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866116472"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866116472"
                }
            },
            "author_association": "NONE",
            "body": "@justinmk yeah, I can do that. Was unaware of neovim having an iterator, so it'll be nice to get a feel for how that works.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T16:01:46Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866116472",
            "id": 1866116472,
            "in_reply_to_id": 1866064296,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vOq14",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": null,
            "pull_request_review_id": 2473121745,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866116472/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-02T16:01:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866116472",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1866124325"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866124325"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe we can punt on this for now, because these fields are dict-like. But there is still some ambiguity with the current key names (`crop.width` is pixels, but `size.width` is cells).\r\n\r\nInstead, we could future-proof this by requiring an explicit `unit` field (note: below is pseudocode, I didn't check LuaLS syntax):\r\n\r\n```\r\n---@class img.Pos\r\n---@field unit:string\r\n---@field x:integer\r\n---@field y:integer\r\n\r\n---@class img.Region\r\n---@field pos1: img.Pos\r\n---@field pos2: img.Pos\r\n\r\n---@field crop? img.Region\r\n---@field pos?  img.Pos\r\n---@field size? {unit:string, width:integer, height:integer}\r\n```\r\n\r\nNote: the above is flirting with https://github.com/neovim/neovim/issues/25509 territory, and I don't want to encumber this PR with that scope. But it'll help to at least reference it and see if it makes sense to stub a similar skeleton here.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-02T16:06:19Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+---@class vim.img.Backend\n+---@field render fun(image:vim.img.Image, opts?:vim.img.Backend.RenderOpts)\n+\n+---@class vim.img.Backend.RenderOpts\n+---@field crop? {x:integer, y:integer, width:integer, height:integer} units are pixels\n+---@field pos? {row:integer, col:integer} units are cells\n+---@field size? {width:integer, height:integer} units are cells",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1866124325",
            "id": 1866124325,
            "in_reply_to_id": 1865811123,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vOswl",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 5,
            "path": "runtime/lua/vim/img/_backend.lua",
            "position": null,
            "pull_request_review_id": 2473135788,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866124325/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-02T16:06:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1866124325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1880102148"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1880102148"
                }
            },
            "author_association": "MEMBER",
            "body": "yes",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-11T12:21:44Z",
            "diff_hunk": "@@ -31,6 +31,7 @@ for k, v in pairs({\n   loader = true,\n   func = true,\n   F = true,\n+  img = true,",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1880102148",
            "id": 1880102148,
            "in_reply_to_id": 1865785053,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wEBUE",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 34,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2495513063,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1880102148/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-11T12:21:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1880102148",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1880102866"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1880102866"
                }
            },
            "author_association": "MEMBER",
            "body": "in favor merging them",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-11T12:22:17Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1880102866",
            "id": 1880102866,
            "in_reply_to_id": 1865806661,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5wEBfS",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": 1,
            "pull_request_review_id": 2495514190,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1880102866/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-12-11T12:22:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1880102866",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1880104108"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1880104108"
                }
            },
            "author_association": "MEMBER",
            "body": "iterators are a Lua concept, and can be as simple as returning a function (closure) which, when called, returns the next item.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-11T12:23:12Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1880104108",
            "id": 1880104108,
            "in_reply_to_id": 1866064296,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wEBys",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": null,
            "pull_request_review_id": 2495516549,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1880104108/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-11T12:23:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1880104108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882587144"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882587144"
                }
            },
            "author_association": "MEMBER",
            "body": "`:h for-in`",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:22:42Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882587144",
            "id": 1882587144,
            "in_reply_to_id": 1866064296,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNgAI",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": null,
            "pull_request_review_id": 2500334750,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882587144/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-12T17:22:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882587144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882595338"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882595338"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think we need a special constant for `ESC`. We can just write `\\027_G` here. That's what we already do everywhere else and it's fine.\r\n\r\nIf we were going to make anything into a constant, it should be the entire APC prefix (`ESC _`) and likewise for ST (`ESC \\`), CSI, OSC, etc.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:28:11Z",
            "diff_hunk": "@@ -0,0 +1,108 @@\n+---@class vim.img.KittyBackend: vim.img.Backend\n+local M = {}\n+\n+---For kitty, we need to write an image in chunks\n+---\n+---Graphics codes are in this form:\n+---\n+---    <ESC>_G<control data>;<payload><ESC>\\\n+---\n+---To stream data for a PNG, we specify the format `f=100`.\n+---\n+---To simultaneously transmit and display an image, we use `a=T`.\n+---\n+---Chunking data (such as from over a network) requires the\n+---specification of `m=0|1`, where all chunks must have a\n+---value of `1` except the very last chunk.\n+---@param data string\n+local function write_seq(data)\n+  local terminal = require('vim.img._terminal')\n+\n+  terminal.write(terminal.code.ESC .. '_G') -- Begin sequence",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882595338",
            "id": 1882595338,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNiAK",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 21,
            "original_position": 21,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_backend/kitty.lua",
            "position": null,
            "pull_request_review_id": 2500346730,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882595338/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-12T17:28:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882595338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882598297"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882598297"
                }
            },
            "author_association": "MEMBER",
            "body": "`termcap` probably isn't the right name since that is specifically for terminal capabilities. But we can (and probably should) rename `termcap` to `term` or `tty` or something, and then we can move all of this there. The existing `vim.termcap.query` would become `vim.tty.query`, which still makes sense (we will need to keep the old `termcap` file around as a BWC stub for a bit).",
            "commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "created_at": "2024-12-12T17:30:17Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882598297",
            "id": 1882598297,
            "in_reply_to_id": 1865801668,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5wNiuZ",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": 1,
            "pull_request_review_id": 2500351029,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882598297/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-12-12T17:30:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882598297",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882599415"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882599415"
                }
            },
            "author_association": "MEMBER",
            "body": "The `\\x` prefix is a LuaJIT extension and won't work in PUC Lua. You need to use decimal notation, i.e. `\\007` for BEL and `\\027` for ESC.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:30:57Z",
            "diff_hunk": "@@ -0,0 +1,140 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = '\\x07', -- aka ^G\n+  ESC = '\\x1B', -- aka ^[ aka \\033",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882599415",
            "id": 1882599415,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNi_3",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 6,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2500352731,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882599415/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-12T17:30:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882599415",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882604756"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882604756"
                }
            },
            "author_association": "MEMBER",
            "body": "~~I see we are caching the result of `get_tty_name`, but if different TUIs are attached (e.g. with `--remote`) this won't work, since they will use different TTYs.~~\r\n\r\nIt's a moot point, we shouldn't be using the TTY name directly anyway I don't think. See other comments.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:34:45Z",
            "diff_hunk": "@@ -0,0 +1,140 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = '\\x07', -- aka ^G\n+  ESC = '\\x1B', -- aka ^[ aka \\033\n+}\n+\n+---Retrieve the tty name used by the editor.\n+---\n+---E.g. /dev/ttys008\n+---@return string|nil\n+local function get_tty_name()\n+  if vim.fn.has('win32') == 1 then\n+    -- On windows, we use \\\\.\\CON for reading and writing\n+    return '\\\\\\\\.\\\\CON'\n+  else\n+    -- Linux/Mac: Use `tty` command, which reads the terminal name\n+    --            in the form of something like /dev/ttys008\n+    local handle = io.popen('tty 2>/dev/null')\n+    if not handle then\n+      return nil\n+    end\n+    local result = handle:read('*a')\n+    handle:close()\n+    result = vim.fn.trim(result)\n+    if result == '' then\n+      return nil\n+    end\n+    return result\n+  end\n+end\n+\n+---Returns the name of the tty associated with the terminal.\n+---@return string\n+function M.tty_name()\n+  if not M.__tty_name then\n+    M.__tty_name = assert(get_tty_name(), 'failed to read editor tty name')\n+  end\n+\n+  return M.__tty_name\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882604756",
            "id": 1882604756,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNkTU",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 43,
            "original_position": 43,
            "original_start_line": 37,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2500360470,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882604756/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-12T17:57:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882604756",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882607052"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882607052"
                }
            },
            "author_association": "MEMBER",
            "body": "Three separate writes means we are opening the TTY device, writing the data, and closing it three different times. We should be batching these writes as much as possible.\r\n\r\n**EDIT:** We shouldn't be using this special `terminal.write` function anyway. `io.stdout:write` will suffice (we should still batch the write calls though).",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:36:30Z",
            "diff_hunk": "@@ -0,0 +1,108 @@\n+---@class vim.img.KittyBackend: vim.img.Backend\n+local M = {}\n+\n+---For kitty, we need to write an image in chunks\n+---\n+---Graphics codes are in this form:\n+---\n+---    <ESC>_G<control data>;<payload><ESC>\\\n+---\n+---To stream data for a PNG, we specify the format `f=100`.\n+---\n+---To simultaneously transmit and display an image, we use `a=T`.\n+---\n+---Chunking data (such as from over a network) requires the\n+---specification of `m=0|1`, where all chunks must have a\n+---value of `1` except the very last chunk.\n+---@param data string\n+local function write_seq(data)\n+  local terminal = require('vim.img._terminal')\n+\n+  terminal.write(terminal.code.ESC .. '_G') -- Begin sequence\n+  terminal.write(data) -- Primary data\n+  terminal.write(terminal.code.ESC .. '\\\\') -- End sequence\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882607052",
            "id": 1882607052,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNk3M",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 24,
            "original_position": 24,
            "original_start_line": 21,
            "path": "runtime/lua/vim/img/_backend/kitty.lua",
            "position": null,
            "pull_request_review_id": 2500363913,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882607052/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-12T18:27:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882607052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882609596"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882609596"
                }
            },
            "author_association": "MEMBER",
            "body": "Please DO NOT hard code `$TERM` values here. We can query for kitty graphics support and that is what we will do.\r\n\r\nNeovim will not hard code `$TERM` values on my watch unless absolutely necessary :triumph: ",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:38:04Z",
            "diff_hunk": "@@ -0,0 +1,88 @@\n+local terminal = require('vim.img._terminal')\n+\n+local TERM_QUERY = {\n+  -- Request device attributes (DA2).\n+  --\n+  -- It typically returns information about the terminal type and supported features.\n+  --\n+  -- Response format is typically something like '\\033[>...;...;...c'\n+  DEVICE_ATTRIBUTES = terminal.code.ESC .. '[>q',\n+\n+  -- Request device status report (DSR), checking if terminal is okay.\n+  --\n+  -- Response indicates its current state.\n+  DEVICE_STATUS_REPORT = terminal.code.ESC .. '[5n',\n+}\n+\n+local TERM_RESPONSE = {\n+  -- Indicates that the terminal is functioning normally (no error).\n+  --\n+  -- 0 means 'OK'; other values indicate different states or errors.\n+  OK = terminal.code.ESC .. '[0n',\n+}\n+\n+---Detects supported graphics of the terminal.\n+---@return {graphics:'iterm2'|'kitty'|'sixel'|nil, tmux:boolean, broken_sixel_cursor_placement:boolean}\n+return function()\n+  local results = { graphics = nil, tmux = false, broken_sixel_cursor_placement = false }\n+\n+  local term = os.getenv('TERM')\n+  if term == 'xterm-kitty' or term == 'xterm-ghostty' or term == 'ghostty' then\n+    results.graphics = 'kitty'\n+  end\n+",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882609596",
            "id": 1882609596,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNle8",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 33,
            "original_position": 33,
            "original_start_line": 29,
            "path": "runtime/lua/vim/img/_detect.lua",
            "position": null,
            "pull_request_review_id": 2500367192,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 2,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882609596/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-12T17:38:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882609596",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882613095"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882613095"
                }
            },
            "author_association": "MEMBER",
            "body": "This seems unnecessary. Why do we need to get the TTY name and open a file descriptor to the device directly? If we are running in the TUI, then the TTY is already stdout.\r\n\r\nWe already make extensive use of terminal queries in Neovim by using `io.stdout:write` (see `_defaults.lua` and `termcap.lua`).",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:40:38Z",
            "diff_hunk": "@@ -0,0 +1,140 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = '\\x07', -- aka ^G\n+  ESC = '\\x1B', -- aka ^[ aka \\033\n+}\n+\n+---Retrieve the tty name used by the editor.\n+---\n+---E.g. /dev/ttys008\n+---@return string|nil\n+local function get_tty_name()\n+  if vim.fn.has('win32') == 1 then\n+    -- On windows, we use \\\\.\\CON for reading and writing\n+    return '\\\\\\\\.\\\\CON'\n+  else\n+    -- Linux/Mac: Use `tty` command, which reads the terminal name\n+    --            in the form of something like /dev/ttys008\n+    local handle = io.popen('tty 2>/dev/null')\n+    if not handle then\n+      return nil\n+    end\n+    local result = handle:read('*a')\n+    handle:close()\n+    result = vim.fn.trim(result)\n+    if result == '' then\n+      return nil\n+    end\n+    return result\n+  end\n+end\n+\n+---Returns the name of the tty associated with the terminal.\n+---@return string\n+function M.tty_name()\n+  if not M.__tty_name then\n+    M.__tty_name = assert(get_tty_name(), 'failed to read editor tty name')\n+  end\n+\n+  return M.__tty_name\n+end\n+\n+---Writes data to the editor tty.\n+---@param ... string|number\n+function M.write(...)\n+  local handle = assert(io.open(M.tty_name(), 'w'))\n+  handle:write(...)\n+  handle:close()\n+end\n+\n+---@class vim.img.terminal.cursor\n+M.cursor = {}\n+\n+---@param x integer\n+---@param y integer\n+---@param save? boolean\n+function M.cursor.move(x, y, save)\n+  if save then\n+    M.cursor.save()\n+  end\n+  M.write(TERM_CODE.ESC .. '[' .. y .. ';' .. x .. 'H')\n+  vim.uv.sleep(1)\n+end\n+\n+function M.cursor.save()\n+  M.write(TERM_CODE.ESC .. '[s')\n+end\n+\n+function M.cursor.restore()\n+  M.write(TERM_CODE.ESC .. '[u')\n+end\n+\n+---Terminal escape codes.\n+M.code = TERM_CODE\n+\n+---@param opts {query:string, handler:(fun(buffer:string):string|nil), timeout?:integer}\n+---@return string|nil result, string|nil err\n+function M.query(opts)\n+  local uv = vim.uv\n+\n+  opts = opts or {}\n+  local query = opts.query\n+  local handler = opts.handler\n+  local timeout = opts.timeout or 250\n+\n+  local tty_fd, err\n+  local function cleanup()\n+    if tty_fd then\n+      uv.fs_close(tty_fd)\n+      tty_fd = nil\n+    end\n+  end\n+\n+  -- Identify the path to the editor's tty\n+  -- NOTE: This only works on Unix-like systems!\n+  local ok, tty_path = pcall(M.tty_name)\n+  if not ok then\n+    return nil, tty_path\n+  end\n+\n+  -- Open the tty so we can write our query\n+  tty_fd, err = uv.fs_open(tty_path, 'r+', 438)\n+  if not tty_fd then\n+    return nil, err\n+  end\n+\n+  -- Write query to terminal.\n+  local success, write_err = uv.fs_write(tty_fd, query, -1)\n+  if not success then\n+    cleanup()\n+    return nil, write_err\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882613095",
            "id": 1882613095,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNmVn",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 114,
            "original_position": 114,
            "original_start_line": 98,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2500372003,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882613095/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-12T17:40:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882613095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882614507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882614507"
                }
            },
            "author_association": "MEMBER",
            "body": "We don't need a blocking read for terminal queries. Use a timer and callbacks instead (again see `termcap.lua` for an example).",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:41:24Z",
            "diff_hunk": "@@ -0,0 +1,140 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = '\\x07', -- aka ^G\n+  ESC = '\\x1B', -- aka ^[ aka \\033\n+}\n+\n+---Retrieve the tty name used by the editor.\n+---\n+---E.g. /dev/ttys008\n+---@return string|nil\n+local function get_tty_name()\n+  if vim.fn.has('win32') == 1 then\n+    -- On windows, we use \\\\.\\CON for reading and writing\n+    return '\\\\\\\\.\\\\CON'\n+  else\n+    -- Linux/Mac: Use `tty` command, which reads the terminal name\n+    --            in the form of something like /dev/ttys008\n+    local handle = io.popen('tty 2>/dev/null')\n+    if not handle then\n+      return nil\n+    end\n+    local result = handle:read('*a')\n+    handle:close()\n+    result = vim.fn.trim(result)\n+    if result == '' then\n+      return nil\n+    end\n+    return result\n+  end\n+end\n+\n+---Returns the name of the tty associated with the terminal.\n+---@return string\n+function M.tty_name()\n+  if not M.__tty_name then\n+    M.__tty_name = assert(get_tty_name(), 'failed to read editor tty name')\n+  end\n+\n+  return M.__tty_name\n+end\n+\n+---Writes data to the editor tty.\n+---@param ... string|number\n+function M.write(...)\n+  local handle = assert(io.open(M.tty_name(), 'w'))\n+  handle:write(...)\n+  handle:close()\n+end\n+\n+---@class vim.img.terminal.cursor\n+M.cursor = {}\n+\n+---@param x integer\n+---@param y integer\n+---@param save? boolean\n+function M.cursor.move(x, y, save)\n+  if save then\n+    M.cursor.save()\n+  end\n+  M.write(TERM_CODE.ESC .. '[' .. y .. ';' .. x .. 'H')\n+  vim.uv.sleep(1)\n+end\n+\n+function M.cursor.save()\n+  M.write(TERM_CODE.ESC .. '[s')\n+end\n+\n+function M.cursor.restore()\n+  M.write(TERM_CODE.ESC .. '[u')\n+end\n+\n+---Terminal escape codes.\n+M.code = TERM_CODE\n+\n+---@param opts {query:string, handler:(fun(buffer:string):string|nil), timeout?:integer}\n+---@return string|nil result, string|nil err\n+function M.query(opts)\n+  local uv = vim.uv\n+\n+  opts = opts or {}\n+  local query = opts.query\n+  local handler = opts.handler\n+  local timeout = opts.timeout or 250\n+\n+  local tty_fd, err\n+  local function cleanup()\n+    if tty_fd then\n+      uv.fs_close(tty_fd)\n+      tty_fd = nil\n+    end\n+  end\n+\n+  -- Identify the path to the editor's tty\n+  -- NOTE: This only works on Unix-like systems!\n+  local ok, tty_path = pcall(M.tty_name)\n+  if not ok then\n+    return nil, tty_path\n+  end\n+\n+  -- Open the tty so we can write our query\n+  tty_fd, err = uv.fs_open(tty_path, 'r+', 438)\n+  if not tty_fd then\n+    return nil, err\n+  end\n+\n+  -- Write query to terminal.\n+  local success, write_err = uv.fs_write(tty_fd, query, -1)\n+  if not success then\n+    cleanup()\n+    return nil, write_err\n+  end\n+\n+  -- Read response with timeout.\n+  local buffer = ''\n+  local start_time = uv.now()\n+\n+  while uv.now() - start_time < timeout do\n+    local data, read_err = uv.fs_read(tty_fd, 512, -1)\n+    if data then\n+      buffer = buffer .. data\n+      local result = handler(buffer)\n+      if result then\n+        cleanup()\n+        return result\n+      end\n+    elseif read_err ~= 'EAGAIN' then\n+      cleanup()\n+      return nil, read_err\n+    end\n+    uv.sleep(1)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882614507",
            "id": 1882614507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNmrr",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 134,
            "original_position": 134,
            "original_start_line": 120,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2500374278,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882614507/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-12T17:41:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882614507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882616636"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882616636"
                }
            },
            "author_association": "MEMBER",
            "body": "We already have a function for querying the terminal using XTGETTCAP with `vim.termcap.query`. It doesn't need to happen in this PR (and probably shouldn't) but we should combine all of our \"query the terminal\" functions under one roof (I'll take the action to do that myself).",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:42:43Z",
            "diff_hunk": "@@ -0,0 +1,140 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = '\\x07', -- aka ^G\n+  ESC = '\\x1B', -- aka ^[ aka \\033\n+}\n+\n+---Retrieve the tty name used by the editor.\n+---\n+---E.g. /dev/ttys008\n+---@return string|nil\n+local function get_tty_name()\n+  if vim.fn.has('win32') == 1 then\n+    -- On windows, we use \\\\.\\CON for reading and writing\n+    return '\\\\\\\\.\\\\CON'\n+  else\n+    -- Linux/Mac: Use `tty` command, which reads the terminal name\n+    --            in the form of something like /dev/ttys008\n+    local handle = io.popen('tty 2>/dev/null')\n+    if not handle then\n+      return nil\n+    end\n+    local result = handle:read('*a')\n+    handle:close()\n+    result = vim.fn.trim(result)\n+    if result == '' then\n+      return nil\n+    end\n+    return result\n+  end\n+end\n+\n+---Returns the name of the tty associated with the terminal.\n+---@return string\n+function M.tty_name()\n+  if not M.__tty_name then\n+    M.__tty_name = assert(get_tty_name(), 'failed to read editor tty name')\n+  end\n+\n+  return M.__tty_name\n+end\n+\n+---Writes data to the editor tty.\n+---@param ... string|number\n+function M.write(...)\n+  local handle = assert(io.open(M.tty_name(), 'w'))\n+  handle:write(...)\n+  handle:close()\n+end\n+\n+---@class vim.img.terminal.cursor\n+M.cursor = {}\n+\n+---@param x integer\n+---@param y integer\n+---@param save? boolean\n+function M.cursor.move(x, y, save)\n+  if save then\n+    M.cursor.save()\n+  end\n+  M.write(TERM_CODE.ESC .. '[' .. y .. ';' .. x .. 'H')\n+  vim.uv.sleep(1)\n+end\n+\n+function M.cursor.save()\n+  M.write(TERM_CODE.ESC .. '[s')\n+end\n+\n+function M.cursor.restore()\n+  M.write(TERM_CODE.ESC .. '[u')\n+end\n+\n+---Terminal escape codes.\n+M.code = TERM_CODE\n+\n+---@param opts {query:string, handler:(fun(buffer:string):string|nil), timeout?:integer}\n+---@return string|nil result, string|nil err\n+function M.query(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882616636",
            "id": 1882616636,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNnM8",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 80,
            "original_position": 80,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2500378166,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882616636/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-12T17:42:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882616636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882622325"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882622325"
                }
            },
            "author_association": "MEMBER",
            "body": "Actually on further thought, it looks like this is only being used for querying device attributes and device status report. We should probably just update our `TermResponse` autocommand to include those sequences. Then this just becomes a single `io.stdout:write` along with a `TermResponse` autocommand. We don't need this function at all.\r\n\r\n**EDIT:** The `XTVERSION` query already works, since the response is a DCS:\r\n\r\n```lua\r\nvim.api.nvim_create_autocmd('TermResponse', {\r\n  callback = function(args)\r\n    local xtversion = args.data:match('^\\027P>|(.+)$')\r\n    if xtversion then\r\n      print(xtversion)\r\n    end\r\n  end,\r\n})\r\n\r\nio.stdout:write('\\027[>q')\r\n```\r\n\r\nI'm not sure we need to change anything then. This should be sufficient for this feature.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:46:33Z",
            "diff_hunk": "@@ -0,0 +1,140 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = '\\x07', -- aka ^G\n+  ESC = '\\x1B', -- aka ^[ aka \\033\n+}\n+\n+---Retrieve the tty name used by the editor.\n+---\n+---E.g. /dev/ttys008\n+---@return string|nil\n+local function get_tty_name()\n+  if vim.fn.has('win32') == 1 then\n+    -- On windows, we use \\\\.\\CON for reading and writing\n+    return '\\\\\\\\.\\\\CON'\n+  else\n+    -- Linux/Mac: Use `tty` command, which reads the terminal name\n+    --            in the form of something like /dev/ttys008\n+    local handle = io.popen('tty 2>/dev/null')\n+    if not handle then\n+      return nil\n+    end\n+    local result = handle:read('*a')\n+    handle:close()\n+    result = vim.fn.trim(result)\n+    if result == '' then\n+      return nil\n+    end\n+    return result\n+  end\n+end\n+\n+---Returns the name of the tty associated with the terminal.\n+---@return string\n+function M.tty_name()\n+  if not M.__tty_name then\n+    M.__tty_name = assert(get_tty_name(), 'failed to read editor tty name')\n+  end\n+\n+  return M.__tty_name\n+end\n+\n+---Writes data to the editor tty.\n+---@param ... string|number\n+function M.write(...)\n+  local handle = assert(io.open(M.tty_name(), 'w'))\n+  handle:write(...)\n+  handle:close()\n+end\n+\n+---@class vim.img.terminal.cursor\n+M.cursor = {}\n+\n+---@param x integer\n+---@param y integer\n+---@param save? boolean\n+function M.cursor.move(x, y, save)\n+  if save then\n+    M.cursor.save()\n+  end\n+  M.write(TERM_CODE.ESC .. '[' .. y .. ';' .. x .. 'H')\n+  vim.uv.sleep(1)\n+end\n+\n+function M.cursor.save()\n+  M.write(TERM_CODE.ESC .. '[s')\n+end\n+\n+function M.cursor.restore()\n+  M.write(TERM_CODE.ESC .. '[u')\n+end\n+\n+---Terminal escape codes.\n+M.code = TERM_CODE\n+\n+---@param opts {query:string, handler:(fun(buffer:string):string|nil), timeout?:integer}\n+---@return string|nil result, string|nil err\n+function M.query(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882622325",
            "id": 1882622325,
            "in_reply_to_id": 1882616636,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNol1",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 80,
            "original_position": 80,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2500386690,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882622325/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-12T18:01:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882622325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882631381"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882631381"
                }
            },
            "author_association": "MEMBER",
            "body": "According to https://invisible-island.net/xterm/ctlseqs/ctlseqs.html this is called `XTVERSION`. The Device Attributes is `CSI c`\r\n\r\n```suggestion\r\n  XTVERSION = terminal.code.ESC .. '[>q',\r\n```",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T17:52:48Z",
            "diff_hunk": "@@ -0,0 +1,88 @@\n+local terminal = require('vim.img._terminal')\n+\n+local TERM_QUERY = {\n+  -- Request device attributes (DA2).\n+  --\n+  -- It typically returns information about the terminal type and supported features.\n+  --\n+  -- Response format is typically something like '\\033[>...;...;...c'\n+  DEVICE_ATTRIBUTES = terminal.code.ESC .. '[>q',",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882631381",
            "id": 1882631381,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNqzV",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_detect.lua",
            "position": null,
            "pull_request_review_id": 2500400132,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882631381/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-12T17:52:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882631381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882650624"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882650624"
                }
            },
            "author_association": "MEMBER",
            "body": "Why are we sleeping here?",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T18:02:10Z",
            "diff_hunk": "@@ -0,0 +1,140 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = '\\x07', -- aka ^G\n+  ESC = '\\x1B', -- aka ^[ aka \\033\n+}\n+\n+---Retrieve the tty name used by the editor.\n+---\n+---E.g. /dev/ttys008\n+---@return string|nil\n+local function get_tty_name()\n+  if vim.fn.has('win32') == 1 then\n+    -- On windows, we use \\\\.\\CON for reading and writing\n+    return '\\\\\\\\.\\\\CON'\n+  else\n+    -- Linux/Mac: Use `tty` command, which reads the terminal name\n+    --            in the form of something like /dev/ttys008\n+    local handle = io.popen('tty 2>/dev/null')\n+    if not handle then\n+      return nil\n+    end\n+    local result = handle:read('*a')\n+    handle:close()\n+    result = vim.fn.trim(result)\n+    if result == '' then\n+      return nil\n+    end\n+    return result\n+  end\n+end\n+\n+---Returns the name of the tty associated with the terminal.\n+---@return string\n+function M.tty_name()\n+  if not M.__tty_name then\n+    M.__tty_name = assert(get_tty_name(), 'failed to read editor tty name')\n+  end\n+\n+  return M.__tty_name\n+end\n+\n+---Writes data to the editor tty.\n+---@param ... string|number\n+function M.write(...)\n+  local handle = assert(io.open(M.tty_name(), 'w'))\n+  handle:write(...)\n+  handle:close()\n+end\n+\n+---@class vim.img.terminal.cursor\n+M.cursor = {}\n+\n+---@param x integer\n+---@param y integer\n+---@param save? boolean\n+function M.cursor.move(x, y, save)\n+  if save then\n+    M.cursor.save()\n+  end\n+  M.write(TERM_CODE.ESC .. '[' .. y .. ';' .. x .. 'H')\n+  vim.uv.sleep(1)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882650624",
            "id": 1882650624,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wNvgA",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 64,
            "original_position": 64,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2500431320,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882650624/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-12T18:02:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882650624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r1882690288"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882690288"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure how widely supported the SC and RC sequences are. The Xterm [ctlseqs](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html) page has a bunch of caveats and disclaimers (search for SCORC).\r\n\r\nIn contrast, `ESC 7` and `ESC 8` are VT100 sequences and will be supported by everything. \r\n\r\nDo we even need to save and restore the cursor position? The Kitty graphics protocol has a `C=1` parameter to preserve cursor position https://sw.kovidgoyal.net/kitty/graphics-protocol/#controlling-displayed-image-layout",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2024-12-12T18:30:39Z",
            "diff_hunk": "@@ -0,0 +1,140 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = '\\x07', -- aka ^G\n+  ESC = '\\x1B', -- aka ^[ aka \\033\n+}\n+\n+---Retrieve the tty name used by the editor.\n+---\n+---E.g. /dev/ttys008\n+---@return string|nil\n+local function get_tty_name()\n+  if vim.fn.has('win32') == 1 then\n+    -- On windows, we use \\\\.\\CON for reading and writing\n+    return '\\\\\\\\.\\\\CON'\n+  else\n+    -- Linux/Mac: Use `tty` command, which reads the terminal name\n+    --            in the form of something like /dev/ttys008\n+    local handle = io.popen('tty 2>/dev/null')\n+    if not handle then\n+      return nil\n+    end\n+    local result = handle:read('*a')\n+    handle:close()\n+    result = vim.fn.trim(result)\n+    if result == '' then\n+      return nil\n+    end\n+    return result\n+  end\n+end\n+\n+---Returns the name of the tty associated with the terminal.\n+---@return string\n+function M.tty_name()\n+  if not M.__tty_name then\n+    M.__tty_name = assert(get_tty_name(), 'failed to read editor tty name')\n+  end\n+\n+  return M.__tty_name\n+end\n+\n+---Writes data to the editor tty.\n+---@param ... string|number\n+function M.write(...)\n+  local handle = assert(io.open(M.tty_name(), 'w'))\n+  handle:write(...)\n+  handle:close()\n+end\n+\n+---@class vim.img.terminal.cursor\n+M.cursor = {}\n+\n+---@param x integer\n+---@param y integer\n+---@param save? boolean\n+function M.cursor.move(x, y, save)\n+  if save then\n+    M.cursor.save()\n+  end\n+  M.write(TERM_CODE.ESC .. '[' .. y .. ';' .. x .. 'H')\n+  vim.uv.sleep(1)\n+end\n+\n+function M.cursor.save()\n+  M.write(TERM_CODE.ESC .. '[s')\n+end\n+\n+function M.cursor.restore()\n+  M.write(TERM_CODE.ESC .. '[u')",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r1882690288",
            "id": 1882690288,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wN5Lw",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 72,
            "original_position": 72,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2500487455,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882690288/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-12T18:30:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1882690288",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r2067258667"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2067258667"
                }
            },
            "author_association": "NONE",
            "body": "@justinmk took a stab at this for the time being. Created three new methods:\r\n\r\n1. `vim.ui.img.new_size()`\r\n2. `vim.ui.img.new_region()`\r\n3. `vim.ui.img.new_position()`\r\n\r\nEach of them supports converting between pixel and cell units.\r\n\r\nIt's untested for now, but wanted to sneak this in while I'm in the airport.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2025-04-29T19:50:38Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+---@class vim.img.Backend\n+---@field render fun(image:vim.img.Image, opts?:vim.img.Backend.RenderOpts)\n+\n+---@class vim.img.Backend.RenderOpts\n+---@field crop? {x:integer, y:integer, width:integer, height:integer} units are pixels\n+---@field pos? {row:integer, col:integer} units are cells\n+---@field size? {width:integer, height:integer} units are cells",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r2067258667",
            "id": 2067258667,
            "in_reply_to_id": 1865811123,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57N90r",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 5,
            "path": "runtime/lua/vim/img/_backend.lua",
            "position": null,
            "pull_request_review_id": 2804836338,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2067258667/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-29T19:50:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2067258667",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r2067439368"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2067439368"
                }
            },
            "author_association": "NONE",
            "body": "@gpanders  when I switch from my terminal.write to io.stdout:write, nothing happens. This was an issue I was facing earlier, and I'm not sure why. Any thoughts?",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2025-04-29T21:13:59Z",
            "diff_hunk": "@@ -0,0 +1,108 @@\n+---@class vim.img.KittyBackend: vim.img.Backend\n+local M = {}\n+\n+---For kitty, we need to write an image in chunks\n+---\n+---Graphics codes are in this form:\n+---\n+---    <ESC>_G<control data>;<payload><ESC>\\\n+---\n+---To stream data for a PNG, we specify the format `f=100`.\n+---\n+---To simultaneously transmit and display an image, we use `a=T`.\n+---\n+---Chunking data (such as from over a network) requires the\n+---specification of `m=0|1`, where all chunks must have a\n+---value of `1` except the very last chunk.\n+---@param data string\n+local function write_seq(data)\n+  local terminal = require('vim.img._terminal')\n+\n+  terminal.write(terminal.code.ESC .. '_G') -- Begin sequence\n+  terminal.write(data) -- Primary data\n+  terminal.write(terminal.code.ESC .. '\\\\') -- End sequence\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r2067439368",
            "id": 2067439368,
            "in_reply_to_id": 1882607052,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57Op8I",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 24,
            "original_position": 24,
            "original_start_line": 21,
            "path": "runtime/lua/vim/img/_backend/kitty.lua",
            "position": null,
            "pull_request_review_id": 2805101070,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2067439368/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-29T21:14:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2067439368",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r2067441109"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2067441109"
                }
            },
            "author_association": "NONE",
            "body": "@gpanders is it `\\027` or `\\033` for escape? I feel like I tried this awhile back switching to `\\027` and the image no longer showed with kitty, but I'll need to check again.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2025-04-29T21:15:28Z",
            "diff_hunk": "@@ -0,0 +1,140 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = '\\x07', -- aka ^G\n+  ESC = '\\x1B', -- aka ^[ aka \\033",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r2067441109",
            "id": 2067441109,
            "in_reply_to_id": 1882599415,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57OqXV",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 6,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2805103706,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2067441109/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-29T21:15:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2067441109",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r2069099215"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069099215"
                }
            },
            "author_association": "NONE",
            "body": "Updated to be `Image:chunks()` which returns the result of `vim.iter()` on a function iterator. Assuming that should be good enough?",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2025-04-30T16:51:45Z",
            "diff_hunk": "@@ -0,0 +1,144 @@\n+---@class vim.img.Image\n+---@field name string|nil name of the image if loaded from disk\n+---@field data string|nil base64 encoded data\n+local M = {}\n+M.__index = M\n+\n+---Creates a new image instance.\n+---@param opts? {data?:string, filename?:string}\n+---@return vim.img.Image\n+function M:new(opts)\n+  opts = opts or {}\n+\n+  local instance = {}\n+  setmetatable(instance, M)\n+\n+  instance.data = opts.data\n+  if not instance.data and opts.filename then\n+    instance:load_from_file(opts.filename)\n+  end\n+\n+  return instance\n+end\n+\n+---Returns true if the image is loaded into memory.\n+---@return boolean\n+function M:is_loaded()\n+  return self.data ~= nil\n+end\n+\n+---Returns the size of the base64 encoded image.\n+---@return integer\n+function M:size()\n+  return string.len(self.data or '')\n+end\n+\n+---Iterates over the chunks of the image, invoking `f` per chunk.\n+---@param f fun(chunk:string, pos:integer, has_more:boolean)\n+---@param opts? {size?:integer}\n+function M:for_each_chunk(f, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r2069099215",
            "id": 2069099215,
            "in_reply_to_id": 1866064296,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57U_LP",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/img/_image.lua",
            "position": null,
            "pull_request_review_id": 2807776189,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069099215/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-30T16:51:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069099215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r2069100473"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069100473"
                }
            },
            "author_association": "NONE",
            "body": "Okay, confirmed that `\\027` is the right one. Was some other issue when I was testing and trying to use `io.stdout:write()`.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2025-04-30T16:52:25Z",
            "diff_hunk": "@@ -0,0 +1,140 @@\n+---@class vim.img.terminal\n+---@field private __tty_name string\n+local M = {}\n+\n+local TERM_CODE = {\n+  BEL = '\\x07', -- aka ^G\n+  ESC = '\\x1B', -- aka ^[ aka \\033",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r2069100473",
            "id": 2069100473,
            "in_reply_to_id": 1882599415,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57U_e5",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": 6,
            "path": "runtime/lua/vim/img/_terminal.lua",
            "position": null,
            "pull_request_review_id": 2807778959,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069100473/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T16:52:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069100473",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r2069117066"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069117066"
                }
            },
            "author_association": "MEMBER",
            "body": "Did you figure this out? `io.stdout:write` should work, we use that [elsewhere already](https://github.com/gpanders/neovim/blob/496c82ba41142b8756d03bee55bf64e8b439167f/runtime/lua/vim/termcap.lua#L74).",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2025-04-30T17:02:20Z",
            "diff_hunk": "@@ -0,0 +1,108 @@\n+---@class vim.img.KittyBackend: vim.img.Backend\n+local M = {}\n+\n+---For kitty, we need to write an image in chunks\n+---\n+---Graphics codes are in this form:\n+---\n+---    <ESC>_G<control data>;<payload><ESC>\\\n+---\n+---To stream data for a PNG, we specify the format `f=100`.\n+---\n+---To simultaneously transmit and display an image, we use `a=T`.\n+---\n+---Chunking data (such as from over a network) requires the\n+---specification of `m=0|1`, where all chunks must have a\n+---value of `1` except the very last chunk.\n+---@param data string\n+local function write_seq(data)\n+  local terminal = require('vim.img._terminal')\n+\n+  terminal.write(terminal.code.ESC .. '_G') -- Begin sequence\n+  terminal.write(data) -- Primary data\n+  terminal.write(terminal.code.ESC .. '\\\\') -- End sequence\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r2069117066",
            "id": 2069117066,
            "in_reply_to_id": 1882607052,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57VDiK",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 24,
            "original_position": 24,
            "original_start_line": 21,
            "path": "runtime/lua/vim/img/_backend/kitty.lua",
            "position": null,
            "pull_request_review_id": 2807817142,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069117066/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T17:02:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069117066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r2069210656"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069210656"
                }
            },
            "author_association": "NONE",
            "body": "Not yet. If I change the implementation of `terminal.write` to use `io.stdout:write` instead of opening and writing to the tty, the image doesn't show up.\n\nAdding `io.stdout:flush` has no effect. ",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2025-04-30T18:09:11Z",
            "diff_hunk": "@@ -0,0 +1,108 @@\n+---@class vim.img.KittyBackend: vim.img.Backend\n+local M = {}\n+\n+---For kitty, we need to write an image in chunks\n+---\n+---Graphics codes are in this form:\n+---\n+---    <ESC>_G<control data>;<payload><ESC>\\\n+---\n+---To stream data for a PNG, we specify the format `f=100`.\n+---\n+---To simultaneously transmit and display an image, we use `a=T`.\n+---\n+---Chunking data (such as from over a network) requires the\n+---specification of `m=0|1`, where all chunks must have a\n+---value of `1` except the very last chunk.\n+---@param data string\n+local function write_seq(data)\n+  local terminal = require('vim.img._terminal')\n+\n+  terminal.write(terminal.code.ESC .. '_G') -- Begin sequence\n+  terminal.write(data) -- Primary data\n+  terminal.write(terminal.code.ESC .. '\\\\') -- End sequence\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r2069210656",
            "id": 2069210656,
            "in_reply_to_id": 1882607052,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57VaYg",
            "original_commit_id": "ce818a9a914b3c8ddd0cf747238ae5a4d0a18671",
            "original_line": 24,
            "original_position": 24,
            "original_start_line": 21,
            "path": "runtime/lua/vim/img/_backend/kitty.lua",
            "position": null,
            "pull_request_review_id": 2808007095,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069210656/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T18:10:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069210656",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r2083159782"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2083159782"
                }
            },
            "author_association": "NONE",
            "body": "These values are meaningless. On Windows Terminal and the Windows console the cell size is unrelated to the font - it always emulates a VT340 cell size of 10x20. Other terminals running on Windows will typically have a variable cell size, but the values reported here would not reflect the font that the terminal is actually using. The only way to determine the real cell size is with an escape sequence.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2025-05-10T13:35:39Z",
            "diff_hunk": "@@ -0,0 +1,275 @@\n+---@class vim.ui.img.screen.Size\n+---@field width integer in pixels\n+---@field height integer in pixels\n+---@field columns integer\n+---@field rows integer\n+---@field cell_width number in pixels (may be fractional)\n+---@field cell_height number in pixels (may be fractional)\n+---@field scale number dpi\n+\n+---@class vim.ui.img.Screen\n+---@field private __def boolean has created necessary cdefs\n+---@field private __size vim.ui.img.screen.Size|nil cached screen size\n+local M = {\n+  __def = false,\n+  __size = nil,\n+}\n+\n+vim.api.nvim_create_autocmd('VimResized', {\n+  desc = 'Screen size has changed',\n+  callback = function()\n+    -- Clear our cache when the screen size changes\n+    M.__size = nil\n+  end,\n+})\n+\n+---Determines the size of the terminal screen.\n+---@return vim.ui.img.screen.Size\n+function M.size()\n+  local size = M.__size\n+\n+  if size then\n+    return size\n+  end\n+\n+  if vim.fn.has('win32') == 1 then\n+    size = M.__windows_size()\n+  elseif vim.fn.has('unix') == 1 then\n+    size = M.__posix_size()\n+  end\n+\n+  M.__size = size or M.__default_size()\n+\n+  return M.__size\n+end\n+\n+---@private\n+---Determines the size of the terminal screen for Windows systems with pixel accuracy.\n+---@return vim.ui.img.screen.Size|nil\n+function M.__windows_size()\n+  -- For neovim spawned from within Windows Terminal, this should be set to\n+  -- some GUID; so, leverage CSI escape codes to query, which are supported\n+  -- by modern Windows Terminal instances\n+  if vim.env.WT_SESSION then\n+    return M.__csi_size()\n+  end\n+\n+  local ffi = require('ffi')\n+\n+  if not M.__def then\n+    ffi.cdef([[\n+      typedef unsigned long DWORD;\n+      typedef unsigned short WORD;\n+      typedef int BOOL;\n+      typedef void* HANDLE;\n+      typedef short SHORT;\n+\n+      typedef struct _COORD {\n+        SHORT X;\n+        SHORT Y;\n+      } COORD;\n+\n+      typedef struct _SMALL_RECT {\n+        SHORT Left;\n+        SHORT Top;\n+        SHORT Right;\n+        SHORT Bottom;\n+      } SMALL_RECT;\n+\n+      typedef struct _CONSOLE_SCREEN_BUFFER_INFO {\n+        COORD dwSize;\n+        COORD dwCursorPosition;\n+        WORD wAttributes;\n+        SMALL_RECT srWindow;\n+        COORD dwMaximumWindowSize;\n+      } CONSOLE_SCREEN_BUFFER_INFO;\n+\n+      typedef struct _CONSOLE_FONT_INFO {\n+        DWORD nFont;\n+        COORD dwFontSize;\n+      } CONSOLE_FONT_INFO;\n+\n+      HANDLE GetStdHandle(DWORD nStdHandle);\n+      BOOL GetConsoleScreenBufferInfo(\n+        HANDLE hConsoleOutput,\n+        CONSOLE_SCREEN_BUFFER_INFO* lpConsoleScreenBufferInfo\n+      );\n+      BOOL GetCurrentConsoleFont(\n+        HANDLE hConsoleOutput,\n+        BOOL bMaximumWindow,\n+        CONSOLE_FONT_INFO* lpConsoleFontInfo\n+      );\n+    ]])\n+    M.__def = true\n+  end\n+\n+  ---@type vim.ui.img.screen.Size|nil\n+  local size\n+\n+  ---Retrieve the screen buffer info and font size to determine the cell width and height.\n+  ---NOTE: This does not work on Windows Terminal! We will fall back to CSI escape codes.\n+  ---@type boolean, string|nil\n+  local ok, err = pcall(function()\n+    -- Using -11 should retrieve STD_OUTPUT_HANDLE, which initially is the\n+    -- active console screen buffer (CONOUT$)\n+    ---@type ffi.cdata*\n+    local hStdOut = ffi.C.GetStdHandle(-11)\n+\n+    -- If our handle is INVALID_HANDLE_VALUE (-1)\n+    if hStdOut == ffi.cast('HANDLE', -1) then\n+      error('failed to get STD_OUTPUT_HANDLE')\n+    end\n+\n+    ---@type { srWindow: { Left:integer, Top:integer, Right:integer, Bottom:integer } }\n+    local csbi = ffi.new('CONSOLE_SCREEN_BUFFER_INFO')\n+    if ffi.C.GetConsoleScreenBufferInfo(hStdOut, csbi) == 0 then\n+      error('failed to retrieve screen buffer info')\n+    end\n+\n+    ---@type { nFont:integer, dwFontSize: { X:integer, Y:integer } }\n+    local fontInfo = ffi.new('CONSOLE_FONT_INFO')\n+    if ffi.C.GetCurrentConsoleFont(hStdOut, false, fontInfo) == 0 then\n+      error('failed to retrieve current console font')\n+    end\n+\n+    -- Use the visible window (srWindow) to figure out the rows and columns shown\n+    local cols = csbi.srWindow.Right - csbi.srWindow.Left + 1\n+    local rows = csbi.srWindow.Bottom - csbi.srWindow.Top + 1\n+\n+    -- Use our font size as an approximation of the cell size\n+    local cell_width = fontInfo.dwFontSize.X\n+    local cell_height = fontInfo.dwFontSize.Y",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r2083159782",
            "id": 2083159782,
            "line": 141,
            "node_id": "PRRC_kwDOAPphoM58Kn7m",
            "original_commit_id": "385e2c7e82eb71691c608ce4b1c32c2827ac5eaa",
            "original_line": 141,
            "original_position": 141,
            "original_start_line": 139,
            "path": "runtime/lua/vim/ui/img/screen.lua",
            "position": 141,
            "pull_request_review_id": 2830807142,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2083159782/reactions"
            },
            "side": "RIGHT",
            "start_line": 139,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-10T13:35:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2083159782",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
                "events_url": "https://api.github.com/users/j4james/events{/privacy}",
                "followers_url": "https://api.github.com/users/j4james/followers",
                "following_url": "https://api.github.com/users/j4james/following{/other_user}",
                "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/j4james",
                "id": 4181424,
                "login": "j4james",
                "node_id": "MDQ6VXNlcjQxODE0MjQ=",
                "organizations_url": "https://api.github.com/users/j4james/orgs",
                "received_events_url": "https://api.github.com/users/j4james/received_events",
                "repos_url": "https://api.github.com/users/j4james/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/j4james",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31399#discussion_r2083222284"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2083222284"
                }
            },
            "author_association": "NONE",
            "body": "Got it, thanks for the clarification on this one. I was hoping @gpanders might see the conversation since he was the one providing insight on neovim's `TermResponse` and general query API. From what I can see, neovim consumes any CSI responses from the terminal, which is why I haven't implemented `CSI 14 t` or `CSI 16 t`.",
            "commit_id": "e5901549faa4b43a81b99572b2461529d8106a0a",
            "created_at": "2025-05-10T15:34:01Z",
            "diff_hunk": "@@ -0,0 +1,275 @@\n+---@class vim.ui.img.screen.Size\n+---@field width integer in pixels\n+---@field height integer in pixels\n+---@field columns integer\n+---@field rows integer\n+---@field cell_width number in pixels (may be fractional)\n+---@field cell_height number in pixels (may be fractional)\n+---@field scale number dpi\n+\n+---@class vim.ui.img.Screen\n+---@field private __def boolean has created necessary cdefs\n+---@field private __size vim.ui.img.screen.Size|nil cached screen size\n+local M = {\n+  __def = false,\n+  __size = nil,\n+}\n+\n+vim.api.nvim_create_autocmd('VimResized', {\n+  desc = 'Screen size has changed',\n+  callback = function()\n+    -- Clear our cache when the screen size changes\n+    M.__size = nil\n+  end,\n+})\n+\n+---Determines the size of the terminal screen.\n+---@return vim.ui.img.screen.Size\n+function M.size()\n+  local size = M.__size\n+\n+  if size then\n+    return size\n+  end\n+\n+  if vim.fn.has('win32') == 1 then\n+    size = M.__windows_size()\n+  elseif vim.fn.has('unix') == 1 then\n+    size = M.__posix_size()\n+  end\n+\n+  M.__size = size or M.__default_size()\n+\n+  return M.__size\n+end\n+\n+---@private\n+---Determines the size of the terminal screen for Windows systems with pixel accuracy.\n+---@return vim.ui.img.screen.Size|nil\n+function M.__windows_size()\n+  -- For neovim spawned from within Windows Terminal, this should be set to\n+  -- some GUID; so, leverage CSI escape codes to query, which are supported\n+  -- by modern Windows Terminal instances\n+  if vim.env.WT_SESSION then\n+    return M.__csi_size()\n+  end\n+\n+  local ffi = require('ffi')\n+\n+  if not M.__def then\n+    ffi.cdef([[\n+      typedef unsigned long DWORD;\n+      typedef unsigned short WORD;\n+      typedef int BOOL;\n+      typedef void* HANDLE;\n+      typedef short SHORT;\n+\n+      typedef struct _COORD {\n+        SHORT X;\n+        SHORT Y;\n+      } COORD;\n+\n+      typedef struct _SMALL_RECT {\n+        SHORT Left;\n+        SHORT Top;\n+        SHORT Right;\n+        SHORT Bottom;\n+      } SMALL_RECT;\n+\n+      typedef struct _CONSOLE_SCREEN_BUFFER_INFO {\n+        COORD dwSize;\n+        COORD dwCursorPosition;\n+        WORD wAttributes;\n+        SMALL_RECT srWindow;\n+        COORD dwMaximumWindowSize;\n+      } CONSOLE_SCREEN_BUFFER_INFO;\n+\n+      typedef struct _CONSOLE_FONT_INFO {\n+        DWORD nFont;\n+        COORD dwFontSize;\n+      } CONSOLE_FONT_INFO;\n+\n+      HANDLE GetStdHandle(DWORD nStdHandle);\n+      BOOL GetConsoleScreenBufferInfo(\n+        HANDLE hConsoleOutput,\n+        CONSOLE_SCREEN_BUFFER_INFO* lpConsoleScreenBufferInfo\n+      );\n+      BOOL GetCurrentConsoleFont(\n+        HANDLE hConsoleOutput,\n+        BOOL bMaximumWindow,\n+        CONSOLE_FONT_INFO* lpConsoleFontInfo\n+      );\n+    ]])\n+    M.__def = true\n+  end\n+\n+  ---@type vim.ui.img.screen.Size|nil\n+  local size\n+\n+  ---Retrieve the screen buffer info and font size to determine the cell width and height.\n+  ---NOTE: This does not work on Windows Terminal! We will fall back to CSI escape codes.\n+  ---@type boolean, string|nil\n+  local ok, err = pcall(function()\n+    -- Using -11 should retrieve STD_OUTPUT_HANDLE, which initially is the\n+    -- active console screen buffer (CONOUT$)\n+    ---@type ffi.cdata*\n+    local hStdOut = ffi.C.GetStdHandle(-11)\n+\n+    -- If our handle is INVALID_HANDLE_VALUE (-1)\n+    if hStdOut == ffi.cast('HANDLE', -1) then\n+      error('failed to get STD_OUTPUT_HANDLE')\n+    end\n+\n+    ---@type { srWindow: { Left:integer, Top:integer, Right:integer, Bottom:integer } }\n+    local csbi = ffi.new('CONSOLE_SCREEN_BUFFER_INFO')\n+    if ffi.C.GetConsoleScreenBufferInfo(hStdOut, csbi) == 0 then\n+      error('failed to retrieve screen buffer info')\n+    end\n+\n+    ---@type { nFont:integer, dwFontSize: { X:integer, Y:integer } }\n+    local fontInfo = ffi.new('CONSOLE_FONT_INFO')\n+    if ffi.C.GetCurrentConsoleFont(hStdOut, false, fontInfo) == 0 then\n+      error('failed to retrieve current console font')\n+    end\n+\n+    -- Use the visible window (srWindow) to figure out the rows and columns shown\n+    local cols = csbi.srWindow.Right - csbi.srWindow.Left + 1\n+    local rows = csbi.srWindow.Bottom - csbi.srWindow.Top + 1\n+\n+    -- Use our font size as an approximation of the cell size\n+    local cell_width = fontInfo.dwFontSize.X\n+    local cell_height = fontInfo.dwFontSize.Y",
            "html_url": "https://github.com/neovim/neovim/pull/31399#discussion_r2083222284",
            "id": 2083222284,
            "in_reply_to_id": 2083159782,
            "line": 141,
            "node_id": "PRRC_kwDOAPphoM58K3MM",
            "original_commit_id": "385e2c7e82eb71691c608ce4b1c32c2827ac5eaa",
            "original_line": 141,
            "original_position": 141,
            "original_start_line": 139,
            "path": "runtime/lua/vim/ui/img/screen.lua",
            "position": 141,
            "pull_request_review_id": 2830907774,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2083222284/reactions"
            },
            "side": "RIGHT",
            "start_line": 139,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-10T15:34:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2083222284",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "NONE",
            "body": "Heads up, I know there is formatting of commit messages needed and linting for preferences in Lua style guides.\r\n\r\nThe current code is me migrating over my working code from a private repo - not a fork of neovim - to be a pull request here. I'll work on updating the PR to be compliant, but wanted the code to be visible for comments.\r\n\r\nIn particular, I could use help in rewriting that parts of the PR that make use of Lua's io library - assuming we want to use a neovim equivalent - and to refactor parts of the code that could be improved. So looking for stronger critique, challenges, and suggestions 😄 This was an example-turned-PR, so not all of the code is high quality!\r\n\r\n---\r\n\r\nAn example of doing this with the current PR:\r\n\r\n![image-example-pr](https://github.com/user-attachments/assets/466de1a6-333f-4e97-a90f-ea3e1ae241da)\r\n\r\n```lua\r\nlocal file = vim.img.load({\r\n    filename = \"/Users/senkwich/Pictures/org-roam-logo.png\",\r\n})\r\n\r\nvim.img.show(file, {\r\n    pos = { row = 8, col = 8 }, \r\n    backend = \"iterm2\",\r\n})\r\n```\r\n",
            "created_at": "2024-11-30T00:42:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2508758798",
            "id": 2508758798,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6ViJ8O",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 5,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2508758798/reactions"
            },
            "updated_at": "2024-11-30T01:17:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2508758798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk heads up, one complexity that we'll punt for now is supporting non-PNG images. I think we can write a pretty straightforward decoder for BMP & GIF, but JPEG is very complex and would /probably/ need a specialized C function to do it with the assistance of a JPEG-oriented library. This is in order to get RGB or RGBA data.\r\n\r\n@kovidgoyal I'm assuming my understanding of pixel formats is correct in that if we fed in any other image format that was not PNG, using `f=100` would not work, and we'd need to instead decode the base64 image data, figure out the format (i.e. bmp, jpeg, etc) and then extract a 24-bit RGB or a 32-bit RGBA set of data to feed in order for your protocol to work.\r\n\r\nI don't know what iterm2's graphics protocol supports as I've only tested with png and I don't see anything mentioned on their doc page. I also don't know what sixel supports or how it works since I haven't read the documentation yet, but I imagine given the age of sixel that we'd need to support image decoding of some kind to break out rgb/rgba data.",
            "created_at": "2024-11-30T21:29:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2509390983",
            "id": 2509390983,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6VkkSH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509390983/reactions"
            },
            "updated_at": "2024-11-30T21:29:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509390983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "On Sat, Nov 30, 2024 at 01:29:25PM -0800, Chip Senkbeil wrote:\n> @justinmk heads up, one complexity that we'll punt for now is supporting non-PNG images. I think we can write a pretty straightforward decoder for BMP & GIF, but JPEG is very complex and would /probably/ need a specialized C function to do it with the assistance of a JPEG-oriented library. This is in order to get RGB or RGBA data.\n>\n> @kovidgoyal I'm assuming my understanding of pixel formats is correct in that if we fed in any other image format that was not PNG, using `f=100` would not work, and we'd need to instead decode the base64 image data, figure out the format (i.e. bmp, jpeg, etc) and then extract a 24-bit RGB or a 32-bit RGBA set of data to feed in order for your protocol to work.\n\nYes, correct. You can use either imagemagick or the statically compiled\nkitten binary that comes as part of kitty to do this.\n\n>\n> I don't know what iterm2's graphics protocol supports as I've only tested with png and I don't see anything mentioned on their doc page. I also don't know what sixel supports or how it works since I haven't read the documentation yet, but I imagine given the age of sixel that we'd need to support image decoding of some kind to break out rgb/rgba data.\n\nsixel supports nothing, you need to convert every image format to the\nsixel format and transmit that.\n",
            "created_at": "2024-12-01T03:15:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2509545697",
            "id": 2509545697,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6VlKDh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509545697/reactions"
            },
            "updated_at": "2024-12-01T03:15:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509545697",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1308621?v=4",
                "events_url": "https://api.github.com/users/kovidgoyal/events{/privacy}",
                "followers_url": "https://api.github.com/users/kovidgoyal/followers",
                "following_url": "https://api.github.com/users/kovidgoyal/following{/other_user}",
                "gists_url": "https://api.github.com/users/kovidgoyal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kovidgoyal",
                "id": 1308621,
                "login": "kovidgoyal",
                "node_id": "MDQ6VXNlcjEzMDg2MjE=",
                "organizations_url": "https://api.github.com/users/kovidgoyal/orgs",
                "received_events_url": "https://api.github.com/users/kovidgoyal/received_events",
                "repos_url": "https://api.github.com/users/kovidgoyal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kovidgoyal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kovidgoyal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kovidgoyal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> This generally LGTM 🚀 , modulo the above comments. Thank you!\r\n> \r\n> If you are wondering how to write tests, my first thought is to look at `terminal/clipboard_spec.lua`\r\n> \r\n> https://github.com/neovim/neovim/blob/c7ec010ade0832e43c7a319ea69fae642771479d/test/functional/terminal/clipboard_spec.lua#L49\r\n> \r\n> \r\n> , and maybe `:help v:termresponse`, `:help TermResponse`.\r\n\r\nGreat, I'll take a look. I've written tests for plugins of mine using the busted/luassert libraries.\r\n\r\nAn open question for you and others is if there's a best practice for testing the images themselves. I can verify that we write escape codes to a terminal in a format that we expect. I don't know how - or if it matters - to test that an image actually shows up. Feels like that's out of scope beyond manually asserting that they work on a handful of terminals.",
            "created_at": "2024-12-02T16:03:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2511936495",
            "id": 2511936495,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6VuRvv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2511936495/reactions"
            },
            "updated_at": "2024-12-02T16:03:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2511936495",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> there's a best practice for testing the images themselves. I can verify that we write escape codes to a terminal in a format that we expect. I don't know how - or if it matters - to test that an image actually shows up. Feels like that's out of scope beyond manually asserting that they work on a handful of terminals.\r\n\r\nFor now it's fine to just test that the right escape codes surround a bunch of base64 bytes. ",
            "created_at": "2024-12-02T16:07:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2511953737",
            "id": 2511953737,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6VuV9J",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2511953737/reactions"
            },
            "updated_at": "2024-12-02T16:07:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2511953737",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Just a drive by comment on my concern over the inclusion of the iterm2 protocol. Disclaimer: I don't have any experience implementing it, but I have been through the protocol.\r\n\r\nSo...the kitty graphics protocol lets you transmit an image and very finely control it's placement, *including a clip region.* By specifying a clip region, it is trivial to \"scroll\" an image partially off the screen - you can specify the horizontal or vertical offset (in pixels) to clip the image.\r\n\r\nWithout this clip capability, it seems that neovim would need to have an image processing library as well to internally clip images for display? What would the plan be for an image which gets partially scrolled?",
            "created_at": "2024-12-12T18:40:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2539754154",
            "id": 2539754154,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6XYZKq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2539754154/reactions"
            },
            "updated_at": "2024-12-12T18:40:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2539754154",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/476352?v=4",
                "events_url": "https://api.github.com/users/rockorager/events{/privacy}",
                "followers_url": "https://api.github.com/users/rockorager/followers",
                "following_url": "https://api.github.com/users/rockorager/following{/other_user}",
                "gists_url": "https://api.github.com/users/rockorager/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rockorager",
                "id": 476352,
                "login": "rockorager",
                "node_id": "MDQ6VXNlcjQ3NjM1Mg==",
                "organizations_url": "https://api.github.com/users/rockorager/orgs",
                "received_events_url": "https://api.github.com/users/rockorager/received_events",
                "repos_url": "https://api.github.com/users/rockorager/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rockorager/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rockorager/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rockorager",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">Just a drive by comment on my concern over the inclusion of the iterm2 protocol\r\n\r\nI share this concern. The iTerm2 protocol is supported by only 2 terminals: iTerm2 and WezTerm. The latter also supports the kitty graphics protocol, meaning there is only one terminal for which supporting the iTerm image protocol would be useful.\r\n\r\nConsidering the additional complexity for supporting it, as well as the apparent feature gap mentioned here, I'd propose implementing support only for the kitty graphics protocol first.",
            "created_at": "2024-12-12T18:43:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2539759864",
            "id": 2539759864,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6XYaj4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2539759864/reactions"
            },
            "updated_at": "2024-12-12T18:43:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2539759864",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Considering the additional complexity for supporting it, as well as the apparent feature gap mentioned here, I'd propose implementing support only for the kitty graphics protocol first\r\n\r\nSGTM. The next step for this interface would be to emit a UI event so that GUIs can handle the data in their own way. Then we get coverage of all kitty-supporting terminals + GUIs, with minimal complexity. ",
            "created_at": "2024-12-13T12:07:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2541305368",
            "id": 2541305368,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6XeT4Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2541305368/reactions"
            },
            "updated_at": "2024-12-13T12:07:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2541305368",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for the feedback, folks. Been traveling for work last few weeks, and I may have some free time this weekend to start applying some of the recommendations.",
            "created_at": "2024-12-13T17:44:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2541950986",
            "id": 2541950986,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6XgxgK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 4,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2541950986/reactions"
            },
            "updated_at": "2024-12-13T17:44:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2541950986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > Just a drive by comment on my concern over the inclusion of the iterm2 protocol\r\n> \r\n> I share this concern. The iTerm2 protocol is supported by only 2 terminals: iTerm2 and WezTerm. The latter also supports the kitty graphics protocol, meaning there is only one terminal for which supporting the iTerm image protocol would be useful.\r\n> \r\n> Considering the additional complexity for supporting it, as well as the apparent feature gap mentioned here, I'd propose implementing support only for the kitty graphics protocol first.\r\n\r\nKonsole supports iTerm2 protocol too",
            "created_at": "2025-01-14T06:33:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2589139824",
            "id": 2589139824,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6aUyNw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2589139824/reactions"
            },
            "updated_at": "2025-01-14T06:33:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2589139824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Just a link to this comment pre-dating this pull request cause once again it was implied here more terminals support kitty than iTerm2 which does not seem to be the case:\r\nhttps://github.com/neovim/neovim/issues/30889#issuecomment-2505137135\r\nI count at least eight for iTerm2 there and wezterm supporting it would be news for me, but maybe I overlooked it.\r\nNow, the relevancy of them is probably a different story.\r\nIn the meantime another new terminal emulator got a bit of a spike: ghostty. I think this supports iTerm2 and kitty.",
            "created_at": "2025-03-04T20:07:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2698783357",
            "id": 2698783357,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6g3Cp9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2698783357/reactions"
            },
            "updated_at": "2025-03-04T20:15:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2698783357",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32062480?v=4",
                "events_url": "https://api.github.com/users/schrmh/events{/privacy}",
                "followers_url": "https://api.github.com/users/schrmh/followers",
                "following_url": "https://api.github.com/users/schrmh/following{/other_user}",
                "gists_url": "https://api.github.com/users/schrmh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/schrmh",
                "id": 32062480,
                "login": "schrmh",
                "node_id": "MDQ6VXNlcjMyMDYyNDgw",
                "organizations_url": "https://api.github.com/users/schrmh/orgs",
                "received_events_url": "https://api.github.com/users/schrmh/received_events",
                "repos_url": "https://api.github.com/users/schrmh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/schrmh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/schrmh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/schrmh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hey folks, heads up that I'll finally get around to reviewing and implementing some of the suggestions in the next couple of weeks. @justinmk where did we align on keeping/removing iTerm protocol support? And sixel support?\r\n\r\nMy perspective is that we figure out a good interface for new backends (like these) to be injected, but having them directly included here may be too much. I have iterm and kitty today, although seems like kitty has a lot of different nuances on how it's implemented.\r\n\r\nAnd from the feedback @gpanders has given, we can reuse parts of the existing codebase for terminal queries and other logic, which is nice. Will have to retest everything once those changes are made.",
            "created_at": "2025-03-04T21:05:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2698903750",
            "id": 2698903750,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6g3gDG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2698903750/reactions"
            },
            "updated_at": "2025-03-04T21:05:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2698903750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I made a quick and dirty integration into Neovide here https://github.com/neovide/neovide/pull/3039 to get some feel about the work done so far.\r\n\r\nHere are some observations and comments:\r\n1. If we have a better way of adding new custom backends, then a GUI implementation in Neovim might not be necessary. Although GUI events might have the advantage of being totally in sync with the UI protocol.\r\n3. Since Neovim supports connecting multiple UIs to the same instance, I think the backend should be connected to the UI connections instead of globally, with the possibility of connecting different backends to different UIs. It probably won't work perfectly, since UIs have different grid sizes with different aspect ratios, but I think it would still be decent enough.\r\n4. It should be possible to hide/destroy images\r\n5. I echo the request for supporting different units. Pixel units will most likely be needed to align multiple images perfectly\r\n6. You should be able to specify either with or height, otherwise it's impossible to render a resized image with the correct aspect ratio, especially when using grid-based sizes\r\n7. I think a z-index is needed, and just like the Kitty protocol, making it possible to render both in front and behind the text\r\n8. I think the image data and rendered instances should be separated, otherwise you will pay both transfer costs and memory for displaying the same image multiple times\r\n9. I think ids for both the data and the instances are needed. I had to hack some in my implementation. The data id could perhaps be some kind of hash, to untie it from lua objects, so that the user never has to care.\r\n\r\nFinally, given that this code, at least at the moment doesn't need to be in Neovim, I wonder if it would make sense to pull it out to a plugin for the time being? That way things can be iterated more quickly, it's easier for multiple people to contribute. It would also allow the API to be stabilized, and maybe get some real-world testing before it's integrated into Neovim (if it actually ever needs to be).",
            "created_at": "2025-03-05T15:21:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2701255114",
            "id": 2701255114,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6hAeHK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 11,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 7,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 18,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701255114/reactions"
            },
            "updated_at": "2025-03-05T15:21:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701255114",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @justinmk where did we align on keeping/removing iTerm protocol support? And sixel support?\r\n> \r\n> My perspective is that we figure out a good interface for new backends (like these) to be injected, but having them directly included here may be too much\r\n\r\nyeah, other backends/providers can be added later. definitely more important to get the interface right and focus on simplicity here, first.",
            "created_at": "2025-03-09T13:30:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2708858268",
            "id": 2708858268,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6hdeWc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2708858268/reactions"
            },
            "updated_at": "2025-03-09T13:30:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2708858268",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@fredizzimo those are great notes, would you mind creating a new issue to track that as \"phase 2\"? \r\n\r\n> 7\\. I think the image data and rendered instances should be separated, otherwise you will pay both transfer costs and memory for displaying the same image multiple times\r\n>\r\n> 8\\. I think ids for both the data and the instances are needed. I had to hack some in my implementation. The data id could perhaps be some kind of hash, to untie it from lua objects, so that the user never has to care.\r\n\r\nAll of your notes sound like non-blockers except these two ⬆️ .\r\n\r\n> Finally, given that this code, at least at the moment doesn't need to be in Neovim, I wonder if it would make sense to pull it out to a plugin for the time being?\r\n\r\nNo, plugins already exist, and now we're taking the next step. We can mark this as experimental (and prefix the interface with underscore, `vim.ui._img`), if we think there are one-way decisions that haven't been resolved.",
            "created_at": "2025-03-09T13:35:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2708860495",
            "id": 2708860495,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6hde5P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2708860495/reactions"
            },
            "updated_at": "2025-03-10T21:49:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2708860495",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm not interested in working for free for Neovim until there's some co-operation in the PRs and open issues to make Neovide work *correctly* with it, which has far higher priority than an image protocol IMO.",
            "created_at": "2025-03-10T06:09:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2709531328",
            "id": 2709531328,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6hgCrA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 2,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2709531328/reactions"
            },
            "updated_at": "2025-03-10T15:41:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2709531328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@fredizzimo your PRs aren't being ignored, I'm trying my best to attend to everything and prepare for the 0.11 release. I asked you to create an issue so your notes don't get lost here.",
            "created_at": "2025-03-10T15:10:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2710927984",
            "id": 2710927984,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6hlXpw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2710927984/reactions"
            },
            "updated_at": "2025-03-10T15:41:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2710927984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk, thank you!\r\n\r\nI was thinking that the upcoming 0.11 release was the reason, but a simple short response saying that would have cleared up a lot of confusion. I have been doing a lot of work with those, and was pushing for 0.11 myself, especially since I started working on them in the autumn already, but that's probably out of question now.\r\n\r\nI will create an issue after this PR has been iterated a bit more, since I don't know how big changes @chipsenkbeil is planning to make, and what remains after that.\r\n",
            "created_at": "2025-03-10T15:38:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2711015052",
            "id": 2711015052,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6hls6M",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2711015052/reactions"
            },
            "updated_at": "2025-03-10T15:38:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2711015052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@fredizzimo happy to collaborate with you on this. 😄 I wanted to do this in steps (each its own PR?)\r\n\r\n1. A static image you can place within neovim (supporting just PNG or whatever works by default in terminals)\r\n2. Support deleting the image placed within neovim\r\n3. Dynamically resize/move an image\r\n4. Injection of an image into a buffer within neovim (tracking its movement properly, possibly through the use of extmarks); this involves reflowing text around the image (in my mind) versus just covering it up or placing behind it. Think to the examples of images within markdown/org documents but with images as first-class citizens\r\n5. Multiple image type support (bmp, jpg at least) within neovim (seems like the common way is to farm out to imagemagick, which I'm not a fan of, but seems like what we'd have to do first)\r\n6. Video/gif support (there are reasons why this would be neat, but not a dealbreaker if we want to exclude this from neovim core)\r\n\r\nRight now, this PR represents step 1.\r\n\r\nNot saying all of these will make it in even as experiments, just thoughts on the priorities. This also doesn't discuss which terminals to support with which protocols underneath, so could imagine sliding those in at some point, too. So plenty that could be done inbetween or in place of the above.\r\n\r\nI've gotten very busy with work, which is why this was delayed. Even having to work today while I'm on vacation, so haven't been able to come back to this PR yet. Any thoughts on how you want to tackle this in a collaborative setting? Probably starting by opening an issue or something to track additional items per @justinmk suggestion would be good.",
            "created_at": "2025-03-10T15:49:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2711051292",
            "id": 2711051292,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6hl1wc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2711051292/reactions"
            },
            "updated_at": "2025-03-10T15:49:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2711051292",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@chipsenkbeil in item 1 of your list, should [items 7/8 from fredizzimo's list](https://github.com/neovim/neovim/pull/31399#issuecomment-2708860495) be part of that (this PR)?",
            "created_at": "2025-03-10T16:22:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2711146606",
            "id": 2711146606,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6hmNBu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2711146606/reactions"
            },
            "updated_at": "2025-03-10T16:23:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2711146606",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> @chipsenkbeil in item 1 of your list, should [items 7/8 from fredizzimo's list](https://github.com/neovim/neovim/pull/31399#issuecomment-2708860495) be part of that (this PR)?\r\n\r\nsure, I can take a stab at that as part of this PR.",
            "created_at": "2025-03-10T16:30:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2711169123",
            "id": 2711169123,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6hmShj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2711169123/reactions"
            },
            "updated_at": "2025-03-10T16:30:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2711169123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hey, look at that! Months later, I finally am getting around to applying the feedback from @justinmk and @gpanders while at the airport 😄 \r\n\r\nStill reading through all of the comments, but first cleaning things up. Going to see if I can entirely remove the terminal code in favor of `termcaps`, although I suspect I still need a helper function to move the cursor to properly place the image at a specific location.\r\n\r\n@fredizzimo @schrmh @brianhuster @rockorager I haven't forgotten all of your comments, either! Once the code is cleaned up more and we get as simplistic as I can make it, we can revisit if we just want kitty (seems like a push for yes for now?).\r\n\r\nI know that the iterm2 protocol is really limited, so I don't think we'd be able to get it to support the same functionality as kitty. It's also inconsistent in behavior from kitty on absolute image positioning as kitty renders an image over everything else whereas iterm2 scrolls the image out of view (and clears it) as you move lines around.\r\n\r\nFor sixel, this seems a bit more difficult for me to tackle in this first PR, so I'd propose that we instead keep things simple by me deleting iterm2 support, just focusing on kitty, and then new providers can be added in separate PRs as this evolves. And this SHOULD evolve quite a lot, btw.\r\n\r\nThoughts?",
            "created_at": "2025-04-29T20:16:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2840138206",
            "id": 2840138206,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6pSRHe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2840138206/reactions"
            },
            "updated_at": "2025-04-29T20:16:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2840138206",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Just a drive by comment on my concern over the inclusion of the iterm2 protocol. Disclaimer: I don't have any experience implementing it, but I have been through the protocol.\r\n> \r\n> So...the kitty graphics protocol lets you transmit an image and very finely control it's placement, _including a clip region._ By specifying a clip region, it is trivial to \"scroll\" an image partially off the screen - you can specify the horizontal or vertical offset (in pixels) to clip the image.\r\n> \r\n> Without this clip capability, it seems that neovim would need to have an image processing library as well to internally clip images for display? What would the plan be for an image which gets partially scrolled?\r\n\r\nCommenting here that I'm fine and most likely moving forward with removing iterm2 and just using kitty. I was already aware of limitations in iterm2 with cropping. My first thought is to farm externally to a process like image magick to crop, which I \"think\" can be done without creating a temporary image. So if we ever revisit supporting iterm2, that would be the approach I'd take.",
            "created_at": "2025-04-30T21:02:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2843273979",
            "id": 2843273979,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6peOr7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2843273979/reactions"
            },
            "updated_at": "2025-04-30T21:02:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2843273979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> My first thought is to farm externally to a process like image magick to crop, which I \"think\" can be done without creating a temporary image.\r\n\r\nJust FYI, on terminals with level 4 capabilities, you can crop an image by rendering it to an offscreen [page](https://vt100.net/docs/vt510-rm/PPA.html), and then [copying](https://vt100.net/docs/vt510-rm/DECCRA.html) the relevant segments back to the main page. This can also serve as a way to cache images to a certain extent. I'm not sure about the iterm image protocol, but I do know this works with Sixel. The only catch is that DEC pages may not interoperate very well with the Xterm alt buffer mode, assuming that's a requirement.",
            "created_at": "2025-05-01T01:18:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2843865119",
            "id": 2843865119,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6pgfAf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2843865119/reactions"
            },
            "updated_at": "2025-05-01T01:18:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2843865119",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
                "events_url": "https://api.github.com/users/j4james/events{/privacy}",
                "followers_url": "https://api.github.com/users/j4james/followers",
                "following_url": "https://api.github.com/users/j4james/following{/other_user}",
                "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/j4james",
                "id": 4181424,
                "login": "j4james",
                "node_id": "MDQ6VXNlcjQxODE0MjQ=",
                "organizations_url": "https://api.github.com/users/j4james/orgs",
                "received_events_url": "https://api.github.com/users/j4james/received_events",
                "repos_url": "https://api.github.com/users/j4james/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/j4james",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@gpanders I figured out why `io.stdout:write()` would not work and I needed to access the tty device directly. Using kitty's direct transfer - you send all of the image bytes directly via escape codes - seems to not work with `io.stdout:write()` but does work if you access and use the tty device directly.\r\n\r\nIf you switch to local filesystem access via a file transfer (not escape codes), then it works fine to use `io.stdout:write()`. I'll document this in the PR.",
            "created_at": "2025-05-03T23:33:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2848858123",
            "id": 2848858123,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6pziAL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2848858123/reactions"
            },
            "updated_at": "2025-05-03T23:33:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2848858123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk @fredizzimo I've rewritten the provider interface and implemented basic kitty graphics logic to hide an image. This provides a bit of an abstraction between the image (the data) and the placement by having two separate ids. Whenever you show an image, the provider is expected to generate some id that can be passed back to it later to hide/remove the image. Thoughts?\r\n\r\n@gpanders I've been able to fully remove the terminal helper code and just use `io.stdout:write()`. I did keep the cursor move, but removed the restore logic and instead - for the kitty provider - use an option to prevent the cursor moving like you alluded to.\r\n\r\nStill got some open questions in this code at this point, but ready for another skim to get thoughts on this one.\r\n\r\n```lua\r\n-- Load the image from disk. We assume all images are loaded from disk right now, and are PNGs\r\nlocal img = vim.ui.img.load(\"/Users/senkwich/projects/neovim-img-test/org-roam-logo.png\")\r\n\r\n-- Calls the underlying provider (kitty) to show the image, returning an id that can hide it later\r\nlocal id = img:show({\r\n    pos = { x = 8, y = 8 },\r\n    provider = \"kitty\",\r\n})\r\n\r\n-- For the test, as soon as any key is pressed, the image is hidden\r\nvim.on_key(function()\r\n    img:hide(id)\r\nend)\r\n\r\n```\r\n\r\n\r\nhttps://github.com/user-attachments/assets/65be17a6-b01d-411e-b571-72bad4fd8524\r\n\r\n",
            "created_at": "2025-05-04T00:18:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2848872677",
            "id": 2848872677,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6pzljl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2848872677/reactions"
            },
            "updated_at": "2025-05-04T00:18:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2848872677",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I added in some additional options as an experiment to mirror a bit of what it looks like the floating window api can do when it comes to the relative position of the image, now supporting `editor` (what you've seen thus far), `win` to display relative to a specific window, `cursor` to display relative to a specific window's cursor, and `mouse` to display relative to the  mouse (from last click, unless mousemoveevent is enabled).\r\n\r\nHere's a silly preview of an image being displayed where the mouse is presently, and then on move it hides the only image (in kitty, by deleting the placement) and then showing a new image where the cursor is. Seems fairly quick, which is nice.\r\n\r\nThe reason I did this was to potentially set up what the config might look like to set relative to a buffer, which would then rely on something like the kitty implementation using the unicode placement functionality.\r\n\r\n\r\nhttps://github.com/user-attachments/assets/49ced131-a483-4f3e-8d7b-11d74e794cc5\r\n\r\n",
            "created_at": "2025-05-04T20:02:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2849392477",
            "id": 2849392477,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6p1kdd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 5,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849392477/reactions"
            },
            "updated_at": "2025-05-04T20:02:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849392477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@gpanders does `TermResponse` work with CSI escape sequences? Seems like it's documented for just OSC and DCS?\r\n\r\nReason I ask is that one issue popped up with trying to support converting between pixel and cell units, and that's getting the screen size in pixels. I was trying to do this via `\\027[14t` to request the screen size in the form `\\027[4;888;999t` where 888 is height and 999 is width, but I'm not getting `TermResponse` to trigger nor do I see anything being printed out. Works fine with a lua shell printing it out via `io.stdout:write()`.\r\n\r\nI'm assuming it's filtered out as `TERMKEY_RES_NONE` from `termkey_interpret_string` based on  \r\n\r\nhttps://github.com/neovim/neovim/blob/0862c1036a8e45c594ed279dd4576719f93614c5/src/nvim/tui/input.c#L577\r\n\r\n### FFI alternative\r\n\r\n@justinmk the alternative way I've seen this done is using `ioctl` and `TIOCGWINSZ` via ffi calls. And you'd have to do something completely different to support windows. Example of `ioctl` usage from snacks:\r\n\r\nhttps://github.com/folke/snacks.nvim/blob/bc0630e43be5699bb94dadc302c0d21615421d93/lua/snacks/image/terminal.lua#L67-L120\r\n\r\n```lua\r\nfunction M.size()\r\n  if size then\r\n    return size\r\n  end\r\n  local ffi = require(\"ffi\")\r\n  ffi.cdef([[\r\n    typedef struct {\r\n      unsigned short row;\r\n      unsigned short col;\r\n      unsigned short xpixel;\r\n      unsigned short ypixel;\r\n    } winsize;\r\n    int ioctl(int, int, ...);\r\n  ]])\r\n\r\n  local TIOCGWINSZ = nil\r\n  if vim.fn.has(\"linux\") == 1 then\r\n    TIOCGWINSZ = 0x5413\r\n  elseif vim.fn.has(\"mac\") == 1 or vim.fn.has(\"bsd\") == 1 then\r\n    TIOCGWINSZ = 0x40087468\r\n  end\r\n\r\n  local dw, dh = 9, 18\r\n  ---@class snacks.image.terminal.Dim\r\n  size = {\r\n    width = vim.o.columns * dw,\r\n    height = vim.o.lines * dh,\r\n    columns = vim.o.columns,\r\n    rows = vim.o.lines,\r\n    cell_width = dw,\r\n    cell_height = dh,\r\n    scale = dw / 8,\r\n  }\r\n\r\n  pcall(function()\r\n    ---@type { row: number, col: number, xpixel: number, ypixel: number }\r\n    local sz = ffi.new(\"winsize\")\r\n    if ffi.C.ioctl(1, TIOCGWINSZ, sz) ~= 0 or sz.col == 0 or sz.row == 0 then\r\n      return\r\n    end\r\n    size = {\r\n      width = sz.xpixel,\r\n      height = sz.ypixel,\r\n      columns = sz.col,\r\n      rows = sz.row,\r\n      cell_width = sz.xpixel / sz.col,\r\n      cell_height = sz.ypixel / sz.row,\r\n      -- try to guess dpi scale\r\n      scale = math.max(1, sz.xpixel / sz.col / 8),\r\n    }\r\n  end)\r\n\r\n  return size\r\nend\r\n```",
            "created_at": "2025-05-04T22:58:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2849484377",
            "id": 2849484377,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6p165Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849484377/reactions"
            },
            "updated_at": "2025-05-04T23:24:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849484377",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@gpanders @justinmk in terms of retrieving the terminal size in pixels, it seems like https://github.com/neovim/neovim/pull/32408 was already started earlier this year, but per @fredizzimo it might need more work to be flexible enough for 3rd party UIs like neovide.\r\n\r\nI could try to work on incorporating a single new API function that retrieves the rows & columns in pixel form - was working on code that was compatible with Windows alongside all of those that support `ioctl` usage - but wasn't sure if that was appropriate for this PR or even needed in comparison to extending the dimensions reported  by the `RemoteUI` struct.\r\n\r\nThoughts on this one? For now, I can just make this PR error when you try to provide a unit that isn't the one we need:\r\n\r\n1. For image placement, size & position would use cells\r\n2. For image cropping, would use pixels\r\n\r\ncc @tbung ",
            "created_at": "2025-05-07T08:35:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2857672936",
            "id": 2857672936,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qVKDo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2857672936/reactions"
            },
            "updated_at": "2025-05-07T08:36:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2857672936",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I will read through the rest and look at your changes a bit later, but a quick comment right now (edit: it wasn't so quick and short)\r\n\r\nI suggest that you use the same units as the kitty image protocol. That allows for pixel perfect alignment of images next to each other for example. And works for both placeholders and absolute coordinates\r\n\r\n|  key  | type  | default  | description\r\n|--|--|--|--|\r\n| x | Positive integer | 0 | The left edge (in pixels) of the image area to display |\r\n| y | Positive integer | 0 | The top edge (in pixels) of the image area to display |\r\n| w | Positive integer | 0 | The width (in pixels) of the image area to display. By default, the entire width is used |\r\n| h | Positive integer | 0 | The height (in pixels) of the image area to display. By default, the entire height is used |\r\n| X | Positive integer | 0 | The x-offset within the first cell at which to start displaying the image |\r\n| Y | Positive integer | 0 | The y-offset within the first cell at which to start displaying the image |\r\n| c | Positive integer | 0 | The number of columns to display the image over | \r\n| r | Positive integer | 0 | The number of rows to display the image over |\r\n\r\nFor example to let's say you grid width is 9 pixels and you want to place the image from pixel 95 to 133, cropping the right of the image, you could do this\r\n\r\n* Set the cursor position to 10,\r\n* Set X to 5,\r\n* Set c to 5 (column 15 - 10)\r\n* Set w to 38 (133 - 95)\r\n\r\nUnfortunately, the Kitty protocol does not have full control of the scaling of the image. So, in many cases the image probably has to be resized on the Neovim side before being placed. But Neovide for example could easily do this on the fly using the GPU, and I guess that's something Kitty could support as well. \r\n\r\nThere's some other complication, the cell width in Neovide for example is fractional. But we recently implemented support for rendering box drawing characters into an integer-based grid. So, at least for us using integer pixels is viable, as long as the protocol rounds the coordinate the same way, it needs to round both the start and end pixel in each cell. That way images can be displayed next to box drawing characters without gaps, or with exact pixel gaps if desired.\r\n\r\nBased on all this, I actually suggest a simpler low level struct, the struct would be just this, **all coordinates in pixels**\r\n```\r\npos_x -- Relative for unicode placeholders, otherwise absolute,\r\npos_y ,\r\nwidth,\r\nheight,\r\nsrc_pos_x,\r\nsrc_pos_y,\r\nsrc_width,\r\nsrc_height,\r\n-- Maybe some filtering mode settings, to control how the image is scaled, different types of images and up and down scaling looks better with different settings.\r\n```\r\n\r\nIf scaling needs to be done due to mismatch between `width`, and `src_width` for example, the protocol can do it internally for Kitty, keep in mind that it does that in a limited way when either `width` or `height` is unspecified.  It can be sent directly to UIs and let them do the resizing as needed.\r\n\r\nOn top of this, there's a more powerful API for filing the struct, giving the desired number of cells for example.\r\n\r\nThe reason for letting the Neovim, or actually the plugin that uses the image protocol to be in charge of the exact pixel layout is important, since the number of cells used is dependent on the cell aspect ratio and the image aspect ratio, and that information can only be used before the actual placement.  If the cells were square, it would be easy to allow specifying fractional cells for example and just use that everywhere.\r\n\r\n",
            "created_at": "2025-05-07T10:00:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2857951189",
            "id": 2857951189,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qWN_V",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2857951189/reactions"
            },
            "updated_at": "2025-05-07T10:01:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2857951189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I forgot to say, that two important use cases for the x and y offsets in pixels are \r\n* Right aligning the image to a cell\r\n* Center the image in the cells",
            "created_at": "2025-05-07T10:08:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2857979391",
            "id": 2857979391,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qWU3_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2857979391/reactions"
            },
            "updated_at": "2025-05-07T10:08:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2857979391",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm still interested in finishing up #32408, I am somewhat waiting on #33392 so the API changes can be done properly, but I guess I can work on it now if people already want to make use of it unmerged.",
            "created_at": "2025-05-07T10:54:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2858109303",
            "id": 2858109303,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qW0l3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2858109303/reactions"
            },
            "updated_at": "2025-05-07T10:54:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2858109303",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4084982?v=4",
                "events_url": "https://api.github.com/users/tbung/events{/privacy}",
                "followers_url": "https://api.github.com/users/tbung/followers",
                "following_url": "https://api.github.com/users/tbung/following{/other_user}",
                "gists_url": "https://api.github.com/users/tbung/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tbung",
                "id": 4084982,
                "login": "tbung",
                "node_id": "MDQ6VXNlcjQwODQ5ODI=",
                "organizations_url": "https://api.github.com/users/tbung/orgs",
                "received_events_url": "https://api.github.com/users/tbung/received_events",
                "repos_url": "https://api.github.com/users/tbung/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tbung/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tbung/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tbung",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@fredizzimo thanks for the insight! On the same page about the flexibility needed, especially how the image placement doesn't need to be restricted to grid cells or integer-based units.\r\n\r\nI do think that having a simplistic ability to convert between cell and pixel units is important as many consumers of the image API - not providers, but the users - will probably think in terms of cells/grid when it comes to where they want to place their images when they're not being embedded into a buffer's content. So they should be able to pass along, \"I want to place my picture starting at row 5, column 3\r\n and have neovim - or maybe the underlying attached UI - do the conversion for them.\r\n\r\nRight now, I have (non-working) code to support conversions where providers can convert between cell units and pixel units (either direction). So a provider could choose to work with just cell units if they needed to restrict to a grid, but neovide and others can work entirely with pixel units if they'd like, even if the user of the image API is supply things in cells.\r\n\r\nIt works by specifying a unit, creating a `vim.ui.img.Size`, `vim.ui.img.Position`, or `vim.ui.img.Region` through specialized functions:\r\n\r\n```lua\r\nlocal pos = vim.ui.img.new_position(x, y, 'cell')\r\nlocal pos_px = pos:to_pixels()\r\nlocal pos_cell = pos_px:to_cells()\r\n\r\n-- Same for a size or a rectangular region\r\nlocal size = vim.ui.img.new_size(width, height, 'pixel')\r\nlocal size_cell = size:to_cells()\r\nlocal size_px = size:to_pixels()\r\n```\r\n\r\nThe dimensions provided through `vim.ui.img.Opts` would have a default - right now, cells - but could be explicitly set by the user if they know which one they want to consider.\r\n\r\n```lua\r\nlocal img = vim.ui.img.load('/path/to/img.png')\r\nlocal id = img:show({\r\n  pos = { x = 5, y = 8 },\r\n})\r\n\r\n-- The above is the same as\r\nlocal id = img:show({\r\n  pos = vim.ui.img.new_position(5, 8, 'cell'),\r\n})\r\n\r\n-- And so when a provider gets this as part of the options, they can do\r\nlocal function provider_show(self, img, opts)\r\n  -- Guarantee that to the provider we're working with pixel units regardless of whether\r\n  -- they were specified as pixels by the user\r\n  local pos = opts.pos:to_pixels()\r\n\r\n  -- ...\r\nend\r\n```\r\n\r\n### Platform support for pixel dimensions\r\n\r\nIf we have a way to get the pixel dimensions across all supported neovim platforms consistently, then I think having the units default to pixels (internally) would be fine, but I don't know if that's the case even with #32408. \r\n\r\nTo my understanding, `ioctl` via `TIOCSWINSZ` is supported on the major BSDs, MacOS, Linux/Android, and Solaris. And there's some code I was working on that would support traditional Windows console (even if the kitty graphics api itself isn't implemented in that terminal, I think sixel is??). You can alternatively use `CSI 14 t` to request the dimensions in pixels, which seems to be compatible with many different terminals, but neovim consumes the response without a way to retrieve it unless you go straight to the tty (and that has been flaky for me). cc @gpanders \r\n\r\nAre there any other platforms that would be missing for neovim these days? I don't recall what it supports other than the above, and I thought it had reduced older system support compared to vim.\r\n\r\nThe reason I ask is that unless we can get the ability to retrieve these dimensions consistently - maybe included as part of the attached UI spec - it's going to make it difficult for users or providers to manage the calculations needed to figure out pixel placement, right? It's why every plugin I've seen that works with images that wants to do pixel-oriented placement (or at least know the true cell pixel width/height) has to farm the work externally through `ffi` (snacks and I believe image.nvim do this), [`CSI 14 t`](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_) ([Windows Terminal support](https://github.com/microsoft/terminal/issues/8581#issuecomment-2395553315), most xterm-compatible terminals), or some external program.\r\n\r\n### PR #32408\r\n\r\n@tbung I haven't looked closely at your PR other than seeing it introduces `ioctl(..., TIOCSWINSZ, ...)` and extends some of the APIs to supply pixel dimensions on resize, etc. What is the blocker with the API contract bit? Would there be any way to split the PR into a smaller \"retrieve the pixel width & height\" PR first and then the other features second to try to get that in earlier?\r\n\r\nI'd love to have it where I could make a call to `vim.api.nvim_list_uis()` and read pixel width & height fields to use to determine the (fractional) cell pixel width & height.\r\n\r\n@fredizzimo assuming neovide would be able to supply this from its side, and then from more traditional terminals we'd be able to use the above `TIOCSWINSZ` or some Windows API calls like [GetConsoleScreenBufferInfo](https://learn.microsoft.com/en-us/windows/console/getconsolescreenbufferinfo) and [GetConsoleFontSize](https://learn.microsoft.com/en-us/windows/console/getconsolefontsize) to figure out the grid size and pixels per character to get the total pixel dimensions.",
            "created_at": "2025-05-08T08:56:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2862282857",
            "id": 2862282857,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qmvhp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2862282857/reactions"
            },
            "updated_at": "2025-05-08T09:21:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2862282857",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@chipsenkbeil If you're planning to use ioctl, other than the fact that it isn't universally supported (even on Linux), you should also be aware that the dimensions returned may include padding, so if you're using it to calculate the cell size, the result will occasionally be incorrect.\r\n\r\nFor example, imagine a cell height of 20 pixels on a terminal with 24 rows, so the height of the text area is 480 pixels. If that terminal has padding of 12 pixels (e.g. `xterm -b 12`), then the ioctl-reported height could be 504 pixels. So if you're dividing that height by the number of rows to calculate the cell height, you're going to get the wrong answer (504/24 = 21).\r\n\r\nThat's only off by 1, but if you're using the cell height to determine the pixel height needed to fill a certain row count, it can easily end up far out of range, and break the layout of the page. This may be a rare edge case, but it can happen.\r\n\r\nSo I think the safest way to calculate the cell size is with a `CSI 16 t` query, assuming that's supported and you can get queries to work in neovim. Using `CSI 14 t` might be the next safest option, but there may still be some terminals that return a padded size for that too, so it has similar risks to ioctl.",
            "created_at": "2025-05-08T11:09:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2862658283",
            "id": 2862658283,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qoLLr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2862658283/reactions"
            },
            "updated_at": "2025-05-08T11:09:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2862658283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
                "events_url": "https://api.github.com/users/j4james/events{/privacy}",
                "followers_url": "https://api.github.com/users/j4james/followers",
                "following_url": "https://api.github.com/users/j4james/following{/other_user}",
                "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/j4james",
                "id": 4181424,
                "login": "j4james",
                "node_id": "MDQ6VXNlcjQxODE0MjQ=",
                "organizations_url": "https://api.github.com/users/j4james/orgs",
                "received_events_url": "https://api.github.com/users/j4james/received_events",
                "repos_url": "https://api.github.com/users/j4james/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/j4james",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I would assume that all terminals that implements the Kitty protocol supports getting the window size, and without padding, since that's a requirement of the protocol https://sw.kovidgoyal.net/kitty/graphics-protocol/#getting-the-window-size\r\n\r\nAllthough Ghostty doesn't, but I think that can be considered a bug. https://github.com/ghostty-org/ghostty/discussions/4265",
            "created_at": "2025-05-08T11:21:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2862697048",
            "id": 2862697048,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qoUpY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2862697048/reactions"
            },
            "updated_at": "2025-05-08T11:21:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2862697048",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That said, if the UI supports it, it would be good to be able for the GUI to pass the padding as well and that it's a usable area for image display. And perhaps also for terminals, if a protocol extension is made for it.\r\n\r\n",
            "created_at": "2025-05-08T11:30:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2862717015",
            "id": 2862717015,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qoZhX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2862717015/reactions"
            },
            "updated_at": "2025-05-08T11:30:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2862717015",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes, the PR should also make `vim.api.nvim_list_uis()` return pixel sizes (it doesn't yet because I was mostly concerned with the builtin terminal properly responding to `ioctl`). I don't think it can be decoupled from API changes because `nvim_ui_attach` and `nvim_ui_try_resize` need to accept pixel sizes from a UI, and I was told this should be done through optional arguments as per the proposed API changes. \r\n\r\nWhile it  does currently use `ioctl` on the TUI side to get the sizes, it should then be easy to expand on that and include stuff that works on windows or uses CSI queries. Also, since UIs report their pixel size it completely abstracts that concern away for this implementation of an image protocol.\r\n\r\nI'll just finish up the PR over the weekend under the assumption that #33392 or something similar gets merged at some point and put pixel sizes into optional argument dicts for existing APIs and also make `vim.api.nvim_list_uis()` report pixel sizes. We can then have another discussion on getting that merged.",
            "created_at": "2025-05-08T11:49:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2862761220",
            "id": 2862761220,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qokUE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2862761220/reactions"
            },
            "updated_at": "2025-05-08T11:49:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2862761220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4084982?v=4",
                "events_url": "https://api.github.com/users/tbung/events{/privacy}",
                "followers_url": "https://api.github.com/users/tbung/followers",
                "following_url": "https://api.github.com/users/tbung/following{/other_user}",
                "gists_url": "https://api.github.com/users/tbung/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tbung",
                "id": 4084982,
                "login": "tbung",
                "node_id": "MDQ6VXNlcjQwODQ5ODI=",
                "organizations_url": "https://api.github.com/users/tbung/orgs",
                "received_events_url": "https://api.github.com/users/tbung/received_events",
                "repos_url": "https://api.github.com/users/tbung/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tbung/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tbung/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tbung",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I would assume that all terminals that implements the Kitty protocol supports getting the window size, and without padding, since that's a requirement of the protocol\r\n\r\nThat's certainly not the case at the moment, and some terminals have been using ioctl to report the window size for more than 30 years now, so I'd be surprised if they *all* could be convinced to change their implementation just because Kitty says so. Although if your plan for this API is _only_ to support Kitty, and _only_ in situations where ioctl works, then maybe that's not a problem.\r\n",
            "created_at": "2025-05-08T13:47:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2863133590",
            "id": 2863133590,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qp_OW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863133590/reactions"
            },
            "updated_at": "2025-05-08T13:47:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863133590",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
                "events_url": "https://api.github.com/users/j4james/events{/privacy}",
                "followers_url": "https://api.github.com/users/j4james/followers",
                "following_url": "https://api.github.com/users/j4james/following{/other_user}",
                "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/j4james",
                "id": 4181424,
                "login": "j4james",
                "node_id": "MDQ6VXNlcjQxODE0MjQ=",
                "organizations_url": "https://api.github.com/users/j4james/orgs",
                "received_events_url": "https://api.github.com/users/j4james/received_events",
                "repos_url": "https://api.github.com/users/j4james/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/j4james",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I think it's pretty much agreed on here to only support the Kitty protocol, with possible other protocols following, if an implementation is possible. \r\n\r\nAnd the ability to get the window size and cell size, is specified by the protocol https://sw.kovidgoyal.net/kitty/graphics-protocol/#getting-the-window-size.\r\n> In order to know what size of images to display and how to position them, the client must be able to get the window size in pixels and the number of cells per row and colum\r\n\r\nSo, a terminal that returns wrong, has a buggy implementation of the Kitty protocol. They could of course also provide some custom extension to get it, but they do need to provide it somehow. And in that case the support should be integrated into https://github.com/neovim/neovim/pull/32408",
            "created_at": "2025-05-08T14:11:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2863220452",
            "id": 2863220452,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qqUbk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863220452/reactions"
            },
            "updated_at": "2025-05-08T14:11:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863220452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "16t is not going to work, its not implemented in many terminals, libvte based ones and alacritty for two prominent examples off the top of my head (though its been a while since I checked, so check for yourself). There is a reason I chose to recommend 14t rather than 16t if you must use an escape code for this.\r\n\r\nBut I strongly suggest you use the ioctl (except on windows). It is a bug for any terminal that claims to support the kitty protocol to not report the window size as cell_size * num_cells. It makes zero sense for terminals to report window padding to terminal programs anyway, they might as well be adding in window decoration sizes and random numbers as well if they are going to do that. Since terminal programs cannot draw onto or in any way affect the window padding, they shouldn't be knowing about it. Just like they dont know how large the OS window's titlebar is. ",
            "created_at": "2025-05-08T14:11:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2863221800",
            "id": 2863221800,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qqUwo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863221800/reactions"
            },
            "updated_at": "2025-05-08T14:11:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863221800",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1308621?v=4",
                "events_url": "https://api.github.com/users/kovidgoyal/events{/privacy}",
                "followers_url": "https://api.github.com/users/kovidgoyal/followers",
                "following_url": "https://api.github.com/users/kovidgoyal/following{/other_user}",
                "gists_url": "https://api.github.com/users/kovidgoyal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kovidgoyal",
                "id": 1308621,
                "login": "kovidgoyal",
                "node_id": "MDQ6VXNlcjEzMDg2MjE=",
                "organizations_url": "https://api.github.com/users/kovidgoyal/orgs",
                "received_events_url": "https://api.github.com/users/kovidgoyal/received_events",
                "repos_url": "https://api.github.com/users/kovidgoyal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kovidgoyal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kovidgoyal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kovidgoyal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think there's at least one use case for *additionally* being able to query the padding and displaying images there. That would be to show background images if the terminal or GUI don't support it natively or when it only can show file backed images. If the image protocol supports, there could be dynamic backgrounds, or even animations.\r\n\r\nWith the kitty protocol that's impossible though (with the major limitation of the coordinates having to be positive), but in Neovide it would be cool to support this. \r\n\r\nBut that's just a nice to have, not a requirement. I think we, will implement dynamic font sizing at some point to get rid of the border completely by slightly scaling the fonts, which probably is better for most, but with slightly inconsistent font sizes  and/or spacing.",
            "created_at": "2025-05-08T14:54:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2863347668",
            "id": 2863347668,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qqzfU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863347668/reactions"
            },
            "updated_at": "2025-05-08T14:54:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863347668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "At this point, there are three things I'm trying to accomplish with this PR:\r\n\r\n1. **API:** Establish a generic interface (that can be expanded) to support displaying, updating, and hiding images. And try to get it to be simple enough to extend by 3rd parties (providers) and b easily used by consumers. This means figuring out what neovim needs to track & manage versus what is the responsibility of each provider.\r\n2. **Information:** Incorporate a consistent way to get the basic information about the user interface to support (1), which in this case means a way to convert between cells and pixels. Ideally, this is **abstract**, meaning that whether it uses `ioctl`, `CSI 14 t`, `CSI 16 t`, or some other method should not matter (and can change), only that we have a way to get the information needed (possibly through `nvim_list_uis()`). Hopefully @tbung 's work to introduce pixel dimensions - even if the implementation may not be correct/available for everyone immediately - unblocks here.\r\n3. **Implementation:** Provide a basic implementation of the provider using kitty's graphics protocol to both serve as a reference and support a variety of modern terminals where neovim is used today with the understanding that someone else (or me) could come in later with an additional PR to add a sixel provider, or other core support if it makes sense.\r\n\r\n@fredizzimo @kovidgoyal @j4james thoughts on how we stand (at the moment) when it comes to the above three? \r\n\r\n@fredizzimo I know you're pushing for pixels as the preferred unit for internal structures. Thoughts on the conversion approach assuming that implementations correctly can get the width/height pixel dimensions and use that to translate into the fractional column and row dimensions? How does the provider interface look if neovide was to incorporate it?\r\n\r\n@kovidgoyal is the kitty provider following best practices when it comes to displaying and hiding images? I know from reading kitty's docs that there's a limit to the amount of images that can be stored, and I think snacks.nvim maintains a LRU cache to discard images over time, but that seemed a lot more complex than needed for a first attempt.\r\n\r\n@j4james kitty is the first implementation. There seems like there's interest for sixel by others, and even a renewed discussion about iterm2's protocol, but I think for this PR it makes sense to focus on a single provider. We build out an API that's simple, and then when a new PR comes in that may uncover limitations that need to be removed to support it. Any thoughts on the PR today?",
            "created_at": "2025-05-08T15:57:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2863556079",
            "id": 2863556079,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qrmXv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863556079/reactions"
            },
            "updated_at": "2025-05-08T15:57:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863556079",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "On Thu, May 08, 2025 at 08:57:31AM -0700, Chip Senkbeil wrote:\n> @kovidgoyal is the kitty provider following best practices when it comes to displaying and hiding images? I know from reading kitty's docs that there's a limit to the amount of images that can be stored, and I think snacks.nvim maintains a LRU cache to discard images over time, but that seemed a lot more complex than needed for a first attempt.\n\nSorry, I haven't had time to review your actual code, but, in general,\nthe kitty protocol recommends that terminals store at least a few\nscreenfuls of images, in kitty that's 320MB per screen. See\nhttps://sw.kovidgoyal.net/kitty/graphics-protocol/#image-persistence-and-storage-quotas\n\nTo be maximally robust a terminal program should use the report features\nof the protocol to check if a previously displayed image is still\navailable when it is redisplayed and if not resend it. But, in practice,\nfor most use cases, assuming the last N images are available and\nresending any older than that is fine. In all the years since this\nfeature has been available in kitty, I haven't heard of any terminal\nprogram having cache eviction issues displaying images.\n\nCertainly, for a first attempt you can just display images as you get\nthem and if they need to be redisplayed, assume they are still available\nunless N newer images have been displayed since they were first\ntransmitted. This will work fine in all except a few edge cases.\n\nYou could just use a rough heuristic like width*height*4*N > 100MB ->\nresend, otherwise just redisplay. Experience with other terminal\nemulators will allow you to adjust that heuristic in the future if\nneeded. Or for a MVP always resend.\n",
            "created_at": "2025-05-08T16:12:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2863597474",
            "id": 2863597474,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qrwei",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863597474/reactions"
            },
            "updated_at": "2025-05-08T16:12:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863597474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1308621?v=4",
                "events_url": "https://api.github.com/users/kovidgoyal/events{/privacy}",
                "followers_url": "https://api.github.com/users/kovidgoyal/followers",
                "following_url": "https://api.github.com/users/kovidgoyal/following{/other_user}",
                "gists_url": "https://api.github.com/users/kovidgoyal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kovidgoyal",
                "id": 1308621,
                "login": "kovidgoyal",
                "node_id": "MDQ6VXNlcjEzMDg2MjE=",
                "organizations_url": "https://api.github.com/users/kovidgoyal/orgs",
                "received_events_url": "https://api.github.com/users/kovidgoyal/received_events",
                "repos_url": "https://api.github.com/users/kovidgoyal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kovidgoyal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kovidgoyal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kovidgoyal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@chipsenkbeil, I'm not sure if I can answer the first three questions yet. I need to take a deeper look at the current code, and possibly attempt to integrate it to Neovide (which has been stalled, both due to lack of time, and limitations of the rust messagepack protocol, it's virtually unmaintained so I'm doing some fixes myself)\r\n\r\n> @fredizzimo I know you're pushing for pixels as the preferred unit for internal structures. Thoughts on the conversion approach assuming that implementations correctly can get the width/height pixel dimensions and use that to translate into the fractional column and row dimensions? \r\n\r\nI was thinking that we should expose an API to manipulate the image, for things like you currently use internally like `pixels_to_cells/cells_to_pixels`. There are so many different use cases, so it's probably better to provide a quite low level, but complete API. I higher level one that builds on that could be added in the future. I expect that applications displaying images will need to take both the image raw sizes, and the cell sizes into account when displaying them.\r\n\r\nI also think that we expose the pixel values directly, if someone prefers to do all the calculations themself.\r\n\r\nBut I think your approach of supporting coordinates to functions like `new_position` is also a reasonable approach in many cases.\r\n\r\nAlso, note that the cell dimensions will not only have to be pixels, but also support fractional pixels. But as I mentioned earlier, the coordinates can be rounded before storing in the image, so that only contains integers. Currently the client width is also fractional in Neovide, but that could be changed by slightly adjusting the font size so that the last cell ends exactly on a full pixel.\r\n\r\n> How does the provider interface look if neovide was to incorporate it?\r\n\r\nI know better after trying it, but I don't see any problems currently. It could perhaps be a generic RPC provider, so we don't need to include any UI specific code in Neovim itself. Each of the function could call an RPC on a channel. And then some register function like `register_image_provide(channel)`",
            "created_at": "2025-05-08T16:55:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2863704592",
            "id": 2863704592,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qsKoQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863704592/reactions"
            },
            "updated_at": "2025-05-08T16:55:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863704592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> 16t is not going to work, its not implemented in many terminals\r\n\r\n@kovidgoyal I've got 17 terminals that support `CSI 16t`, which I think is actually more than the number that support `ioctl`. But I'm not suggesting you rely on `16t` exclusively - if it's not supported then you can fallback to `14t` or `ioctl`. I just think it makes sense to use values that are known to be correct in preference to estimates that could potentially be wrong.\r\n\r\n> they might as well be adding in window decoration sizes and random numbers as well if they are going to do that.\r\n\r\nI think some actually do. Because the usage of these reports (both `CSI 14t` and `ioctl`) predates the use of images in the terminal (at least Linux terminals). I suspect they were originally used to help position the terminal relative to the larger desktop screen area, which is why there are also sequences for moving the window, and querying the screen size.\r\n\r\n> Establish a generic interface (that can be expanded) to support displaying, updating, and hiding images. \r\n\r\n@chipsenkbeil The concept of hiding images doesn't really exist outside of the Kitty protocol. For Sixel (and I assume also iTerm), you hide an image in the same way you hide text - by writing over it. For example, you might popup a window with an image in it, and you hide that window by redrawing the text that was beneath it. The image doesn't require any special handling. I don't see being able to hide images independently as being a particular useful concept, but maybe there's something I'm missing.\r\n\r\nAnd this is why I think it would have made more sense to design this protocol around a set of common use cases you actually expect it to handle, and then figure out how the different protocols can support those use cases. Making it a one-for-one mapping of the Kitty image protocol (which is what some people seem to be pushing) is just going leave you with something that only works on Kitty. Which is fine if that's your goal, but not a great idea if you want broader terminal support.",
            "created_at": "2025-05-08T17:12:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2863741749",
            "id": 2863741749,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qsTs1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863741749/reactions"
            },
            "updated_at": "2025-05-08T17:12:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863741749",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
                "events_url": "https://api.github.com/users/j4james/events{/privacy}",
                "followers_url": "https://api.github.com/users/j4james/followers",
                "following_url": "https://api.github.com/users/j4james/following{/other_user}",
                "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/j4james",
                "id": 4181424,
                "login": "j4james",
                "node_id": "MDQ6VXNlcjQxODE0MjQ=",
                "organizations_url": "https://api.github.com/users/j4james/orgs",
                "received_events_url": "https://api.github.com/users/j4james/received_events",
                "repos_url": "https://api.github.com/users/j4james/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/j4james",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The concept of hiding images doesn't really exist outside of the Kitty protocol. For Sixel (and I assume also iTerm), you hide an image in the same way you hide text - by writing over it. For example, you might popup a window with an image in it, and you hide that window by redrawing the text that was beneath it. The image doesn't require any special handling.\r\n\r\nFrom my perspective, that's for the underlying provider to implement. If the way it does that is to write over it, that's fine. From a consumer's perspective, I don't want to have to maintain or think about that logic, and instead need the ability to hide an image that I have displayed at some point.\r\n\r\nThis may be because I displayed an image on top of neovim and need to clear it later. Or I was having an image visible alongside a buffer. Could be a lot of reasons, but I already faced the problem of having a permanently-visible image that I could not clear.\r\n\r\nSo how it's done - whether having some specific command in the protocol like kitty, or writing over it in the case of sixel - seems more like a provider implementation detail. But this does seem like a necessary feature to me from an API perspective, so I guess we'd disagree on this one. 😄 \r\n\r\n> And this is why I think it would have made more sense to design this protocol around a set of common use cases you actually expect it to handle, and then figure out how the different protocols can support those use cases.\r\n\r\nThat's what I'm trying to do, hopefully! 😄 Hence me attempting to make sure that @fredizzimo 's concerns about factoring in frontend UIs like neovide are heard and factored into this PR. It just so happens that the kitty protocol is the one that addresses the use cases that I had in mind, at least for a basic version of the API, and is supported by several of the advanced terminals (ghostty, wezterm, kitty) that I've actively used at work and home. I was trying to do the same with iterm2 when I first started this PR, but learned as I tried to keep both providers (kitty and iterm2) in sync that iterm2's protocol didn't give enough control (to my knowledge) to provide basic graphics support in a way that neovim could offer for the use cases I need and have seen from others.\r\n\r\nThe part I haven't figured out generically (yet) is embedding images within a buffer that reflows text around them, which is what I'd want when viewing markdown and orgmode documents with embedded images. Kitty does this through unicode placeholders such that the image follows the placeholders as they move around. Maybe we use extmarks to inject them in the kitty provider, but I don't know yet what should be the responsibility of neovim and what should be the responsibility of a provider in this use case.\r\n\r\n@fredizzimo I think you shared thoughts earlier on the approach that would support neovide. Would you mind resharing that - a link to the comment above - or restating your thoughts on this matter? Anything changed in your thoughts here since last time?\r\n\r\n> Certainly, for a first attempt you can just display images as you get\r\nthem and if they need to be redisplayed, assume they are still available\r\nunless N newer images have been displayed since they were first\r\ntransmitted. This will work fine in all except a few edge cases.\r\n\r\n@kovidgoyal thanks for the feedback! No worries that you haven't reviewed the PR's implementation of kitty's protocol. Your insight so far is helpful in validating some of the approaches I've seen. Will probably start with something like this, unless querying image availability isn't too difficult in which I may take that approach right away.\r\n\r\n> I was thinking that we should expose an API to manipulate the image, for things like you currently use internally like pixels_to_cells/cells_to_pixels. There are so many different use cases, so it's probably better to provide a quite low level, but complete API. I higher level one that builds on that could be added in the future. I expect that applications displaying images will need to take both the image raw sizes, and the cell sizes into account when displaying them.\r\n>\r\n> I also think that we expose the pixel values directly, if someone prefers to do all the calculations themself.\r\n\r\n@fredizzimo I guess we could expose the conversion methods. If someone wanted to do it themselves, do you think that's necessary or would just having the information directly exposed within `nvim_list_uis()` be good enough? What would neovide use if it had both available? Or would it not use either since it has all of this data itself?\r\n\r\nAnything needed when it comes to applications taking into account image raw sizes and cell sizes? I guess I could add to `vim.ui.img.Image` for PNGs the ability to know what the width and height of the image is in pixels.",
            "created_at": "2025-05-08T19:57:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2864128663",
            "id": 2864128663,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qtyKX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864128663/reactions"
            },
            "updated_at": "2025-05-08T19:57:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864128663",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> From my perspective, that's for the underlying provider to implement. If the way it does that is to write over it, that's fine. From a consumer's perspective, I don't want to have to maintain or think about that logic, and instead need the ability to hide an image that I have displayed at some point.\r\n\r\nPersonally I'm more likely to want to just clear an area of the screen, and I wouldn't want to have to keep track of all the images I might have previously rendered in that area, and then individually request their removal.\r\n\r\nAnd for other protocols, clearing an area of the screen containing an image is trivial, but restoring the content that was previously below that image is not. So if the only reason for doing so is to emulate the way kitty deletes images, that's an expensive and pointless complication. \r\n\r\nBut if this is the approach you want to take, I'll stop interfering now.",
            "created_at": "2025-05-08T22:33:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2864577144",
            "id": 2864577144,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qvfp4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864577144/reactions"
            },
            "updated_at": "2025-05-08T22:33:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864577144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
                "events_url": "https://api.github.com/users/j4james/events{/privacy}",
                "followers_url": "https://api.github.com/users/j4james/followers",
                "following_url": "https://api.github.com/users/j4james/following{/other_user}",
                "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/j4james",
                "id": 4181424,
                "login": "j4james",
                "node_id": "MDQ6VXNlcjQxODE0MjQ=",
                "organizations_url": "https://api.github.com/users/j4james/orgs",
                "received_events_url": "https://api.github.com/users/j4james/received_events",
                "repos_url": "https://api.github.com/users/j4james/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/j4james",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > 16t is not going to work, its not implemented in many terminals\r\n> \r\n> @kovidgoyal I've got 17 terminals that support `CSI 16t`, which I think is actually more than the number that support `ioctl`. But I'm not suggesting you rely on `16t` exclusively - if it's not supported then you can fallback to `14t` or `ioctl`. I just think it makes sense to use values that are known to be correct in preference to estimates that could potentially be wrong.\r\n\r\nThe absolute number that support it is irrelevant. The intersection of those that support the kitty protocol and report pixel sizes in the ioctl is what matters. It is a protocol error to support the kitty protocol and report anything other than the cell area size in the ioctl. Therefore for *consumers* of the protocol relying on the ioctl makes perfect sense. \r\n\r\n> \r\n> > they might as well be adding in window decoration sizes and random numbers as well if they are going to do that.\r\n> \r\n> I think some actually do. Because the usage of these reports (both `CSI 14t` and `ioctl`) predates the use of images in the terminal (at least Linux terminals). I suspect they were originally used to help position the terminal relative to the larger desktop screen area, which is why there are also sequences for moving the window, and querying the screen size.\r\n\r\nWell, Linux has sadly moved away from the paradigm where applications can position their own windows on the desktop, see Wayland. So it makes perfect sense for Linux terminals to not do that anymore, regardless of the kitty protocol. Though I have to say I highly doubt they were ever used for that since there are no escape codes that I know of to query the terminal for the desktop geometry, workarea, etc, so how were programs supposed to position terminal windows anyway?\r\n\r\nAnd let me quote the xterm spec for you:\r\n```\r\nPs = 1 4  ⇒  Report xterm text area size in pixels.\r\n          Result is CSI  4 ;  height ;  width t\r\nPs = 1 4 ;  2  ⇒  Report xterm window size in pixels.\r\n          Normally xterm's window is larger than its text area, since it\r\n          includes the frame (or decoration) applied by the window\r\n          manager, as well as the area used by a scroll-bar.\r\n```\r\nhttps://invisible-island.net/xterm/ctlseqs/ctlseqs.html\r\n\r\nThat pretty comprehensively establishes that 14t is indeed the correct escape code to use if a consumer wishes to know the size of the *text area* not the *window including padding/decorations/random numbers*.\r\n",
            "created_at": "2025-05-09T01:44:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2864858625",
            "id": 2864858625,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qwkYB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864858625/reactions"
            },
            "updated_at": "2025-05-09T01:45:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864858625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1308621?v=4",
                "events_url": "https://api.github.com/users/kovidgoyal/events{/privacy}",
                "followers_url": "https://api.github.com/users/kovidgoyal/followers",
                "following_url": "https://api.github.com/users/kovidgoyal/following{/other_user}",
                "gists_url": "https://api.github.com/users/kovidgoyal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kovidgoyal",
                "id": 1308621,
                "login": "kovidgoyal",
                "node_id": "MDQ6VXNlcjEzMDg2MjE=",
                "organizations_url": "https://api.github.com/users/kovidgoyal/orgs",
                "received_events_url": "https://api.github.com/users/kovidgoyal/received_events",
                "repos_url": "https://api.github.com/users/kovidgoyal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kovidgoyal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kovidgoyal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kovidgoyal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Personally I'm more likely to want to just clear an area of the screen, and I wouldn't want to have to keep track of all the images I might have previously rendered in that area, and then individually request their removal.\r\n> \r\n> And for other protocols, clearing an area of the screen containing an image is trivial, but restoring the content that was previously below that image is not. So if the only reason for doing so is to emulate the way kitty deletes images, that's an expensive and pointless complication.\r\n\r\nMaybe read up on how the kitty protocol deletes images first. In the kitty protocol you can delete images that intersect any cell, row or column on the screen, without needing to keep track of the images.\r\nhttps://sw.kovidgoyal.net/kitty/graphics-protocol/#deleting-images\r\n",
            "created_at": "2025-05-09T01:50:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2864864246",
            "id": 2864864246,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qwlv2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864864246/reactions"
            },
            "updated_at": "2025-05-09T01:50:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864864246",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1308621?v=4",
                "events_url": "https://api.github.com/users/kovidgoyal/events{/privacy}",
                "followers_url": "https://api.github.com/users/kovidgoyal/followers",
                "following_url": "https://api.github.com/users/kovidgoyal/following{/other_user}",
                "gists_url": "https://api.github.com/users/kovidgoyal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kovidgoyal",
                "id": 1308621,
                "login": "kovidgoyal",
                "node_id": "MDQ6VXNlcjEzMDg2MjE=",
                "organizations_url": "https://api.github.com/users/kovidgoyal/orgs",
                "received_events_url": "https://api.github.com/users/kovidgoyal/received_events",
                "repos_url": "https://api.github.com/users/kovidgoyal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kovidgoyal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kovidgoyal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kovidgoyal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The part I haven't figured out generically (yet) is embedding images within a buffer that reflows text around them, which is what I'd want when viewing markdown and orgmode documents with embedded images. Kitty does this through unicode placeholders such that the image follows the placeholders as they move around. Maybe we use extmarks to inject them in the kitty provider, but I don't know yet what should be the responsibility of neovim and what should be the responsibility of a provider in this use case.\r\n\r\n> @fredizzimo I think you shared thoughts earlier on the approach that would support neovide. Would you mind resharing that - a link to the comment above - or restating your thoughts on this matter? Anything changed in your thoughts here since last time?\r\n\r\nI think you can take a look at the image plugin from `snacks.nvim`. That one uses kitty placeholders, and extmarks for managing them. \r\n\r\nMy previous idea was a bit different, but I now think that using the unicode placeholders directly on the protocol level is good and gives a lot of flexibility. And I have also done a preliminary implementation of that in Neovide. My message about that is here https://github.com/neovim/neovim/issues/30889#issuecomment-2830670498\r\n\r\nI'm not sure if I wrote a more detailed message about my initial design, I can't find it either right now.  But in any case, it was not completely thought out, so using snacks a reference is probably the best.",
            "created_at": "2025-05-09T08:50:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2865717586",
            "id": 2865717586,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6qz2FS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2865717586/reactions"
            },
            "updated_at": "2025-05-09T08:50:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2865717586",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "### Sixel Provider on Windows Terminal (Windows 11)\r\n\r\nSmall update, I was playing around with decoding a PNG with the thought of sixel down the line, and then realized that ImageMagick actually supports directly converting an image to sixel.\r\n\r\n@j4james I put together a bit of a hack using sixel, and it seems like WezTerm doesn't work well unless I circumvent using neovim's `io.stdout:write()` in favor of directly accessing the tty. The image shown when using neovim's stdout ends up being garbled as if parts of it are getting cut off.\r\n\r\nHowever, when using with Windows Terminal, the sixel provider works _okay_ in that the images can be rendered and I can place them in different locations together. This isn't optimized at all as I'm having to use `vim.cmd.mode()` to force a full refresh, and I imagine using `vim.api.nvim__redraw()` with some better logic to determine which areas need to be refreshed (for removing images) would help.\r\n\r\nHere's a preview of this PR's sixel provider enabling images to work on Windows. I had to install ImageMagick, of course.\r\n\r\n\r\nhttps://github.com/user-attachments/assets/cfbe539c-66b2-4fba-be97-d8cc665a5eb5\r\n\r\n",
            "created_at": "2025-05-10T00:35:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2868149324",
            "id": 2868149324,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6q9HxM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2868149324/reactions"
            },
            "updated_at": "2025-05-10T00:36:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2868149324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The absolute number that support it is irrelevant. The intersection of those that support the kitty protocol and report pixel sizes in the ioctl is what matters. \r\n\r\nI was under the impression that neovim was hoping to support image protocols other than just kitty, and I think all of those that I've counted implement some form of image protocol.\r\n\r\n> And let me quote the xterm spec for you:\r\n\r\nThe problem is that the spec used to be different. This is what the documentation originally said:\r\nhttps://github.com/ThomasDickey/xterm-snapshots/blob/9ac75bb2bdcf5c7e19a2fb32c507e454fe847253/ctlseqs.txt#L1116-L1119\r\n```\r\nPs = 1 4  -> Report xterm window size in pixels.  Normally\r\nxterm's window is larger than its text area, since it includes\r\nthe frame (or decoration) applied by the window manager, as\r\nwell as the area used by a scroll-bar.\r\n```\r\nAnd while it would be great if everyone went along with Xterm's changed behavior, that's unfortunately not what happened. And the ioctl situation is worse than `CSI 14 t`.\r\n\r\nStill, if you're happy with the limitations of ioctl and/or `CSI 14 t`, I'm not going to push the issue. I just wasn't expecting such a strong objection to using a report that was more likely to be correct.\r\n\r\n> Maybe read up on how the kitty protocol deletes images first. In the kitty protocol you can delete images that intersect any cell, row or column on the screen\r\n\r\nSorry, that wasn't intended to be a criticism of the kitty protocol. I am well aware of all the delete options. My point was that the image API being proposed in this PR doesn't work that way - it _requires_ images be deleted by ID. But I don't want to continue arguing against that approach. I just wanted to clarify the point I was making.",
            "created_at": "2025-05-10T12:42:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2868829445",
            "id": 2868829445,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6q_t0F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2868829445/reactions"
            },
            "updated_at": "2025-05-10T12:42:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2868829445",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
                "events_url": "https://api.github.com/users/j4james/events{/privacy}",
                "followers_url": "https://api.github.com/users/j4james/followers",
                "following_url": "https://api.github.com/users/j4james/following{/other_user}",
                "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/j4james",
                "id": 4181424,
                "login": "j4james",
                "node_id": "MDQ6VXNlcjQxODE0MjQ=",
                "organizations_url": "https://api.github.com/users/j4james/orgs",
                "received_events_url": "https://api.github.com/users/j4james/received_events",
                "repos_url": "https://api.github.com/users/j4james/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/j4james",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> WezTerm doesn't work well unless I circumvent using neovim's `io.stdout:write()` in favor of directly accessing the tty.\r\n\r\n@chipsenkbeil If you're testing WezTerm on Windows, and you're using the Windows version of neovim, that could be part of the problem. If you just want to test WezTerm's Sixel support, then it would be best to start with the Linux version, or using `wezterm ssh` to connect to a WSL shell from the Windows version. A native Windows console app introduces an additional level of complexity, so maybe that could be left for later.\r\n\r\n> ImageMagick actually supports directly converting an image to sixel.\r\n\r\nNote that ImageMagick doesn't support transparency for Sixel images as far as I know, but that's probably not essential for most use cases.\r\n\r\nAlso note that you might be able to reduce the flickering by using synchronized updates (mode ?2026). That's supported by quite a few Sixel terminals, although it was only recently added to Windows Terminal, so you'll need to use a nightly build for that.\r\n",
            "created_at": "2025-05-10T13:06:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2868839787",
            "id": 2868839787,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6q_wVr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2868839787/reactions"
            },
            "updated_at": "2025-05-10T13:06:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2868839787",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
                "events_url": "https://api.github.com/users/j4james/events{/privacy}",
                "followers_url": "https://api.github.com/users/j4james/followers",
                "following_url": "https://api.github.com/users/j4james/following{/other_user}",
                "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/j4james",
                "id": 4181424,
                "login": "j4james",
                "node_id": "MDQ6VXNlcjQxODE0MjQ=",
                "organizations_url": "https://api.github.com/users/j4james/orgs",
                "received_events_url": "https://api.github.com/users/j4james/received_events",
                "repos_url": "https://api.github.com/users/j4james/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/j4james",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > WezTerm doesn't work well unless I circumvent using neovim's `io.stdout:write()` in favor of directly accessing the tty.\n> \n> @chipsenkbeil If you're testing WezTerm on Windows, and you're using the Windows version of neovim\n\nAh, no, sorry for the confusion. I was testing sixel on wezterm on MacOS. The video I showed was Windows Terminal running neovim from powershell after building from msys64 for arm processor on windows. ",
            "created_at": "2025-05-10T13:37:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2868860152",
            "id": 2868860152,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6q_1T4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2868860152/reactions"
            },
            "updated_at": "2025-05-10T13:37:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2868860152",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > The absolute number that support it is irrelevant. The intersection of those that support the kitty protocol and report pixel sizes in the ioctl is what matters.\r\n> \r\n> I was under the impression that neovim was hoping to support image protocols other than just kitty, and I think all of those that I've counted implement some form of image protocol.\r\n\r\nNo idea about that, they seem to be going back and forth on it, I certainly feel for them if they try to do it. It will be pretty hard to get right. I was talking purely about the kitty protocol, since that's what I was invited here to discuss. And for terminals that support the kitty protocol, the ioctl is the best way to get sizes followed by 14t. \r\n\r\n> \r\n> > And let me quote the xterm spec for you:\r\n> \r\n> The problem is that the spec used to be different. This is what the documentation originally said: https://github.com/ThomasDickey/xterm-snapshots/blob/9ac75bb2bdcf5c7e19a2fb32c507e454fe847253/ctlseqs.txt#L1116-L1119\r\n> \r\n> ```\r\n> Ps = 1 4  -> Report xterm window size in pixels.  Normally\r\n> xterm's window is larger than its text area, since it includes\r\n> the frame (or decoration) applied by the window manager, as\r\n> well as the area used by a scroll-bar.\r\n> ```\r\n> \r\n> And while it would be great if everyone went along with Xterm's changed behavior, that's unfortunately not what happened. And the ioctl situation is worse than `CSI 14 t`.\r\n\r\nSo terminals that get this wrong are in violation of the xterm spec, xterm being the terminal that originated this feature, it gets to decide what the right thing to do is. This is 2025, we are not dealing with hardware terminals set in stone anymore. IMO it would be perfectly acceptable for neovim to require terminals to do the right thing.  \r\n\r\n> \r\n> Still, if you're happy with the limitations of ioctl and/or `CSI 14 t`, I'm not going to push the issue. I just wasn't expecting such a strong objection to using a report that was more likely to be correct.\r\n\r\nI actually have no objection to using 16t, per se, my objection is that it is not widely supported and therefore is not suitable as a *replacement* for 14t or the ioctl. But I am perfectly OK with querying *all of* 16t and the ioctl and 14t and using the results of them in that order.\r\n\r\n> Sorry, that wasn't intended to be a criticism of the kitty protocol. I am well aware of all the delete options. My point was that the image API being proposed in this PR doesn't work that way - it _requires_ images be deleted by ID. But I don't want to continue arguing against that approach. I just wanted to clarify the point I was making.\r\n\r\nIt would be fairly trivial for the neovim API to add a method to delete by screen area in addition, after all it is presumably tracking the location of images internally. As a first step deleting by id will be a decent MVP. Later it can layer on more delete methods, for the kitty protocol, it can just generate the equivalent escape codes, if it implements other image backends it will need to loop over its internal set of image references and delete by intersection area.",
            "created_at": "2025-05-11T14:46:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2869907761",
            "id": 2869907761,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6rD1Ex",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2869907761/reactions"
            },
            "updated_at": "2025-05-11T14:46:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2869907761",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1308621?v=4",
                "events_url": "https://api.github.com/users/kovidgoyal/events{/privacy}",
                "followers_url": "https://api.github.com/users/kovidgoyal/followers",
                "following_url": "https://api.github.com/users/kovidgoyal/following{/other_user}",
                "gists_url": "https://api.github.com/users/kovidgoyal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kovidgoyal",
                "id": 1308621,
                "login": "kovidgoyal",
                "node_id": "MDQ6VXNlcjEzMDg2MjE=",
                "organizations_url": "https://api.github.com/users/kovidgoyal/orgs",
                "received_events_url": "https://api.github.com/users/kovidgoyal/received_events",
                "repos_url": "https://api.github.com/users/kovidgoyal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kovidgoyal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kovidgoyal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kovidgoyal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If getting the window dimensions still needs more discussion, let's continue discussing it where it belongs in https://github.com/neovim/neovim/pull/32408. Neovim already knows which terminal is running, so it should be able to return the correct information for all of them, using a combination of methods discussed here.",
            "created_at": "2025-05-12T13:49:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/31399#issuecomment-2872657639",
            "id": 2872657639,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
            "node_id": "IC_kwDOAPphoM6rOUbn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2872657639/reactions"
            },
            "updated_at": "2025-05-12T13:49:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2872657639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31399/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31399/commits",
    "created_at": "2024-11-29T22:01:21Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31399.diff",
    "draft": false,
    "head": {
        "label": "chipsenkbeil:feat/ImageApi",
        "ref": "feat/ImageApi",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/chipsenkbeil/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/chipsenkbeil/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/chipsenkbeil/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/chipsenkbeil/neovim/branches{/branch}",
            "clone_url": "https://github.com/chipsenkbeil/neovim.git",
            "collaborators_url": "https://api.github.com/repos/chipsenkbeil/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/chipsenkbeil/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/chipsenkbeil/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/chipsenkbeil/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/chipsenkbeil/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/chipsenkbeil/neovim/contributors",
            "created_at": "2024-11-29T21:51:25Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/chipsenkbeil/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/chipsenkbeil/neovim/downloads",
            "events_url": "https://api.github.com/repos/chipsenkbeil/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/chipsenkbeil/neovim/forks",
            "full_name": "chipsenkbeil/neovim",
            "git_commits_url": "https://api.github.com/repos/chipsenkbeil/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/chipsenkbeil/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/chipsenkbeil/neovim/git/tags{/sha}",
            "git_url": "git://github.com/chipsenkbeil/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/chipsenkbeil/neovim/hooks",
            "html_url": "https://github.com/chipsenkbeil/neovim",
            "id": 896248861,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/chipsenkbeil/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/chipsenkbeil/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/chipsenkbeil/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/chipsenkbeil/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/chipsenkbeil/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/chipsenkbeil/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/chipsenkbeil/neovim/merges",
            "milestones_url": "https://api.github.com/repos/chipsenkbeil/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDONWusHQ",
            "notifications_url": "https://api.github.com/repos/chipsenkbeil/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/chipsenkbeil/neovim/pulls{/number}",
            "pushed_at": "2025-05-13T00:01:53Z",
            "releases_url": "https://api.github.com/repos/chipsenkbeil/neovim/releases{/id}",
            "size": 311943,
            "ssh_url": "git@github.com:chipsenkbeil/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/chipsenkbeil/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/chipsenkbeil/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/chipsenkbeil/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/chipsenkbeil/neovim/subscription",
            "svn_url": "https://github.com/chipsenkbeil/neovim",
            "tags_url": "https://api.github.com/repos/chipsenkbeil/neovim/tags",
            "teams_url": "https://api.github.com/repos/chipsenkbeil/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/chipsenkbeil/neovim/git/trees{/sha}",
            "updated_at": "2024-12-01T06:32:39Z",
            "url": "https://api.github.com/repos/chipsenkbeil/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "e5901549faa4b43a81b99572b2461529d8106a0a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
            "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
            "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
            "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
            "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/chipsenkbeil",
            "id": 2481802,
            "login": "chipsenkbeil",
            "node_id": "MDQ6VXNlcjI0ODE4MDI=",
            "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
            "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
            "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/chipsenkbeil",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31399",
    "id": 2207978338,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31399",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "97418eca3b2ad24432b5fa5d715336de2e3ae088",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6DmxNi",
    "number": 31399,
    "patch_url": "https://github.com/neovim/neovim/pull/31399.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31399/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/e5901549faa4b43a81b99572b2461529d8106a0a",
    "title": "feat(img): implement rudimentary image API",
    "updated_at": "2025-05-13T00:01:54Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31399",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
        "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
        "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
        "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
        "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chipsenkbeil",
        "id": 2481802,
        "login": "chipsenkbeil",
        "node_id": "MDQ6VXNlcjI0ODE4MDI=",
        "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
        "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
        "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chipsenkbeil",
        "user_view_type": "public"
    }
}