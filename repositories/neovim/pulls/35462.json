{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35462/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35462/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35462"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35462"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35462/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6310,
            "forks_count": 6310,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1996,
            "open_issues_count": 1996,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-09-09T01:58:55Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 341252,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 92608,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-09-09T02:05:07Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 92608,
            "watchers_count": 92608,
            "web_commit_signoff_required": false
        },
        "sha": "de950f827236e2c7447bd776c2509faa39c27b63",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "TODO:\r\n\r\n- [x] typos reported in https://github.com/neovim/neovim/pull/29073#discussion_r2316212639\r\n\r\n\r\nclose #35603",
    "closed_at": "2025-09-04T04:30:28Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2297031472"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297031472"
                }
            },
            "author_association": "MEMBER",
            "body": "It doesn't feel good to immediately suggest people to use `nvim-lspconfig` or blindly copy its configuration. I still use it as a reference, but I would phrase this as \"Configure the LSP server in `lsp/copilot.lua` (you might find `nvim-lspconfig` a helpful reference)\".",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-08-25T03:41:43Z",
            "diff_hunk": "@@ -2223,6 +2223,29 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n \n+This module provides the LSP \"inline completion\" feature, for completing\n+multiline text (e.g., whole methods) instead of just a word or line, which may\n+result in \"syntactically or semantically incorrect\" code. Unlike regular\n+completion, this is typically presented as overlay text instead of a menu of\n+completion candidates.\n+\n+LSP spec:\n+https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#textDocument_inlineCompletion\n+\n+To try it out, here are quickstart steps using Copilot:\n+1. Install copilot >\n+    npm install --global @github/copilot-language-server\n+<\n+2. Install https://github.com/neovim/nvim-lspconfig or copy its",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2297031472",
            "id": 2297031472,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I6esw",
            "original_commit_id": "0ba91b6768d3614677ae8017efac8726514fbb27",
            "original_line": 2239,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3149780974,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297031472/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-25T03:41:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297031472",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2297071083"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297071083"
                }
            },
            "author_association": "MEMBER",
            "body": "Why doesn't it feel good? We maintain it for that purpose. I am rather trying to avoid being coy about things. Quickstarts should be obvious and practical.\r\n\r\nAlso note that these instructions are just the current state of things, hopefully the steps will diminish...",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-08-25T04:03:29Z",
            "diff_hunk": "@@ -2223,6 +2223,29 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n \n+This module provides the LSP \"inline completion\" feature, for completing\n+multiline text (e.g., whole methods) instead of just a word or line, which may\n+result in \"syntactically or semantically incorrect\" code. Unlike regular\n+completion, this is typically presented as overlay text instead of a menu of\n+completion candidates.\n+\n+LSP spec:\n+https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#textDocument_inlineCompletion\n+\n+To try it out, here are quickstart steps using Copilot:\n+1. Install copilot >\n+    npm install --global @github/copilot-language-server\n+<\n+2. Install https://github.com/neovim/nvim-lspconfig or copy its",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2297071083",
            "id": 2297071083,
            "in_reply_to_id": 2297031472,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I6oXr",
            "original_commit_id": "0ba91b6768d3614677ae8017efac8726514fbb27",
            "original_line": 2239,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3149844355,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297071083/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-25T04:04:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297071083",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2297084781"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297084781"
                }
            },
            "author_association": "MEMBER",
            "body": "Documentation is a great way to passively advertise and suggest using `vim.lsp.config`. Reading this from the perspective of someone new to nvim I would get the impression that I'm just supposed to blindly install a plugin to configure an LSP server.",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-08-25T04:21:30Z",
            "diff_hunk": "@@ -2223,6 +2223,29 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n \n+This module provides the LSP \"inline completion\" feature, for completing\n+multiline text (e.g., whole methods) instead of just a word or line, which may\n+result in \"syntactically or semantically incorrect\" code. Unlike regular\n+completion, this is typically presented as overlay text instead of a menu of\n+completion candidates.\n+\n+LSP spec:\n+https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#textDocument_inlineCompletion\n+\n+To try it out, here are quickstart steps using Copilot:\n+1. Install copilot >\n+    npm install --global @github/copilot-language-server\n+<\n+2. Install https://github.com/neovim/nvim-lspconfig or copy its",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2297084781",
            "id": 2297084781,
            "in_reply_to_id": 2297031472,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I6rtt",
            "original_commit_id": "0ba91b6768d3614677ae8017efac8726514fbb27",
            "original_line": 2239,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3149863573,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297084781/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-25T04:21:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297084781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2297092687"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297092687"
                }
            },
            "author_association": "MEMBER",
            "body": "Definitely agree with encouraging best practices and I'll update this somehow. \r\n\r\nBut I actually consider nvim-lspconfig to be documentation. It has been cleaned up and is now 99% self-contained examples (eventually will be 100%).",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-08-25T04:31:08Z",
            "diff_hunk": "@@ -2223,6 +2223,29 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n \n+This module provides the LSP \"inline completion\" feature, for completing\n+multiline text (e.g., whole methods) instead of just a word or line, which may\n+result in \"syntactically or semantically incorrect\" code. Unlike regular\n+completion, this is typically presented as overlay text instead of a menu of\n+completion candidates.\n+\n+LSP spec:\n+https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#textDocument_inlineCompletion\n+\n+To try it out, here are quickstart steps using Copilot:\n+1. Install copilot >\n+    npm install --global @github/copilot-language-server\n+<\n+2. Install https://github.com/neovim/nvim-lspconfig or copy its",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2297092687",
            "id": 2297092687,
            "in_reply_to_id": 2297031472,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I6tpP",
            "original_commit_id": "0ba91b6768d3614677ae8017efac8726514fbb27",
            "original_line": 2239,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3149874807,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297092687/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-25T04:31:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297092687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2297121421"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297121421"
                }
            },
            "author_association": "MEMBER",
            "body": "that’s fair. Won’t block you on this of course, just sharing my 2 cents 😊",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-08-25T05:03:43Z",
            "diff_hunk": "@@ -2223,6 +2223,29 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n \n+This module provides the LSP \"inline completion\" feature, for completing\n+multiline text (e.g., whole methods) instead of just a word or line, which may\n+result in \"syntactically or semantically incorrect\" code. Unlike regular\n+completion, this is typically presented as overlay text instead of a menu of\n+completion candidates.\n+\n+LSP spec:\n+https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#textDocument_inlineCompletion\n+\n+To try it out, here are quickstart steps using Copilot:\n+1. Install copilot >\n+    npm install --global @github/copilot-language-server\n+<\n+2. Install https://github.com/neovim/nvim-lspconfig or copy its",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2297121421",
            "id": 2297121421,
            "in_reply_to_id": 2297031472,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I60qN",
            "original_commit_id": "0ba91b6768d3614677ae8017efac8726514fbb27",
            "original_line": 2239,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3149915424,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297121421/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-25T05:03:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297121421",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2302665179"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2302665179"
                }
            },
            "author_association": "MEMBER",
            "body": "Docs for events are now generated (assuming they live in `events.c` )",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-08-27T02:07:34Z",
            "diff_hunk": "@@ -553,6 +540,38 @@ Extmark positions changed by an edit will be restored on undo/redo. Creating\n and deleting extmarks is not a buffer change, thus new undo states are not\n created for extmark changes.\n \n+==============================================================================\n+Global Events                                                     *api-events*",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2302665179",
            "id": 2302665179,
            "line": 544,
            "node_id": "PRRC_kwDOAPphoM6JP-Hb",
            "original_commit_id": "68b9cbbd8ddb2f4385607e1b7a7257629c27b3f5",
            "original_line": 544,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": 25,
            "pull_request_review_id": 3158056220,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2302665179/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-27T02:07:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2302665179",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2302666520"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2302666520"
                }
            },
            "author_association": "MEMBER",
            "body": "This is an API, not an event.",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-08-27T02:08:51Z",
            "diff_hunk": "@@ -0,0 +1,86 @@\n+#include <assert.h>\n+#include <inttypes.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"klib/kvec.h\"\n+#include \"nvim/api/events.h\"\n+#include \"nvim/api/private/converter.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/api/ui.h\"\n+#include \"nvim/assert_defs.h\"\n+#include \"nvim/autocmd.h\"\n+#include \"nvim/autocmd_defs.h\"\n+#include \"nvim/channel.h\"\n+#include \"nvim/channel_defs.h\"\n+#include \"nvim/eval.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/event/loop.h\"\n+#include \"nvim/event/multiqueue.h\"\n+#include \"nvim/event/wstream.h\"\n+#include \"nvim/globals.h\"\n+#include \"nvim/grid.h\"\n+#include \"nvim/highlight.h\"\n+#include \"nvim/macros_defs.h\"\n+#include \"nvim/main.h\"\n+#include \"nvim/map_defs.h\"\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/memory_defs.h\"\n+#include \"nvim/msgpack_rpc/channel.h\"\n+#include \"nvim/msgpack_rpc/channel_defs.h\"\n+#include \"nvim/msgpack_rpc/packer.h\"\n+#include \"nvim/msgpack_rpc/packer_defs.h\"\n+#include \"nvim/option.h\"\n+#include \"nvim/types_defs.h\"\n+#include \"nvim/ui.h\"\n+\n+/// Notification sent to the client channel in case of an error response to an async API request.\n+///\n+/// @param channel_id\n+/// @param type Error type id as defined by `api_info().error_types`.\n+/// @param msg Error message.\n+void nvim_error_event(uint64_t channel_id, Integer type, String msg)\n+  FUNC_API_REMOTE_ONLY\n+{\n+  // TODO(bfredl): consider printing message to user, as will be relevant\n+  // if we fork nvim processes as async workers\n+  ELOG(\"async error on channel %\" PRId64 \": %s\", channel_id, msg.size ? msg.data : \"\");\n+}\n+\n+/// Tells Nvim when a host-terminal event occurred.\n+///\n+/// Supports these events:\n+///\n+///   - \"termresponse\": The host-terminal sent a DA1, OSC, DCS, or APC response sequence to Nvim.\n+///                     The payload is the received response. Sets |v:termresponse| and fires\n+///                     |TermResponse|.\n+///\n+/// @param channel_id\n+/// @param event Event name\n+/// @param value Event payload\n+/// @param[out] err Error details, if any.\n+void nvim_ui_term_event(uint64_t channel_id, String event, Object value, Error *err)\n+  FUNC_API_SINCE(12) FUNC_API_REMOTE_ONLY",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2302666520",
            "id": 2302666520,
            "line": 60,
            "node_id": "PRRC_kwDOAPphoM6JP-cY",
            "original_commit_id": "68b9cbbd8ddb2f4385607e1b7a7257629c27b3f5",
            "original_line": 60,
            "original_position": 70,
            "original_start_line": 69,
            "path": "src/nvim/api/events.c",
            "position": 60,
            "pull_request_review_id": 3158057914,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2302666520/reactions"
            },
            "side": "RIGHT",
            "start_line": 59,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-27T02:08:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2302666520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2302687958"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2302687958"
                }
            },
            "author_association": "MEMBER",
            "body": "shit.  `_event` was reserved for events only 😭 ",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-08-27T02:28:30Z",
            "diff_hunk": "@@ -0,0 +1,86 @@\n+#include <assert.h>\n+#include <inttypes.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"klib/kvec.h\"\n+#include \"nvim/api/events.h\"\n+#include \"nvim/api/private/converter.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/api/ui.h\"\n+#include \"nvim/assert_defs.h\"\n+#include \"nvim/autocmd.h\"\n+#include \"nvim/autocmd_defs.h\"\n+#include \"nvim/channel.h\"\n+#include \"nvim/channel_defs.h\"\n+#include \"nvim/eval.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/event/loop.h\"\n+#include \"nvim/event/multiqueue.h\"\n+#include \"nvim/event/wstream.h\"\n+#include \"nvim/globals.h\"\n+#include \"nvim/grid.h\"\n+#include \"nvim/highlight.h\"\n+#include \"nvim/macros_defs.h\"\n+#include \"nvim/main.h\"\n+#include \"nvim/map_defs.h\"\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/memory_defs.h\"\n+#include \"nvim/msgpack_rpc/channel.h\"\n+#include \"nvim/msgpack_rpc/channel_defs.h\"\n+#include \"nvim/msgpack_rpc/packer.h\"\n+#include \"nvim/msgpack_rpc/packer_defs.h\"\n+#include \"nvim/option.h\"\n+#include \"nvim/types_defs.h\"\n+#include \"nvim/ui.h\"\n+\n+/// Notification sent to the client channel in case of an error response to an async API request.\n+///\n+/// @param channel_id\n+/// @param type Error type id as defined by `api_info().error_types`.\n+/// @param msg Error message.\n+void nvim_error_event(uint64_t channel_id, Integer type, String msg)\n+  FUNC_API_REMOTE_ONLY\n+{\n+  // TODO(bfredl): consider printing message to user, as will be relevant\n+  // if we fork nvim processes as async workers\n+  ELOG(\"async error on channel %\" PRId64 \": %s\", channel_id, msg.size ? msg.data : \"\");\n+}\n+\n+/// Tells Nvim when a host-terminal event occurred.\n+///\n+/// Supports these events:\n+///\n+///   - \"termresponse\": The host-terminal sent a DA1, OSC, DCS, or APC response sequence to Nvim.\n+///                     The payload is the received response. Sets |v:termresponse| and fires\n+///                     |TermResponse|.\n+///\n+/// @param channel_id\n+/// @param event Event name\n+/// @param value Event payload\n+/// @param[out] err Error details, if any.\n+void nvim_ui_term_event(uint64_t channel_id, String event, Object value, Error *err)\n+  FUNC_API_SINCE(12) FUNC_API_REMOTE_ONLY",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2302687958",
            "id": 2302687958,
            "in_reply_to_id": 2302666520,
            "line": 60,
            "node_id": "PRRC_kwDOAPphoM6JQDrW",
            "original_commit_id": "68b9cbbd8ddb2f4385607e1b7a7257629c27b3f5",
            "original_line": 60,
            "original_position": 70,
            "original_start_line": 69,
            "path": "src/nvim/api/events.c",
            "position": 60,
            "pull_request_review_id": 3158082748,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2302687958/reactions"
            },
            "side": "RIGHT",
            "start_line": 59,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-27T02:42:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2302687958",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2303235884"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2303235884"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit:\r\n```suggestion\r\n1. Install Copilot: >bash\r\n```",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-08-27T08:21:11Z",
            "diff_hunk": "@@ -2223,6 +2223,37 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n \n+This module provides the LSP \"inline completion\" feature, for completing\n+multiline text (e.g., whole methods) instead of just a word or line, which may\n+result in \"syntactically or semantically incorrect\" code. Unlike regular\n+completion, this is typically presented as overlay text instead of a menu of\n+completion candidates.\n+\n+LSP spec:\n+https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#textDocument_inlineCompletion\n+\n+To try it out, here is a quickstart example using Copilot:\n+1. Install Copilot: >",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2303235884",
            "id": 2303235884,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6JSJcs",
            "original_commit_id": "524b59d8b03690fac9a09ab6ad84204703b671d5",
            "original_line": 2242,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3158844123,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2303235884/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-27T08:21:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2303235884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2320706852"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320706852"
                }
            },
            "author_association": "MEMBER",
            "body": "@zeertzjq what do you mean exactly? it is emitted as an event: \r\n\r\n`FUNC_API_` is also a valid annotation for API (RPC) events.\r\n\r\nhttps://github.com/neovim/neovim/blob/de950f827236e2c7447bd776c2509faa39c27b63/src/nvim/tui/input.c#L659",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-09-04T03:14:56Z",
            "diff_hunk": "@@ -0,0 +1,86 @@\n+#include <assert.h>\n+#include <inttypes.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"klib/kvec.h\"\n+#include \"nvim/api/events.h\"\n+#include \"nvim/api/private/converter.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/api/ui.h\"\n+#include \"nvim/assert_defs.h\"\n+#include \"nvim/autocmd.h\"\n+#include \"nvim/autocmd_defs.h\"\n+#include \"nvim/channel.h\"\n+#include \"nvim/channel_defs.h\"\n+#include \"nvim/eval.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/event/loop.h\"\n+#include \"nvim/event/multiqueue.h\"\n+#include \"nvim/event/wstream.h\"\n+#include \"nvim/globals.h\"\n+#include \"nvim/grid.h\"\n+#include \"nvim/highlight.h\"\n+#include \"nvim/macros_defs.h\"\n+#include \"nvim/main.h\"\n+#include \"nvim/map_defs.h\"\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/memory_defs.h\"\n+#include \"nvim/msgpack_rpc/channel.h\"\n+#include \"nvim/msgpack_rpc/channel_defs.h\"\n+#include \"nvim/msgpack_rpc/packer.h\"\n+#include \"nvim/msgpack_rpc/packer_defs.h\"\n+#include \"nvim/option.h\"\n+#include \"nvim/types_defs.h\"\n+#include \"nvim/ui.h\"\n+\n+/// Notification sent to the client channel in case of an error response to an async API request.\n+///\n+/// @param channel_id\n+/// @param type Error type id as defined by `api_info().error_types`.\n+/// @param msg Error message.\n+void nvim_error_event(uint64_t channel_id, Integer type, String msg)\n+  FUNC_API_REMOTE_ONLY\n+{\n+  // TODO(bfredl): consider printing message to user, as will be relevant\n+  // if we fork nvim processes as async workers\n+  ELOG(\"async error on channel %\" PRId64 \": %s\", channel_id, msg.size ? msg.data : \"\");\n+}\n+\n+/// Tells Nvim when a host-terminal event occurred.\n+///\n+/// Supports these events:\n+///\n+///   - \"termresponse\": The host-terminal sent a DA1, OSC, DCS, or APC response sequence to Nvim.\n+///                     The payload is the received response. Sets |v:termresponse| and fires\n+///                     |TermResponse|.\n+///\n+/// @param channel_id\n+/// @param event Event name\n+/// @param value Event payload\n+/// @param[out] err Error details, if any.\n+void nvim_ui_term_event(uint64_t channel_id, String event, Object value, Error *err)\n+  FUNC_API_SINCE(12) FUNC_API_REMOTE_ONLY",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2320706852",
            "id": 2320706852,
            "in_reply_to_id": 2302666520,
            "line": 60,
            "node_id": "PRRC_kwDOAPphoM6KUy0k",
            "original_commit_id": "68b9cbbd8ddb2f4385607e1b7a7257629c27b3f5",
            "original_line": 60,
            "original_position": 70,
            "original_start_line": 69,
            "path": "src/nvim/api/events.c",
            "position": 60,
            "pull_request_review_id": 3183259539,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320706852/reactions"
            },
            "side": "RIGHT",
            "start_line": 59,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-04T03:15:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320706852",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2320721701"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320721701"
                }
            },
            "author_association": "MEMBER",
            "body": "This is client code, not server code.",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-09-04T03:22:59Z",
            "diff_hunk": "@@ -0,0 +1,86 @@\n+#include <assert.h>\n+#include <inttypes.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"klib/kvec.h\"\n+#include \"nvim/api/events.h\"\n+#include \"nvim/api/private/converter.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/api/ui.h\"\n+#include \"nvim/assert_defs.h\"\n+#include \"nvim/autocmd.h\"\n+#include \"nvim/autocmd_defs.h\"\n+#include \"nvim/channel.h\"\n+#include \"nvim/channel_defs.h\"\n+#include \"nvim/eval.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/event/loop.h\"\n+#include \"nvim/event/multiqueue.h\"\n+#include \"nvim/event/wstream.h\"\n+#include \"nvim/globals.h\"\n+#include \"nvim/grid.h\"\n+#include \"nvim/highlight.h\"\n+#include \"nvim/macros_defs.h\"\n+#include \"nvim/main.h\"\n+#include \"nvim/map_defs.h\"\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/memory_defs.h\"\n+#include \"nvim/msgpack_rpc/channel.h\"\n+#include \"nvim/msgpack_rpc/channel_defs.h\"\n+#include \"nvim/msgpack_rpc/packer.h\"\n+#include \"nvim/msgpack_rpc/packer_defs.h\"\n+#include \"nvim/option.h\"\n+#include \"nvim/types_defs.h\"\n+#include \"nvim/ui.h\"\n+\n+/// Notification sent to the client channel in case of an error response to an async API request.\n+///\n+/// @param channel_id\n+/// @param type Error type id as defined by `api_info().error_types`.\n+/// @param msg Error message.\n+void nvim_error_event(uint64_t channel_id, Integer type, String msg)\n+  FUNC_API_REMOTE_ONLY\n+{\n+  // TODO(bfredl): consider printing message to user, as will be relevant\n+  // if we fork nvim processes as async workers\n+  ELOG(\"async error on channel %\" PRId64 \": %s\", channel_id, msg.size ? msg.data : \"\");\n+}\n+\n+/// Tells Nvim when a host-terminal event occurred.\n+///\n+/// Supports these events:\n+///\n+///   - \"termresponse\": The host-terminal sent a DA1, OSC, DCS, or APC response sequence to Nvim.\n+///                     The payload is the received response. Sets |v:termresponse| and fires\n+///                     |TermResponse|.\n+///\n+/// @param channel_id\n+/// @param event Event name\n+/// @param value Event payload\n+/// @param[out] err Error details, if any.\n+void nvim_ui_term_event(uint64_t channel_id, String event, Object value, Error *err)\n+  FUNC_API_SINCE(12) FUNC_API_REMOTE_ONLY",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2320721701",
            "id": 2320721701,
            "in_reply_to_id": 2302666520,
            "line": 60,
            "node_id": "PRRC_kwDOAPphoM6KU2cl",
            "original_commit_id": "68b9cbbd8ddb2f4385607e1b7a7257629c27b3f5",
            "original_line": 60,
            "original_position": 70,
            "original_start_line": 69,
            "path": "src/nvim/api/events.c",
            "position": 60,
            "pull_request_review_id": 3183282013,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320721701/reactions"
            },
            "side": "RIGHT",
            "start_line": 59,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-04T03:22:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320721701",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2320732597"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320732597"
                }
            },
            "author_association": "MEMBER",
            "body": "Helptags for events intentionally do not end with `()` parens. Even though events have parameters, they aren't called like functions.",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-09-04T03:32:17Z",
            "diff_hunk": "@@ -553,6 +540,38 @@ Extmark positions changed by an edit will be restored on undo/redo. Creating\n and deleting extmarks is not a buffer change, thus new undo states are not\n created for extmark changes.\n \n+==============================================================================\n+Global Events                                                     *api-events*\n+\n+nvim_error_event({type}, {msg})                             *nvim_error_event*",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2320732597",
            "id": 2320732597,
            "line": 546,
            "node_id": "PRRC_kwDOAPphoM6KU5G1",
            "original_commit_id": "ce85720e4fccac0e13dc1169dd77e7c93ef6be80",
            "original_line": 546,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": 27,
            "pull_request_review_id": 3183296389,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320732597/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-04T03:32:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320732597",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2320735010"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320735010"
                }
            },
            "author_association": "MEMBER",
            "body": "so what? this is intended to be emitted as an RPC notification, and it behaves like an event. why do you say this is not an event?\r\n\r\nor rather, what's an example of something that is an event, and how is it different from this semantically, or in its behavior, or how it is used?",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-09-04T03:35:03Z",
            "diff_hunk": "@@ -0,0 +1,86 @@\n+#include <assert.h>\n+#include <inttypes.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"klib/kvec.h\"\n+#include \"nvim/api/events.h\"\n+#include \"nvim/api/private/converter.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/api/ui.h\"\n+#include \"nvim/assert_defs.h\"\n+#include \"nvim/autocmd.h\"\n+#include \"nvim/autocmd_defs.h\"\n+#include \"nvim/channel.h\"\n+#include \"nvim/channel_defs.h\"\n+#include \"nvim/eval.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/event/loop.h\"\n+#include \"nvim/event/multiqueue.h\"\n+#include \"nvim/event/wstream.h\"\n+#include \"nvim/globals.h\"\n+#include \"nvim/grid.h\"\n+#include \"nvim/highlight.h\"\n+#include \"nvim/macros_defs.h\"\n+#include \"nvim/main.h\"\n+#include \"nvim/map_defs.h\"\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/memory_defs.h\"\n+#include \"nvim/msgpack_rpc/channel.h\"\n+#include \"nvim/msgpack_rpc/channel_defs.h\"\n+#include \"nvim/msgpack_rpc/packer.h\"\n+#include \"nvim/msgpack_rpc/packer_defs.h\"\n+#include \"nvim/option.h\"\n+#include \"nvim/types_defs.h\"\n+#include \"nvim/ui.h\"\n+\n+/// Notification sent to the client channel in case of an error response to an async API request.\n+///\n+/// @param channel_id\n+/// @param type Error type id as defined by `api_info().error_types`.\n+/// @param msg Error message.\n+void nvim_error_event(uint64_t channel_id, Integer type, String msg)\n+  FUNC_API_REMOTE_ONLY\n+{\n+  // TODO(bfredl): consider printing message to user, as will be relevant\n+  // if we fork nvim processes as async workers\n+  ELOG(\"async error on channel %\" PRId64 \": %s\", channel_id, msg.size ? msg.data : \"\");\n+}\n+\n+/// Tells Nvim when a host-terminal event occurred.\n+///\n+/// Supports these events:\n+///\n+///   - \"termresponse\": The host-terminal sent a DA1, OSC, DCS, or APC response sequence to Nvim.\n+///                     The payload is the received response. Sets |v:termresponse| and fires\n+///                     |TermResponse|.\n+///\n+/// @param channel_id\n+/// @param event Event name\n+/// @param value Event payload\n+/// @param[out] err Error details, if any.\n+void nvim_ui_term_event(uint64_t channel_id, String event, Object value, Error *err)\n+  FUNC_API_SINCE(12) FUNC_API_REMOTE_ONLY",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2320735010",
            "id": 2320735010,
            "in_reply_to_id": 2302666520,
            "line": 60,
            "node_id": "PRRC_kwDOAPphoM6KU5si",
            "original_commit_id": "68b9cbbd8ddb2f4385607e1b7a7257629c27b3f5",
            "original_line": 60,
            "original_position": 70,
            "original_start_line": 69,
            "path": "src/nvim/api/events.c",
            "position": 60,
            "pull_request_review_id": 3183299302,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320735010/reactions"
            },
            "side": "RIGHT",
            "start_line": 59,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-04T03:39:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320735010",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2320780760"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320780760"
                }
            },
            "author_association": "MEMBER",
            "body": "> this is intended to be emitted as an RPC notification\r\n\r\nIt's intended to invoke an action on the server, not to be emitted by the server.\r\n\r\nAn event is something that is sent by the server to the client as a notification. An API is a way for a client to invoke an action on the server. What the client does should have nothing to do with this. The TUI client sends all its API calls (`nvim_ui_attach`, `nvim_paste`, `nvim_input` etc.) as events. That does not make them events, as they still invoke actions on the server.",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-09-04T04:14:59Z",
            "diff_hunk": "@@ -0,0 +1,86 @@\n+#include <assert.h>\n+#include <inttypes.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"klib/kvec.h\"\n+#include \"nvim/api/events.h\"\n+#include \"nvim/api/private/converter.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/api/ui.h\"\n+#include \"nvim/assert_defs.h\"\n+#include \"nvim/autocmd.h\"\n+#include \"nvim/autocmd_defs.h\"\n+#include \"nvim/channel.h\"\n+#include \"nvim/channel_defs.h\"\n+#include \"nvim/eval.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/event/loop.h\"\n+#include \"nvim/event/multiqueue.h\"\n+#include \"nvim/event/wstream.h\"\n+#include \"nvim/globals.h\"\n+#include \"nvim/grid.h\"\n+#include \"nvim/highlight.h\"\n+#include \"nvim/macros_defs.h\"\n+#include \"nvim/main.h\"\n+#include \"nvim/map_defs.h\"\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/memory_defs.h\"\n+#include \"nvim/msgpack_rpc/channel.h\"\n+#include \"nvim/msgpack_rpc/channel_defs.h\"\n+#include \"nvim/msgpack_rpc/packer.h\"\n+#include \"nvim/msgpack_rpc/packer_defs.h\"\n+#include \"nvim/option.h\"\n+#include \"nvim/types_defs.h\"\n+#include \"nvim/ui.h\"\n+\n+/// Notification sent to the client channel in case of an error response to an async API request.\n+///\n+/// @param channel_id\n+/// @param type Error type id as defined by `api_info().error_types`.\n+/// @param msg Error message.\n+void nvim_error_event(uint64_t channel_id, Integer type, String msg)\n+  FUNC_API_REMOTE_ONLY\n+{\n+  // TODO(bfredl): consider printing message to user, as will be relevant\n+  // if we fork nvim processes as async workers\n+  ELOG(\"async error on channel %\" PRId64 \": %s\", channel_id, msg.size ? msg.data : \"\");\n+}\n+\n+/// Tells Nvim when a host-terminal event occurred.\n+///\n+/// Supports these events:\n+///\n+///   - \"termresponse\": The host-terminal sent a DA1, OSC, DCS, or APC response sequence to Nvim.\n+///                     The payload is the received response. Sets |v:termresponse| and fires\n+///                     |TermResponse|.\n+///\n+/// @param channel_id\n+/// @param event Event name\n+/// @param value Event payload\n+/// @param[out] err Error details, if any.\n+void nvim_ui_term_event(uint64_t channel_id, String event, Object value, Error *err)\n+  FUNC_API_SINCE(12) FUNC_API_REMOTE_ONLY",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2320780760",
            "id": 2320780760,
            "in_reply_to_id": 2302666520,
            "line": 60,
            "node_id": "PRRC_kwDOAPphoM6KVE3Y",
            "original_commit_id": "68b9cbbd8ddb2f4385607e1b7a7257629c27b3f5",
            "original_line": 60,
            "original_position": 70,
            "original_start_line": 69,
            "path": "src/nvim/api/events.c",
            "position": 60,
            "pull_request_review_id": 3183357102,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320780760/reactions"
            },
            "side": "RIGHT",
            "start_line": 59,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-04T04:22:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320780760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2320795498"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320795498"
                }
            },
            "author_association": "MEMBER",
            "body": "We could introduce a `client_events.h` + `Client Events` doc section, or something like that. But that can wait until we have more events. I plan to also add docs generation for ui-events, then can revisit this.\r\n\r\nAlso, `nvim_ui_term_event` is not something any third party is likely to be interested in, so moving it out of the list of API functions is helpful for users.",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-09-04T04:29:18Z",
            "diff_hunk": "@@ -0,0 +1,86 @@\n+#include <assert.h>\n+#include <inttypes.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"klib/kvec.h\"\n+#include \"nvim/api/events.h\"\n+#include \"nvim/api/private/converter.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/api/ui.h\"\n+#include \"nvim/assert_defs.h\"\n+#include \"nvim/autocmd.h\"\n+#include \"nvim/autocmd_defs.h\"\n+#include \"nvim/channel.h\"\n+#include \"nvim/channel_defs.h\"\n+#include \"nvim/eval.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/event/loop.h\"\n+#include \"nvim/event/multiqueue.h\"\n+#include \"nvim/event/wstream.h\"\n+#include \"nvim/globals.h\"\n+#include \"nvim/grid.h\"\n+#include \"nvim/highlight.h\"\n+#include \"nvim/macros_defs.h\"\n+#include \"nvim/main.h\"\n+#include \"nvim/map_defs.h\"\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/memory_defs.h\"\n+#include \"nvim/msgpack_rpc/channel.h\"\n+#include \"nvim/msgpack_rpc/channel_defs.h\"\n+#include \"nvim/msgpack_rpc/packer.h\"\n+#include \"nvim/msgpack_rpc/packer_defs.h\"\n+#include \"nvim/option.h\"\n+#include \"nvim/types_defs.h\"\n+#include \"nvim/ui.h\"\n+\n+/// Notification sent to the client channel in case of an error response to an async API request.\n+///\n+/// @param channel_id\n+/// @param type Error type id as defined by `api_info().error_types`.\n+/// @param msg Error message.\n+void nvim_error_event(uint64_t channel_id, Integer type, String msg)\n+  FUNC_API_REMOTE_ONLY\n+{\n+  // TODO(bfredl): consider printing message to user, as will be relevant\n+  // if we fork nvim processes as async workers\n+  ELOG(\"async error on channel %\" PRId64 \": %s\", channel_id, msg.size ? msg.data : \"\");\n+}\n+\n+/// Tells Nvim when a host-terminal event occurred.\n+///\n+/// Supports these events:\n+///\n+///   - \"termresponse\": The host-terminal sent a DA1, OSC, DCS, or APC response sequence to Nvim.\n+///                     The payload is the received response. Sets |v:termresponse| and fires\n+///                     |TermResponse|.\n+///\n+/// @param channel_id\n+/// @param event Event name\n+/// @param value Event payload\n+/// @param[out] err Error details, if any.\n+void nvim_ui_term_event(uint64_t channel_id, String event, Object value, Error *err)\n+  FUNC_API_SINCE(12) FUNC_API_REMOTE_ONLY",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2320795498",
            "id": 2320795498,
            "in_reply_to_id": 2302666520,
            "line": 60,
            "node_id": "PRRC_kwDOAPphoM6KVIdq",
            "original_commit_id": "68b9cbbd8ddb2f4385607e1b7a7257629c27b3f5",
            "original_line": 60,
            "original_position": 70,
            "original_start_line": 69,
            "path": "src/nvim/api/events.c",
            "position": 60,
            "pull_request_review_id": 3183374760,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320795498/reactions"
            },
            "side": "RIGHT",
            "start_line": 59,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-04T04:29:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320795498",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35462#discussion_r2320807169"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35462"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320807169"
                }
            },
            "author_association": "MEMBER",
            "body": "> The TUI client sends all its API calls (`nvim_ui_attach`, `nvim_paste`, `nvim_input` etc.) as events.\r\n\r\nThose APIs,\r\n\r\n- do not have \"notify\" semantics (regardless of how a particular client invokes them)\r\n- do not have return values\r\n- are not suffixed with `_event`\r\n\r\nI agree with your point about distinguishing Nvim-sourced vs client-sourced events.\r\n\r\nDoes this discussion get muddled if we decide to support [Lua + API in the TUI](https://github.com/neovim/neovim/pull/35406#issuecomment-3218420328)?",
            "commit_id": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
            "created_at": "2025-09-04T04:39:48Z",
            "diff_hunk": "@@ -0,0 +1,86 @@\n+#include <assert.h>\n+#include <inttypes.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"klib/kvec.h\"\n+#include \"nvim/api/events.h\"\n+#include \"nvim/api/private/converter.h\"\n+#include \"nvim/api/private/defs.h\"\n+#include \"nvim/api/private/helpers.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/api/ui.h\"\n+#include \"nvim/assert_defs.h\"\n+#include \"nvim/autocmd.h\"\n+#include \"nvim/autocmd_defs.h\"\n+#include \"nvim/channel.h\"\n+#include \"nvim/channel_defs.h\"\n+#include \"nvim/eval.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/event/loop.h\"\n+#include \"nvim/event/multiqueue.h\"\n+#include \"nvim/event/wstream.h\"\n+#include \"nvim/globals.h\"\n+#include \"nvim/grid.h\"\n+#include \"nvim/highlight.h\"\n+#include \"nvim/macros_defs.h\"\n+#include \"nvim/main.h\"\n+#include \"nvim/map_defs.h\"\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/memory_defs.h\"\n+#include \"nvim/msgpack_rpc/channel.h\"\n+#include \"nvim/msgpack_rpc/channel_defs.h\"\n+#include \"nvim/msgpack_rpc/packer.h\"\n+#include \"nvim/msgpack_rpc/packer_defs.h\"\n+#include \"nvim/option.h\"\n+#include \"nvim/types_defs.h\"\n+#include \"nvim/ui.h\"\n+\n+/// Notification sent to the client channel in case of an error response to an async API request.\n+///\n+/// @param channel_id\n+/// @param type Error type id as defined by `api_info().error_types`.\n+/// @param msg Error message.\n+void nvim_error_event(uint64_t channel_id, Integer type, String msg)\n+  FUNC_API_REMOTE_ONLY\n+{\n+  // TODO(bfredl): consider printing message to user, as will be relevant\n+  // if we fork nvim processes as async workers\n+  ELOG(\"async error on channel %\" PRId64 \": %s\", channel_id, msg.size ? msg.data : \"\");\n+}\n+\n+/// Tells Nvim when a host-terminal event occurred.\n+///\n+/// Supports these events:\n+///\n+///   - \"termresponse\": The host-terminal sent a DA1, OSC, DCS, or APC response sequence to Nvim.\n+///                     The payload is the received response. Sets |v:termresponse| and fires\n+///                     |TermResponse|.\n+///\n+/// @param channel_id\n+/// @param event Event name\n+/// @param value Event payload\n+/// @param[out] err Error details, if any.\n+void nvim_ui_term_event(uint64_t channel_id, String event, Object value, Error *err)\n+  FUNC_API_SINCE(12) FUNC_API_REMOTE_ONLY",
            "html_url": "https://github.com/neovim/neovim/pull/35462#discussion_r2320807169",
            "id": 2320807169,
            "in_reply_to_id": 2302666520,
            "line": 60,
            "node_id": "PRRC_kwDOAPphoM6KVLUB",
            "original_commit_id": "68b9cbbd8ddb2f4385607e1b7a7257629c27b3f5",
            "original_line": 60,
            "original_position": 70,
            "original_start_line": 69,
            "path": "src/nvim/api/events.c",
            "position": 60,
            "pull_request_review_id": 3183389794,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320807169/reactions"
            },
            "side": "RIGHT",
            "start_line": 59,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-09-04T04:41:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2320807169",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35462/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35462/commits",
    "created_at": "2025-08-25T03:13:12Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35462.diff",
    "draft": false,
    "head": {
        "label": "justinmk:doc2",
        "ref": "doc2",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/justinmk/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/justinmk/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/justinmk/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/justinmk/neovim/branches{/branch}",
            "clone_url": "https://github.com/justinmk/neovim.git",
            "collaborators_url": "https://api.github.com/repos/justinmk/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/justinmk/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/justinmk/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/justinmk/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/justinmk/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/justinmk/neovim/contributors",
            "created_at": "2014-02-28T23:17:54Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/justinmk/neovim/deployments",
            "description": "somewhere in todo.txt",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/justinmk/neovim/downloads",
            "events_url": "https://api.github.com/repos/justinmk/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/justinmk/neovim/forks",
            "full_name": "justinmk/neovim",
            "git_commits_url": "https://api.github.com/repos/justinmk/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/justinmk/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/justinmk/neovim/git/tags{/sha}",
            "git_url": "git://github.com/justinmk/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "http://neovim.io",
            "hooks_url": "https://api.github.com/repos/justinmk/neovim/hooks",
            "html_url": "https://github.com/justinmk/neovim",
            "id": 17302877,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/justinmk/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/justinmk/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/justinmk/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/justinmk/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/justinmk/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/justinmk/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/justinmk/neovim/merges",
            "milestones_url": "https://api.github.com/repos/justinmk/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNzMwMjg3Nw==",
            "notifications_url": "https://api.github.com/repos/justinmk/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/justinmk/neovim/pulls{/number}",
            "pushed_at": "2025-09-08T03:45:24Z",
            "releases_url": "https://api.github.com/repos/justinmk/neovim/releases{/id}",
            "size": 330663,
            "ssh_url": "git@github.com:justinmk/neovim.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/justinmk/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/justinmk/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/justinmk/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/justinmk/neovim/subscription",
            "svn_url": "https://github.com/justinmk/neovim",
            "tags_url": "https://api.github.com/repos/justinmk/neovim/tags",
            "teams_url": "https://api.github.com/repos/justinmk/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/justinmk/neovim/git/trees{/sha}",
            "updated_at": "2025-01-13T16:10:06Z",
            "url": "https://api.github.com/repos/justinmk/neovim",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35462",
    "id": 2770425645,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35462",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "0052CC",
            "default": false,
            "description": "",
            "id": 8431892071,
            "name": "ci:backport release-0.11",
            "node_id": "LA_kwDOAPphoM8AAAAB9pR2Zw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ci:backport%20release-0.11"
        }
    ],
    "locked": false,
    "merge_commit_sha": "2b421d518faec9e1b0a6d1c46026d2f13f4fb73f",
    "merged_at": "2025-09-04T04:30:28Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6lIVct",
    "number": 35462,
    "patch_url": "https://github.com/neovim/neovim/pull/35462.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35462/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/2affb8373f3f52ff3dba45508ff0fe4e6d1eda6b",
    "title": "docs: lsp, misc",
    "updated_at": "2025-09-08T01:18:58Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35462",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}