{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34277/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34277/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34277"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34277"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34277/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/135d4e969e698af37759afcab15a1e86c8ef3665"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6150,
            "forks_count": 6150,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1963,
            "open_issues_count": 1963,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-06-30T23:58:06Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 330464,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90708,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-01T02:27:30Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90708,
            "watchers_count": 90708,
            "web_commit_signoff_required": false
        },
        "sha": "492ea28612b2e47e187d6a37f582267655ba79fe",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem:\r\nTags are manually parsed in C which is not flexible and prone to errors.\r\n\r\nSolution:\r\nUse the power of treesitter to extract the tags from helpfiles.\r\n\r\n---\r\n\r\nThis work is inspired by and based on #34186 and the suggestions there.\r\n\r\n\r\nThis might not work during cross-compilation because Nvim binary is not available on the host, and this code can't be run using \"nlua0\". I don't know enough about nlua0 to verify if this approach would work for that case.\r\n\r\nEven if it will not work for nlua0 it would still be nice to include in core and replace the manual tag extraction in C with this TS-based approach. Open for feedback and discussion.\r\n\r\n---\r\n\r\n\r\nTODO:\r\n- [x] call from C\r\n- [x] https://github.com/neovim/neovim/pull/34255\r\n- [x] nonblocking\r\n- [x] handle translated help files\r\n- [ ] add tests\r\n- [ ] add docs\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34277#discussion_r2120931783"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120931783"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This should probably have its own typename, but I'm not sure what it should be. TagsTriplet, TagsFormat, TagsLine? No clue.",
            "commit_id": "135d4e969e698af37759afcab15a1e86c8ef3665",
            "created_at": "2025-06-02T11:57:07Z",
            "diff_hunk": "@@ -0,0 +1,106 @@\n+local M = {}\n+\n+local ts = vim.treesitter\n+\n+local query = ts.query.parse('vimdoc', [[\n+    (tag (word) @tagname)\n+]])\n+\n+--- Find all helptags in a single file.\n+--- @param filename string helpfile with tags\n+--- @return { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command",
            "html_url": "https://github.com/neovim/neovim/pull/34277#discussion_r2120931783",
            "id": 2120931783,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5-atnH",
            "original_commit_id": "9eaabc04f73b6c22d921769466403b9b04dfc359",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/_helptags.lua",
            "position": null,
            "pull_request_review_id": 2888066925,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120931783/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-02T11:57:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120931783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34277#discussion_r2120940763"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120940763"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Not sure if this is the right approach of reporting a Vim-style error",
            "commit_id": "135d4e969e698af37759afcab15a1e86c8ef3665",
            "created_at": "2025-06-02T12:01:03Z",
            "diff_hunk": "@@ -0,0 +1,106 @@\n+local M = {}\n+\n+local ts = vim.treesitter\n+\n+local query = ts.query.parse('vimdoc', [[\n+    (tag (word) @tagname)\n+]])\n+\n+--- Find all helptags in a single file.\n+--- @param filename string helpfile with tags\n+--- @return { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+local function extract_file_tags(filename)\n+  local file = assert(io.open(filename, 'r'))\n+  local source = file:read('*a')\n+  file:close()\n+\n+  local tags = {}\n+  local tree = ts.get_string_parser(source, 'vimdoc'):parse()[1]:root()\n+\n+  for _, match in query:iter_matches(tree, source) do\n+    for id, node in pairs(match) do\n+      if query.captures[id] == 'tagname' then\n+        local tagname = ts.get_node_text(node[1], source)\n+        local escaped = string.gsub(tagname, '[\\\\/]', '\\\\%0')\n+        local searchcmd = tagname == 'help-tags' and '1' or ('/*%s*'):format(escaped)\n+        table.insert(tags, { tagname, filename, searchcmd })\n+      end\n+    end\n+  end\n+\n+  return tags\n+end\n+\n+--- Report duplicate tags.\n+--- @param tags { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+--- @return boolean true if there are duplicate tags\n+local function check_duplicate_tags(tags)\n+  local found = false\n+\n+  local prevtag, prevfn\n+  for _, tag in ipairs(tags) do\n+    local curtag, curfn, _ = unpack(tag)\n+\n+    if curtag == prevtag then\n+      found = true\n+      local other_fn = prevfn ~= curfn and (' and ' .. prevfn) or ''\n+      vim.api.nvim_echo({\n+        { ('E154: Duplicate tag \"%s\" in %s%s'):format(curtag, curfn, other_fn) }\n+      }, true, { err = true })",
            "html_url": "https://github.com/neovim/neovim/pull/34277#discussion_r2120940763",
            "id": 2120940763,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5-avzb",
            "original_commit_id": "9eaabc04f73b6c22d921769466403b9b04dfc359",
            "original_line": 49,
            "original_position": 49,
            "original_start_line": 47,
            "path": "runtime/lua/vim/_helptags.lua",
            "position": null,
            "pull_request_review_id": 2888080333,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120940763/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-02T12:03:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120940763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34277#discussion_r2120942767"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120942767"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Is `assert()` fine here or should this report a Vim-style error to the user (E40)? Or ignore? ",
            "commit_id": "135d4e969e698af37759afcab15a1e86c8ef3665",
            "created_at": "2025-06-02T12:02:22Z",
            "diff_hunk": "@@ -0,0 +1,106 @@\n+local M = {}\n+\n+local ts = vim.treesitter\n+\n+local query = ts.query.parse('vimdoc', [[\n+    (tag (word) @tagname)\n+]])\n+\n+--- Find all helptags in a single file.\n+--- @param filename string helpfile with tags\n+--- @return { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+local function extract_file_tags(filename)\n+  local file = assert(io.open(filename, 'r'))\n+  local source = file:read('*a')\n+  file:close()",
            "html_url": "https://github.com/neovim/neovim/pull/34277#discussion_r2120942767",
            "id": 2120942767,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5-awSv",
            "original_commit_id": "9eaabc04f73b6c22d921769466403b9b04dfc359",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": 13,
            "path": "runtime/lua/vim/_helptags.lua",
            "position": null,
            "pull_request_review_id": 2888080333,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120942767/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-02T12:03:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120942767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34277#discussion_r2120943917"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120943917"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "See comment above: what to do on error?",
            "commit_id": "135d4e969e698af37759afcab15a1e86c8ef3665",
            "created_at": "2025-06-02T12:03:00Z",
            "diff_hunk": "@@ -0,0 +1,106 @@\n+local M = {}\n+\n+local ts = vim.treesitter\n+\n+local query = ts.query.parse('vimdoc', [[\n+    (tag (word) @tagname)\n+]])\n+\n+--- Find all helptags in a single file.\n+--- @param filename string helpfile with tags\n+--- @return { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+local function extract_file_tags(filename)\n+  local file = assert(io.open(filename, 'r'))\n+  local source = file:read('*a')\n+  file:close()\n+\n+  local tags = {}\n+  local tree = ts.get_string_parser(source, 'vimdoc'):parse()[1]:root()\n+\n+  for _, match in query:iter_matches(tree, source) do\n+    for id, node in pairs(match) do\n+      if query.captures[id] == 'tagname' then\n+        local tagname = ts.get_node_text(node[1], source)\n+        local escaped = string.gsub(tagname, '[\\\\/]', '\\\\%0')\n+        local searchcmd = tagname == 'help-tags' and '1' or ('/*%s*'):format(escaped)\n+        table.insert(tags, { tagname, filename, searchcmd })\n+      end\n+    end\n+  end\n+\n+  return tags\n+end\n+\n+--- Report duplicate tags.\n+--- @param tags { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+--- @return boolean true if there are duplicate tags\n+local function check_duplicate_tags(tags)\n+  local found = false\n+\n+  local prevtag, prevfn\n+  for _, tag in ipairs(tags) do\n+    local curtag, curfn, _ = unpack(tag)\n+\n+    if curtag == prevtag then\n+      found = true\n+      local other_fn = prevfn ~= curfn and (' and ' .. prevfn) or ''\n+      vim.api.nvim_echo({\n+        { ('E154: Duplicate tag \"%s\" in %s%s'):format(curtag, curfn, other_fn) }\n+      }, true, { err = true })\n+    end\n+\n+    prevtag = curtag\n+    prevfn = curfn\n+  end\n+\n+  return found\n+end\n+\n+--- Generate a tags file for a directory and its subdirectories.\n+--- @param dir string\n+local function helptags_in_dir(dir, include_helptags_tag)\n+  local files = vim.fs.find(function(name, _)\n+    return vim.endswith(name, '.txt')\n+  end, { path = dir, type = 'file', limit = math.huge })\n+\n+  local tags = {}\n+  for _, filename in ipairs(files) do\n+    local filetags = extract_file_tags(filename)\n+    vim.list_extend(tags, filetags)\n+  end\n+\n+  if include_helptags_tag then\n+    table.insert(tags, { 'help-tags', 'tags', '1' })\n+  end\n+\n+  table.sort(tags, function(a, b)\n+    return a[1] < b[1]\n+  end)\n+\n+  if not check_duplicate_tags(tags) then\n+    local tagsfile = vim.fs.joinpath(dir, 'tags')\n+    local f = assert(io.open(tagsfile, 'w'))",
            "html_url": "https://github.com/neovim/neovim/pull/34277#discussion_r2120943917",
            "id": 2120943917,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5-awkt",
            "original_commit_id": "9eaabc04f73b6c22d921769466403b9b04dfc359",
            "original_line": 82,
            "original_position": 82,
            "original_start_line": null,
            "path": "runtime/lua/vim/_helptags.lua",
            "position": null,
            "pull_request_review_id": 2888080333,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120943917/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-02T12:03:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2120943917",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34277#discussion_r2139477148"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139477148"
                }
            },
            "author_association": "MEMBER",
            "body": "Why not use `nvim_get_runtime_file` directly?",
            "commit_id": "135d4e969e698af37759afcab15a1e86c8ef3665",
            "created_at": "2025-06-11T08:02:17Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+local M = {}\n+\n+local ts = vim.treesitter\n+local query = ts.query.parse('vimdoc', '(tag (word) @tagname)')\n+\n+--- @alias TagLocation { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+\n+--- Find all helptags in a single file.\n+---\n+--- @param filename string helpfile with tags\n+--- @return TagLocation[] # empty if file is not readable\n+local function extract_file_tags(filename)\n+  local f, err = io.open(filename, 'r')\n+  if f == nil or err then\n+    vim.notify(('E153: Unable to open %s for reading'):format(filename), vim.log.levels.ERROR)\n+    return {}\n+  end\n+  local source = f:read('*a')\n+  f:close()\n+  local fn = vim.fs.basename(filename)\n+\n+  local tags = {}\n+  local tree = ts.get_string_parser(source, 'vimdoc'):parse()[1]:root()\n+\n+  for _, match in query:iter_matches(tree, source) do\n+    for id, node in pairs(match) do\n+      if query.captures[id] == 'tagname' then\n+        local tagname = ts.get_node_text(node[1], source)\n+        local escaped = tagname:gsub('[\\\\/]', '\\\\%0')\n+        local searchcmd = '/*' .. escaped .. '*'\n+        table.insert(tags, { tagname, fn, searchcmd })\n+      end\n+    end\n+  end\n+\n+  return tags\n+end\n+\n+--- Report duplicate tags.\n+---\n+--- @param tags TagLocation[]\n+--- @return boolean # true if there are duplicate tags\n+local function duplicate_tags(tags)\n+  local found = false\n+  local prevtag, prevfn\n+  for _, tag in ipairs(tags) do\n+    local curtag, curfn, _ = unpack(tag)\n+    if curtag == prevtag then\n+      found = true\n+      local other_fn = prevfn ~= curfn and (' and ' .. prevfn) or ''\n+      vim.notify(\n+        ('E154: Duplicate tag \"%s\" in %s%s'):format(curtag, curfn, other_fn),\n+        vim.log.levels.WARN\n+      )\n+    end\n+    prevtag = curtag\n+    prevfn = curfn\n+  end\n+  return found\n+end\n+\n+--- Extract tags from a list of helpfiles.\n+---\n+--- @param helpfiles string[] list of helpfiles\n+--- @param tagsfile string the filename of the 'tags' file\n+--- @param include_helptags_tag boolean true if the 'tags' tag should be included\n+local function create_tags_from_files(helpfiles, tagsfile, include_helptags_tag)\n+  ---@type TagLocation\n+  local tags = {}\n+  local i = 1\n+  local function process_helpfile(co)\n+    if i > #helpfiles then\n+      coroutine.resume(co, true)\n+      return\n+    end\n+\n+    local filename = helpfiles[i]\n+    i = i + 1\n+\n+    vim.schedule(function()\n+      local filetags = extract_file_tags(filename)\n+      vim.list_extend(tags, filetags)\n+      process_helpfile(co)\n+    end)\n+  end\n+\n+  coroutine.wrap(function()\n+    process_helpfile(coroutine.running())\n+    coroutine.yield()\n+\n+    if include_helptags_tag then\n+      table.insert(tags, { 'help-tags', 'tags', '1' })\n+    end\n+\n+    table.sort(tags, function(a, b)\n+      return a[1] < b[1]\n+    end)\n+\n+    if vim.tbl_isempty(tags) or not duplicate_tags(tags) then\n+      return\n+    end\n+\n+    local f, err = io.open(tagsfile, 'w')\n+    if f == nil or err then\n+      vim.notify(('E152: Cannot open %s for writing'):format(tagsfile), vim.log.levels.ERROR)\n+      return\n+    end\n+\n+    local lines = vim\n+      .iter(tags)\n+      :map(function(v)\n+        return table.concat(v, '\\t')\n+      end)\n+      :join('\\n')\n+\n+    f:write(lines, '\\n')\n+\n+    f:close()\n+  end)()\n+end\n+\n+--- Returns a list of all existing \"doc\" subdirectories in the runtimepath.",
            "html_url": "https://github.com/neovim/neovim/pull/34277#discussion_r2139477148",
            "id": 2139477148,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_hdSc",
            "original_commit_id": "12aa06a375184e64a4a7892e1115a693c5b2d6c2",
            "original_line": 122,
            "original_position": 122,
            "original_start_line": null,
            "path": "runtime/lua/vim/_helptags.lua",
            "position": null,
            "pull_request_review_id": 2916072762,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139477148/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T08:02:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139477148",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34277#discussion_r2140888853"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2140888853"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Great suggestion! Didn't know about the function.",
            "commit_id": "135d4e969e698af37759afcab15a1e86c8ef3665",
            "created_at": "2025-06-11T19:09:45Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+local M = {}\n+\n+local ts = vim.treesitter\n+local query = ts.query.parse('vimdoc', '(tag (word) @tagname)')\n+\n+--- @alias TagLocation { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+\n+--- Find all helptags in a single file.\n+---\n+--- @param filename string helpfile with tags\n+--- @return TagLocation[] # empty if file is not readable\n+local function extract_file_tags(filename)\n+  local f, err = io.open(filename, 'r')\n+  if f == nil or err then\n+    vim.notify(('E153: Unable to open %s for reading'):format(filename), vim.log.levels.ERROR)\n+    return {}\n+  end\n+  local source = f:read('*a')\n+  f:close()\n+  local fn = vim.fs.basename(filename)\n+\n+  local tags = {}\n+  local tree = ts.get_string_parser(source, 'vimdoc'):parse()[1]:root()\n+\n+  for _, match in query:iter_matches(tree, source) do\n+    for id, node in pairs(match) do\n+      if query.captures[id] == 'tagname' then\n+        local tagname = ts.get_node_text(node[1], source)\n+        local escaped = tagname:gsub('[\\\\/]', '\\\\%0')\n+        local searchcmd = '/*' .. escaped .. '*'\n+        table.insert(tags, { tagname, fn, searchcmd })\n+      end\n+    end\n+  end\n+\n+  return tags\n+end\n+\n+--- Report duplicate tags.\n+---\n+--- @param tags TagLocation[]\n+--- @return boolean # true if there are duplicate tags\n+local function duplicate_tags(tags)\n+  local found = false\n+  local prevtag, prevfn\n+  for _, tag in ipairs(tags) do\n+    local curtag, curfn, _ = unpack(tag)\n+    if curtag == prevtag then\n+      found = true\n+      local other_fn = prevfn ~= curfn and (' and ' .. prevfn) or ''\n+      vim.notify(\n+        ('E154: Duplicate tag \"%s\" in %s%s'):format(curtag, curfn, other_fn),\n+        vim.log.levels.WARN\n+      )\n+    end\n+    prevtag = curtag\n+    prevfn = curfn\n+  end\n+  return found\n+end\n+\n+--- Extract tags from a list of helpfiles.\n+---\n+--- @param helpfiles string[] list of helpfiles\n+--- @param tagsfile string the filename of the 'tags' file\n+--- @param include_helptags_tag boolean true if the 'tags' tag should be included\n+local function create_tags_from_files(helpfiles, tagsfile, include_helptags_tag)\n+  ---@type TagLocation\n+  local tags = {}\n+  local i = 1\n+  local function process_helpfile(co)\n+    if i > #helpfiles then\n+      coroutine.resume(co, true)\n+      return\n+    end\n+\n+    local filename = helpfiles[i]\n+    i = i + 1\n+\n+    vim.schedule(function()\n+      local filetags = extract_file_tags(filename)\n+      vim.list_extend(tags, filetags)\n+      process_helpfile(co)\n+    end)\n+  end\n+\n+  coroutine.wrap(function()\n+    process_helpfile(coroutine.running())\n+    coroutine.yield()\n+\n+    if include_helptags_tag then\n+      table.insert(tags, { 'help-tags', 'tags', '1' })\n+    end\n+\n+    table.sort(tags, function(a, b)\n+      return a[1] < b[1]\n+    end)\n+\n+    if vim.tbl_isempty(tags) or not duplicate_tags(tags) then\n+      return\n+    end\n+\n+    local f, err = io.open(tagsfile, 'w')\n+    if f == nil or err then\n+      vim.notify(('E152: Cannot open %s for writing'):format(tagsfile), vim.log.levels.ERROR)\n+      return\n+    end\n+\n+    local lines = vim\n+      .iter(tags)\n+      :map(function(v)\n+        return table.concat(v, '\\t')\n+      end)\n+      :join('\\n')\n+\n+    f:write(lines, '\\n')\n+\n+    f:close()\n+  end)()\n+end\n+\n+--- Returns a list of all existing \"doc\" subdirectories in the runtimepath.",
            "html_url": "https://github.com/neovim/neovim/pull/34277#discussion_r2140888853",
            "id": 2140888853,
            "in_reply_to_id": 2139477148,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_m18V",
            "original_commit_id": "12aa06a375184e64a4a7892e1115a693c5b2d6c2",
            "original_line": 122,
            "original_position": 122,
            "original_start_line": null,
            "path": "runtime/lua/vim/_helptags.lua",
            "position": null,
            "pull_request_review_id": 2918392423,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2140888853/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T19:09:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2140888853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34277#discussion_r2141953068"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141953068"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think we should add manual async at this point since we're already considering a `vim.async` module based on @lewis6991 work. Please look at #34009 and https://github.com/lewis6991/async.nvim, and pull in whatever you need from that into a `vim._async` module (that we'll merge with the one from #34009).",
            "commit_id": "135d4e969e698af37759afcab15a1e86c8ef3665",
            "created_at": "2025-06-12T07:43:19Z",
            "diff_hunk": "@@ -0,0 +1,164 @@\n+local M = {}\n+\n+local ts = vim.treesitter\n+local query = ts.query.parse('vimdoc', '(tag (word) @tagname)')\n+\n+--- @alias TagLocation { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+\n+--- Find all helptags in a single file.\n+---\n+--- @param filename string helpfile with tags\n+--- @return TagLocation[] # empty if file is not readable\n+local function extract_file_tags(filename)\n+  local f, err = io.open(filename, 'r')\n+  if f == nil or err then\n+    vim.notify(('E153: Unable to open %s for reading'):format(filename), vim.log.levels.ERROR)\n+    return {}\n+  end\n+  local source = f:read('*a')\n+  f:close()\n+  local fn = vim.fs.basename(filename)\n+\n+  local tags = {}\n+  local tree = ts.get_string_parser(source, 'vimdoc'):parse()[1]:root()\n+\n+  for _, match in query:iter_matches(tree, source) do\n+    for id, node in pairs(match) do\n+      if query.captures[id] == 'tagname' then\n+        local tagname = ts.get_node_text(node[1], source)\n+        local escaped = tagname:gsub('[\\\\/]', '\\\\%0')\n+        local searchcmd = '/*' .. escaped .. '*'\n+        table.insert(tags, { tagname, fn, searchcmd })\n+      end\n+    end\n+  end\n+\n+  return tags\n+end\n+\n+--- Report duplicate tags.\n+---\n+--- @param tags TagLocation[]\n+--- @return boolean # true if there are duplicate tags\n+local function duplicate_tags(tags)\n+  local found = false\n+  local prevtag, prevfn\n+  for _, tag in ipairs(tags) do\n+    local curtag, curfn, _ = unpack(tag)\n+    if curtag == prevtag then\n+      found = true\n+      local other_fn = prevfn ~= curfn and (' and ' .. prevfn) or ''\n+      vim.notify(\n+        ('E154: Duplicate tag \"%s\" in %s%s'):format(curtag, curfn, other_fn),\n+        vim.log.levels.WARN\n+      )\n+    end\n+    prevtag = curtag\n+    prevfn = curfn\n+  end\n+  return found\n+end\n+\n+--- Extract tags from a list of helpfiles.\n+---\n+--- @param helpfiles string[] list of helpfiles\n+--- @param tagsfile string the filename of the 'tags' file\n+--- @param include_helptags_tag boolean true if the 'tags' tag should be included\n+local function create_tags_from_files(helpfiles, tagsfile, include_helptags_tag)\n+  ---@type TagLocation\n+  local tags = {}\n+  local i = 1\n+  local function process_helpfile(co)\n+    if i > #helpfiles then\n+      coroutine.resume(co, true)\n+      return\n+    end\n+\n+    local filename = helpfiles[i]\n+    i = i + 1\n+\n+    vim.schedule(function()\n+      local filetags = extract_file_tags(filename)\n+      vim.list_extend(tags, filetags)\n+      process_helpfile(co)\n+    end)\n+  end\n+\n+  coroutine.wrap(function()",
            "html_url": "https://github.com/neovim/neovim/pull/34277#discussion_r2141953068",
            "id": 2141953068,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_q5ws",
            "original_commit_id": "c42e386cd1b0dcda8a67368bc4ccce5226be618f",
            "original_line": 87,
            "original_position": 87,
            "original_start_line": null,
            "path": "runtime/lua/vim/_helptags.lua",
            "position": null,
            "pull_request_review_id": 2919914018,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141953068/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T07:43:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141953068",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34277#discussion_r2142062094"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142062094"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ah yes I indeed knew about the efforts for creating a vim.async module, but thought I wouldn't be a able to make use of them here. For now, I'll just pull in the vim._async module from the vim.pack PR",
            "commit_id": "135d4e969e698af37759afcab15a1e86c8ef3665",
            "created_at": "2025-06-12T08:34:06Z",
            "diff_hunk": "@@ -0,0 +1,164 @@\n+local M = {}\n+\n+local ts = vim.treesitter\n+local query = ts.query.parse('vimdoc', '(tag (word) @tagname)')\n+\n+--- @alias TagLocation { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+\n+--- Find all helptags in a single file.\n+---\n+--- @param filename string helpfile with tags\n+--- @return TagLocation[] # empty if file is not readable\n+local function extract_file_tags(filename)\n+  local f, err = io.open(filename, 'r')\n+  if f == nil or err then\n+    vim.notify(('E153: Unable to open %s for reading'):format(filename), vim.log.levels.ERROR)\n+    return {}\n+  end\n+  local source = f:read('*a')\n+  f:close()\n+  local fn = vim.fs.basename(filename)\n+\n+  local tags = {}\n+  local tree = ts.get_string_parser(source, 'vimdoc'):parse()[1]:root()\n+\n+  for _, match in query:iter_matches(tree, source) do\n+    for id, node in pairs(match) do\n+      if query.captures[id] == 'tagname' then\n+        local tagname = ts.get_node_text(node[1], source)\n+        local escaped = tagname:gsub('[\\\\/]', '\\\\%0')\n+        local searchcmd = '/*' .. escaped .. '*'\n+        table.insert(tags, { tagname, fn, searchcmd })\n+      end\n+    end\n+  end\n+\n+  return tags\n+end\n+\n+--- Report duplicate tags.\n+---\n+--- @param tags TagLocation[]\n+--- @return boolean # true if there are duplicate tags\n+local function duplicate_tags(tags)\n+  local found = false\n+  local prevtag, prevfn\n+  for _, tag in ipairs(tags) do\n+    local curtag, curfn, _ = unpack(tag)\n+    if curtag == prevtag then\n+      found = true\n+      local other_fn = prevfn ~= curfn and (' and ' .. prevfn) or ''\n+      vim.notify(\n+        ('E154: Duplicate tag \"%s\" in %s%s'):format(curtag, curfn, other_fn),\n+        vim.log.levels.WARN\n+      )\n+    end\n+    prevtag = curtag\n+    prevfn = curfn\n+  end\n+  return found\n+end\n+\n+--- Extract tags from a list of helpfiles.\n+---\n+--- @param helpfiles string[] list of helpfiles\n+--- @param tagsfile string the filename of the 'tags' file\n+--- @param include_helptags_tag boolean true if the 'tags' tag should be included\n+local function create_tags_from_files(helpfiles, tagsfile, include_helptags_tag)\n+  ---@type TagLocation\n+  local tags = {}\n+  local i = 1\n+  local function process_helpfile(co)\n+    if i > #helpfiles then\n+      coroutine.resume(co, true)\n+      return\n+    end\n+\n+    local filename = helpfiles[i]\n+    i = i + 1\n+\n+    vim.schedule(function()\n+      local filetags = extract_file_tags(filename)\n+      vim.list_extend(tags, filetags)\n+      process_helpfile(co)\n+    end)\n+  end\n+\n+  coroutine.wrap(function()",
            "html_url": "https://github.com/neovim/neovim/pull/34277#discussion_r2142062094",
            "id": 2142062094,
            "in_reply_to_id": 2141953068,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_rUYO",
            "original_commit_id": "c42e386cd1b0dcda8a67368bc4ccce5226be618f",
            "original_line": 87,
            "original_position": 87,
            "original_start_line": null,
            "path": "runtime/lua/vim/_helptags.lua",
            "position": null,
            "pull_request_review_id": 2920080722,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142062094/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T08:34:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142062094",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34277#discussion_r2142097491"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142097491"
                }
            },
            "author_association": "MEMBER",
            "body": "The potential of `vim.async` shouldn't restrict the use of coroutines. `vim.async` is just a very generalized layer on top of coroutines, but if the requirements are small (like) here, then I don't see a problem with using coroutines. I still think coroutines are important for generator functions (functions that return iterators).\r\n\r\nThe usage here is contained within ~30LOC, if anything this is might be preferable to using `vim.async`.\r\n\r\nThough I'm not quite sure why coroutines are being used here (needs a comment). It looks like it's to not eat up the main loop, in which case `vim.async` + `uv.fs_open` might help in the future.\r\n\r\nWhat is the effect if no coroutines where used here? Does creating tags from helpfiles cause lots of lag or something?",
            "commit_id": "135d4e969e698af37759afcab15a1e86c8ef3665",
            "created_at": "2025-06-12T08:53:14Z",
            "diff_hunk": "@@ -0,0 +1,164 @@\n+local M = {}\n+\n+local ts = vim.treesitter\n+local query = ts.query.parse('vimdoc', '(tag (word) @tagname)')\n+\n+--- @alias TagLocation { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+\n+--- Find all helptags in a single file.\n+---\n+--- @param filename string helpfile with tags\n+--- @return TagLocation[] # empty if file is not readable\n+local function extract_file_tags(filename)\n+  local f, err = io.open(filename, 'r')\n+  if f == nil or err then\n+    vim.notify(('E153: Unable to open %s for reading'):format(filename), vim.log.levels.ERROR)\n+    return {}\n+  end\n+  local source = f:read('*a')\n+  f:close()\n+  local fn = vim.fs.basename(filename)\n+\n+  local tags = {}\n+  local tree = ts.get_string_parser(source, 'vimdoc'):parse()[1]:root()\n+\n+  for _, match in query:iter_matches(tree, source) do\n+    for id, node in pairs(match) do\n+      if query.captures[id] == 'tagname' then\n+        local tagname = ts.get_node_text(node[1], source)\n+        local escaped = tagname:gsub('[\\\\/]', '\\\\%0')\n+        local searchcmd = '/*' .. escaped .. '*'\n+        table.insert(tags, { tagname, fn, searchcmd })\n+      end\n+    end\n+  end\n+\n+  return tags\n+end\n+\n+--- Report duplicate tags.\n+---\n+--- @param tags TagLocation[]\n+--- @return boolean # true if there are duplicate tags\n+local function duplicate_tags(tags)\n+  local found = false\n+  local prevtag, prevfn\n+  for _, tag in ipairs(tags) do\n+    local curtag, curfn, _ = unpack(tag)\n+    if curtag == prevtag then\n+      found = true\n+      local other_fn = prevfn ~= curfn and (' and ' .. prevfn) or ''\n+      vim.notify(\n+        ('E154: Duplicate tag \"%s\" in %s%s'):format(curtag, curfn, other_fn),\n+        vim.log.levels.WARN\n+      )\n+    end\n+    prevtag = curtag\n+    prevfn = curfn\n+  end\n+  return found\n+end\n+\n+--- Extract tags from a list of helpfiles.\n+---\n+--- @param helpfiles string[] list of helpfiles\n+--- @param tagsfile string the filename of the 'tags' file\n+--- @param include_helptags_tag boolean true if the 'tags' tag should be included\n+local function create_tags_from_files(helpfiles, tagsfile, include_helptags_tag)\n+  ---@type TagLocation\n+  local tags = {}\n+  local i = 1\n+  local function process_helpfile(co)\n+    if i > #helpfiles then\n+      coroutine.resume(co, true)\n+      return\n+    end\n+\n+    local filename = helpfiles[i]\n+    i = i + 1\n+\n+    vim.schedule(function()\n+      local filetags = extract_file_tags(filename)\n+      vim.list_extend(tags, filetags)\n+      process_helpfile(co)\n+    end)\n+  end\n+\n+  coroutine.wrap(function()",
            "html_url": "https://github.com/neovim/neovim/pull/34277#discussion_r2142097491",
            "id": 2142097491,
            "in_reply_to_id": 2141953068,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_rdBT",
            "original_commit_id": "c42e386cd1b0dcda8a67368bc4ccce5226be618f",
            "original_line": 87,
            "original_position": 87,
            "original_start_line": null,
            "path": "runtime/lua/vim/_helptags.lua",
            "position": null,
            "pull_request_review_id": 2920137185,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142097491/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T08:53:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142097491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34277#discussion_r2142135454"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34277"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142135454"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I noticed it blocked the editor (~2 secs for the runtimedir). Although maybe vim.schedule will be enough for this. \n\nI added coroutines because I was looking for parallelization, as extracting tags for every file is a task that can be parallelized very efficiently. But I learned that coroutines all run on a single thread and file reads are blocking. Still, this implementation felt 'snappier' and faster to me than the fully sync approach. I'll try vim.schedule (+ uv.fs_open)",
            "commit_id": "135d4e969e698af37759afcab15a1e86c8ef3665",
            "created_at": "2025-06-12T09:12:37Z",
            "diff_hunk": "@@ -0,0 +1,164 @@\n+local M = {}\n+\n+local ts = vim.treesitter\n+local query = ts.query.parse('vimdoc', '(tag (word) @tagname)')\n+\n+--- @alias TagLocation { [1]: string, [2]: string, [3]: string}[] tuple of tag, file, and search command\n+\n+--- Find all helptags in a single file.\n+---\n+--- @param filename string helpfile with tags\n+--- @return TagLocation[] # empty if file is not readable\n+local function extract_file_tags(filename)\n+  local f, err = io.open(filename, 'r')\n+  if f == nil or err then\n+    vim.notify(('E153: Unable to open %s for reading'):format(filename), vim.log.levels.ERROR)\n+    return {}\n+  end\n+  local source = f:read('*a')\n+  f:close()\n+  local fn = vim.fs.basename(filename)\n+\n+  local tags = {}\n+  local tree = ts.get_string_parser(source, 'vimdoc'):parse()[1]:root()\n+\n+  for _, match in query:iter_matches(tree, source) do\n+    for id, node in pairs(match) do\n+      if query.captures[id] == 'tagname' then\n+        local tagname = ts.get_node_text(node[1], source)\n+        local escaped = tagname:gsub('[\\\\/]', '\\\\%0')\n+        local searchcmd = '/*' .. escaped .. '*'\n+        table.insert(tags, { tagname, fn, searchcmd })\n+      end\n+    end\n+  end\n+\n+  return tags\n+end\n+\n+--- Report duplicate tags.\n+---\n+--- @param tags TagLocation[]\n+--- @return boolean # true if there are duplicate tags\n+local function duplicate_tags(tags)\n+  local found = false\n+  local prevtag, prevfn\n+  for _, tag in ipairs(tags) do\n+    local curtag, curfn, _ = unpack(tag)\n+    if curtag == prevtag then\n+      found = true\n+      local other_fn = prevfn ~= curfn and (' and ' .. prevfn) or ''\n+      vim.notify(\n+        ('E154: Duplicate tag \"%s\" in %s%s'):format(curtag, curfn, other_fn),\n+        vim.log.levels.WARN\n+      )\n+    end\n+    prevtag = curtag\n+    prevfn = curfn\n+  end\n+  return found\n+end\n+\n+--- Extract tags from a list of helpfiles.\n+---\n+--- @param helpfiles string[] list of helpfiles\n+--- @param tagsfile string the filename of the 'tags' file\n+--- @param include_helptags_tag boolean true if the 'tags' tag should be included\n+local function create_tags_from_files(helpfiles, tagsfile, include_helptags_tag)\n+  ---@type TagLocation\n+  local tags = {}\n+  local i = 1\n+  local function process_helpfile(co)\n+    if i > #helpfiles then\n+      coroutine.resume(co, true)\n+      return\n+    end\n+\n+    local filename = helpfiles[i]\n+    i = i + 1\n+\n+    vim.schedule(function()\n+      local filetags = extract_file_tags(filename)\n+      vim.list_extend(tags, filetags)\n+      process_helpfile(co)\n+    end)\n+  end\n+\n+  coroutine.wrap(function()",
            "html_url": "https://github.com/neovim/neovim/pull/34277#discussion_r2142135454",
            "id": 2142135454,
            "in_reply_to_id": 2141953068,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_rmSe",
            "original_commit_id": "c42e386cd1b0dcda8a67368bc4ccce5226be618f",
            "original_line": 87,
            "original_position": 87,
            "original_start_line": null,
            "path": "runtime/lua/vim/_helptags.lua",
            "position": null,
            "pull_request_review_id": 2920198583,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142135454/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T09:12:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142135454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I have added coroutines to make the process of generating the tags file non-blocking and faster. Translated help files are also supported now.\r\n\r\nBefore adding docs and tests I want to be able to call the lua code from core. How can I do this? Looking through the source I couldn't find an example of calls to (lua) runtime files.",
            "created_at": "2025-06-10T12:07:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/34277#issuecomment-2958952029",
            "id": 2958952029,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34277",
            "node_id": "IC_kwDOAPphoM6wXgZd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2958952029/reactions"
            },
            "updated_at": "2025-06-10T12:07:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2958952029",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Look at `src/nvim/eval/funcs.c`, `has_wsl`.",
            "created_at": "2025-06-10T12:10:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/34277#issuecomment-2958961595",
            "id": 2958961595,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34277",
            "node_id": "IC_kwDOAPphoM6wXiu7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2958961595/reactions"
            },
            "updated_at": "2025-06-10T12:12:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2958961595",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks, I got it working by adding the module to `src/nvim/CMakelist.txt`, hope this is the right approach.\r\n\r\nI think this is ready for (a first round of) reviews!\r\n\r\nDisclosure: the TS approach is slower than the manual parsing that help.c performs. Generating the help tags file for the runtime directory takes about 2 seconds on my machine (prev. 0.5s). It's probably not an issue for end users, as the editor is not blocked. If there are any tips for increasing performance, I'm all ears. It would especially be perfect for parallelization, but afaik that's not easy from Lua/Nvim. Do let me know if I'm wrong.  ",
            "created_at": "2025-06-10T15:13:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/34277#issuecomment-2959646524",
            "id": 2959646524,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34277",
            "node_id": "IC_kwDOAPphoM6waJ88",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2959646524/reactions"
            },
            "updated_at": "2025-06-10T15:13:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2959646524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34277/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34277/commits",
    "created_at": "2025-06-02T11:52:46Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34277.diff",
    "draft": true,
    "head": {
        "label": "yochem:helptags-lua",
        "ref": "helptags-lua",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/yochem/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/yochem/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/yochem/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/yochem/neovim/branches{/branch}",
            "clone_url": "https://github.com/yochem/neovim.git",
            "collaborators_url": "https://api.github.com/repos/yochem/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/yochem/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/yochem/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/yochem/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/yochem/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/yochem/neovim/contributors",
            "created_at": "2023-03-13T14:39:08Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/yochem/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/yochem/neovim/downloads",
            "events_url": "https://api.github.com/repos/yochem/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/yochem/neovim/forks",
            "full_name": "yochem/neovim",
            "git_commits_url": "https://api.github.com/repos/yochem/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/yochem/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/yochem/neovim/git/tags{/sha}",
            "git_url": "git://github.com/yochem/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/yochem/neovim/hooks",
            "html_url": "https://github.com/yochem/neovim",
            "id": 613421928,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/yochem/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/yochem/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/yochem/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/yochem/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/yochem/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/yochem/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/yochem/neovim/merges",
            "milestones_url": "https://api.github.com/repos/yochem/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOJJATaA",
            "notifications_url": "https://api.github.com/repos/yochem/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/yochem/neovim/pulls{/number}",
            "pushed_at": "2025-06-30T13:34:41Z",
            "releases_url": "https://api.github.com/repos/yochem/neovim/releases{/id}",
            "size": 324829,
            "ssh_url": "git@github.com:yochem/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/yochem/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/yochem/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/yochem/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/yochem/neovim/subscription",
            "svn_url": "https://github.com/yochem/neovim",
            "tags_url": "https://api.github.com/repos/yochem/neovim/tags",
            "teams_url": "https://api.github.com/repos/yochem/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/yochem/neovim/git/trees{/sha}",
            "updated_at": "2025-06-03T20:48:15Z",
            "url": "https://api.github.com/repos/yochem/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "135d4e969e698af37759afcab15a1e86c8ef3665",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
            "events_url": "https://api.github.com/users/yochem/events{/privacy}",
            "followers_url": "https://api.github.com/users/yochem/followers",
            "following_url": "https://api.github.com/users/yochem/following{/other_user}",
            "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/yochem",
            "id": 23235841,
            "login": "yochem",
            "node_id": "MDQ6VXNlcjIzMjM1ODQx",
            "organizations_url": "https://api.github.com/users/yochem/orgs",
            "received_events_url": "https://api.github.com/users/yochem/received_events",
            "repos_url": "https://api.github.com/users/yochem/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/yochem",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34277",
    "id": 2560368921,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34277",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "0548cc57712f4dc800935268a4568cfcacbe32c8",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6YnCEZ",
    "number": 34277,
    "patch_url": "https://github.com/neovim/neovim/pull/34277.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34277/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/135d4e969e698af37759afcab15a1e86c8ef3665",
    "title": "feat(help):  `:helptags` in Lua (+Treesitter) [skip ci]",
    "updated_at": "2025-06-27T19:37:49Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34277",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
        "events_url": "https://api.github.com/users/yochem/events{/privacy}",
        "followers_url": "https://api.github.com/users/yochem/followers",
        "following_url": "https://api.github.com/users/yochem/following{/other_user}",
        "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/yochem",
        "id": 23235841,
        "login": "yochem",
        "node_id": "MDQ6VXNlcjIzMjM1ODQx",
        "organizations_url": "https://api.github.com/users/yochem/orgs",
        "received_events_url": "https://api.github.com/users/yochem/received_events",
        "repos_url": "https://api.github.com/users/yochem/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/yochem",
        "user_view_type": "public"
    }
}