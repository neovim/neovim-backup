{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\r\n\r\n```\r\n:lua =vim.json.decode(vim.json.encode(3053700806959403))\r\n```\r\n\r\nReturns `3.0537008069594e+15`, which is `3053700806959400`\r\n\r\nJSON floating number encoding is in general a bit messy but I think at least the default precision should be raised.\r\nIt's currently set to 14 in https://github.com/neovim/neovim/blob/1ee905a63aa9f3d6873ec75a0954866d8660699e/src/cjson/lua_cjson.c#L86\r\n\r\nOther implementations try 15, and if that changes the result, they go up to 17, see:\r\n\r\nhttps://github.com/DaveGamble/cJSON/blob/cb8693b058ba302f4829ec6d03f609ac6f848546/cJSON.c#L572C20-L572C20\r\n\r\n, e.g. from wikipedia:\r\n\r\n> Numbers in JSON are agnostic with regard to their representation within programming languages. While this allows for numbers of [arbitrary precision](https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic) to be serialized, it may lead to portability issues. For example, since no differentiation is made between integer and floating-point values, some implementations may treat 42, 42.0, and 4.2E+1 as the same number, while others may not. The JSON standard makes no requirements regarding implementation details such as [overflow](https://en.wikipedia.org/wiki/Arithmetic_overflow), [underflow](https://en.wikipedia.org/wiki/Arithmetic_underflow), loss of precision, rounding, or [signed zeros](https://en.wikipedia.org/wiki/Signed_zeros), **but it does recommend expecting no more than [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754) [binary64](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) precision for \"good interoperability\"**\r\n\r\nLooking at the IEEE_754 article:\r\n\r\n> The 53-bit significand precision gives from 15 to 17 [significant decimal digits](https://en.wikipedia.org/wiki/Significant_figures) precision (2−53 ≈ 1.11 × 10−16). If a decimal string with at most 15 significant digits is converted to the IEEE 754 double-precision format, giving a normal number, and then converted back to a decimal string with the same number of digits, the final result should match the original string. If an IEEE 754 double-precision number is converted to a decimal string with at least 17 significant digits, and then converted back to double-precision representation, the final result must match the original number.[[1]](https://en.wikipedia.org/wiki/Double-precision_floating-point_format#cite_note-whyieee-1)\r\n\r\n\r\nThis popped up via: https://github.com/mfussenegger/nvim-dap/issues/1004 - the dart debug adapter currently uses 53bit integers\r\n\r\nI'm not sure how we deal with this given that cjson is vendored.\r\nThere is an upstream patch in that area, but it left the default: https://github.com/openresty/lua-cjson/commit/f79aa68\r\n\r\n### Steps to reproduce\r\n\r\n```diff\r\ndiff --git a/test/functional/lua/json_spec.lua b/test/functional/lua/json_spec.lua\r\nindex 25fdb48ee..7021f7f1e 100644\r\n--- a/test/functional/lua/json_spec.lua\r\n+++ b/test/functional/lua/json_spec.lua\r\n@@ -57,10 +57,11 @@ describe('vim.json.decode()', function()\r\n     eq(-100000, exec_lua([[return vim.json.decode('-100000')]]))\r\n     eq(100000, exec_lua([[return vim.json.decode('  100000  ')]]))\r\n     eq(-100000, exec_lua([[return vim.json.decode('  -100000  ')]]))\r\n     eq(0, exec_lua([[return vim.json.decode('0')]]))\r\n     eq(0, exec_lua([[return vim.json.decode('-0')]]))\r\n+    eq(3053700806959403, exec_lua([[return vim.json.decode('3053700806959403')]]))\r\n   end)\r\n\r\n   it('parses floating-point numbers', function()\r\n     -- This behavior differs from vim.fn.json_decode, which return '100000.0'\r\n     eq('100000', exec_lua([[return tostring(vim.json.decode('100000.0'))]]))\r\n@@ -145,10 +146,11 @@ describe('vim.json.encode()', function()\r\n     eq('10', exec_lua([[return vim.json.encode(10)]]))\r\n     eq('-10', exec_lua([[return vim.json.encode(-10)]]))\r\n   end)\r\n\r\n   it('dumps floats', function()\r\n+    eq('3053700806959403', exec_lua([[return vim.json.encode(3053700806959403)]]))\r\n     eq('10.5', exec_lua([[return vim.json.encode(10.5)]]))\r\n     eq('-10.5', exec_lua([[return vim.json.encode(-10.5)]]))\r\n     eq('-1e-05', exec_lua([[return vim.json.encode(-1e-5)]]))\r\n   end)\r\n```\r\n\r\nand run tests\r\n\r\n### Expected behavior\r\n\r\nTests pass and `vim.json.decode(vim.json.encode(3053700806959403))` doesn't loose precision\r\n\r\n\r\n### Neovim version (nvim -v)\r\n\r\nNVIM v0.10.0-dev-752+g1ee905a63\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nno, has no vim.json\r\n\r\n### Operating system/version\r\n\r\nLinux\r\n\r\n### Terminal name/version\r\n\r\nalacritty\r\n\r\n### $TERM environment variable\r\n\r\nalacritty\r\n\r\n### Installation\r\n\r\nFrom source",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> I'm not sure how we deal with this given that cjson is vendored.\r\n> There is an upstream patch in that area, but it left the default: [openresty/lua-cjson@f79aa68](https://github.com/openresty/lua-cjson/commit/f79aa68)\r\n\r\nWe don't support `json_cfg_encode_number_precision` or any other runtime options since https://github.com/neovim/neovim/commit/8d4a53fe6e20652946948170f2436ec520f9bdfe .\r\n\r\nWhy wouldn't we just change the default?",
            "created_at": "2023-08-02T15:47:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/24532#issuecomment-1662461526",
            "id": 1662461526,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24532",
            "node_id": "IC_kwDOAPphoM5jFyZW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662461526/reactions"
            },
            "updated_at": "2023-08-02T15:47:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662461526",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Why wouldn't we just change the default?\r\n\r\nThat would work too for this use case. @justinmk would you accept a PR for 17?",
            "created_at": "2023-08-04T18:59:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/24532#issuecomment-1666049238",
            "id": 1666049238,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24532",
            "node_id": "IC_kwDOAPphoM5jTeTW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1666049238/reactions"
            },
            "updated_at": "2023-08-04T18:59:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1666049238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7856010?v=4",
                "events_url": "https://api.github.com/users/christopherfujino/events{/privacy}",
                "followers_url": "https://api.github.com/users/christopherfujino/followers",
                "following_url": "https://api.github.com/users/christopherfujino/following{/other_user}",
                "gists_url": "https://api.github.com/users/christopherfujino/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/christopherfujino",
                "id": 7856010,
                "login": "christopherfujino",
                "node_id": "MDQ6VXNlcjc4NTYwMTA=",
                "organizations_url": "https://api.github.com/users/christopherfujino/orgs",
                "received_events_url": "https://api.github.com/users/christopherfujino/received_events",
                "repos_url": "https://api.github.com/users/christopherfujino/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/christopherfujino/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/christopherfujino/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/christopherfujino",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24532/comments",
    "created_at": "2023-08-02T14:57:31Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24532/events",
    "html_url": "https://github.com/neovim/neovim/issues/24532",
    "id": 1833355539,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 158930125,
            "name": "encoding",
            "node_id": "MDU6TGFiZWwxNTg5MzAxMjU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/encoding"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24532/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5tRskT",
    "number": 24532,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24532/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24532/timeline",
    "title": "Precision loss on vim.json.encode with integers having more than 14 digits",
    "updated_at": "2025-01-19T11:40:40Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24532",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
        "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
        "followers_url": "https://api.github.com/users/mfussenegger/followers",
        "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
        "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mfussenegger",
        "id": 38700,
        "login": "mfussenegger",
        "node_id": "MDQ6VXNlcjM4NzAw",
        "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
        "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
        "repos_url": "https://api.github.com/users/mfussenegger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mfussenegger",
        "user_view_type": "public"
    }
}