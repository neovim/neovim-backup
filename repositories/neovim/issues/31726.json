{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nAfter **nvim_ui_attach()** call via RPC Neovim crashes on *unpacker_advance* function (./src/nvim/msgpack_rpc/unpacker.c), after **abort()** call. This only happens when I'm calling **nvim_ui_attach()** from Lua code, when I'm using Python and pynvim everything works fine. I mentioned this problem in [this](https://github.com/neovim/neovim/discussions/31682) discussion among other problems I faced.\n\nStack trace:\n\n```shell\n       Message: Process 30221 (nvim) of user 1000 dumped core.\n\n                Stack trace of thread 30221:\n                #0  0x000071ffc47763f4 n/a (libc.so.6 + 0x963f4)\n                #1  0x000071ffc471d120 raise (libc.so.6 + 0x3d120)\n                #2  0x000071ffc47044c3 abort (libc.so.6 + 0x244c3)\n                #3  0x0000607571579803 unpacker_advance (nvim + 0x4c803)\n                #4  0x00006075717e93ba internal_read_event (nvim + 0x2bc3ba)\n                #5  0x00006075718e52e8 state_handle_k_event (nvim + 0x3b82e8)\n                #6  0x0000607571802b71 nv_event (nvim + 0x2d5b71)\n                #7  0x00006075717f1eb2 normal_execute (nvim + 0x2c4eb2)\n                #8  0x00006075718ed211 state_enter (nvim + 0x3c0211)\n                #9  0x00006075717eebca normal_enter (nvim + 0x2c1bca)\n                #10 0x000060757157b0e7 main (nvim + 0x4e0e7)\n                #11 0x000071ffc4705e08 n/a (libc.so.6 + 0x25e08)\n                #12 0x000071ffc4705ecc __libc_start_main (libc.so.6 + 0x25ecc)\n                #13 0x000060757157d285 _start (nvim + 0x50285)\n                ELF object binary architecture: AMD x86-64\n```\n\nLua code to reproduce this issue (also fail with `--clean` argument):\n\n```lua\nlocal I = function(v)\n  print(vim.inspect(v))\nend\n\nif CHECK_EXTS_NVIM_CHANNEL then\n  assert(vim.fn.chanclose(CHECK_EXTS_NVIM_CHANNEL) == 1)\n  vim.notify(\"Previous channel was closed\")\nend\nCHECK_EXTS_NVIM_CHANNEL = assert(vim.fn.sockconnect(\"pipe\", vim.v.servername, {\n  rpc = true,\n}))\n\nvim.fn.rpcrequest(\n  CHECK_EXTS_NVIM_CHANNEL,\n  \"nvim_set_client_info\",\n  \"it's me dude\",\n  vim.version(),\n  \"remote\",\n  vim.empty_dict(),\n  vim.empty_dict()\n)\n\nvim.fn.rpcrequest(CHECK_EXTS_NVIM_CHANNEL, \"nvim_eval\", [['echo' . ' 12']])\nvim.fn.rpcrequest(CHECK_EXTS_NVIM_CHANNEL, \"nvim_exec2\", \"echomsg 12\", {})\n\nI(vim.fn.rpcrequest(CHECK_EXTS_NVIM_CHANNEL, \"nvim_get_vvar\", \"servername\"))\n-- I(vim.fn.rpcrequest(CHECK_EXTS_NVIM_CHANNEL, \"nvim_get_api_info\"))\n\nI({\n  \"nvim_ui_attach result\",\n  vim.fn.rpcrequest(\n    CHECK_EXTS_NVIM_CHANNEL,\n    \"nvim_ui_attach\",\n    vim.o.columns,\n    vim.o.lines,\n    {\n      ext_messages = false,\n      ext_linegrid = true,\n      ext_multigrid = false,\n    }\n  )\n})\n-- This print works\nI(\"I'm here\")\n```\n\nWorking Python code:\n\n```python\nimport functools\nimport os\nfrom typing import List\n\nimport pynvim\n\n\ndef nvim_cb(prefix: str, event_name: str, events: List[str]) -> None:\n    sep = \"  \"\n    print(prefix, event_name)\n    print(sep, end=\"\")\n    print(*events, sep=\"\\n\" + sep)\n\n\ndef main() -> None:\n    # PID here\n    nvim_pid = 1\n    xdg_runtime_dir = os.getenv(\"XDG_RUNTIME_DIR\")\n    assert xdg_runtime_dir and os.path.isdir(xdg_runtime_dir)\n\n    nvim = pynvim.attach(\n        \"socket\",\n        path=os.path.join(\n            xdg_runtime_dir,\n            f\"nvim.{nvim_pid}.0\",\n        ),\n    )\n    nvim.ui_attach(1_000, 1_000, ext_linegrid=True, ext_multigrid=True)\n    nvim.run_loop(\n        functools.partial(nvim_cb, \"request_cb\"),\n        functools.partial(nvim_cb, \"notification_cb\"),\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nUsed nightly (b51110f4a1), master (7567f7d322) and v0.10.3 (9b5ee7df3e) commits, all versions fail. I'm on Arch Linux, `Linux arch 6.12.3-arch1-1 #1 SMP PREEMPT_DYNAMIC Fri, 06 Dec 2024 11:15:43 +0000 x86_64 GNU/Linux`.\n\n### Steps to reproduce\n\n1. Run Lua script above (e.g., with `--clean`), you can see all the prints and then crash (SIGABRT after abort call()). Core dump should be the same as mine in the example above.\n2. Open some Nvim, get its PID (`vim.fn.getpid()`). Run Python code (paste process ID in **nvim_pid** variable), see prints of UI events\n\n### Expected behavior\n\nWork w/o crash :)\n\n### Nvim version (nvim -v)\n\nNVIM v0.11.0-dev-1414+gb51110f4a1\n\n### Vim (not Nvim) behaves the same?\n\nvim doesn't have this API\n\n### Operating system/version\n\nLinux arch 6.12.3-arch1-1 #1 SMP PREEMPT_DYNAMIC Fri, 06 Dec 2024 11:15:43 +0000 x86_64 GNU/Linux\n\n### Terminal name/version\n\nalacritty 0.14.0-dev (d4f2f857)\n\n### $TERM environment variable\n\nalacritty\n\n### Installation\n\nTried both AUR and self compiled versions",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "Also I thought about using **vim.ui_attach()** function but I can't use it for **ext_linegrid** and **ext_multigrid** extensions: `Unexpected key: ext_linegrid`. Are these extensions supported (or maybe WIP and they will be supported eventually) in this call?",
            "created_at": "2024-12-25T14:35:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/31726#issuecomment-2561913752",
            "id": 2561913752,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31726",
            "node_id": "IC_kwDOAPphoM6Ys7OY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2561913752/reactions"
            },
            "updated_at": "2024-12-25T14:35:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2561913752",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51197614?v=4",
                "events_url": "https://api.github.com/users/librolibro/events{/privacy}",
                "followers_url": "https://api.github.com/users/librolibro/followers",
                "following_url": "https://api.github.com/users/librolibro/following{/other_user}",
                "gists_url": "https://api.github.com/users/librolibro/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/librolibro",
                "id": 51197614,
                "login": "librolibro",
                "node_id": "MDQ6VXNlcjUxMTk3NjE0",
                "organizations_url": "https://api.github.com/users/librolibro/orgs",
                "received_events_url": "https://api.github.com/users/librolibro/received_events",
                "repos_url": "https://api.github.com/users/librolibro/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/librolibro/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/librolibro/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/librolibro",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Sometimes I have this stack trace (mb it will be helpful for someone, I cannot get the unpacker_advance's logic by myself :)):\n\n```shell\n#0  0x000074c5062183f4 in ?? () from /usr/lib/libc.so.6\n#1  0x000074c5061bf120 in raise () from /usr/lib/libc.so.6\n#2  0x000074c5061a64c3 in abort () from /usr/lib/libc.so.6\n#3  0x000074c5061a63df in ?? () from /usr/lib/libc.so.6\n#4  0x000074c5061b7177 in __assert_fail () from /usr/lib/libc.so.6\n#5  0x000061125615bea5 in unpacker_advance (p=p@entry=0x61127d2e9a90) at /home/libro/.local/src/neovim/src/nvim/msgpack_rpc/unpacker.c:310\n#6  0x000061125615c263 in parse_msgpack (channel=channel@entry=0x61127d2e9300) at /home/libro/.local/src/neovim/src/nvim/msgpack_rpc/channel.c:247\n#7  0x000061125615c471 in internal_read_event (argv=<optimized out>) at /home/libro/.local/src/neovim/src/nvim/msgpack_rpc/channel.c:434\n#8  0x0000611256202c5b in state_handle_k_event () at /home/libro/.local/src/neovim/src/nvim/state.c:120\n#9  0x000061125616910b in nv_event (cap=0x7ffc90a288f0) at /home/libro/.local/src/neovim/src/nvim/normal.c:6634\n#10 0x000061125615f1fe in normal_execute (state=0x7ffc90a28880, key=<optimized out>) at /home/libro/.local/src/neovim/src/nvim/normal.c:1244\n#11 0x0000611256202ad3 in state_enter (s=0x7ffc90a28880) at /home/libro/.local/src/neovim/src/nvim/state.c:102\n#12 0x000061125615db59 in normal_enter (cmdwin=<optimized out>, noexmode=<optimized out>) at /home/libro/.local/src/neovim/src/nvim/normal.c:522\n#13 0x0000611256124fa9 in main (argc=4, argv=<optimized out>) at /home/libro/.local/src/neovim/src/nvim/main.c:650\n\n(gdb) select-frame 5\n(gdb) info args\np = 0x61127d2e9a90\n(gdb) p /s (Unpacker *)p\n$1 = (Unpacker *) 0x61127d2e9a90\n(gdb) p /s (Unpacker *)p.state\n$2 = (Unpacker *) 0xffffffffffffffff\n(gdb) p /s (Unpacker *)p.read_size\n$3 = (Unpacker *) 0x6be\n(gdb) p /s (Unpacker *)p.type\n$4 = (Unpacker *) 0x3\n(gdb) p /s (Unpacker *)p.error\n$5 = (Unpacker *) 0x0\n(gdb) p /s (Unpacker *)p.result\n$6 = (Unpacker *) 0x0\n(gdb) p /s (Unpacker *)p.unpack_error\n$7 = (Unpacker *) 0xffffffff\n(gdb) p /s (Unpacker *)p.nevents\n$8 = (Unpacker *) 0x7\n(gdb) p /s (Unpacker *)p.ncalls\n$9 = (Unpacker *) 0x2\n(gdb) p /s (Unpacker *)p.has_grid_line_event\n$10 = (Unpacker *) 0x0\n```",
            "created_at": "2024-12-30T09:31:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/31726#issuecomment-2565236786",
            "id": 2565236786,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31726",
            "node_id": "IC_kwDOAPphoM6Y5mgy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2565236786/reactions"
            },
            "updated_at": "2024-12-30T19:51:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2565236786",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51197614?v=4",
                "events_url": "https://api.github.com/users/librolibro/events{/privacy}",
                "followers_url": "https://api.github.com/users/librolibro/followers",
                "following_url": "https://api.github.com/users/librolibro/following{/other_user}",
                "gists_url": "https://api.github.com/users/librolibro/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/librolibro",
                "id": 51197614,
                "login": "librolibro",
                "node_id": "MDQ6VXNlcjUxMTk3NjE0",
                "organizations_url": "https://api.github.com/users/librolibro/orgs",
                "received_events_url": "https://api.github.com/users/librolibro/received_events",
                "repos_url": "https://api.github.com/users/librolibro/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/librolibro/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/librolibro/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/librolibro",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\n```lua\nCHECK_EXTS_NVIM_CHANNEL = assert(vim.fn.sockconnect(\"pipe\", vim.v.servername, {\n  rpc = true,\n}))\n-- ...\n\nI({\n  \"nvim_ui_attach result\",\n  vim.fn.rpcrequest(\n    CHECK_EXTS_NVIM_CHANNEL,\n    \"nvim_ui_attach\",\n```\n\n`vim.v.servername` is the current Nvim, so you're trying to connect Nvim to itself via RPC? Currently, that isn't well-supported, especially for things like `nvim_ui_attach` which cause feedback-loops.\n\nAs you mentioned, `vim.ui_attach()` exists for observing in-process UI events.",
            "created_at": "2024-12-30T19:47:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/31726#issuecomment-2565857482",
            "id": 2565857482,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31726",
            "node_id": "IC_kwDOAPphoM6Y7-DK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2565857482/reactions"
            },
            "updated_at": "2024-12-30T19:48:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2565857482",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> vim.v.servername is the current Nvim, so you're trying to connect Nvim to itself via RPC?\n\nYes, I want exactly this. I want to get the UI grid, all chars and its highlights (respecting combining hl groups). All I need is to read all **grid_line**/**hl_attr_define**/**hl_group_set** events until first **flush** event will come out.\n\nI thought I can write some Lua code where I'm creating another Nvim instance via **jobstart()** - some kind of proxy that receives all RPC events in separate process and then sends it back (via **rpcnotify()**) to the parent Nvim instance. But I don't understand how can I read incoming RPC events? Docs on **jobstart()** say that **on_stdout** is ignored when **rpc=true**, **on_stderr** is not for RPC messages, **on_data** isn't calling in **jobstart()**. My attempt to make my example working on Lua side:\n\n```lua\n-- filename: gh_1.lua\nlocal N = function(s)\n  -- vim.system({ \"notify-send\", \"-u\", \"critical\", vim.inspect(s) }):wait()\n  print(vim.inspect(s))\nend\n\nif SEPARATE_NVIM_CHAN_FOR_GETTING_UI_EVENTS then\n  assert(vim.fn.jobstop(SEPARATE_NVIM_CHAN_FOR_GETTING_UI_EVENTS) == 1)\n  vim.notify(\"Previous job was stopped\")\nend\n\n---@param id integer\n---@param data string[]\n---@param name string\nlocal cb = function(id, data, name)\n  N({ \"on_\" .. name, id, data, name })\nend\n\nSEPARATE_NVIM_CHAN_FOR_GETTING_UI_EVENTS = vim.fn.jobstart({\n  vim.v.progpath,\n  \"--clean\",\n  -- \"--embed\",\n  \"--headless\",\n  \"--cmd\",\n  \"source ./gh_2.lua\",\n}, {\n  rpc = true,\n  on_data = cb,\n  on_stdout = cb,\n  on_stderr = cb,\n  on_exit = cb,\n})\nN({\n  \"SEPARATE_NVIM_CHAN_FOR_GETTING_UI_EVENTS\",\n  SEPARATE_NVIM_CHAN_FOR_GETTING_UI_EVENTS,\n})\n```\n\n```lua\n-- filename: gh_2.lua\nlocal N = function(s)\n  -- vim.system({ \"notify-send\", \"-u\", \"critical\", vim.inspect(s) }):wait()\n  io.stderr:write(vim.inspect(s) .. \"\\n\")\nend\n\n---@param channel integer\n---@param method_name string\n---@param ... any\nlocal prpcrequest = function(channel, method_name, ...)\n  local ok, err_or_response = pcall(vim.rpcrequest, channel, method_name, ...)\n  if not ok then\n    ---@cast err_or_response string\n    N(err_or_response)\n    os.exit(1)\n  end\n  return err_or_response\nend\n\nlocal stdio_chan = vim.fn.stdioopen({ rpc = true })\nassert(stdio_chan == 1)\n\n-- How should I catch this in gh_1.lua?\nN(\"Before rpcnotify\")\nvim.rpcnotify(stdio_chan, \"start\", { \"some\", \"stuff\" })\nN(\"After rpcnotify\")\n\n-- TODO: Also handle TCP (IP address) here\nlocal events_chan = vim.fn.sockconnect(\"pipe\", assert(os.getenv(\"NVIM\")), {\n  rpc = true,\n  on_data = function(id, data, name)\n    N(\"in on_data callback\")\n    vim.rpcnotify(stdio_chan, \"proxy_event\", { id, data, name })\n  end,\n})\nassert(events_chan > 0)\n\nN({\n  \"nvim_set_client_info\",\n  prpcrequest(\n    events_chan,\n    \"nvim_set_client_info\",\n    \"proxy_for_ui_events\",\n    vim.version(),\n    \"remote\",\n    vim.empty_dict(),\n    vim.empty_dict()\n  ),\n})\nlocal width = prpcrequest(events_chan, \"nvim_get_option_value\", \"lines\", {})\nlocal height = prpcrequest(events_chan, \"nvim_get_option_value\", \"columns\", {})\nN({ width, height })\n-- How should I also catch these?\n-- Why \"Invalid channel\" here?\nN({\n  \"nvim_ui_attach\",\n  prpcrequest(events_chan, \"nvim_ui_attach\", width, height, {\n    ext_linegrid = true,\n    ext_hlstate = true,\n  }),\n})\n```\n\nI'm getting this output here:\n\n```shell\n{ \"SEPARATE_NVIM_CHAN_FOR_GETTING_UI_EVENTS\", 19 }\n{ \"on_stderr\", 19, { '\"Before rpcnotify\"', '\"After rpcnotify\"', \"\" }, \"stderr\" }\n{ \"on_stderr\", 19, { '{ \"nvim_set_client_info\", vim.NIL }', \"\" }, \"stderr\" }\n{ \"on_stderr\", 19, { \"{ 55, 191 }\", \"\" }, \"stderr\" }\n{ \"on_stderr\", 19, { \"Invalid channel: 3\", \"\" }, \"stderr\" }\n{ \"on_stderr\", 19, { \"\" }, \"stderr\" }\n{ \"on_exit\", 19, 1, \"exit\" }\n```",
            "created_at": "2024-12-31T14:22:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/31726#issuecomment-2566491515",
            "id": 2566491515,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31726",
            "node_id": "IC_kwDOAPphoM6Y-Y17",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2566491515/reactions"
            },
            "updated_at": "2024-12-31T15:00:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2566491515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51197614?v=4",
                "events_url": "https://api.github.com/users/librolibro/events{/privacy}",
                "followers_url": "https://api.github.com/users/librolibro/followers",
                "following_url": "https://api.github.com/users/librolibro/following{/other_user}",
                "gists_url": "https://api.github.com/users/librolibro/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/librolibro",
                "id": 51197614,
                "login": "librolibro",
                "node_id": "MDQ6VXNlcjUxMTk3NjE0",
                "organizations_url": "https://api.github.com/users/librolibro/orgs",
                "received_events_url": "https://api.github.com/users/librolibro/received_events",
                "repos_url": "https://api.github.com/users/librolibro/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/librolibro/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/librolibro/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/librolibro",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> creating another Nvim instance via **jobstart()** - some kind of proxy that receives all RPC events in separate process and then sends it back (via **rpcnotify()**) to the parent Nvim instance. But I don't understand how can I read incoming RPC events? Docs on **jobstart()** say that **on_stdout** is ignored when **rpc=true**\n\nWe currently don't have a builtin way to declare RPC method handlers from Nvim itself. Likely this would be a new `Request` event (autocmd). #31868 But that would require enhancing the event system so that event-handlers can *return* results.\n\nMeanwhile, `vim.ui_attach()` exists.",
            "created_at": "2024-12-31T15:00:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/31726#issuecomment-2566516349",
            "id": 2566516349,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31726",
            "node_id": "IC_kwDOAPphoM6Y-e59",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2566516349/reactions"
            },
            "updated_at": "2025-01-05T01:30:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2566516349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yes, **vim.ui_attach()** is much more suitable for my needs (and also much easier to use, don't even need to think about RPC), but:\n\n```lua\nlocal ns = vim.api.nvim_create_namespace(\"testing_ui_attach\")\nvim.ui_attach(ns, { ext_linegrid = true }, function(event, ...) end)\n```\n\n`E5108: Error executing lua [string \":{range}lua\"]:2: Unexpected key: ext_linegrid`\n\nP.S. Yes, it could lead to the infinite feedback loop as you mentioned above",
            "created_at": "2024-12-31T15:13:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/31726#issuecomment-2566526066",
            "id": 2566526066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31726",
            "node_id": "IC_kwDOAPphoM6Y-hRy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2566526066/reactions"
            },
            "updated_at": "2024-12-31T15:23:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2566526066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51197614?v=4",
                "events_url": "https://api.github.com/users/librolibro/events{/privacy}",
                "followers_url": "https://api.github.com/users/librolibro/followers",
                "following_url": "https://api.github.com/users/librolibro/following{/other_user}",
                "gists_url": "https://api.github.com/users/librolibro/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/librolibro",
                "id": 51197614,
                "login": "librolibro",
                "node_id": "MDQ6VXNlcjUxMTk3NjE0",
                "organizations_url": "https://api.github.com/users/librolibro/orgs",
                "received_events_url": "https://api.github.com/users/librolibro/received_events",
                "repos_url": "https://api.github.com/users/librolibro/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/librolibro/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/librolibro/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/librolibro",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31726/comments",
    "created_at": "2024-12-25T14:22:13Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31726/events",
    "html_url": "https://github.com/neovim/neovim/issues/31726",
    "id": 2758834535,
    "labels": [
        {
            "color": "c7def8",
            "default": false,
            "description": "channels, RPC, msgpack",
            "id": 242522707,
            "name": "channels-rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/channels-rpc"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "issue contains a stacktrace/ASAN log",
            "id": 435854079,
            "name": "has:backtrace",
            "node_id": "MDU6TGFiZWw0MzU4NTQwNzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:backtrace"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "issue reporting a crash or segfault",
            "id": 435854234,
            "name": "bug-crash",
            "node_id": "MDU6TGFiZWw0MzU4NTQyMzQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-crash"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "UI extensibility, events, protocol, externalized UI",
            "id": 640132777,
            "name": "ui-extensibility",
            "node_id": "MDU6TGFiZWw2NDAxMzI3Nzc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui-extensibility"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31726/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6kcHln",
    "number": 31726,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31726/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31726/timeline",
    "title": "crash on self-attach via nvim_ui_attach RPC",
    "updated_at": "2025-01-17T15:00:02Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31726",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/51197614?v=4",
        "events_url": "https://api.github.com/users/librolibro/events{/privacy}",
        "followers_url": "https://api.github.com/users/librolibro/followers",
        "following_url": "https://api.github.com/users/librolibro/following{/other_user}",
        "gists_url": "https://api.github.com/users/librolibro/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/librolibro",
        "id": 51197614,
        "login": "librolibro",
        "node_id": "MDQ6VXNlcjUxMTk3NjE0",
        "organizations_url": "https://api.github.com/users/librolibro/orgs",
        "received_events_url": "https://api.github.com/users/librolibro/received_events",
        "repos_url": "https://api.github.com/users/librolibro/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/librolibro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/librolibro/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/librolibro",
        "user_view_type": "public"
    }
}