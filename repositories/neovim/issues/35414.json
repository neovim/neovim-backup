{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nIt would be useful if it were possible to tell from a terminal whether bracketpaste had been set. This could be used for a number of purposes by plugins such as 1) deciding whether to include the pasting brackets when using chansend 2) guarding against pasting multiple lines into terminals not set up for pasting 3) filtering terminals to pastable terminals only. It would be particularly useful for vim-slime type usage.\n\nThe relevant setting in vterm is here: https://github.com/neovim/neovim/blob/30dae87de4c6d6c8bda9657e22e187634cfa12a8/src/nvim/vterm/vterm_internal_defs.h#L142\n\nThe simplest thing to do is just to provide a getter for this variable in the neovim api. There are other more complex possibilities, like if there was a way to send a https://vt100.net/docs/vt510-rm/DECRQM.html using chansend and then intercept the https://vt100.net/docs/vt510-rm/DECRPM.html so it would be readable from Lua rather than sent to the program running in the terminal. I believe this is not currently possible (but would be happy to be advised otherwise).\n\n### Expected behavior\n\nPlugins like vim-slime are able to make smart decisions about whether to use bracketpaste and so sensible defaults can be provided.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Does `TermRequest` not provide this? \n\nDid you try `nvim_paste`?\n\nIn any case, this seems like the wrong direction. Plugins should not have to care about this. They should use `nvim_paste` in the `:terminal` buffer and it should just work. If it doesn't then we should fix `nvim_paste`.",
            "created_at": "2025-08-21T17:03:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/35414#issuecomment-3211423961",
            "id": 3211423961,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35414",
            "node_id": "IC_kwDOAPphoM6_anDZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3211423961/reactions"
            },
            "updated_at": "2025-08-21T17:04:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3211423961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Does TermRequest not provide this?\n\nNo these are CSI codes. Also it's not so convenient for a plugin which would not be able to lazy load because it would have to start early enough to catch all TermRequests.\n\n> Did you try nvim_paste?\n\nNo I didn't -- although that only solves 1. In the case of vim-slime, currently bracketedpaste is configured globally or on a source buffer level. Depending on the filetype of the source buffer, it might try to manipulate the pasted text to protect it in case it's not enabled. On the other hand, I have no idea whether a REPL setting the bracketed paste bit, truly means it supports it -- probably not.",
            "created_at": "2025-08-21T20:28:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/35414#issuecomment-3211982644",
            "id": 3211982644,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35414",
            "node_id": "IC_kwDOAPphoM6_cvc0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3211982644/reactions"
            },
            "updated_at": "2025-08-21T20:28:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3211982644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/299380?v=4",
                "events_url": "https://api.github.com/users/frankier/events{/privacy}",
                "followers_url": "https://api.github.com/users/frankier/followers",
                "following_url": "https://api.github.com/users/frankier/following{/other_user}",
                "gists_url": "https://api.github.com/users/frankier/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frankier",
                "id": 299380,
                "login": "frankier",
                "node_id": "MDQ6VXNlcjI5OTM4MA==",
                "organizations_url": "https://api.github.com/users/frankier/orgs",
                "received_events_url": "https://api.github.com/users/frankier/received_events",
                "repos_url": "https://api.github.com/users/frankier/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frankier/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frankier/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frankier",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> like if there was a way to send a https://vt100.net/docs/vt510-rm/DECRQM.html using chansend and then intercept the https://vt100.net/docs/vt510-rm/DECRPM.html so it would be readable from Lua rather\n\nThe purpose of `TermRequest` is to provide this kind of thing. If it doesn't support CSI, maybe it should...\n\n> Also it's not so convenient for a plugin which would not be able to lazy load because it would have to start early enough to catch all TermRequests.\n\nOn one hand you want full control of low-level terminal details, on the other hand you want \"lazy loading\" ðŸ¤” ",
            "created_at": "2025-08-22T02:18:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/35414#issuecomment-3212809571",
            "id": 3212809571,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35414",
            "node_id": "IC_kwDOAPphoM6_f5Vj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3212809571/reactions"
            },
            "updated_at": "2025-08-22T02:20:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3212809571",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The purpose of TermRequest is to provide this kind of thing. If it doesn't support CSI, maybe it should...\n\nI think we're both starting to get a bit muddled here. I've not made things totally clear.\n\nThere are two things that could be useful. The first is less useful for me, but could be useful for others. (Maybe?) If TermRequest forwarded the codes send from the subprocess attached to the terminal `\"ESC [ ? 2004 h\"` and `\"ESC [ ? 2 0 0 4 l\"` *enable/disable bracketed paste* (DECSET/DECRESET 2004) -- but then any plugin would have to keep track of this state.\n\nSecondly, I've now realised there is also a TermResponse. I'm not sure how I missed this before. This is apparently already used to forward DA1 responses, which seems roughly analogous to. So a chansend of `\"CSI 2004 $ p\"` could be done to get the state. This is part of a more general DECRPM which starts `\"CSI ?\"` or `\"CSI\"` and are terminated `\"q\"`. I suppose these could be forwarded to TermResponse?\n\nOne thing left bothering me is routing? How are messages routed? Is it the case that after doing a chansend from neovim to a terminal, the DECRPM response to a DECRQM request will come only to neovim? Or does it get forwarded to the subprocess attached to the terminal too? The subprocess running in the terminal can also send DECRQM requests so DECRPM should be sent there in that case but to neovim when it has sent the request -- at least I think? Or is broadcasting to both fine in practice? I think this issue is already present with at least DA1 which is also a request/response escape code. This isn't a problem from DECSET/DECRESET since this is always destined for vterm/Neovim anyway. Maybe I've still not quite understood the documentation -- I certainly haven't fully grokked the source code -- despite a little effort.\n\nIt does seem a bit indirect when it appears that some of the state of vterm could be exposed directly through the API, but I suppose this mechanism already exists and could be expanded if it can be made to work in an almost sane way.\n\n> On one hand you want full control of low-level terminal details, on the other hand you want \"lazy loading\" ðŸ¤”\n\nI don't see how that's odd. The relevant plugin may or may not be loaded when events are fired. As a user of the API, it's often the case that sometimes you want to be notified about changes, and sometimes you want to just check a current value. Of course convert from one into another by listening and updating a value for one direction or polling for the other, but it's easier not to have to (and a bit more efficient to boot).",
            "created_at": "2025-08-22T07:49:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/35414#issuecomment-3213422322",
            "id": 3213422322,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35414",
            "node_id": "IC_kwDOAPphoM6_iO7y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3213422322/reactions"
            },
            "updated_at": "2025-08-22T07:49:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3213422322",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/299380?v=4",
                "events_url": "https://api.github.com/users/frankier/events{/privacy}",
                "followers_url": "https://api.github.com/users/frankier/followers",
                "following_url": "https://api.github.com/users/frankier/following{/other_user}",
                "gists_url": "https://api.github.com/users/frankier/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frankier",
                "id": 299380,
                "login": "frankier",
                "node_id": "MDQ6VXNlcjI5OTM4MA==",
                "organizations_url": "https://api.github.com/users/frankier/orgs",
                "received_events_url": "https://api.github.com/users/frankier/received_events",
                "repos_url": "https://api.github.com/users/frankier/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frankier/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frankier/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frankier",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Exposing terminal state/modes directly to plugins (without needing to query) seems reasonable to me. This could just be a buffer-local variable, or we could add it to `nvim_get_chan_info()`",
            "created_at": "2025-08-25T19:53:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/35414#issuecomment-3221546810",
            "id": 3221546810,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35414",
            "node_id": "IC_kwDOAPphoM7ABOc6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3221546810/reactions"
            },
            "updated_at": "2025-08-25T19:53:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3221546810",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35414/comments",
    "created_at": "2025-08-21T08:54:12Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35414/events",
    "html_url": "https://github.com/neovim/neovim/issues/35414",
    "id": 3340885064,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "clipboard, paste",
            "id": 186192409,
            "name": "clipboard",
            "node_id": "MDU6TGFiZWwxODYxOTI0MDk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/clipboard"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "built-in :terminal or :shell",
            "id": 212696822,
            "name": "terminal",
            "node_id": "MDU6TGFiZWwyMTI2OTY4MjI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/terminal"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35414/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 738,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 631,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-08-26T02:25:08Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM7HIdxI",
    "number": 35414,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35414/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35414/timeline",
    "title": "Lua can check if bracketedpaste is enabled in a :terminal buffer process",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-08-26T02:25:08Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35414",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/299380?v=4",
        "events_url": "https://api.github.com/users/frankier/events{/privacy}",
        "followers_url": "https://api.github.com/users/frankier/followers",
        "following_url": "https://api.github.com/users/frankier/following{/other_user}",
        "gists_url": "https://api.github.com/users/frankier/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/frankier",
        "id": 299380,
        "login": "frankier",
        "node_id": "MDQ6VXNlcjI5OTM4MA==",
        "organizations_url": "https://api.github.com/users/frankier/orgs",
        "received_events_url": "https://api.github.com/users/frankier/received_events",
        "repos_url": "https://api.github.com/users/frankier/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/frankier/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/frankier/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/frankier",
        "user_view_type": "public"
    }
}