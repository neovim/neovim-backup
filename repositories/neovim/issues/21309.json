{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "<details> <summary>Using latest master</summary>\r\n\r\n### Neovim version (nvim -v)\r\n\r\nv0.9.0-dev-448+g707df8805-dirty\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nN/A\r\n\r\n### Operating system/version\r\n\r\nmacOS 12\r\n\r\n### Terminal name/version\r\n\r\nalacritty\r\n\r\n### $TERM environment variable\r\n\r\nalacritty\r\n\r\n### Installation\r\n\r\nbuilt from source today\r\n</details>\r\n\r\n### How to reproduce the issue\r\n\r\nThe following Rust code presents issues when injecting `@markdown @combined` into the doc comments.\r\n\r\n```rust\r\n/// # Doc comment\r\n///\r\n/// ```rust\r\n/// let x = 5;\r\n/// let y = 10; // does not highlight properly.\r\n/// ```\r\n```\r\n\r\nNote that the rust TS grammar does not yet allow querying doc comments. I'm using a fork based on https://github.com/tree-sitter/tree-sitter-rust/pull/168. Basically it parses these as `(line_doc_comment (doc_content))` and then we inject using `(doc_content) @markdown @combine`.\r\n\r\nIf you don't want to repro by working on the rust grammar, here are three grammars that exhibit the issue when you nest them, because they roughly approximate the interference that goes on with `rust > markdown > rust`.\r\n\r\n<details>\r\n<summary>Detailed repro</summary>\r\n\r\n```javascript\r\n// a simple language made of leading ))))))) with the rest of the line captured as (host)\r\n// designed to mess up parenlang below\r\nmodule.exports = grammar({\r\n    name: 'bubble',\r\n    extras: _ => [],\r\n    rules: {\r\n        source_file: $ => repeat(choice($.line, '\\n')),\r\n        host: _ => token(/[^\\)][^\\n]*/),\r\n        line: $ => seq($.bubbles, $.host),\r\n        bubbles: $ => repeat1(')'),\r\n    }\r\n})\r\n```\r\n\r\n```scheme\r\n; bubble/highlights.scm\r\n(line (bubbles) @comment)\r\n; bubble/injections.scm\r\n(host) @bracketlang @combined\r\n```\r\n\r\n```javascript\r\n// arbitrary content inside of square brackets, captured as (brackets_inner)\r\nmodule.exports = grammar({\r\n    name: \"bracketlang\",\r\n    rules: {\r\n        source_file: $ => repeat(seq('[', $.brackets_inner, ']')),\r\n        brackets_inner: $ => /[^\\]]*/,\r\n    }\r\n})\r\n```\r\n\r\n```scheme\r\n; bracketlang/highlights.scm\r\n(\"[\" @operator)\r\n(\"]\" @operator)\r\n; bracketlang/injections.scm\r\n(brackets_inner) @parenlang @combined\r\n```\r\n\r\n```javascript\r\n// s-expressions basically. designed to mess up when it sees a ))))) from bubble.\r\nmodule.exports = grammar({\r\n    name: \"parenlang\",\r\n    inline: $ => [$._expr],\r\n    supertypes: $ => [$._expr],\r\n    word: $ => $.atom,\r\n    rules: {\r\n        source_file: $ => repeat($._expr),\r\n        _expr: $ => choice(\r\n            $.parens,\r\n            $.atom,\r\n        ),\r\n        parens: $ => seq('(', repeat($._expr), ')'),\r\n        atom: _ => /[^\\s\\(\\)]+/,\r\n    }\r\n})\r\n```\r\n\r\n```scheme\r\n; parenlang/highlights.scm\r\n(parens \"(\" @delimiter)\r\n(parens \")\" @delimiter)\r\n(atom) @keyword\r\n```\r\n\r\n```lua\r\nlocal parser_config = require \"nvim-treesitter.parsers\".get_parser_configs()\r\nparser_config.bubble = {\r\n  install_info = {\r\n    url = \"~/src/tree-sitter-bubble\",\r\n    files = {\"src/parser.c\"},\r\n  },\r\n}\r\nparser_config.bracketlang = {\r\n  install_info = {\r\n    url = \"~/src/tree-sitter-bracketlang\",\r\n    files = {\"src/parser.c\"},\r\n  },\r\n}\r\nparser_config.parenlang = {\r\n  install_info = {\r\n    url = \"~/src/tree-sitter-parenlang\",\r\n    files = {\"src/parser.c\"},\r\n  },\r\n}\r\n```\r\n</details>\r\n\r\n### Expected behavior\r\n\r\nIn simple terms, the second line of the fenced code block should highlight in the language specified. It's not happening.\r\n\r\nFor the bubble lang example, this is how it should parse (yes I have a potential solution)\r\n\r\n<img width=\"606\" alt=\"Screen Shot 2022-12-06 at 9 37 26 pm\" src=\"https://user-images.githubusercontent.com/378760/205910955-230df958-0d5d-41ed-bfe6-cdf03faabbe3.png\">\r\n\r\n\r\n### Actual behavior\r\n\r\nThe complication happens at the second level of nesting injections.\r\n\r\n1. The top-level `rust` injections give you a list of `@markdown` ones, each with the content that follows the initial `/// `. I.e. `# Doc comment\\n`, `\\n`, `\\`\\`\\`rust\\n`, etc.\r\n2. The queries for the markdown parser produces a bunch of `@markdown_inline` (we can ignore these ones) and also one `@rust` injection.\r\n3. The rust injection capture looks like this:\r\n\r\n       let x = 5;\r\n       /// let y = 10; // does not highlight properly\r\n\r\nThis is where it goes wrong. The range in question is `{ 3, 4, 5, 0 }` (aka line 3 col 4 .. line 5 col 0). This includes parts of the buffer that were not given to the markdown parser in the first place, specifically the `/// ` on the second and any subsequent lines. (As it goes down the rabbit-hole of the erroneous parse, it interprets the second line as a Rust doc comment, and hence the `let y...` is treated as a markdown inline.)\r\n\r\nFor the toy languages:\r\n\r\n<img width=\"606\" alt=\"error\" src=\"https://user-images.githubusercontent.com/378760/205911097-675c02a4-273a-4033-b52b-b56edce14ece.png\">\r\n\r\nIt's pretty much the same as above with the Rust doc comment:\r\n- The second line's `)))))` is not included in the injection for bracketlang (OUTSIDE the square braces),\r\n- but once bracketlang's injections are queried, you get a range spanning INSIDE the square braces, that starts on the first line and ends on the second, which includes the `)))))`.\r\n- Then the parenlang parses that range, which means it has five extra brackets, and the latter four will be unbalanced and mess up the parse.\r\n\r\nI'm guessing it happens this way because the tree-sitter query code isn't smart enough, and just constructs a node range by getting the relevant node and taking its start point and end point in the original buffer.\r\n\r\n### Good news!\r\n\r\nI have actually already devised a solution. The idea is to take an injected range like `{ 3, 4, 5, 0 }` and 'clip' or 'hole punch' the bit that isn't allowed, which splits it into two ranges `{3, 4, 4, 0}`, `{4, 4, 5, 0}`. You can do this by constructing an interval tree of all the parent LanguageTree's ranges, and then intersecting any overlapping ranges using some stock-standard `if start_child < start_parent`-style code.",
    "closed_at": "2025-04-13T21:22:19Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/21309/comments",
    "created_at": "2022-12-06T12:34:43Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/21309/events",
    "html_url": "https://github.com/neovim/neovim/issues/21309",
    "id": 1478996068,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/21309/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 17,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 70,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-04-13T21:22:19Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "I_kwDOAPphoM5YJ7Bk",
    "number": 21309,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 4,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/21309/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/21309/timeline",
    "title": "tree-sitter injected language ranges sometimes cross over the capture boundaries when `@combined`",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-13T21:22:19Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/21309",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4",
        "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}",
        "followers_url": "https://api.github.com/users/cormacrelf/followers",
        "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}",
        "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/cormacrelf",
        "id": 378760,
        "login": "cormacrelf",
        "node_id": "MDQ6VXNlcjM3ODc2MA==",
        "organizations_url": "https://api.github.com/users/cormacrelf/orgs",
        "received_events_url": "https://api.github.com/users/cormacrelf/received_events",
        "repos_url": "https://api.github.com/users/cormacrelf/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/cormacrelf",
        "user_view_type": "public"
    }
}