{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Hello,\r\n\r\nI'm author of [page](https://github.com/I60R/page) - a neovim's client similar to neovim-remote but rather focused on redirecting text from one :term buffer and reading it in another. It was created with intention to merge `less` functionality into `neovim` and provide more integrated paging for better terminal experience. The goal achieved pretty well, although currently `page` has some severe limitations that only can be resolved on `neovim` side.\r\n\r\nThe limitations are:\r\n\r\n\r\n### 1. Scrollback maximum on :term buffer\r\n\r\n`page` uses :term buffer to render ANSI escape sequences. But in neovim :term buffer scrollback is limited to 100000 lines and while it's enough for terminal purposes for pager it's not sufficient. When this maximum is over `page` loses possibly relevant text with some strange effects I60R/page#7. This is the worst of listed issues and having option for unlimited scrollback would be really valuable to resolve it.\r\n\r\n\r\n### 2. MANPAGER='page -t man' not works (-t provides hint for ftplugin)\r\n\r\nNeovim's `man` filetype fails on :term and read-only buffers:\r\n\r\n* `page` sets `nomodifiable` and then `ft=man` which produces `E21: Cannot make changes, \\'modifiable\\' is off:     silent keepjumps 1delete _`\r\n* without `nomodifiable` it produces `E474: Invalid argument: buftype=nofile`\r\n\r\nCurrently I recommend to use workaround with copy-pasting into non-:term buffer but looks like only some small tweaks required in `man.vim` to resolve this.\r\n\r\n\r\n### 3. Lack of on-demand text fetching\r\n\r\nE.g `less` pager blocks its stdin and reads from it only when required. This prevents from lags and redundant large computations e.g. when reading output of `journalctl` (which is pretty common use case). Current solution is to manually fetch lines on `:Page` command which also should be explicitly enabled with `-q <number_of_lines>` argument.\r\n\r\nBut it seems to be possible to implement auto-fetching on scrolling by utilizing of `CursorMoved` autocommand. I would like to use it instead, however without auto-fetch on searching and probably in other contexts it would be surprising and inconvenient for users.\r\n\r\nMaybe `SearchFound` and `SearchNotFound` autocommands or something like that would help to mimic `less` behavior better? I'm not sure if this is a good idea through, since it might be too complex to implement; it's already possible to override default <number_of_lines> using `:Page <count>` command, so it may be not worth it... \r\n\r\n\r\n---\r\n\r\n\r\nCould you collaborate on that?",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "For point three we should consider the possibility of using stdin as a channel (`:help stdioopen()`) while still running the TUI on the associated PTY like `... | nvim -` does.",
            "created_at": "2019-01-06T19:44:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/9462#issuecomment-451768880",
            "id": 451768880,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9462",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc2ODg4MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/451768880/reactions"
            },
            "updated_at": "2019-01-06T19:44:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/451768880",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> having option for unlimited scrollback would be really valuable to resolve it.\r\n\r\nDoes `less` really have \"unlimited scrollback\"? I guess that could be implemented with a file-backed buffer somehow (related: #614). Meanwhile we could just increase the 'scrollback' limit.\r\n",
            "created_at": "2019-01-06T20:11:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/9462#issuecomment-451770741",
            "id": 451770741,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9462",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3MDc0MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/451770741/reactions"
            },
            "updated_at": "2019-01-06T20:11:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/451770741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bfredl \r\nIt seems to be related to #1750. However, I don't see any advantages of this functionality alone. It would be really valuable if something like `-- PAGER --` mode would be introduced in conjunction. But anyway `page` would provide better cli interface.\r\n\r\n@justinmk\r\n`less` just reads continuously until there's free memory (tested it with running `less < /dev/urandom` and pressing `G`) and the same behavior would be sufficient for :term buffer as well. However, increasing 'scrollback' limit also would be a great improvement.",
            "created_at": "2019-01-07T22:26:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/9462#issuecomment-452104322",
            "id": 452104322,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9462",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjEwNDMyMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/452104322/reactions"
            },
            "updated_at": "2019-01-07T22:27:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/452104322",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9143774?v=4",
                "events_url": "https://api.github.com/users/I60R/events{/privacy}",
                "followers_url": "https://api.github.com/users/I60R/followers",
                "following_url": "https://api.github.com/users/I60R/following{/other_user}",
                "gists_url": "https://api.github.com/users/I60R/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/I60R",
                "id": 9143774,
                "login": "I60R",
                "node_id": "MDQ6VXNlcjkxNDM3NzQ=",
                "organizations_url": "https://api.github.com/users/I60R/orgs",
                "received_events_url": "https://api.github.com/users/I60R/received_events",
                "repos_url": "https://api.github.com/users/I60R/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/I60R/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/I60R/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/I60R",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think #1750 is related, the suggestion is just to harmonise two different functionalities already of `main.c`. The idea is then pager functionality could be implemented in lua (perhaps on top of a general output buffer/ANSI parser lib). What would \"-- PAGER --\" mode be, isn't the idea to use normal mode for navigation?",
            "created_at": "2019-01-07T22:54:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/9462#issuecomment-452111348",
            "id": 452111348,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9462",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjExMTM0OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/452111348/reactions"
            },
            "updated_at": "2019-01-07T22:54:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/452111348",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Normal mode is still focused on text editing. Because of that `page` overrides `scrollback=-1 scrolloff=999 signcolumn=no nonumber nomodifiable filetype=...` options and invokes `norm M` or `norm G` depending on flag provided. These settings are considered as \"sane defaults\" for buffer that supposed to be used for text reading. And there also autocommands invoked that allows to introduce custom mappings etc. \r\n\r\nInstead all of that functionality could be incorporated into `-- PAGER --` mode.",
            "created_at": "2019-01-07T23:14:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/9462#issuecomment-452116299",
            "id": 452116299,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9462",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjExNjI5OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/452116299/reactions"
            },
            "updated_at": "2019-01-07T23:14:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/452116299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9143774?v=4",
                "events_url": "https://api.github.com/users/I60R/events{/privacy}",
                "followers_url": "https://api.github.com/users/I60R/followers",
                "following_url": "https://api.github.com/users/I60R/following{/other_user}",
                "gists_url": "https://api.github.com/users/I60R/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/I60R",
                "id": 9143774,
                "login": "I60R",
                "node_id": "MDQ6VXNlcjkxNDM3NzQ=",
                "organizations_url": "https://api.github.com/users/I60R/orgs",
                "received_events_url": "https://api.github.com/users/I60R/received_events",
                "repos_url": "https://api.github.com/users/I60R/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/I60R/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/I60R/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/I60R",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Probably I need to clarify about #1750: `page` was mainly created for people who use `neovim` as terminal multiplexer. It allows to pipe/redirect text from shell running in :term buffer directly into new buffer created in parent `neovim` process instead of spawning some nested pager. E.g. `ls | page` wouldn't create nested `neovim` instance if it's invoked in :term buffer. As far as I know, `--remote` allows similar functionality but with text editing. Therefore, some users might expect it to work with paging too.\r\n\r\nOr maybe I simply misunderstood something because I'm not familiar with `neovim` internals.",
            "created_at": "2019-01-08T00:24:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/9462#issuecomment-452130658",
            "id": 452130658,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9462",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjEzMDY1OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/452130658/reactions"
            },
            "updated_at": "2019-01-08T00:24:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/452130658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9143774?v=4",
                "events_url": "https://api.github.com/users/I60R/events{/privacy}",
                "followers_url": "https://api.github.com/users/I60R/followers",
                "following_url": "https://api.github.com/users/I60R/following{/other_user}",
                "gists_url": "https://api.github.com/users/I60R/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/I60R",
                "id": 9143774,
                "login": "I60R",
                "node_id": "MDQ6VXNlcjkxNDM3NzQ=",
                "organizations_url": "https://api.github.com/users/I60R/orgs",
                "received_events_url": "https://api.github.com/users/I60R/received_events",
                "repos_url": "https://api.github.com/users/I60R/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/I60R/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/I60R/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/I60R",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Instead all of that functionality could be incorporated into -- PAGER -- mode.\r\n\r\nBut changing a bunch of options and a few custom mappings is not a \"mode\" in nvim's vocabulary. The pager buffer would still be navigated with normal mode and visual mode to copy stuff out of it. If it was builtin functionality, it will be more like quickfix, a buffer not \"focused on text editing\" with special behaviors _without_ complicating the mode logic in any way.\r\n\r\n> Probably I need to clarify about #1750: page was mainly created for people who use neovim as terminal multiplexer.\r\n\r\nYes, my remark was about running nvim as a standalone pager. Any official support should reasonably support both usage patterns.",
            "created_at": "2019-01-08T11:10:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/9462#issuecomment-452261796",
            "id": 452261796,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9462",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjI2MTc5Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/452261796/reactions"
            },
            "updated_at": "2019-01-08T11:10:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/452261796",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/9462/comments",
    "created_at": "2019-01-06T19:19:36Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/9462/events",
    "html_url": "https://github.com/neovim/neovim/issues/9462",
    "id": 396285940,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "built-in :terminal or :shell",
            "id": 212696822,
            "name": "terminal",
            "node_id": "MDU6TGFiZWwyMTI2OTY4MjI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/terminal"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 396626349,
            "name": "input",
            "node_id": "MDU6TGFiZWwzOTY2MjYzNDk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/input"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 2699293736,
            "name": "pager",
            "node_id": "MDU6TGFiZWwyNjk5MjkzNzM2",
            "url": "https://api.github.com/repos/neovim/neovim/labels/pager"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/9462/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 285,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 339,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-07-04T21:53:41Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWUzOTYyODU5NDA=",
    "number": 9462,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 10,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 10,
        "url": "https://api.github.com/repos/neovim/neovim/issues/9462/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/9462/timeline",
    "title": "Turn neovim into $PAGER",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:59:21Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/9462",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9143774?v=4",
        "events_url": "https://api.github.com/users/I60R/events{/privacy}",
        "followers_url": "https://api.github.com/users/I60R/followers",
        "following_url": "https://api.github.com/users/I60R/following{/other_user}",
        "gists_url": "https://api.github.com/users/I60R/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/I60R",
        "id": 9143774,
        "login": "I60R",
        "node_id": "MDQ6VXNlcjkxNDM3NzQ=",
        "organizations_url": "https://api.github.com/users/I60R/orgs",
        "received_events_url": "https://api.github.com/users/I60R/received_events",
        "repos_url": "https://api.github.com/users/I60R/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/I60R/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/I60R/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/I60R",
        "user_view_type": "public"
    }
}