{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\n`vim.diagnostic.set` does not use `bufnr` from diagnostic items passed to it in any way, it uses it's `bufnr` argument to override them instead.\n\n### Expected behavior\n\n`vim.diagnostic.set` should prefer `bufnr` from diagnostic items themselves and use `bufnr` argument only as a fallback.\n\nTake `vim.diagnostic.qflist`, for example. It actually [assigns](https://github.com/neovim/neovim/blob/570e62d0f99dbc99e4f506ad1b874bb1842159d0/runtime/lua/vim/diagnostic.lua#L2611) `bufnr` to each diagnostic item from a corresponding qf list item. But the only way to make `bufnr` useful in this case is to first manually group all diagnostics by `bufnr` and then call `vim.diagnostic.set` individually per buffer.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Could you explain in which scenarios this behavior would be desired? `vim.diagnostic.set()` sets the given diagnostics for a namespace and buffer, and so if one of the diagnostics has a different buffer value then that contract wouldn't be satisfied.",
            "created_at": "2025-05-17T01:38:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/34025#issuecomment-2887942939",
            "id": 2887942939,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34025",
            "node_id": "IC_kwDOAPphoM6sIoMb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2887942939/reactions"
            },
            "updated_at": "2025-05-17T01:38:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2887942939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">Could you explain in which scenarios this behavior would be desired\n\nLet's say you're working on a JS project which uses `jest` for testing, you make some changes and a lot of tests start to fail, you now need to go through them and figure out what's wrong.\n\nLuckily (neo)vim ships with a [jest compiler](https://github.com/neovim/neovim/blob/99384fcd9c295b5f1894c550cf3727cd1ad4c6bd/runtime/compiler/jest.vim), so `quickfix` can be used to quickly jump through failures. You can run `:compiler jest | set makeprg=npx\\ jest | make! | copen` (or `Dispatch -compiler=jest npx jest` if using vim-dispatch) and quickfix will be populated with all the places where tests fail. Most of the time you want to see the whole message to understand why the test has failed, builtin jest compiler parses multiline error messages just fine, but builtin quickfix window can only show them squashed into a single line, which is not particularly readable.\n\nNow you're thinking: diagnostics show multiple lines just fine. There is `vim.diagnostic.fromqflist` which can turn quickfix list items into diagnostics and `vim.diagnostic.set`, which can actually set them and you can easily call `fromqflist`, pass it's output to `set` and you're done, right? Wrong! You can't actually do just that, you'll need to manually group diagnostics by `bufnr` first. But why not make it that easy?\n\nActually there is still a little bit more you'd need to do, but that's outside the scope of this particular issue.\n\n>if one of the diagnostics has a different buffer value then that contract wouldn't be satisfied\n\nCurrently `bufnr` argument is [required to be a `number`](https://github.com/neovim/neovim/blob/3659058e80485c64cdd8a980337058ca0e40555d/runtime/lua/vim/diagnostic.lua#L1190), so passing `nil` will fail. We could utilize that to avoid breaking existing usages if that's the concern here.\n\nWe could continue to override `bufnr` in items with argument value if it was passed in, for backwards compatibility, but then also start to support passing `nil`, in which case every diagnostic item is required to have `bufnr`, otherwise it will fail.",
            "created_at": "2025-05-17T05:00:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/34025#issuecomment-2888082585",
            "id": 2888082585,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34025",
            "node_id": "IC_kwDOAPphoM6sJKSZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2888082585/reactions"
            },
            "updated_at": "2025-05-17T05:00:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2888082585",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmmm I'm still not convinced that changing the behavior of `vim.diagnostic.set()` is the right solution. WDYT @gpanders?",
            "created_at": "2025-05-17T16:05:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/34025#issuecomment-2888473149",
            "id": 2888473149,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34025",
            "node_id": "IC_kwDOAPphoM6sKpo9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2888473149/reactions"
            },
            "updated_at": "2025-05-17T16:05:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2888473149",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">But the only way to make bufnr useful in this case is to first manually group all diagnostics by bufnr and then call vim.diagnostic.set individually per buffer.\n\nYes, this is the intended usage of `vim.diagnostic.set()`. Allowing it to work with diagnostics from multiple buffers might be more convenient, but also, I think, would make the interface muddier and harder to reason about.\n\nI don't think it's too much code to separate out the diagnostics and pass them separately to `vim.diagnostic.set()`:\n\n```lua\nlocal d = {}\nfor _, v in ipairs(diagnostics) do\n  if d[v.bufnr] == nil then\n    d[v.bufnr] = {}\n  end\n\n  table.insert(d[v.bufnr], v)\nend\n\nfor k, v in pairs(d) do\n  vim.diagnostic.set(namespace, k, v)\nend\n```\n\nThe use case you provided is legitimate but it's also a less common one. So I lean toward keeping the API simple and easy to understand, favoring the common use case while still supporting less common ones (with a bit of extra code).",
            "created_at": "2025-05-17T16:26:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/34025#issuecomment-2888481169",
            "id": 2888481169,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34025",
            "node_id": "IC_kwDOAPphoM6sKrmR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2888481169/reactions"
            },
            "updated_at": "2025-05-17T16:26:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2888481169",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I agree that it's not much code at all.\n\nHow I see it is if `fromqflist` didn't exist in the first place there would not be an expectation for it to be that easy. That's the part that is most confusing to me. It looks like it should be \"call this thing, plug it into this thing, you're done\", but there is an extra step with grouping. If it's seen as an uncommon use case, maybe just removing `fromqflist` is an option to consider?\n\nOr if none of the APIs will change I think just adding that snippet of code to the docs would be helpful.\n\nRight now it just looks like it's half-way there.",
            "created_at": "2025-05-19T05:47:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/34025#issuecomment-2889694299",
            "id": 2889694299,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34025",
            "node_id": "IC_kwDOAPphoM6sPTxb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2889694299/reactions"
            },
            "updated_at": "2025-05-19T05:47:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2889694299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It looks like it should be \"call this thing, plug it into this thing, you're done\", but there is an extra step with grouping.\n\n`fromqflist` is a \"read\" operation, i.e. you're querying for already existing diagnostics. Similarly, there's no expectation that diagnostics returned from `vim.diagnostic.get()` can be plugged directly into `vim.diagnostic.set()` either (this also won't work, for the same reason).\n\n>Or if none of the APIs will change I think just adding that snippet of code to the docs would be helpful.\n\nI'm not opposed to this, if you want to send a docs PR I will review it.",
            "created_at": "2025-05-19T13:57:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/34025#issuecomment-2891139763",
            "id": 2891139763,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34025",
            "node_id": "IC_kwDOAPphoM6sU0qz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2891139763/reactions"
            },
            "updated_at": "2025-05-19T13:57:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2891139763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34025/comments",
    "created_at": "2025-05-15T03:54:28Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34025/events",
    "html_url": "https://github.com/neovim/neovim/issues/34025",
    "id": 3064813488,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34025/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM62rVew",
    "number": 34025,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34025/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34025/timeline",
    "title": "Prefer `bufnr` from diagnostic items in `vim.diagnostic.set`",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-05-19T13:57:22Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34025",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
        "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
        "followers_url": "https://api.github.com/users/faergeek/followers",
        "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
        "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/faergeek",
        "id": 3524621,
        "login": "faergeek",
        "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
        "organizations_url": "https://api.github.com/users/faergeek/orgs",
        "received_events_url": "https://api.github.com/users/faergeek/received_events",
        "repos_url": "https://api.github.com/users/faergeek/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/faergeek",
        "user_view_type": "public"
    }
}