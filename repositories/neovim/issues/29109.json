{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\nI get \r\n```\r\nError executing luv callback:\r\n...ers/ekarni/Neovim/share/nvim/runtime/lua/vim/lsp/rpc.lua:265: ...ers/ekarni/Neovim/share/nvim/runtime/lua/vim/lsp/rpc.lua:51: invalid header line \"contents.py\"\r\nstack traceback:\r\n\t[C]: in function 'parse_chunk'\r\n\t...ers/ekarni/Neovim/share/nvim/runtime/lua/vim/lsp/rpc.lua:265: in function <...ers/ekarni/Neovim/share/nvim/runtime/lua/vim/lsp/rpc.lua:251>\r\n```\r\n\r\nfrom time to time. \r\n\r\nI also get can't `resume dead coroutine` afterwards. \r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\nIt happens when I use my own version of pylsp, but only sometimes. On clean restart, selecting workspace directory , and workspace symbols. \r\n\r\n### Expected behavior\r\n\r\nclear\r\n\r\n### Neovim version (nvim -v)\r\n\r\nNVIM v0.10.0-dev-3122+ga0a189a8e\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nunk\r\n\r\n### Operating system/version\r\n\r\nwindows\r\n\r\n### Terminal name/version\r\n\r\nnvim-qt\r\n\r\n### $TERM environment variable\r\n\r\nunk\r\n\r\n### Installation\r\n\r\nnightly",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "```\r\n      local headers = parse_headers(buffer:sub(buffer_start, start - 1))\r\n      local content_length = headers.content_length\r\n```\r\n\r\nThe code return null in case there is an error in header,\r\nand then try to read `content_length` and fail silently most probably. \r\n\r\nIt is all inside coroutine \r\n```\r\ncoroutine.wrap(request_parser_loop)\r\n```\r\nHence, the coroutine fail. \r\n\r\nYou should fix this of course, but also add error handling in case of unexpected fails so that things won't fail silently!!\r\nOr won't break when there is a parsing error. \r\nI have to restart neovim when it happens. \r\n\r\n\r\n\r\n",
            "created_at": "2024-05-31T12:02:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/29109#issuecomment-2141909553",
            "id": 2141909553,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29109",
            "node_id": "IC_kwDOAPphoM5_qvIx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2141909553/reactions"
            },
            "updated_at": "2024-05-31T12:06:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2141909553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/72234965?v=4",
                "events_url": "https://api.github.com/users/eyalk11/events{/privacy}",
                "followers_url": "https://api.github.com/users/eyalk11/followers",
                "following_url": "https://api.github.com/users/eyalk11/following{/other_user}",
                "gists_url": "https://api.github.com/users/eyalk11/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/eyalk11",
                "id": 72234965,
                "login": "eyalk11",
                "node_id": "MDQ6VXNlcjcyMjM0OTY1",
                "organizations_url": "https://api.github.com/users/eyalk11/orgs",
                "received_events_url": "https://api.github.com/users/eyalk11/received_events",
                "repos_url": "https://api.github.com/users/eyalk11/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/eyalk11/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/eyalk11/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/eyalk11",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I get `rpc.lua:51: invalid header line \"contents.py\"`\r\n\r\n> You should fix this of course, but also add error handling in case of unexpected fails so that things won't fail silently!!\r\n\r\nI don't follow. You're getting an error so why are you saying it shouldn't fail silently? \r\n\r\nThis sounds very much like a bug in your customized sever. It's outputting garbage on stdout, which is used for the LSP communication. ",
            "created_at": "2024-05-31T16:00:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/29109#issuecomment-2142554915",
            "id": 2142554915,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29109",
            "node_id": "IC_kwDOAPphoM5_tMsj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2142554915/reactions"
            },
            "updated_at": "2024-05-31T16:00:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2142554915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> 89      local headers = parse_headers(buffer:sub(buffer_start, start - 1))\r\n> 90     local content_length = headers.content_length\r\n\r\n> The code return null in case there is an error in header,\r\n\r\nActually this is not true. It *throws* an error https://github.com/neovim/neovim/blob/v0.10.0/runtime/lua/vim/lsp/rpc.lua#L51, which is the \"invalid header line\" you see here. So the line 90 above will be never executed.\r\n\r\nAnd this is an error that is not repairable/recoverable, and therefore that one should never ignore.",
            "created_at": "2024-05-31T16:20:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/29109#issuecomment-2142595130",
            "id": 2142595130,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29109",
            "node_id": "IC_kwDOAPphoM5_tWg6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2142595130/reactions"
            },
            "updated_at": "2024-05-31T21:04:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2142595130",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "OK, I admit.  It is not silent. However it is not a clear stacktrace. There is not enough information to debug this. \r\nideally , it would also print the exact thing it tried to parse. \r\nAnd ideally , you should include local variable in stack trace like https://pyro5.readthedocs.io/en/latest/errors.html\r\n(which I guess can be implement it in lua) .\r\n\r\n\r\nWhy would it not be recoverable for neovim as whole ? It is just a problematic server.  I think neovim should tolerate improper behavior by  lsp server and try to recover. That is , possibly to shutdown this specific server (not receive more input) . But certainly not to try to call a dead coroutine ( as it seems the case now). And alert about it every sec. \r\n\r\n\r\n",
            "created_at": "2024-06-09T00:42:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/29109#issuecomment-2156245910",
            "id": 2156245910,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29109",
            "node_id": "IC_kwDOAPphoM6AhbOW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2156245910/reactions"
            },
            "updated_at": "2024-06-09T00:43:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2156245910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/72234965?v=4",
                "events_url": "https://api.github.com/users/eyalk11/events{/privacy}",
                "followers_url": "https://api.github.com/users/eyalk11/followers",
                "following_url": "https://api.github.com/users/eyalk11/following{/other_user}",
                "gists_url": "https://api.github.com/users/eyalk11/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/eyalk11",
                "id": 72234965,
                "login": "eyalk11",
                "node_id": "MDQ6VXNlcjcyMjM0OTY1",
                "organizations_url": "https://api.github.com/users/eyalk11/orgs",
                "received_events_url": "https://api.github.com/users/eyalk11/received_events",
                "repos_url": "https://api.github.com/users/eyalk11/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/eyalk11/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/eyalk11/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/eyalk11",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29109/comments",
    "created_at": "2024-05-31T11:56:22Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/29109/events",
    "html_url": "https://github.com/neovim/neovim/issues/29109",
    "id": 2327676388,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "We need minimal steps to reproduce the issue",
            "id": 298863445,
            "name": "needs:repro",
            "node_id": "MDU6TGFiZWwyOTg4NjM0NDU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:repro"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/29109/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6KvYXk",
    "number": 29109,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/29109/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/29109/timeline",
    "title": "rpc fail invalid header line \"contents.py\"`",
    "updated_at": "2025-01-19T11:22:19Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/29109",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/72234965?v=4",
        "events_url": "https://api.github.com/users/eyalk11/events{/privacy}",
        "followers_url": "https://api.github.com/users/eyalk11/followers",
        "following_url": "https://api.github.com/users/eyalk11/following{/other_user}",
        "gists_url": "https://api.github.com/users/eyalk11/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/eyalk11",
        "id": 72234965,
        "login": "eyalk11",
        "node_id": "MDQ6VXNlcjcyMjM0OTY1",
        "organizations_url": "https://api.github.com/users/eyalk11/orgs",
        "received_events_url": "https://api.github.com/users/eyalk11/received_events",
        "repos_url": "https://api.github.com/users/eyalk11/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/eyalk11/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eyalk11/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/eyalk11",
        "user_view_type": "public"
    }
}