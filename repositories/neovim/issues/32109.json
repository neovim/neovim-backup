{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nNeovim automatically sets `'background'` based on whether the terminal is in light or dark mode, both on startup and (on nightly) when the terminal's appearance changes. In the former case, at least on my machine, the automatic setting of the option occurs too late when the terminal is in light mode, meaning:\n- Start up Nvim in a light mode terminal with a configured colorscheme\n- The `'bg'` option is initially `\"dark\"` even though the terminal and OS are in light mode\n- The configured colorscheme is applied while `'bg'` is still set to `\"dark\"`. Depending on the implementation of the colorscheme this could mean that it applies designated colors for its dark version.\n- The automatic `'bg'` detection kicks in and sets the option to `\"light\"`.\n- Because of the change the colorscheme is reloaded, this time with a `'bg'` value of `\"light\"` (which again may cause it to apply specific – in this case the correct – colors).\n\nThis is obviously bad because it's expensive and unnecessary, but particularly annoying with themes that adapt to the background because it means that there is a flash of dark before the correct colors are loaded.\n\n### Steps to reproduce\n\n1. Create a minimal configuration using `NVIM_APPNAME` (couldn't figure out how to do what needs to be done with just the issue template), with this structure:\n   ```\n   .\n   ├── colors\n   │   └── mycolors.lua\n   └── init.lua\n   ```\n   Contents of `mycolors.lua`:\n   ```lua\n   -- a very simple mock colorscheme that follows the background\n\n   local bg = vim.o.background\n\n   if bg == \"dark\" then\n       print(\"the value of 'bg' is: 'dark', thus applying the dark colors\")\n       vim.api.nvim_set_hl(0, \"Normal\", {bg = \"#000000\", fg = \"#ffffff\"})\n   elseif bg == \"light\" then\n       print(\"the value of 'bg' is: 'light', thus applying the light colors\")\n       vim.api.nvim_set_hl(0, \"Normal\", {bg = \"#ffffff\", fg = \"#000000\"})\n   end\n\n   vim.g.colors_name = \"mycolors\"\n   ```\n   Contents of `init.lua`:\n   ```lua\n   -- this part is optional:\n\n   --vim.api.nvim_create_autocmd(\"ColorScheme\", { callback = function(data)\n   --    print(vim.inspect(data))\n   --end})\n\n   --vim.api.nvim_create_autocmd(\"OptionSet\", { pattern = \"background\", callback = function(data)\n   --    print(vim.inspect(data))\n   --end})\n\n   vim.cmd.colorscheme(\"mycolors\")\n\n   ```\n2. Run `NVIM_APPNAME=<your name> nvim` in a light mode terminal (can reproduce in Kitty and Ghostty). A black flicker will be visible before the background becomes bright white as expected (Because nvim is so fast, this is barely noticable, but with a heavy config full of plugins, it is very noticable).\n3. Check `:messages`. The order of the messages will be:\n   - `the value of 'bg' is: 'dark', thus applying the dark colors`\n   - `the value of 'bg' is: 'light', thus applying the light colors`\n\n### Expected behavior\n\nThe value of `'background'` is determined and set as early as possible so that it does not trigger reloading of the colorscheme.\n\n### Nvim version (nvim -v)\n\nNVIM v0.11.0-dev-6696ea7\n\n### Vim (not Nvim) behaves the same?\n\nno\n\n### Operating system/version\n\nmacOS 15.2\n\n### Terminal name/version\n\nGhostty 1.0.1, kitty 0.39.0\n\n### $TERM environment variable\n\nxterm-ghostty\n\n### Installation\n\nbuild from repo",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "is this different than https://github.com/neovim/neovim/issues/19362 or https://github.com/neovim/neovim/issues/28667 ?",
            "created_at": "2025-01-19T19:44:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/32109#issuecomment-2600996132",
            "id": 2600996132,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32109",
            "node_id": "IC_kwDOAPphoM6bCA0k",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2600996132/reactions"
            },
            "updated_at": "2025-01-19T19:44:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2600996132",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> is this different than [#19362](https://github.com/neovim/neovim/issues/19362) or [#28667](https://github.com/neovim/neovim/issues/28667) ?\n\nI _think_ it is, as\n- I am not setting `'termguicolors'` manually like is done in https://github.com/neovim/neovim/issues/28667 – it gets set automatically now and that seems to work well and not be related to this issue.\n- Nor am I setting `'background'` manually like https://github.com/neovim/neovim/issues/19362 does.\n\nI'm not messing with the default behavior of Nvim here, actually relying on it. My use case where I discovered this was while making a colorscheme. It does not touch _any_ options, instead only reads the values of `'termguicolors'` (to abort because it's a truecolor-only colorscheme) and `'background'` (to determine which kind of colors, light or dark, to apply). Exactly like the example I provided, minus the `'termguicolors'` part.\n\nAny colorscheme, for example Tokyonight, also has this exact issue for me. Just add it to the runtimepath with an otherwise minimal Nvim and add a print statement somewhere in its file inside `colors/` that prints the current background or \"hello\" or whatever, and two messages appear every time.",
            "created_at": "2025-01-19T20:02:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/32109#issuecomment-2601002183",
            "id": 2601002183,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32109",
            "node_id": "IC_kwDOAPphoM6bCCTH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2601002183/reactions"
            },
            "updated_at": "2025-01-19T20:02:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2601002183",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/173009167?v=4",
                "events_url": "https://api.github.com/users/ferdinandrau/events{/privacy}",
                "followers_url": "https://api.github.com/users/ferdinandrau/followers",
                "following_url": "https://api.github.com/users/ferdinandrau/following{/other_user}",
                "gists_url": "https://api.github.com/users/ferdinandrau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ferdinandrau",
                "id": 173009167,
                "login": "ferdinandrau",
                "node_id": "U_kgDOCk_pDw",
                "organizations_url": "https://api.github.com/users/ferdinandrau/orgs",
                "received_events_url": "https://api.github.com/users/ferdinandrau/received_events",
                "repos_url": "https://api.github.com/users/ferdinandrau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ferdinandrau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ferdinandrau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ferdinandrau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> * Start up Nvim in a light mode terminal with a configured colorscheme\n> * The `'bg'` option is initially `\"dark\"` even though the terminal and OS are in light mode\n\nUnavoidable, since the terminal bg isn't known until Nvim gets a response from the terminal (which may never arrive, thus it's a race).\n\n> Expected behavior: The value of `'background'` is determined and set as early as possible\n\nAFAIK that is already the case.\n\nIn your repro steps, you are calling `colorscheme(\"mycolors\")` in your init.lua, which happens before theme detection response is received. Startup intentionally does not wait for a terminal response (which may never arrive).\n\nDoes moving `colorscheme(\"mycolors\")` to a `VimEnter` event-handler (or `OptionSet background`) fix the issue? Then we should mention that at `:help :colorscheme` and `:help 'background'`.",
            "created_at": "2025-01-19T20:30:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/32109#issuecomment-2601010797",
            "id": 2601010797,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32109",
            "node_id": "IC_kwDOAPphoM6bCEZt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2601010797/reactions"
            },
            "updated_at": "2025-01-19T20:32:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2601010797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Okay, so I kind of assumed that querying the terminal for its color would be so fast that it could realistically complete before or while `init.lua` and the like are processed, so the correct value would already be in place on a fast system/terminal. That is why i thought this could be fixed by calling it earlier, but I obviosly don't know about how this really works internally, and if that is already the case then there is indeed not much that can be done.\n\nHowever:\nDeferring to `VimEnter` does not solve the problem, the background is still `\"dark\"` after `VimEnter` and the colorscheme gets applied twice. Triggering loading on `OptionSet background` via a self-destructing autocmd works and looks like it's fast, but is obviously pretty clunky: What if the user sets `'background'` explicitly to `\"dark\"` before the call to `:colorscheme`? Then the colorscheme is not applied at all, because the `OptionSet` does not trigger during startup.\n\nIn an ideal world, here is how i would like to implement my colorscheme:\n- If the user does not manually set `'background'` before `:colorscheme`, it is assumed that it will be set via the detection, and somehow loading of the colorscheme is deferred until that is done. If the terminal never resonds, so be it, then the theme is not applied until the user does `:set bg=<something>`. Not ideal, but I'm aiming at supporting modern terminals where the detection should work well; a timeout could also work. Changes in the terminal appearance after that update `'background'`, triggering reloading of the theme to match (done in https://github.com/neovim/neovim/pull/31350)\n- If the user has manually set `'background'` before calling `:colorscheme`, then it is clear they have a static preference for either light or dark. The auto theme-switching mentioned above also does not touch the value after, only manual changes will trigger theme updates.\n\nThe `'background'` option can be in one of three \"states\", odererd from weakest to strongest so to say:\n- still at its default value of `\"dark\"`\n- set to a value following detection\n- set manually by the user\n\nI assume here that the detection on startup never ever, just like feature #31350, overrides the `'bg'` option if the user has already explicitly set it (consistent with my observations). If that is indeed the case, then what I described could be implemented if it was clear which one of the three \"states\" was the case. One would need to answer two yes-or-no questions to do that: (A) \"Has the option been set manually?\" and (B) \"Has the option been set by the detection?\". If A is the case, simply apply the colorscheme. If A is not the case check if / wait for B to become true via some sort of trigger (which again may never arrive, but it's a caveat I can live with / work around).\n\nSo now the question is: Is there any way to query this information? 😂 At least the answer to A has to exist internally for #31350 to work.",
            "created_at": "2025-01-19T21:50:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/32109#issuecomment-2601034829",
            "id": 2601034829,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32109",
            "node_id": "IC_kwDOAPphoM6bCKRN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2601034829/reactions"
            },
            "updated_at": "2025-01-19T23:40:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2601034829",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/173009167?v=4",
                "events_url": "https://api.github.com/users/ferdinandrau/events{/privacy}",
                "followers_url": "https://api.github.com/users/ferdinandrau/followers",
                "following_url": "https://api.github.com/users/ferdinandrau/following{/other_user}",
                "gists_url": "https://api.github.com/users/ferdinandrau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ferdinandrau",
                "id": 173009167,
                "login": "ferdinandrau",
                "node_id": "U_kgDOCk_pDw",
                "organizations_url": "https://api.github.com/users/ferdinandrau/orgs",
                "received_events_url": "https://api.github.com/users/ferdinandrau/received_events",
                "repos_url": "https://api.github.com/users/ferdinandrau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ferdinandrau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ferdinandrau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ferdinandrau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> (A) \"Has the option been set manually?\"\n\n`nvim_get_option_info2()` returns a `last_set_sid` field and some other fields which give a hint.",
            "created_at": "2025-01-20T01:21:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/32109#issuecomment-2601139603",
            "id": 2601139603,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32109",
            "node_id": "IC_kwDOAPphoM6bCj2T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2601139603/reactions"
            },
            "updated_at": "2025-01-20T01:21:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2601139603",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Unavoidable, since the terminal bg isn't known until Nvim gets a response from the terminal (which may never arrive, thus it's a race).\n\nI think Neovim could reasonably do something more clever here. For example, the [terminal-colorsaurus](https://github.com/bash/terminal-colorsaurus) Rust crate sends OSC 10 followed by DA1, and can then say with reasonable confidence whether the terminal actually supports OSC 10 or not based on which one it sees a reply to. https://docs.rs/terminal-colorsaurus/latest/terminal_colorsaurus/feature_detection/index.html\n\nI tried to set `background` synchronously myself by calling the terminal-colorsaurus `termtheme` binary from init.vim, but I couldn't get it to work; `system()` and `vim.system()` don't give the spawned process access to neovim's stdin, and using `uv.spawn()` directly seemed to result in termtheme deciding the terminal doesn't support OSC 10. However, a [small wrapper script](https://github.com/sersorrel/sys/blob/2327c4cd16bb774d4552070ffa4266d83e741741/hm/neovim/default.nix#L341-L355) that conditionally inserts `--cmd=\"set bg=...\"` works great, if that would be useful for anyone else:\n\n```bash\ntheme=$(/path/to/termtheme --force)\ncase $theme in\n  light|dark)\n    /path/to/nvim --cmd \"set bg=$theme\" \"$@\"\n    ;;\n  *)\n    /path/to/nvim \"$@\"\n    ;;\nesac\n```",
            "created_at": "2025-04-13T14:27:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/32109#issuecomment-2799974729",
            "id": 2799974729,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32109",
            "node_id": "IC_kwDOAPphoM6m5DlJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2799974729/reactions"
            },
            "updated_at": "2025-04-13T14:27:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2799974729",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9433472?v=4",
                "events_url": "https://api.github.com/users/sersorrel/events{/privacy}",
                "followers_url": "https://api.github.com/users/sersorrel/followers",
                "following_url": "https://api.github.com/users/sersorrel/following{/other_user}",
                "gists_url": "https://api.github.com/users/sersorrel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sersorrel",
                "id": 9433472,
                "login": "sersorrel",
                "node_id": "MDQ6VXNlcjk0MzM0NzI=",
                "organizations_url": "https://api.github.com/users/sersorrel/orgs",
                "received_events_url": "https://api.github.com/users/sersorrel/received_events",
                "repos_url": "https://api.github.com/users/sersorrel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sersorrel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sersorrel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sersorrel",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Neovim could reasonably do something more clever here. For example, the [terminal-colorsaurus](https://github.com/bash/terminal-colorsaurus) Rust crate sends OSC 10 followed by DA1, and can then say with reasonable confidence whether the terminal actually supports OSC 10\n\npr welcome",
            "created_at": "2025-04-13T15:27:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/32109#issuecomment-2799997124",
            "id": 2799997124,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32109",
            "node_id": "IC_kwDOAPphoM6m5JDE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2799997124/reactions"
            },
            "updated_at": "2025-04-13T15:27:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2799997124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> However, a [small wrapper script](https://github.com/sersorrel/sys/blob/2327c4cd16bb774d4552070ffa4266d83e741741/hm/neovim/default.nix#L341-L355) that conditionally inserts `--cmd=\"set bg=...\"` works great, if that would be useful for anyone else:\n> \n> theme=$(/path/to/termtheme --force)\n> case $theme in\n>   light|dark)\n>     /path/to/nvim --cmd \"set bg=$theme\" \"$@\"\n>     ;;\n>   *)\n>     /path/to/nvim \"$@\"\n>     ;;\n> esac\n\nThis works great, but when OS theme changes, the background won't be updated because `vim/_defaults.lua` will delete the theme update autocmd if `vim.o.bg` is explicitly set by user.",
            "created_at": "2025-04-14T10:51:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/32109#issuecomment-2801307430",
            "id": 2801307430,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32109",
            "node_id": "IC_kwDOAPphoM6m-I8m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2801307430/reactions"
            },
            "updated_at": "2025-04-14T11:07:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2801307430",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32333772?v=4",
                "events_url": "https://api.github.com/users/MrConnorKenway/events{/privacy}",
                "followers_url": "https://api.github.com/users/MrConnorKenway/followers",
                "following_url": "https://api.github.com/users/MrConnorKenway/following{/other_user}",
                "gists_url": "https://api.github.com/users/MrConnorKenway/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MrConnorKenway",
                "id": 32333772,
                "login": "MrConnorKenway",
                "node_id": "MDQ6VXNlcjMyMzMzNzcy",
                "organizations_url": "https://api.github.com/users/MrConnorKenway/orgs",
                "received_events_url": "https://api.github.com/users/MrConnorKenway/received_events",
                "repos_url": "https://api.github.com/users/MrConnorKenway/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MrConnorKenway/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MrConnorKenway/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MrConnorKenway",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32109/comments",
    "created_at": "2025-01-19T19:24:37Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32109/events",
    "html_url": "https://github.com/neovim/neovim/issues/32109",
    "id": 2797789191,
    "labels": [
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim defaults for options, colorscheme/theme, autocmds/events, etc.",
            "id": 103777064,
            "name": "defaults",
            "node_id": "MDU6TGFiZWwxMDM3NzcwNjQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/defaults"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim startup sequence (`:h startup`)",
            "id": 870629450,
            "name": "startup",
            "node_id": "MDU6TGFiZWw4NzA2Mjk0NTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/startup"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32109/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 272,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 322,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-04-14T11:08:54Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6mwuAH",
    "number": 32109,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32109/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32109/timeline",
    "title": "'background' detection occurs too late, causing colorscheme to load twice",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-14T11:07:28Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32109",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/173009167?v=4",
        "events_url": "https://api.github.com/users/ferdinandrau/events{/privacy}",
        "followers_url": "https://api.github.com/users/ferdinandrau/followers",
        "following_url": "https://api.github.com/users/ferdinandrau/following{/other_user}",
        "gists_url": "https://api.github.com/users/ferdinandrau/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ferdinandrau",
        "id": 173009167,
        "login": "ferdinandrau",
        "node_id": "U_kgDOCk_pDw",
        "organizations_url": "https://api.github.com/users/ferdinandrau/orgs",
        "received_events_url": "https://api.github.com/users/ferdinandrau/received_events",
        "repos_url": "https://api.github.com/users/ferdinandrau/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ferdinandrau/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ferdinandrau/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ferdinandrau",
        "user_view_type": "public"
    }
}