{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\r\n\r\nAs of today, it is not possible to define a local window option associated with a buffer number.\r\n\r\nAs per reported by the vim doc (`:h local-options`):\r\n\r\n> It's possible to set a local window option specifically for a type of buffer.\r\n\r\nBut with the current lua API in function `nvim_set_option_value`, it is not possible to do this. \r\n\r\nHere is an example with `cursorline` which is a `local to window` option.\r\n\r\n```\r\nnvim_set_option_value('cursorline', 1, {'buf': 2})\r\n```\r\n\r\nToday this does not work.\r\n\r\n### Expected behavior\r\n\r\n```\r\nnvim_set_option_value('cursorline', 1, {'win': 1000, 'buf': 2})\r\nnvim_set_option_value('cursorline', 1, {'buf': 2})\r\n```\r\n\r\nThe above should define the local window option for the given buffer and the given window, and the doc should be updated. Omitting the `win` could mean \"current window\". Or maybe the API should be different if there is another better way to communicate the intent.\r\n\r\nAnother possibility is to allow that through `vim.wo` such as:\r\n\r\n```\r\nvim.wo[w][b] = true\r\n```\r\n\r\nThis issue is to reference the progress on the topic, but the feature has already been thought of, as reported by the comments in the code.\r\n\r\nhttps://github.com/neovim/neovim/blob/2f22ed6a00db10c4852a8fa232b8782f8b6a6646/runtime/lua/vim/_options.lua#L207C10-L207C10",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "With `nvim_set_option_value('cursorline', 1, {'buf': 2})`, I think it's maybe best to require an explicit `win = 0` rather than assume the current window (in case the user has confused a window-local option for a buffer-local one).",
            "created_at": "2023-07-19T14:07:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/24397#issuecomment-1642158653",
            "id": 1642158653,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24397",
            "node_id": "IC_kwDOAPphoM5h4Vo9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1642158653/reactions"
            },
            "updated_at": "2023-07-19T14:07:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1642158653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> As of today, it is not possible to define a local window option associated with a buffer number.\r\n> [...]\r\n> > It's possible to set a local window option specifically for a type of buffer.\r\n\r\nBut from, my understanding, a buffer ~~never~~ would not belong to any window. So the quoted docs looks accurate to me.\r\n\r\n---\r\n\r\nOn the other hand,\r\n\r\n> Omitting the win could mean \"current window\".\r\n\r\nThis is not true in Neovim, from my experience, we use an explicit `0` to mean the current window/buf. For example, for me omitting both `win` or `buf` sounds like a global option. Should always be specific.",
            "created_at": "2023-07-25T16:50:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/24397#issuecomment-1650192580",
            "id": 1650192580,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24397",
            "node_id": "IC_kwDOAPphoM5iW_DE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1650192580/reactions"
            },
            "updated_at": "2023-07-25T23:01:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1650192580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24765272?v=4",
                "events_url": "https://api.github.com/users/nyngwang/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyngwang/followers",
                "following_url": "https://api.github.com/users/nyngwang/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyngwang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyngwang",
                "id": 24765272,
                "login": "nyngwang",
                "node_id": "MDQ6VXNlcjI0NzY1Mjcy",
                "organizations_url": "https://api.github.com/users/nyngwang/orgs",
                "received_events_url": "https://api.github.com/users/nyngwang/received_events",
                "repos_url": "https://api.github.com/users/nyngwang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyngwang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyngwang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyngwang",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@nyngwang Not quite sure what you mean by your first point, can you elaborate?\r\n\r\nE.g: `:setlocal` (`{scope = 'local', win = 0}`) for a window-local option associates the value with _only the specific buffer_ being edited in the current window, which should be equivalent to `{win = 0, buf = 0}` going by this issue (assuming an explicit `win = 0` is required, of course).\r\n\r\nAs such, it seems natural to allow `buf` and `win` at the same time, and to extend this to other values of `buf` too.",
            "created_at": "2023-07-25T17:20:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/24397#issuecomment-1650234400",
            "id": 1650234400,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24397",
            "node_id": "IC_kwDOAPphoM5iXJQg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1650234400/reactions"
            },
            "updated_at": "2023-07-25T17:38:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1650234400",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@seandewar Sorry for being misleading, I should use tagging as I was trying to reply to OP. I was thinking about the usefulness of setting an effect only valid for a buffer, say `id=1`, to a specific window, say `win=1002`. As I will usually move buffers around so that I can make two related ones adjacent for comparison. If moving the buffer of `id=1` out of that `win=1002` will disable an effect, this is counter-intuitive maybe only for me. For example, if I have enabled indent-line for buffer A, I will feel it cumbersome if later I view A in another window but find that there is no indent-line. I get used to thinking that windows are just viewports. Nevermind, maybe I was wrong.",
            "created_at": "2023-07-25T22:58:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/24397#issuecomment-1650677077",
            "id": 1650677077,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24397",
            "node_id": "IC_kwDOAPphoM5iY1VV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1650677077/reactions"
            },
            "updated_at": "2023-07-25T23:06:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1650677077",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24765272?v=4",
                "events_url": "https://api.github.com/users/nyngwang/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyngwang/followers",
                "following_url": "https://api.github.com/users/nyngwang/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyngwang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyngwang",
                "id": 24765272,
                "login": "nyngwang",
                "node_id": "MDQ6VXNlcjI0NzY1Mjcy",
                "organizations_url": "https://api.github.com/users/nyngwang/orgs",
                "received_events_url": "https://api.github.com/users/nyngwang/received_events",
                "repos_url": "https://api.github.com/users/nyngwang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyngwang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyngwang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyngwang",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@nyngwang No need to apologize regarding tagging; it was clear who you were replying to.  \nHowever I'm having trouble understanding your concern here.\n\nTo be clear, the proposed feature does _not_ change how window-local options already work; for example, temporarily switching to a specific window/buffer, using`:setlocal` on a window-local option, and restoring the original window/buffer is already capable of achieving the proposed behaviour in this issue, it's just not convenient to do.\n\nIn case the concern comes from misunderstanding how window-local options work (they're extremely complicated),\nI've written a (probably incomplete) summary below:\n\n<details>\n\n- Window-local options have both a local and global value.  \n  If a window is split, its values are copied to the new window.\n\n- Local window-local option values apply to _only a specific buffer_ being\n  edited in a window.  \n  E.g: switching to a different buffer in the same window will not use that\n  value, and switching back to the original buffer in the same window will\n  restore that value.\n\n- Global window-local option values apply only to buffers that are being edited\n  for the first time in the particular window.\n  This value is copied as the local value for the buffer in this window.  \n  _(There is an exception to this rule; see below)_\n\n- There is also a fun caveat: if a buffer was previously edited in a different\n  window which has since been closed, that local value will be applied instead\n  if this window hasn't edited the buffer before.\n  ([Other cases also exist](https://github.com/neovim/neovim/discussions/32163#discussioncomment-11984018))\n\nIn regards to this issue, it's concerned with being able to set a local value\nfor a `buf` that is not currently being edited in `win` (such that if `win`\nedits `buf` later, it uses the set local value).\n\nAs of now, `:setlocal`/`{scope=\"local\"}` can only do this for the current\nbuffer being edited in the current window, and `{scope=\"local\", win=w}` can only\ndo this for the buffer edited in window `w`.\n\n</details>",
            "created_at": "2023-07-25T23:28:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/24397#issuecomment-1650700549",
            "id": 1650700549,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24397",
            "node_id": "IC_kwDOAPphoM5iY7EF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1650700549/reactions"
            },
            "updated_at": "2025-10-18T09:08:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1650700549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24397/comments",
    "created_at": "2023-07-19T14:03:34Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24397/events",
    "html_url": "https://github.com/neovim/neovim/issues/24397",
    "id": 1812030469,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "configuration, settings",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24397/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 746,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 640,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-10-17T19:41:04Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5sAWQF",
    "number": 24397,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24397/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24397/timeline",
    "title": "Allow passing both buf and win to nvim_set_option_value",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-10-18T09:08:01Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24397",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3764103?v=4",
        "events_url": "https://api.github.com/users/lobre/events{/privacy}",
        "followers_url": "https://api.github.com/users/lobre/followers",
        "following_url": "https://api.github.com/users/lobre/following{/other_user}",
        "gists_url": "https://api.github.com/users/lobre/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lobre",
        "id": 3764103,
        "login": "lobre",
        "node_id": "MDQ6VXNlcjM3NjQxMDM=",
        "organizations_url": "https://api.github.com/users/lobre/orgs",
        "received_events_url": "https://api.github.com/users/lobre/received_events",
        "repos_url": "https://api.github.com/users/lobre/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lobre/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lobre/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lobre",
        "user_view_type": "public"
    }
}