{
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        }
    ],
    "author_association": "NONE",
    "body": "### Problem\n\nNot sure if that is an issue, but i have a problem where buf_get_name would not behave correctly for non file buffers, i.e expand does correctly expand against the current most local directory i.e when using tcd or lcd, expand with %:p will correctly pick that one up, however the nvim_buf_get_name for some reason expands against the global cd directory or not aganst the most local one.\n\nI suspect that what might be happening is that the neovim vim.api.nvim_buf_get_name seems to \"remember\" the very first working directory when the buffer was created, and it does not ever dynamically expand the current working directory with the name of the buffer, whereas expand would evaluate the current working directly every time you call it.\n\nMaybe related: [issue](https://github.com/neovim/neovim/issues/18183)\n\n### Steps to reproduce\n\n```lua\nvim.cmd.cd({ args = { \"/home/dev\" }})\n\nlocal bufnr = vim.api.nvim_create_buf(true, false)\nvim.api.nvim_buf_set_name(bufnr, \"Test Buffer\")\n\nvim.bo[bufnr].buftype = \"nofile\"\nvim.bo[bufnr].filetype = \"unknown\"\n\nvim.cmd.tcd({ args = { \"/home/dev/.cache\" }})\nvim.api.nvim_buf_call(bufnr, function()\n    vim.print(vim.fn.expand(\"%\"))\n    vim.print(vim.fn.expand(\"%:p\"))\nend)\nvim.print(vim.api.nvim_buf_get_name(bufnr))\n\nvim.cmd.tcd({ args = { \"/home/dev/.local\" }})\nvim.api.nvim_buf_call(bufnr, function()\n    vim.print(vim.fn.expand(\"%\"))\n    vim.print(vim.fn.expand(\"%:p\"))\nend)\nvim.print(vim.api.nvim_buf_get_name(bufnr))\n```\n\nnvim -u test.lua\n\n```txt\nTest Buffer\n// tab working directory is changed to .cacheat this point\n/home/dev/.cache/Test Buffer <- this comes from expand\n/home/dev/Test Buffer <- this comes from vim.api.nvim_buf_get_name\n// tab working directory is changed to .local at this point\nTest Buffer\n/home/dev/.local/Test Buffer <- this comes from expand\n/home/dev/Test Buffer <- this comes from vim.api.nvim_buf_get_name\n```\n\n### Expected behavior\n\nI would expect vim.api to correctly respect the current directory for non file buffers and expand the name against it, i.e like expand does.\n\n### Nvim version (nvim -v)\n\n10.0.4\n\n### Vim (not Nvim) behaves the same?\n\nN/A\n\n### Operating system/version\n\nUbuntu 22\n\n### Terminal name/version\n\nalacritty\n\n### $TERM environment variable\n\nalacritty\n\n### Installation\n\nnix",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This applies to `getbufinfo()` too:\n```lua\nvim.cmd.cd({ args = { \"~\" }})\n\nlocal bufnr = vim.api.nvim_create_buf(true, false)\nvim.api.nvim_buf_set_name(bufnr, \"Test Buffer\")\n\nvim.bo[bufnr].buftype = \"nofile\"\nvim.bo[bufnr].filetype = \"unknown\"\n\nvim.cmd.tcd({ args = { \"~/.cache\" }})\nvim.api.nvim_buf_call(bufnr, function()\n    vim.print(vim.fn.expand(\"%\"))\n    vim.print(vim.fn.expand(\"%:p\"))\nend)\nvim.print(vim.fn.getbufinfo(bufnr)[1].name)\n\nvim.cmd.tcd({ args = { \"~/.local\" }})\nvim.api.nvim_buf_call(bufnr, function()\n    vim.print(vim.fn.expand(\"%\"))\n    vim.print(vim.fn.expand(\"%:p\"))\nend)\nvim.print(vim.fn.getbufinfo(bufnr)[1].name)\n```",
            "created_at": "2025-03-20T23:04:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/33010#issuecomment-2741850964",
            "id": 2741850964,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33010",
            "node_id": "IC_kwDOAPphoM6jbVNU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2741850964/reactions"
            },
            "updated_at": "2025-03-20T23:04:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2741850964",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I am mostly concerned about correctness, there are a lot of places in the neovim ecosystem and the built in lsp client and utilities,  that are using the `get_name` api, instead of `expand(%)`, the way I found this issue is because I was using `vim.uri_from_bufnr`, had to change to `vim.uri_from_fname` and it was very tedious process to realize what was going on. So here is another issue, I have added a few `set_name` calls, which seem to create new buffers, ls now shows that the rename actually created new buffers, instead of modifying the one I am setting the name for.... Probably becaue internally that buffer no longer exists with the actual name that was set but is like /{cwd}/{name}\n\nAlso the fact that it picks the current cwd, thatever it is, and prepends that to the name seems to be verified, the set_name being called after the calls to tcd, now have the full names of those buffers include the most recent working directory that was set before set_name was called. Which is even more confusing and can lead to nasty issues.\n\n```lua\nvim.cmd.edit({ args = { \"~/repro.lua\" }})\nvim.cmd.cd({ args = { \"~\" }})\n\nlocal bufnr = vim.api.nvim_create_buf(true, false)\nvim.api.nvim_buf_set_name(bufnr, \"Test Buffer\")\n\nvim.bo[bufnr].buftype = \"nofile\"\nvim.bo[bufnr].filetype = \"unknown\"\n\nvim.cmd.tcd({ args = { \"~/.cache\" }})\nvim.api.nvim_buf_call(bufnr, function()\n    vim.print(vim.fn.expand(\"%\"))\n    vim.print(vim.fn.expand(\"%:p\"))\nend)\nvim.print(vim.api.nvim_buf_get_name(bufnr))\nvim.api.nvim_buf_set_name(bufnr, \"relative-name\")\nvim.print(vim.api.nvim_buf_get_name(bufnr))\n\nvim.print(vim.fn.expand(\"%\"))\nvim.print(vim.fn.expand(\"%:p\"))\nvim.api.nvim_buf_get_name(0)\n\nvim.cmd.tcd({ args = { \"~/.local\" }})\nvim.api.nvim_buf_set_name(bufnr, \"relative-name2\")\nvim.api.nvim_buf_call(bufnr, function()\n    vim.print(vim.fn.expand(\"%\"))\n    vim.print(vim.fn.expand(\"%:p\"))\nend)\nvim.print(vim.api.nvim_buf_get_name(bufnr))\n\nvim.print(vim.fn.expand(\"%\"))\nvim.print(vim.fn.expand(\"%:p\"))\nvim.print(vim.api.nvim_buf_get_name(0))\n\nvim.cmd.cd({ args = { \"~\" }})\nvim.print(vim.fn.expand(\"%\"))\nvim.cmd.ls({ bang = true })\n```\n\nI am not quite sure if get_name should return anything different than what the buffer was created with. I would expect a behavior that would `do as i say`\n\n```lua\n-- really do not want to do this ......... just because expand seems to be acting more correctly and be more reliable in general\nvim.api.nvim_buf_get_name = function(bufnr)\n    local name;\n    vim.api.nvim_buf_call(bufnr, function()\n        name = vim.fn.expand(\"%:p\")\n    end)\n    return name\nend\n```\nI ",
            "created_at": "2025-03-21T04:33:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/33010#issuecomment-2742236121",
            "id": 2742236121,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33010",
            "node_id": "IC_kwDOAPphoM6jczPZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2742236121/reactions"
            },
            "updated_at": "2025-03-21T04:51:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2742236121",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There is another problem: a buffer can be shown in multiple windows, which can have different working directories. So even if `nvim_buf_get_name` uses the current working directory instead of the initial one for buffers with relative paths, what problem does it solve?",
            "created_at": "2025-03-21T05:23:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/33010#issuecomment-2742325606",
            "id": 2742325606,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33010",
            "node_id": "IC_kwDOAPphoM6jdJFm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2742325606/reactions"
            },
            "updated_at": "2025-03-21T05:24:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2742325606",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yeah, that would pose a different issue. So from what i can understand, vim initially appends the current working diretory to any buffer which it considers is having a relative path/name, it does not fstat or make any differentiation between buffers we create for scratch use or actual files on the file system. I think this is maybe okay, it is just that we have to in that case document this very thoroughly and make sure that these internal implementation details are well defined in the docs.\n\nWhat is somewhat inconsistent is the example above i showed with using `set_name`, which every API user would expect to just change the name of the buffer, to the raw name you give it, however since vim treats relative and absolute buffer names/paths differently, it would create a new buffer, meaning the old buffer number / id reference is no longer valid, not only that it is happening silently, (does it copy the content of the orginal buffer into the new one ?). Those inconsistencies are what is worrying me.",
            "created_at": "2025-03-21T07:22:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/33010#issuecomment-2742554097",
            "id": 2742554097,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33010",
            "node_id": "IC_kwDOAPphoM6jeA3x",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2742554097/reactions"
            },
            "updated_at": "2025-03-21T07:22:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2742554097",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> there are a lot of places in the neovim ecosystem and the built in lsp client and utilities, that are using the `get_name` api, instead of `expand(%)`, the way I found this issue is because I was using `vim.uri_from_bufnr`, had to change to `vim.uri_from_fname` and it was very tedious process to realize what was going on\n\nWhile you have this \"mentally loaded\", are there some documentation tweaks you can suggest/PR which will help clarify things? And internally, are there places in our LSP code that should be changed?",
            "created_at": "2025-03-21T09:53:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/33010#issuecomment-2742866042",
            "id": 2742866042,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33010",
            "node_id": "IC_kwDOAPphoM6jfNB6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2742866042/reactions"
            },
            "updated_at": "2025-03-21T09:53:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2742866042",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Internally i think it should be fine,as far as i know. As long as the internal lsp client implementation does not query relative type-path buffers for their uri and sends that to the language server or whatever.\n\n```txt\nnvim_buf_set_name({buffer}, {name})                      *nvim_buf_set_name()*\n    Sets the full file name for a buffer, like |:file_f|\n\nnvim_buf_get_name({buffer})                              *nvim_buf_get_name()*\n    Gets the full file name for the buffer\n```  \n\nfile_f mentions that a new unlisted buffer will be created to hold the old name, the new buffer is correctly renamed, the bufnr/ID is correctly preserved, so my comment from above about `set_name` can be ignored. \n\n`Sets the full file name` - however this is not quite right, because it does not really set the full file name, for relative buffer/file names it sets the name sure, but the name is also preprended with the currentworking directory, while `Gets the full file name for the buffer` - this one is fine i think, it does always return the full `absolute` file name that includes the working directory under which the buffer's name was set (if it was relative file name). So my suggestion would be to slightly modify the docs for those two methods, to mention that working with buffers with `relative` file names are affected by the currently active working directory when `setting` the name, and that when `getting` the name relative file name buffers are not guaranteed to return the `exact` same name set by `nvim_buf_set_name` if a relative file name was used to call that method. That probably affects other API methods like getbufinfo as @zeertzjq  mentioned, and maybe others but i am not aware.\n\n```txt\nexpand({string} [, {nosuf} [, {list}]])                               *expand()*\n\t\tExpand wildcards and the following special keywords in\n\t\t{string}.  'wildignorecase' applies.\n```\n\nFor expand, it would be nice to mention that maybe in its docs, or the get/set_name docs, that `expand` is really not a replaement for the vim.api.nvim_buf_get_name method. It serves a different purpose, but i believe most people, me included have always conflated the usage of those two assuming to be the same thing, one just being the nvim API the other being the vim api\n\n```txt\nbufname([{buf}])                                                     *bufname()*\n\t\tThe result is the name of a buffer.  Mostly as it is displayed\n\t\tby the `:ls` command, but not using special names such as\n\t\t\"[No Name]\".\n```\n\nbufname brings some more confusion since, unlike the others it returns kind of an intermediate weird `third state`, (see below) in this case calling it would indeed just return as it says the `string displayed by ls`, most of the time, but not always exactly...\n\n```lua\nvim.api.nvim_buf_get_name = function(bufnr)\n    local name;\n    vim.api.nvim_buf_call(bufnr, function()\n        name = vim.fn.expand(\"%:p\")\n    end)\n    return name\nend\n\nvim.cmd.edit({ args = { \"~/repro.lua\" }})\nvim.cmd.cd({ args = { \"~\" }})\n\nlocal bufnr = vim.api.nvim_create_buf(true, false)\nvim.api.nvim_buf_set_name(bufnr, \"Test Buffer\")\n\nvim.print(bufnr)\nvim.bo[bufnr].buftype = \"nofile\"\nvim.bo[bufnr].filetype = \"unknown\"\n\nvim.cmd.tcd({ args = { \"~/.cache\" }})\nvim.api.nvim_buf_call(bufnr, function()\n    vim.print(vim.fn.expand(\"%\"))\n    vim.print(vim.fn.expand(\"%:p\"))\nend)\nvim.print(vim.fn.bufname(0))\nvim.print(vim.fn.bufname(bufnr))\nvim.print(vim.api.nvim_buf_get_name(bufnr))\n\nvim.cmd.tcd({ args = { \"~/.local\" }})\nvim.api.nvim_buf_set_name(bufnr, \"relative-name\")\nvim.api.nvim_buf_call(bufnr, function()\n    vim.print(vim.fn.expand(\"%\"))\n    vim.print(vim.fn.expand(\"%:p\"))\nend)\nvim.print(vim.fn.bufname(0))\nvim.print(vim.fn.bufname(bufnr))\nvim.print(vim.api.nvim_buf_get_name(bufnr))\n\nvim.cmd.tcd({ args = { \"~/.config\" }})\nvim.cmd.ls({ bang = true })\n```\n\nThis is even more confusing, **the calls to bufname return the actual buffer name set above with the calls to `set_name`, And for the actual file representing the repro.lua file, it returns the full path....** also note that before the ls i change the current working directory, now the output of this shows\n\n```txt\n  1 %a   \"~/repro.lua\"                  line 1\n  2  h   \"relative-name\"                line 0\n  3u     \"~/Test Buffer\"                line 1\n```\n\nTest Buffer initally was set_name'd when we were in the `home directory`, however `relative-name` was set_name'd under the `.local` current directory, before ls we go to a third directory `.config` yet the output of ls shows only \"relative-name\", while for the `Test Buffer`, it does show `~/`\n\nSo to summarize we have \n\n```lua\nvim.print(vim.fn.expand(\"%\")) - only the file name\nvim.print(vim.fn.expand(\"%:p\")) - expanded against the current working directory\nvim.print(vim.fn.bufname(0)) - the absolute and relative file name, this seems to be mostly what i would have expected buf_get_name to do, seems unaffected by the inital state when the buffer was created, or calls to set_names were made, unlike the result of buf_get_name\nvim.print(vim.api.nvim_buf_get_name(bufnr)) - always absolute file name, affected by the currentworking directory at the moment set_name is called.\n```\n",
            "created_at": "2025-03-21T13:09:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/33010#issuecomment-2743321738",
            "id": 2743321738,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33010",
            "node_id": "IC_kwDOAPphoM6jg8SK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2743321738/reactions"
            },
            "updated_at": "2025-03-21T13:21:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2743321738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33010/comments",
    "created_at": "2025-03-20T15:30:49Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33010/events",
    "html_url": "https://github.com/neovim/neovim/issues/33010",
    "id": 2935881250,
    "labels": [
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "wrong behavior inherited from vim",
            "id": 154310492,
            "name": "bug-vim",
            "node_id": "MDU6TGFiZWwxNTQzMTA0OTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-vim"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33010/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6u_f4i",
    "number": 33010,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33010/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33010/timeline",
    "title": "expand and nvim_buf_get_name do not behave the same for non file buffers",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-03-26T12:46:29Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33010",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
        "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
        "followers_url": "https://api.github.com/users/asmodeus812/followers",
        "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
        "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/asmodeus812",
        "id": 15955811,
        "login": "asmodeus812",
        "node_id": "MDQ6VXNlcjE1OTU1ODEx",
        "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
        "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
        "repos_url": "https://api.github.com/users/asmodeus812/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/asmodeus812",
        "user_view_type": "public"
    }
}