{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "# Problem\r\n\r\nCurrent situation: Nvim ships a few parsers (C, Lua, vimdoc, vimscript) in its runtime. If user wants more parsers they must build the parser and put it on their 'runtimepath' , or use a project like https://github.com/nvim-treesitter which tries to automatically build parsers on the user's machine.\r\n\r\nNvim can't ship hundreds of parsers in its runtime because \r\n\r\n1. the total file size approaches gigabytes (GB) \r\n    - partially because of a known treesitter issue for some parsers: https://github.com/tree-sitter/tree-sitter/issues/1799\r\n    - partially because of the sheer number of parsers (hundreds)\r\n2. undue burden on package maintainers\r\n2. updating parsers should not require updating Nvim itself?\r\n\r\n### Ideal case\r\n\r\nIdeally, tree-sitter upstream would solve some problems for all tree-sitter consumers by:\r\n\r\n- provide makefiles\r\n- introspectible parser version that is set through `tree-sitter generate`\r\n- parser authors maintaining their own queries and bumping said version every time a parser update requires changes to them\r\n\r\n# Potential Solutions\r\n\r\n## Do nothing\r\n\r\n- Do nothing, except \"Guidance\": User should install per-language plugins. Plugin authors should build them.\r\n- Continue to outsource the problem to https://github.com/nvim-treesitter\r\n    - Similar to https://github.com/neovim/nvim-lspconfig\r\n    - **Problem:** maintenance burden, doesn't scale?\r\n\r\n## Distribute queries\r\n\r\nThe _main_ problem is lack of query and parser versioning.\r\n\r\n- Ship queries, but not parsers. Queries are relatively tiny text files.\r\n    - **Problem:** parsers and queries are tightly coupled, so a new parser version could break an existing query.\r\n        - tree-sitter upstream does not provide tools that could help us (like parser introspection, query introspection (version or metadata))\r\n- Enforce versioned parser names\r\n    - Problem: how?\r\n    - Right now, we only have the commit hash => can't reason about version _range_.\r\n\r\n## Distribute parsers (.so/.dll)\r\n\r\n- Develop CI that builds .so/.dll files for every OS. Then Nvim can fetch those on-demand.\r\n    - Benefit: useful for all text editors, not just Nvim.\r\n    - Problem: Where to put (200 * 3) build artifacts? Could use [Github packages](https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages) like homebrew? \r\n    - **Problem:** similar maintenance burden as nvim-treesitter.\r\n        - Mitigation: strictly refuse to support parsers that don't easily build.\r\n            - Users to nudge the parser maintainer to \"fix\" their build steps.\r\n- Develop CI that builds \"universal\" libs via [cosmopolitan c](https://github.com/jart/cosmopolitan)\r\n    - Problem: \"fat\" libraries are costly: TS `.so` files are 90%+ data and 10% actual code (just the scanner part). Converting that 10% to WASM is less invasive.\r\n- Integrate nvim-treesitter's logic for \"build the parser locally and put it into rtp\"\r\n    - Benefit: gives us a \"happy path\" answer for users to avoid needing nvim-treesitter.\r\n    - **Problem:** Nvim becomes a package manager, which is a slippery slope.\r\n        - Mitigation: strictly refuse to support anything but the happy path.\r\n            - Don't try to find compilers in weird places.\r\n            - Don't support configuration.\r\n    - **Problem:** maintenance burden: many parsers have quirky build steps! May require C++ compiler.\r\n        - Mitigation: strictly refuse to support parsers that don't easily build.\r\n            - Users to nudge the parser maintainer to \"fix\" their build steps.\r\n        - Alternative: distribute [zig](https://ziglang.org/) binary as a compiler and use that as the toolchain to build on the user's machine.\r\n- Outsource the problem to installers like [mason](https://github.com/williamboman/mason.nvim).\r\n- âœ… Wait for upstream to [support WASM parsers](https://github.com/tree-sitter/tree-sitter/pull/1864)\r\n    - https://github.com/neovim/neovim/pull/28415",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> Nvim can't ship hundreds of parsers in its runtime because\r\n> the total file size approaches gigabytes (GB)\r\n\r\nThat's not entirely true. Shipping all parsers of nvim-treesitter https://github.com/nvim-treesitter/nvim-treesitter/pull/3688 ~150 requires depending on OS from 9 to 15MB. Helix ships with all of its parsers in its release https://github.com/helix-editor/helix/releases The linux release is 10.6MB big. But parsers will inflate to >100MiB when decompressed (binaries have a very repetitive structure). I had the idea for a long time to have parsers compressed on disk and only decompress when needed. So that nvim could transparently load  compressed parsers (Since `dlopen` from memory is a big complicated, you'd probably create a tempfile for that). This is without any judgement whether this is good idea just a experiment of mine.\r\n\r\n> Distributing parsers (.so/.dll)\r\n\r\nMaking parsers distributable is since a long time on tree-sitters 1.0 list https://github.com/tree-sitter/tree-sitter/issues/930. It would be great if most of the challenges you're mentioning could be solved by https://github.com/tree-sitter providing infrastructure to parser repos so that editors can consume them. Offering release workflows for parser repos was one of the ideas (could be parsers or parser+queries). Parser repos could offer dedicated editor specific queries.\r\n\r\nI discussed with @clason to move more maintenance of queries out of nvim-treesitter to parser repos https://github.com/nvim-treesitter/nvim-treesitter/pull/4279#issuecomment-1435275654. Of course, this only works for repositories whose maintainer care about Neovim support. I was thinking as a first step to at least to have the built-in parsers vim/lua/help\r\n\r\n> Could use [Github packages](https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages) like homebrew?\r\n\r\nIt seems that at the moment, GH packages only supports container images, Ruby gems, pip packages, cargo crates. I suspect homebrew might use Ruby gems. I didn't find a way to store versioned binary blobs without the need of a package manager (might also be missing knowledge by me). Since tree-sitter is associated with GH, they might extend this to support tree-sitter parsers or plan binary blobs with versions and meta-data.\r\n\r\nInstallation via curl would be my favorite. If the tree-sitter organization could standardize parser packages somehow with a central registry, then Neovim could provide a API function that curls a parser given it's name, version tag and the current OS/arch combination. Contributors to Neovim, Helix, Emacs with good ideas will probably need to get active to contribute to solution to avoid having to much complexity in editor repos or end-users machines. On the long run the installer logic in nvim-treesitter should become obsolete.\r\n\r\nEDIT: https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:ae5d8e9148068e001b5ca7bbc2aa8663aa13b9995245f7655772725add67454c?se=2023-02-19T14%3A20%3A00Z&sig= these URLs looks like homebrew is using the container registry storage to store binary blobs.\r\n",
            "created_at": "2023-02-18T14:40:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/22313#issuecomment-1435691063",
            "id": 1435691063,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22313",
            "node_id": "IC_kwDOAPphoM5Vkug3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1435691063/reactions"
            },
            "updated_at": "2023-02-19T14:13:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1435691063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7189118?v=4",
                "events_url": "https://api.github.com/users/theHamsta/events{/privacy}",
                "followers_url": "https://api.github.com/users/theHamsta/followers",
                "following_url": "https://api.github.com/users/theHamsta/following{/other_user}",
                "gists_url": "https://api.github.com/users/theHamsta/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theHamsta",
                "id": 7189118,
                "login": "theHamsta",
                "node_id": "MDQ6VXNlcjcxODkxMTg=",
                "organizations_url": "https://api.github.com/users/theHamsta/orgs",
                "received_events_url": "https://api.github.com/users/theHamsta/received_events",
                "repos_url": "https://api.github.com/users/theHamsta/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theHamsta/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theHamsta/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theHamsta",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Just to make this obvious:\r\n\r\n1. Much of this is an issue for all editors using tree-sitter (including Zed), so the way forward here is definitely more coordination with other editors and with upstream. (This includes capture names so we can use upstream highlight queries; custom stuff like `@conceal` and `@spell` can live in separate query extension files.)\r\n2. **But** Neovim is pretty unique in treating parsers/queries as user-swappable runtime files rather than fixed parts of the editor release, so some difficulties are our own and may need custom solutions; the challenge will be to minimize those.",
            "created_at": "2023-02-18T15:46:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/22313#issuecomment-1435703489",
            "id": 1435703489,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22313",
            "node_id": "IC_kwDOAPphoM5VkxjB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1435703489/reactions"
            },
            "updated_at": "2023-02-18T15:49:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1435703489",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Plan\r\n\r\nNotes on treesitter plan (\"migration from legacy vim syntax\") from chat with @clason :\r\n\r\n## Short-term (around 0.10):\r\n\r\n> - we already have treesitter highlighting by default for query files\r\n> - we can enable treesitter highlighting by default for vimdoc files, and possibly for Lua files\r\n> - we could default foldexpr to treesitter folding for filetypes with a parser\r\n> - I wouldn't go further yet.\r\n\r\n##  Medium-term (around 0.11):\r\n\r\n- nvim-treesitter 1.0 is nearly in a shape that we could seriously discuss (after adding [vim.async](https://github.com/neovim/neovim/issues/19624) and [vim.download](https://github.com/neovim/neovim/pull/23586)) using that as the \"blessed\" parser installation method.\r\n- Performance: async parsing https://github.com/neovim/neovim/pull/22420\r\n\r\n## Long-term (1-2 years, _not_ 3+ years...):\r\n\r\n- Fully switch to treesitter: vim upstream runtime files are mostly ignored.\r\n    - We should not spend time thinking about migrating upstream files from vim9script, except specific critical cases. (Basically never for \"syntax\" files.)\r\n- Performance issues: workaround by providing an auto-degraded mode which disables slow features if the file is too big / long lines / etc.\r\n- Work on \"bridge\" for `:syntax` and friends. They are still useful for ad-hoc highlights, matching, etc. We just don't want to care about the treadmill of upstream vim9script runtime files.\r\n    - Better composability (example: running legacy syntax for plugin features without legacy highlighting).",
            "created_at": "2023-07-01T13:54:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/22313#issuecomment-1615927109",
            "id": 1615927109,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22313",
            "node_id": "IC_kwDOAPphoM5gURdF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 4,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1615927109/reactions"
            },
            "updated_at": "2023-07-01T14:05:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1615927109",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Wait for upstream to [support WASM parsers](https://github.com/tree-sitter/tree-sitter/pull/1864)\r\n\r\nIt kind of seems to me if you are looking it from a first principles angle, WASM is the best solution. A big part of the Vim/Neovim ecosystem (and its longevity) is the ability to extend the editor and tying tree-sitter files to the distribution will essentially turn some languages into first class citizens while custom plugins are second-class. While other newer text editors are using tree-sitter too, I would imagine Neovim has a *much* larger user base today with users with all sorts of odd needs and requirements.\r\n\r\nBuilding and maintaining your own .so/.dll/.dylib (please don't forget macOS :P) for all kinds of platforms is also going to be a lot of one-time and also ongoing maintenance work. It also means whoever wants to make their own tree-sitter plugins would need to do the same thing if they don't want their users to compile things themselves.\r\n\r\nLoading custom binaries also have big security ramifications. Granted, Vim plugins are also pretty insecure because the large API attack vector, but I'm not sure if I would feel comfortable downloading random .so files from a GitHub repository with 10 stars, but I would imagine I feel much better if it's a sandboxed environment (e.g. WASM).\r\n\r\nWASM is definitely more work than loading a dynamic lib and calling it a day though, and I would imagine the runtime performance needs to be validated. Just saying that something like WASM seems like it should be the end goal.",
            "created_at": "2023-09-03T23:40:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/22313#issuecomment-1704436712",
            "id": 1704436712,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22313",
            "node_id": "IC_kwDOAPphoM5ll6Po",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1704436712/reactions"
            },
            "updated_at": "2023-11-25T14:28:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1704436712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1217449?v=4",
                "events_url": "https://api.github.com/users/ychin/events{/privacy}",
                "followers_url": "https://api.github.com/users/ychin/followers",
                "following_url": "https://api.github.com/users/ychin/following{/other_user}",
                "gists_url": "https://api.github.com/users/ychin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ychin",
                "id": 1217449,
                "login": "ychin",
                "node_id": "MDQ6VXNlcjEyMTc0NDk=",
                "organizations_url": "https://api.github.com/users/ychin/orgs",
                "received_events_url": "https://api.github.com/users/ychin/received_events",
                "repos_url": "https://api.github.com/users/ychin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ychin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ychin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ychin",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/22313/comments",
    "created_at": "2023-02-18T12:48:38Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/22313/events",
    "html_url": "https://github.com/neovim/neovim/issues/22313",
    "id": 1590335796,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "e6e6e6",
            "default": false,
            "description": "packaging and distributing Nvim to users",
            "id": 124686703,
            "name": "distribution",
            "node_id": "MDU6TGFiZWwxMjQ2ODY3MDM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/distribution"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "issue needs attention from an expert, or PR proposes significant changes to architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/22313/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5eypk0",
    "number": 22313,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/22313/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/22313/timeline",
    "title": "treesitter distribution strategy (tree-sitter)",
    "updated_at": "2025-01-17T15:32:23Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/22313",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}