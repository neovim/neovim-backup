{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "## Problem\n\nCan't easily show an animated \"spinner\" in statusline.\n\n## Expected behavior\n\n1. provide `vim.iter.cycle()` (do this first, before the next items)\n    - generates a result each time it is called, so for example can be used to animate from a series of chars like `⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏`\n    - open questions: what about the \"timer\" aspect?\n        - start by providing sample code\n        - see if we need `vim.ui.spinner()` or some other abstraction\n2. if needed after `vim.iter.cycle`, provide higher-level interface like `vim.ui.spinner()` which has a default spinner animation `⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏`\n    - uses `vim.iter.cycle()` internally\n    - open question: If `vim.ui.spinner()` is a generator/coroutine, it will \"just work\" every time statusline is refreshed, but will look random because the \"refresh rate\" of 'statusline' is not fixed.\n\n## Open questions\n\n- is there existing precedent for animating a statusline? requires setting the \"refresh rate\" of statusline.\n\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This could maybe be something like a `vim.iter.cycle({\"⠋\", ...})` to create an infinite iterator where one gets the `next` on each refresh. At least that's how I do spinners in other languages.",
            "created_at": "2025-06-18T16:17:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/34562#issuecomment-2984893583",
            "id": 2984893583,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34562",
            "node_id": "IC_kwDOAPphoM6x6dyP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984893583/reactions"
            },
            "updated_at": "2025-06-18T16:17:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984893583",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Provide something like vim.ui.spinner() which generates an animation frame each time it is called, using chars like ⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏.\n\nNeed to keep in mind if there is more than one spinner in use at one time. Creating an iterator makes more sense with this considered.",
            "created_at": "2025-06-19T18:02:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/34562#issuecomment-2988822787",
            "id": 2988822787,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34562",
            "node_id": "IC_kwDOAPphoM6yJdED",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2988822787/reactions"
            },
            "updated_at": "2025-06-19T18:02:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2988822787",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Timing of the delay between the steps can also be useful, as it allows adjusting different type of easing (like \"slow start, quick end\", etc.). So maybe somehow baking in time delays might be useful.\n\nMaybe something like this:\n\n```lua\n--- @class vim.ui.SpinnerStep\n--- @field char string Character to be displayed as snipper step.\n--- @field delay integer Amount of milliseconds to show this step (i.e. wait\n---   before showing next step).\n\n--- @class vim.ui.SpinnerOpts\n--- @field reverse boolean Whether to reverse from last to first before repeating a cycle.\n\n--- @class vim.ui.Spinner\n--- @field start fun(self: vim.ui.Spinner) Start spinner.\n--- @field stop fun(self: vim.ui.Spinner) Stop spinner.\n\n--- @param steps vim.ui.SpinnerStep[]\n--- @param opts vim.ui.SpinnerOpts\n--- @param on_step fun(char: string, char_id: integer) Callback to be executed\n---   on every step update. Can include forcing `vim.cmd.redrawstatus()`, etc.\n--- @return vim.ui.Spinner\nfunction vim.ui.spinner(steps, opts, on_step)\n  -- TODO\nend\n```",
            "created_at": "2025-06-20T11:57:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/34562#issuecomment-2991242967",
            "id": 2991242967,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34562",
            "node_id": "IC_kwDOAPphoM6ySr7X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2991242967/reactions"
            },
            "updated_at": "2025-06-20T11:57:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2991242967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I hope this api to exist under (or at least highly integrated with) `vim.ui.progress` mentioned in #32537 so that we can have more generalized progress indicator methods with spinner provided as a first-party style.",
            "created_at": "2025-06-22T05:23:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/34562#issuecomment-2993946577",
            "id": 2993946577,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34562",
            "node_id": "IC_kwDOAPphoM6yc__R",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2993946577/reactions"
            },
            "updated_at": "2025-06-22T05:23:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2993946577",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/60088301?v=4",
                "events_url": "https://api.github.com/users/boltlessengineer/events{/privacy}",
                "followers_url": "https://api.github.com/users/boltlessengineer/followers",
                "following_url": "https://api.github.com/users/boltlessengineer/following{/other_user}",
                "gists_url": "https://api.github.com/users/boltlessengineer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/boltlessengineer",
                "id": 60088301,
                "login": "boltlessengineer",
                "node_id": "MDQ6VXNlcjYwMDg4MzAx",
                "organizations_url": "https://api.github.com/users/boltlessengineer/orgs",
                "received_events_url": "https://api.github.com/users/boltlessengineer/received_events",
                "repos_url": "https://api.github.com/users/boltlessengineer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/boltlessengineer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/boltlessengineer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/boltlessengineer",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I got curious to see how it might look like to have a spinner hard coded only in default statusline, but still have customizable shape (number of steps, text and delay of each step). Here is [the result](https://github.com/neovim/neovim/pull/34493#issuecomment-3001204986) (posted originally in PR for 'busy' option as implementation is hard coded towards the \"show spinner if 'busy' option is more than 0\" assumption).\n\nAt the moment I'd say it is possible to have a relatively concise implementation of a spinner in default statusline without any of `vim.iter.cycle()` and `vim.ui.spinner()`. Maybe re-framing the design to only have user-customizable spinner shape (as a global list option, for example) and delegating everything else spinner-related to implementations?",
            "created_at": "2025-06-24T17:02:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/34562#issuecomment-3001226165",
            "id": 3001226165,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34562",
            "node_id": "IC_kwDOAPphoM6y4xO1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3001226165/reactions"
            },
            "updated_at": "2025-06-24T17:02:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3001226165",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> it will \"just work\" every time statusline is refreshed, but will look random because the \"refresh rate\" of 'statusline' is not fixed.\n\nI have the impression that this is a bit the elephant of the room that needs discussion.\n\nThere can be different triggers for statusline updates (E.g. there are examples like `autocmd LspProgress * redrawstatus` in the docs.)\n\nThe problem is that with each additional trigger, the refresh rate increases. Which would make a spinner go faster. But worse - for cases like consuming progress messages, it will cycle through them more quickly, making it more difficult to read them before they disappear.\n\nOne way to deal with that could be to:\n\n- Ensure the statusline is redrawn at least with a given rate (and additional triggers get smoothed out somehow?)\n- Have a function/component that allows to adjust the updates bases on the current refresh rate, to have it decoupled from ^ similar to how in games one no longer moves faster just because you have more FPS. This could be decoupled from a spinner and applicable to any kind of queue-of-things which one might want to consume at a given rate. Like progress messages\n",
            "created_at": "2025-06-24T17:37:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/34562#issuecomment-3001329476",
            "id": 3001329476,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34562",
            "node_id": "IC_kwDOAPphoM6y5KdE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3001329476/reactions"
            },
            "updated_at": "2025-06-24T17:37:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3001329476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> * Ensure the statusline is redrawn at least with a given rate (and additional triggers get smoothed out somehow?\n\nThe previously [linked implementation](https://github.com/neovim/neovim/pull/34493#issuecomment-3001204986) of the default statusline component (that is intended to show spinner only if 'busy' is positive) does not depend how many progress updates there are. Each progress update might (or might not) increase the buffer's 'busy' number which only affects how long the spinner will be spinning.",
            "created_at": "2025-06-24T17:54:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/34562#issuecomment-3001394789",
            "id": 3001394789,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34562",
            "node_id": "IC_kwDOAPphoM6y5aZl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3001394789/reactions"
            },
            "updated_at": "2025-06-24T17:54:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3001394789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> At the moment I'd say it is possible to have a relatively concise implementation of a spinner in default statusline without any of `vim.iter.cycle()` and `vim.ui.spinner()`\n\nThat's a great reference point! Though imo the code clearly shows why it's non-trivial and worth having cycle()/etc.",
            "created_at": "2025-06-25T13:07:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/34562#issuecomment-3004708434",
            "id": 3004708434,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34562",
            "node_id": "IC_kwDOAPphoM6zGDZS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004708434/reactions"
            },
            "updated_at": "2025-06-25T13:07:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004708434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "As far as an implementation of `cycle()`, I'm assuming we'll want to try to implement all/some of the base methods of `Iter`.\n\nBut I would categorize them roughly into three buckets:\n#### has (mostly) well defined behavior\n- `next`\n- `peek`\n- `rev` (some wiggle room for exact behavior)\n- `take`\n- `skip`\n- `nth`\n- `map`\n- `enumerate`\n\n#### plausible but needs care\n- `find`\n- `any`\n- `all`\n- `filter`\n \nif predicate never triggers, will loop forever\n\n#### questionable\n- `each`\n- `join`\n- `slice`\n- `rpeek` \n- `pop`\n- `rskip`\n- `rfind`\n- `last`\n- `totable`\n- `flatten`\n\nthese can work if used with `take`. or we can choose to operate over the initially passed in list. we can also just choose to not implementation all of these.",
            "created_at": "2025-06-28T17:39:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/34562#issuecomment-3015889776",
            "id": 3015889776,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34562",
            "node_id": "IC_kwDOAPphoM6zwtNw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3015889776/reactions"
            },
            "updated_at": "2025-06-28T17:39:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3015889776",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/66286082?v=4",
                "events_url": "https://api.github.com/users/jamestrew/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamestrew/followers",
                "following_url": "https://api.github.com/users/jamestrew/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamestrew/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamestrew",
                "id": 66286082,
                "login": "jamestrew",
                "node_id": "MDQ6VXNlcjY2Mjg2MDgy",
                "organizations_url": "https://api.github.com/users/jamestrew/orgs",
                "received_events_url": "https://api.github.com/users/jamestrew/received_events",
                "repos_url": "https://api.github.com/users/jamestrew/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamestrew/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamestrew/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamestrew",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34562/comments",
    "created_at": "2025-06-18T14:46:02Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34562/events",
    "html_url": "https://github.com/neovim/neovim/issues/34562",
    "id": 3157175668,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "",
            "id": 606691254,
            "name": "has:plan",
            "node_id": "MDU6TGFiZWw2MDY2OTEyNTQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:plan"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "tabline, winbar, statuscolumn",
            "id": 3385615828,
            "name": "statusline",
            "node_id": "LA_kwDOAPphoM7JzGXU",
            "url": "https://api.github.com/repos/neovim/neovim/labels/statusline"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34562/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 725,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 634,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-06-30T13:22:58Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM68Lq10",
    "number": 34562,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 7,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 7,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34562/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34562/timeline",
    "title": "vim.iter.cycle(), vim.ui.spinner()",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-06-28T17:39:44Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34562",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}