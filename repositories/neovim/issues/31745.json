{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nCurrently, one of the barrier to keyboard-centric editor like Vim/Neovim is that there are too many keymappings to remember. And this is just worse when plugins also introduce their own mappings. \n\nBoth Emacs and Helix has something like [which-key.nvim](https://github.com/folke/which-key.nvim) built-in. I don't know since when has Helix implemented it, but this is [the commit that added the package to Emacs](https://github.com/emacs-mirror/emacs/commit/fa4203300fde6820a017bf1089652fb95759d68c#diff-21241810a84cc186b99d148f58af8e3725198fd1bdad73a9ed5c44bb93b52e88R264). \n\n\n### Expected behavior\n\nWhen users type a key, a floating window (like `which-key.nvim`) or a popup menu (like Helix) open to show users key bindings that start with the key(s) users have typed. \n\n#### How does it solve the problem?\n\nThis reduces the burden of having to remember too many keymaps, while also helping users remember them and use the keyboard more effectively. Also, it will make Neovim friendlier to beginners\n\nAn alternative would be just installing a plugin. But many people don't even know such plugins exist, or how they look like. \n\n#### Is it worth the cost?\n\nI believe so. As long as Neovim and keyboard-centric modal editing exists, the problem would still exists, and the plugin would always be valuable. \n\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "You are not addressing why `:map` (\"which-key at home\") is not sufficient(!) for the purpose of documentation and discoverability, and why such a (convenience?) feature would _need_ to be in core. It is _not_ a project goal to provide every feature out of the box -- the plugin ecosystem is one of the core value propositions of (Neo)Vim.",
            "created_at": "2024-12-27T11:46:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/31745#issuecomment-2563617469",
            "id": 2563617469,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31745",
            "node_id": "IC_kwDOAPphoM6YzbK9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 15,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 16,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2563617469/reactions"
            },
            "updated_at": "2024-12-27T11:48:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2563617469",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think `:map` only works with user-defined or plugin-defined mapping, right? It doesn't work with built-in mapping (defined by C core, I guess). For example, I want to delete a paragraph, but I can't remember the exact keymap for paragraph text object. Both `:map da` and `:map a` don't work. But if I use `which-key.nvim`, it can show me that the keybindings for `a paragraph` is `ap`. \n\nI think of `which-key.nvim` like cmdline-completion. Assume that `cmdline-autocompletion` doesn't work, I can still use `command` to search for the user command (yes, similar to `map`, `command` doesn't work with built-in command), for example `command Co`. The trick works, but it's so inconvenient compared to `<Tab>` completion. Not to say I think many people don't know these tricks. I didn't know that I can use `:map` to look for user keymaps until you told me (though I have used Neovim for a year and have written a few plugins), I thought it was to create new new keymappings only. \n\n> It is not a project goal to provide every feature out of the box\n\nI know that, and I agree with that. I just open an issue here to see the Neovim team's opinion, if it can be in scope, I can try to do something",
            "created_at": "2024-12-28T03:49:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/31745#issuecomment-2564159608",
            "id": 2564159608,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31745",
            "node_id": "IC_kwDOAPphoM6Y1fh4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564159608/reactions"
            },
            "updated_at": "2024-12-28T06:02:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564159608",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I understand your request. The request itself is very reasonable, and some text editors have it built-in, and other users would probably want it as well.\nThe issue with this feature is that it is difficult to implement.\nHave you ever seen the internal implementation of Vim/Neovim mappings?\nUnfortunately, Vim/Neovim mappings are implemented with a large number of `if`/`switch` statements and are not organized. In the first place, there is no \"method to get a list of built-in mappings\" internally at the moment.\nIt seems impossible to implement this without completely rewriting the core state transition part. That is very risky.",
            "created_at": "2024-12-28T06:00:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/31745#issuecomment-2564207217",
            "id": 2564207217,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31745",
            "node_id": "IC_kwDOAPphoM6Y1rJx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564207217/reactions"
            },
            "updated_at": "2024-12-28T17:12:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564207217",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\"which key\" is too narrow. I do think we want a \"search everything as-you-type\" kind of UI, similar to vscode's Command Palette. But that requires a fuzzy-finder UI.\n\nLong before we have that discussion, we should instead ship a [minimal plugin manager/fetcher](https://github.com/neovim/neovim/issues/20893), so that our \"getting started\" experience looks like:\n\n1. start Nvim\n2. add 1 line to your config\n3. type x-y-z to search all commands/mappings \n\n> Vim/Neovim mappings are implemented with a large number of if/switch statements and are not organized\n\nWe have a clear path to a 95% solution for that.\n\n- https://github.com/neovim/neovim/issues/19918 and related issues\n- `desc` fields of `nvim_create_user_command()`, `nvim_set_keymap()`",
            "created_at": "2024-12-28T17:13:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/31745#issuecomment-2564383401",
            "id": 2564383401,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31745",
            "node_id": "IC_kwDOAPphoM6Y2WKp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 11,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 11,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564383401/reactions"
            },
            "updated_at": "2024-12-28T17:15:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564383401",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31745/comments",
    "created_at": "2024-12-27T11:41:14Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31745/events",
    "html_url": "https://github.com/neovim/neovim/issues/31745",
    "id": 2760779340,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31745/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 285,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 339,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-07-04T21:53:41Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6kjiZM",
    "number": 31745,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 4,
        "-1": 9,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 13,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31745/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31745/timeline",
    "title": "Built-in which-key (whichkey) plugin",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:57:48Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31745",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
        "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
        "followers_url": "https://api.github.com/users/brianhuster/followers",
        "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
        "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/brianhuster",
        "id": 111893501,
        "login": "brianhuster",
        "node_id": "U_kgDOBqtb_Q",
        "organizations_url": "https://api.github.com/users/brianhuster/orgs",
        "received_events_url": "https://api.github.com/users/brianhuster/received_events",
        "repos_url": "https://api.github.com/users/brianhuster/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/brianhuster",
        "user_view_type": "public"
    }
}