{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Add an async call for RPCs by doing the following:\r\n\r\n```vim\r\n\" I would be okay with rpcasync or something similar as well.\r\n\" rpc start seems like I'm starting a new channel to me.\r\n\" Or we could use a jargony word like future or something,\r\n\" although I don't think that applies here\r\ncall rpcstart(channel, [\"method\", arg1, arg2], Callback)\r\ncall rpcwait({channel: [request_1, request_2], channel_2: [...]})\r\n```\r\n\r\nAn example usage would be something like:\r\n\r\n```vim\r\nlet channel_id = jobstart(\r\n        \\ ['nvim', '--embed'],\r\n        \\ {'rpc': v:true},\r\n      \\ )\r\n\r\nlet g:rpc_async_results = {}\r\n\r\n\" Callback gets invoked with channel_id, data, and request_id\r\n\" The order could be changed, but this more similarly resembles\r\n\" the order we find with (id, data, event), so I went with this first\r\nfunction! s:rpc_callback(channel_id, data, request_id) abort\r\n    let g:rpc_async_results[a:request_id] = a:data\r\nendfunction\r\n\r\n\" Assume this function is available to other neovim instance\r\n\" Pretend it does really difficult computation or something\r\n\" interacting with the system :)\r\nfunction! g:LongFunc(variable)\r\n    sleep 10\r\n    return 'hello ' . a:variable\r\nendfunction\r\n\r\nlet my_var = 'world'\r\nlet my_other_var = 'planet'\r\n\r\n\" Need a dictionary because rpc request ids are not unique\r\n\" between rpc connections, so we have to associate which\r\n\" ids we are waiting for\r\nlet requests = {\r\n      \\ channel_id: []\r\n      \\ }\r\n\r\n\" Send the neovim rpc connection an nvim_eval\r\n\" Tell it to evaluate a function with a local variable\r\nlet request_1 = rpcstart(\r\n      \\ channel_id,\r\n      \\ ['nvim_eval', 'g:LongFunc(' . my_var . ')'],\r\n      \\ function('s:rpc_callback')\r\n      \\ )\r\ncall add(requests, request_1)\r\n\r\n\" Do the same, except with a different function and variable\r\nlet request_2 = rpcstart(\r\n      \\ channel_id,\r\n      \\ ['nvim_eval', 'g:LongFunc(' . my_other_var . ')'],\r\n      \\ function('s:rpc_callback')\r\n      \\ )\r\ncall add(requests, request_2)\r\n\r\n\" Does not block before this\r\n\" Do other stuff here..\r\necho \"Wow! I'm not blocked!\"\r\n\r\n\" Blocks and waits for all the requests to be finished\r\ncall rpcwait(requests)\r\n\r\necho g:rpc_async_results[channel_id][request_1]\r\n\" hello world\r\n\r\necho g:rpc_async_results[channel_id][request_2]\r\n\" hello planet\r\n```\r\n\r\nThis could be used to make a pool of nvim processes do work for your \"editing\" nvim instance. I'd like to use this to interact with the system or using other VimL functions for a statusline for example. This way I could reach out and get information concurrently about git status, branch status, etc.\r\n",
    "closed_at": "2025-01-20T00:50:19Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "`rpcstart()` is already deprecated alias for jobstart so it shouldn't be used.\r\n\r\nAlso rather than forcing the user to keep track of which request belong to which channel, `rpcasync()` could just as well return unique numbers in a new series and keep track of the channel internally (alternatively return `[chan, req]` pairs and let `rpcwait()` take an array of such pairs). Similarly I suspect `g:rpc_async_results` would be a very common pattern, we could add a flag to `rpcasync()` to store the result and let `rpcwait()` return it.",
            "created_at": "2017-03-30T11:55:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/6398#issuecomment-290388766",
            "id": 290388766,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6398",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDM4ODc2Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/290388766/reactions"
            },
            "updated_at": "2017-03-30T11:55:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/290388766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I agree `rpcstart()` doesn't make very much sense. Do you have any other ideas? `rpcasync` was one that I thought.\r\n\r\nThe `[chan, req]` pair seems good to me.\r\n\r\nI would also be happy to have `rpcwait()` return a list or dictionary of results.",
            "created_at": "2017-03-30T14:17:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/6398#issuecomment-290424625",
            "id": 290424625,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6398",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDQyNDYyNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/290424625/reactions"
            },
            "updated_at": "2017-03-30T14:17:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/290424625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "What would be the correct way to use the promise / future language for this?\r\n\r\n```vim\r\n\" Get future\r\nlet future_1 = rpcfuture(channel, [\"method\", arg1, arg2], Callback)\r\n\r\n\" future could actually look like:\r\n\" { 'channel': channel, 'id': integer, 'callback': Callback, 'wait': CheckStatusCallback, 'result': v:null }\r\n\r\n\" Then you could do:\r\ncall future_1.wait()\r\n\r\n\" or\r\ncall rpcwait([future_1])\r\n\r\n\" and then:\r\nlet my_result = future_1.result\r\n\" where result gets populated after the waiting is done?\r\n```\r\n\r\nAs a side note, @brcolow said:  `@tjdevries I actually like the Promise/Future jargon`\r\n\r\nBtw, I'm reading up on libuv and how you to do this, so hopefully I'll get a PR up in the next week or so.",
            "created_at": "2017-03-31T21:37:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/6398#issuecomment-290836446",
            "id": 290836446,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6398",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDgzNjQ0Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/290836446/reactions"
            },
            "updated_at": "2017-03-31T21:38:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/290836446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Tracked in #8658, which has some considerations mentioned in https://github.com/neovim/neovim/issues/8658#issuecomment-401264339",
            "created_at": "2025-01-20T00:50:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/6398#issuecomment-2601115487",
            "id": 2601115487,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6398",
            "node_id": "IC_kwDOAPphoM6bCd9f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2601115487/reactions"
            },
            "updated_at": "2025-01-20T00:50:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2601115487",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/6398/comments",
    "created_at": "2017-03-29T22:33:32Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/6398/events",
    "html_url": "https://github.com/neovim/neovim/issues/6398",
    "id": 218029195,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "channels, RPC, msgpack",
            "id": 242522707,
            "name": "channels-rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/channels-rpc"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "futures/promises, async/await, concurrency, task pipelines",
            "id": 5683343649,
            "name": "async",
            "node_id": "LA_kwDOAPphoM8AAAABUsDxIQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/async"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/6398/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWUyMTgwMjkxOTU=",
    "number": 6398,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/6398/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "duplicate",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/6398/timeline",
    "title": "rpcasync(), rpcwait()",
    "updated_at": "2025-01-20T00:50:20Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/6398",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
        "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
        "followers_url": "https://api.github.com/users/tjdevries/followers",
        "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
        "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tjdevries",
        "id": 4466899,
        "login": "tjdevries",
        "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
        "organizations_url": "https://api.github.com/users/tjdevries/orgs",
        "received_events_url": "https://api.github.com/users/tjdevries/received_events",
        "repos_url": "https://api.github.com/users/tjdevries/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tjdevries",
        "user_view_type": "public"
    }
}