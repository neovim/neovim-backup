{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Actual behaviour\r\n\r\nNo easy way to get a list of recent file/buffer update times.\r\n\r\nThe shada file has information about recently accessed files (I'm not actually totally sure what is written here, there's marks and changes and some other stuff, but it appears you can extract some kind of recently accessed files list from it). On startup this is used to populate the v:oldfiles variable, which contains the filenames sorted in order of most recently accessed, but not the actual timestamps (as far as I'm aware) though presumably the timestamps seen in the shada file are used to order the oldfiles list.\r\n\r\nBy default, the shada information used to create oldfiles, is only updated on closing vim, or by doing so manually. Another ticket asked for this behaviour to be changed, but it seemed that actively updating the shada during use was seen as breaking vim compatability, and also something that could be easily done with a config, so not something that was taken forward: https://github.com/neovim/neovim/issues/9523\r\n\r\nNeovim also tracks update times for edited buffers, when the file is edited outside of neovim, it compares the timestamp, to alert users if the change happened after their neovim changes and offers options to load or overwrite. I'm not sure if there's any way to actually access these timestamps directly though.\r\n\r\nStartify, a plugin that lists your most recently updated files is mentioned in that neovim ticket about updating shada/oldfiles, and it appears it adds its own autocommand to keep the oldfiles list updated without waiting for vim to close (It's not clear to me if/how this affects what is written out to the shada at quit)\r\n\r\nTelescope Frecency, a plugin that tries to list your most frecently accessed files, reads oldfiles on initial install, but then creates it's own sqlite database to track file accesses (updating only once per session, as it buckets access by time, and any access in the previous 4 hours is scored the same). Note they also need to track repeated visits to a file, which a simple list of recently accessed files would not.\r\n\r\nI filed an issue with another Telescope plugin for switching projects (https://github.com/nvim-telescope/telescope-project.nvim) asking that the projects be sorted by the order in which the files within the project directory had been updated. I thought this would be possible via oldfiles, but the lack of timestamp, and the write on close behaviour meant the dev was looking at keeping their own project access timestamp, which would only be updated when their own tool is used to swap projects.\r\n\r\nThere are a few other projects doing things with Most Recently Updated, and most seem to either just use oldfiles, (which means some might work better if you happen to have Startify installed?) or invent their own thing. eg. Shougo/neomru.vim which writes to a file. \r\n\r\n### Expected behaviour\r\n\r\nI believe this information is already held by Neovim in some form, since it reads it at open and later updates it on close (though exactly what the spec for that stored information is I'm not sure), and would expect that an API to access it, in terms of an oldfiles style ordered list or even better with timestamps would be useful in many different circumstances. I'm not sure if the extra frecency requirments could be easily met if only the most recent timestamps are kept per file, but might be worth considering if it could be added with relative ease.\r\n\r\nSome of the objections to updating the shada in real time, were around temp buffers created behind the scenes polutting the data, so it might be worth considering some way to filter those out, either on adding info, or when retrieving it.\r\n\r\nI use neovim in the terminal, but I note that one of the MRU plugins I looked at added an \"open recent files\" menu to GVim, which seems like another potential use case I hadn't thought of (or rather the same use case, but in a different UI). It might be worth canvassing the authors of such plugins as they'd have the most experience of what works for this use case and what other uses it could be put to.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/14390/comments",
    "created_at": "2021-04-18T10:53:40Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/14390/events",
    "html_url": "https://github.com/neovim/neovim/issues/14390",
    "id": 860633110,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/14390/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU4NjA2MzMxMTA=",
    "number": 14390,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/14390/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/14390/timeline",
    "title": "add API for accessing timestamps of recently accessed files (combining shada and current buffers)",
    "updated_at": "2025-01-17T16:00:25Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/14390",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7288187?v=4",
        "events_url": "https://api.github.com/users/davidscotson/events{/privacy}",
        "followers_url": "https://api.github.com/users/davidscotson/followers",
        "following_url": "https://api.github.com/users/davidscotson/following{/other_user}",
        "gists_url": "https://api.github.com/users/davidscotson/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/davidscotson",
        "id": 7288187,
        "login": "davidscotson",
        "node_id": "MDQ6VXNlcjcyODgxODc=",
        "organizations_url": "https://api.github.com/users/davidscotson/orgs",
        "received_events_url": "https://api.github.com/users/davidscotson/received_events",
        "repos_url": "https://api.github.com/users/davidscotson/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/davidscotson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davidscotson/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/davidscotson",
        "user_view_type": "public"
    }
}