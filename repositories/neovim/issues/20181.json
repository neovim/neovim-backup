{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Feature already in Vim?\r\n\r\nno\r\n\r\n### Feature description\r\n\r\nIt is similar to what neovim has done with diagnostics. \r\n\r\nHere is one user scenario: \r\nSuppose codelens from lsp have `run test` for each test function. Plugins write can also add `debug test`, `view test result` codelens for unit tests; update the codelens signs based on test results or code coverage etc.\r\n\r\n![image](https://user-images.githubusercontent.com/1681295/189885920-86ad822c-3c8b-4331-976a-6c960176f6d3.png)\r\n\r\n\r\nThe idea is from vs-code. In vs code, codelens do not restrict to LSP codelens. Any plugins can register a codelens. E.g. code coverage, the beloved git lens (https://github.com/gitkraken/vscode-gitlens), vscode-go, rest-lens, version-lens, npm-info-lens etc\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "The low level API for code lens already kinda exists in the form of extmark/virtual-text.\r\nIs there a use-case where that isn't sufficient?\r\n\r\nAn alternative would be to follow the null-ls approach and hook in a in-process lsp server that provides additional lenses. With the recent changes to support TCP and decouple the transport, that approach is now fully supported.",
            "created_at": "2022-09-13T17:09:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1245701948",
            "id": 1245701948,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5KP-c8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1245701948/reactions"
            },
            "updated_at": "2022-09-13T17:10:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1245701948",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think for plugin authors to create an LSP server (similar to Null-ls) for none LSP features is a bit too much. \r\ntake vs-code codelens for example, any plugins can register a new codelens if they can provide the following codelens methods\r\n* get\r\n* provide\r\n* clear\r\n* resolve\r\n\r\nGive `debug go test` as an example. The plugin can scan the current buffer for all test functions. The `get` will return all test functions that can be `debug`.  `provide` will compose the debug instructions into a runable instruction/funcion-call list.  `resolve`  will update signs/virtual text once debug is running/complete.  `clear` will clean local parser result/cache once buffer is edited.\r\n \r\n\r\nWhat is missing in current lsp-codelens implementation:\r\nI can do similar things with lsp.codelens.on_codelens to inject `debug test` by doing\r\n* register my own on_codelens function\r\n* before call M.on_codelens, parse the current file and inject all `run test` instructions into the codelens results.   \r\n\r\n\r\nBut what if I have another codelens plugin that can run embedded SQL inside the current buffer? And another plugin that can validate URL in current buffer. How to chain results from different plugins?  Also, there are performance considerations plugin authors need to make sure their codelens are asynchronous. \r\n\r\n\r\n",
            "created_at": "2022-09-14T00:30:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1246086579",
            "id": 1246086579,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5KRcWz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1246086579/reactions"
            },
            "updated_at": "2022-09-14T00:30:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1246086579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1681295?v=4",
                "events_url": "https://api.github.com/users/ray-x/events{/privacy}",
                "followers_url": "https://api.github.com/users/ray-x/followers",
                "following_url": "https://api.github.com/users/ray-x/following{/other_user}",
                "gists_url": "https://api.github.com/users/ray-x/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ray-x",
                "id": 1681295,
                "login": "ray-x",
                "node_id": "MDQ6VXNlcjE2ODEyOTU=",
                "organizations_url": "https://api.github.com/users/ray-x/orgs",
                "received_events_url": "https://api.github.com/users/ray-x/received_events",
                "repos_url": "https://api.github.com/users/ray-x/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ray-x/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ray-x/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ray-x",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think for plugin authors to create an LSP server (similar to Null-ls) for none LSP features is a bit too much.\r\n\r\nIt doesn't take all that much. A basic server scaffolding looks like this:\r\n\r\n```lua\r\nlocal server = function(dispatchers)\r\n  local closing = false\r\n  return {\r\n    request = function(method, params, callback)\r\n      if method == 'initialize' then\r\n        callback(nil, {\r\n          capabilities = {\r\n            codeLensProvider = {}\r\n          }\r\n        })\r\n      elseif method == 'textDocument/codeLens' then\r\n        -- ...\r\n      end\r\n    end,\r\n    notify = function(...)\r\n    end,\r\n    is_closing = function() return closing end,\r\n    terminate = function()\r\n      if not closing then\r\n        closing = true\r\n        dispatchers.on_exit(0, 0)\r\n      end\r\n    end,\r\n  }\r\nend\r\nvim.lsp.start({ name = 'some-lsp', cmd = server })\r\n```\r\n\r\nIf you want to use code-lens to display additional information only you'd use `nvim_buf_set_extmark` directly.\r\nFor LSP codelens that can be resolved/executed you'd need lsp commands as well. I currently don't see an advantage of introducing a in-between abstraction that handles code-lens + lsp commands.\r\n\r\n\r\nKeep in mind that in general such functionality should go into a language server. That way other editors can also benefit from the functionality.\r\n",
            "created_at": "2022-09-14T14:28:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1246852472",
            "id": 1246852472,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5KUXV4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1246852472/reactions"
            },
            "updated_at": "2022-09-14T14:28:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1246852472",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "* Codelens appear way ahead of LSP codelens. In fact, most codelens in vs-code do not relate to LSP and the concept is so popular that MS brings it into LSP(and it why it named  `Code` lens). Also, MS maks vs-code LSP codelens an extension of codelens. Here is a post from vs-code 5 years ago regarding [codelens roundup](https://code.visualstudio.com/blogs/2017/02/12/code-lens-roundup)\r\n* Lots of requirements can be just one-liner (e.g. open URL codelens), I see no reason to write an LSP server for it (even if it can be only 20 lines of extra codes)\r\n* Execute codelens does not require lsp commands (it can be lsp commands though), as codelens do not relay on LSP in vs-code.\r\n* I can use set_extmark, but that makes it lack a central way to display and execute codelens actions. \r\n\r\n",
            "created_at": "2022-09-15T00:32:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1247434456",
            "id": 1247434456,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5KWlbY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1247434456/reactions"
            },
            "updated_at": "2022-09-15T00:44:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1247434456",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1681295?v=4",
                "events_url": "https://api.github.com/users/ray-x/events{/privacy}",
                "followers_url": "https://api.github.com/users/ray-x/followers",
                "following_url": "https://api.github.com/users/ray-x/following{/other_user}",
                "gists_url": "https://api.github.com/users/ray-x/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ray-x",
                "id": 1681295,
                "login": "ray-x",
                "node_id": "MDQ6VXNlcjE2ODEyOTU=",
                "organizations_url": "https://api.github.com/users/ray-x/orgs",
                "received_events_url": "https://api.github.com/users/ray-x/received_events",
                "repos_url": "https://api.github.com/users/ray-x/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ray-x/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ray-x/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ray-x",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">   get\r\n\r\n`nvim_buf_get_extmarks`\r\n>   provide\r\n\r\n`nvim_buf_set_extmarks`\r\n>   clear\r\n\r\n`nvim_buf_clear_namespace` or `nvim_buf_del_extmark`\r\n>   resolve\r\n\r\ncallback(s). It's a `clear` followed by a `set`, or you can save the `id` and call `set_extmarks` with it.\r\n\r\nThe execute command is a lookup with the current line/cursor followed by a request.\r\n\r\n> Also, MS maks vs-code LSP codelens an extension of codelens.\r\n\r\nThey do this for almost every LSP feature though, and they also write the spec, so...\r\n\r\n> Also, there are performance considerations plugin authors need to make sure their codelens are asynchronous.\r\n\r\nSure, but how does that change whether it's inside a 'lsp module' or not?\r\n\r\n----\r\n\r\nRelated https://github.com/neovim/neovim/issues/17511",
            "created_at": "2022-09-16T20:15:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1249774042",
            "id": 1249774042,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5Kfgna",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1249774042/reactions"
            },
            "updated_at": "2022-09-16T20:17:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1249774042",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
                "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
                "followers_url": "https://api.github.com/users/lvimuser/followers",
                "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
                "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lvimuser",
                "id": 109605931,
                "login": "lvimuser",
                "node_id": "U_kgDOBoh0Kw",
                "organizations_url": "https://api.github.com/users/lvimuser/orgs",
                "received_events_url": "https://api.github.com/users/lvimuser/received_events",
                "repos_url": "https://api.github.com/users/lvimuser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lvimuser",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I agree there are lots of ways to achieve the goal. e.g  get/set_extmarks. My plugin A can get extmarks of codelens and append on it, and my plugin B need to search it again and append on the result of plugin A and so on...... But what if plugin A decides to use its own namespace?  Do I need to double-check or mutex as plugins may set extmarks in an asynchronous way? What if plugin A reset its virtual text because states changed?\r\n\r\nReolve is simple, the only issue is I may need to bind different keys/commands to invoke different callbacks. In this case, what is the point in showing virtual text in the first place?\r\n\r\nAnd, if lots of plugins duplicate their codes we may need to ask if this is the correct way of doing things.\r\n\r\nBefore null-ls appeared, I used lots of prettier&diagnostic plugins, e.g. efm, ALE, formatter, prettiers to name a few. They work fine and did solve my problems. But was that the optimal way of doing things?\r\n\r\n\r\n\r\n",
            "created_at": "2022-09-17T01:04:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1249965883",
            "id": 1249965883,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5KgPc7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1249965883/reactions"
            },
            "updated_at": "2022-09-17T01:25:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1249965883",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1681295?v=4",
                "events_url": "https://api.github.com/users/ray-x/events{/privacy}",
                "followers_url": "https://api.github.com/users/ray-x/followers",
                "following_url": "https://api.github.com/users/ray-x/following{/other_user}",
                "gists_url": "https://api.github.com/users/ray-x/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ray-x",
                "id": 1681295,
                "login": "ray-x",
                "node_id": "MDQ6VXNlcjE2ODEyOTU=",
                "organizations_url": "https://api.github.com/users/ray-x/orgs",
                "received_events_url": "https://api.github.com/users/ray-x/received_events",
                "repos_url": "https://api.github.com/users/ray-x/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ray-x/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ray-x/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ray-x",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  But what if plugin A decides to use its own namespace?\r\n\r\nnvim_get_namespaces.",
            "created_at": "2022-09-17T03:23:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1249988071",
            "id": 1249988071,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5KgU3n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1249988071/reactions"
            },
            "updated_at": "2022-09-17T03:23:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1249988071",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> My plugin A [...], and my plugin B need to search it again and append on the result of plugin A and so on...... But what if plugin A decides to use its own namespace?\r\n\r\nI suppose each one should be self-contained (not aware of each other), handling their own namespace. There's also a `priority` option, which might be what you're looking for.\r\n\r\n> Resolve is simple, the only issue is I may need to bind different keys/commands to invoke different callbacks. In this case, what is the point in showing virtual text in the first place?\r\n> \r\n\r\nBind a single key with `vim.ui.select`, where each item corresponds to a plugin / set of lenses (you can also wrap `vim.codelens.run` / `vim.codelens.get`)?\r\n\r\n> And, if lots of plugins duplicate their codes we may need to ask if this is the correct way of doing things.\r\n\r\nI think it's a valid point, but this applies to the entire ecosystem...\r\n\r\n> Before null-ls appeared, I used lots of prettier&diagnostic plugins, e.g. efm, ALE, formatter, prettiers to name a few. They work fine and did solve my problems. But was that the optimal way of doing things?\r\n\r\nWouldn't `null-ls` then be a good alternative? It has `code actions`, `hover` and `completion` already.",
            "created_at": "2022-09-17T13:43:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1250074407",
            "id": 1250074407,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5Kgp8n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1250074407/reactions"
            },
            "updated_at": "2022-09-17T13:43:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1250074407",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
                "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
                "followers_url": "https://api.github.com/users/lvimuser/followers",
                "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
                "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lvimuser",
                "id": 109605931,
                "login": "lvimuser",
                "node_id": "U_kgDOBoh0Kw",
                "organizations_url": "https://api.github.com/users/lvimuser/orgs",
                "received_events_url": "https://api.github.com/users/lvimuser/received_events",
                "repos_url": "https://api.github.com/users/lvimuser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lvimuser",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > My plugin A [...], and my plugin B need to search it again and append on the result of plugin A and so on...... But what if plugin A decides to use its own namespace?\r\n> \r\n> I suppose each one should be self-contained (not aware of each other), handling their own namespace. There's also a `priority` option, which might be what you're looking for.\r\n\r\nSuppose I install 4 plugins on the same test function they serve different purposes\r\n* Run test function\r\n* Show function test coverage\r\n* Run coverage test\r\n* Debug test functions\r\n* Display function reference count\r\n* Show test result (pass/failed)\r\n\r\nIt is preferred they can be arranged like\r\n`Run|Debug|Coverage|Run Coverage|Debug|Called By xxxxx| Reference n of N|Passed/Failed`\r\nBut each field is independent and dynamic, the content could be of variable length.\r\nIt would be much easier to have a centralised way of control these.\r\n\r\n> Bind a single key with `vim.ui.select`, where each item corresponds to a plugin / set of lenses (you can also wrap `vim.codelens.run` / `vim.codelens.get`)?\r\n> \r\nHow about different plugins written by different authors, how about lazyloading?\r\n\r\n\r\n> \r\n> Wouldn't `null-ls` then be a good alternative? It has `code actions`, `hover` and `completion` already.\r\n\r\nIf all plugins need to register to `null-ls`, I think would be good to promote `null-ls` to first-class citizens. Also how about those still stick to plugins like `efm`. Should lens plugins register to `efm` as well? People stop using other lsp implementations because nvim-lsp is a first-class citizen of neovim.\r\n\r\nLast but not least. This requirement is a general requirement that shows hints for lines that meet the requirement and provide actions to it. It does not necessarily relate to LSP.  I do feel strange to see `git diff` appears in lsp action. \r\n",
            "created_at": "2022-09-18T02:07:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1250174441",
            "id": 1250174441,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5KhCXp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1250174441/reactions"
            },
            "updated_at": "2022-09-18T02:07:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1250174441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1681295?v=4",
                "events_url": "https://api.github.com/users/ray-x/events{/privacy}",
                "followers_url": "https://api.github.com/users/ray-x/followers",
                "following_url": "https://api.github.com/users/ray-x/following{/other_user}",
                "gists_url": "https://api.github.com/users/ray-x/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ray-x",
                "id": 1681295,
                "login": "ray-x",
                "node_id": "MDQ6VXNlcjE2ODEyOTU=",
                "organizations_url": "https://api.github.com/users/ray-x/orgs",
                "received_events_url": "https://api.github.com/users/ray-x/received_events",
                "repos_url": "https://api.github.com/users/ray-x/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ray-x/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ray-x/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ray-x",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> (you can also wrap vim.codelens.run / vim.codelens.get)\r\n\r\nPlease don't wrap built-in functions. If it's not explicitly documented that they're designed to do that, it is _not_ supported.\r\n\r\n> If all plugins need to register to null-ls, I think would be good to promote null-ls to first-class citizens\r\n\r\nThe first-class citizen is the extmark API or the approach outlined in https://github.com/neovim/neovim/issues/20181#issuecomment-1246852472\r\n\r\n\r\n> Codelens appear way ahead of LSP codelens. In fact, most codelens in vs-code do not relate to LSP \r\n\r\nThis is because Microsoft in general first creates an API in vscode and then puts it in the LSP spec based on the API.\r\n\r\nThat something exists in vscode only shows that it is feasible, it isn't an argument of _why_ it should be done in neovim in the same way.\r\n\r\n\r\n>  I see no reason to write an LSP server for it (even if it can be only 20 lines of extra codes)\r\n\r\nBecause you see no reason to write 20 lines, neovim should generalize lsp.codelens? Sorry but that is too weak of an argument.\r\n\r\n\r\nTo recap:\r\n\r\n- The recommended solution is to implement such functionality within the language server, _not_ the client. The advantages of this approach are that:\r\n  - You can re-use functionality already in it (like parser, semantic analysis, etc.). Language servers like HLS or eclipse.jdt.ls do have plugin systems themselves to enable this.\r\n  - Users of other editors benefit as well\r\n- If for whatever reason it is not possible to implement it in the language servers your options are:\r\n  - Use the extmark API. This has the trade-off that users have no common API to trigger actions, but give you more flexibility in what you can do.\r\n  - Implement a in-process language server as outlined in https://github.com/neovim/neovim/issues/20181#issuecomment-1246852472\r\n  - Use null-ls\r\n\r\n\r\nIf someone wants to try and push this forward, a concrete API proposal would help. My gut feeling is that the distance between LSP API and \"neovim codelens API\" would be rather short. Having two APIs that are on a similar level increases the API surface without enabling new functionality (low leverage). Net result: More complexity, more to maintain but no new features. But I'm happy to be proven wrong.\r\n",
            "created_at": "2022-09-18T09:24:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1250228645",
            "id": 1250228645,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5KhPml",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1250228645/reactions"
            },
            "updated_at": "2022-09-18T09:24:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1250228645",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Please don't wrap built-in functions. If it's not explicitly documented that they're designed to do that, it is not supported.\r\n\r\nWhat I meant is you can write your own function, which you could then create a binding for; not monkey patching.\r\n\r\n```lua\r\nfunction get_lenses(bufnr)\r\n  local lenses = vim.lsp.codelens.get(bufnr)\r\n  for _, lens in pairs(aplugin.codelens.get(bufnr)) do\r\n    lenses[#lenses+1] = lens\r\n  end\r\n  return lenses\r\nend\r\n\r\nfunction run()\r\n  local lenses = get_lenses()\r\n  vim.ui.select(lenses, {\r\n    prompt = 'Code lenses:',\r\n    format_item = function(lens)\r\n      return lens.command.title\r\n    end,\r\n  }, function(lens)\r\n    if lens then\r\n      execute_lens(lens)\r\n    end\r\n  end)\r\nend\r\n\r\nfunction execute_lens(lens)\r\n  -- do your thing\r\nend\r\n```",
            "created_at": "2022-09-18T17:13:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1250350237",
            "id": 1250350237,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5KhtSd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1250350237/reactions"
            },
            "updated_at": "2022-09-18T17:14:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1250350237",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
                "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
                "followers_url": "https://api.github.com/users/lvimuser/followers",
                "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
                "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lvimuser",
                "id": 109605931,
                "login": "lvimuser",
                "node_id": "U_kgDOBoh0Kw",
                "organizations_url": "https://api.github.com/users/lvimuser/orgs",
                "received_events_url": "https://api.github.com/users/lvimuser/received_events",
                "repos_url": "https://api.github.com/users/lvimuser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lvimuser",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In vs code, codelens do not restrict to LSP codelens. Any plugins can register a codelens. E.g. code coverage, the beloved git lens (https://github.com/gitkraken/vscode-gitlens), vscode-go, rest-lens, version-lens, npm-info-lens etc\r\n\r\nWhat's missing from all of the discussion here is why floating windows don't address this use-case. Do we need a higher-level interface for floating windows (like Vim's `:help popup`)? \r\n\r\nRelated: https://github.com/neovim/neovim/issues/9663",
            "created_at": "2022-09-21T12:51:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1253666233",
            "id": 1253666233,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5KuW25",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1253666233/reactions"
            },
            "updated_at": "2022-09-21T12:51:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1253666233",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "See also https://github.com/neovim/neovim/pull/24338",
            "created_at": "2023-07-13T13:30:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/20181#issuecomment-1634250818",
            "id": 1634250818,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20181",
            "node_id": "IC_kwDOAPphoM5haLBC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634250818/reactions"
            },
            "updated_at": "2023-07-13T13:30:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634250818",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 13,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/20181/comments",
    "created_at": "2022-09-13T10:59:13Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/20181/events",
    "html_url": "https://github.com/neovim/neovim/issues/20181",
    "id": 1371259366,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/20181/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5Ru8Hm",
    "number": 20181,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 1,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/20181/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/20181/timeline",
    "title": "Move codelens out from lsp package and allow plugin to register codelens ",
    "updated_at": "2025-01-17T15:33:02Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/20181",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1681295?v=4",
        "events_url": "https://api.github.com/users/ray-x/events{/privacy}",
        "followers_url": "https://api.github.com/users/ray-x/followers",
        "following_url": "https://api.github.com/users/ray-x/following{/other_user}",
        "gists_url": "https://api.github.com/users/ray-x/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ray-x",
        "id": 1681295,
        "login": "ray-x",
        "node_id": "MDQ6VXNlcjE2ODEyOTU=",
        "organizations_url": "https://api.github.com/users/ray-x/orgs",
        "received_events_url": "https://api.github.com/users/ray-x/received_events",
        "repos_url": "https://api.github.com/users/ray-x/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ray-x/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ray-x/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ray-x",
        "user_view_type": "public"
    }
}