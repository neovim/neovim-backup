{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nThere is no way to redraw and update a specific window without updating other windows that \"need redrawing\". Individual windows can be marked for redraw, but updates are only ever flushed to the UI via `update_screen()` which will go through *all* windows with pending updates. _In most cases_ this is either necessary (e.g. for splits, resizing, etc) or it's not a problem.\r\n\r\nHowever, there is much work being done in PR #27855 (tracking issue #27811) to externalize messages and the command line for the TUI via floating windows (also [noice.nvim](https://github.com/folke/noice.nvim)). The current high-level redrawing logic for the command line/message grid is orthogonal to that of windows, which has the following advantages:\r\n1. Visual selection is not cleared when redrawing the command line. For `:'<,'>[command]...` this is great because you can see what the ex-cmd is (presumably) operating on. Any call to `:redraw`, opening a new float, etc. will clear the visual selection highlight.\r\n2. no redrawing clash with `inccommand`. command line can be redrawn independently, without being blocked ([#9777](https://github.com/neovim/neovim/issues/9777), [#9783](https://github.com/neovim/neovim/pull/9783), [#20463](https://github.com/neovim/neovim/issues/20463)) or clearing the preview.\r\n\r\nNeither can be achieved via regular window redrawing, so if the cmdline/msg grid is externalized with a floating window we lose both of these benefits (I think #27950 somewhat addresses point (2) but still wouldn't allow properly re-updating the cmdline afterwards). Afaik this also applies to the native popup wildmenu which has its own seperate redrawing codepath.\r\n\r\nIn brief, externalized ui component providers in the TUI (specifically `ext_cmdline` and `ext_messages`, also likely `ext_popumenu` for `wildmenu`) have to use hacks and workarounds to maintain ephemeral screen state (like visual selection in cmdline, or cmdpreview) because there is no publicly exposed mechanism to redraw a window without screwing up the dirty screen state (which should be kept dirty). Some PRs have addressed this problem but in an ad-hoc/hacky manner.\n\n### Expected behavior\n\nEither:\r\n1. a function in the api/stdlib that allows redrawing a specific float without touching any other pending screen updates. I think(hope?) its reasonable to expect that the (re)drawing of ***floating*** windows can be done in isolation of other windows/the \"main\" window grid. Somewhat related: #28101 but in its current state/scope it does not fix the issue\r\n2. internal logic for keeping/restoring desirable ephemeral screen states: specifically the visual selection and command preview. I suppose the redrawing logic could check and handle each of theses cases individually, e.g. *not* removing the visual highlight, re-triggering the cmdpreview callback if needed, etc. There may be other similar \"dirty screen states\" that we want to keep though, I just can't think of any others.\r\n\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This sounds nice but there is no controlling when `update_screen()` will be called (often). Other windows marked for redraw will be redrawn at that point anyways, so updating a single window does not really make sense (unless `redrawing() == false`). I think a better solution would be to get rid of unwanted ephemeral screen state.\r\n\r\n> I think #27950 somewhat addresses point (2) but still wouldn't allow properly re-updating the cmdline afterwards\r\n\r\nWhat makes you say this? Have you tried it out? The \"before doing 'cmdpreview'\" happens on each key press while in cmdline mode. So a cmdline window can be updated, then the ephemeral 'cmdpreview' state is pushed to the screen and stays there until the next key press. I don't think there is a need for \"re-updating the cmdline afterwards\".",
            "created_at": "2024-04-26T01:20:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2078464037",
            "id": 2078464037,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM574tgl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2078464037/reactions"
            },
            "updated_at": "2024-04-26T01:25:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2078464037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This sounds nice but there is no controlling when update_screen() will be called (often). Other windows marked for redraw will be redrawn at that point anyways\r\n\r\nRight. What I'm suggesting is a method to basically *immediately* invoke something similar to `update_screen()`'s functionality, but only for a specific floating window. Thats why I linked your PR #28101 which allows invoking `update_screen()` directly from lua. But as it stands it couldn't fix what I'm discussing here, as you said calling  `update_screen()` as-is wouldn't work.\r\n\r\n> What makes you say this? Have you tried it out? The \"before doing 'cmdpreview'\" happens on each key press while in cmdline mode.\r\n\r\nTo clarify: your PR *does* fix the issue it is meant to address, and does resolve the redrawing of an externalized cmdline after pressing a key. It doesn't fix everything I mentioned here though:\r\n\r\n> I don't think there is a need for \"re-updating the cmdline afterwards\".\r\n\r\nWhy not? This is precisely my point. What if the external UI provider wants to asynchronously update the cmdline (for any reason, eg highlighting, changing borders, ..., not just updating based on a keypress) and it happens to be scheduled right after doing cmdpreview? It also doesn't handle keeping the visual selection highlight. If the command line is externalized, the normal redraw logic is invoked as soon as it is shown and will clear it. That's not the case with the native command line\r\n**EDIT**: Concrete example use case for wanting to redraw something in the cmdline window after cmdpreview would be matchparen highlights when moving the cursor around (only moving the cursor doesn't trigger cmdpreview)\r\n\r\n> I think a better solution would be to get rid of unwanted ephemeral screen state.\r\n\r\nI agree. But the way I see it, an _unholy_ amount of work would be needed to get rid of this in the cmdpreview logic. Might be wrong though.",
            "created_at": "2024-04-26T02:03:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2078497101",
            "id": 2078497101,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM5741lN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2078497101/reactions"
            },
            "updated_at": "2024-04-26T12:15:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2078497101",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Anecdotally I was toying with a command line highlighting plugin a while back and ran into all of these issues. Trying to open a floating window in the command line area caused a bunch of problems similar to those tracked in https://github.com/folke/noice.nvim/issues/6.\r\n\r\nI ended up doing a symbol name lookup with `nm` in the neovim binary for the `win_update()` function address (it's static, not exported so not _directly_ available via `ffi`) and calling *that* function directly, which worked. But everything about that approach is cursed so I just ended up using `Nvim_color_cmdline` lmao.\r\n\r\nI mention this because it's kind of the implementation that I had mind: a function similar to `update_screen()` but that doesn't call `win_update()` for every window, just a specific one.",
            "created_at": "2024-04-26T02:22:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2078515330",
            "id": 2078515330,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM5746CC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2078515330/reactions"
            },
            "updated_at": "2024-04-26T02:22:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2078515330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I mention this because it's kind of the implementation that I had mind: a function similar to update_screen() but that doesn't call win_update() for every window, just a specific one.\r\n\r\nWe had *a lot* of such ad-hoc mechanims in the past, which had be painfully kept in sync and maintained along with any improvement to `update_screen()`. These will **not** be added back. no exceptions.\r\n\r\nWe _could_ add a `update_screen(bool priority)` arg or something to only redraw windows with some new high-priority marker, but as a general direction, I don't like that.\r\n\r\nThe direction we have already chosen and  _should_ continue on is to make any fragile state which not must be overdrawn by accident into **real** stateful decorations which in fact can be safely redrawn, like all other stuff on the screen. thus just calling `update_screen()`  when stuff actually needs to be sent out to the external UI will be a non-problem.",
            "created_at": "2024-04-26T07:43:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2078816717",
            "id": 2078816717,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM576DnN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2078816717/reactions"
            },
            "updated_at": "2024-04-26T07:43:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2078816717",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What I'm suggesting is a method to basically immediately invoke something similar to update_screen()'s functionality, but only for a specific floating window.\r\n\r\nIt could be that this works for the external cmdline case and may be solved by adding a higher priority redraw type, to be updated in isolation by `update_screen()` when present. But my point was that usually `update_screen()` will be called anyways, likely in the same event loop cycle or soon after. So adding a general API to update a specific window feels like creating a disingenuous expectation.\r\n\r\n> But the way I see it, an unholy amount of work would be needed to get rid of this in the cmdpreview logic.\r\n\r\nI think that may be overestimated; could even be done in Lua. And as bfredl mentions, is what we should aim to do.",
            "created_at": "2024-04-26T10:52:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2079154027",
            "id": 2079154027,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM577V9r",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079154027/reactions"
            },
            "updated_at": "2024-04-26T10:52:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079154027",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The direction we have already chosen and _should_ continue on is to make any fragile state which not must be overdrawn by accident into **real** stateful decorations which in fact can be safely redrawn, like all other stuff on the screen.\r\n\r\nShall we use this issue to track that? ",
            "created_at": "2024-04-26T12:26:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2079288268",
            "id": 2079288268,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM5772vM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079288268/reactions"
            },
            "updated_at": "2024-04-26T12:26:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079288268",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> But my point was that usually update_screen() will be called anyways, likely in the same event loop cycle or soon after.\r\n\r\nAh, I see what you mean. Again, I can anecdotally say that my approach was working as intended, but that's because I *wasn't* using `vim.ui_attach(...)` (for reasons that are out of scope here). Thus `update_screen()` was never called _automatically_. I realize that no-one should do this though. A regular ext cmdline provider will have `update_screen` and friends called normally, so you're 100% right that what I suggested wouldn't work.\r\n\r\nRegardless, I see the points everyone is making and completely agree. Getting rid of ephemeral screen state is a much more \"treat the root cause\"-type of solution than the approach I suggested.\r\n\r\n> The direction we have already chosen and should continue on is to make any fragile state which not must be overdrawn by accident into real stateful decorations which in fact can be safely redrawn\r\n\r\nAgreed. I suppose this approach would solve many more issues (in addition to those I mentioned), like the fact that cmdpreview is cleared when resizing the editor or when `<C-g>`/`<C-t>` is pressed during `:substitute` preview.",
            "created_at": "2024-04-26T13:39:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2079418738",
            "id": 2079418738,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM578Wly",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079418738/reactions"
            },
            "updated_at": "2024-04-26T13:39:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079418738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I would be willing to work on this. I think the priority is addressing this for cmdpreview specifically, I don't know if people care about the visual selection thing. Anyway I can imagine a pretty simple solution for the visual highlight on the plugin side if there isn't a sufficient need/desire to merge this into master.\r\n\r\nThe only method that I can think of that maintains the cmdpreview state across redraws would be to re-invoke the associated preview callback when appropriate. Is this the proper approach?\r\n\r\nMy first thought was to store the window/buffer changes applied by the preview callback and reapply them when needed. But this assumes the preview callback's changes are independent of things like the visible region in the buffer, making it impossible for cmdpreview callbacks to, say, lazily only apply changes in the visible viewport (which, if I'm not mistaken, is done in `substitute`'s preview callback).",
            "created_at": "2024-04-26T14:46:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2079540399",
            "id": 2079540399,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM5780Sv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079540399/reactions"
            },
            "updated_at": "2024-04-26T14:46:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079540399",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The only method that I can think of that maintains the cmdpreview state across redraws would be to re-invoke the associated preview callback when appropriate. Is this the proper approach?\r\n\r\nNo the point is to get rid of artificially maintaining cmdpreview state. What we want to do is instead of `cmdpreview_prepare/restore_state()` on each keypress, just prepare and restore once when entering/leaving the cmdpreview state.",
            "created_at": "2024-04-26T15:00:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2079565650",
            "id": 2079565650,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM5786dS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079565650/reactions"
            },
            "updated_at": "2024-04-26T23:35:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079565650",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I think what we want to do is open a (floating/split, depending on 'inccommand') window when cmdpreview starts, and only close it when it ends.\r\n\r\nThat's also something I considered, and is definitely the method that is most aligned with the \"getting rid of fragile state\" idea.\r\n\r\nHowever wouldn't it be detrimental to performance? The benefit of having cmdpreview handled differently and it being intrinsically tied to redrawing is that it allows lazily showing changes based on what's visible.\r\n\r\nLike I mentioned for `:substitute` preview, only substitutions on visible lines are shown. With the current implementation, I can `:%s/<pat>/<sub>` on a 20K-line file and have the changes appear instantly. With what you're suggesting, that's not possible because e.g. an editor resize could potentially expose more lines in the target buffer whose substitutions should logically be previewed, but by not re-triggering the preview callback, they wouldn't. This also applies for `<C-g>`/`<C-t>` search navigation which scrolls the window without triggering the callback again.\r\n\r\nI'm not against this approach though. Definitely seems like it'd be easier to implement and would remove a lot of edge cases. Maybe explicit support for handling these kinds of redraws to a preview buffer could be added, or like another user-supplied callback that can decide if the preview callback should be invoked again.",
            "created_at": "2024-04-26T15:46:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2079648639",
            "id": 2079648639,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM579Ot_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079648639/reactions"
            },
            "updated_at": "2024-04-26T15:46:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079648639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't see a reason why the cmdpreview buffer in this approach can't still contain only the visible lines. The point is just to keep that window around until cmdpreview ends. But yes, it looks like manipulating the buffer content in the cmdpreview window should happen more frequently, at which point the window dimensions could also be updated. Resizing Nvim currently also removes the cmdpreview window until the next keypress.",
            "created_at": "2024-04-26T16:23:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2079706319",
            "id": 2079706319,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM579czP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079706319/reactions"
            },
            "updated_at": "2024-04-26T16:41:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079706319",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It could, but a preview callback applying changes lazily like this would need to be re-invoked when the visible lines change. The editor can be resized at any time.\r\n\r\nE.g. suppose I have a buffer with 100 lines of the text `hello`, and currently lines 1-50 are visible. I type `:%s/hello/hi`, lazily applying the substitution preview to lines 1-50 so that now I see 50 lines of `hi`. Then I resize my editor such that the entire buffer is visible. If the callback isn't re-invoked, those 50 new lines won't be affected by cmdpreview, still displaying `hello`. I don't think that behaviour is desired\r\n\r\n**EDIT**: didn't see you updated your comment before I posted this, sorry. So you see my point? For any redraw that changes what's actually visible on the affected buffer/window, the cmdpreview callback would either have to be re-invoked to support lazy previews, or support for such optimizations would have to be dropped. If the former is the chosen path, then in the worst case we'd have to invoke the callback on every redraw, which is essentially what I was proposing.",
            "created_at": "2024-04-26T16:45:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2079738349",
            "id": 2079738349,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM579knt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079738349/reactions"
            },
            "updated_at": "2024-04-26T16:50:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079738349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well yes but like I said the resize issue is separate from replacing the ephemeral window with a persistent one, and is already present in the status quo. If anything a persistent window should make resolving that easier.",
            "created_at": "2024-04-26T17:51:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2079829069",
            "id": 2079829069,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM5796xN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079829069/reactions"
            },
            "updated_at": "2024-04-26T23:20:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079829069",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Right, I don't disagree. I guess I misunderstood your comment then. The aspect of the approach I'm discussing is agnostic to window persistence. Obv for `icm=split` it would be wasteful to close and reopen the preview window for every redraw, the point I'm making is that we'd still (worst case) need to invoke the cmdpreview callback on every redraw.\r\n\r\nAlthough I don't see why a new window would have to be opened for `nosplit`? I would have just moved the buffer restoration logic to whenever cmdpreview ends/before re-invoking, instead of restoring immediately after the preview callback invocation (something like that).",
            "created_at": "2024-04-26T18:56:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2079959931",
            "id": 2079959931,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM57-at7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079959931/reactions"
            },
            "updated_at": "2024-04-26T18:56:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2079959931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't quite follow what you mean with \"lazily applying the substitution preview\". I think the command should (and currently does) just execute on the entire preview buffer. What is redrawn is probably cheap in comparison and I don't think keeping the cmdpreview state around will be detrimental to performance but only improve it. \r\n\r\n> the point I'm making is that we'd still (worst case) need to invoke the cmdpreview callback on every redraw.\r\n\r\nI don't see why \"the cmdpreview callback(`cmdpreview_may_show()`?)\" would need to be invoked on every redraw, the entire point of making the preview state persistent is so that we don't have to do that.\r\n\r\n> Although I don't see why a new window would have to be opened for nosplit? I would have just moved the buffer restoration logic to whenever cmdpreview ends/before re-invoking, instead of restoring immediately after the preview callback invocation (something like that).\r\n\r\nYes that sounds right, sorry for the confusion. Floating windows and moving the implementation to Lua were mentioned recently when discussing this on Matrix but I don't think it's actually relevant. If you're willing to work on this I would suggest just trying to do `cmdpreview_prepare/restore_state()` once when entering/leaving the cmdpreview state, instead of on each key press. The resize issue is separate but it seems some variant of `cmdpreview_may_show()` would have to be called after resizing.",
            "created_at": "2024-04-26T23:53:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2080243536",
            "id": 2080243536,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM57_f9Q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2080243536/reactions"
            },
            "updated_at": "2024-04-27T00:20:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2080243536",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> \"the cmdpreview callback(cmdpreview_may_show()?)\"\r\n\r\nSorry, I was using that term pretty loosely. I specifically meant either the user-supplied [lua preview callback](https://neovim.io/doc/user/map.html#%3Acommand-preview) or the one associated to a builtin command (`cmd_preview_func` field in `CommandDefinition`). Yeah both are handled and executed in `cmdpreview_may_show()` but the distinction is important: when I say that the \"cmdpreview callback can lazily apply the changes\", I mean the callback/function associated with a specific command (i.e. either lua preview callback or `cmd_preview_func`), not the actual general cmdpreview handling functions (like `cmdpreview_may_show()`).\r\n\r\n> I don't quite follow what you mean with \"lazily applying the substitution preview\". I think the command should (and currently does) just execute on the entire preview buffer\r\n\r\nIt doesn't. The `:substitute` preview callback (AFAIK the _only_ builtin cmdpreview callback) specifically only applies changes to lines that are visible in the viewport at the time of its invocation:\r\nhttps://github.com/neovim/neovim/blob/435dee74bb3593b778328138dac054f26e2d7396/src/nvim/ex_cmds.c#L3517-L3527\r\n\r\nHopefully that explains why I was saying the cmdpreview callback would potentially have to be re-invoked on every redraw (assuming every redraw is a resize or scroll). I think the above snippet makes it clear that resizing/scrolling a window that is showing a `:sub` preview can't just be redrawn regularly.\r\n\r\n> If you're willing to work on this I would suggest just trying to do cmdpreview_prepare/restore_state() once when entering/leaving the cmdpreview state, instead of on each key press. The resize issue is separate but it seems some variant of cmdpreview_may_show() would have to be called after resizing.\r\n\r\nCool, that's what I was thinking.",
            "created_at": "2024-04-27T01:11:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2080289950",
            "id": 2080289950,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM57_rSe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2080289950/reactions"
            },
            "updated_at": "2024-04-27T01:11:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2080289950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It doesn't. The :substitute preview callback (AFAIK the only builtin cmdpreview callback) specifically only applies changes to lines that are visible in the viewport at the time of its invocation:\r\n\r\nI see, my bad(not actually familiar with the cmdpreview code, I just read some of the code in ex_getln.c). I guess that breaks down with wrapped lines when the command changes the line height.\r\n\r\n> Hopefully that explains why I was saying the cmdpreview callback would potentially have to be re-invoked on every redraw (assuming every redraw is a resize or scroll).\r\n\r\nNot sure why we're assuming every redraw is a resize or scroll(why would a scroll happen during cmdpreview?) but yes, in that case the cmdpreview call back would have to be re-invoked to sync the viewport (perhaps also recursively when the command changes the line height to account for a new botline/topline). But is that a reasonable performance concern? I don't think scrolling or resizing happens frequently during cmdpreview. I would consider that a reasonable/necessary fix for a bug that's also present with the current ephemeral preview. \r\n",
            "created_at": "2024-04-27T01:55:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2080315277",
            "id": 2080315277,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM57_xeN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2080315277/reactions"
            },
            "updated_at": "2024-04-27T01:55:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2080315277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Not sure why we're assuming every redraw is a resize or scroll\r\n\r\nI was assuming the \"worst\" case. But yes that is an unrealistic assumption, I was just using that to make my point about the necessity to re-invoke the preview callback.\r\n\r\n> why would a scroll happen during cmdpreview?\r\n\r\n`<C-g>`/`<C-t>` during `:substitute`. But any `cmap` could do such a thing\r\n\r\n> But is that a reasonable performance concern? I don't think scrolling or resizing happens frequently during cmdpreview.\r\n\r\nNo its not, I agree. My concern with respect to performance wasn't related to redrawing. It's no longer a concern though, I brought it up earlier when you responded (in https://github.com/neovim/neovim/issues/28510#issuecomment-2079565650) to my initial implementation proposal but I think I made my point since then. I meant that your response, as I understood it, forced command-preview callbacks to draw on the entire buffer because e.g. the callback would not be re-invoked between redraws even if e.g. the viewport changes. \r\n\r\nSo the perf concern was more about preview implementors having to drop the assumption they could previously make that they can lazily only show changes on visible lines (see the `:substitute` preview snippet above). But again not a concern anymore because I see that you agree that the callback should be reinvoked in some cases. \r\n\r\n",
            "created_at": "2024-04-27T13:28:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/28510#issuecomment-2080661894",
            "id": 2080661894,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28510",
            "node_id": "IC_kwDOAPphoM58BGGG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2080661894/reactions"
            },
            "updated_at": "2024-04-27T13:28:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2080661894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 18,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28510/comments",
    "created_at": "2024-04-26T00:43:38Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28510/events",
    "html_url": "https://github.com/neovim/neovim/issues/28510",
    "id": 2264723091,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "UI extensibility, events, protocol, externalized UI",
            "id": 640132777,
            "name": "ui-extensibility",
            "node_id": "MDU6TGFiZWw2NDAxMzI3Nzc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui-extensibility"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28510/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6G_O6T",
    "number": 28510,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28510/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28510/timeline",
    "title": "redraw a specific floating window ignoring other pending screen updates",
    "updated_at": "2025-01-17T15:26:48Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28510",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
        "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
        "followers_url": "https://api.github.com/users/theofabilous/followers",
        "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
        "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/theofabilous",
        "id": 92238946,
        "login": "theofabilous",
        "node_id": "U_kgDOBX90Yg",
        "organizations_url": "https://api.github.com/users/theofabilous/orgs",
        "received_events_url": "https://api.github.com/users/theofabilous/received_events",
        "repos_url": "https://api.github.com/users/theofabilous/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/theofabilous",
        "user_view_type": "public"
    }
}