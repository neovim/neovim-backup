{
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski",
            "user_view_type": "public"
        }
    ],
    "author_association": "MEMBER",
    "body": "Basically, store commit hash per source and prefer it *only during initial install* over resolving `version`. Update the value after state on disk changes. Will help with reproducible setups and is assumed to be tracked by VCS.\n\nIt or its \"private\" alternative (i.e. not meant to be VCS tracked) should also contain an information about `version` and maybe `src` directly. It allows:\n\n- `vim.pack.update()` to use correct `version` if the plugin is not (yet) added to current session (i.e. \"active\").\n\n- It can be used by `vim.pack.add()` to detect if the user wants to switch branch/tag/version. See #34771.\n\nNeeds discussions about appropriate file structure and supported use cases.",
    "closed_at": "2025-10-04T16:48:30Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "want to confirm [this comment](https://github.com/neovim/neovim/pull/35424#issuecomment-3213372690):\n\n> `vim.json.decode()` proved to be the fastest way to read the serialized object, which is important as it needs to be done on every startup (if `vim.pack` is used).\n\ndo you mean *if update() is used*, or even `add()` will require reading the lockfile? I guess reading the lockfile isn't much worse than reading plugin files (could it get very big from transitive deps(?)), but ideally `add()` would not require it.",
            "created_at": "2025-08-25T04:01:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/34776#issuecomment-3218753500",
            "id": 3218753500,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34776",
            "node_id": "IC_kwDOAPphoM6_2kfc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218753500/reactions"
            },
            "updated_at": "2025-08-25T04:02:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218753500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I did plan to write some design thoughts here, but decided to skip and show with the PR code instead. I'll try to concisely describe main ideas.\n\nHere are the things that require storing state data on disk (i.e. in lockfile), from most to least important:\n\n1. Allow `update()` to act on not-yet-active plugins. Currently if `vim.pack.add()` is not yet called, then plugin's `version` is unknown and `update()` can't decide where to look for changes.\n\n2. Efficiently know plugin's dependencies without having to read 'pkg.json' files on every load for every plugin. This is for the future, after #34778 (or other declaration of dependencies on plugin's side).\n\n3. Allow initial install to check out the exact latest \"working\" state for a reproducible setup. Currently it pulls the latest available `version`.\n\n4. Ensure that *all* declared plugins are installed, even if lazy loaded. So that later `vim.pack.add()` does not trigger auto-install (when there might be no Internet connection, for example) and there is no issues with knowing which plugins are used in the config (so even never loaded rare plugins are still installed and can be updated).\n\n5. Allow `vim.pack.add()` to detect if plugin's spec has changed between Nvim sessions and act accordingly. I.e. either set `src` as `origin` or enforce `version`. See #34776. This is not critical and can be done during `update()`, but it might be nice to have.\n\nI would consider points 1, 2, and 3 as essential, while 4 and 5 as design decisions that are \"nice to have\".\n\nPoints 1, 2, and 5 can be done by storing \"private\" lockfile, which would be present only on current machine. Points 3 and 4 need \"public\" lockfile that is advised to be VCS/Git tracked.\n\nHere are the required data that enables each point:\n\n1. `name` -> `version` map.\n2. `name` -> `dependencies` map.\n3. `name` -> `ref` map. Probably also requires `name` -> `src` map to ensure that commit comes from correct origin.\n4. `name` -> `src` map. It would be good to also track the order, but that might be too many complications and redundant together with point 2.\n5. Map from `name` to all relevant spec fields. I.e. `name` -> `src` and `name` -> `version` for now. Storing `data` might be too much, but can be discussed, of course.\n\n---\n\nWith this in mind, I plan the PR that would implement the following:\n\n- Have a single \"public\" '~/.config/nvim/nvim-pack.lock' file storing all needed data. As there is an overlap in fields, it looks like the cleanest approach. The example structure is something like this:\n\n    <details><summary>Example of 'nvim-pack.lock'</summary>\n\n    ```json\n    {\n      # Extra nesting to more future proof. Maybe storing Nvim version is also a good idea.\n      \"plugins\": {\n        \"plug-one\": {\n          \"ref\": \"abcdef1\"\n          \"src\": \"https://github.com/user/plug-one\",\n          # No `version` means it was `nil`, i.e. infer default branch later\n        },\n        \"plug-two\": {\n          \"dependencies\": [\"plugin-one\", \"plug-three\"],\n          \"src\": \"https://github.com/user/plug-two\",\n          \"ref\": \"bcdefg2\",\n          # Enclose string `version` in quotes\n          \"version\": \"'dev'\"\n        },\n        \"plug-three\": {\n          \"src\": \"https://github.com/user/plug-three\",\n          \"ref\": \"cdefgh3\",\n          # Store `vim.version.Range` via its `tostring()` output\n          \"version\": \">=0.0.0\",\n        }\n      }\n    }\n    ```\n\n    </details>\n\n- Read it exactly once per every session during the first `add()` call. My initial tests showed that on my (not too bad, not too good) machine reading and decoding a lockfile with 10 plugins takes about 0.02 ms (i.e. 2e-05 seconds), which I consider negligible in this scenario.\n\n- Ensure all plugins from lockfile are installed after the initial read.\n    - To fully enable point 5 for 100% lazy loaded config (i.e. zero `add()` calls during startup) users might be able to manually add `vim.pack.add({})` call inside `VimEnter`.\n\n- Write updates when needed:\n    - Check in `add()` if `src` and `version` are the same. If not - act and update lockfile with data coming from `vim.pack.add()`.\n    - Update the whole lockfile (or only `ref`) after every `update()`. Maybe update `ref` if `add()` can enforce proper `version` via checkout.\n    - Remove entries in `del()`, which becomes the only proper way to delete a plugin.",
            "created_at": "2025-08-25T13:09:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/34776#issuecomment-3220208975",
            "id": 3220208975,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34776",
            "node_id": "IC_kwDOAPphoM6_8H1P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 3,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3220208975/reactions"
            },
            "updated_at": "2025-08-25T13:09:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3220208975",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34776/comments",
    "created_at": "2025-07-04T13:24:31Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34776/events",
    "html_url": "https://github.com/neovim/neovim/issues/34776",
    "id": 3202745209,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "bfd4f2",
            "default": false,
            "description": "vim.pack, start/opt packages, 'packpath'",
            "id": 8889050758,
            "name": "packages",
            "node_id": "LA_kwDOAPphoM8AAAACEdQmhg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/packages"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34776/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 128,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": "2025-12-25T08:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 75,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-10-04T16:48:30Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "I_kwDOAPphoM6-5gN5",
    "number": 34776,
    "parent_issue_url": "https://api.github.com/repos/neovim/neovim/issues/34763",
    "performed_via_github_app": null,
    "reactions": {
        "+1": 23,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 23,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34776/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34776/timeline",
    "title": "Add lockfile support to `vim.pack`",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-10-04T16:48:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34776",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}