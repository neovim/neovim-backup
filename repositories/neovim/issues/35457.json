{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "## Problem\n\nAI clients can discover local [MCP \"tools\"](https://modelcontextprotocol.io/specification/2025-06-18/server/tools) which do arbitrary things. Using the Nvim RPC API we could easily provide a MCP server that lets AI clients read and control Nvim.\n\nReference:\n\n- [Agent Client Protocol (ACP)](http://agentclientprotocol.com/)\n- https://github.com/bigcodegen/mcp-neovim-server looks like a great starting point. @bigcodegen\n- [mcphub.nvim](https://github.com/ravitemer/mcphub.nvim/tree/main/lua/mcphub/native) implements an MCP SDK in Lua\n\n\nExamples from other IDEs/editors:\n\n- [JetBrains builtin MCP server](https://www.jetbrains.com/help/idea/mcp-server.html#supported-tools) provides many tools like `search_in_files_content`, `list_available_actions`, `get_project_problems`, `open_file_in_editor`, `replace_selected_text`, etc.\n- https://github.com/juehang/vscode-mcp-server\n\n## Expected behavior\n\nShip a Lua module which acts as an MCP server. Can be activated in multiple ways:\n\n- activate the *current* Nvim instance as an MCP server\n- invoked as a `nvim -l` CLI script that daemonizes and \"shims\" to another Nvim instance(s)\n\nWhen the `$NVIM` environment variable is defined, it automatically interacts with that Nvim instance (\"just works\" if the AI client is running in `:terminal`).\n\nThe MCP server provides various \"tools\" and \"resources\". Some ideas (these are rather generic, maybe should be more granular):\n\n- `nvim_get_servers` (readonly) lists all known Nvim servers ([`serverlist{peer=true}`](https://github.com/neovim/neovim/pull/34806))\n- `nvim_get_state` (readonly) returns a big map of info such as: \n    - current selected text + metadata\n    - related: https://github.com/neovim/neovim/issues/32949\n- `nvim_get_bufs` (readonly) returns full text of specified buffers (defaults to \"all\")\n    - open buffers (including non-file buffers such as `:terminal`) + metadata (\"current file\", unsaved changes, ...?)\n    - current file\n- `nvim_set_state` (write) performs potentially destructive actions\n    - switch to file\n    - idk...?\n- `nvim_exec` (write/execute) executes arbitrary Lua script\n\nTODO:\n\n- just convert https://github.com/bigcodegen/mcp-neovim-server to Lua? It looks great.\n- do we need a way to mark buffers/regions as `sensitive` (never return their contents to MCP)",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Other than \"tools\", MCP also define \"resources\" and \"prompt\". I think all the points you mark as \"readonly\" above are rather \"resources\" than \"tools\". \"Prompts\" give users slash commands to manually choose something to add as context to LLM, so it is also convenient. \n\n[This plugin](https://github.com/ravitemer/mcphub.nvim/tree/main/lua/mcphub/native) already implement an MCP SDK in Lua, as well as a built-in MCP server also written in Lua\n\nBut to make it easy for users to configure this \"Neovim MCP server\" to use in any LLM clients (that support MCP), I think the server should still be available as a CLI tool (just like LSP servers). And of course as an CLI tool, it wouldn't have to be written in Lua, but could be Go, etc. The problem of `mcphub.nvim` way of integrating with LLM clients is that the LLM clients must be supported from mcphub.nvim side, so you can not easily integrate `mcphub.nvim`'s native servers with any clients like Claude Code",
            "created_at": "2025-08-25T07:19:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/35457#issuecomment-3219120978",
            "id": 3219120978,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35457",
            "node_id": "IC_kwDOAPphoM6_3-NS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3219120978/reactions"
            },
            "updated_at": "2025-08-25T07:29:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3219120978",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think the server should still be available as a CLI tool\n\nadded.\n\n> And of course as an CLI tool, it wouldn't have to be written in Lua, but could be Go, etc.\n\n? if we ship it then it should be in Lua, there's no reason for us to take on another platform dependency.",
            "created_at": "2025-08-25T18:39:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/35457#issuecomment-3221343048",
            "id": 3221343048,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35457",
            "node_id": "IC_kwDOAPphoM7AActI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3221343048/reactions"
            },
            "updated_at": "2025-08-25T18:39:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3221343048",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Why does this need to be in core? To make use of this one likely needs other tools + some AI subscription etc.; So a \"out-of-the-box\" argument kinda falls short. And the whole ecosystem is still changing a lot - not to mention that it is still unclear how things will develop in the next two years once VC investments dry up.",
            "created_at": "2025-08-26T05:05:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/35457#issuecomment-3222634668",
            "id": 3222634668,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35457",
            "node_id": "IC_kwDOAPphoM7AFYCs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3222634668/reactions"
            },
            "updated_at": "2025-08-26T05:28:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3222634668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Why does it need to be in core?\n\nSame as LSP that is a protocol for editor to talk with a service that provides IDE feature, MCP allows editor to \"talk\" to an LLM. Nvim doesn't need built-in IDE feature, just like Nvim doesn't need a built-in AI feature, but some standard protocols that allow it to easily integrate with external service that provide those features isn't nice? Not to say Nvim already supports LSP method `textDocument/inlineCompletion` for supporting LLM completion service.\n\nThere are now more and more AI agent CLI that focus on coding like Claude Code, Gemini, Goose, etc, but one thing they miss is the ability to get LSP diagnostic, etc to provide better results. Editor MCP could provide that missing piece.\n\n> To make use of this one likely needs other tools\n\nDoesn't the same argument apply to LSP?\n\n> And the whole ecosystem is still changing a lot - not to mention that it is still unclear how things will develop in the next two years once VC investments dry up.\n\nI don't know why VC invesments are related here, even if VC investments dry up, that would not make LLM models, AI agents CLI disappear.",
            "created_at": "2025-08-26T08:52:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/35457#issuecomment-3223236054",
            "id": 3223236054,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35457",
            "node_id": "IC_kwDOAPphoM7AHq3W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3223236054/reactions"
            },
            "updated_at": "2025-08-26T09:19:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3223236054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Same as LSP that is a protocol for editor to talk with a service that provides IDE feature, MCP allows editor to \"talk\" to an LLM. Nvim doesn't need built-in IDE feature, just like Nvim doesn't need a built-in AI feature, but some standard protocols that allow it to easily integrate with external service that provide those features isn't nice?\n\nThe criteria that there's a protocol definition or a RFC or whatever is one aspect to consider, but imho by itself not justification enough to add something into core.\nOther criteria are if it composes well or is a general building block with high leverage.\n\nOtherwise we'd need to add a whole lot more into core and the complexity budget isn't infinite.\n\nSo the question remains:\n\nIs there a compelling argument that this needs to or should be in core?\n\n\n> Not to say Nvim already supports LSP method textDocument/inlineCompletion for supporting LLM completion service.\n\n`textDocument/inlineCompletion` is decoupled from GenAI/LLM. `fish` for example had ghost text completion for ages, long before LLMs came along.\n\n> Doesn't the same argument apply to LSP?\n\nYes it does\nAnd based on my involved with the LSP development, I think it might not have hurt if LSP was developed out of tree for a while. To have separate versioning, release schedule and BWC criteria.\nBut at the time LSP was also a driver for the stdlib (.e.g `vim.json`).\n\nAnother aspect of LSP is that other plugins leverage it often because it makes functionality provided by a language server easily available to them.\nThe MCP proposal here doesn't fit that criteria.\n\nAnd the `vim.pack` addition should imho also raise the bar a bit.\n\n---\n\nHaving it out of core would also give it more flexibility in regards to integrating data from other plugins. E.g. looking at something like https://github.com/Davidyz/codecompanion-dap.nvim it seems like there are use-cases for that.\n\n---\n\n> even if VC investments dry up, that would not make LLM models, AI agents CLI disappear.\n\nNot disappear, but who will keep training new models? The 20$ people pay for an OpenAI subscription currently don't cover the costs of that. The whole thing is still pretty much in flux\n",
            "created_at": "2025-08-26T10:49:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/35457#issuecomment-3223646296",
            "id": 3223646296,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35457",
            "node_id": "IC_kwDOAPphoM7AJPBY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3223646296/reactions"
            },
            "updated_at": "2025-08-26T10:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3223646296",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> And based on my involved with the LSP development, I think it might not have hurt if LSP was developed out of tree for a while.\n\nI'd say https://github.com/bigcodegen/mcp-neovim-server serves that purpose and shows that this is a rather small lift.\n\n> To make use of this one likely needs other tools + some AI subscription etc.; So a \"out-of-the-box\" argument kinda falls short. \n\nThere are a lot of AI clients and they look for MCP tools. If Nvim has a `:Mcp` mode, any AI client can start using it immediately, without any Nvim-specific configuration or plugins.\n\nNvim already runs as a server, and exposing it as MCP makes that architecture more relevant and useful. But the current Nvim MCP plugins are all kind of confused and overcomplicated.",
            "created_at": "2025-08-26T19:52:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/35457#issuecomment-3225534343",
            "id": 3225534343,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35457",
            "node_id": "IC_kwDOAPphoM7AQb-H",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3225534343/reactions"
            },
            "updated_at": "2025-08-27T01:54:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3225534343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'd say https://github.com/bigcodegen/mcp-neovim-server serves that purpose and shows that this is a rather small lift.\n\nBased on stars and forks it also shows that it is currently rather niche.\nThe neovim distributions so far afaik also don't include anything like this - another sign of its limited popularity.\n\n> If Nvim has a :Mcp mode, any AI client can start using it immediately, without any Nvim-specific configuration or plugins.\n\nWhy is having to add a `vim.pack.add(...)` a problem? One of the arguments brought up is to make diagnostics and so on available for MCP - that implies that LSP or linters must have been setup too, which implies at least either lspconfig being added or a custom config that far outweights a single line plugin addition.\n\nOne alternative to making setups simpler could be to support virtual packages/plugin groups - so that a `vim.pack.add(\"nvim-ai-dev\")` pulls in X relevant plugins.\n\n> But the current Nvim MCP plugins are all kind of confused and overcomplicated.\n\nIsn't this a sign that there's still a lot of development ongoing with different design choices and trade-offs? And it kinda contradicts your first point about mcp-neovim-server being a good candidate.\n\n",
            "created_at": "2025-08-27T10:02:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/35457#issuecomment-3227573499",
            "id": 3227573499,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35457",
            "node_id": "IC_kwDOAPphoM7AYNz7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3227573499/reactions"
            },
            "updated_at": "2025-08-27T10:02:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3227573499",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Isn't this a sign that there's still a lot of development ongoing with different design choices and trade-offs?\n\nNot in this case. The problem is very simple.\n\nWe could start by hosting a plugin in https://github.com/neovim/ org and see how it turns out.\n\n> And the whole ecosystem is still changing a lot\n\nSpeaking of that, [zed just announced](https://zed.dev/blog/bring-your-own-agent-to-zed) the [Agent Client Protocol (ACP)](http://agentclientprotocol.com/). Though it seems to be essentially a standardization of the \"editor MCP server\" story, which actually helps us here.",
            "created_at": "2025-08-27T14:01:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/35457#issuecomment-3228343535",
            "id": 3228343535,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35457",
            "node_id": "IC_kwDOAPphoM7AbJzv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3228343535/reactions"
            },
            "updated_at": "2025-08-28T01:44:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3228343535",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I have few pointers from my fairly unpleasant experience with MCP.\n\nThere is pretty big overlap between resources, read only tools and prompts (to the point where its basically duplicating functionality). Also the fact that read only tools are not even thing in the spec is another big pain point with the whole thing as far as security goes.\n\nExample:\n\nYou want to give user ability to for example give some context to LLM manually, but also let LLM be able to call this (for example grepping buffers).\n\nUsers are only allowed to manually call resources and prompts, never tools. You also do not want to just store the whole buffers in the message history, so ideally the search result should return embedded resource or list of embedded resources, as those can be refetched. \n\nSo what do you do? Well you for sure need some tool like grep_buffers. This one can probably return list of embedded buffer resources. So now you also need buffer resource (for illustration neovim://buffer/{bufid})\n\nBut now you also want the user to be able to provide this to LLM manually. So your option is either: making also grep_buffers resource (for illustration uri like neovim://grep_buffers/{pat}), or making grep_buffers prompt. Neither of the 2 make sense really in my opinion but the prompt is probably more sensible option. Option that I went with personally is \"read-only\" tools returning embedded resources that are just themselves (e.g grep_buffers tool returns grep_buffers embedded resource), prompt option would be prompt that does same thing as grep_buffers tool pretty much.\n\nAnd when you start looking at most \"read-only\" tools (again fake term because of lacking spec) you notice clear pattern where you want both user be able to call it and LLM able to call it. The main post already has multiple examples of it, basically all \"read-only\" tools there should be both resources and \"read-only\" tools (and most likely doing what i said e.g the tools returning themselves bsically as embedded resource for refetching).\n\nThis was a bit ranty maybe and repetetive but I hope it at least contains some useful info and saves at least some of the frustration i experienced for someone planning to look at MCP in future :d \n\nEDIT:\n\nAlso hopefully this post also answers this \n\n> But the current Nvim MCP plugins are all kind of confused and overcomplicated.\n\nWhen spec itself is confused and overcomplicated then its pretty hard for multiple people to implement it in some consistent way (example: most MCP servers do not even use embedded resources like ever, they just dump text in responses, even though imo its pretty important part of the spec)\n",
            "created_at": "2025-08-27T22:34:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/35457#issuecomment-3229948671",
            "id": 3229948671,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35457",
            "node_id": "IC_kwDOAPphoM7AhRr_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3229948671/reactions"
            },
            "updated_at": "2025-08-27T22:40:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3229948671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35457/comments",
    "created_at": "2025-08-24T21:22:53Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35457/events",
    "html_url": "https://github.com/neovim/neovim/issues/35457",
    "id": 3349918719,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "artificial magnificence",
            "id": 9164253471,
            "name": "ai-llm-mcp",
            "node_id": "LA_kwDOAPphoM8AAAACIjtpHw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ai-llm-mcp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35457/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 741,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 631,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-09-01T20:43:39Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM7Hq7P_",
    "number": 35457,
    "parent_issue_url": "https://api.github.com/repos/neovim/neovim/issues/32084",
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 1,
        "confused": 0,
        "eyes": 5,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 9,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35457/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35457/timeline",
    "title": "MCP server provides MCP tools for use by AI clients",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-08-28T10:39:42Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35457",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}