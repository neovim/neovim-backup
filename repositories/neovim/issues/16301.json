{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Feature already in Vim?\n\nNo\n\n### Feature description\n\nCurrently, if you want to add an `input` prompt with some autocompletion, you need to do something like this:\r\n\r\n```vim\r\n\r\nfunction MyAutocompleteFunction(ArgLead, CmdLine, CursorPos) abort\r\n  return ['foo', 'bar', 'baz']\r\nendfunction\r\n\r\ncall input('My prompt:', '', 'customlist,MyAutocompleteFunction')\r\n\r\n\"or \r\n\r\ncall input({\r\n  \\ 'prompt': 'My prompt:',\r\n  \\ 'completion': 'customlist,MyAutocompleteFunction',\r\n  \\ })\r\n```\r\n\r\nIt would be great to allow defining the autocomplete function inline like a funcref/lambda function:\r\n\r\n\r\n```vim\r\nfunction s:my_function(ArgLead, CmdLine, CursorPos) abort\r\n  return ['foo', 'bar', 'baz']\r\nendfunction\r\n\r\ncall input({\r\n  \\ 'prompt': 'My prompt:',\r\n  \\ 'completion': function('s:my_function'),\r\n  \\ })\r\n\r\n\" or \r\n\r\ncall input({\r\n  \\ 'prompt': 'My prompt:',\r\n  \\ 'completion': {a,c,cur-> ['foo', 'bar', 'baz']},\r\n  \\ })\r\n```\r\n\r\nOr in Lua:\r\n\r\n```lua\r\nvim.fn.input({\r\n  prompt = 'My prompt:',\r\n  completion = function(arglead, cmdline, cursorpos)\r\n    return {'foo', 'bar', 'baz'}\r\n  end\r\n\r\n-- Maybe even with the argument version:\r\n\r\nvim.fn.input('My prompt:', '', function(arglead, cmdline, cursorpos)\r\n     return {'foo', 'bar', 'baz'}\r\nend)\r\n``` \r\n\r\nThis would allow creating these completions much easier and it would allow them to be more dynamic.\r\n\r\nI currently need these for [orgmode.nvim](https://github.com/kristijanhusak/orgmode.nvim) since orgmode has a bunch of prompts with a different completion values, and managing these globally accessible functions, especially from lua, is a bit tedious. \r\n\r\nRegarding the `custom` or `customlist`, I would say that if it's a funcref, just consider it a `customlist`. It seems more natural (to me at least).",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "You can easily implement it like this:\r\n\r\n```VimL\r\nfunction! MyInput(prompt, Func) abort\r\n    return input(a:prompt, \"\", \"customlist,\"..get(a:Func, \"name\"))\r\nendfunction\r\n\r\ncall MyInput(\"enter the text: \", {A, C, P -> [\"foo\", \"bar\", \"baz\"]})\r\n\" or\r\nlua vim.fn.MyInput(\"enter the text: \", function(A, C, P) return {\"foo\", \"bar\", \"baz\"} end)\r\n```\r\n\r\nThe only tricky thing with lambdas is that the direct approach with `get({X, Y -> X + Y}, \"name\")` fails, because name as String is not counted as an object reference, and so the lambda goes into the garbage collector immediately. Hence, we need an extra reference to keep it alive.",
            "created_at": "2021-11-14T08:31:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/16301#issuecomment-968247015",
            "id": 968247015,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16301",
            "node_id": "IC_kwDOAPphoM45tkbn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968247015/reactions"
            },
            "updated_at": "2021-11-14T08:31:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968247015",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35012635?v=4",
                "events_url": "https://api.github.com/users/matveyt/events{/privacy}",
                "followers_url": "https://api.github.com/users/matveyt/followers",
                "following_url": "https://api.github.com/users/matveyt/following{/other_user}",
                "gists_url": "https://api.github.com/users/matveyt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matveyt",
                "id": 35012635,
                "login": "matveyt",
                "node_id": "MDQ6VXNlcjM1MDEyNjM1",
                "organizations_url": "https://api.github.com/users/matveyt/orgs",
                "received_events_url": "https://api.github.com/users/matveyt/received_events",
                "repos_url": "https://api.github.com/users/matveyt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matveyt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matveyt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matveyt",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Interesting, I wasn't aware of this. I'll give it a try, thanks.",
            "created_at": "2021-11-14T09:32:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/16301#issuecomment-968256003",
            "id": 968256003,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16301",
            "node_id": "IC_kwDOAPphoM45tmoD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968256003/reactions"
            },
            "updated_at": "2021-11-14T09:32:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968256003",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@matveyt this works very well. I even added it to orgmode.nvim. I'll let Neovim team decide on this. I still think it would be useful to have it.",
            "created_at": "2021-11-15T10:41:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/16301#issuecomment-968760116",
            "id": 968760116,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16301",
            "node_id": "IC_kwDOAPphoM45vhs0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968760116/reactions"
            },
            "updated_at": "2021-11-15T10:41:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/968760116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/16301/comments",
    "created_at": "2021-11-13T15:47:07Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/16301/events",
    "html_url": "https://github.com/neovim/neovim/issues/16301",
    "id": 1052709343,
    "labels": [
        {
            "color": "0E8A16",
            "default": false,
            "description": "issue is not fixed but can be circumvented until then",
            "id": 435850181,
            "name": "has:workaround",
            "node_id": "MDU6TGFiZWw0MzU4NTAxODE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:workaround"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/16301/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM4-vxHf",
    "number": 16301,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/16301/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/16301/timeline",
    "title": "Allow defining complete function for `input()` as a Funcref",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:29Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/16301",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
        "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
        "followers_url": "https://api.github.com/users/kristijanhusak/followers",
        "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
        "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/kristijanhusak",
        "id": 1782860,
        "login": "kristijanhusak",
        "node_id": "MDQ6VXNlcjE3ODI4NjA=",
        "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
        "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
        "repos_url": "https://api.github.com/users/kristijanhusak/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/kristijanhusak",
        "user_view_type": "public"
    }
}