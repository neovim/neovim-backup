{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Feature description\r\n\r\nWhat would you think of adding `vim.win` and `vim.buf`?\r\n\r\nA bit similar to how you can do `vim.b[buf].comment`\r\n\r\n```lua\r\nvim.api.nvim_win_get_option(win, \"winhighlight\")\r\nvim.api.nvim_buf_line_count(buf)\r\n\r\nvim.buf[buf]:line_count()\r\nvim.win[win]:get_option(\"winhighlight\")\r\n\r\nlocal buf = vim.buf[1]\r\nbuf:line_count()\r\nbuf:set_name(\"foobar\")\r\n```\r\n\r\nInstead of `[]`, we could also use `()`.\r\n\r\nJust an idea. Makes code shorter and easier to read.\r\n\r\nIf enough interest and if this is something that would be accepted, I'm willing to create a PR.\r\n\r\n## With array access\r\n```lua\r\nlocal meta = {\r\n  __index = function(_, key)\r\n    return function(self, ...)\r\n      return vim.api[(\"nvim_%s_%s\"):format(self.type, key)](self[self.type], ...)\r\n    end\r\n  end,\r\n}\r\n\r\nvim.buf = setmetatable({}, {\r\n  __index = function(_, buf)\r\n    buf = buf == 0 and vim.api.nvim_get_current_buf()\r\n    return setmetatable({ type = \"buf\", buf = buf }, meta)\r\n  end,\r\n})\r\n\r\nvim.win = setmetatable({}, {\r\n  __index = function(_, win)\r\n    win = win == 0 and vim.api.nvim_get_current_win()\r\n    return setmetatable({ type = \"win\", win = win }, meta)\r\n  end,\r\n})\r\n\r\nlocal buf = vim.buf[0]\r\n\r\nprint(buf:line_count())\r\n\r\nbuf:set_name(\"foobar\")\r\n\r\nprint(buf:get_name())\r\n```\r\n\r\n## As functions\r\n\r\n```lua\r\nlocal meta = {\r\n  __index = function(_, key)\r\n    return function(self, ...)\r\n      return vim.api[(\"nvim_%s_%s\"):format(self.type, key)](self[self.type], ...)\r\n    end\r\n  end,\r\n}\r\n\r\n---@param buf? number Buffer or 0 for the current buffer\r\nfunction vim.buf(buf)\r\n  buf = buf and buf ~= 0 and buf or vim.api.nvim_get_current_buf()\r\n  return setmetatable({ type = \"buf\", buf = buf }, meta)\r\nend\r\n\r\n---@param win? number Window or 0 for the current window\r\nfunction vim.win(win)\r\n  win = win and win ~= 0 and win or vim.api.nvim_get_current_win()\r\n  return setmetatable({ type = \"win\", win = win }, meta)\r\nend\r\n\r\nlocal buf = vim.buf()\r\n\r\nprint(buf:line_count())\r\n\r\nbuf:set_name(\"foobar\")\r\n\r\nprint(buf:get_name())\r\n```",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I haven't published it yet, but I was working on a library with high level lua bindings some time ago:\r\n```lua\r\nlocal nv = require('nv')\r\n\r\n-- get a buffer handle\r\n-- everything is also accessible through nv.buf.* for the current buffer\r\nlocal buf = nv.buf(4)\r\nbuf.type = 'nofile'\r\n\r\nP(buf.nr, buf.name, buf.displayname) --> 1, \"/home/user/script.lua\", \"script.lua\"\r\nP(buf.valid, buf.loaded, buf.filetype) --> true, true, \"lua\"\r\n\r\nbuf.opt.number = true\r\nprint(buf.opt.number) --> true\r\n\r\n-- get/set lines\r\nP(buf[0]) --> \"local nv = require('nv')\"\r\nP(buf[-1]) --> \"end\"\r\n\r\n-- get/set marks\r\nP(buf.mark.m) --> { 13, 0 }\r\n\r\n-- normal mode buffer mapping\r\nbuf.map.n('<CR>', function()\r\n  print('sup')\r\nend)\r\n\r\n-- BufEnter autocommand\r\nbuf.on.BufEnter(function()\r\n  print('BufEnter')\r\nend)\r\n\r\nfor _, b in pairs(nv.buf.list({ listed = true })) do\r\n  print(b) --> nv.buf(1)\r\nend\r\n```",
            "created_at": "2022-10-13T11:40:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/20632#issuecomment-1277475525",
            "id": 1277475525,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20632",
            "node_id": "IC_kwDOAPphoM5MJLrF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1277475525/reactions"
            },
            "updated_at": "2022-10-13T11:40:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1277475525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ii14 nice!",
            "created_at": "2022-10-13T11:58:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/20632#issuecomment-1277496811",
            "id": 1277496811,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20632",
            "node_id": "IC_kwDOAPphoM5MJQ3r",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1277496811/reactions"
            },
            "updated_at": "2022-10-13T11:58:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1277496811",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I was discussing this on the Matrix yesterday. I will be really happy if this is something the neovim wants to add because I'm already doing something similar for my plugin. Also, I'm happy to help with this!\r\n\r\nI prefer the new API to be something like:\r\n\r\n```lua\r\nlocal b0 = vim.buffer:new(true, false) -- create a new buffer\r\n\r\n-- get buffer by IDs or name?\r\nlocal b1 = vim.buffer(0) -- or vim.buffer[0]\r\nlocal b2 = vim.buffer(1) -- or vim.buffer[1]\r\nlocal b3 = vim.buffer('my-buffer-name') -- or vim.buffer['my-buffer-name']\r\n\r\n-- window\r\nlocal w0 = vim.window:new() -- create a new window\r\nlocal w1 = vim.window(1000) -- or vim.window[1000]\r\n\r\n-- tabs\r\nlocal t1 = vim.tab(1) -- or vim.tab[1]\r\n\r\nvim.pretty_print(b1:name()) --> \"my awesome buffer\"\r\nvim.pretty_print(b1:valid()) --> true\r\nvim.pretty_print(b1:loaded()) --> true\r\n\r\n-- set options\r\nb2:option.set {\r\n  option1 = true,\r\n  option2 = false,\r\n  ...\r\n}\r\n-- or individually\r\nb2:option.set(\"option1\", true)\r\nb2:option.set(\"option2\", false)\r\n-- and get\r\nb2:option.get(\"option1\")\r\nb2:option.get(\"option2\")\r\n\r\n-- keymaps\r\nb2:keymap.set(\"n\", \"<Leader>m\", function() ... end)\r\nb2:keymap.del(\"n\", \"<Leader>m\")\r\n\r\n-- events\r\nb2:on({ \"BufferEnter\" }, function() ... end)\r\n\r\n-- attach to buffer\r\nb2:attach {\r\n  on_lines = function(...) print(...) end,\r\n}\r\n```\r\n\r\nThe only thing I don't know how to be the best way to implement will be the extmarks and highlights. Extmarks and highlights are something that it's related to a `buffer` but we can have the namespace from the current window? Maybe we can have a context for a given buffer? _(Not sure)_\r\n\r\n```lua\r\nlocal ns = vim.api.nvim_create_namespace(\"mynamespace\")\r\nlocal b = vim.buffer[0]\r\n\r\n-- option1: setting the namespace for the buffer?\r\nb:namespace.set(ns)\r\nb:extmark.set {\r\n  ...extmark options\r\n}\r\n\r\n-- option2: using the namespace in the call?\r\nb:extmark.set(ns, {\r\n  ...extmark options\r\n})\r\n```\r\n\r\nBut I think if my buffer is being shown inside a given window (that have a namespace attached to it), I expect my buffer to have the same namespace\r\n\r\n```lua\r\nlocal ns = vim.api.nvim_create_namespace(\"ns\")\r\n\r\nlocal w = vim.window:new {\r\n  namespace = ns,\r\n}\r\n\r\nlocal b = vim.buffer:new()\r\n\r\nw:buffer.set(b)\r\n\r\nw:open { focus = true }\r\n\r\nvim.pretty_print(b:namespace.get()) --> id from \"ns\"\r\n```\r\n\r\nThat is all my thoughts in this topic after spending a lot of time doing buffer and window stuff inside my plugins. I hope we can get something similar implemented. Will be really ergonomic to write plugins!\r\n\r\nThanks all in advance!",
            "created_at": "2022-11-08T14:48:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/20632#issuecomment-1307335821",
            "id": 1307335821,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20632",
            "node_id": "IC_kwDOAPphoM5N7FyN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1307335821/reactions"
            },
            "updated_at": "2022-11-08T14:55:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1307335821",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8826449?v=4",
                "events_url": "https://api.github.com/users/lucastrvsn/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucastrvsn/followers",
                "following_url": "https://api.github.com/users/lucastrvsn/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucastrvsn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucastrvsn",
                "id": 8826449,
                "login": "lucastrvsn",
                "node_id": "MDQ6VXNlcjg4MjY0NDk=",
                "organizations_url": "https://api.github.com/users/lucastrvsn/orgs",
                "received_events_url": "https://api.github.com/users/lucastrvsn/received_events",
                "repos_url": "https://api.github.com/users/lucastrvsn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucastrvsn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucastrvsn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucastrvsn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "see https://github.com/neovim/neovim/pull/20669 , specifically https://github.com/neovim/neovim/pull/20669#issuecomment-1279862492\r\n\r\n> We should instead think about higher-level interfaces and patterns.\r\n\r\nLet's avoid syntactic sugar around the RPC API. We need thoughtful, higher-level abstractions in Lua.",
            "created_at": "2022-11-08T17:11:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/20632#issuecomment-1307552952",
            "id": 1307552952,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20632",
            "node_id": "IC_kwDOAPphoM5N76y4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1307552952/reactions"
            },
            "updated_at": "2022-11-08T17:12:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1307552952",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> see #20669 , specifically [#20669 (comment)](https://github.com/neovim/neovim/pull/20669#issuecomment-1279862492)\r\n> \r\n> > We should instead think about higher-level interfaces and patterns.\r\n> \r\n> Let's avoid syntactic sugar around the RPC API. We need thoughtful, higher-level abstractions in Lua.\r\n\r\n100% agreed with you, Justin. Just a syntax sugar API will not solve all the problems and maybe will introduce more work synchronizing all the APIs.\r\n\r\nI'm happy to help with this, but I'm not sure how to start doing these abstractions. I'll try to understand where and how this can be done.\r\n\r\nThank you for letting me know about those issues, really nice!",
            "created_at": "2022-11-08T18:47:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/20632#issuecomment-1307676347",
            "id": 1307676347,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20632",
            "node_id": "IC_kwDOAPphoM5N8Y67",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1307676347/reactions"
            },
            "updated_at": "2024-04-07T17:01:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1307676347",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8826449?v=4",
                "events_url": "https://api.github.com/users/lucastrvsn/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucastrvsn/followers",
                "following_url": "https://api.github.com/users/lucastrvsn/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucastrvsn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucastrvsn",
                "id": 8826449,
                "login": "lucastrvsn",
                "node_id": "MDQ6VXNlcjg4MjY0NDk=",
                "organizations_url": "https://api.github.com/users/lucastrvsn/orgs",
                "received_events_url": "https://api.github.com/users/lucastrvsn/received_events",
                "repos_url": "https://api.github.com/users/lucastrvsn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucastrvsn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucastrvsn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucastrvsn",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/20632/comments",
    "created_at": "2022-10-13T10:58:29Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/20632/events",
    "html_url": "https://github.com/neovim/neovim/issues/20632",
    "id": 1407593190,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/20632/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5T5irm",
    "number": 20632,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 4,
        "-1": 0,
        "confused": 0,
        "eyes": 2,
        "heart": 0,
        "hooray": 2,
        "laugh": 0,
        "rocket": 0,
        "total_count": 8,
        "url": "https://api.github.com/repos/neovim/neovim/issues/20632/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/20632/timeline",
    "title": "Accessors for nvim_win and nvim_buf api functions",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:09Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/20632",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
        "events_url": "https://api.github.com/users/folke/events{/privacy}",
        "followers_url": "https://api.github.com/users/folke/followers",
        "following_url": "https://api.github.com/users/folke/following{/other_user}",
        "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/folke",
        "id": 292349,
        "login": "folke",
        "node_id": "MDQ6VXNlcjI5MjM0OQ==",
        "organizations_url": "https://api.github.com/users/folke/orgs",
        "received_events_url": "https://api.github.com/users/folke/received_events",
        "repos_url": "https://api.github.com/users/folke/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/folke",
        "user_view_type": "public"
    }
}