{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Feature already in Vim?\r\n\r\nNo\r\n\r\n### Feature description\r\n\r\nI'm currently trying to implement a plugin that complements the search highlighting (https://github.com/lewis6991/satellite.nvim/issues/11). One thing that is needed is to detect when the user executes `:nohlsearch` (either interactively, via a mapping, a callback, or in some plugin code).\r\n\r\n### Potential Solutions:\r\n\r\n* ~New autocmd event `CmdExecute`: fired when any ex command is executed.~\r\n   EDIT: Can't detect when `v:hlsearch` is set.\r\n* ~New autocmd event `VariableSet`: fired when any Vimscript variable is modified (like `OptionSet`).~\r\n  EDIT: Several reasons for not doing this, [see comment](https://github.com/neovim/neovim/issues/18879#issuecomment-1153810023)\r\n* ~New autocmd event `HlSearch`: fired when `v:hlsearch` is changed.~\r\n   EDIT: Suggestion generalized to a `Search` autocmd, [see comment](https://github.com/neovim/neovim/issues/18879#issuecomment-1153810023)\r\n* ~Allow `dictwatcheradd()` to work for `v:` (for non-readonly fields).~\r\n  EDIT: Several reasons for not doing this, [see comment](https://github.com/neovim/neovim/issues/18879#issuecomment-1153810023)\r\n\r\n### Alternative Solution\r\n\r\n<details>\r\n  <summary>Use a Libuv uv_timer_t to check v:hlsearch</summary>\r\n  \r\n```lua\r\nlocal function watch_table(t, key, interval, callback)\r\n  local last_value = t[key]\r\n  vim.loop.new_timer():start(0, interval, function()\r\n    if last_value ~= t[key] then\r\n      last_value = t[key]\r\n      vim.schedule(callback)\r\n    end\r\n  end)\r\nend\r\n\r\n-- Regularly check v:hlsearch\r\nwatch_table(vim.v, 'hlsearch', vim.o.updatetime, function()\r\n  ...\r\nend)\r\n```\r\n\r\n</details>\r\n\r\n### Summary\r\n\r\n~Adding `CmdExecute` seems like the best solution, but I would really appreciate any other ideas if anyone has any.~\r\n\r\nEDIT: After some analysis, adding a first class `Search` autocmd now appears to be the best solution.\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Would `dictwatcheradd()` help here?",
            "created_at": "2022-06-06T14:07:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/18879#issuecomment-1147487455",
            "id": 1147487455,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18879",
            "node_id": "IC_kwDOAPphoM5EZUTf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1147487455/reactions"
            },
            "updated_at": "2022-06-06T14:07:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1147487455",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`dictwatcheradd()` doesn't work for `v:` since it isn't a proper typval dict.",
            "created_at": "2022-06-06T14:56:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/18879#issuecomment-1147541109",
            "id": 1147541109,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18879",
            "node_id": "IC_kwDOAPphoM5EZhZ1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1147541109/reactions"
            },
            "updated_at": "2022-06-06T15:14:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1147541109",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "related: https://github.com/neovim/neovim/issues/4600\r\n\r\n> * New autocmd event `CmdExecute`: fired when any ex command is executed.\r\n\r\n👍  Now that we have `nvim_parse_cmd()` I think we could move forward with this. A requirement is that `v:event` (?) passes the command context to the event handler.\r\n\r\nPrevious: https://github.com/neovim/neovim/pull/1218\r\n\r\nThere would be performance concerns, and this also makes every line of plugin code impossible to reason about, unless we provide controls to disable this event (is `:help 'eventignore'` sufficient?). Would an \"interactive only\" flag also be useful?\r\n\r\n",
            "created_at": "2022-06-07T16:08:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/18879#issuecomment-1148874047",
            "id": 1148874047,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18879",
            "node_id": "IC_kwDOAPphoM5Eem0_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1148874047/reactions"
            },
            "updated_at": "2022-06-07T16:11:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1148874047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> There would be performance concerns, \r\n\r\nYes, this is very true. This is the only thing I don't like about this solution, and what leans me towards a more single-point solution like a `HlSearch` autocmd. If we can't do this efficiently, then we shouldn't do it.\r\n\r\nWe could avoid the perf hit by storing the autocmd with each command it matches when the autocmd is set, that way the command matching is only done once as opposed to each time the command runs (as #1218 does). This has a slight downside of creating loosely-coupled state and we'll need to clean up the autocmd refs for each command when the autocmd is deleted.\r\n\r\n>  and this also makes every line of plugin code impossible to reason about\r\n\r\nEvery line of ~plugin~ vimscript code. In Lua we already have the ability to wrap functions (`vim.cmd = my_custom_vim_cmd`), so this would be the closest analogue for vimscript/ex commands.\r\n\r\n> unless we provide controls to disable this event (is :help 'eventignore' sufficient?)\r\n\r\nAbsolutely. I think `'eventignore'` should be sufficient.\r\n\r\n> Would an \"interactive only\" flag also be useful?\r\n\r\nMaybe, though one can already use `CmdLineLeave` for the interactive cases. Maybe just add the interactive flag to `v:event`?",
            "created_at": "2022-06-07T16:59:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/18879#issuecomment-1148931715",
            "id": 1148931715,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18879",
            "node_id": "IC_kwDOAPphoM5Ee06D",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1148931715/reactions"
            },
            "updated_at": "2022-06-07T16:59:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1148931715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This is the only thing I don't like about this solution, and what leans me towards a more single-point solution like a `HlSearch` autocmd\r\n\r\nYep. Not a strong case, though. `HlSearch` event is just flirting with a less generic form of the same idea. Not to mention, `OptionSet` already firmly established the omnipresence of hooks.\r\n\r\n> Maybe just add the interactive flag to `v:event`?\r\n\r\n👍 \r\n\r\nThe performance concern should be solvable, or at least isolated and opt-in.",
            "created_at": "2022-06-07T17:56:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/18879#issuecomment-1148993896",
            "id": 1148993896,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18879",
            "node_id": "IC_kwDOAPphoM5EfEFo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1148993896/reactions"
            },
            "updated_at": "2022-06-07T17:56:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1148993896",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`nohlsearch` could be rewritten as `let v:hlsearch = 0`. So for this particular problem trapping `CmdExecute` does not look like a good idea.",
            "created_at": "2022-06-11T13:23:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/18879#issuecomment-1152927547",
            "id": 1152927547,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18879",
            "node_id": "IC_kwDOAPphoM5EuEc7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1152927547/reactions"
            },
            "updated_at": "2022-06-11T13:23:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1152927547",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35012635?v=4",
                "events_url": "https://api.github.com/users/matveyt/events{/privacy}",
                "followers_url": "https://api.github.com/users/matveyt/followers",
                "following_url": "https://api.github.com/users/matveyt/following{/other_user}",
                "gists_url": "https://api.github.com/users/matveyt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matveyt",
                "id": 35012635,
                "login": "matveyt",
                "node_id": "MDQ6VXNlcjM1MDEyNjM1",
                "organizations_url": "https://api.github.com/users/matveyt/orgs",
                "received_events_url": "https://api.github.com/users/matveyt/received_events",
                "repos_url": "https://api.github.com/users/matveyt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matveyt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matveyt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matveyt",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `nohlsearch` could be rewritten as `let v:hlsearch = 0`.\r\n\r\n~~I guess we need `v:` support in `dictwatcheradd()`. Seems slightly less horrible than `VariableSet`.~~",
            "created_at": "2022-06-12T16:08:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/18879#issuecomment-1153220167",
            "id": 1153220167,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18879",
            "node_id": "IC_kwDOAPphoM5EvL5H",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1153220167/reactions"
            },
            "updated_at": "2023-06-21T08:56:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1153220167",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I put a bit a thought into this, and I have a new proposal.\r\n\r\nFirstly, about adding `v:` support to `dictwatcheradd()`:\r\n\r\n* Remember that `v:event` is in `v:` which means such a feature would allow a way to listen to all autocmds. I don't know if this is a good thing or not.\r\n* Many variables in `v:` are very context-sensitive and are locally bound in essence. I don't think giving external access (via hooks) to these variables is a good idea.\r\n* Many variables in `v:` are constant: `v:lua`, `v:true`, `v:false`, `v:version`.\r\n* Actually implementing this is quite non-trivial, so I don't think the ROI is high enough.\r\n\r\n### Proposal \r\nSo... I was thinking more about a `HlSearch` autocmd and how we can generalize it, and actually I think it makes a lot of sense to introduce a more general `Search` autocmd. Whilst allowing detection of `v:hlsearch`, it would also solve several other problems I've got with [satellite.nvim](https://github.com/lewis6991/satellite.nvim) which requires hooking onto pretty much every search related event, including:\r\n\r\n* User hitting `n`, `N`, `&` or `*`. At the moment, the plugin creates a dummy keymap in order to refresh, and I don't think it is that robust.\r\n* User typing in the search `/` command line. We already have `CmdlineChanged/Enter/Leave` for this, but a first class event for `Search` would be nice.\r\n\r\nThere are several search related plugins that [already exist](https://github.com/rockerBOO/awesome-neovim#search) and a `Search` autocmd would probably help improve those.\r\n\r\nIn addition, we already have a `SearchWrapped` autocmd, so this new one can replace it and we can deprecate `SearchWrapped`.\r\n\r\nHere's what the help might look like:\r\n\r\n```\r\nSearch          After any search event. Includes:\r\n                - Running `:nohlsearch` or setting `v:hlsearch`\r\n                - Making a search with |n|, |N|, |&| or |*|. If the\r\n                  search wraps then searchwrapped key is set in v:event.\r\n                - When a search from the |/| command is run. If 'incsearch' is\r\n                  set then the autocmd is run for every incremental search.\r\n```\r\n\r\n* Bullet 1 is detected by looking at `v:hlearch`.\r\n* Bullet 2 is detected by ???. We may need to add something to `v:event`. Maybe we can simply include the search index and number of matches instead of including a `searchwrapped` key.\r\n* Bullet 3 is detected by `vim.v.event.cmdtype`.\r\n",
            "created_at": "2022-06-13T11:39:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/18879#issuecomment-1153810023",
            "id": 1153810023,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18879",
            "node_id": "IC_kwDOAPphoM5Exb5n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1153810023/reactions"
            },
            "updated_at": "2022-06-13T11:50:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1153810023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@lewis6991 nice analysis! makes sense to me. Also I prefer not to enhance `dictwatcheradd()` (would rather eliminate it actually).",
            "created_at": "2022-06-13T11:47:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/18879#issuecomment-1153816809",
            "id": 1153816809,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18879",
            "node_id": "IC_kwDOAPphoM5Exdjp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1153816809/reactions"
            },
            "updated_at": "2023-06-05T03:16:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1153816809",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/18879/comments",
    "created_at": "2022-06-06T12:31:57Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/18879/events",
    "html_url": "https://github.com/neovim/neovim/issues/18879",
    "id": 1261780437,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/18879/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5LNT3V",
    "number": 18879,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/18879/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/18879/timeline",
    "title": "plugins can detect `:nohlsearch` or `v:hlsearch`",
    "updated_at": "2025-01-17T15:58:53Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/18879",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    }
}