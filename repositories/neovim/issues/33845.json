{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nEdit: Summary, since this post is long:\n`vim.fs.root` is good for finding a specific project marker file but sometimes a marker is located in multiple folders and `vim.fs.root` is awkward at handling that. If we had an option to search \"by-directory\" instead of \"by-file\" it'd make `vim.fs.root` better at handling those situations.\n\n\n### Details\n\nNeovim doesn't have an easy way of searching for a project root based on a marker that could be located in multiple places.\n\nFor example an installed Python package will not have a project marker like `pyproject.toml` / `setup.py` but a Python package does need `__init__.py` files starting from the root and located every subdirectory down. So if your Vim buffer is within some file inside that package, it should be enough to find the root using logic like this:\n\n- If no plausible marker (e.g. `__init__.py`) found at directory, keep searching up\n- If a plausible marker is found at directory, then every directory here and up must also have that marker\n- Keep looking up until we find a directory that doesn't have the marker\n- Return the last directory that did have the marker\n\n`vim.fs.root` comes to mind because it allows you to give your own `function(name, path) ... end` object but it isn't super suitable right now because the function callback is supposed to return a `string` or `nil` and it only looks at the parent folder if every file in the current directory returns `nil`. It's hard to know whether a marker was found in a directory without maintaining our own table of checked directories because we don't know when `vim.fs.root` will switch from the current directory and start searching the next directory up.\n\n### Expected behavior\n\nAn option to `vim.fs.root` or a new function to look for a contiguous marker, rather than a singular project marker\n\nFor example in a Python installed package like\n\n```\n- /path/to/place/python3.11/site-packages/\n    - some_package/\n        - __init__.py\n        - subfolder/\n            - __init__.py\n            - more_subfolder/\n                - __init__.py\n                - some_file.py\n```\n\nWhile looking at `some_file.py` a root up to `/path/to/place/python3.11/site-packages/some_package` is found by looking for `__init__.py` files.\n\n<details>\n<summary>Example code showing how that can be done</summary>\n\nBasically the goal would be to replace or make-redundant the `get_topmost_contiguous_project_root_marker` function below:\n\n```lua\nlocal _P = {}\n\nlocal _ALL_CONTIGUOUS_PROJECT_ROOT_MARKERS = {\"CMakeLists.txt\", \"__init__.py\"}\nlocal _LUA_ROOT_PATHS = {\n    \".luacheckrc\",\n    \".luarc.json\",\n    \".luarc.jsonc\",\n    \".stylua.toml\",\n    \"selene.toml\",\n    \"selene.yml\",\n    \"stylua.toml\",\n}\nlocal _ALL_SINGLE_PROJECT_ROOTS = vim.tbl_deep_extend(\"force\", {}, _LUA_ROOT_PATHS)\n_ALL_SINGLE_PROJECT_ROOTS = vim.list_extend(\n    _ALL_SINGLE_PROJECT_ROOTS,\n    {\n        -- Language-Agnostic\n        \".editorconfig\",\n        \".git\",\n\n        -- Python\n        \".flake8\",\n        \".pylintrc\",\n        \"Pipfile\",\n        \"Pipfile.lock\",\n        \"poetry.lock\",\n        \"pyproject.toml\",\n        \"pytest.ini\",\n        \"requirements.txt\",\n        \"setup.cfg\",\n        \"setup.py\",\n        \"tox.ini\",\n\n        \"package.py\",  -- Rez\n\n        -- (Neo)vim\n        \"init.lua\",\n        \"init.vim\",\n    }\n)\n\n\n---@param directory string\n---@param names string[]\n---@return string?\nfunction _P.get_match(directory, names)\n    for _, name in ipairs(names) do\n        local path = vim.fs.joinpath(directory, name)\n\n        if vim.fn.filereadable(path) == 1 then\n            return name\n        end\n    end\n\n    return nil\nend\n\n\n--- Find the start of the project, if any.\n---\n--- If the project has a known top-level file, e.g. `\"setup.py\"` then that\n--- directory is returned. Otherwise we'll try to find a root by looking for\n--- indicators / markers like `\"CMakeLists.txt\"` files.\n---\n---@param source string | integer The child directory to search from or the Vim buffer.\n---@return string? # The found root, if any.\n---\nfunction _P.get_nearest_project_root(source)\n    local root = vim.fs.root(source, _ALL_SINGLE_PROJECT_ROOTS)\n\n    if root then\n        return root\n    end\n\n    if type(source) == \"number\" then\n        local name = vim.api.nvim_buf_get_name(vim.api.nvim_get_current_buf())\n\n        if name ~= \"\" then\n            source = vim.fs.dirname(name)\n        else\n            source = vim.fn.getcwd()\n        end\n    end\n\n    return _P.get_topmost_contiguous_project_root_marker(\n        source,\n        _ALL_CONTIGUOUS_PROJECT_ROOT_MARKERS\n    )\nend\n\n\n--- Starting from `directory`, look for `names` to indicate a project root.\n---\n---@param directory string\n---    Some absolute path on-disk.\n---@param names string[]\n---    A marker that, once found, must be found in every parent directory\n---    contiguously. The last parent directory that has the marker is assumed\n---    to be the \"root\" of the project.\n---@return string?\n---    The found project root, if any.\n---\nfunction _P.get_topmost_contiguous_project_root_marker(directory, names)\n    local found_yet = false\n    local current = directory\n    local previous = nil\n\n    while current and previous ~= current do\n        local match = _P.get_match(current, names)\n\n        if not match then\n            if found_yet then\n                return previous\n            end\n        else\n            -- NOTE: This `names = { match }` line means \"now that we found\n            -- a marker, that marker needs to be found in every parent\n            -- directory from now on otherwise we will stop searching.\"\n            --\n            names = { match }\n\n            found_yet = true\n        end\n\n        previous = current\n        current = vim.fs.dirname(current)\n    end\n\n    return previous\nend\n\n\nlocal path = 0  -- NOTE: Current Vim buffer (also can use a file-path here, too)\nprint(_P.get_nearest_project_root(path))\n```\n</details>\n\n## Low Cost Suggestion\nIf it's preferred to keep using `vim.fs.root` rather than defining another function, one way of really easily solving this I think would be to provide some kind of extra `opts` like `vim.fs.root(0, function(...) end, { search_method=\"by_directory\" })`. As in, instead of calling the function callback on each file in the directory, call it once-per-directory. Because then it'd be really easy to add this behavior using something like...\n\n```lua\nlocal names = { \"__init__.py\", \"CMakeLists.txt\" }\nlocal found_yet = false\n\nlocal root = vim.fs.root(\n    source,\n    function(directory)\n        local match\n\n        for _, name in ipairs(names) do\n            local path = vim.fs.joinpath(directory, name)\n\n            if vim.fn.filereadable(path) == 1 then\n                match = name\n\n                break\n            end\n        end\n\n        if not match then\n            if found_yet then\n                return previous\n            end\n        else\n            -- NOTE: This `names = { match }` line means \"now that we found\n            -- a marker, that marker needs to be found in every parent\n            -- directory from now on otherwise we will stop searching.\"\n            --\n            names = { match }\n\n            found_yet = true\n        end\n    end,\n    { search_method=\"directory\" }\n)\n```\n\nThere may be more idiomatic ways to do this. The above is just an idea for \"keeping it all in vim.fs.root\"",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "The \"Expected behavior\" gives a nice tree, but doesn't say what the \"mutliple files\" or conditions are that it looks for. What are the conditions in that example?\n\nCan you not define a `root_dir()` that uses `vim.fs.find(..., {upward=true})` ? \n\nNote also that https://github.com/neovim/neovim/pull/33771 is exploring glob/wildcard support for `fs.find()`, though `:help vim.fs.find()` shows an example that isn't too bad (compared to the pages of code above...):\n\n```lua\nlocal files = vim.fs.find(function(name, path)\n  return name:match('.*%.[ch]pp$') and path:match('[/\\\\]lib$')\nend, { limit = math.huge, type = 'file' })\n```",
            "created_at": "2025-05-04T21:21:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/33845#issuecomment-2849444588",
            "id": 2849444588,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33845",
            "node_id": "IC_kwDOAPphoM6p1xLs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849444588/reactions"
            },
            "updated_at": "2025-05-04T21:24:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849444588",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The \"Expected behavior\" gives a nice tree, but doesn't say what the \"mutliple files\" or conditions are that it looks for. What are the conditions in that example?\n\nThe \"Details\" section describes the condition logic. The condition is \"if no marker is found, keep searching up. If a marker is found (e.g. `__init__.py`), keep looking for that marker at each parent directory. If a parent directory doesn't have the marker, we've gone too far and the previous directory is the root\". \n\nI'm not actually suggesting adding logic that specific. It's enough just to change the method of traversal. vim.fs.root and vim.fs.find have the same traversal behavior and that's the sticking point. This is the closest I that I think I can get using vim.fs.find in its current state.\n\n```lua\nlocal names = { \"__init__.py\", \"CMakeLists.txt\" }\nlocal source = \"/path/to/place/python3.11/site-packages/some_package/subfolder/more_subfolder/some_file.py\"\nlocal marker\nlocal previous\n\nlocal files = vim.fs.find(function(name, path)\n    if marker then\n        if vim.fn.filereadable(vim.fs.joinpath(path, marker)) ~= 1 then\n            return previous\n        end\n\n        return nil\n    end\n\n    if vim.tbl_contains(names, name) then\n        previous = path\n        marker = name\n\n        return nil\n    end\nend, {path=source, upward=true, type=\"file\"})\n\nlocal directory = vim.fs.dirname(files[1])\nprint('DEBUGPRINT[13]: root_test.lua:234: directory=' .. vim.inspect(directory))\nprint('DEBUGPRINT[14]: root_test.lua:235: previous=' .. vim.inspect(vim.fs.dirname(previous)))\n\n```\nExcept it doesn't work because it missing the project directory by one. Because by the time I can detect that we've gone past the current project, `vim.fs.find` returns that directory, not the previous one that I needed. e.g. \n\n- `source = \"/path/to/place/python3.11/site-packages/some_package/subfolder/more_subfolder/some_file.py\"`\n- (what I needed) `previous_directory = \"/path/to/place/python3.11/site-packages/some_package\"`\n- (what vim.fs.find returned) `directory = \"/path/to/place/python3.11/site-packages\"`\n\nAnyway, it's not a big deal. I'm getting around it with a custom loop\n\n```lua\nlocal found_yet = false\nlocal current = directory\nlocal previous = nil\n\nwhile current and previous ~= current do\n    local match = _P.get_match(current, names)\n\n    local result = get_callback_result()  -- Contains all the \"find marker etc etc logic\". This `get_callback_result` would instead be \n\n    if result then\n        return result  -- Return early because we found the project root\n    end\n\n    previous = current\n    current = vim.fs.dirname(current)\nend\n```\n\nIt'd just be nice if we could have a similar option in Neovim's functions.",
            "created_at": "2025-05-04T22:08:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/33845#issuecomment-2849465776",
            "id": 2849465776,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33845",
            "node_id": "IC_kwDOAPphoM6p12Ww",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849465776/reactions"
            },
            "updated_at": "2025-05-04T22:08:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849465776",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10103049?v=4",
                "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}",
                "followers_url": "https://api.github.com/users/ColinKennedy/followers",
                "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}",
                "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ColinKennedy",
                "id": 10103049,
                "login": "ColinKennedy",
                "node_id": "MDQ6VXNlcjEwMTAzMDQ5",
                "organizations_url": "https://api.github.com/users/ColinKennedy/orgs",
                "received_events_url": "https://api.github.com/users/ColinKennedy/received_events",
                "repos_url": "https://api.github.com/users/ColinKennedy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ColinKennedy",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm not actually suggesting adding logic that specific. It's enough just to change the method of traversal.\n\nThe problem is I don't get what is meant by  `search_method=\"by_directory\"`. Though I didn't read the 2 pages of code. Your last comment helps though.",
            "created_at": "2025-05-04T23:12:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/33845#issuecomment-2849489649",
            "id": 2849489649,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33845",
            "node_id": "IC_kwDOAPphoM6p18Lx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849489649/reactions"
            },
            "updated_at": "2025-05-04T23:12:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849489649",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It might be easier to think of it as `iter_method=\"by_directory\"` rather than \"search\". Right now `vim.fs.find` and `vim.fs.root` are basically `iter_method=\"by_file\"`. The `function(name, path) ... end` callback appears to run on every file in a directory. Anyway let me know if you have any other questions / concerns.",
            "created_at": "2025-05-04T23:20:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/33845#issuecomment-2849492640",
            "id": 2849492640,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33845",
            "node_id": "IC_kwDOAPphoM6p186g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849492640/reactions"
            },
            "updated_at": "2025-05-04T23:20:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849492640",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10103049?v=4",
                "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}",
                "followers_url": "https://api.github.com/users/ColinKennedy/followers",
                "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}",
                "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ColinKennedy",
                "id": 10103049,
                "login": "ColinKennedy",
                "node_id": "MDQ6VXNlcjEwMTAzMDQ5",
                "organizations_url": "https://api.github.com/users/ColinKennedy/orgs",
                "received_events_url": "https://api.github.com/users/ColinKennedy/received_events",
                "repos_url": "https://api.github.com/users/ColinKennedy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ColinKennedy",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ok got it. Your sample in https://github.com/neovim/neovim/issues/33845#issuecomment-2849465776 is close to what I was going to suggest.\n\nSo you want the root()/find() callback to receive a directory instead of the directory *contents*. That seems like a totally reasonable opts flag for both of those interfaces. \n\nLMK if I understood correctly, then I'll reword the issue title...",
            "created_at": "2025-05-04T23:28:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/33845#issuecomment-2849495570",
            "id": 2849495570,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33845",
            "node_id": "IC_kwDOAPphoM6p19oS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849495570/reactions"
            },
            "updated_at": "2025-05-04T23:29:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849495570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> So you want the root()/find() callback to receive a directory\n\nYep, exactly right. And the `fun` callback running once-per-directory to match. That would make those functions a lot more flexible for different types of projects",
            "created_at": "2025-05-05T01:12:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/33845#issuecomment-2849681590",
            "id": 2849681590,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33845",
            "node_id": "IC_kwDOAPphoM6p2rC2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849681590/reactions"
            },
            "updated_at": "2025-05-05T01:12:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849681590",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10103049?v=4",
                "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}",
                "followers_url": "https://api.github.com/users/ColinKennedy/followers",
                "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}",
                "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ColinKennedy",
                "id": 10103049,
                "login": "ColinKennedy",
                "node_id": "MDQ6VXNlcjEwMTAzMDQ5",
                "organizations_url": "https://api.github.com/users/ColinKennedy/orgs",
                "received_events_url": "https://api.github.com/users/ColinKennedy/received_events",
                "repos_url": "https://api.github.com/users/ColinKennedy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ColinKennedy",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33845/comments",
    "created_at": "2025-05-04T17:48:59Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33845/events",
    "html_url": "https://github.com/neovim/neovim/issues/33845",
    "id": 3038145728,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "file metadata/attributes, filenames, path manipulation",
            "id": 3386070083,
            "name": "filesystem",
            "node_id": "LA_kwDOAPphoM7J01RD",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filesystem"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33845/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM61FmzA",
    "number": 33845,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33845/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33845/timeline",
    "title": "vim.fs.root(), find() callbacks can receive directories instead of files",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-05-05T01:30:43Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33845",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10103049?v=4",
        "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}",
        "followers_url": "https://api.github.com/users/ColinKennedy/followers",
        "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}",
        "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ColinKennedy",
        "id": 10103049,
        "login": "ColinKennedy",
        "node_id": "MDQ6VXNlcjEwMTAzMDQ5",
        "organizations_url": "https://api.github.com/users/ColinKennedy/orgs",
        "received_events_url": "https://api.github.com/users/ColinKennedy/received_events",
        "repos_url": "https://api.github.com/users/ColinKennedy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ColinKennedy",
        "user_view_type": "public"
    }
}