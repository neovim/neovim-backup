{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\n# vim.str_byteindex/ vim.str_utfindex\nThere are several limitations to the current implementation of these functions\n\n1. They throw given out-of-range indexes\n\n   >*lua-error-handling*\n   >Lua functions may throw |lua-errors| for exceptional (unexpected) failures,\n   >which you can handle with |pcall()|.\n   >*lua-result-or-message*\n   >When failure is normal and expected, it's idiomatic to return `nil` which\n   >signals to the caller that failure is not \"exceptional\" and must be handled.\n\n\n   An invalid (often user/lsp-provided) index doesn't feel exceptional to me and should be handled by the caller.\n\n   `:h dev-error-patterns` suggests that `retval, errmsg` is the most preferable way to handle errors and I think that this is a good example of where this could be used\n \n2. They cannot accept an encoding\n    This leads to wrapper functions in the current LSP usageThis was identified as a potential improvement in #25272\n\n3. The current signatures are not extensible</summary>\n    * Calling: The function currently uses a fairly opaque boolean value to indicate to identify the encoding\n    * Returns: The fact it can throw means wrapping in pcalls.\n \n4. The current naming doesn't follow suggestions in `:h dev-naming` and I think `get` would be suitable\n\n## Proposal:\n\n### Common\n\nTo change the signatures to this level this would be a breaking change. And as such I would propose the following:\n\nCreate new functions of ```vim.str_getbyteindex()``` and ```vim.str_getutfindex()```\n\nThese functions would both take a ```string, opts``` signature where opts is a table with the following keys:\n* ```encoding?``` - The encoding to use, defaulting to utf-16\n* `index?` - The string index to find, defaulting to the length of the string\n\nThese functions should return ```retval, errmsg```, returning the index or nil. This would make the LSP handling code simpler\n\n### vim.str_getbyteindex()\n\nProposed signature:\n```lua\n---@param str string\n---@param opts { index?: integer, encoding?: \"utf-8\" | \"utf-16\" | \"utf-32\" }\n---@return integer? # UTF-8 translated byte index\n---@return string? # error messsage, if applicable\nfunction vim_str_getbyteindex(str, opts) end\n```\nThis means the LSP code could be as follows\n```lua\nreturn vim.str_getbyteindex(str, { index = 1, encoding = 'utf-16'}) or #str\n```\n\n### vim.str_getutfindex()\nProposed signature:\n```lua\n---@param str string\n---@param opts { index?: integer, encoding?: \"utf-8\" | \"utf-16\" | \"utf-32\" }\n---@return integer? # Translated UTF-8 index\n---@return string? # error message, if applicable\nfunction vim_str_getutfindex(str, opts) end\n```\n\n`str_utfindex()` currently has multiple return values for each encoding. Although this appears presently to just be a bit of a dance to get the right one from the return. I can't see anywhere at least in the Neovim codebase where this would result in needing two function calls\n\n## Questions:\n* Should the index be in the opts table? or should it be kept as the second argument?\n* What would the timeline be for deprecating the existing functions (as far as the Neovim code based they only seem to be used in `vim.region` (already deprecated) and the LSP code. But they are used in the plugin ecosystem.\n",
    "closed_at": "2024-10-23T13:42:12Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> An invalid (often user/lsp-provided) index doesn't feel exceptional to me and should be handled by the caller.\n\nIt is exceptional because it is the result of invalid inputs and not caused by any external factors. This is unlike functions in vim.uv which call out to the system and can error for various reasons which can't be predicted by the caller. In this case it is trivial for the caller to check beforehand if it is out of index.\n\nDo we know why the LSP util function checks this beforehand instead of throwing? Were there cases of responses from LSP returning incorrect indexes or was it added to mask other issues in the subsystem? In either case it is worth logging when this happens so either can be fixed properly.\n\nI also don't think we need to add an `opts` argument. This isn't the sort of function that needs extensibility. This is the kind of function that benefits most by being simple.",
            "created_at": "2024-10-14T07:31:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/30804#issuecomment-2410277334",
            "id": 2410277334,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30804",
            "node_id": "IC_kwDOAPphoM6PqenW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2410277334/reactions"
            },
            "updated_at": "2024-10-14T07:31:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2410277334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > An invalid (often user/lsp-provided) index doesn't feel exceptional to me and should be handled by the caller.\n> \n> It is exceptional because it is the result of invalid inputs and not caused by any external factors. This is unlike functions in vim.uv which call out to the system and can error for various reasons which can't be predicted by the caller. In this case it is trivial for the caller to check beforehand if it is out of index.\n> \nIt is, but it requires either a wrapper function or this to be done in each call. \n> Do we know why the LSP util function checks this beforehand instead of throwing? Were there cases of responses from LSP returning incorrect indexes or was it added to mask other issues in the subsystem? In either case it is worth logging when this happens so either can be fixed properly.\n> \nThere were some issues, but is also what the spec asks for.\n```\n    -- LSP spec: if character > line length, default to the line length.\n    -- https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#position\n```\n> I also don't think we need to add an `opts` argument. This isn't the sort of function that needs extensibility. This is the kind of function that benefits most by being simple.\n\nThe function isn't getting anymore complex, its just standardising the way the arguments are passed in line with the rest of the APi.\nThe code was implemented here #10688. Since 2019 there has been a lot of standardisation of the API with naming/return conventions. This is simply a proposal to bring this function inline with those standards.\n\n",
            "created_at": "2024-10-14T14:24:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/30804#issuecomment-2411421776",
            "id": 2411421776,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30804",
            "node_id": "IC_kwDOAPphoM6Pu2BQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2411421776/reactions"
            },
            "updated_at": "2024-10-14T14:24:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2411421776",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It is, but it requires either a wrapper function or this to be done in each call.\n\nThen add a wrapper, just ensure it remains private. That's going to be much more preferable to any breaking change, especially when such change isn't obviously an improvement.\n\n> The function isn't getting anymore complex\n\nAdding an `opts` field does make it more complex as every `opts` field requires a table allocation.\n\nIt is not the intention for every Nvim API function to contain an `opts` field, especially simple functions that are often called in a tight loop.",
            "created_at": "2024-10-14T14:58:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/30804#issuecomment-2411523617",
            "id": 2411523617,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30804",
            "node_id": "IC_kwDOAPphoM6PvO4h",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2411523617/reactions"
            },
            "updated_at": "2024-10-14T14:58:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2411523617",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > It is, but it requires either a wrapper function or this to be done in each call.\n> \n> Then add a wrapper, just ensure it remains private. That's going to be much more preferable to any breaking change, especially when such change isn't obviously an improvement.\n\nThere is already one.\n\nSo if we agree that is the approach then this can be closed and point 5 in #25272 can be marked as not needed \n",
            "created_at": "2024-10-14T15:20:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/30804#issuecomment-2411579930",
            "id": 2411579930,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30804",
            "node_id": "IC_kwDOAPphoM6Pvcoa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2411579930/reactions"
            },
            "updated_at": "2024-10-14T15:20:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2411579930",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I just looked at this a bit more closely, and the best path forward is less obvious.\n\n- Both functions return a (UTF-16, UTF-32) tuple. So no matter what we do, changing these functions will be a breaking change, unless we incorporate some overloading.\n\n- `_str_utfindex_enc` requires 2 calls to `str_utfindex` for the UTF-16/32 cases. This would be nice to avoid.\n\nSo despite my past comments, I actually think what you have in your PR is pretty close to what we should go for. But personally I think we should drop the `opts` route and just make everything a positional argument.\n\n```lua\nlocal col = vim.str_utfindex(line, encoding, [index, [no_out_of_range]])\n```\n\nWe can support the old versions by dispatching on the type of argument 2, and deprecating that form.\n\n```lua\nvim.str_utfindex(line)                            -- (utf-32 length, utf-16 length) - deprecated (can make it rerturn utf-16 length in he future)\nvim.str_utfindex(line, index)                     -- (utf-32 index, utf-16 index) - deprecated\nvim.str_utfindex(line, 'utf-16')                  -- utf-16 length\nvim.str_utfindex(line, 'utf-16', index)           -- utf-16 index\nvim.str_utfindex(line, 'utf-16', math.huge)       -- error: index out of range \nvim.str_utfindex(line, 'utf-16', math.huge, true) -- utf-16 length\n```\n\nThis will mean introducing some return type polymorphism (which I hate), but since the other form will be deprecated, we can prefer the new return types for the type annotations.\n\n@justinmk thoughts?",
            "created_at": "2024-10-14T16:03:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/30804#issuecomment-2411675761",
            "id": 2411675761,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30804",
            "node_id": "IC_kwDOAPphoM6Pv0Bx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2411675761/reactions"
            },
            "updated_at": "2024-10-14T16:04:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2411675761",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This will mean introducing some return type polymorphism (which I hate), but since the other form will be deprecated, we can prefer the new return types for the type annotations.\n\nYes that sounds good. \n\nSo work will continue in https://github.com/neovim/neovim/pull/30735 and the other PR can be closed? Hard to follow the delta between them.",
            "created_at": "2024-10-16T13:17:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/30804#issuecomment-2416816039",
            "id": 2416816039,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30804",
            "node_id": "IC_kwDOAPphoM6QDa-n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2416816039/reactions"
            },
            "updated_at": "2024-10-16T13:17:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2416816039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > This will mean introducing some return type polymorphism (which I hate), but since the other form will be deprecated, we can prefer the new return types for the type annotations.\n> \n> Yes that sounds good.\n> \n> So work will continue in [#30735](https://github.com/neovim/neovim/pull/30735) and the other PR can be closed? Hard to follow the delta between them.\n\nI think that the only difference is if we wrap the C functions or go for a pure Lua implementation. \n\nI think wrapping the existing code is simpler/cleaner for PR reviews, so we can revisit the Lua implementation later if necessary. I will mark other PRs as draft for now",
            "created_at": "2024-10-16T13:58:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/30804#issuecomment-2416930149",
            "id": 2416930149,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30804",
            "node_id": "IC_kwDOAPphoM6QD21l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2416930149/reactions"
            },
            "updated_at": "2024-10-17T06:39:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2416930149",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think that the only difference is if we wrap the C functions or go for a pure Lua implementation.\n\nYes, it's good practice to separate implementation changes separate from API changes when possible.",
            "created_at": "2024-10-16T14:15:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/30804#issuecomment-2416977884",
            "id": 2416977884,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30804",
            "node_id": "IC_kwDOAPphoM6QECfc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2416977884/reactions"
            },
            "updated_at": "2024-10-16T14:15:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2416977884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Most of this was resolved by https://github.com/neovim/neovim/pull/30735. If there is remaining open question, track it in a new issue.",
            "created_at": "2024-10-23T13:42:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/30804#issuecomment-2432242387",
            "id": 2432242387,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30804",
            "node_id": "IC_kwDOAPphoM6Q-RLT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2432242387/reactions"
            },
            "updated_at": "2024-10-23T13:42:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2432242387",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30804/comments",
    "created_at": "2024-10-13T20:12:38Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30804/events",
    "html_url": "https://github.com/neovim/neovim/issues/30804",
    "id": 2584238883,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30804/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 138,
        "created_at": "2023-12-07T23:09:35Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": "2025-03-15T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/41",
        "id": 10283236,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/41/labels",
        "node_id": "MI_kwDOAPphoM4AnOjk",
        "number": 41,
        "open_issues": 57,
        "state": "open",
        "title": "0.11",
        "updated_at": "2025-01-17T23:02:36Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/41"
    },
    "node_id": "I_kwDOAPphoM6aCFsj",
    "number": 30804,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30804/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30804/timeline",
    "title": "Future of vim.str_{byte,utf}index",
    "updated_at": "2025-01-17T15:34:12Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30804",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
        "events_url": "https://api.github.com/users/tris203/events{/privacy}",
        "followers_url": "https://api.github.com/users/tris203/followers",
        "following_url": "https://api.github.com/users/tris203/following{/other_user}",
        "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tris203",
        "id": 18444302,
        "login": "tris203",
        "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
        "organizations_url": "https://api.github.com/users/tris203/orgs",
        "received_events_url": "https://api.github.com/users/tris203/received_events",
        "repos_url": "https://api.github.com/users/tris203/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tris203",
        "user_view_type": "public"
    }
}