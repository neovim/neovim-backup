{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Neovim Version\r\n\r\n(nvim) ben@BeniMac2020 neovim % ./build/bin/nvim --version NVIM v0.6.0-dev+158-gd088066fa Build type: Debug LuaJIT 2.1.0-beta3 Compilation: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -DNVIM_TS_HAS_SET_MATCH_LIMIT -g -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wshadow -Wconversion -Wmissing-prototypes -Wimplicit-fallthrough -Wvla -fstack-protector-strong -fno-common -fdiagnostics-color=always -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -DMIN_LOG_LEVEL=1 -I/Users/ben/Development/neovim/build/config -I/Users/ben/Development/neovim/src -I/Users/ben/Development/neovim/.deps/usr/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3.sdk/usr/include -I/usr/local/opt/gettext/include -I/Users/ben/Development/neovim/build/src/nvim/auto -I/Users/ben/Development/neovim/build/include Compiled by ben@BeniMac2020.local  Features: +acl +iconv +tui See \":help feature-compile\"     system vimrc file: \"$VIM/sysinit.vim\"   fall-back for $VIM: \"/usr/local/share/nvim\"  Run :checkhealth for more info\r\n\r\n### Operating system/version:\r\n\r\nmacOS Big Sur (python 3.9.6 from pyenv built with PYTHON_CONFIGURE_OPTS=\"--enable-framework --with-address-sanitizer\"\r\n\r\n### Terminal name/version:\r\n\r\niTerm 2 3.4.8\r\n\r\n### TERM environment variable\r\n\r\nxterm-256color\r\n\r\n### Installation\r\n\r\nLocal debug build is required for the repro to get asan error. Reproduces in latest master and 0.4.4 (from homebrew) at least.\r\n\r\n### Steps to reproduce\r\n\r\nI have two repros:\r\n\r\n1. The issue [reported by the user](https://github.com/puremourning/vimspector/issues/441)\r\n2. A minimal production of _an_ ASAN error which is triggered always when using the python provider\r\n\r\nUnfortunately I have been unable to find a minimal reproduction that reliably crashes the python provider host for a stock python build, but I was able to trivial generate ASAN errors with a sanitised python build.\r\n\r\n### Original issue\r\n\r\nThis is trivially reproduced as follows:\r\n\r\n1. in a temporary directory `git clone https://github.com/puremourning/vimspector && cd vimspector`\r\n2. `nvim -Nu support/minimal_vimrc`\r\n3. `:VimspectorInstall vscode-bash-debug` (note this will only modify the current directory, it won't spam your system!)\r\n4. `:edit support/test/bash/test_script`\r\n5. `<F5>`\r\n6. `1<CR><CR>` (select \"Run Current Script\"), (just accept the default for `args`)\r\n7. `:VimspectorReset`\r\n\r\nThe result is as follows:\r\n\r\n```\r\n\r\n\r\nError detected while processing function <SNR>42__OnCommandEvent[61]..provider#python3#Call:\r\nline   18:\r\nError invoking 'python_execute' on channel 3 (python3-script-host):\r\nch 3 was closed by the client\r\nPress ENTER or type command to continue\r\n```\r\n\r\n### Minimal reproduction of _a_ problem\r\n\r\nInvestigating this, I wrote up this gist: https://gist.github.com/puremourning/06991921b535d82228c9272ad3031db9\r\n\r\nIn order to reproduce _a_ possibly related problem:\r\n\r\n1. Build Python 3.6.9 with `--with-address-sanitizer` (I used pyenv, as in `PYTHON_CONFIGURE_OPTS=\"--enable-framework --with-address-sanitizer pyenv install -g 3.6.9`. this creates a 3.6.9-debug pyenv.\r\n2. make that your current python e.g. `pyenv shell 3.6.9-debug` (I actually used pyenv-virtualenv, but process is idem)\r\n3. install pynvim `pip install neovim` (i used latest master with `pip install -e .`)\r\n4. `nvim -Nu NONE -c 'py3 print(\"test\")`\r\n\r\nResult:\r\n\r\n```\r\n\r\nError detected while processing function provider#python3#Call:\r\nline   18:\r\nError invoking 'python_execute' on channel 3 (python3-script-host):\r\nch 3 was closed by the client\r\nPress ENTER or type command to continue\r\n```\r\n\r\nTo get the ASAN output, I had to apply this patch to the provider code. https://gist.github.com/puremourning/06991921b535d82228c9272ad3031db9#gistcomment-3866805\r\n\r\n\r\n\r\n\r\n\r\n### Vim\r\n\r\nyes, vim works fine\r\n\r\n### Expected behavior\r\n\r\nNo python provider crash, vimspector and minimal example work.\r\n\r\n### Actual behavior\r\n\r\nAs above.\r\n\r\nthe ASAN report for the minimal case is: https://gist.github.com/puremourning/d4f9ed79f39633b0e6837c1a0e7977e8\r\n\r\nIt's not possible to get the ASAN output for the vimspector reproduction because the provider crashes as soon as it is used, so it isn't possible to get far enough. It might be possible by adding CFLAGS='-fno-sanitize-recover=memory` when building python, though I have not done this.\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Hmm crash inside `greenlet` module, could be nasty. Does it have to be python 3.6.9 as opposed to 3.6.14 ? I would be good to test with the latest bugfixes to the relevant python version.",
            "created_at": "2021-08-20T11:39:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/15437#issuecomment-902631812",
            "id": 902631812,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15437",
            "node_id": "IC_kwDOAPphoM41zRGE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902631812/reactions"
            },
            "updated_at": "2021-08-20T11:39:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902631812",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "sorry I have clearly typo'd badly. the version of python I was testing was \r\n\r\n```\r\n(nvim) ben@BeniMac2020 neovim % python --version\r\nPython 3.9.6\r\n```",
            "created_at": "2021-08-20T11:41:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/15437#issuecomment-902632862",
            "id": 902632862,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15437",
            "node_id": "IC_kwDOAPphoM41zRWe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902632862/reactions"
            },
            "updated_at": "2021-08-20T11:41:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902632862",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10584846?v=4",
                "events_url": "https://api.github.com/users/puremourning/events{/privacy}",
                "followers_url": "https://api.github.com/users/puremourning/followers",
                "following_url": "https://api.github.com/users/puremourning/following{/other_user}",
                "gists_url": "https://api.github.com/users/puremourning/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/puremourning",
                "id": 10584846,
                "login": "puremourning",
                "node_id": "MDQ6VXNlcjEwNTg0ODQ2",
                "organizations_url": "https://api.github.com/users/puremourning/orgs",
                "received_events_url": "https://api.github.com/users/puremourning/received_events",
                "repos_url": "https://api.github.com/users/puremourning/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/puremourning/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/puremourning/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/puremourning",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It could be a false positive according to\r\n\r\n> HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\r\n      (longjmp and C++ exceptions *are* supported)\r\n\r\n greenlet is doing that. you could try the following: (from https://github.com/google/sanitizers/wiki/AddressSanitizer)\r\n\r\n> To enable continue-after-error, compile with -fsanitize-recover=address and then run your code with ASAN_OPTIONS=halt_on_error=0.\r\n\r\nThen ASAN will not stop the program until the unrecoverable error (crash in the release build).",
            "created_at": "2021-08-20T11:48:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/15437#issuecomment-902636039",
            "id": 902636039,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15437",
            "node_id": "IC_kwDOAPphoM41zSIH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902636039/reactions"
            },
            "updated_at": "2021-08-20T11:48:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902636039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "good point. the result is rather annoyingly that ASAN barfs at a (different) but earlier point:\r\n\r\n```\r\n=================================================================\r\n==3207==AddressSanitizer CHECK failed: /AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1205.0.22.11/compiler-rt/lib/asan/asan_thread.cpp:356 \"((ptr[0] == kCurrentStackFrameMagic)) != (0)\" (0x0, 0x0)\r\n    #0 0x10d4d508e in __asan::AsanCheckFailed(char const*, int, char const*, unsigned long long, unsigned long long)+0x5e (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5108e)\r\n    #1 0x10d4ebb37 in __sanitizer::CheckFailed(char const*, int, char const*, unsigned long long, unsigned long long)+0x57 (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x67b37)\r\n    #2 0x10d4d809e in __asan::AsanThread::GetStackFrameAccessByAddr(unsigned long, __asan::AsanThread::StackFrameAccess*)+0x37e (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5409e)\r\n    #3 0x10d4932e7 in __asan::AddressDescription::AddressDescription(unsigned long, unsigned long, bool)+0xf7 (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf2e7)\r\n    #4 0x10d494e8e in __asan::ErrorGeneric::ErrorGeneric(unsigned int, unsigned long, unsigned long, unsigned long, unsigned long, bool, unsigned long)+0x3e (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x10e8e)\r\n    #5 0x10d4d241f in __asan::ReportGenericError(unsigned long, unsigned long, unsigned long, unsigned long, bool, unsigned long, unsigned int, bool)+0x45f (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4e41f)\r\n    #6 0x10d4d349a in __asan_report_store8_noabort+0x2a (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4f49a)\r\n    #7 0x10c3f2118 in float_sub+0x198 (Python:x86_64+0x332118)\r\n    #8 0x10c2fca28 in binary_op1+0x428 (Python:x86_64+0x23ca28)\r\n    #9 0x10c2fc0b9 in binary_op+0x29 (Python:x86_64+0x23c0b9)\r\n    #10 0x10c2fc418 in PyNumber_Subtract+0x28 (Python:x86_64+0x23c418)\r\n    #11 0x10c7dcc27 in _PyEval_EvalFrameDefault+0x83d7 (Python:x86_64+0x71cc27)\r\n    #12 0x10c7d4812 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x714812)\r\n    #13 0x10c814267 in _PyEval_EvalCode+0x2ab7 (Python:x86_64+0x754267)\r\n    #14 0x10c374e8e in _PyFunction_Vectorcall+0xdae (Python:x86_64+0x2b4e8e)\r\n    #15 0x10c3714c2 in _PyObject_FastCallDictTstate+0x482 (Python:x86_64+0x2b14c2)\r\n    #16 0x10c375aba in _PyObject_Call_Prepend+0x43a (Python:x86_64+0x2b5aba)\r\n    #17 0x10c541400 in slot_tp_init+0x1c0 (Python:x86_64+0x481400)\r\n    #18 0x10c50e33c in type_call+0x80c (Python:x86_64+0x44e33c)\r\n    #19 0x10c372042 in _PyObject_MakeTpCall+0x592 (Python:x86_64+0x2b2042)\r\n    #20 0x10c818d5a in _PyObject_VectorcallTstate+0x15a (Python:x86_64+0x758d5a)\r\n    #21 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #22 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #23 0x10c800f55 in _PyEval_EvalFrameDefault+0x2c705 (Python:x86_64+0x740f55)\r\n    #24 0x10c7d4812 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x714812)\r\n    #25 0x10c814267 in _PyEval_EvalCode+0x2ab7 (Python:x86_64+0x754267)\r\n    #26 0x10c374e8e in _PyFunction_Vectorcall+0xdae (Python:x86_64+0x2b4e8e)\r\n    #27 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #28 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #29 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #30 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #31 0x10c7d4812 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x714812)\r\n    #32 0x10c814267 in _PyEval_EvalCode+0x2ab7 (Python:x86_64+0x754267)\r\n    #33 0x10c374e8e in _PyFunction_Vectorcall+0xdae (Python:x86_64+0x2b4e8e)\r\n    #34 0x10c37fd20 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x2bfd20)\r\n    #35 0x10c37d700 in method_vectorcall+0x700 (Python:x86_64+0x2bd700)\r\n    #36 0x10c3739a4 in PyVectorcall_Call+0x724 (Python:x86_64+0x2b39a4)\r\n    #37 0x10c373e6d in _PyObject_Call+0x1bd (Python:x86_64+0x2b3e6d)\r\n    #38 0x10c374091 in PyObject_Call+0x31 (Python:x86_64+0x2b4091)\r\n    #39 0x10c811432 in do_call_core+0xf12 (Python:x86_64+0x751432)\r\n    #40 0x10c802201 in _PyEval_EvalFrameDefault+0x2d9b1 (Python:x86_64+0x742201)\r\n    #41 0x10c7d4812 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x714812)\r\n    #42 0x10c814267 in _PyEval_EvalCode+0x2ab7 (Python:x86_64+0x754267)\r\n    #43 0x10c374e8e in _PyFunction_Vectorcall+0xdae (Python:x86_64+0x2b4e8e)\r\n    #44 0x10c37fd20 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x2bfd20)\r\n    #45 0x10c37d3b1 in method_vectorcall+0x3b1 (Python:x86_64+0x2bd3b1)\r\n    #46 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #47 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #48 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #49 0x10c800f55 in _PyEval_EvalFrameDefault+0x2c705 (Python:x86_64+0x740f55)\r\n    #50 0x10c7d4812 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x714812)\r\n    #51 0x10c814267 in _PyEval_EvalCode+0x2ab7 (Python:x86_64+0x754267)\r\n    #52 0x10c374e8e in _PyFunction_Vectorcall+0xdae (Python:x86_64+0x2b4e8e)\r\n    #53 0x10c37fd20 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x2bfd20)\r\n    #54 0x10c37d3b1 in method_vectorcall+0x3b1 (Python:x86_64+0x2bd3b1)\r\n    #55 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #56 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #57 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #58 0x10c800855 in _PyEval_EvalFrameDefault+0x2c005 (Python:x86_64+0x740855)\r\n    #59 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #60 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #61 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #62 0x10c37fd20 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x2bfd20)\r\n    #63 0x10c37d3b1 in method_vectorcall+0x3b1 (Python:x86_64+0x2bd3b1)\r\n    #64 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #65 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #66 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #67 0x10c800f55 in _PyEval_EvalFrameDefault+0x2c705 (Python:x86_64+0x740f55)\r\n    #68 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #69 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #70 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #71 0x10c37fd20 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x2bfd20)\r\n    #72 0x10c37d3b1 in method_vectorcall+0x3b1 (Python:x86_64+0x2bd3b1)\r\n    #73 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #74 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #75 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #76 0x10c800855 in _PyEval_EvalFrameDefault+0x2c005 (Python:x86_64+0x740855)\r\n    #77 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #78 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #79 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #80 0x10c37fd20 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x2bfd20)\r\n    #81 0x10c37d3b1 in method_vectorcall+0x3b1 (Python:x86_64+0x2bd3b1)\r\n    #82 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #83 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #84 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #85 0x10c800855 in _PyEval_EvalFrameDefault+0x2c005 (Python:x86_64+0x740855)\r\n    #86 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #87 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #88 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #89 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #90 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #91 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #92 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #93 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #94 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #95 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #96 0x10c37fd20 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x2bfd20)\r\n    #97 0x10c37d540 in method_vectorcall+0x540 (Python:x86_64+0x2bd540)\r\n    #98 0x10c8790b0 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x7b90b0)\r\n    #99 0x10c878a96 in context_run+0x126 (Python:x86_64+0x7b8a96)\r\n    #100 0x10c4b01e4 in cfunction_vectorcall_FASTCALL_KEYWORDS+0x174 (Python:x86_64+0x3f01e4)\r\n    #101 0x10c3739a4 in PyVectorcall_Call+0x724 (Python:x86_64+0x2b39a4)\r\n    #102 0x10c373e6d in _PyObject_Call+0x1bd (Python:x86_64+0x2b3e6d)\r\n    #103 0x10c374091 in PyObject_Call+0x31 (Python:x86_64+0x2b4091)\r\n    #104 0x10c8109ee in do_call_core+0x4ce (Python:x86_64+0x7509ee)\r\n    #105 0x10c802201 in _PyEval_EvalFrameDefault+0x2d9b1 (Python:x86_64+0x742201)\r\n    #106 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #107 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #108 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #109 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #110 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #111 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #112 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #113 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #114 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #115 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #116 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #117 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #118 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #119 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #120 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #121 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #122 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #123 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #124 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #125 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #126 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #127 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #128 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #129 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #130 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #131 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #132 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #133 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #134 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #135 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #136 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #137 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #138 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #139 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #140 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #141 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #142 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #143 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #144 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #145 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #146 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #147 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #148 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #149 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #150 0x10c374628 in _PyFunction_Vectorcall+0x548 (Python:x86_64+0x2b4628)\r\n    #151 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #152 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #153 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #154 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #155 0x10c7d4812 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x714812)\r\n    #156 0x10c814267 in _PyEval_EvalCode+0x2ab7 (Python:x86_64+0x754267)\r\n    #157 0x10c374e8e in _PyFunction_Vectorcall+0xdae (Python:x86_64+0x2b4e8e)\r\n    #158 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #159 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #160 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #161 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #162 0x10c7d4812 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x714812)\r\n    #163 0x10c814267 in _PyEval_EvalCode+0x2ab7 (Python:x86_64+0x754267)\r\n    #164 0x10c374e8e in _PyFunction_Vectorcall+0xdae (Python:x86_64+0x2b4e8e)\r\n    #165 0x10c37fd20 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x2bfd20)\r\n    #166 0x10c37d3b1 in method_vectorcall+0x3b1 (Python:x86_64+0x2bd3b1)\r\n    #167 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #168 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #169 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #170 0x10c8017b7 in _PyEval_EvalFrameDefault+0x2cf67 (Python:x86_64+0x7417b7)\r\n    #171 0x10c7d4812 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x714812)\r\n    #172 0x10c814267 in _PyEval_EvalCode+0x2ab7 (Python:x86_64+0x754267)\r\n    #173 0x10c374e8e in _PyFunction_Vectorcall+0xdae (Python:x86_64+0x2b4e8e)\r\n    #174 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #175 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #176 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #177 0x10c800996 in _PyEval_EvalFrameDefault+0x2c146 (Python:x86_64+0x740996)\r\n    #178 0x10c379e32 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x2b9e32)\r\n    #179 0x10c375118 in function_code_fastcall+0x1f8 (Python:x86_64+0x2b5118)\r\n    #180 0x10c374969 in _PyFunction_Vectorcall+0x889 (Python:x86_64+0x2b4969)\r\n    #181 0x10c818d80 in _PyObject_VectorcallTstate+0x180 (Python:x86_64+0x758d80)\r\n    #182 0x10c80fe59 in PyObject_Vectorcall+0x39 (Python:x86_64+0x74fe59)\r\n    #183 0x10c810116 in call_function+0x2b6 (Python:x86_64+0x750116)\r\n    #184 0x10c800855 in _PyEval_EvalFrameDefault+0x2c005 (Python:x86_64+0x740855)\r\n    #185 0x10c7d4812 in _PyEval_EvalFrame+0x92 (Python:x86_64+0x714812)\r\n    #186 0x10c814267 in _PyEval_EvalCode+0x2ab7 (Python:x86_64+0x754267)\r\n    #187 0x10c815abb in _PyEval_EvalCodeWithName+0x12b (Python:x86_64+0x755abb)\r\n    #188 0x10c7d473f in PyEval_EvalCodeEx+0x15f (Python:x86_64+0x71473f)\r\n    #189 0x10c7d45cd in PyEval_EvalCode+0x5d (Python:x86_64+0x7145cd)\r\n    #190 0x10c942d42 in run_eval_code_obj+0x162 (Python:x86_64+0x882d42)\r\n    #191 0x10c93e7dc in run_mod+0xcc (Python:x86_64+0x87e7dc)\r\n    #192 0x10c93c154 in PyRun_StringFlags+0x154 (Python:x86_64+0x87c154)\r\n    #193 0x10c93bfa4 in PyRun_SimpleStringFlags+0x64 (Python:x86_64+0x87bfa4)\r\n    #194 0x10c9cff70 in pymain_run_command+0xb0 (Python:x86_64+0x90ff70)\r\n    #195 0x10c9ce8a4 in pymain_run_python+0x624 (Python:x86_64+0x90e8a4)\r\n    #196 0x10c9ce081 in Py_RunMain+0x131 (Python:x86_64+0x90e081)\r\n    #197 0x10c9cf3a3 in pymain_main+0x2f3 (Python:x86_64+0x90f3a3)\r\n    #198 0x10c9cf651 in Py_BytesMain+0x211 (Python:x86_64+0x90f651)\r\n    #199 0x10c0b6f51  (Python:x86_64+0x100003f51)\r\n    #200 0x7fff203fef5c in start+0x0 (libdyld.dylib:x86_64+0x15f5c)\r\n\r\n\r\n```",
            "created_at": "2021-08-20T11:58:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/15437#issuecomment-902640733",
            "id": 902640733,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15437",
            "node_id": "IC_kwDOAPphoM41zTRd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902640733/reactions"
            },
            "updated_at": "2021-08-20T11:58:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902640733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10584846?v=4",
                "events_url": "https://api.github.com/users/puremourning/events{/privacy}",
                "followers_url": "https://api.github.com/users/puremourning/followers",
                "following_url": "https://api.github.com/users/puremourning/following{/other_user}",
                "gists_url": "https://api.github.com/users/puremourning/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/puremourning",
                "id": 10584846,
                "login": "puremourning",
                "node_id": "MDQ6VXNlcjEwNTg0ODQ2",
                "organizations_url": "https://api.github.com/users/puremourning/orgs",
                "received_events_url": "https://api.github.com/users/puremourning/received_events",
                "repos_url": "https://api.github.com/users/puremourning/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/puremourning/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/puremourning/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/puremourning",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is `clang-1205.0.22.11` a recent version? (outside of fruit company, we use clang versions like 11.0, 12.0, 13.0)",
            "created_at": "2021-08-20T12:01:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/15437#issuecomment-902641860",
            "id": 902641860,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15437",
            "node_id": "IC_kwDOAPphoM41zTjE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902641860/reactions"
            },
            "updated_at": "2021-08-20T12:01:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902641860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "it's the latest AppleClang from Xcode 12\r\n\r\n```\r\n(nvim-asan-396) ben@BeniMac2020 neovim % clang --version\r\nApple clang version 12.0.5 (clang-1205.0.22.11)\r\n```\r\n\r\nit's likely more greenlet weirdness https://github.com/google/sanitizers/issues/1010",
            "created_at": "2021-08-20T12:03:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/15437#issuecomment-902642817",
            "id": 902642817,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15437",
            "node_id": "IC_kwDOAPphoM41zTyB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902642817/reactions"
            },
            "updated_at": "2021-08-20T12:03:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/902642817",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10584846?v=4",
                "events_url": "https://api.github.com/users/puremourning/events{/privacy}",
                "followers_url": "https://api.github.com/users/puremourning/followers",
                "following_url": "https://api.github.com/users/puremourning/following{/other_user}",
                "gists_url": "https://api.github.com/users/puremourning/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/puremourning",
                "id": 10584846,
                "login": "puremourning",
                "node_id": "MDQ6VXNlcjEwNTg0ODQ2",
                "organizations_url": "https://api.github.com/users/puremourning/orgs",
                "received_events_url": "https://api.github.com/users/puremourning/received_events",
                "repos_url": "https://api.github.com/users/puremourning/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/puremourning/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/puremourning/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/puremourning",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/15437/comments",
    "created_at": "2021-08-20T10:26:36Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/15437/events",
    "html_url": "https://github.com/neovim/neovim/issues/15437",
    "id": 975480106,
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "Needs a third-party / external change or fix",
            "id": 101945532,
            "name": "status:blocked-external",
            "node_id": "MDU6TGFiZWwxMDE5NDU1MzI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/status:blocked-external"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 144672485,
            "name": "provider",
            "node_id": "MDU6TGFiZWwxNDQ2NzI0ODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/provider"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "issue reporting a crash or segfault",
            "id": 435854234,
            "name": "bug-crash",
            "node_id": "MDU6TGFiZWw0MzU4NTQyMzQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-crash"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/15437/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU5NzU0ODAxMDY=",
    "number": 15437,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/15437/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/15437/timeline",
    "title": "Python host crash with vimspector",
    "updated_at": "2025-01-19T11:43:56Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/15437",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10584846?v=4",
        "events_url": "https://api.github.com/users/puremourning/events{/privacy}",
        "followers_url": "https://api.github.com/users/puremourning/followers",
        "following_url": "https://api.github.com/users/puremourning/following{/other_user}",
        "gists_url": "https://api.github.com/users/puremourning/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/puremourning",
        "id": 10584846,
        "login": "puremourning",
        "node_id": "MDQ6VXNlcjEwNTg0ODQ2",
        "organizations_url": "https://api.github.com/users/puremourning/orgs",
        "received_events_url": "https://api.github.com/users/puremourning/received_events",
        "repos_url": "https://api.github.com/users/puremourning/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/puremourning/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/puremourning/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/puremourning",
        "user_view_type": "public"
    }
}