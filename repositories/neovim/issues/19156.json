{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "A lot of our standard plugins run into the question of how to allow consumers to handle an event without clobbering each other. We have things like `vim.paste()` where the idea is \"you can choose exactly one way to do this\", and things like Nvim LSP handlers where `vim.lsp.with()` tries to provide some composition.\n\n# Paradigms\n\nTo avoid going in circles let's write down the current conventions (\"paradigms\"). Then when adding an interface or a feature, pick one from the list, and then use the existing mechanism for achieving that, instead of reinventing it. Also: do we actually need _all_ of these interfaces, can we eliminate any? \n\n1. \"provider\": single handler, may return a response\n    - examples: `'tagfunc'`, `vim.paste`, clipboard, `:py`, etc.\n    - aka \"callback\" in narrow ad-hoc contexts\n    - mechanism: `vim.foo`\n        - does not \"fan out\".\n        - can compose by using the `old = vim.foo` trick.\n1. \"callback\", \"attach\": multiple subscribers (\"fan out\" / multicast, no response)\n    - mechanism: callbacks hooked into an ad-hoc registry\n    - examples: `vim.on_foo()`, `vim.ui_attach()`, â€¦\n    - related:  multicast EventEmitter: [vscode](https://code.visualstudio.com/api/references/vscode-api#EventEmitter&lt;T&gt;), [C#](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/event)\n1. \"event handler\": multiple subscribers (\"fan out\", no response)\n    - mechanism: autocmds \n    - mechanism: callbacks associated with a namespace (see `nvim_set_decoration_provider`)\n    - related:  multicast EventEmitter: [vscode](https://code.visualstudio.com/api/references/vscode-api#EventEmitter&lt;T&gt;), [C#](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/event)\n1. \"RPC notification\": e.g. UI events\n    - does it make sense to also use the autocmd system as the interface for RPC notifications?   e.g. instead of `nvim_buf_attach`, buf-update events would just be `nvim_create_autocmd('BufUpdate',...)`\n\n# Discussion\n\nWhat do we need in the autocmd system so that it fully solves the use-case of plugins or subsystems that want to support multiple subscribers to arbtirary plugin-defined events?\n\n- performance\n- usability\n- visibility\n- debuggability\n\n`vim.on_key` implements its own quasi-event system by using namespaces (which is not a bad idea, but raises the question of whether we should try to make it easier to use the builtin event (autocmd) system instead of introducing these inner platforms). Using the event system (autocmds) allows us to focus on improving the performance, usability, visibility and debuggability of that one system instead of partially reinventing it over and over.\n\nPlugins can \"namespace\" events via `augroup`. We could also allow `nvim_create_namespace()` there?\n\nvia @mfussenegger : \n\n> * With multiple clients it's often required to aggregate the results from all clients before doing something with the results, ... (E.g. vim.lsp.buf.references: gather all references, then set quickfix list _once_)\n> * For high level functionality a simple request-response model is often not enough. Many LSP actions require multiple steps: code actions, rename, call hierarchy/incoming/outgoing calls.\n\n\n\n\n# Done\n\n- `nvim_get_autocmds()`\n- `nvim_create_autocmd()`\n- `nvim_create_autocmd()`\n\n# Missing\n\n1. Do we need a new event/autocmd similar to `User` ?\n2. \"Visibility\":  add something like `nvim_inspect_ns`, which could list everything a particular namespace is used for.\n3. use autocmd system as the interface for RPC notifications? \n    - e.g. instead of `nvim_buf_attach`, buf-update events would just be `nvim_create_autocmd('BufUpdate',...)`\n4. Allow `nvim_create_namespace()` as an `augroup` ?\n5. Ability to \"compose\" handlers? `vim.lsp.with()` or ...?\n6. The _aggregation_ use-case mentioned by @mfussenegger above, implies that we might need _dependency modeling_ of events.\n    - Could be done with a simple map-of-maps (disallow circular dependencies). But is it really needed?\n\n# Proposal: `nvim_on`, `vim.on` ?\n\n- TODO: gather coherent proposal from https://github.com/neovim/neovim/pull/21811#issuecomment-1383991552\n- user-defined \"scopes\" (namespaces)\n    - https://github.com/neovim/neovim/issues/992#issuecomment-2577779050\n- events can be keyed on channels (a new scope, like buf/tab/win scope)\n- eliminate `nvim_create_augroup` by using `nvim_create_namespace` instead ?\n- For \"providers\" or handlers, prefer `vim.handlers.foo()` and *deprecate* the following:\n    - `'foofunc'` (example: 'tagfunc')\n    - the old `:help provider` mechanism (example: `:help provider-clipboard`)\n\n---\n\nsee also:\n\n- https://github.com/neovim/neovim/issues/16810",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "My 2 cents.\r\n\r\nI very much **like** the interface for `nvim_buf_attach` and `nvim_set_decoration_provider`:\r\n- Each provide several callbacks you can optionally choose to implement\r\n- Each callback has a specially defined set of arguments specific to that callback which are easy to document, use and understand.\r\n- The API supports options to control how the callbacks work. E.g. `nvim_buf_attach` has the `{send_buffer}` flag. \r\n-  Callbacks can control how other callbacks are called. E.g. returning `false` for `on_win` disables the `on_line` callbacks, but only for that redraw. \r\n\r\nI have always **disliked** the autocmd system. Despite how powerful it is, it's design is bad IMO:\r\n- the design of `v:event` is incredibly clumsy and desparately needs to be replaced.\r\n- autocmds cannot be configured like the above callback API's can. You basically subscribe to a specific event and only have limited control via things like `++once` and `<buffer=*>`.\r\n- every event has to conform to the same shape which leads to some events not using, or poorly overloading, specific fields. E.g. `{aupat}`, `<afile>`.\r\n\r\n> e.g. instead of nvim_buf_attach, buf-update events would just be nvim_create_autocmd('BufUpdate',...)\r\n\r\nI really don't think this will work / is a good idea. `nvim_buf_attach` implements many different kinds of update callbacks which shouldn't be shoved into a single autocmd event. You would need a different event for each callback: `BufUpdateOnLines`, `BufUpdateOnBytes`, `BufUpdateOnChangedTick`, etc. \r\n\r\nAdditionally it also has the fields `{send_buffer}`, `utf_size` and `preview`, which the autocmd system can't currently support.\r\n\r\n> Allow nvim_create_namespace() as an augroup ?\r\n\r\nThis seems reasonable.",
            "created_at": "2022-06-30T16:50:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/19156#issuecomment-1171457413",
            "id": 1171457413,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19156",
            "node_id": "IC_kwDOAPphoM5F0wWF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1171457413/reactions"
            },
            "updated_at": "2022-06-30T20:39:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1171457413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">> Allow nvim_create_namespace() as an augroup ?\r\n> This seems reasonable.\r\n\r\nThis has been requested before, but needs to be thought through _very_ well or it will turn into a mess where you're never clear whether an autocommand (possibly created by a plugin) needs to be accessed through a group or a namespace, or risk conflating (and confusing) two distinct things.",
            "created_at": "2022-06-30T16:59:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/19156#issuecomment-1171465574",
            "id": 1171465574,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19156",
            "node_id": "IC_kwDOAPphoM5F0yVm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1171465574/reactions"
            },
            "updated_at": "2022-06-30T16:59:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1171465574",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Nice comments! Those are some good concrete examples.\r\n\r\n> You would need a different event for each callback: `BufUpdateOnLines`, `BufUpdateOnBytes`, `BufUpdateOnChangedTick`, etc.\r\n\r\nWould that be bad though? We could introduce a different naming convention, e.g. `buf_update.on_lines`. We can fix the ergonomics of the autocmd (per-event params + fields). For things like `nvim_buf_attach`, we don't want to keep rebuilding that same system, right? It's hard to inspect (compare `:au Foo` which lists all \"Foo\" handlers), and there's no common tooling.\r\n\r\nThe mechanics can be figured out, what I want to be sure about is \r\n\r\n1. is \"event pub/sub\" vs \"provider\" the right ontology\r\n2. is `buf_attach`  fundamentally a different concept than `au BufUpdate <buffer>`? (right now it's _ergonomically_ different, but can we fix that?)",
            "created_at": "2022-06-30T20:30:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/19156#issuecomment-1171646912",
            "id": 1171646912,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19156",
            "node_id": "IC_kwDOAPphoM5F1enA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1171646912/reactions"
            },
            "updated_at": "2022-06-30T20:32:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1171646912",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Would that be bad though? We could introduce a different naming convention, e.g. buf_update.on_lines. \r\n\r\nI don't think it would be an improvement to what we have now. Having one rigid system that does everything bad-to-ok, is worse (IMO) than having a few different specialised systems that do things very well.\r\n\r\n> We can fix the ergonomics of the autocmd (per-event params + fields).\r\n\r\nI'm still not sure how you would fix autocmds to get the same coupled behaviours as `buf_attach/decor` callbacks (one callback changing how others are called).\r\n\r\n>  For things like nvim_buf_attach, we don't want to keep rebuilding that same system, right?\r\n\r\nStuff like `nvim_set_decoration_provider` and `nvim_buf_attach` aren't quite the same systems as the behemoth of autocmds. Their implementation is much simpler and they re-use all the same components anyway (`kvec`, API objects, etc). From my experience, it's all been quite easy to work on and extend.\r\n\r\nI think the biggest benefit of the callback API is the fact they are completely specialised to their application as opposed to fitting in to some large generalised framework that can't quite accomodate everything.\r\n\r\n> It's hard to inspect (compare :au Foo which lists all \"Foo\" handlers), and there's no common tooling.\r\n\r\nautocmds that provide Lua callbacks are also hard to inspect. There is the `desc` field, but it doesn't quite give you the same effect as the old `:au Foo` usage with viml commands. We could add something like `nvim_inspect_ns`, which could list everything a particular namespace is used for.\r\n\r\nOn the note of tooling, LSP's work much better with _providers_ since the callback information (args and fields) is all known. E.g. `vim.api.nvim_buf_attach<tab>` is much more friendly than `vim.api.nvim_create_autocmd<tab>`. They also play nicer with Teal too; it isn't posibble to type a very generalised callback field. \r\n\r\n> 2. is buf_attach fundamentally a different concept than au BufUpdate <buffer>? (right now it's ergonomically different, but can we fix that?)\r\n\r\nBoth have their equivalent analogues (more or less) and you can force one to be the other, but this all boils down to ergonomics.\r\n\r\nAgain, just my IMO, but as someone who has written quite a few plugins now using all of these API's, I would definitely prefer to go the _provider_ route going forward. Tbh, that's partly the reason why I've continued to make them; it's been a much better experience.\r\n\r\nAutocmds have their place as a generalised framework for miscalenouse events that don't deserve a first-class API.",
            "created_at": "2022-06-30T21:33:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/19156#issuecomment-1171699946",
            "id": 1171699946,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19156",
            "node_id": "IC_kwDOAPphoM5F1rjq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1171699946/reactions"
            },
            "updated_at": "2022-06-30T21:33:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1171699946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We could add something like nvim_inspect_ns, which could list everything a particular namespace is used for.\r\n\r\n+1, added to list",
            "created_at": "2022-06-30T21:40:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/19156#issuecomment-1171704504",
            "id": 1171704504,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19156",
            "node_id": "IC_kwDOAPphoM5F1sq4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1171704504/reactions"
            },
            "updated_at": "2022-06-30T21:40:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1171704504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've only skimmed through the comments, so not sure if I'm not repeating something that was already said, but for me one problem with autocommands/events is that they can be silenced. Either with `eventignore` option or by triggering an event inside an autocommand that isn't `++nested`.\r\n\r\nSilencing events was perfectly fine for basic use cases until now, but this becomes a real problem for more complicated stuff, like if you want to extend the UI and you need to reliably track what is happening. For example, you might want to track the buffer list, for a bufferline or something like an interactive buffer/UI that gives you an overview of all your buffers.\r\n\r\nFew solutions I can think of:\r\n\r\n1. Add some other mechanism that cannot be suppressed, like `nvim_buf_attach` or `nvim_set_decoration_provider`.\r\n  The downside is duplication. There are now two different features that do almost the exact same thing.\r\n2. Add a new property on autocommands that says they cannot be ignored, and just filter out autocommands when an event is triggered.\r\n  The downside is performance. When event is ignored `apply_autocmds*` functions just return early, but with this solution you're forced to always iterate over all autocommands.\r\n3. Add a new property on autocommands that says they cannot be ignored, but store them in a separate place and run them unconditionally. Basically same as solution 1, but reuses the old interface.\r\n  The good thing about this solution is that you aren't bound by the previous behavior anymore, like having a guarantee that autocommands run in the exact same order they were defined with. Like did you know that you can do stuff like this, and `hello` will be only printed if the filetype *isn't* C?:\r\n    ```vim\r\n    au FileType c if v:false\r\n    au FileType *   echo 'hello'\r\n    au FileType c endif\r\n    ```\r\n    So storing a new type of autocommands separately could potentially enable the use of more performant data structure.",
            "created_at": "2023-04-20T01:20:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/19156#issuecomment-1515580638",
            "id": 1515580638,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19156",
            "node_id": "IC_kwDOAPphoM5aVeze",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515580638/reactions"
            },
            "updated_at": "2023-04-20T02:57:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515580638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> one problem with autocommands/events is that they can be silenced ... this becomes a real problem if you need to reliably track ...\r\n>\r\n> 3\\. Add a new property on autocommands that says they cannot be ignored\r\n\r\nIf you merely want to _trace_ events without _executing code_ , maybe that's a feasible idea. Or maybe some way to \"lock\" `:set noeventignore`.\r\n\r\nNot sure I understand why the use-case is important though.",
            "created_at": "2023-04-20T01:33:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/19156#issuecomment-1515588315",
            "id": 1515588315,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19156",
            "node_id": "IC_kwDOAPphoM5aVgrb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515588315/reactions"
            },
            "updated_at": "2023-04-20T01:33:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515588315",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There is also a very rare use case of detecting event chains. For example you occasionally have code like this:\r\n```c\r\n  if (flags & WEE_TRIGGER_NEW_AUTOCMDS) {\r\n    apply_autocmds(EVENT_WINNEW, NULL, NULL, false, curbuf);\r\n  }\r\n  if (flags & WEE_TRIGGER_ENTER_AUTOCMDS) {\r\n    apply_autocmds(EVENT_WINENTER, NULL, NULL, false, curbuf);\r\n    if (other_buffer) {\r\n      apply_autocmds(EVENT_BUFENTER, NULL, NULL, false, curbuf);\r\n    }\r\n    apply_autocmds(EVENT_CURSORMOVED, NULL, NULL, false, curbuf);\r\n    curwin->w_last_cursormoved = curwin->w_cursor;\r\n  }\r\n```\r\nI actually had a real world use case of detecting *only* `BufEnter` events that are preceded by `WinNew`. Doing this gets somewhat complicated, because the only way I can think of to do that is to track if `WinNew` was triggered on a particular event loop iteration.\r\n\r\nMy idea was to expose in places like this what the previous event was:\r\n```lua\r\nvim.api.nvim_create_autocmd('BufEnter', {\r\n  callback = function(ev)\r\n    if ev.previous.event == 'WinEnter' then\r\n      -- ...\r\n    end\r\n  end,\r\n})\r\n```",
            "created_at": "2023-04-20T01:35:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/19156#issuecomment-1515589959",
            "id": 1515589959,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19156",
            "node_id": "IC_kwDOAPphoM5aVhFH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515589959/reactions"
            },
            "updated_at": "2023-04-20T01:35:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515589959",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If you merely want to trace events without executing code , maybe that's a feasible idea. Or maybe some way to \"lock\" `:set noeventignore`.\r\n\r\nChanging `eventignore` isn't transparent and will change the behavior globally though. Autocommands that might be intentionally ignored will be triggered again. Also I don't think it solves the issue of nested autocommands.\r\n\r\nThe use cases for unsilenceable autocommands might be not be that common, for the most part autocommands are fine as they are. But occasionally you can encounter some really annoying edge case that is caused by this, and there is not much you can do about it.",
            "created_at": "2023-04-20T01:37:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/19156#issuecomment-1515591180",
            "id": 1515591180,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19156",
            "node_id": "IC_kwDOAPphoM5aVhYM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515591180/reactions"
            },
            "updated_at": "2023-04-20T02:05:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515591180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> My idea was to expose in places like this what the previous event was:\r\n\r\nSure, or make it a global immutable ring buffer that exposes the trace of the last X events. We need more of that kind of thing (\"recent windows\", \"recent buffers\", etc.).",
            "created_at": "2023-04-20T01:48:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/19156#issuecomment-1515597694",
            "id": 1515597694,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19156",
            "node_id": "IC_kwDOAPphoM5aVi9-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515597694/reactions"
            },
            "updated_at": "2023-04-20T01:49:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515597694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/19156/comments",
    "created_at": "2022-06-29T17:42:03Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/19156/events",
    "html_url": "https://github.com/neovim/neovim/issues/19156",
    "id": 1289061664,
    "labels": [
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "e6e6e6",
            "default": false,
            "description": "code style, practices, guidelines, patterns",
            "id": 165096905,
            "name": "code-standards",
            "node_id": "MDU6TGFiZWwxNjUwOTY5MDU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/code-standards"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4457150369,
            "name": "architecture",
            "node_id": "LA_kwDOAPphoM8AAAABCaq3oQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/architecture"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "namespaces, user-defined scopes/modes",
            "id": 8080981599,
            "name": "namespaces-scopes",
            "node_id": "LA_kwDOAPphoM8AAAAB4an-Xw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/namespaces-scopes"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/19156/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 0,
        "created_at": "2022-10-02T16:53:39Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": "2026-04-01T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/33",
        "id": 8487042,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/33/labels",
        "node_id": "MI_kwDOAPphoM4AgYCC",
        "number": 33,
        "open_issues": 3,
        "state": "open",
        "title": "1.0",
        "updated_at": "2025-03-09T23:20:47Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/33"
    },
    "node_id": "I_kwDOAPphoM5M1YUg",
    "number": 19156,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 6,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 6,
        "url": "https://api.github.com/repos/neovim/neovim/issues/19156/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/19156/timeline",
    "title": "events interface: event/autocmd, attach, provider, 'foofunc', nvim_on, vim.on",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:59:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/19156",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}