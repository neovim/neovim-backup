{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Feature already in Vim?\n\nNo\n\n### Feature description\n\nIt's been brought up [here](https://github.com/euclidianAce/ltreesitter/discussions/3) to use (my) [ltreesitter](https://github.com/euclidianAce/ltreesitter) in neovim instead of the existing api. This was a while ago so I'm opening an issue to see if that's still on the table.\r\n\r\nI've been recently making ltreesitter more usable from the C-side of things so maybe that could be useful to neovim, as well as focusing an effort on one set of tree-sitter bindings for Lua. Additionally, ltreesitter already has documentation generation that could easily be adapted to vim help docs.\r\n\r\nI'm decently proficient with both C and Lua and would be glad to help in any way, including sketching out an initial pr to replicate neovim's existing `vim.treesitter` module but with `ltreesitter` under the hood.\r\n\r\ncc @vigoux",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks! How do the two APIs compare, in terms of ergonomics and comprehensiveness? at a glance I don't see major differences. ",
            "created_at": "2021-08-25T01:24:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-905095955",
            "id": 905095955,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM418qsT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905095955/reactions"
            },
            "updated_at": "2021-08-25T01:24:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905095955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "In terms of comprehensiveness, I believe ltreesitter exposes most of the functions in `<tree_sitter/api.h>` to Lua in some way or another, as well as some C functions to interact with some wrapped Lua types. (Though I believe I haven't touched any of the functions relating to symbols? They're quite trivial to wrap though)\r\n\r\nErgonomics wise: (Though I haven't extensively used `vim.treesitter`, so my impressions may be wrong)\r\n\r\n`vim.treesitter` is oriented around using neovim's internal buffers to parse, but `ltreesitter` is a generic lua module, so it focuses on strings. This could definitely be an issue since some of tree-sitter's structures are opaque, `ltreesitter` makes some copies for itself to keep around for convenience (see the `Node:source()` method for example). But I imagine that this could be made better from the C side of things with some sort of api that can just point to the existing source rather than copying a bunch of strings around from the Lua side.\r\n\r\nThis is exemplified by the `parser` object both apis expose:\r\n - neovim: `parser = vim.treesitter.get_parser(bufnr, lang); parser:parse()`, parses a neovim buffer\r\n - ltreesitter: `parser = ltreesitter.require(lang); parser:parse_string(\"...\")`, parses a lua string, or `parser:parse_with(function(nth_byte, point) ... end)` with a reader function (that could theoretically use `vim.api.nvim_buf_get_text`, but it internally copies the strings, so that's a bad idea)\r\n\r\nAnd a couple small miscellaneous things I've noticed: (mostly with how the apis deal with/expose queries)\r\n - when a query has an error, ltreesitter will print a small snippet of the query to make debugging easier\r\n - queries in general seem to be more geared towards nvim's highlighting scheme than general pattern matching\r\n - setting predicates in queries is slightly different:\r\n    - in neovim: `vim.treesitter.query.add_predicate(...)`\r\n    - ltreesitter: `local new_query = old_query:with{ [\"foo!\"] = bar }` (with the convenience that any query ending in `?` becomes a condition for matching on the query.\r\n - small style difference, neovim uses the `_iter` suffix to denote an iterator, where ltreesitter doesn't, e.g. neovim's `query:iter_captures()` vs ltreesitter's `query:captures()`",
            "created_at": "2021-08-25T02:14:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-905115018",
            "id": 905115018,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM418vWK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905115018/reactions"
            },
            "updated_at": "2021-08-25T02:30:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905115018",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23245750?v=4",
                "events_url": "https://api.github.com/users/euclidianAce/events{/privacy}",
                "followers_url": "https://api.github.com/users/euclidianAce/followers",
                "following_url": "https://api.github.com/users/euclidianAce/following{/other_user}",
                "gists_url": "https://api.github.com/users/euclidianAce/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/euclidianAce",
                "id": 23245750,
                "login": "euclidianAce",
                "node_id": "MDQ6VXNlcjIzMjQ1NzUw",
                "organizations_url": "https://api.github.com/users/euclidianAce/orgs",
                "received_events_url": "https://api.github.com/users/euclidianAce/received_events",
                "repos_url": "https://api.github.com/users/euclidianAce/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/euclidianAce/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/euclidianAce/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/euclidianAce",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I _think_ that we could (and should) make that move before 0.6, and I am pretty in favor of it being done soon.\r\nI'll dig into the exposed functions a bit more but the buffer vs string issue can be easily solved on our side by providing C-side functions to lua.\r\n\r\nOne other thing I see is how to edit the tree, and I am not sure how easy it is right now from `ltreesitter`.",
            "created_at": "2021-08-25T06:58:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-905235779",
            "id": 905235779,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM419M1D",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905235779/reactions"
            },
            "updated_at": "2021-08-25T06:58:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905235779",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
                "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
                "followers_url": "https://api.github.com/users/vigoux/followers",
                "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
                "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vigoux",
                "id": 39092278,
                "login": "vigoux",
                "node_id": "MDQ6VXNlcjM5MDkyMjc4",
                "organizations_url": "https://api.github.com/users/vigoux/orgs",
                "received_events_url": "https://api.github.com/users/vigoux/received_events",
                "repos_url": "https://api.github.com/users/vigoux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vigoux",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "as far as editing trees goes, `ts_tree_edit` is basically just wrapped as a method to take a table that matches the `TSInputEdit` struct, and the `parser:parse_*` functions take an optional `tree` as a second argument to pass to `ts_parser_parse` and `ts_parser_parse_string`\r\n\r\nso you can do\r\n```lua\r\nlocal tree = parser:parse_string(\"...\") -- or parse_with(...)\r\ntree:edit {\r\n   start_byte = 1,\r\n   old_end_byte = 2,\r\n   new_end_byte = 2,\r\n\r\n   start_point = { row = 1, column = 1 },\r\n   old_end_point = { row = 1, column = 2 },\r\n   new_end_point = { row = 1, column = 2 },\r\n}\r\ntree = parser:parse_string(\"...\", tree)\r\n```",
            "created_at": "2021-08-25T07:22:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-905249914",
            "id": 905249914,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM419QR6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905249914/reactions"
            },
            "updated_at": "2021-08-25T07:22:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905249914",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23245750?v=4",
                "events_url": "https://api.github.com/users/euclidianAce/events{/privacy}",
                "followers_url": "https://api.github.com/users/euclidianAce/followers",
                "following_url": "https://api.github.com/users/euclidianAce/following{/other_user}",
                "gists_url": "https://api.github.com/users/euclidianAce/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/euclidianAce",
                "id": 23245750,
                "login": "euclidianAce",
                "node_id": "MDQ6VXNlcjIzMjQ1NzUw",
                "organizations_url": "https://api.github.com/users/euclidianAce/orgs",
                "received_events_url": "https://api.github.com/users/euclidianAce/received_events",
                "repos_url": "https://api.github.com/users/euclidianAce/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/euclidianAce/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/euclidianAce/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/euclidianAce",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmmm then that's good too",
            "created_at": "2021-08-25T07:23:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-905250616",
            "id": 905250616,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM419Qc4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905250616/reactions"
            },
            "updated_at": "2021-08-25T07:23:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905250616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
                "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
                "followers_url": "https://api.github.com/users/vigoux/followers",
                "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
                "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vigoux",
                "id": 39092278,
                "login": "vigoux",
                "node_id": "MDQ6VXNlcjM5MDkyMjc4",
                "organizations_url": "https://api.github.com/users/vigoux/orgs",
                "received_events_url": "https://api.github.com/users/vigoux/received_events",
                "repos_url": "https://api.github.com/users/vigoux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vigoux",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This may have been discussed elsewhere, but it would be good to list here what the practical benefits for Neovim would be of completely replacing the (already existing!) `vim.treesitter` API with an external module.",
            "created_at": "2021-08-25T07:25:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-905251906",
            "id": 905251906,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM419QxC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905251906/reactions"
            },
            "updated_at": "2021-08-25T07:25:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905251906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> queries in general seem to be more geared towards nvim's highlighting scheme than general pattern matching\r\n\r\nThis is likely to be true, given that our implementation has been designed for highlighting first, but what specific \"general pattern matching\" features would ltreesitter bring to the table?\r\n\r\n> tree:edit { here be fields }\r\n\r\nwould ltreesitter also support an version with numeric arguments instead of objects? An important goal for 0.6 is to fully optimize the edit/redraw cycle, and the lowest hanging fruit is to avoid excess memory allocation (helps both with cache locality and overhead of c allocator /luajit gc at the same time). In particular, as a heads-up, I intend to make the inner loop of using `query:iter_captures()`  for redrawing a line get down to zero (0) memory allocations, at least for all matches not using predicates (currently 45% of time is spent inside libtreesitter, 45% of managing memory and string fields). ",
            "created_at": "2021-08-25T09:14:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-905326361",
            "id": 905326361,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM419i8Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905326361/reactions"
            },
            "updated_at": "2021-08-25T09:14:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905326361",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> what specific \"general pattern matching\" features would ltreesitter bring to the table?\r\n\r\nAfter inspecting `vim.treesitter` a bit more the functionality seems about similar, I just wasn't aware of some of the ways to interact with the captures/matches of a query\r\n\r\n> > tree:edit { here be fields }\r\n>\r\n> would ltreesitter also support an version with numeric arguments instead of objects?\r\n\r\nTotally, do you think it would make more sense to overload the existing `tree:edit` to just check for a table in the first slot and otherwise expect numbers? or to have two separate functions?\r\n\r\n> the lowest hanging fruit is to avoid excess memory allocation\r\n\r\ndefinitely, I try to avoid allocations when possible, but there is probably room for improvement",
            "created_at": "2021-08-25T16:21:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-905683537",
            "id": 905683537,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM41-6JR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905683537/reactions"
            },
            "updated_at": "2021-08-25T16:21:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/905683537",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23245750?v=4",
                "events_url": "https://api.github.com/users/euclidianAce/events{/privacy}",
                "followers_url": "https://api.github.com/users/euclidianAce/followers",
                "following_url": "https://api.github.com/users/euclidianAce/following{/other_user}",
                "gists_url": "https://api.github.com/users/euclidianAce/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/euclidianAce",
                "id": 23245750,
                "login": "euclidianAce",
                "node_id": "MDQ6VXNlcjIzMjQ1NzUw",
                "organizations_url": "https://api.github.com/users/euclidianAce/orgs",
                "received_events_url": "https://api.github.com/users/euclidianAce/received_events",
                "repos_url": "https://api.github.com/users/euclidianAce/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/euclidianAce/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/euclidianAce/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/euclidianAce",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Totally, do you think it would make more sense to overload the existing `tree:edit` to just check for a table in the first slot and otherwise expect numbers? or to have two separate functions?\r\n\r\nI would rather go for two different functions, to avoid as much overhead as possible.\r\n\r\n> definitely, I try to avoid allocations when possible, but there is probably room for improvement\r\n\r\nI'll try to dig into ltreesitter and see.\r\n\r\n",
            "created_at": "2021-08-26T08:02:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-906184732",
            "id": 906184732,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM42A0gc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/906184732/reactions"
            },
            "updated_at": "2021-08-26T08:02:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/906184732",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
                "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
                "followers_url": "https://api.github.com/users/vigoux/followers",
                "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
                "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vigoux",
                "id": 39092278,
                "login": "vigoux",
                "node_id": "MDQ6VXNlcjM5MDkyMjc4",
                "organizations_url": "https://api.github.com/users/vigoux/orgs",
                "received_events_url": "https://api.github.com/users/vigoux/received_events",
                "repos_url": "https://api.github.com/users/vigoux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vigoux",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Nice work on tree-sitter, @euclidianAce. I'm going to add a link to that project in Tree-sitter's docs, in case it's helpful to other folks using Lua.",
            "created_at": "2021-11-19T21:58:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-974499730",
            "id": 974499730,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM46Fa-S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/974499730/reactions"
            },
            "updated_at": "2021-11-19T21:58:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/974499730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/326587?v=4",
                "events_url": "https://api.github.com/users/maxbrunsfeld/events{/privacy}",
                "followers_url": "https://api.github.com/users/maxbrunsfeld/followers",
                "following_url": "https://api.github.com/users/maxbrunsfeld/following{/other_user}",
                "gists_url": "https://api.github.com/users/maxbrunsfeld/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maxbrunsfeld",
                "id": 326587,
                "login": "maxbrunsfeld",
                "node_id": "MDQ6VXNlcjMyNjU4Nw==",
                "organizations_url": "https://api.github.com/users/maxbrunsfeld/orgs",
                "received_events_url": "https://api.github.com/users/maxbrunsfeld/received_events",
                "repos_url": "https://api.github.com/users/maxbrunsfeld/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maxbrunsfeld/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maxbrunsfeld/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maxbrunsfeld",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think that we could (and should) make that move before 0.6, and I am pretty in favor of it being done soon.\r\nI'll dig into the exposed functions a bit more but the buffer vs string issue can be easily solved on our side by providing C-side functions to lua.\r\n\r\nLooks like we missed that v0.6 and v0.7. Given that treesitter is a high priority for v0.8, can we add this to the milestone?\r\n\r\nAs a first step, we could integrate this lib (alongside the current), and privately expose it as something like `vim._ltreesitter`. Once we are happy with it, we can begin to replace the current lib.",
            "created_at": "2022-07-12T08:47:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-1181493704",
            "id": 1181493704,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM5GbCnI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1181493704/reactions"
            },
            "updated_at": "2022-07-12T08:47:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1181493704",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Before we do that, we need a cost/benefit analysis -- nobody provided one, so the deliberate default was sticking with (and improving) the status quo. I haven't seen any indication so far that this should change for 0.8.",
            "created_at": "2022-07-12T08:51:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/15479#issuecomment-1181497529",
            "id": 1181497529,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15479",
            "node_id": "IC_kwDOAPphoM5GbDi5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1181497529/reactions"
            },
            "updated_at": "2022-07-12T08:51:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1181497529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 12,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/15479/comments",
    "created_at": "2021-08-25T00:56:15Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/15479/events",
    "html_url": "https://github.com/neovim/neovim/issues/15479",
    "id": 978601394,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "issue needs attention from an expert, or PR proposes significant changes to architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/15479/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWU5Nzg2MDEzOTQ=",
    "number": 15479,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 9,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 9,
        "url": "https://api.github.com/repos/neovim/neovim/issues/15479/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/15479/timeline",
    "title": "architecture: migrate to ltreesitter for tree-sitter integration",
    "updated_at": "2025-01-17T16:00:01Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/15479",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/23245750?v=4",
        "events_url": "https://api.github.com/users/euclidianAce/events{/privacy}",
        "followers_url": "https://api.github.com/users/euclidianAce/followers",
        "following_url": "https://api.github.com/users/euclidianAce/following{/other_user}",
        "gists_url": "https://api.github.com/users/euclidianAce/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/euclidianAce",
        "id": 23245750,
        "login": "euclidianAce",
        "node_id": "MDQ6VXNlcjIzMjQ1NzUw",
        "organizations_url": "https://api.github.com/users/euclidianAce/orgs",
        "received_events_url": "https://api.github.com/users/euclidianAce/received_events",
        "repos_url": "https://api.github.com/users/euclidianAce/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/euclidianAce/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/euclidianAce/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/euclidianAce",
        "user_view_type": "public"
    }
}