{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\nExpanding snippet with `vim.snippet.expand()` makes user keymaps `<Tab>` and `<S-Tab>` unusable during snippet session without (straightforward) way to opt-out of this behavior.\n\n### Steps to reproduce\n\n1. Create the following 'init.lua' file:\r\n    ```lua\r\n    vim.keymap.set('i', '<Tab>',   [[pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\"]],   { expr = true })\r\n    vim.keymap.set('i', '<S-Tab>', [[pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\"]], { expr = true })\r\n\r\n    local go_right = function()\r\n      if vim.snippet.active({ direction = 1 }) then return vim.snippet.jump(1) end\r\n      local snippet = 'for k, v in pairs($1) do\\n\\t$0\\nend'\r\n      vim.snippet.expand(snippet)\r\n    end\r\n    vim.keymap.set({ 'i', 's' }, '<C-l>', go_right)\r\n    ```\r\n2. `nvim --clean -u init.lua`\r\n3. Start Insert mode and press `<C-l>` to expand snippet.\r\n4. Press `<C-n>` to show completion popup.\r\n5. Press `<Tab>`. Currently it moves to the next tabstop. When not inside active snippet session, it select next completion item.\r\n\r\n------\r\n\r\nThis seems to be the result of #27339 inside which I didn't find the discussion about the motivation to not recognize user's global `<Tab>` and `<S-Tab>` mappings.\n\n### Expected behavior\n\n`vim.snippet.expand()` keeps custom `<Tab>` / `<S-Tab>` mappings usable. Either by default or by some configurable mechanism. Here are several suggestions:\r\n\r\n- Set default snippet navigation keymaps only if it doesn't conflict with what user has already created (either global or buffer-local). This is how I'd expect it to work. For example, default LSP mappings behave the same way: [explicitly with `K`](https://github.com/neovim/neovim/blob/5f95f1249f464e4f0ceed468ec5a1ba6e810da14/runtime/lua/vim/lsp.lua#L365) and [implicitly with other defaults](https://github.com/neovim/neovim/blob/master/runtime/lua/vim/_defaults.lua) (because they are created early and globally while user can override them inside config).\r\n- Allow `opts` in `vim.snippet.expand()` with fields `lhs_jump_forward` and `lhs_jump_backward` to customize which keys are used as default for navigating left and right. Preferably with an ability to supply empty string to not create any.\r\n- Provide a `SnippetEnter` event (as suggested in #26449) to trigger after mappings are already created. Users then can delete buffer-local mappings inside an autocommand.\n\n### Neovim version (nvim -v)\n\nNVIM v0.11.0-dev-680+g4353996d0\n\n### Vim (not Nvim) behaves the same?\n\nNo (doesn't have this functionality)\n\n### Operating system/version\n\nEndeavourOS Linux x86_64 (6.10.6-arch1-1)\n\n### Terminal name/version\n\nst-0.9\n\n### $TERM environment variable\n\nst-256color\n\n### Installation\n\nappimage",
    "closed_at": "2024-08-30T22:18:55Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> This seems to be the result of #27339 inside which I didn't find the discussion about the motivation to not recognize user's global `<Tab>` and `<S-Tab>` mappings.\r\n\r\nBecause we need reasonable defaults, and users can set different mappings if they want.\r\n\r\n> Set default snippet navigation keymaps only if it doesn't conflict with what user has already created (either global or buffer-local). \r\n\r\nI have Tab/S-Tab global mappings, they're irrelevant during snippet editing.\r\n\r\n\r\n\r\n> default LSP mappings [`K`](https://github.com/neovim/neovim/blob/5f95f1249f464e4f0ceed468ec5a1ba6e810da14/runtime/lua/vim/lsp.lua#L365) and [other defaults](https://github.com/neovim/neovim/blob/master/runtime/lua/vim/_defaults.lua) ... are created early and globally while user can override them inside config.\r\n\r\nThat would be possible if we had a true snippet \"mode\", but we don't have that. \r\n\r\n\r\n\r\n> Provide a `SnippetEnter` event (as suggested in [Add `SnippetEnter` and `SnippetLeave` eventsÂ #26449](https://github.com/neovim/neovim/issues/26449)) to trigger after mappings are already created\r\n\r\nI also [mentioned](https://github.com/neovim/neovim/issues/26449#issuecomment-1845145737) in that issue that \"mode\" is needed.\r\n\r\nSo this issue is basically a duplicate of that issue. We may choose (or not) to implement SnippetEnter/SnippetLeave, else this is blocked on allowing custom \"modes\" or sub-modes.",
            "created_at": "2024-08-30T22:18:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322458653",
            "id": 2322458653,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6Kbegd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322458653/reactions"
            },
            "updated_at": "2024-08-30T22:20:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322458653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > This seems to be the result of #27339 inside which I didn't find the discussion about the motivation to not recognize user's global `<Tab>` and `<S-Tab>` mappings.\r\n> \r\n> Because we need reasonable defaults, and users can set different mappings if they want.\r\n\r\n@justinmk, I wholeheartedly agree about reasonable *defaults*, which among other things means that they can be customized. This is *not* the case here. Exactly `<Tab>` and `<S-Tab>` are [temporarily forced after session is created](https://github.com/neovim/neovim/blob/53af02adbad049f5fc24540cc0f38fa4f9aadf58/runtime/lua/vim/snippet.lua#L242-L251) and user can do *nothing* to prevent that. Making them customizable will solve this issue.\r\n\r\n> > Set default snippet navigation keymaps only if it doesn't conflict with what user has already created (either global or buffer-local).\r\n> \r\n> I have Tab/S-Tab global mappings, they're irrelevant during snippet editing.\r\n\r\nThat certainly is possible. Same as the opposite of them being relevant. Having `<Tab>`/`<S-Tab>` navigating through completion list (be it built-in pop-up or nvim-cmp) is definitely not uncommon. With current snippet expansion behavior using it this way is impossible (without hacks that try to delete buffer-local `<Tab>`/`<S-Tab>` Insert mode mappings).",
            "created_at": "2024-08-31T06:33:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322797033",
            "id": 2322797033,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6KcxHp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322797033/reactions"
            },
            "updated_at": "2024-08-31T06:33:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322797033",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Even the hack of wrapping `vim.snippet.expand()` to later delete buffer-local mappings doesn't work, because [later delete of those temporary mappings](https://github.com/neovim/neovim/blob/53af02adbad049f5fc24540cc0f38fa4f9aadf58/runtime/lua/vim/snippet.lua#L264) throws an error of `E31: No such mapping`.\r\n\r\nHere is the reference (makes `<Tab>`/`<S-Tab>` work but later indefinitely throws a mentioned error):\r\n```lua\r\nlocal my_expand = function(snippet)\r\n  vim.snippet.expand(snippet)\r\n  vim.schedule(function()\r\n    pcall(vim.keymap.del, { 'i', 's' }, '<Tab>', { buffer = 0 })\r\n    pcall(vim.keymap.del, { 'i', 's' }, '<S-Tab>', { buffer = 0 })\r\n  end)\r\nend\r\n```",
            "created_at": "2024-08-31T06:50:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322801373",
            "id": 2322801373,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6KcyLd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322801373/reactions"
            },
            "updated_at": "2024-08-31T06:50:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322801373",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "How about we setup the tab/s-tab snippet keymaps generally in `_defaults` instead of temporary during snippet expansion?\r\n\r\n```lua\r\nlocal function try_jump(direction, key)\r\n  if vim.snippet.active({direction = direction}) then\r\n    return string.format(\"<cmd>lua vim.snippet.jump(%d)<cr>\", direction)\r\n  end\r\n  return key\r\nend\r\nvim.keymap.set({\"i\", \"s\"}, \"<Tab>\", function() return try_jump(1, \"<Tab>\") end, { expr = true })\r\nvim.keymap.set({\"i\", \"s\"}, \"<S-Tab>\", function() return try_jump(-1, \"<S-Tab>\") end, { expr = true })\r\n```\r\n\r\nThen users can still override tab, and if they no longer define any keymap to jump between snippets that's their own fault\r\n",
            "created_at": "2024-08-31T07:50:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322818867",
            "id": 2322818867,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6Kc2cz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322818867/reactions"
            },
            "updated_at": "2024-08-31T07:50:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322818867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> How about we setup the tab/s-tab snippet keymaps generally in `_defaults` instead of temporary during snippet expansion?\r\n\r\nTo me this sounds at least better than the current non-configurable approach. Allowing `opts` in `vim.snippet.expand()` feels cleaner but indeed introduces more configuration which might not be in the spirit of `vim.snippet`.\r\n\r\nProbably it is also a good idea to document somewhere inside `:h vim.snippet` that `<Tab>` / `<S-Tab>` are used as default for jumping forward/backward",
            "created_at": "2024-08-31T07:56:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322820105",
            "id": 2322820105,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6Kc2wJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322820105/reactions"
            },
            "updated_at": "2024-08-31T07:56:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322820105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> How about we setup the tab/s-tab snippet keymaps generally in _defaults instead of temporary during snippet expansion?\r\n\r\nBut this will break users of other snippet (library) plugins. The current setup is chosen for a reason. \r\n\r\nI agree that lack of configuration is an issue we need to tackle, but what's still unclear is the \"how\". I disagree with Justin (as in the linked issue) about the mode requirement; this wouldn't solve the issue here, either, since the problem (right now) involves distinguishing between LSP snippet context and generic snippet context (and others, e.g., completion). So unless we replace the current event-oriented structure with a plethora of modes (not just snippet but also completion etc.), this would not buy us anything.\r\n\r\nSo the big question right now is whether we can tackle this in a future-proof way without also deciding the strategy for other plugins to leverage the snippet infrastructure (which was a design goal, I recall, that we also punted on.) This will determine whether that should be configurable on the event/mode level or the LSP autocompletion level.",
            "created_at": "2024-08-31T08:44:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322831245",
            "id": 2322831245,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6Kc5eN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322831245/reactions"
            },
            "updated_at": "2024-08-31T15:34:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322831245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But this will break users of other snippet (library) plugins\r\n\r\nOnly in that it would require some adaptation in the keymap. E.g. if you use luasnip you need a custom keymap anyway, and there you could check if `vim.snippet` is active, or if luasnip is active - or am I missing something?\r\n\r\nAdding a `opts` with keymap configuration to `vim.snippet.expand` would afaik deviate from usual patterns - I don't think core uses that anywhere else yet?\r\n\r\nAnd if snippet library plugins used `vim.snippet.expand` under the hood they'd also have to pass-through the options to expose it to users. Doesn't seem ideal to me\r\n",
            "created_at": "2024-08-31T09:01:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322834906",
            "id": 2322834906,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6Kc6Xa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322834906/reactions"
            },
            "updated_at": "2024-08-31T09:01:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322834906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Adding a `opts` with keymap configuration to `vim.snippet.expand` would afaik deviate from usual patterns - I don't think core uses that anywhere else yet?\r\n\r\nI also don't recall anything similar. But the reason might be that there is no functionality that implements \"temporary mode\". Snippets do.\r\n\r\n> And if snippet library plugins used `vim.snippet.expand` under the hood they'd also have to pass-through the options to expose it to users. Doesn't seem ideal to me\r\n\r\nI'd find this at least OK.",
            "created_at": "2024-08-31T09:08:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322836965",
            "id": 2322836965,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6Kc63l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322836965/reactions"
            },
            "updated_at": "2024-08-31T09:08:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322836965",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Only in that it would require some adaptation in the keymap.\r\n\r\nYes, and all I'm saying is that this is something that should be considered when deciding the final shape of the API. (We added something minimal but working with the plan of deciding the \"real\" API after release; I'm saying we should take our time and do that properly instead of simply slapping another opt-in-or-out on it. Otherwise adding an option to `lsp.completion.enable` to skip setting up the default mapping seems the least work to scratch this particular itch.)\r\n\r\n(It also has some implications to on-demand loading of -- potentially very heavy -- snippet engines, but I agree that that should not be a primary concern for core, even though it is very much a concern for me.)\r\n\r\n> E.g. if you use luasnip you need a custom keymap anyway, and there you could check if vim.snippet is active, or if luasnip is active - or am I missing something?\r\n> And if snippet library plugins used vim.snippet.expand under the hood they'd also have to pass-through the options to expose it to users. Doesn't seem ideal to me\r\n\r\nYes. That's why I'm saying that you can't really separate these questions and need to decide them together.",
            "created_at": "2024-08-31T09:09:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322837064",
            "id": 2322837064,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6Kc65I",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322837064/reactions"
            },
            "updated_at": "2024-08-31T09:09:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322837064",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> ... We added something minimal but working with the plan of deciding the \"real\" API after release ...\r\n\r\nJust to clarify, after 0.11 release? I'd ask to resolve this sooner because the current non-configurable approach *does* break a lot of configs.",
            "created_at": "2024-08-31T10:00:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322848307",
            "id": 2322848307,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6Kc9oz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322848307/reactions"
            },
            "updated_at": "2024-08-31T10:00:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322848307",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I disagree about the mode requirement ... since the problem (right now) involves distinguishing between LSP snippet context and generic snippet context (and others, e.g., completion). So unless we replace the current event-oriented structure with a plethora of modes (not just snippet but also completion etc.), this would not buy us anything.\r\n\r\nMaybe we don't need new, dedicated modes, but rather a \"stack\" of scopes, similar to `v:event.cmdlevel` in `CmdlineEnter`. So instead of `SnippetEnter`/`SnippetLeave`, introduce a `ModeEnter`/`ModeLeave` which increments a `level`. This would be a way for plugins to model arbitrary sub-modes. Would also update `vim.keymap`, `ModeChanged`, etc., to support this.",
            "created_at": "2024-08-31T15:31:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2322934327",
            "id": 2322934327,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6KdSo3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322934327/reactions"
            },
            "updated_at": "2024-08-31T15:32:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2322934327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "A note for possible future people who have `<Tab>` and `<S-Tab>` Insert mode mappings which conflict with this not configurable `vim.snippet.expand()` side effect. Until/if this is resolved, here is a monkey-patch solution which (at the time of writing this) works for `<Tab>` / `<S-Tab>` mappings from the [original post](https://github.com/neovim/neovim/issues/30198#issue-2497927721):\r\n\r\n```lua\r\nif vim.fn.has('nvim-0.11') == 1 then\r\n  -- Ensure that forced and not configurable `<Tab>` and `<S-Tab>`\r\n  -- buffer-local mappings don't override already present ones\r\n  local expand_orig = vim.snippet.expand\r\n  vim.snippet.expand = function(...)\r\n    local tab_map = vim.fn.maparg('<Tab>', 'i', false, true)\r\n    local stab_map = vim.fn.maparg('<S-Tab>', 'i', false, true)\r\n    expand_orig(...)\r\n    vim.schedule(function()\r\n      tab_map.buffer, stab_map.buffer = 1, 1\r\n      -- Override temporarily forced buffer-local mappings\r\n      vim.fn.mapset('i', false, tab_map)\r\n      vim.fn.mapset('i', false, stab_map)\r\n    end)\r\n  end\r\nend\r\n```",
            "created_at": "2024-09-03T09:43:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2326075321",
            "id": 2326075321,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6KpRe5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2326075321/reactions"
            },
            "updated_at": "2024-09-03T09:43:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2326075321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I wonder if it would be an option to get the popular snippet plugins to check for `vim.snippet.active` in their own equivalent functions, and use `vim.snippet.jump` if it is active instead of their own.\r\nThen we could remap `tab`/`s-tab` globally by default. If users overrode it to use luasnip or similar it would continue working with lsp completion (or soon [snippet text edits](https://github.com/neovim/neovim/pull/30287)) if the plugins are aware of `vim.snippet`.\r\n\r\n\r\nThe `opts` parameter is imho not an option, because you've N callsites, often with some indirection (e.g. snippet text edit linked above is triggered via code-action).\r\n\r\nThat only leaves either the global keymap or the autocmd/custom mode as option as far as I can see(?)\r\n",
            "created_at": "2024-09-08T07:41:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2336583394",
            "id": 2336583394,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6LRW7i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336583394/reactions"
            },
            "updated_at": "2024-09-08T07:41:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336583394",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I still don't quite understand why there is a difference in decisions about making global mappings for LSP related features (`gr`, `<C-s>`) and making global mappings for snippets jumps. Both are relevant only under certain conditions. If user overrides it, it is their fault.\r\n\r\n> That only leaves either the global keymap or the autocmd/custom mode as option as far as I can see(?)\r\n\r\nAnother approach that came to my mind recently was to add `vim.snippet.config()`, similar to `vim.diagnostic.config()`. As far as I can tell, the latter serves its purpose well, so can a `vim.snippet.config()`. This would avoid the \"N callsites\" problem because user can configure snippet behavior in one place to be effective for all other `vim.snippet.expand()` usages.",
            "created_at": "2024-09-08T09:32:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2336616215",
            "id": 2336616215,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6LRe8X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336616215/reactions"
            },
            "updated_at": "2024-09-08T09:32:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336616215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I still don't quite understand why there is a difference in decisions about making global mappings for LSP related features (gr, <C-s>) and making global mappings for snippets jumps. \r\n\r\nThe difference is the state of the API: LSP is a public, relatively stable, API; snippets are a black-box feature _without_ a public API -- that was intentionally deferred to later. My point is not that there should not be configurability; my point is that we should not forestall the API design discussion by adding individual \"hot fixes\" that will bite us later (as they so often have).\r\n\r\n`vim.snippet.config` is one possible API design, but it needs to cover _all_ the possibilities we wish to support (a list we haven't even begun to collect yet). I don't see why now would not be a good time to have this general(!) discussion -- feel free to open an issue, and please tag the other snippet engine developers there.",
            "created_at": "2024-09-08T09:39:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2336618062",
            "id": 2336618062,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6LRfZO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336618062/reactions"
            },
            "updated_at": "2024-09-08T09:39:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336618062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `vim.snippet.config` is one possible API design, but it needs to cover _all_ the possibilities we wish to support\r\n\r\nNot sure what it means. `vim.snippet.config(opts)` is a future compatible design which can be expanded without needing to have an extensive discussion about all possible config options to support. This can be separated into discussions:\r\n- Whether or not `vim.snippet.config(opts)` is a good idea.\r\n- *Separate* discussions on whether certain behavior being configured is a good idea.",
            "created_at": "2024-09-08T09:45:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2336619632",
            "id": 2336619632,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6LRfxw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336619632/reactions"
            },
            "updated_at": "2024-09-08T09:45:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336619632",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Separate discussions on whether certain behavior being configured is a good idea.\r\n\r\nBut that's not a discussion we need to have; nobody disagreed that this (mappings) is something that should be configurable. So the _only_ question is how, and that needs to tie in with _other_ things that should be configurable (which we don't have a full idea of yet -- and some of _those_ things might require something different from `vim.snippet.config`). So this also ties into the discussion how snippet plugins should be able to leverage `vim.snippet`, which has always been a part of the (long-term) design goal.",
            "created_at": "2024-09-08T09:48:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2336620609",
            "id": 2336620609,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6LRgBB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336620609/reactions"
            },
            "updated_at": "2024-09-08T09:48:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336620609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Another approach that came to my mind recently was to add vim.snippet.config(), similar to vim.diagnostic.config(). As far as I can tell, the latter serves its purpose well, so can a vim.snippet.config(). This would avoid the \"N callsites\" problem because user can configure snippet behavior in one place to be effective for all other vim.snippet.expand() usages.\r\n\r\nIt crossed my mind too, but it goes a bit against the advise to avoid keymap DSLs which popped up in some Lua plugin guideline PRs.\r\nSo far we have either `vim.keymap.set` as default, or set due some action (`lsp.start`) and a way to override them again (`LspAttach`). I so far don't see compelling arguments that would require the introduction a third concept.\r\n\r\nAnd one reason `vim.diagnostic.config` became a thing was the requirement to be able to configure namespaces separately. That wouldn't apply for `vim.snippet` as far as I can see(?)\r\n\r\n> The difference is the state of the API: LSP is a public, relatively stable, API; snippets are a black-box feature without a public API -- that was intentionally deferred to later.\r\n\r\n`vim.snippet.expand` is public. I thought what we deferred on was a `parse` (which implies making the AST public, and documenting/freezing it), and potentially something to format the AST. Or do I miss other use-cases?\r\n\r\n---\r\n\r\nSo far my understanding is that we have to consider two use-cases here: Direct use of `vim.snippet.expand`, and indirect use via another mechanism (currently completion, soon LSP workspace edits triggered indirectly via something like code-actions), and of course any plugins making use of it. \r\nE.g I leverage it in [nvim-snippasta](https://github.com/mfussenegger/nvim-snippasta) \r\n\r\n \r\nTo me it is still not clear if having made the keymaps ad-hoc on use justified the trouble with the customization. As far as I understand it only made co-use with other snippet plugins slightly easier in that it doesn't require users to update their keymaps. Or is there another aspect?\r\nIf there isn't, how about we change the mapping to be a always-on default, with a news.txt/breaking changes entry that includes a example to create a keymap that works for both vim.snippet and luasnip? (And given it is nightly/dev, we can still revisit depending on the feedback we get)",
            "created_at": "2024-09-08T10:02:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2336624245",
            "id": 2336624245,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6LRg51",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336624245/reactions"
            },
            "updated_at": "2024-09-08T10:02:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336624245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  Or do I miss other use-cases?\r\n\r\nWell, I was talking more about the API to be as minimal as possible for the current MVP -- this includes `lsp.completion.attach`, which I still consider the best place for scratching _this_ particular itch.",
            "created_at": "2024-09-08T10:05:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2336625347",
            "id": 2336625347,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6LRhLD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336625347/reactions"
            },
            "updated_at": "2024-09-08T10:05:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336625347",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `vim.snippet.config` is one possible API design, but it needs to cover _all_ the possibilities we wish to support (a list we haven't even begun to collect yet). I don't see why now would not be a good time to have this general(!) discussion -- feel free to open an issue, and please tag the other snippet engine developers there.\r\n\r\n#30306",
            "created_at": "2024-09-08T10:12:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/30198#issuecomment-2336627477",
            "id": 2336627477,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30198",
            "node_id": "IC_kwDOAPphoM6LRhsV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336627477/reactions"
            },
            "updated_at": "2024-09-08T10:12:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336627477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 20,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30198/comments",
    "created_at": "2024-08-30T18:15:07Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30198/events",
    "html_url": "https://github.com/neovim/neovim/issues/30198",
    "id": 2497927721,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "issues or PRs involving changing the defaults",
            "id": 103777064,
            "name": "defaults",
            "node_id": "MDU6TGFiZWwxMDM3NzcwNjQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/defaults"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "key bindings",
            "id": 3304938718,
            "name": "mappings",
            "node_id": "MDU6TGFiZWwzMzA0OTM4NzE4",
            "url": "https://api.github.com/repos/neovim/neovim/labels/mappings"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 6207355257,
            "name": "snippet",
            "node_id": "LA_kwDOAPphoM8AAAABcfy5eQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/snippet"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30198/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6U41op",
    "number": 30198,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30198/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30198/timeline",
    "title": "Expanding snippet makes custom `<Tab>` and `<S-Tab>` mappings unusable during active snippet session",
    "updated_at": "2025-01-08T11:52:34Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30198",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}