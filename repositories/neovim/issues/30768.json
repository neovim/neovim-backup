{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nRecently I noticed that when working with projects that produce 300+ diagnostics (e.g. when refactoring something that affects pretty much the entire codebase), memory usage of Neovim can skyrocket, resulting in it becoming very sluggish (e.g. `ciw` actually visually lags). When looking at Neovim's memory usage, I was unpleasantly surprised to find it was using around 8 GiB of memory. Now if I were using VS Code then that might've been the default, but for Neovim that's at least a little suspicious.\n\nAfter a bit of digging I narrowed it down to [this code](https://github.com/yorickpeterse/nvim-dd/blob/9c21ffeffbf0a99e5614f193455700f355d0951f/lua/dd/init.lua#L63-L78). In a nutshell, it uses `vim.defer_fn()` to show diagnostics after a timeout. The data in this case is _captured_ by the closure passed to `vim.defer_fn()`.\n\nAnd this is what seems to be the problem: that closure isn't released for a long time, with even calls to `collectgarbage()` seemingly not doing anything to release the memory. If that captured data happens to be large, it can result in a memory leak over time. The fix was to [not capture data but refer to it indirectly](https://github.com/yorickpeterse/nvim-dd/blob/3192ee44b62c569c1f6ecb29a545614f3fa437bb/lua/dd/init.lua#L69-L88), but I suspect this won't work for every scenario.\n\n### Steps to reproduce\n\nCreate `repro.lua` with the following contents:\n\n```lua\nlocal dummy = {}\n\nfor _ = 1, 100000 do\n\ttable.insert(dummy, {\n\t\t{ \"The\" },\n\t\t{ \"quick\" },\n\t\t{ \"brown\" },\n\t\t{ \"fox\" },\n\t\t{ \"jumps\" },\n\t\t{ \"over\" },\n\t\t{ \"the\" },\n\t\t{ \"lazy\" },\n\t\t{ \"dog\" },\n\t})\nend\n\nlocal function schedule(data)\n\treturn vim.defer_fn(function()\n\t\tprint(\"size = \" .. #data)\n\tend, 1000)\nend\n\nschedule(dummy)\n```\n\nNow open this file in Neovim using `nvim --clean repro.lua`, then run `:luafile %` 4-5 times (or more). As you do this, memory usage can go from 10-20 MiB to 200-300 MiB. More importantly, while calling `collectgarbage()` in this case does _sometimes_ reduce memory back to about 100 MiB, it doesn't always do this, and never does it seem to reduce it back to the amount from _before_ the first `:luafile` command.\n\nNot all of the memory being released is expected in GC languages, but I _am_ surprised just how bad it can get. It's possible there's nothing Neovim can do about this, but in that case it might be worth adding a note about this to the documentation of `vim.defer_fn`.\n\n### Expected behavior\n\nMemory is reclaimed some reasonable amount of time after `vim.defer_fn()` finishes running the supplied callback, or at least when calling `collectgarbage()`.\n\n### Nvim version (nvim -v)\n\nNVIM v0.11.0-dev+921-g2377443cd\n\n### Vim (not Nvim) behaves the same?\n\nno\n\n### Operating system/version\n\nFedora 40\n\n### Terminal name/version\n\nGhostty 0.1.0-main+a503e02\n\n### $TERM environment variable\n\nxterm-ghostty\n\n### Installation\n\nFedora copr (nvim nightly)",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "To clarify why I'm surprised a bit more: in a real project the old nvim-dd approach would quickly result in memory growing by about 50-100 MiB per `:w` of a particular file. With the new approach it stays nicely at around 50 MiB.\n\nIf the problem here were exclusively with the LuaJIT GC then I would've expected the new approach to exhibit a similar pattern, since in both approaches the closure itself retains the data for roughly the same amount of time (= until the closure returns). And yes the old approach performs considerably worse, suggesting something is also retaining a reference to the closure (and thus the captured data) for longer than expected.\n\nIt's possible that somewhere in the event loop some sort of handle to the callback is kept around for longer than necessary (and more importantly, with that time being unrelated to when the LuaJIT GC runs), resulting in this leak.",
            "created_at": "2024-10-11T21:15:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/30768#issuecomment-2408129226",
            "id": 2408129226,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30768",
            "node_id": "IC_kwDOAPphoM6PiSLK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408129226/reactions"
            },
            "updated_at": "2024-10-11T21:15:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408129226",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/86065?v=4",
                "events_url": "https://api.github.com/users/yorickpeterse/events{/privacy}",
                "followers_url": "https://api.github.com/users/yorickpeterse/followers",
                "following_url": "https://api.github.com/users/yorickpeterse/following{/other_user}",
                "gists_url": "https://api.github.com/users/yorickpeterse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yorickpeterse",
                "id": 86065,
                "login": "yorickpeterse",
                "node_id": "MDQ6VXNlcjg2MDY1",
                "organizations_url": "https://api.github.com/users/yorickpeterse/orgs",
                "received_events_url": "https://api.github.com/users/yorickpeterse/received_events",
                "repos_url": "https://api.github.com/users/yorickpeterse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yorickpeterse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yorickpeterse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yorickpeterse",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I looked around a bit and couldn't see anything obviously wrong in either our use of lua references, nor in libluv. But there are many layers involved which might lead to cleanup being delayed for multiple cycles. We could do something like this as a workaround\n\n```diff\ndiff --git a/runtime/lua/vim/_editor.lua b/runtime/lua/vim/_editor.lua\nindex bdca97cfb8..bfa40ac347 100644\n--- a/runtime/lua/vim/_editor.lua\n+++ b/runtime/lua/vim/_editor.lua\n@@ -602,6 +602,7 @@ function vim.defer_fn(fn, timeout)\n       end\n \n       fn()\n+      fn = nil -- help gc to cleanup upvalues inside fn() earlier\n     end)\n   )\n```",
            "created_at": "2024-10-12T08:32:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/30768#issuecomment-2408458154",
            "id": 2408458154,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30768",
            "node_id": "IC_kwDOAPphoM6Pjieq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408458154/reactions"
            },
            "updated_at": "2024-10-12T08:32:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408458154",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@willothy I'm sure I have seen you deal with something similar to do with timers not getting gc'd correctly",
            "created_at": "2024-10-13T19:24:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/30768#issuecomment-2409095069",
            "id": 2409095069,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30768",
            "node_id": "IC_kwDOAPphoM6Pl9-d",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2409095069/reactions"
            },
            "updated_at": "2024-10-13T19:24:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2409095069",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @willothy I'm sure I have seen you deal with something similar to do with timers not getting gc'd correctly\n\nWhat I usually do is add a __gc metamethod on the function itself via a proxy (by referencing the proxy as an upvalue), and close the timer there. I don't know if that solves this problem though, it's more targeting user-error / forgetting to close the timer after use. Not sure what would be causing this exactly but I will take a look!",
            "created_at": "2024-10-14T01:06:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/30768#issuecomment-2409558013",
            "id": 2409558013,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30768",
            "node_id": "IC_kwDOAPphoM6Pnu_9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2409558013/reactions"
            },
            "updated_at": "2024-10-14T01:06:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2409558013",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30768/comments",
    "created_at": "2024-10-11T21:08:16Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30768/events",
    "html_url": "https://github.com/neovim/neovim/issues/30768",
    "id": 2582189617,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 520282574,
            "name": "event-loop",
            "node_id": "MDU6TGFiZWw1MjAyODI1NzQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/event-loop"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30768/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6Z6RYx",
    "number": 30768,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30768/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30768/timeline",
    "title": "vim.defer_fn closures appear to be retained for (too) long, increasing memory usage when capturing large data",
    "updated_at": "2025-01-17T15:39:36Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30768",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/86065?v=4",
        "events_url": "https://api.github.com/users/yorickpeterse/events{/privacy}",
        "followers_url": "https://api.github.com/users/yorickpeterse/followers",
        "following_url": "https://api.github.com/users/yorickpeterse/following{/other_user}",
        "gists_url": "https://api.github.com/users/yorickpeterse/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/yorickpeterse",
        "id": 86065,
        "login": "yorickpeterse",
        "node_id": "MDQ6VXNlcjg2MDY1",
        "organizations_url": "https://api.github.com/users/yorickpeterse/orgs",
        "received_events_url": "https://api.github.com/users/yorickpeterse/received_events",
        "repos_url": "https://api.github.com/users/yorickpeterse/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/yorickpeterse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yorickpeterse/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/yorickpeterse",
        "user_view_type": "public"
    }
}