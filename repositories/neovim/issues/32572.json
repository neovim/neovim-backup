{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nI usually ssh into some remote compute cluster. Their login nodes access some filesystem over some complicated network.\n\nSequential file reads take a long time on a system that has:\n\n- high read latency filesystem (e.g. on a network with NFS?)\n- insufficient file prefetching\n- poor memory caching\n\nFor instance:\n\n```python\n# require(\"telescope\")\nfs_read(\"telescope/init.luac\")\n->\n  # require(\"telescope._extensions\")\n  fs_read(\"telescope/_extensions/init.luac\")\n  ->\n    # require(\"telescope._extensions.some_extension\")\n    fs_read(\"telescope/_extensions/some_extension/init.luac\")\n    ->\n      ...\n```\n\nFor reference:\n\n```bash\n$ cd ~/.cache/nvim/luac\n$ ls -ltr\n...\ntelescope.nvim%2fplugin%2ftelescope.luac\ntelescope.nvim%2flua%2ftelescope%2finit.luac\ntelescope.nvim%2flua%2ftelescope%2f_extensions%2finit.luac\ntelescope.nvim%2flua%2ftelescope%2factions%2finit.luac\ntelescope.nvim%2flua%2ftelescope%2fconfig.luac\nplenary.nvim%2flua%2fplenary%2fstrings.luac\nplenary.nvim%2flua%2fplenary%2fpath.luac\nplenary.nvim%2flua%2fplenary%2fbit.luac\nplenary.nvim%2flua%2fplenary%2ffunctional.luac\ntelescope.nvim%2flua%2ftelescope%2fdeprecated.luac\ntelescope.nvim%2flua%2ftelescope%2fsorters.luac\ntelescope.nvim%2flua%2ftelescope%2flog.luac\n...\n```\n\n...Evidently, all these files are imported in a sequence. This seems to be true for most plugins; if it weren't, the `*.luac` files would have been generated in a more random order, with different plugins loading at once. Instead, what I see is that most `*.luac` files are generated in a sequence.\n\nRepeat the above for many sequential imports, and it could take a long time to load.\n\nFor reference, vanilla no-plugin Neovim is relatively quick since it avoids too many sequential imports, and reads only a smallish number of files. This becomes a more significant problem when we introduce a few plugins:\n\n```bash\n$ rm -rf ~/.cache/nvim/luac\n$ nvim\n$ du -sh ~/.cache/nvim/luac\n5.4M    ~/.cache/nvim/luac\n$ cd ~/.cache/nvim/luac\n$ ls | grep 'nvim%2fruntime%2f' | wc -l\n      37\n$ ls | grep 'nvim%2flazy%2' | wc -l\n     567\n```\n\nRoughly speaking, the current method is somewhere between O(log n) and O(n) in the number of imported files. Assume per-file read latency = 1s. Then, 512 files would take roughly 9 seconds to load. This formula seems to represent what I observe.\n\nIf you're Elon Musk on Mars, accessing your network drive on Earth has a round-trip latency of 6 minutes.\nEstimated Mars -> Earth -> Mars load time: 54-3072 minutes\n\nMildly relevant: https://github.com/neovim/neovim/issues/31165\n\n---\n\n\n### Steps to reproduce\n\n```bash\ncd ~\ngit clone https://github.com/YodaEmbedding/dotfiles/\ncd dotfiles\nstow nvim\nnvim\n```\n\n---\n\n\n### Expected behavior\n\nFast startup time, of course. This is solved by either:\n\n- More `fs_read` calls should be done in parallel.\n- Fewer `fs_read` calls should be done in total. Preferably only 1 `fs_read` total.\n\n\n---\n\n\n### Proposed solutions\n\nOne solution:\n\nPerhaps`luac` files could all be stored in a single `~/.cache/nvim/luac.db` database file.\n\n~~The database should be sorted by MRU / startup load-order so that (deterministic) sequential reads are very fast. Actually, infrequently accessed luac files could be trimmed away anyways. And the `luac/` directory is only a few MB, which probably fits into a typical network filesystem block/chunk prefetch/read or whatever it's called. So this isn't that important.~~\n\nRoughly speaking, this method is O(1) in the number of imported files, since the whole cache file can be read sequentially in one-shot over the network drive. And it's <10 MB, anyways. :)\n\nEstimated Mars -> Earth -> Mars load time: 6 minutes\n\n---\n\nAnother alternative:\n\nLet's say having many `*.luac` files is preferable. That's OK too. At startup, Neovim could simultaneously prefetch the `*.luac` for files that are often loaded during startup, in some sort of asynchronous priority queue. (And only prefetch when there's not too many on-demand reads in the queue.) Kind of complicated, but I can imagine a proof of concept in my head.\n\nEstimated Mars -> Earth -> Mars load time: 6-60 minutes\n\n---\n\nYet another alternative:\n\nThis could also be addressed downstream by `lazy.nvim` by prefetching files in the manner I described above.\n\n---\n\nYet another another alternative:\n\nOverlayFS? Way too complicated.\n\n---\n\n### Nvim version (nvim -v)\n\nNVIM v0.10.4\n\n### Vim (not Nvim) behaves the same?\n\nProbably\n\n### Operating system/version\n\nVarious (e.g. Linux, macOS, ...)\n\n### Terminal name/version\n\nVarious\n\n### $TERM environment variable\n\nVarious\n\n### Installation\n\nVarious (e.g. homebrew, build from repo, apt-get, ...)",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32572/comments",
    "created_at": "2025-02-22T07:40:47Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32572/events",
    "html_url": "https://github.com/neovim/neovim/issues/32572",
    "id": 2870578885,
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim startup sequence (`:h startup`)",
            "id": 870629450,
            "name": "startup",
            "node_id": "MDU6TGFiZWw4NzA2Mjk0NTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/startup"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "file metadata/attributes, filenames, path manipulation",
            "id": 3386070083,
            "name": "filesystem",
            "node_id": "LA_kwDOAPphoM7J01RD",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filesystem"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32572/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 264,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 307,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-02-23T21:55:55Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6rGY7F",
    "number": 32572,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32572/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32572/timeline",
    "title": "Slow startup on a network filesystem due to sequential file reads",
    "updated_at": "2025-02-23T17:21:31Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32572",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/721196?v=4",
        "events_url": "https://api.github.com/users/YodaEmbedding/events{/privacy}",
        "followers_url": "https://api.github.com/users/YodaEmbedding/followers",
        "following_url": "https://api.github.com/users/YodaEmbedding/following{/other_user}",
        "gists_url": "https://api.github.com/users/YodaEmbedding/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/YodaEmbedding",
        "id": 721196,
        "login": "YodaEmbedding",
        "node_id": "MDQ6VXNlcjcyMTE5Ng==",
        "organizations_url": "https://api.github.com/users/YodaEmbedding/orgs",
        "received_events_url": "https://api.github.com/users/YodaEmbedding/received_events",
        "repos_url": "https://api.github.com/users/YodaEmbedding/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/YodaEmbedding/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/YodaEmbedding/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/YodaEmbedding",
        "user_view_type": "public"
    }
}