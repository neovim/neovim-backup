{
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski",
            "user_view_type": "public"
        }
    ],
    "author_association": "MEMBER",
    "body": "### Problem\n\nDoing `vim.pack.update()` + `:restart` can lead to a problematic behavior that comes from plugin(s). Making \"revert back\" workflow more straightforward can improve `vim.pack` usability.\n\n### Expected behavior\n\nIt is already possible at the moment with the following steps:\n1. Open log file, its path is documented. For example: `:exe 'edit '.stdpath('log').'/nvim-pack.log'`. Navigate to the latest update (it is at the bottom).\n2. For each updated plugin there are dedicated lines about state/revision before and after. They look like this:\n\n    ```\n    State before: 11c5718\n    State after:  e139eb1 (main)\n    ```\n\n3. Yank revision from \"Step before\" and put it as `version` of plugin in question. In this case it is `version = '11c5718'`.\n4. `:write` + `:restart`\n5. `:lua vim.pack.update(nil, { force = true })` + `:restart`.\n6. Remove the pinned `version`.\n\nThe reasons I think this approach is reasonable (not ideal, but reasonable) is because 1) `vim.pack` is designed to be minimal, which means compromises have to be made at some point; 2) it allows granular and controlled revert; 3) it is usually acceptable as the number of plugins being simultaneously updated is usually \"a handful\" and reverting all of them is rarely necessary.\n\n---\n\nBased on above, here are some ideas about how to improve the experience:\n\n- Document the above steps as \"revert latest update\" workflow example.\n- Make it easier to open log file. Plugin managers usually have a dedicated user command for that. It can also add syntax highlighting (`:set ft=nvim-pack` will work) and automatically navigate to the latest update. This can be a part of #34764.\n- Add a new function for this use case. One example is to [follow 'lazy.nvim'](https://github.com/neovim/neovim/issues/34764#issuecomment-3392222829) example and add something like `vim.pack.restore(lockfile_path, opts)` that will enforce revisions from the lockfile located at `lockfile_path`. So the revert then becomes:\n    - Somehow get the lockfile of the state that was prior to the update. It can be via `git checkout -- ~/.config/nvim/nvim-pack-lock.json` if lockfile is tracked via Git. Or `vim.pack.update()` can write backup(s) lockfile in some standard location, which then can be used as a default `lockfile_path` maybe.\n    - Run `:lua vim.pack.restore()` (ideally without arguments).\n\n---\n\nAlso, this is better to be discussed prior to #34771. It is planned to have `vim.pack.add()` enforce plugin's `version` automatically if it differs from what is stored in the lockfile. I.e. this makes step 5 obsolete since step 4 `:restart` will force`'11c5718'` as version, **but** removing pinned `version` will later force the revision of a new `version` after restart. So there is a \"conflict of interests\" here.\n\nNot entirely sure how to best proceed here. Dropping enforcing `version` (while still enforcing `source`) is possible, just don't feel like the best solution here.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "What about a code action in the `confirm-update` buffer? One could argue that it is kind of weird to have some kind of restoring options there, but I don't think it's necessarily more weird than having delete action there.\n\nIf so, it could prompt the user via `vim.ui.select` to select which commit they want to revert to",
            "created_at": "2025-10-11T12:25:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/36131#issuecomment-3393258491",
            "id": 3393258491,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36131",
            "node_id": "IC_kwDOAPphoM7KQQP7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393258491/reactions"
            },
            "updated_at": "2025-10-11T12:25:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393258491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What about a code action in the `confirm-update` buffer? One could argue that it is kind of weird to have some kind of restoring options there, but I don't think it's necessarily more weird than having delete action there.\n>\n> If so, it could prompt the user via `vim.ui.select` to select which commit they want to revert to\n\nA \"restore to commit\" action is interesting, but might require non-trivial code. The \"delete plugin\" action is useful to delete plugins that are not already meant to be there and required basically handful of new lines after code actions were added.\n\nBut... People who \"just want to revert\" don't want to deal with picking particular commit to revert to. The current idea is to have a more straightforward way to rollback to a working state.",
            "created_at": "2025-10-11T12:45:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/36131#issuecomment-3393283516",
            "id": 3393283516,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36131",
            "node_id": "IC_kwDOAPphoM7KQWW8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393283516/reactions"
            },
            "updated_at": "2025-10-11T12:45:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393283516",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Document the above steps as \"revert latest update\" workflow example.\n\nLet's start with that, it will give us a sense of the actual size of the problem.\n\n> Make it easier to open log file. Plugin managers usually have a dedicated user command for that. \n\nA `:log` command is on the roadmap, maybe `:editlog [plugin-name]` or `:elog [plugin-name]` can open the log file for a given plugin. That is linked to [plugin hygiene](https://github.com/neovim/neovim/pull/35854) and plugin \"canonical name\" but doesn't need to be blocked on that, it could simply look for `stdpath('log')/[plugin-name].log`.",
            "created_at": "2025-10-11T15:14:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/36131#issuecomment-3393415165",
            "id": 3393415165,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36131",
            "node_id": "IC_kwDOAPphoM7KQ2f9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393415165/reactions"
            },
            "updated_at": "2025-10-11T15:14:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393415165",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/36131/comments",
    "created_at": "2025-10-11T10:39:53Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/36131/events",
    "html_url": "https://github.com/neovim/neovim/issues/36131",
    "id": 3505614474,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "bfd4f2",
            "default": false,
            "description": "vim.pack, start/opt packages, 'packpath'",
            "id": 8889050758,
            "name": "packages",
            "node_id": "LA_kwDOAPphoM8AAAACEdQmhg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/packages"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/36131/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM7Q826K",
    "number": 36131,
    "parent_issue_url": "https://api.github.com/repos/neovim/neovim/issues/34763",
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/36131/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/36131/timeline",
    "title": "vim.pack: \"revert latest update\", \"restore plugins from lockfile\"",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-10-12T02:06:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/36131",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}