{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\nMany plugins associate data to lines shown in a buffer and add options to act on those lines/data.\nE.g. two concrete examples:\n- fugitive shows a git log where you can open the commits under the line\n- nvim-dap shows variables in a buffer which can be expanded, or the stacktrace where you can jump to a location.\n\nIn buffers where the text can shift due to editing actions, the current best practice is to use extmarks and create a mapping from extmark ids to your data. This ensures the extmarks shift with edits and you can always associate a line/column with the backing data.\nHaving to maintain the mapping is a bit tedious.\n\n### Expected behavior\n\nAdd a `data` options for extmarks where you can add arbitrary data.\nE.g.:\n\nInstead of:\n\n```lua\nlocal marks = {}\nlocal mark_id = api.nvim_buf_set_extmark(buf, ns, i, 0, {end_col=end_col})\nmarks[mark_id] = { some = \"stuff\" }\n\n-- and later:\n\nlocal extmarks = api.nvim_buf_get_extmarks(buf, ns, start, end_, {})\nlocal extmark = extmarks[1]\nreturn marks[extmark[1]]\n```\n\nOne could have:\n\n```lua\napi.nvim_buf_set_extmark(buf, ns, i, 0, {end_col=end_col, data = { some = \"stuff\" }})\n\n-- and later:\n\nlocal extmarks = api.nvim_buf_get_extmarks(buf, ns, start, end_, {})\n-- extmarks[1].data\n```\n\n\n---\n\nIn addition it would be nice to have some kind of `set_extlines`/`get_extlines`\n(or some other, more appropriate name?) that mirrors the `set/get_text/lines`\nfunctions. The difference would be that they take an arbitrary list of items\ninstead of a list of strings and a `format` function and the function would do\nboth: Set the text/lines _and_ set the extmarks. Ideally the format function\ncan also return text/hl-group chunks to have different highlighting for\ndifferent regions of a line.\n\nThe `get` function would then return the items list for the given region.\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This would also allow treesitter injection ranges to be tracked with extmarks",
            "created_at": "2025-06-28T10:07:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3015159635",
            "id": 3015159635,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6zt69T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3015159635/reactions"
            },
            "updated_at": "2025-06-28T10:07:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3015159635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "How would this work for RPC (and eventually C) users? Would this need to be Lua only?",
            "created_at": "2025-06-28T12:03:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3015210081",
            "id": 3015210081,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6zuHRh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3015210081/reactions"
            },
            "updated_at": "2025-06-28T12:03:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3015210081",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> How would this work for RPC (and eventually C) users?\n\nsetting/getting `data` would be serialized as normal.  how is it different than any other parameter ?",
            "created_at": "2025-06-28T17:53:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3015932256",
            "id": 3015932256,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6zw3lg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3015932256/reactions"
            },
            "updated_at": "2025-06-28T17:53:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3015932256",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Because the data may be large and if you specialise it for Lua we could use references to avoid the copy in/out cost. Honestly without this the feature is basically DOA since maintaining a separate table with the extmark id as a key would be significantly more performant.",
            "created_at": "2025-06-28T18:28:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3015973088",
            "id": 3015973088,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6zxBjg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3015973088/reactions"
            },
            "updated_at": "2025-06-28T18:28:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3015973088",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It can be specialized for Lua, but that doesn't mean we should block the option for RPC/bridge callers. Rather, the direction I suggest is to remove \"rpc only\" and \"lua only\" as much as possible: https://github.com/neovim/neovim/issues/28437",
            "created_at": "2025-06-29T11:58:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3016630481",
            "id": 3016630481,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6zziDR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016630481/reactions"
            },
            "updated_at": "2025-06-29T11:59:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016630481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If it's not Lua only, then data cannot be set to Lua types e.g. userdata (for treesitter or UV), and even regular Lua tables must be restricted to arrays and dictionaries. Most importantly if it's not Lua only, we cannot pass luarefs.\n\nIt begs the question whether we should do this at all and instead find some way to make maintaining side tables (keyed with extmark ids) less tedious. Though I'm not sure it's really that tedious currently.",
            "created_at": "2025-06-29T12:54:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3016672677",
            "id": 3016672677,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6zzsWl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016672677/reactions"
            },
            "updated_at": "2025-06-29T13:03:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016672677",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> fugitive shows a git log where you can open the commits under the line\n\nThis is not a strong example. Git reasons everything as line numbers and plugins will fetch information on demand using system calls. The only reason to store this information ahead of time is for caching (for git blame), but even then the Marktree doesn't help with this, as you need to run a full diff to figure how the lines have changed.\n\nAlso fugitive doesn't use extmarks, so it's better to refer to either gitsigns.nvim (which uses extmarks heavily), or neogit.",
            "created_at": "2025-06-29T13:00:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3016675896",
            "id": 3016675896,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6zztI4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016675896/reactions"
            },
            "updated_at": "2025-06-29T13:01:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016675896",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Most importantly if it's not Lua only, we cannot pass luarefs.\n\nThe RPC/vimscript type can be a different type than the Lua bridge type. (off topic but related: Using that same approach, I think we should also support \"callback\" parameters in the RPC layer by allowing RPC calls to pass \"callbacks\" as strings containing Lua code.)",
            "created_at": "2025-06-29T14:36:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3016756005",
            "id": 3016756005,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6z0Asl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016756005/reactions"
            },
            "updated_at": "2025-06-29T14:37:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016756005",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The RPC/vimscript type can be a different type than the Lua bridge type.\n\nIf an RPC caller calls get_extmarks and receives an extmark with `data` set from Lua, what happens? And likewise the reverse?\n\n> (off topic but related: Using that same approach, I think we should also support \"callback\" parameters in the RPC layer by allowing RPC calls to pass \"callbacks\" as strings containing Lua code.)\n\nThat's something that could be done, but to what end? It seems RPC usage is extremely low so I don't see any ROI on such endeavours. It seems like we're wasting a lot of effort trying to support something no one is really using.",
            "created_at": "2025-06-29T14:47:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3016763226",
            "id": 3016763226,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6z0Cda",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016763226/reactions"
            },
            "updated_at": "2025-06-29T14:47:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016763226",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It seems RPC usage is extremely low so I don't see any ROI on such endeavours.\n\nWe have lots of UIs and other apps using RPC. It's part of the project goals and isn't going to change. \n\nWe got the same sort of questions when we switched to an RPC-driven TUI, but that is yielding a lot of benefits such as `:restart` and `:connect` that weren't easily forseeable by detractors.\n\nAnd, you're extrapolating based on (your perceived) current usage. That can lead to local maxima. Small, high-leverage improvements to RPC and the eventual C layer, can unlock a lot more activity than you expect. \n\nSo, can we consider this topic settled? I've explained it many times, and it's part of the project goals.",
            "created_at": "2025-06-29T15:04:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3016771399",
            "id": 3016771399,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6z0EdH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016771399/reactions"
            },
            "updated_at": "2025-06-29T15:14:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016771399",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If an RPC caller calls get_extmarks and receives an extmark with `data` set from Lua, what happens?\n\nSame as always: it is serialized like all other RPC data.\n",
            "created_at": "2025-06-29T15:07:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3016773471",
            "id": 3016773471,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6z0E9f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016773471/reactions"
            },
            "updated_at": "2025-06-29T15:07:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016773471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We have lots of UIs and other apps using RPC. \n\nUI's aren't the concern here. It's a unified API that RPC and Lua have to share which I have an increasing number of problems with.\n\n> We got the same sort of questions when we switched to an RPC-driven TUI, but that is yielding a lot of benefits such as :restart and :connect that weren't easily forseeable by detractors.\n\nIt's nice that that work yielded some benefits, I don't know what problem was being addressed with that. However I thought you more than anyone would be problem-solution focused instead of solution-problem focussed. What you are suggesting seems to be just random improvements to no real benefit.\n\nI'm not saying we shouldn't be doing RPC at all, it has shown to have certain benefits with certain things. What I don't like is trying to shove everything into a Lua&RPC compromised hole. I've always had that problem and will continue to express it.\n\n> So, can we stop rehashing this discussion? I've explained it many times, and it's part of the project goals.\n\nYou have yet to convince me of anything, so I'll continue to want to discuss it until there's alignment.\n\n> It's part of the project goals and isn't going to change.\n\nSimply saying something is part of the project goals is just an attempt to shut down the conversation. I don't know why you keep bringing this up as a point. I don't treat these goals as set in stone, and will challenge them when I feel the need to.\n\nAs far as I see it, the RPC API is a concluded goal, and whether or not to invest into it more (for RPC plugins, not UI's) needs to be continuously assessed, like anything else.\n\n> And, you're extrapolating based on (your perceived) current usage. That can lead to local maxima. Small, high-leverage improvements to RPC and the eventual C layer, can unlock a lot more activity than you expect.\n\nThis isn't about my personal usage. I'm involved in enough nvim related issue trackers to have a good idea of the general landscape. My question directly implies that I don't think the small improvements you are currently suggesting are high leverage. That's not to say they aren't improvements that can be made. Specifically Lua and RPC do not need to share the same trajectory.",
            "created_at": "2025-06-29T16:23:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3016830416",
            "id": 3016830416,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6z0S3Q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016830416/reactions"
            },
            "updated_at": "2025-06-29T16:23:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016830416",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Same as always: it is serialized like all other RPC data.\n\nLua types cannot be serialised, only RPC types can currently. This is why attempting to support both falls apart.",
            "created_at": "2025-06-29T16:25:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/34683#issuecomment-3016832072",
            "id": 3016832072,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34683",
            "node_id": "IC_kwDOAPphoM6z0TRI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016832072/reactions"
            },
            "updated_at": "2025-06-29T16:25:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016832072",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 13,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34683/comments",
    "created_at": "2025-06-27T19:19:04Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34683/events",
    "html_url": "https://github.com/neovim/neovim/issues/34683",
    "id": 3183860437,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "marks, extmarks, decorations, virtual text",
            "id": 1680119719,
            "name": "marks",
            "node_id": "MDU6TGFiZWwxNjgwMTE5NzE5",
            "url": "https://api.github.com/repos/neovim/neovim/labels/marks"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "save/restore editor state: shada, context, ctx, sessions, mksession",
            "id": 4449264023,
            "name": "editor-state",
            "node_id": "LA_kwDOAPphoM8AAAABCTJhlw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor-state"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34683/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 725,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 634,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-06-30T13:22:58Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM69xdrV",
    "number": 34683,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 4,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34683/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34683/timeline",
    "title": "set/get_extlines; arbitrary data support for extmarks",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-06-29T16:25:17Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34683",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
        "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
        "followers_url": "https://api.github.com/users/mfussenegger/followers",
        "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
        "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mfussenegger",
        "id": 38700,
        "login": "mfussenegger",
        "node_id": "MDQ6VXNlcjM4NzAw",
        "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
        "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
        "repos_url": "https://api.github.com/users/mfussenegger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mfussenegger",
        "user_view_type": "public"
    }
}