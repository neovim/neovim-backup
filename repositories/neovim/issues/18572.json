{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "\r\n\r\n### Feature description\r\n\r\nI can see how the related machinery behind `nvim_buf_add_highlight` can be vastly generalised to something like this:\r\nWe attach arbitrary tree-like information to source-code ranges. This information can be, for example, a partially \r\ntype-checked AST of the source-code language with zero semantic ambiguity.\r\nThe information gets carried over when the user relocates the relevant source code and partially invalidated when the user inserts a new character into the range or deletes a character from the range (this is already present in the current machinery). By choosing a tree-like structure whose sub-nodes get mapped to sub-ranges of the parent's range we can\r\npinpoint furthest sub-nodes that should be invalidated when the user performs a \"discontinuous deformation\" of the said range (inserting into it/deleting from it)\r\n\r\nIt opens up possibilities like visual-boilerplate-free disambiguation or *truly* incremental tooling: when the user modifies the source code we can instantaneously compute the impacted AST nodes in turn issuing a request to the backend that would compute the smallest set of re-checking/evaluation/etc. that it has to do.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "how is this different than extmarks?",
            "created_at": "2022-05-14T16:36:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1126772244",
            "id": 1126772244,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5DKS4U",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126772244/reactions"
            },
            "updated_at": "2022-05-14T16:36:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126772244",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "and tree-sitter?",
            "created_at": "2022-05-14T16:58:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1126775364",
            "id": 1126775364,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5DKTpE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126775364/reactions"
            },
            "updated_at": "2022-05-14T16:58:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126775364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> how is this different than extmarks?\r\n\r\nI don't think it's possible to attach custom data to them, is it?\r\nAlso extmark doesn't get invalidated when one mangles the symbols in the underlaying range.\r\nAlso they are not hierarchical: one can't have an extmark inside another sharing custom data (which can't be attached).",
            "created_at": "2022-05-14T22:16:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1126819887",
            "id": 1126819887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5DKegv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126819887/reactions"
            },
            "updated_at": "2022-05-14T22:16:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126819887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7842009?v=4",
                "events_url": "https://api.github.com/users/Russoul/events{/privacy}",
                "followers_url": "https://api.github.com/users/Russoul/followers",
                "following_url": "https://api.github.com/users/Russoul/following{/other_user}",
                "gists_url": "https://api.github.com/users/Russoul/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Russoul",
                "id": 7842009,
                "login": "Russoul",
                "node_id": "MDQ6VXNlcjc4NDIwMDk=",
                "organizations_url": "https://api.github.com/users/Russoul/orgs",
                "received_events_url": "https://api.github.com/users/Russoul/received_events",
                "repos_url": "https://api.github.com/users/Russoul/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Russoul/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Russoul/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Russoul",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> and tree-sitter?\r\n\r\nTree-sitter feels like a completely different story to me (I may be wrong, haven't used it).\r\nFirst, I have to (re-)write a parser for it. (My use case is a custom language). I wouldn't want to write the parser twice.\r\nSimilarly, in general, my goal is to reuse the backend system as much as possible rather than duplicate its sub-systems for no good reason. Tree-sitter has a serious limitation by design: it hasn't been designed to work hand in hand with the language backend but instead provides a standalone tooling around parsing and ASTs. That's totally reasonable because one can't integrate tooling with the backend in 99.9% of all situations. But in my case, I can.",
            "created_at": "2022-05-14T22:27:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1126820912",
            "id": 1126820912,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5DKeww",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126820912/reactions"
            },
            "updated_at": "2022-05-14T22:27:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126820912",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7842009?v=4",
                "events_url": "https://api.github.com/users/Russoul/events{/privacy}",
                "followers_url": "https://api.github.com/users/Russoul/followers",
                "following_url": "https://api.github.com/users/Russoul/following{/other_user}",
                "gists_url": "https://api.github.com/users/Russoul/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Russoul",
                "id": 7842009,
                "login": "Russoul",
                "node_id": "MDQ6VXNlcjc4NDIwMDk=",
                "organizations_url": "https://api.github.com/users/Russoul/orgs",
                "received_events_url": "https://api.github.com/users/Russoul/received_events",
                "repos_url": "https://api.github.com/users/Russoul/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Russoul/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Russoul/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Russoul",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is there any reason why this can't be prototyped as a plugin?",
            "created_at": "2022-05-15T10:37:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1126905592",
            "id": 1126905592,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5DKzb4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126905592/reactions"
            },
            "updated_at": "2022-05-15T10:37:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126905592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Is there any reason why this can't be prototyped as a plugin?\r\n\r\nI have modest experience writing NeoVim plugins. I don't have a feel for whether the proposed idea can be implemented completely as a plugin.",
            "created_at": "2022-05-15T12:02:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1126923150",
            "id": 1126923150,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5DK3uO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126923150/reactions"
            },
            "updated_at": "2022-05-15T12:02:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126923150",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7842009?v=4",
                "events_url": "https://api.github.com/users/Russoul/events{/privacy}",
                "followers_url": "https://api.github.com/users/Russoul/followers",
                "following_url": "https://api.github.com/users/Russoul/following{/other_user}",
                "gists_url": "https://api.github.com/users/Russoul/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Russoul",
                "id": 7842009,
                "login": "Russoul",
                "node_id": "MDQ6VXNlcjc4NDIwMDk=",
                "organizations_url": "https://api.github.com/users/Russoul/orgs",
                "received_events_url": "https://api.github.com/users/Russoul/received_events",
                "repos_url": "https://api.github.com/users/Russoul/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Russoul/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Russoul/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Russoul",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "In all honesty, this isn't going to be done unless someone does it, and I don't see any reason why this would get any priority over other things from the core team, especially given the specialized use case.",
            "created_at": "2022-05-15T12:04:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1126923748",
            "id": 1126923748,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5DK33k",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126923748/reactions"
            },
            "updated_at": "2022-05-15T12:04:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126923748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think however far you get, such a prototype would be a necessary step in considering your proposal. As it stands, you are proposing adding a an alternative API to something that already exists (extmarks and treesitter), and whose increased leverage is an explicit project goal -- which your proposal is counter to. ",
            "created_at": "2022-05-15T12:05:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1126923952",
            "id": 1126923952,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5DK36w",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126923952/reactions"
            },
            "updated_at": "2022-05-15T12:06:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126923952",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "That's totally fine and expected :)\r\nMy goal opening the issue was to throw this idea in so that at least it is known, documented and possibly commented on.\r\n\r\nI don't think the use case is specialised though. But the proposal does feel to counter the project's narrative to advocate tree-sitter.\r\n",
            "created_at": "2022-05-15T12:16:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1126926095",
            "id": 1126926095,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5DK4cP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126926095/reactions"
            },
            "updated_at": "2022-05-15T12:17:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126926095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7842009?v=4",
                "events_url": "https://api.github.com/users/Russoul/events{/privacy}",
                "followers_url": "https://api.github.com/users/Russoul/followers",
                "following_url": "https://api.github.com/users/Russoul/following{/other_user}",
                "gists_url": "https://api.github.com/users/Russoul/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Russoul",
                "id": 7842009,
                "login": "Russoul",
                "node_id": "MDQ6VXNlcjc4NDIwMDk=",
                "organizations_url": "https://api.github.com/users/Russoul/orgs",
                "received_events_url": "https://api.github.com/users/Russoul/received_events",
                "repos_url": "https://api.github.com/users/Russoul/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Russoul/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Russoul/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Russoul",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The usual way to thing to attach information to extmark is to have a dict which translates from extmark ids to your attached information. So this is already possible today apart from the tree-structure which needs to be reconstructed manually.\r\n\r\nYour tree-like structure would be very useful to walk the tree for semantic information like semantic highlighting with tree-sitter. I implemented this once in Lua to do this but we never merged it. Your suggestion might make this far easier when it is maintained by the editor, but I'm not sure whether the tree should be updated on each keystroke or just be reconstructed by the plugin when it needs the information.\r\n\r\nWhat I love to see is some spec work (not code changes) to standardize the meaning of some of the attached information (e.g. exposing the namespace, documenting the schema for extmarks and attached info). Use cases could be documents links, media attachments like images or code actions to be displayed by GUIs or accessible by mouse clicks/context menus. Such things could of course also implemented by wrapping modules like the diagnostic module but it might be easier to just have standardized schema for certain extmark with meta info. Easiest proof-of-concept would be one plugin setting markdown link information and one GUI displaying it as clickable links",
            "created_at": "2022-05-15T12:21:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1126927114",
            "id": 1126927114,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5DK4sK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126927114/reactions"
            },
            "updated_at": "2022-05-15T12:23:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1126927114",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7189118?v=4",
                "events_url": "https://api.github.com/users/theHamsta/events{/privacy}",
                "followers_url": "https://api.github.com/users/theHamsta/followers",
                "following_url": "https://api.github.com/users/theHamsta/following{/other_user}",
                "gists_url": "https://api.github.com/users/theHamsta/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theHamsta",
                "id": 7189118,
                "login": "theHamsta",
                "node_id": "MDQ6VXNlcjcxODkxMTg=",
                "organizations_url": "https://api.github.com/users/theHamsta/orgs",
                "received_events_url": "https://api.github.com/users/theHamsta/received_events",
                "repos_url": "https://api.github.com/users/theHamsta/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theHamsta/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theHamsta/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theHamsta",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Related: https://github.com/neovim/neovim/pull/13243\r\n\r\n> extmark doesn't get invalidated when one mangles the symbols in the underlaying range.\r\n\r\nWhat decides the \"invalidation\"? If something is needed beyond the current insert/delete detection, isn't that crossing into AST (tree-sitter) territory?\r\n\r\n> a tree-like structure whose sub-nodes get mapped to sub-ranges of the parent's range we can pinpoint furthest sub-nodes that should be invalidated when the user performs a \"discontinuous deformation\" of the said range (inserting into it/deleting from it)\r\n> \r\n> ... extmarks are not hierarchical: can't have an extmark inside another sharing custom data (which can't be attached).\r\n\r\nIs it fair to describe the remaining feature request as:\r\n\r\n1. nested extmarks\r\n2. can attach data to extmarks",
            "created_at": "2023-09-13T13:16:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/18572#issuecomment-1717618258",
            "id": 1717618258,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18572",
            "node_id": "IC_kwDOAPphoM5mYMZS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717618258/reactions"
            },
            "updated_at": "2023-09-13T13:20:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717618258",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 11,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/18572/comments",
    "created_at": "2022-05-14T14:16:01Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/18572/events",
    "html_url": "https://github.com/neovim/neovim/issues/18572",
    "id": 1235984725,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "marks, extmarks, decorations, virtual text",
            "id": 1680119719,
            "name": "marks",
            "node_id": "MDU6TGFiZWwxNjgwMTE5NzE5",
            "url": "https://api.github.com/repos/neovim/neovim/labels/marks"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1786207367,
            "name": "highlight",
            "node_id": "MDU6TGFiZWwxNzg2MjA3MzY3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/highlight"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/18572/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5Jq6FV",
    "number": 18572,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/18572/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/18572/timeline",
    "title": "API: nested extmarks tree with attached data",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:59:49Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/18572",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7842009?v=4",
        "events_url": "https://api.github.com/users/Russoul/events{/privacy}",
        "followers_url": "https://api.github.com/users/Russoul/followers",
        "following_url": "https://api.github.com/users/Russoul/following{/other_user}",
        "gists_url": "https://api.github.com/users/Russoul/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Russoul",
        "id": 7842009,
        "login": "Russoul",
        "node_id": "MDQ6VXNlcjc4NDIwMDk=",
        "organizations_url": "https://api.github.com/users/Russoul/orgs",
        "received_events_url": "https://api.github.com/users/Russoul/received_events",
        "repos_url": "https://api.github.com/users/Russoul/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Russoul/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Russoul/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Russoul",
        "user_view_type": "public"
    }
}