{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nI value highlighting different parts of my code to provide better semantic meaning while I'm writing code. For example, if every piece of my code that is treated like a variable is highlighted a certain color, I can quickly parse out where variables are being used without actually needing to read through the code.\n\nI have 2 concrete examples that show my problem:\n\n1. <img width=\"281\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4ff810a5-f48d-4b31-94ed-6e6664ee3c0d\" />\n\n   In this example, I have a Rust `format!` macro. The `err` is a variable that is being interpolated into the resulting string. In this case, I would like `err` to be highlighted in the same way a variable would be (blue in this case).\n\n2. <img width=\"169\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4cf2e2d1-a96f-4ff3-9598-b8c06863f6dc\" />\n\n   In this example, I am returning `nil` alongside an error in some Go code. In this case, `nil` is a Go constant keyword, which I would like to be highlighted like a keyword (orange in this case).\n\nThe current issue that I'm running into is that the information is coming from 2 different sources and I don't have a good mechanism to set one source's priority higher than the other. I have a pretty generic `vim.highlight.priorities.semantic_tokens` option that I can use to slightly change this behavior, but it doesn't give me the level of granularity that I desire.\n\n1. In the first example, I have the priority of semantic tokens set lower than the priority of Treesitter. So in this case, the highlights coming from Treesitter (this is a string) override the highlights coming from the LSP (`err` is a variable). Having them swapped would allow me to parse that the variable will be evaluated in the resulting string.\n2. In the second example, I have the priority of semantic tokens set higher than the priority of Treesitter. So in this case, the highlights coming from the LSP (`nil` is a variable) override the highlights coming from Treesitter (`nil` is a constant). Having them swapped would allow me to parse that `nil` is a special value.\n\nI am able to get these two things independently, but not simultaneously. They both require different values for semantic token highlight priorities.\n\n### Expected behavior\n\nI should be able to have these two types of highlights with the same configuration:\n\n* <img width=\"281\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0a0194e7-01d0-4092-9846-c8b926eb425b\" />\n* <img width=\"169\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5aea74fe-9724-440e-b6b3-154de3df6439\" />\n\nCurrently, I can achieve these individually by changing the value of the `vim.highlight.priorities.semantic_tokens` option. Setting it lower than the Treesitter priority would allow for `nil` to be correctly highlighted as constant, but `err` would be the same color as a regular string. Having it higher would correctly highlight `err` as a variable, but would highlight `nil` as a variable. Ultimately, having a single, global setting does not scale to support this functionality.\n\nSeparately, I can replace extmarks to change its priority, however I've found that this is difficult to set up, difficult to get right, and difficult to scale to a larger, more generic set of cases beyond just the simple ones I lay out here.\n\nAnother option I have is to change priorities in Treesitter by changing each language's highlights.scm, but this solution is similarly difficult and unscalable.\n\nUltimately, I don't know Neovim internals enough to suggest anything valuable. I've read through some issues like #31316, #17366, and #23691 and the theme seems to be around extmarks. Possibly a new or updated API for extmarks to facilitate this funcitonality?",
    "closed_at": "2025-04-25T16:12:15Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "hl priorities were discussed at length in at least one PR, which is not referenced here.  hl priorities are already extremely complex, and making them more complex really needs a strong justification.",
            "created_at": "2025-04-24T19:05:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/33614#issuecomment-2828605976",
            "id": 2828605976,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33614",
            "node_id": "IC_kwDOAPphoM6omRoY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828605976/reactions"
            },
            "updated_at": "2025-04-24T19:05:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828605976",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "In this case, they can be customized by a custom semantic tokens handler. It's not clear from this (and other) issue what specific \"partial customization\" could be made easier (without entering options hell).",
            "created_at": "2025-04-24T19:10:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/33614#issuecomment-2828617134",
            "id": 2828617134,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33614",
            "node_id": "IC_kwDOAPphoM6omUWu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828617134/reactions"
            },
            "updated_at": "2025-04-24T19:10:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828617134",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "So in this specific case, I would like a set of priorities that roughly looks like this:\n\n1. `@string` - priority 50, comes from Treesitter\n2. `@lsp.type.variable` - priority 100, comes from LSP\n3. `@constant.builtin` - priority 150, comes from Treesitter\n\nI can I think I could use the `LspTokenUpdate` event along with `vim.lsp.semantic_tokens.highlight_token` to get part of the way there, but I can't find a solution to get this exact functionality without both modifying the Treesitter highlights for every language and semantic tokens.",
            "created_at": "2025-04-24T19:18:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/33614#issuecomment-2828633532",
            "id": 2828633532,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33614",
            "node_id": "IC_kwDOAPphoM6omYW8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828633532/reactions"
            },
            "updated_at": "2025-04-24T19:37:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828633532",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6763209?v=4",
                "events_url": "https://api.github.com/users/BSFishy/events{/privacy}",
                "followers_url": "https://api.github.com/users/BSFishy/followers",
                "following_url": "https://api.github.com/users/BSFishy/following{/other_user}",
                "gists_url": "https://api.github.com/users/BSFishy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BSFishy",
                "id": 6763209,
                "login": "BSFishy",
                "node_id": "MDQ6VXNlcjY3NjMyMDk=",
                "organizations_url": "https://api.github.com/users/BSFishy/orgs",
                "received_events_url": "https://api.github.com/users/BSFishy/received_events",
                "repos_url": "https://api.github.com/users/BSFishy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BSFishy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BSFishy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BSFishy",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think in general, you don't want to _change_ `vim.highlight.priorities`. If you stick with the defaults, the semantic highlights override the treesitter highlights, so I think that makes your first example work.\n\nOn to the second example. In the code below, I used `:Inspect` on the `nil` token:\n<img width=\"793\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4115da9f-9f7a-4d18-bdd1-2d4a333f2462\" />\n\nSo as you've observed,\n1. Treesitter gives this the `@constant.builtin` highlight.\n2. LSP semantic tokens then overwrite this with the `@lsp.type.variable` highlight.\n\nFor _most_ color schemes this is the end of the story. You can see that there are four more extmarks being applied:\n```\n- @lsp.mod.defaultLibrary.go links to @lsp   priority: 126\n- @lsp.mod.readonly.go links to @lsp   priority: 126\n- @lsp.typemod.variable.defaultLibrary.go links to Text   priority: 127\n- @lsp.typemod.variable.readonly.go links to @lsp   priority: 127\n```\n\nYour color scheme probably doesn't define _any_ of these highlights! So, the `nil` ends up highlighted as a variable. For my color scheme, I've linked `@lsp.typemod.variable.defaultLibrary` to `Text`, so the `nil` gets the `Text` highlight instead of the `@lsp.type.variable` highlight.\n\n1. You can link `@lsp.typemode.variable.defaultLibrary` to whatever highlight you'd like if you want all semantic highlighting of default library variables to have a given color.\n2. You can link `@lsp.typemode.variable.defaultLibrary.go` if you want to limit this change to only go.\n3. If you want to even more specific, and only highlight `nil`, then `LspTokenUpdate` is the way to go.\n```lua\nvim.api.nvim_create_autocmd(\"LspTokenUpdate\", {\n  callback = function(args)\n    local token = args.data.token\n    if token.type == \"variable\" and token.modifiers.readonly then\n      local text = vim.api.nvim_buf_get_text( args.buf, token.line, token.start_col, token.line, token.end_col, {})[1]\n      if text == \"nil\" then\n        vim.lsp.semantic_tokens.highlight_token(\n          token,\n          args.buf,\n          args.data.client_id,\n          \"Error\" -- or whatever you want\n        )\n      end\n    end\n  end,\n})\n```\nIf you do that, you probably only want the `LspTokenUpdate` autocommand in go buffers. See my [gist](https://gist.github.com/swarn/fb37d9eefe1bc616c2a7e476c0bc0316) for more details.",
            "created_at": "2025-04-25T15:42:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/33614#issuecomment-2830775818",
            "id": 2830775818,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33614",
            "node_id": "IC_kwDOAPphoM6oujYK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2830775818/reactions"
            },
            "updated_at": "2025-04-25T15:43:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2830775818",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/926528?v=4",
                "events_url": "https://api.github.com/users/swarn/events{/privacy}",
                "followers_url": "https://api.github.com/users/swarn/followers",
                "following_url": "https://api.github.com/users/swarn/following{/other_user}",
                "gists_url": "https://api.github.com/users/swarn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/swarn",
                "id": 926528,
                "login": "swarn",
                "node_id": "MDQ6VXNlcjkyNjUyOA==",
                "organizations_url": "https://api.github.com/users/swarn/orgs",
                "received_events_url": "https://api.github.com/users/swarn/received_events",
                "repos_url": "https://api.github.com/users/swarn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/swarn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/swarn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/swarn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "For anyone viewing this in the future, I was able to get most of what I wanted through an autocmd:\n\nhttps://github.com/BSFishy/init.lua/blob/477f7c5acd7f33ad7ccb787fd6ff68f23c907349/lua/config/autocmds.lua#L40-L109",
            "created_at": "2025-05-28T01:25:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/33614#issuecomment-2914603001",
            "id": 2914603001,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33614",
            "node_id": "IC_kwDOAPphoM6tuU_5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2914603001/reactions"
            },
            "updated_at": "2025-05-28T01:25:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2914603001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6763209?v=4",
                "events_url": "https://api.github.com/users/BSFishy/events{/privacy}",
                "followers_url": "https://api.github.com/users/BSFishy/followers",
                "following_url": "https://api.github.com/users/BSFishy/following{/other_user}",
                "gists_url": "https://api.github.com/users/BSFishy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BSFishy",
                "id": 6763209,
                "login": "BSFishy",
                "node_id": "MDQ6VXNlcjY3NjMyMDk=",
                "organizations_url": "https://api.github.com/users/BSFishy/orgs",
                "received_events_url": "https://api.github.com/users/BSFishy/received_events",
                "repos_url": "https://api.github.com/users/BSFishy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BSFishy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BSFishy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BSFishy",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33614/comments",
    "created_at": "2025-04-24T19:02:29Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33614/events",
    "html_url": "https://github.com/neovim/neovim/issues/33614",
    "id": 3018202464,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1786207367,
            "name": "highlight",
            "node_id": "MDU6TGFiZWwxNzg2MjA3MzY3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/highlight"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33614/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 280,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 325,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-06-02T23:00:27Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6z5h1g",
    "number": 33614,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33614/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33614/timeline",
    "title": "Support better customizations for highlight priorities",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-05-28T01:25:02Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33614",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/6763209?v=4",
        "events_url": "https://api.github.com/users/BSFishy/events{/privacy}",
        "followers_url": "https://api.github.com/users/BSFishy/followers",
        "following_url": "https://api.github.com/users/BSFishy/following{/other_user}",
        "gists_url": "https://api.github.com/users/BSFishy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/BSFishy",
        "id": 6763209,
        "login": "BSFishy",
        "node_id": "MDQ6VXNlcjY3NjMyMDk=",
        "organizations_url": "https://api.github.com/users/BSFishy/orgs",
        "received_events_url": "https://api.github.com/users/BSFishy/received_events",
        "repos_url": "https://api.github.com/users/BSFishy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/BSFishy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BSFishy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/BSFishy",
        "user_view_type": "public"
    }
}