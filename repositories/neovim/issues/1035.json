{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Vim searches directory structures using a depth-first algorithm. For example, let's say you have the following directory structure:\r\n\r\n```\r\n~/\r\n  - apps/\r\n    - (tons of stuff)\r\n    - ...\r\n    - barsoft/\r\n      - licenses/\r\n      - programs/\r\n        - bazfest/\r\n          - versions/\r\n            - 2014/\r\n              - foo\r\n  - projects/\r\n    - foo\r\n```\r\n\r\nIf your current directory in vim is `~/` and you try to `:find foo` or put your cursor over the word `foo` and enter the normal command `gf`, it will (1) take forever, and (2) end up finding `~/apps/barsoft/programs/bazfest/versions/2014/foo`, which is probably not what you were after, because `~/projects/foo` is much \"closer\". This is a result of depth-first searching (meaning vim looks at children of a directory node before looking at siblings), and is dumb.\r\n\r\nI implore you to use breadth-first searching instead (meaning vim should look at sibling nodes before child nodes), which is much better.\r\n\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Ultimately I would like to move this logic out to a golang process. Same for `:vimgrep`, `find()`, etc. There's no reason for filesearch logic to be in the single-threaded editor core.\n",
            "created_at": "2014-08-05T18:13:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51237059",
            "id": 51237059,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjM3MDU5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51237059/reactions"
            },
            "updated_at": "2014-08-05T18:13:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51237059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Ultimately I would like to move this logic out to a golang process. Same for :vimgrep, find(), etc. There's no reason for filesearch logic to be in the single-threaded editor core.\n\nSure, but it doesn't seem like such a big deal to do BFS instead of DFS, the algorithms are very similar. What I'd like to know is if there is a specific reason why vim does it this way, and if it would break something if we change it (unlikely but still asking).\n",
            "created_at": "2014-08-05T18:17:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51237518",
            "id": 51237518,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjM3NTE4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51237518/reactions"
            },
            "updated_at": "2014-08-05T18:17:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51237518",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "A cursory search of the vim_dev mailing list turned up no results so I can't offer you an explanation of why vim does it this way.\n",
            "created_at": "2014-08-05T18:25:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51238689",
            "id": 51238689,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjM4Njg5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51238689/reactions"
            },
            "updated_at": "2014-08-05T18:25:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51238689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2235277?v=4",
                "events_url": "https://api.github.com/users/qstrahl/events{/privacy}",
                "followers_url": "https://api.github.com/users/qstrahl/followers",
                "following_url": "https://api.github.com/users/qstrahl/following{/other_user}",
                "gists_url": "https://api.github.com/users/qstrahl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/qstrahl",
                "id": 2235277,
                "login": "qstrahl",
                "node_id": "MDQ6VXNlcjIyMzUyNzc=",
                "organizations_url": "https://api.github.com/users/qstrahl/orgs",
                "received_events_url": "https://api.github.com/users/qstrahl/received_events",
                "repos_url": "https://api.github.com/users/qstrahl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/qstrahl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/qstrahl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/qstrahl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Sure, but it doesn't seem like such a big deal to do BFS instead of DFS, the algorithms are very similar.\n\nYes, they're algorithmically similar, but DFS is much simpler to implement. BFS requires storing every directory and subdirectory in a queue paths to try next, and when one gets tried, it adds more leaves plus itself, storing how it got to each leaf. DFS only cares about one leaf at a time, and trusts the call stack to remember the previous steps. It's the simplest path-finding algorithm that works, which is my guess why whoever chose it.\n\nIn the case of files, BFS seems to make sense, though I wonder if this wouldn't break a plugin or two. Maybe it should be an option.\n",
            "created_at": "2014-08-06T00:49:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51281215",
            "id": 51281215,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjgxMjE1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51281215/reactions"
            },
            "updated_at": "2014-08-06T00:50:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51281215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "https://github.com/neovim/neovim/blob/master/src/nvim/file_search.c\n^ Code executed by the `:find` command. Looks already surprisingly complex with many allocations. One consideration about BFS vs. DFS: DFS will use _O(n \\* m)_ memory (_n_ nodes with _m_ branches each), but BFS will use O(_n^m_) memory. \n",
            "created_at": "2014-08-06T01:38:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51284185",
            "id": 51284185,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjg0MTg1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51284185/reactions"
            },
            "updated_at": "2014-08-06T01:38:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51284185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@splinterofchaos Bram is a very good programmer (although I don't know if he is responsible for the tree traversal algorithm) so I don't think complexity of implementation was a big factor here. I'm leaning more towards the fact that BFS uses much more memory for large depths and Vim is optimized to run on computers with low resources.\n",
            "created_at": "2014-08-06T02:15:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51286189",
            "id": 51286189,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjg2MTg5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51286189/reactions"
            },
            "updated_at": "2014-08-06T02:15:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51286189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4336260?v=4",
                "events_url": "https://api.github.com/users/stellarhoof/events{/privacy}",
                "followers_url": "https://api.github.com/users/stellarhoof/followers",
                "following_url": "https://api.github.com/users/stellarhoof/following{/other_user}",
                "gists_url": "https://api.github.com/users/stellarhoof/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stellarhoof",
                "id": 4336260,
                "login": "stellarhoof",
                "node_id": "MDQ6VXNlcjQzMzYyNjA=",
                "organizations_url": "https://api.github.com/users/stellarhoof/orgs",
                "received_events_url": "https://api.github.com/users/stellarhoof/received_events",
                "repos_url": "https://api.github.com/users/stellarhoof/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stellarhoof/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stellarhoof/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stellarhoof",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@azure-satellite I do not think that choosing a simple algorithm over a complex one makes one a good or bad programmer, and I don't think good programmers always choose the complex ones. But I hadn't yet considered that...\n\n>  BFS uses much more memory for large depths and Vim is optimized to run on computers with low resources.\n\nThat sounds about right. I wanted a benchmark of how much memory `:find` consumes so I went to my root folder and ran `:find **/vim.h`. I've had 100% cpu usage for the past half hour, but I can barely see the system monitor budge on memory. \n\nIncidentally, the program, find, also uses a depth-first search, though in terms of speed, `$ find . vim.h` scanned my entire file system in a little under ten minutes, in the background while vim continued to look.\n",
            "created_at": "2014-08-06T04:15:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51291943",
            "id": 51291943,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjkxOTQz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51291943/reactions"
            },
            "updated_at": "2014-08-06T04:15:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51291943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Forgive me for jumping in, but does Neovim care about memory constrained\nmachines? Because currently I think we can assume 512MB of memory is\navailable to Neovim as a minimum and it is possible to let Vi handle low\nmemory machines.\n\nBeside these, no one really expects Neovim to search through millions of\ndirectories, It is okay if Neovim even crashes on doing so. We have other\ntools for that.\n\nPersonally I prefer an immediate return after :find goes through 10 or so\nnested directories rather than waiting forever and this also solves the\nmemory problem.\n\nOn Wed, Aug 6, 2014 at 10:15 AM, Alejandro Hernandez <\nnotifications@github.com> wrote:\n\n> @splinterofchaos https://github.com/splinterofchaos Bram is a very good\n> programmer (although I don't know if he is responsible for the tree\n> traversal algorithm) so I don't think complexity of implementation was a\n> big factor here. I'm leaning more towards the fact that BFS uses much more\n> memory for large depths and Vim is optimized to run on computers with low\n> resources.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/neovim/neovim/issues/1035#issuecomment-51286189.\n",
            "created_at": "2014-08-06T04:21:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51292242",
            "id": 51292242,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjkyMjQy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51292242/reactions"
            },
            "updated_at": "2014-08-06T04:21:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51292242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3320093?v=4",
                "events_url": "https://api.github.com/users/pekhee/events{/privacy}",
                "followers_url": "https://api.github.com/users/pekhee/followers",
                "following_url": "https://api.github.com/users/pekhee/following{/other_user}",
                "gists_url": "https://api.github.com/users/pekhee/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pekhee",
                "id": 3320093,
                "login": "pekhee",
                "node_id": "MDQ6VXNlcjMzMjAwOTM=",
                "organizations_url": "https://api.github.com/users/pekhee/orgs",
                "received_events_url": "https://api.github.com/users/pekhee/received_events",
                "repos_url": "https://api.github.com/users/pekhee/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pekhee/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pekhee/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pekhee",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> One consideration about BFS vs. DFS: DFS will use O(n \\* m) memory (n nodes with m branches each), but BFS will use O(n^m) memory.\n\nI did not implement DFS or BFS for file system but I think they have the same worst-case memory consumption (call stack or heap respectievely). Though their worst cases are different. Each algorithm can store each node in the graph in memory: DFS if graph is a chain, BFS if graph is like a star (one root and all other nodes are accessible in one move). Accordingly they consume different amounts of memory on other use cases.\n\n> I implore you to use breadth-first searching instead (meaning vim should look at sibling nodes before child nodes), which is much better.\n\nI agree that BFS behavior is more natural for these tasks.\n\nI think we should consider possibilities implementations of both algorithms and choose DFS if it will be really cheaper due to some BFS implementation restrictions.\nThough I didn't look in current vim implementation.\n",
            "created_at": "2014-08-06T06:48:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51299545",
            "id": 51299545,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjk5NTQ1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51299545/reactions"
            },
            "updated_at": "2014-08-06T06:48:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51299545",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/911252?v=4",
                "events_url": "https://api.github.com/users/Hinidu/events{/privacy}",
                "followers_url": "https://api.github.com/users/Hinidu/followers",
                "following_url": "https://api.github.com/users/Hinidu/following{/other_user}",
                "gists_url": "https://api.github.com/users/Hinidu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Hinidu",
                "id": 911252,
                "login": "Hinidu",
                "node_id": "MDQ6VXNlcjkxMTI1Mg==",
                "organizations_url": "https://api.github.com/users/Hinidu/orgs",
                "received_events_url": "https://api.github.com/users/Hinidu/received_events",
                "repos_url": "https://api.github.com/users/Hinidu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Hinidu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Hinidu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Hinidu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Though their worst cases are different. Each algorithm can store each node in the graph in memory: DFS if graph is a chain, BFS if graph is like a star\n\nTo be fair, the latter case (star) is uncommon for most users, I think. So BFS is probably more intuitive and maybe uses less memory in practice.\n\nThere's an interesting comment on [`vim_findfile`](https://github.com/neovim/neovim/blob/master/src/nvim/file_search.c#L574):\n\n``` c\n * The search algorithm is depth first. To change this replace the\n * stack with a list (don't forget to leave partly searched directories on the\n * top of the list).\n */\nchar_u *vim_findfile(void *search_ctx_arg)\n{\n```\n",
            "created_at": "2014-08-06T07:04:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51300553",
            "id": 51300553,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzAwNTUz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51300553/reactions"
            },
            "updated_at": "2014-08-06T07:04:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51300553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> There's an interesting comment on vim_findfile:\n\nThat's indeed the classical way to switch between DFS and BFS. Replace the stack with a list (queue). This is a bit more than a few lines of change if the \"stack\" in question was the implicit function stack.\n\nIn any case, the function stack will use quite a bit more stack than necessary, so switching to an explicit data structure should provoke some gains either way.\n\nThe comment that most piqued my interest tonight was this:\n\n> That sounds about right. I wanted a benchmark of how much memory :find consumes so I went to my root folder and ran :find **/vim.h. I've had 100% cpu usage for the past half hour, but I can barely see the system monitor budge on memory.\n\nThis does not look like an efficient implementation of DFS (if true that find also uses DFS, we have found more of a lower bound).\n",
            "created_at": "2014-08-06T07:10:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51300953",
            "id": 51300953,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzAwOTUz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51300953/reactions"
            },
            "updated_at": "2014-08-06T07:10:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51300953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> To be fair, the latter case (star) is uncommon for most users, I think.\n\nI think a directory with a lot of files gets you this situation.  Speaking as someone who's been running in VCS circles for a while, it's surprising how often that situation pops up.\n",
            "created_at": "2014-08-06T09:46:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51313713",
            "id": 51313713,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzEzNzEz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51313713/reactions"
            },
            "updated_at": "2014-08-06T09:46:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51313713",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/448087?v=4",
                "events_url": "https://api.github.com/users/jszakmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/jszakmeister/followers",
                "following_url": "https://api.github.com/users/jszakmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/jszakmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jszakmeister",
                "id": 448087,
                "login": "jszakmeister",
                "node_id": "MDQ6VXNlcjQ0ODA4Nw==",
                "organizations_url": "https://api.github.com/users/jszakmeister/orgs",
                "received_events_url": "https://api.github.com/users/jszakmeister/received_events",
                "repos_url": "https://api.github.com/users/jszakmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jszakmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jszakmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jszakmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I think a directory with a lot of files gets you this situation. Speaking as someone who's been running in VCS circles for a while, it's surprising how often that situation pops up.\n\nThen again, if we rework the current code to use a data-structure, we can probably turn it into a configure switch. Which chooses between DFS/BFS (stack/queue). This is a bit handwavey, as the no-polymorphism of C might prevent an easy implementation of this and we'd have to resort to if-checks.\n",
            "created_at": "2014-08-06T09:48:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51313874",
            "id": 51313874,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzEzODc0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51313874/reactions"
            },
            "updated_at": "2014-08-06T09:48:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51313874",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Then again, if we rework the current code to use a data-structure, we can probably turn it into a configure switch.\n\nIt seems like it already use data structure stack: https://github.com/neovim/neovim/blob/master/src/nvim/file_search.c#L72\nI think we should study current implementation at first. I'll try to give the deeper look at it in the near time.\n",
            "created_at": "2014-08-06T10:06:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51315396",
            "id": 51315396,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzE1Mzk2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51315396/reactions"
            },
            "updated_at": "2014-08-06T10:06:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51315396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/911252?v=4",
                "events_url": "https://api.github.com/users/Hinidu/events{/privacy}",
                "followers_url": "https://api.github.com/users/Hinidu/followers",
                "following_url": "https://api.github.com/users/Hinidu/following{/other_user}",
                "gists_url": "https://api.github.com/users/Hinidu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Hinidu",
                "id": 911252,
                "login": "Hinidu",
                "node_id": "MDQ6VXNlcjkxMTI1Mg==",
                "organizations_url": "https://api.github.com/users/Hinidu/orgs",
                "received_events_url": "https://api.github.com/users/Hinidu/received_events",
                "repos_url": "https://api.github.com/users/Hinidu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Hinidu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Hinidu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Hinidu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It seems like it already use data structure stack: https://github.com/neovim/neovim/blob/master/src/nvim/file_search.c#L72\n> I think we should study current implementation at first. I'll try to give the deeper look at it in the near time.\n\nHmmm, now I'm scared of the horrors we will find :). At any rate, if you're on OSX, compile with clang and run it under Instruments, it's a pretty awesome profiling environment. Curious to find out why it's so much slower than `find`.\n",
            "created_at": "2014-08-06T10:34:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51318350",
            "id": 51318350,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzE4MzUw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51318350/reactions"
            },
            "updated_at": "2014-08-06T10:34:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51318350",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "After looking at it a bit, I can guess at 2 possible causes for slowness:\n- the way (neo)vim finds the next file. After which it starts stat'ting I think, another syscall. My fear is that it might call a shell every time it enters a directory. Couldn't immediately find the code that does this.\n- it seems to call `ui_breakcheck();` inside of a double-loop. The last time I encountered such a thing, calling it less saved 50% execution time (not the 100x improvement we're looking for, but it's a start).\n\nI think the first item might prove to be the culprit, but time will tell.\n",
            "created_at": "2014-08-06T10:39:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51318751",
            "id": 51318751,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzE4NzUx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51318751/reactions"
            },
            "updated_at": "2014-08-06T10:39:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51318751",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "A proof of concept (still with surprisingly low memory usage):\n\n``` patch\ndiff --git a/src/nvim/file_search.c b/src/nvim/file_search.c\nindex 845a99a..5e04996 100644\n--- a/src/nvim/file_search.c\n+++ b/src/nvim/file_search.c\n@@ -73,7 +73,7 @@ static char_u   *ff_expand_buffer = NULL; /* used for expanding filenames */\n  * type for the directory search stack\n  */\n typedef struct ff_stack {\n-  struct ff_stack     *ffs_prev;\n+  struct ff_stack     *ffs_next;\n\n   /* the fix part (no wildcards) and the part containing the wildcards\n    * of the search path\n@@ -1147,7 +1147,7 @@ static ff_stack_T *ff_create_stack_element(char_u *fix_part, char_u *wc_part, in\n {\n   ff_stack_T *new = xmalloc(sizeof(ff_stack_T));\n\n-  new->ffs_prev          = NULL;\n+  new->ffs_next          = NULL;\n   new->ffs_filearray     = NULL;\n   new->ffs_filearray_size = 0;\n   new->ffs_filearray_cur  = 0;\n@@ -1175,8 +1175,15 @@ static void ff_push(ff_search_ctx_T *search_ctx, ff_stack_T *stack_ptr)\n   /* check for NULL pointer, not to return an error to the user, but\n    * to prevent a crash */\n   if (stack_ptr != NULL) {\n-    stack_ptr->ffs_prev = search_ctx->ffsc_stack_ptr;\n-    search_ctx->ffsc_stack_ptr = stack_ptr;\n+    ff_stack_T *prev = search_ctx->ffsc_stack_ptr;\n+    if (prev == NULL) {\n+      search_ctx->ffsc_stack_ptr = stack_ptr;\n+    } else {\n+      while (prev->ffs_next) {\n+        prev = prev->ffs_next;\n+      }\n+      prev->ffs_next = stack_ptr;\n+    } \n   }\n }\n\n@@ -1186,13 +1193,12 @@ static void ff_push(ff_search_ctx_T *search_ctx, ff_stack_T *stack_ptr)\n  */\n static ff_stack_T *ff_pop(ff_search_ctx_T *search_ctx)\n {\n-  ff_stack_T  *sptr;\n-\n-  sptr = search_ctx->ffsc_stack_ptr;\n-  if (search_ctx->ffsc_stack_ptr != NULL)\n-    search_ctx->ffsc_stack_ptr = search_ctx->ffsc_stack_ptr->ffs_prev;\n-\n-  return sptr;\n+  ff_stack_T* ptr = search_ctx->ffsc_stack_ptr;\n+  if (ptr) {\n+    search_ctx->ffsc_stack_ptr = ptr->ffs_next;\n+    ptr->ffs_next = NULL;\n+  }\n+  return ptr;\n }\n\n /*\n```\n\nFYI, In testing this, I discovered that the default `:find` command works in reverse-alphabetical order.\n",
            "created_at": "2014-08-06T13:06:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51331278",
            "id": 51331278,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzMxMjc4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51331278/reactions"
            },
            "updated_at": "2014-08-06T13:08:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51331278",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@splinterofchaos going through entire queue in `ff_push` is too expensive. You should add another pointer for the end of the queue to search context structure.\n:+1: for giving it a try!\n",
            "created_at": "2014-08-06T13:11:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51331799",
            "id": 51331799,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzMxNzk5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51331799/reactions"
            },
            "updated_at": "2014-08-06T13:12:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51331799",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/911252?v=4",
                "events_url": "https://api.github.com/users/Hinidu/events{/privacy}",
                "followers_url": "https://api.github.com/users/Hinidu/followers",
                "following_url": "https://api.github.com/users/Hinidu/following{/other_user}",
                "gists_url": "https://api.github.com/users/Hinidu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Hinidu",
                "id": 911252,
                "login": "Hinidu",
                "node_id": "MDQ6VXNlcjkxMTI1Mg==",
                "organizations_url": "https://api.github.com/users/Hinidu/orgs",
                "received_events_url": "https://api.github.com/users/Hinidu/received_events",
                "repos_url": "https://api.github.com/users/Hinidu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Hinidu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Hinidu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Hinidu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> So the question becomes how to configure it.\n\nIf we implement deque then it could be pretty simple: the only place there would be a choice is \"where to push\". Though maybe I missed something.\n\n> FYI, In testing this, I discovered that the default :find command works in reverse-alphabetical order.\n\nIt is possible if `:find` go through directory childs in alphabetical order and push them all to the stack. So they would be popped from the stack in the reverse order.\n",
            "created_at": "2014-08-06T13:20:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51332750",
            "id": 51332750,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzMyNzUw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51332750/reactions"
            },
            "updated_at": "2014-08-06T13:20:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51332750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/911252?v=4",
                "events_url": "https://api.github.com/users/Hinidu/events{/privacy}",
                "followers_url": "https://api.github.com/users/Hinidu/followers",
                "following_url": "https://api.github.com/users/Hinidu/following{/other_user}",
                "gists_url": "https://api.github.com/users/Hinidu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Hinidu",
                "id": 911252,
                "login": "Hinidu",
                "node_id": "MDQ6VXNlcjkxMTI1Mg==",
                "organizations_url": "https://api.github.com/users/Hinidu/orgs",
                "received_events_url": "https://api.github.com/users/Hinidu/received_events",
                "repos_url": "https://api.github.com/users/Hinidu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Hinidu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Hinidu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Hinidu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> If we implement deque then it could be pretty simple: the only place there would be a choice is \"where to push\". Though maybe I missed something.\n\nIn the basic BFS, new elements always get shoved to the end so that the newest (deepest) entries get tried last. We could use a heuristic to sort-on-insert likely paths, but I don't think that's necessary.\n",
            "created_at": "2014-08-06T13:40:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51335241",
            "id": 51335241,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzM1MjQx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51335241/reactions"
            },
            "updated_at": "2014-08-06T13:40:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51335241",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> In the basic BFS, new elements always get shoved to the end so that the newest (deepest) entries get tried last. We could use a heuristic to sort-on-insert likely paths, but I don't think that's necessary.\n\nI could be more precise: in the case of DFS we will push to the head of deque, in BFS - to the tail.\nImplementing deque is very simple. There is no need for any sorting.\n",
            "created_at": "2014-08-06T13:44:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51335795",
            "id": 51335795,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzM1Nzk1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51335795/reactions"
            },
            "updated_at": "2014-08-06T13:45:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51335795",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/911252?v=4",
                "events_url": "https://api.github.com/users/Hinidu/events{/privacy}",
                "followers_url": "https://api.github.com/users/Hinidu/followers",
                "following_url": "https://api.github.com/users/Hinidu/following{/other_user}",
                "gists_url": "https://api.github.com/users/Hinidu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Hinidu",
                "id": 911252,
                "login": "Hinidu",
                "node_id": "MDQ6VXNlcjkxMTI1Mg==",
                "organizations_url": "https://api.github.com/users/Hinidu/orgs",
                "received_events_url": "https://api.github.com/users/Hinidu/received_events",
                "repos_url": "https://api.github.com/users/Hinidu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Hinidu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Hinidu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Hinidu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@qstrahl This feature wasn't as hard to implement as I though. Could you try it and confirm for me that it does as you require?\n\n``` bash\n$ git clone -b bfs https://github.com/splinterofchaos/neovim.git\n$ cd neovim; make; build/bin/nvim\n:set breadthfirst\n:find ...\n```\n",
            "created_at": "2014-08-07T18:56:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51515876",
            "id": 51515876,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTE1ODc2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51515876/reactions"
            },
            "updated_at": "2014-08-07T18:56:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51515876",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'll let you know as soon as I'm off work.\n\nOn 7 August 2014 14:57, Scott Prager notifications@github.com wrote:\n\n> @qstrahl https://github.com/qstrahl This feature wasn't as hard to\n> implement as I though. Could you try it and confirm for me that it does as\n> you require?\n> \n> $ git clone -b bfs https://github.com/splinterofchaos/neovim.git$ cd neovim; make; build/bin/nvim\n> :set breadthfirst\n> :find ...\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/neovim/neovim/issues/1035#issuecomment-51515876.\n",
            "created_at": "2014-08-07T19:19:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51518729",
            "id": 51518729,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTE4NzI5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51518729/reactions"
            },
            "updated_at": "2014-08-07T19:19:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51518729",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2235277?v=4",
                "events_url": "https://api.github.com/users/qstrahl/events{/privacy}",
                "followers_url": "https://api.github.com/users/qstrahl/followers",
                "following_url": "https://api.github.com/users/qstrahl/following{/other_user}",
                "gists_url": "https://api.github.com/users/qstrahl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/qstrahl",
                "id": 2235277,
                "login": "qstrahl",
                "node_id": "MDQ6VXNlcjIyMzUyNzc=",
                "organizations_url": "https://api.github.com/users/qstrahl/orgs",
                "received_events_url": "https://api.github.com/users/qstrahl/received_events",
                "repos_url": "https://api.github.com/users/qstrahl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/qstrahl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/qstrahl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/qstrahl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I sent a version of my patch upstream: https://groups.google.com/forum/#!topic/vim_dev/_t5XILM6SCI\n\nBram said:\n\n> one might not what to change tags file search.\n> \n> [...]old plugins won't even know the options exists.  This makes life for \n> plugin writers complicated.  \n> \n> [...]And using \":findflat\" (or some other name) instead of \":find\" is also \n> nice, since the user can decide what he wants without changing the \n> option (and changing it back afterwards). \n\nI think his reasoning is valid, and I half expected such a response. If there are no objections, I will attempt to resolve this by adding a new ex command. Though, I think `:nea[rest]` would be more convenient than `:findfl[at]`.\n",
            "created_at": "2014-08-10T17:57:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51721929",
            "id": 51721929,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzIxOTI5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51721929/reactions"
            },
            "updated_at": "2014-08-10T17:57:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51721929",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "For what it's worth, I much prefer the notion of having an option to toggle\nBFS behavior to having to remember a new, longer Ex command and having to\nreimplement the behavior of normal mode's gf, ^Wf, etc. to use whatever BFS\nsearch is made available, plugin writers be damned.\nOn 10 Aug 2014 13:57, \"Scott Prager\" notifications@github.com wrote:\n\n> I sent a version of my patch upstream:\n> https://groups.google.com/forum/#!topic/vim_dev/_t5XILM6SCI\n> \n> Bram said:\n> \n> one might not what to change tags file search.\n> \n> [...]old plugins won't even know the options exists. This makes life for\n> plugin writers complicated.\n> \n> [...]And using \":findflat\" (or some other name) instead of \":find\" is also\n> nice, since the user can decide what he wants without changing the\n> option (and changing it back afterwards).\n> \n> I think his reasoning is valid, and I half expected such a response. If\n> there are no objections, I will attempt to resolve this by adding a new ex\n> command. Though, I think :nea[rest] would be more convenient than\n> :findfl[at].\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/neovim/neovim/issues/1035#issuecomment-51721929.\n",
            "created_at": "2014-08-10T23:46:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51731389",
            "id": 51731389,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzMxMzg5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51731389/reactions"
            },
            "updated_at": "2014-08-10T23:46:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51731389",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2235277?v=4",
                "events_url": "https://api.github.com/users/qstrahl/events{/privacy}",
                "followers_url": "https://api.github.com/users/qstrahl/followers",
                "following_url": "https://api.github.com/users/qstrahl/following{/other_user}",
                "gists_url": "https://api.github.com/users/qstrahl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/qstrahl",
                "id": 2235277,
                "login": "qstrahl",
                "node_id": "MDQ6VXNlcjIyMzUyNzc=",
                "organizations_url": "https://api.github.com/users/qstrahl/orgs",
                "received_events_url": "https://api.github.com/users/qstrahl/received_events",
                "repos_url": "https://api.github.com/users/qstrahl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/qstrahl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/qstrahl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/qstrahl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> longer Ex command\n\n`:nea[rest]` would only require you type `:nea`, which is no longer than `:fin[d]`, but I get your point about the parallel interface problem and it's a pain to write.\n\n> ..., plugin writers be damned.\n\nThis has been discussed before, in #503, and it looks like a goal of neovim is to remain vim-compatible. On the other hand, this doesn't break compatibility, it gives you the option to, but is off by default. \n\nIt's suddenly occurred to me that I'm not objective since I want to submit an upstream/downstream patch as well. I'll keep #1043 as-is for now, and note that vim may go another way. \n",
            "created_at": "2014-08-11T02:02:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-51735735",
            "id": 51735735,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzM1NzM1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51735735/reactions"
            },
            "updated_at": "2014-08-11T04:10:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51735735",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Btw, BFS can be implemented with the same memory requirements as DFS, but it'll be a bit slower as the root node and nodes in it's proximity will be read many times compared to leaf nodes (some decent fixed-size cache should help quite a lot).\n\nThis approach is called iterative deepening search and basically it calls DFS with limited depth starting from 1 and incrementing this max. depth counter by 1 in each call until no children leaf nodes are found in the searched depth.\n",
            "created_at": "2014-11-08T17:25:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-62265763",
            "id": 62265763,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY1NzYz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62265763/reactions"
            },
            "updated_at": "2014-11-08T17:25:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62265763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2451044?v=4",
                "events_url": "https://api.github.com/users/dumblob/events{/privacy}",
                "followers_url": "https://api.github.com/users/dumblob/followers",
                "following_url": "https://api.github.com/users/dumblob/following{/other_user}",
                "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dumblob",
                "id": 2451044,
                "login": "dumblob",
                "node_id": "MDQ6VXNlcjI0NTEwNDQ=",
                "organizations_url": "https://api.github.com/users/dumblob/orgs",
                "received_events_url": "https://api.github.com/users/dumblob/received_events",
                "repos_url": "https://api.github.com/users/dumblob/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dumblob",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@dumblob My tests have shown BFS generally finds the target much faster because of the tendency to have deep hierarchies with many branches without a match.\n\n> (some decent fixed-size cache should help quite a lot)\n\nCurrent algorithm uses a linked list of every single directory searched. Profiling has revealed that most of the program's time is wasted here.\n",
            "created_at": "2014-11-08T17:48:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-62266624",
            "id": 62266624,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY2NjI0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62266624/reactions"
            },
            "updated_at": "2014-11-08T17:48:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62266624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> My tests have shown BFS generally finds the target much faster because of the tendency to have deep hierarchies with many branches without a match.\n\nSure, I was just pointing out, that we can implement BFS with absolutely the same memory consumption as DFS.\n\n> Current algorithm uses a linked list of every single directory searched. Profiling has revealed that most of the program's time is wasted here.\n\nWell, if the list would have some maximum length (e.g. 256) and was used as cache for all full-fitting tree levels from root inclusive in the iterative deepening search, it would be very fast and no problems should occur.\n\nRegarding compatibility, I think, that if there are modules which rely on DFS behavior instead of BFS behavior, they must be wrong modules. I wouldn't care about those in `neovim`.\n",
            "created_at": "2014-11-08T18:20:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-62269621",
            "id": 62269621,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY5NjIx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62269621/reactions"
            },
            "updated_at": "2014-11-08T18:21:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62269621",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2451044?v=4",
                "events_url": "https://api.github.com/users/dumblob/events{/privacy}",
                "followers_url": "https://api.github.com/users/dumblob/followers",
                "following_url": "https://api.github.com/users/dumblob/following{/other_user}",
                "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dumblob",
                "id": 2451044,
                "login": "dumblob",
                "node_id": "MDQ6VXNlcjI0NTEwNDQ=",
                "organizations_url": "https://api.github.com/users/dumblob/orgs",
                "received_events_url": "https://api.github.com/users/dumblob/received_events",
                "repos_url": "https://api.github.com/users/dumblob/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dumblob",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Just checking in; any update on this issue? Confirmed for desired behaviour? Still pending judgement? Already merged behind the scenes?\n",
            "created_at": "2015-01-23T15:02:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-71205305",
            "id": 71205305,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxMjA1MzA1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71205305/reactions"
            },
            "updated_at": "2015-01-23T15:02:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71205305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2235277?v=4",
                "events_url": "https://api.github.com/users/qstrahl/events{/privacy}",
                "followers_url": "https://api.github.com/users/qstrahl/followers",
                "following_url": "https://api.github.com/users/qstrahl/following{/other_user}",
                "gists_url": "https://api.github.com/users/qstrahl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/qstrahl",
                "id": 2235277,
                "login": "qstrahl",
                "node_id": "MDQ6VXNlcjIyMzUyNzc=",
                "organizations_url": "https://api.github.com/users/qstrahl/orgs",
                "received_events_url": "https://api.github.com/users/qstrahl/received_events",
                "repos_url": "https://api.github.com/users/qstrahl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/qstrahl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/qstrahl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/qstrahl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "PR needs unit/functional tests.\n",
            "created_at": "2015-01-23T17:45:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-71232762",
            "id": 71232762,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxMjMyNzYy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71232762/reactions"
            },
            "updated_at": "2015-01-23T17:45:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71232762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Seems that current `findfile()` function doesn't work for files in hidden directories (see https://stackoverflow.com/questions/52677909/how-to-search-hidden-directories-files-with-path-and-find)\r\n\r\nIf `findfile()` gets reimplemented with BFS, would it be possible to search files in hidden directories?",
            "created_at": "2021-01-07T12:43:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/1035#issuecomment-756094165",
            "id": 756094165,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1035",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc1NjA5NDE2NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/756094165/reactions"
            },
            "updated_at": "2021-01-07T12:43:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/756094165",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20282795?v=4",
                "events_url": "https://api.github.com/users/voldikss/events{/privacy}",
                "followers_url": "https://api.github.com/users/voldikss/followers",
                "following_url": "https://api.github.com/users/voldikss/following{/other_user}",
                "gists_url": "https://api.github.com/users/voldikss/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/voldikss",
                "id": 20282795,
                "login": "voldikss",
                "node_id": "MDQ6VXNlcjIwMjgyNzk1",
                "organizations_url": "https://api.github.com/users/voldikss/orgs",
                "received_events_url": "https://api.github.com/users/voldikss/received_events",
                "repos_url": "https://api.github.com/users/voldikss/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/voldikss/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/voldikss/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/voldikss",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 32,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/1035/comments",
    "created_at": "2014-08-05T17:35:22Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/1035/events",
    "html_url": "https://github.com/neovim/neovim/issues/1035",
    "id": 39543112,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/1035/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWUzOTU0MzExMg==",
    "number": 1035,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/1035/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/1035/timeline",
    "title": "breadth-first search for :find, findfile(), etc.",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T09:00:02Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/1035",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2235277?v=4",
        "events_url": "https://api.github.com/users/qstrahl/events{/privacy}",
        "followers_url": "https://api.github.com/users/qstrahl/followers",
        "following_url": "https://api.github.com/users/qstrahl/following{/other_user}",
        "gists_url": "https://api.github.com/users/qstrahl/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/qstrahl",
        "id": 2235277,
        "login": "qstrahl",
        "node_id": "MDQ6VXNlcjIyMzUyNzc=",
        "organizations_url": "https://api.github.com/users/qstrahl/orgs",
        "received_events_url": "https://api.github.com/users/qstrahl/received_events",
        "repos_url": "https://api.github.com/users/qstrahl/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/qstrahl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/qstrahl/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/qstrahl",
        "user_view_type": "public"
    }
}