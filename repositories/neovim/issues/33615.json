{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\n`vim.lsp.config(...)` expects `config.cmd` to be:\n\n```lua\n--- @type string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers) : vim.lsp.rpc.PublicClient\n```\n\nProposed change:\n\n```lua\n--- @type string[]|fun() : string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers) : vim.lsp.rpc.PublicClient\n```\n\nSetting `config.cmd` to a function that returns a table with command and args results in a silent error with no logs in `:LspLog`.  This approach previously worked with `require('lspconfig')[server_name].setup(...)`.\n\nExample config,\n\n```lua\n-- init.lua\n-- Custom LSP Server Configs:\n-- Servers not managed by mason-lspconfig\nlocal custom_servers = {\n    tblgen_lsp_server = {\n        cmd = function()\n            return {\n                'tblgen-lsp-server',\n                '--tablegen-compilation-database=' ..\n                    vim.fs.root(0, \"build\") ..\n                    '/build/tablegen_compile_commands.yml'\n            }\n        end,\n    },\n}\n\nfor server_name, config in pairs(custom_servers) do\n    vim.lsp.config(server_name, config)\n    vim.lsp.enable(server_name)\nend\n```\n\n### Expected behavior\n\n```lua\n-- init.lua\n-- Custom LSP Server Configs:\n-- Servers not managed by mason-lspconfig\nlocal custom_servers = {\n    mlir_lsp_server = {\n        cmd = { \"mlir_lsp_server\" },\n    },\n    tblgen_lsp_server = {\n        cmd = function()\n            return {\n                'tblgen-lsp-server',\n                '--tablegen-compilation-database=' ..\n                    vim.fs.root(0, \"build\") ..\n                    '/build/tablegen_compile_commands.yml'\n            }\n        end,\n    },\n    low_level_config = {\n        --- @param dispatchers vim.lsp.rpc.Dispatchers\n        --- @return vim.lsp.rpc.PublicClient\n        cmd = function(dispatchers)\n            return {\n\t        --- @type fun(method: string, params: table?, callback: fun(err?: lsp.ResponseError, result: any), notify_reply_callback?: fun(message_id: integer)) : boolean, integer?\n\t        request = function(method, params, callback, notify_reply_callback) end,\n\t        notify = function(method, params) end,\n\t        is_closing = function() end,\n\t        terminate = function() end,\n            }\n        end\n    }\n}\n\nfor server_name, config in pairs(custom_servers) do\n    vim.lsp.config(server_name, config)\n    vim.lsp.enable(server_name)\nend\n```\n\nAll three server config variants above should be accepted by `vim.lsp.config()`. Seems to follow convention more closely. \n\n__Possible Fix:__\n\n```lua\n-- nvim/runtime/lua/vim/lsp.lua\n\n--- @return string[]|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient\nlocal function resolve_config_cmd(v)\n    if type(v) == \"function\" then\n        --- @type  boolean, string[]|table\n        local ok, res = pcall(v)\n        if ok and type(res[1]) == 'string' and vim.fn.executable(res[1]) == 1 then\n            return res\n        end\n    end\n\n    return v\nend\n\nlsp.config = setmetatable({ _config = {} }, {\n    __index = function(self, name)\n        -- ...\n\t \n        if not rconfig.resolved_config then\n            -- ...\n\t\t\n            local config_cmd = rconfig.resolved_config.cmd\n\t    rconfig.resolved_config.cmd = resolve_config_cmd(config_cmd)\n        end\n\t\t\n        return rconfig.resolved_config\n    end,\n\n    -- ...\n})\n```\n\nThe above change correctly handles all three cases where `config.cmd` is either a table, a function returning a table, or a function returning `vim.lsp.rpc.PublicClient`. Possible fix should not break existing functionality, since downstream, `vim.lsp.rpc.start(cmd: string[], ...)` already supports `config.cmd` as a table containing the command and args. \n\n__Neovim Version:__\nv0.11.0",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33615/comments",
    "created_at": "2025-04-24T21:51:24Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33615/events",
    "html_url": "https://github.com/neovim/neovim/issues/33615",
    "id": 3018538419,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33615/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 3,
        "created_at": "2025-04-26T13:55:41Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/50",
        "id": 12793246,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/50/labels",
        "node_id": "MI_kwDOAPphoM4AwzWe",
        "number": 50,
        "open_issues": 21,
        "state": "open",
        "title": "0.11.2",
        "updated_at": "2025-04-28T13:01:46Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/50"
    },
    "node_id": "I_kwDOAPphoM6z6z2z",
    "number": 33615,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33615/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33615/timeline",
    "title": "LSP: vim.lsp.config supports `config.cmd: fun():string[]`",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-28T13:01:46Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33615",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4326621?v=4",
        "events_url": "https://api.github.com/users/tkamucheka/events{/privacy}",
        "followers_url": "https://api.github.com/users/tkamucheka/followers",
        "following_url": "https://api.github.com/users/tkamucheka/following{/other_user}",
        "gists_url": "https://api.github.com/users/tkamucheka/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tkamucheka",
        "id": 4326621,
        "login": "tkamucheka",
        "node_id": "MDQ6VXNlcjQzMjY2MjE=",
        "organizations_url": "https://api.github.com/users/tkamucheka/orgs",
        "received_events_url": "https://api.github.com/users/tkamucheka/received_events",
        "repos_url": "https://api.github.com/users/tkamucheka/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tkamucheka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tkamucheka/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tkamucheka",
        "user_view_type": "public"
    }
}