{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\nCurrently there is no way of acting after sign is added/changed/removed.\n\nFor example, this is helpful for caching sign data in a particular format to be then efficiently used inside 'statuscolumn'. It is relevant as statuscolumn is evaluated very frequently and doing get-filter-format steps for every drawn line on every redraw seems a bit wasteful (even if getting signs with `vim.api.nvim_buf_get_extmarks()`).\n\n### Expected behavior\n\nAdd `SignChanged` event.\n\nThis is similar to `DiagnosticChanged` event and would serve more or less the same purpose.\n\nAlthough this event can in theory be done first in Vim, there is less motivation for it there as 'statuscolumn' is a Neovim-only thing.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "IDK if this is useful generally, but I think a more fruitful (already possible) solution for `'statuscolumn'` might be to just implement a decor provider. Then you can prepare the necessary state in the `on_win` callback.\n\nConsidering that one of the main sign providers (i.e. gitsigns.nvim) itself implements a decor provider, a `SignChanged` event wouldn't be any more efficient.",
            "created_at": "2025-01-23T19:20:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2610827683",
            "id": 2610827683,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bnhGj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610827683/reactions"
            },
            "updated_at": "2025-01-23T19:20:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610827683",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes I agree. Calling `vim.api.nvim_buf_get_extmarks()` on each redraw is totally fine IMO.",
            "created_at": "2025-01-23T20:02:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2610907897",
            "id": 2610907897,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bn0r5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610907897/reactions"
            },
            "updated_at": "2025-01-23T20:02:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610907897",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It would be better (but not totally fine) to do computation in `on_win` callback of decoration provider, but is there a way to guarantee that all signs are final when `vim.api.nvim_buf_get_extmarks()` is called inside particular `on_win`? There might be other decoration providers adding signs and which are evaluated after the one created for 'statuscolumn' purpose.",
            "created_at": "2025-01-23T20:11:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2610922910",
            "id": 2610922910,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bn4We",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610922910/reactions"
            },
            "updated_at": "2025-01-23T20:11:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610922910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Fair point, maybe we can make an `on_line` returning `false` to mean not to invoke further `on_line` callbacks until the next redraw, similar to `on_win`. That way it could be used for preparing statuscolum state.\n\nAlthough like I said on Matrix, I still think ideally Nvim would provide a statuscolumn callback with the reasonably relevant state.",
            "created_at": "2025-01-23T20:20:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2610938986",
            "id": 2610938986,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bn8Rq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610938986/reactions"
            },
            "updated_at": "2025-01-23T20:20:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610938986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Singling out signs with their own event makes little sense anyway. Extmark handling is generally intended to be agnostic about what kind of decorations they contain, and adding `ExtmarkChanged` definitely feels like a step too far. I also don't think we'd ever want to add `HighlightChanged`, `VirtualTextChanged`, etc.\n\nThe OP is a bit too vague about the problem it's trying to solve, so it's difficult to suggest anything. Most definitely it's going to involve `nvim_buf_get_extmarks`, and the best time to call this would be when statuscolumn is being drawn, which is after `on_line` as Luuk has suggested already.",
            "created_at": "2025-01-23T20:38:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2610969043",
            "id": 2610969043,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6boDnT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610969043/reactions"
            },
            "updated_at": "2025-01-23T20:38:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610969043",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Singling out signs with their own event makes little sense anyway.\n\nSigns and folds are already singled out in 'statuscolumn'. And yes, adding `FoldChanged` *might* be also beneficial, but I am not really interested in it, so can't really argue for it.\n\n------\n\n> The OP is a bit too vague about the problem it's trying to solve\n\nAn efficient way of writing 'statuscolumn' function. As said in the [second sentence](https://github.com/neovim/neovim/issues/32185#issue-2807712717):\n\n> ... this is helpful for caching sign data in a particular format to be then efficiently used inside 'statuscolumn'.\n\nIn particular, writing 'statuscolumn' that \"reserves\" certain columns for certain signs (one cell for diagnostics, one for diffs, one for something else, etc.). Using plain `%s` doesn't achieve it. Currently computing that requires calling `sign_getplaced()` or `nvim_buf_get_extmarks()`+filtering in every call to 'statuscolumn' which is not really efficient. Preparing necessary data once per redraw (somehow) is better, but is still considerably more frequent than preparing it only when it is needed.\n\n------\n\n> the best time to call this would be when statuscolumn is being drawn\n\nThe best time to call `nvim_buf_get_extmarks` would be only when it is needed. Which is only when signs are added/changed/removed. The use case and all intentions are very similar to `DiagnosticChanged`.",
            "created_at": "2025-01-23T21:05:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2611015747",
            "id": 2611015747,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6boPBD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611015747/reactions"
            },
            "updated_at": "2025-01-23T21:05:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611015747",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The best time to call nvim_buf_get_extmarks would be only when it is needed. Which is only when signs are added/changed/removed.\n\nNote that isn't true for paired marks that might have shrunk/grown, unless if we count that as changed and fire the event. But IDK if we would want to cram autocommand events into the mark splice routines.\n\nI still think somehow passing placed signs for the line that is currently being evaluated to the 'statuscolumn' provider would be better.",
            "created_at": "2025-01-23T21:48:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2611086692",
            "id": 2611086692,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bogVk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611086692/reactions"
            },
            "updated_at": "2025-01-23T22:19:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611086692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> An efficient way of writing 'statuscolumn' function. As said in the second sentence:\n\nYes I read that sentence, and I'm telling you it is vague.\n\n> Currently computing that requires calling sign_getplaced() or nvim_buf_get_extmarks()+filtering in every call to 'statuscolumn' which is not really efficient.\n\nIf you pass a line range for each line, why does that make it inefficient? ~Do you want to pass a multi-line range for each call, or just a single line?~ I guess you want it for the whole buffer on each line.\n\n> In particular, writing 'statuscolumn' that \"reserves\" certain columns for certain signs (one cell for diagnostics, one for diffs, one for something else, etc.).\n\nNote we already have #10106. Though arguably being to efficiently do this with statuscolumn could be a nice approach. The implementations attempted to solve that are more in line with Luuks suggestion, but were done in C.",
            "created_at": "2025-01-23T21:55:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2611097078",
            "id": 2611097078,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6boi32",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611097078/reactions"
            },
            "updated_at": "2025-01-23T22:11:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611097078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "#10106 is already possible through 'statuscolumn' so we should probably close that as resolved, as we have done for other column related feature requests.\n\nThis issue is only about potentially making it more efficient. But I think making it more ergonomic would be preferred. I.e. no need to query various APIs for signs/folds but simply making these easily accesible for the 'statuscolumn' line currently being evaluated.\n\nDepending on the ongoing option work the ideal format for that could change but currently I would think just setting some `w:` or `v:` dict vars is at least a way forward.",
            "created_at": "2025-01-23T22:29:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2611147209",
            "id": 2611147209,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bovHJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611147209/reactions"
            },
            "updated_at": "2025-01-23T22:29:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611147209",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> [#10106](https://github.com/neovim/neovim/issues/10106) is already possible through 'statuscolumn' so we should probably close that as resolved, as we have done for other column related feature requests.\n\nDon't know if this is relevant to #10106, but it doesn't show/request the possibility of single cell width signs. This is indeed possible with 'statuscolumn', though, just not quite efficiently.\n\n> This issue is only about potentially making it more efficient. But I think making it more ergonomic would be preferred. I.e. no need to query various APIs for signs/folds but simply making these easily accesible for the 'statuscolumn' line currently being evaluated.\n\n> Depending on the ongoing option work the ideal format for that could change but currently I would think just setting some `w:` or `v:` dict vars is at least a way forward.\n\nYes, having something like `v:signs` and `v:fold` available for 'statuscolumn' similar to `v:virtnum` and friends would be enough. Additionally, those can be designed to also retrieve the information that signs or folds are not shown in this particular window. Like in cases of `signcolumn=no` or (more importantly) `signcolumn=auto` and there is no signs in whole buffer.",
            "created_at": "2025-01-24T09:15:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2612033942",
            "id": 2612033942,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bsHmW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2612033942/reactions"
            },
            "updated_at": "2025-01-24T09:15:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2612033942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32185/comments",
    "created_at": "2025-01-23T19:13:23Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32185/events",
    "html_url": "https://github.com/neovim/neovim/issues/32185",
    "id": 2807712717,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "sign/number column",
            "id": 2962322085,
            "name": "column",
            "node_id": "MDU6TGFiZWwyOTYyMzIyMDg1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/column"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32185/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6nWkvN",
    "number": 32185,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32185/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32185/timeline",
    "title": "`SignChanged` event",
    "updated_at": "2025-01-27T00:11:37Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32185",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}