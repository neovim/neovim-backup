{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\nCurrently there is no way of acting after sign is added/changed/removed.\n\nFor example, this is helpful for caching sign data in a particular format to be then efficiently used inside 'statuscolumn'. It is relevant as statuscolumn is evaluated very frequently and doing get-filter-format steps for every drawn line on every redraw seems a bit wasteful (even if getting signs with `vim.api.nvim_buf_get_extmarks()`).\n\n### Expected behavior\n\nAdd `SignChanged` event.\n\nThis is similar to `DiagnosticChanged` event and would serve more or less the same purpose.\n\nAlthough this event can in theory be done first in Vim, there is less motivation for it there as 'statuscolumn' is a Neovim-only thing.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "IDK if this is useful generally, but I think a more fruitful (already possible) solution for `'statuscolumn'` might be to just implement a decor provider ~Then you can prepare the necessary state in the `on_win` callback.~, and use `on_start->display_tick` to prepare the necessary state once per window per redraw.\n\nConsidering that one of the main sign providers (i.e. gitsigns.nvim) itself implements a decor provider, a `SignChanged` event wouldn't be any more efficient.",
            "created_at": "2025-01-23T19:20:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2610827683",
            "id": 2610827683,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bnhGj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610827683/reactions"
            },
            "updated_at": "2025-01-31T23:15:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610827683",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes I agree. Calling `vim.api.nvim_buf_get_extmarks()` on each redraw is totally fine IMO.",
            "created_at": "2025-01-23T20:02:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2610907897",
            "id": 2610907897,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bn0r5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610907897/reactions"
            },
            "updated_at": "2025-01-23T20:02:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610907897",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It would be better (but not totally fine) to do computation in `on_win` callback of decoration provider, but is there a way to guarantee that all signs are final when `vim.api.nvim_buf_get_extmarks()` is called inside particular `on_win`? There might be other decoration providers adding signs and which are evaluated after the one created for 'statuscolumn' purpose.",
            "created_at": "2025-01-23T20:11:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2610922910",
            "id": 2610922910,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bn4We",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610922910/reactions"
            },
            "updated_at": "2025-01-23T20:11:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610922910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Fair point, maybe we can make an `on_line` returning `false` to mean not to invoke further `on_line` callbacks until the next redraw, similar to `on_win`. That way it could be used for preparing statuscolum state.\n\nAlthough like I said on Matrix, I still think ideally Nvim would provide a statuscolumn callback with the reasonably relevant state.",
            "created_at": "2025-01-23T20:20:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2610938986",
            "id": 2610938986,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bn8Rq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610938986/reactions"
            },
            "updated_at": "2025-01-23T20:20:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610938986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Singling out signs with their own event makes little sense anyway. Extmark handling is generally intended to be agnostic about what kind of decorations they contain, and adding `ExtmarkChanged` definitely feels like a step too far. I also don't think we'd ever want to add `HighlightChanged`, `VirtualTextChanged`, etc.\n\nThe OP is a bit too vague about the problem it's trying to solve, so it's difficult to suggest anything. Most definitely it's going to involve `nvim_buf_get_extmarks`, and the best time to call this would be when statuscolumn is being drawn, which is after `on_line` as Luuk has suggested already.",
            "created_at": "2025-01-23T20:38:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2610969043",
            "id": 2610969043,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6boDnT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610969043/reactions"
            },
            "updated_at": "2025-01-23T20:38:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2610969043",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Singling out signs with their own event makes little sense anyway.\n\nSigns and folds are already singled out in 'statuscolumn'. And yes, adding `FoldChanged` *might* be also beneficial, but I am not really interested in it, so can't really argue for it.\n\n------\n\n> The OP is a bit too vague about the problem it's trying to solve\n\nAn efficient way of writing 'statuscolumn' function. As said in the [second sentence](https://github.com/neovim/neovim/issues/32185#issue-2807712717):\n\n> ... this is helpful for caching sign data in a particular format to be then efficiently used inside 'statuscolumn'.\n\nIn particular, writing 'statuscolumn' that \"reserves\" certain columns for certain signs (one cell for diagnostics, one for diffs, one for something else, etc.). Using plain `%s` doesn't achieve it. Currently computing that requires calling `sign_getplaced()` or `nvim_buf_get_extmarks()`+filtering in every call to 'statuscolumn' which is not really efficient. Preparing necessary data once per redraw (somehow) is better, but is still considerably more frequent than preparing it only when it is needed.\n\n------\n\n> the best time to call this would be when statuscolumn is being drawn\n\nThe best time to call `nvim_buf_get_extmarks` would be only when it is needed. Which is only when signs are added/changed/removed. The use case and all intentions are very similar to `DiagnosticChanged`.",
            "created_at": "2025-01-23T21:05:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2611015747",
            "id": 2611015747,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6boPBD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611015747/reactions"
            },
            "updated_at": "2025-01-23T21:05:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611015747",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The best time to call nvim_buf_get_extmarks would be only when it is needed. Which is only when signs are added/changed/removed.\n\nNote that isn't true for paired marks that might have shrunk/grown, unless if we count that as changed and fire the event. But IDK if we would want to cram autocommand events into the mark splice routines.\n\nI still think somehow passing placed signs for the line that is currently being evaluated to the 'statuscolumn' provider would be better.",
            "created_at": "2025-01-23T21:48:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2611086692",
            "id": 2611086692,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bogVk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611086692/reactions"
            },
            "updated_at": "2025-01-23T22:19:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611086692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> An efficient way of writing 'statuscolumn' function. As said in the second sentence:\n\nYes I read that sentence, and I'm telling you it is vague.\n\n> Currently computing that requires calling sign_getplaced() or nvim_buf_get_extmarks()+filtering in every call to 'statuscolumn' which is not really efficient.\n\nIf you pass a line range for each line, why does that make it inefficient? ~Do you want to pass a multi-line range for each call, or just a single line?~ I guess you want it for the whole buffer on each line.\n\n> In particular, writing 'statuscolumn' that \"reserves\" certain columns for certain signs (one cell for diagnostics, one for diffs, one for something else, etc.).\n\nNote we already have #10106. Though arguably being to efficiently do this with statuscolumn could be a nice approach. The implementations attempted to solve that are more in line with Luuks suggestion, but were done in C.",
            "created_at": "2025-01-23T21:55:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2611097078",
            "id": 2611097078,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6boi32",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611097078/reactions"
            },
            "updated_at": "2025-01-23T22:11:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611097078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "#10106 is already possible through 'statuscolumn' so we should probably close that as resolved, as we have done for other column related feature requests.\n\nThis issue is only about potentially making it more efficient. But I think making it more ergonomic would be preferred. I.e. no need to query various APIs for signs/folds but simply making these easily accesible for the 'statuscolumn' line currently being evaluated.\n\nDepending on the ongoing option work the ideal format for that could change but currently I would think just setting some `w:` or `v:` dict vars is at least a way forward.",
            "created_at": "2025-01-23T22:29:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2611147209",
            "id": 2611147209,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bovHJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611147209/reactions"
            },
            "updated_at": "2025-01-23T22:29:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2611147209",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> [#10106](https://github.com/neovim/neovim/issues/10106) is already possible through 'statuscolumn' so we should probably close that as resolved, as we have done for other column related feature requests.\n\nDon't know if this is relevant to #10106, but it doesn't show/request the possibility of single cell width signs. This is indeed possible with 'statuscolumn', though, just not quite efficiently.\n\n> This issue is only about potentially making it more efficient. But I think making it more ergonomic would be preferred. I.e. no need to query various APIs for signs/folds but simply making these easily accesible for the 'statuscolumn' line currently being evaluated.\n\n> Depending on the ongoing option work the ideal format for that could change but currently I would think just setting some `w:` or `v:` dict vars is at least a way forward.\n\nYes, having something like `v:signs` and `v:fold` available for 'statuscolumn' similar to `v:virtnum` and friends would be enough. Additionally, those can be designed to also retrieve the information that signs or folds are not shown in this particular window. Like in cases of `signcolumn=no` or (more importantly) `signcolumn=auto` and there is no signs in whole buffer.",
            "created_at": "2025-01-24T09:15:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2612033942",
            "id": 2612033942,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6bsHmW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2612033942/reactions"
            },
            "updated_at": "2025-01-24T09:15:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2612033942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@famiu, do you have any insights/updates/estimates on making 'statuscolumn' option more suitable to be passed arguments? Like data about signs in the current line, etc.",
            "created_at": "2025-01-31T12:54:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2627251700",
            "id": 2627251700,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6cmK30",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627251700/reactions"
            },
            "updated_at": "2025-01-31T12:54:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627251700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> [@famiu](https://github.com/famiu), do you have any insights/updates/estimates on making 'statuscolumn' option more suitable to be passed arguments? Like data about signs in the current line, etc.\n\nI'm not sure I understand the problem well, but I think making `statuscolumn` multitype with the option of making it a callback option might've solved the problem. Multitype options were ruled out tho (much to my own annoyance), so idk what the alternative would be.",
            "created_at": "2025-01-31T14:49:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2627531249",
            "id": 2627531249,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6cnPHx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627531249/reactions"
            },
            "updated_at": "2025-01-31T14:49:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627531249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The problem is to be able to write 'statuscolumn' as a function (either as a direct Lua function or in the current 'v:lua.statuscolumn()') form) so that it can have more accent to the context it needs to draw. Like the array of signs or fold data specifically for the drawn line.\n\nThe traditional approach is to populate `v:` variables, which is fine. But [as far as I understand](https://github.com/neovim/neovim/issues/32185#issuecomment-2611147209) that was ruled to be inferior to the approach when that information is available as argument to function `statuscolumn`.\n\n@luukvbaal, @lewis6991: given that making 'statuscolumn' a function seems to be not on the horizon, is going with something like `v:signs` and `v:folds` for a more performant 'statuscolumn' back on the table?",
            "created_at": "2025-01-31T14:59:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2627553490",
            "id": 2627553490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6cnUjS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627553490/reactions"
            },
            "updated_at": "2025-01-31T14:59:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627553490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "IDK, personally I don't see the harm in new `v:` variables. I went through our (two year) old chat logs to find:\n\n![Image](https://github.com/user-attachments/assets/d52fbf9a-3a2a-4157-89bc-845dc86b7ef2)",
            "created_at": "2025-01-31T15:18:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2627596542",
            "id": 2627596542,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6cnfD-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627596542/reactions"
            },
            "updated_at": "2025-01-31T15:21:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627596542",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I dunno what anyone here is talking about, https://github.com/neovim/neovim/pull/31280 literally allows setting statuscolumn as a function. This has nothing to do with multitype options.",
            "created_at": "2025-01-31T15:25:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2627614336",
            "id": 2627614336,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6cnjaA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627614336/reactions"
            },
            "updated_at": "2025-01-31T15:25:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627614336",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> https://github.com/neovim/neovim/pull/31280 literally allows setting statuscolumn as a function.\n\nNot in a way that allows Nvim to pass arguments to it right? That would probably still require actual function-callback type options in core (and multitype if it is to be used for existing options with BWC)?",
            "created_at": "2025-01-31T15:30:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2627623538",
            "id": 2627623538,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6cnlpy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627623538/reactions"
            },
            "updated_at": "2025-01-31T15:30:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627623538",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm not sure why arguments are necessary when functions have access to the nvim API (`nvim_buf_get_extmarks`), and an API for folds is planned in addition to what's provided in `vim.fn`.",
            "created_at": "2025-01-31T16:13:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2627715602",
            "id": 2627715602,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6cn8IS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627715602/reactions"
            },
            "updated_at": "2025-01-31T16:13:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627715602",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It's necessary/wanted in the case of 'statuscolumn' which wants to provide the callback with the relevant information. Some but not all information is now available in `v:`, some is available through API's, and some only through FFI.\n\nIf the long term solution you mentioned is a LuaRef, and should not include `v:` vars. I think logically we would pass arguments to that function. If not, I don't see a benefit over just doing `:set statuscolumn=%!v:lua.statuscol()`.",
            "created_at": "2025-01-31T16:36:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2627767676",
            "id": 2627767676,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6coI18",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627767676/reactions"
            },
            "updated_at": "2025-01-31T16:36:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627767676",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "What information?\n\n> If not, I don't see a benefit over just doing :set statuscolumn=%!v:lua.statuscol().\n\nI don't think there is either other than the reduced minor boilerplate. Fortunately the PR does this generally for a dozen options.",
            "created_at": "2025-01-31T16:42:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2627779521",
            "id": 2627779521,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6coLvB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627779521/reactions"
            },
            "updated_at": "2025-01-31T16:45:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627779521",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What information?\n\nAt least information about signs and folds to be rendered in currently drawn line. Same as there is info in `v:lnum`, `v:relnum`, `v:virtnum`. Neovim itself already has that info computed, so not having to recompute it is a big performance improvement (not even talking about convenience and even availability as with folds). Having to do recomputation on every visible line on every screen redraw accumulates really quickly.\n\nOne thing that makes it even worse is the case of emulating `signcolumn=auto` (or `foldcolumn=auto`, for that matter): show signs/folds only if there is at least one in the whole buffer. This needs querying information about the whole buffer inside 'statuscolumn' function to be computed for every line, which is far more frequently than it needs to. This could have been solved with caching on `SignChanged` event, but that is evidently not happening.\n\n------\n\nHere is what I've come up with for the benchmark of the current design impact:\n\n```lua\n-- Create benchmarking statuscolumn that roughly imitates 'signcolumn=auto'\nlocal get_extmarks = vim.api.nvim_buf_get_extmarks\n\nlocal has_signs_opts = { details = true, limit = 1, type = 'sign' }\nlocal has_no_signs = function() return #get_extmarks(0, -1, 0, -1, has_signs_opts) == 0 end\n\n_G.durations = {}\nlocal statuscolumn_opts = { details = true, hl_name = true, type = 'sign' }\n_G.statuscolumn = function()\n  local start_time = vim.loop.hrtime()\n  if vim.wo.signcolumn == 'no' or (vim.wo.signcolumn:sub(1, 4) == 'auto' and has_no_signs()) then\n    table.insert(_G.durations, 0.000001 * (vim.loop.hrtime() - start_time))\n    return ''\n  end\n  local signs = get_extmarks(0, -1, { vim.v.lnum - 1, 0 }, { vim.v.lnum - 1, -1 }, statuscolumn_opts)\n  table.insert(_G.durations, 0.000001 * (vim.loop.hrtime() - start_time))\n\n  -- Show only first sign, but in real cases all signs will be accounted for\n  if signs[1] == nil then return ' ' end\n  return signs[1][4].sign_text or ' '\nend\n\nvim.o.signcolumn = 'auto'\nvim.o.statuscolumn = '%{%v:lua.statuscolumn()%}'\n\n-- Helper for benchmarks\n_G.show_duration_summary = function()\n  local tot = 0\n  for _, dur in ipairs(_G.durations) do\n    tot = tot + dur\n  end\n  print(tot)\nend\n\n-- Create demo buffer for the `nvim --clean` case\nvim.cmd.enew()\nvim.api.nvim_buf_set_lines(0, 0, -1, false, vim.fn['repeat']({ 'A line' }, 100))\nlocal ns_id = vim.api.nvim_create_namespace('demo')\nvim.api.nvim_buf_set_extmark(0, ns_id, 70, 0, { sign_text = '!' })\n```\n\nOn latest `main` with `nvim --clean -u path/to/that/code/as/init.lua` scrolling up and down with `<C-f>` / `<C-b>` 10 times shows 440 calls with total of 1.95ms of overhead due to needing to use `nvim_buf_get_extmarks()`.\n\nHaving this as 'statuscolumn' in my regular config (with all daily functionality enabled that causes signs and redraws), opening 'runtime/lua/editorconfig.lua' and scrolling with `<C-f>` / `<C-b>` 10 times shows 1344 calls with 65.27ms of overhead. And this is only after couple of seconds of editing *and* with a single window (more windows, more calls).\n\nIf numbers from the `nvim --clean` case is very borderline acceptable (although I'd still consider this too much for a basic functionality), the real world numbers are way to large to be treated as acceptable. Not having to manually compute what should already be computed (or can be computed much more efficiently) by Neovim itself would be a big improvement.",
            "created_at": "2025-01-31T19:05:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2628101638",
            "id": 2628101638,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6cpaYG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628101638/reactions"
            },
            "updated_at": "2025-01-31T19:05:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628101638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "From my POV it's not necessarily the performance aspect that wants for improvement. One can add a decor provider and use the `display_tick` passed to the `on_start` callback to prepare the necessary state through API calls in the first 'statuscolumn' evaluation, once per redraw per window. That much is already possible (bypassing the drawbacks of the `on_win/line` options mentioned above), and is obviously preferred to calling APIs for each drawn line.\n\n> What information?\n\nTo my knowledge what's actually missing and requires FFI is:\n- #22035\n- [`win_col_off()`](https://github.com/neovim/neovim/blob/e71d2c817d1a2475551f58a98e411f6b39a5be3f/src/nvim/move.c#L764) to determine whether the statuscolumn is as of yet empty. E.g. used to not draw padding. There is `getwininfo().textoff` but AFAIR there were problems calling that from statuscolumn callback because it calls `update_topline()`.\n\nProviding number/sign/fold information for the line actually being evaluated through `v:` vars or function arguments would only improve ergonomics, not strictly necessary if usable APIs are added to resolve the above.",
            "created_at": "2025-01-31T22:26:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2628502896",
            "id": 2628502896,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6cq8Vw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628502896/reactions"
            },
            "updated_at": "2025-01-31T23:11:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628502896",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `getwininfo().textoff` but AFAIR there were problems calling that from statuscolumn callback because it calls `update_topline()`\n\nCould add a optional arg to `getwininfo()` to control that.",
            "created_at": "2025-02-01T11:42:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2628918836",
            "id": 2628918836,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6csh40",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628918836/reactions"
            },
            "updated_at": "2025-02-01T11:42:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628918836",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> From my POV it's not necessarily the performance aspect that wants for improvement. One can add a decor provider and use the `display_tick` passed to the `on_start` callback to prepare the necessary state through API calls in the first 'statuscolumn' evaluation, once per redraw per window. That much is already possible (bypassing the drawbacks of the `on_win/line` options mentioned above), and is obviously preferred to calling APIs for each drawn line.\n\nYes, using `on_start` can remove the need for `has_no_signs()` inside function 'statuscolumn', which is a big improvement. In [this example](https://github.com/neovim/neovim/issues/32185#issuecomment-2628101638) simply not calling it reduces a total computation time for ~1400 calls from ~65ms to ~4ms.\n\nI am still not sure I understand how computing state in `on_start` (earlier than `on_win` and `on_line`) can help with the case when some unknown decoration provider sets signs in `on_win` / `on_line`. The effect in this case will be present on the next redraw, right?\n\n",
            "created_at": "2025-02-01T12:13:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2628928959",
            "id": 2628928959,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6cskW_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628928959/reactions"
            },
            "updated_at": "2025-02-01T12:13:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628928959",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I am still not sure I understand how computing state in `on_start` (earlier than `on_win` and `on_line`) can help with the case when some unknown decoration provider sets signs in `on_win` / `on_line`. The effect in this case will be present on the next redraw, right?\n\nYou _don't_ prepare the state in the `on_start` callback, you only store it's `display_tick` argument. You attach the tick to a window handle and check if it is smaller than the global tick. That means you are evaluating 'statuscolumn'  for the first line that is redrawn for a particular `win_update()`, which is by definition after any `on_win` callbacks. You prepare state there to be used for all lines in a window evaluated in a single redraw.\n\nIs adding signs in `on_line` currently allowed? At least ephemaral signs are not supported, if non-ephemeral are allowed, that could cause problems with an auto signcolumn.\n\n",
            "created_at": "2025-02-01T12:38:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2628937343",
            "id": 2628937343,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6csmZ_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628937343/reactions"
            },
            "updated_at": "2025-02-01T14:51:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628937343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is adding signs in `on_line` currently allowed? At least ephemaral signs are not supported, if non-ephemeral are allowed, that could cause problems with an auto signcolumn.\n\nYes, they are allowed. This adds signs:\n\n```lua\nlocal ns_id = vim.api.nvim_create_namespace('on_line-extmarks')\nlocal buf_extmarks = {}\nlocal on_line = function(_, _, buf_id, row)\n  if buf_extmarks[buf_id] ~= nil or row ~= 1 then return end\n  buf_extmarks[buf_id] = vim.api.nvim_buf_set_extmark(buf_id, ns_id, row, 0, { sign_text = '!!' })\nend\nvim.api.nvim_set_decoration_provider(ns_id, { on_line = on_line })\n```",
            "created_at": "2025-02-01T13:26:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/32185#issuecomment-2628953359",
            "id": 2628953359,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32185",
            "node_id": "IC_kwDOAPphoM6csqUP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628953359/reactions"
            },
            "updated_at": "2025-02-01T13:26:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628953359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 25,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32185/comments",
    "created_at": "2025-01-23T19:13:23Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32185/events",
    "html_url": "https://github.com/neovim/neovim/issues/32185",
    "id": 2807712717,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "sign/number column",
            "id": 2962322085,
            "name": "column",
            "node_id": "MDU6TGFiZWwyOTYyMzIyMDg1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/column"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32185/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6nWkvN",
    "number": 32185,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32185/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32185/timeline",
    "title": "`SignChanged` event",
    "updated_at": "2025-02-01T14:51:10Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32185",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}