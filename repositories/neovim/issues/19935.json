{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "\r\n\r\n## Feature description\r\nHave the \"setter\" version of `nvim_get_mode`. Currently, the only \"official\"/\"reliable\" way to get between basic modes is to use the default keybindings. If you want to do something else, too bad (though I'm sure there are exceptions/workarounds that I can't find via Google).\r\n\r\nFairly simple in concept, though I'm not sure how ingrained the default keybindings are in (neo)vim to their actual function of changing modes.\r\n\r\n## Use case\r\nIn telescope prompt, I want a dual behavior of `<Esc>`: close the window if the prompt is empty, otherwise change to normal mode. However, now that I've overridden the escape key functionality, there's not way to get back into normal mode. Having a `nvim_set_mode` function would easily solve the issue, while also providing some extra flexibility",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Although this is a good idea, in your particular use case, it may be possible to implement your behavior using a mapping that calls a function, and a combination of `nvim_input` and such? ",
            "created_at": "2022-08-25T06:15:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/19935#issuecomment-1226822144",
            "id": 1226822144,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19935",
            "node_id": "IC_kwDOAPphoM5JH9IA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1226822144/reactions"
            },
            "updated_at": "2022-08-25T06:15:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1226822144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/39092278?v=4",
                "events_url": "https://api.github.com/users/vigoux/events{/privacy}",
                "followers_url": "https://api.github.com/users/vigoux/followers",
                "following_url": "https://api.github.com/users/vigoux/following{/other_user}",
                "gists_url": "https://api.github.com/users/vigoux/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vigoux",
                "id": 39092278,
                "login": "vigoux",
                "node_id": "MDQ6VXNlcjM5MDkyMjc4",
                "organizations_url": "https://api.github.com/users/vigoux/orgs",
                "received_events_url": "https://api.github.com/users/vigoux/received_events",
                "repos_url": "https://api.github.com/users/vigoux/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vigoux/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vigoux/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vigoux",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> it may be possible to implement your behavior using a mapping that calls a function, and a combination of `nvim_input` and such?\r\n\r\nThat's more or less what I had gotten to, but by overriding the `<Esc>` binding, there isn't a way to get back to normal mode. At least that I'm aware of. \r\n```lua\r\nlocal action_state = require('telescope.actions.state')\r\n\r\nlocal function isempty(s)\r\n  return s == nil or s == ''\r\nend\r\n\r\nlocal function closeEmptyPrompt(prompt_bufnr)\r\n  local prompt_str = action_state.get_current_line(prompt_bufnr)\r\n  if isempty(prompt_str) then\r\n    actions.close(prompt_bufnr)\r\n  else\r\n    -- Get to normal mode somehow\r\n  end\r\nend\r\n```\r\n\r\nTrying to do `vim.api.nvim_input('<Esc>')`, but that just causes it to get stuck in a recursive loop (confirmed by adding a `print(math.random())` in the function).",
            "created_at": "2022-08-25T16:10:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/19935#issuecomment-1227479670",
            "id": 1227479670,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19935",
            "node_id": "IC_kwDOAPphoM5JKdp2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227479670/reactions"
            },
            "updated_at": "2022-08-25T16:10:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227479670",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20801821?v=4",
                "events_url": "https://api.github.com/users/jrwrigh/events{/privacy}",
                "followers_url": "https://api.github.com/users/jrwrigh/followers",
                "following_url": "https://api.github.com/users/jrwrigh/following{/other_user}",
                "gists_url": "https://api.github.com/users/jrwrigh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jrwrigh",
                "id": 20801821,
                "login": "jrwrigh",
                "node_id": "MDQ6VXNlcjIwODAxODIx",
                "organizations_url": "https://api.github.com/users/jrwrigh/orgs",
                "received_events_url": "https://api.github.com/users/jrwrigh/received_events",
                "repos_url": "https://api.github.com/users/jrwrigh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jrwrigh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jrwrigh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jrwrigh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "In general I'm not sure it's a good idea to start adding aliases to all the various normal-mode commands. But some use-cases like interrupt/CTRL-c/dismiss are an exception to that rule, they deserve a formal API. \r\n\r\nMaybe \"set the mode\" is another such use-case. Or maybe we need a way to get results from a `nvim_input()` atom.",
            "created_at": "2022-08-25T18:30:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/19935#issuecomment-1227621833",
            "id": 1227621833,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19935",
            "node_id": "IC_kwDOAPphoM5JLAXJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227621833/reactions"
            },
            "updated_at": "2022-08-25T18:30:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227621833",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I would like to see a lua API to switch modes as well.\r\n\r\nMy use case, nvim cmp will enter select mode after confirming a selection. I have a mapping to exit insert or select mode and return to normal mode by using `vim.cmd.stopinsert()`. This works fine for insert mode but does nothing in select mode.\r\n\r\nI ended up working around this by passing `<C-c>` to return to normal mode from either insert or select mode.\r\n\r\n```lua\r\nvim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('<C-c>', true, false, true), 'n', true)\r\n```\r\n\r\n",
            "created_at": "2023-12-19T20:51:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/19935#issuecomment-1863454342",
            "id": 1863454342,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19935",
            "node_id": "IC_kwDOAPphoM5vEg6G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1863454342/reactions"
            },
            "updated_at": "2023-12-19T20:51:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1863454342",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10135646?v=4",
                "events_url": "https://api.github.com/users/mikesmithgh/events{/privacy}",
                "followers_url": "https://api.github.com/users/mikesmithgh/followers",
                "following_url": "https://api.github.com/users/mikesmithgh/following{/other_user}",
                "gists_url": "https://api.github.com/users/mikesmithgh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mikesmithgh",
                "id": 10135646,
                "login": "mikesmithgh",
                "node_id": "MDQ6VXNlcjEwMTM1NjQ2",
                "organizations_url": "https://api.github.com/users/mikesmithgh/orgs",
                "received_events_url": "https://api.github.com/users/mikesmithgh/received_events",
                "repos_url": "https://api.github.com/users/mikesmithgh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mikesmithgh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mikesmithgh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mikesmithgh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> In general I'm not sure it's a good idea to start adding aliases to all the various normal-mode commands. But some use-cases like interrupt/CTRL-c/dismiss are an exception to that rule, they deserve a formal API.\r\n> \r\n> Maybe \"set the mode\" is another such use-case. Or maybe we need a way to get results from a `nvim_input()` atom.\r\n\r\nWhy not? Right now a lot of behavior can only be accessed through a brittle interface that:\r\n- assumes user hasn't remapped the hotkey in question\r\n- makes scripts less readable (\"J\" vs. join_lines())\r\n- has no way to retrieve the original behavior if that mapping is replaced (and not all default hotkeys even can be redefined, I suspect partly because of this problem)\r\n\r\nI can't think of any other program that calls an API by sending raw keyboard input, like some kind of super-`eval`.\r\n\r\n\r\nAdding API functions doesn't subtract anything and the existing hotkeys can instead be defined in terms of them. You have already committed to an interface contract by including these mappings in the first place, this just gives them stable aliases in the function namespace.",
            "created_at": "2024-05-22T13:23:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/19935#issuecomment-2124791144",
            "id": 2124791144,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19935",
            "node_id": "IC_kwDOAPphoM5-pb1o",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2124791144/reactions"
            },
            "updated_at": "2024-05-23T09:41:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2124791144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8783424?v=4",
                "events_url": "https://api.github.com/users/tjakway/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjakway/followers",
                "following_url": "https://api.github.com/users/tjakway/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjakway/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjakway",
                "id": 8783424,
                "login": "tjakway",
                "node_id": "MDQ6VXNlcjg3ODM0MjQ=",
                "organizations_url": "https://api.github.com/users/tjakway/orgs",
                "received_events_url": "https://api.github.com/users/tjakway/received_events",
                "repos_url": "https://api.github.com/users/tjakway/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjakway/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjakway/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjakway",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "What exactly needs to be considered for this to be made viable exactly? I'm curious as someone new to Neovim, and I'm not sure if I'm really grasping the complexity of the task as described by the set tags. Sorry to bump after literally 2 years, just curious on whether it is still as complex as made out given the elapsed time.",
            "created_at": "2024-07-04T16:03:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/19935#issuecomment-2209285943",
            "id": 2209285943,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19935",
            "node_id": "IC_kwDOAPphoM6Drwc3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2209285943/reactions"
            },
            "updated_at": "2024-07-04T16:03:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2209285943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/63274991?v=4",
                "events_url": "https://api.github.com/users/cyrus01337/events{/privacy}",
                "followers_url": "https://api.github.com/users/cyrus01337/followers",
                "following_url": "https://api.github.com/users/cyrus01337/following{/other_user}",
                "gists_url": "https://api.github.com/users/cyrus01337/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cyrus01337",
                "id": 63274991,
                "login": "cyrus01337",
                "node_id": "MDQ6VXNlcjYzMjc0OTkx",
                "organizations_url": "https://api.github.com/users/cyrus01337/orgs",
                "received_events_url": "https://api.github.com/users/cyrus01337/received_events",
                "repos_url": "https://api.github.com/users/cyrus01337/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cyrus01337/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cyrus01337/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cyrus01337",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I ended up working around this by passing `<C-c>` to return to normal mode\r\n\r\nDid you try `:help interrupt()`?\r\n\r\n> just curious on whether it is still as complex as made out given the elapsed time.\r\n\r\n@cyrus01337 It might not be high complexity, I've removed that tag. Next step is to propose an interface (that would have removed a lot of unnecessary guesswork from the initial request here). PR welcome.",
            "created_at": "2024-09-02T19:07:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/19935#issuecomment-2325215385",
            "id": 2325215385,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19935",
            "node_id": "IC_kwDOAPphoM6Kl_iZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2325215385/reactions"
            },
            "updated_at": "2024-09-02T19:07:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2325215385",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "To add a possible usecase for this.\nCurrently (I think) there is no way to change the mode to insert without making `.` consider it alone as the last change, thus making it not possible to have a fully dot-repeatable opfunc operator that leaves you in insert mode.",
            "created_at": "2024-11-03T17:53:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/19935#issuecomment-2453510758",
            "id": 2453510758,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19935",
            "node_id": "IC_kwDOAPphoM6SPZpm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453510758/reactions"
            },
            "updated_at": "2024-11-03T17:53:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453510758",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/27977196?v=4",
                "events_url": "https://api.github.com/users/TheSast/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheSast/followers",
                "following_url": "https://api.github.com/users/TheSast/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheSast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheSast",
                "id": 27977196,
                "login": "TheSast",
                "node_id": "MDQ6VXNlcjI3OTc3MTk2",
                "organizations_url": "https://api.github.com/users/TheSast/orgs",
                "received_events_url": "https://api.github.com/users/TheSast/received_events",
                "repos_url": "https://api.github.com/users/TheSast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheSast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheSast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheSast",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/19935/comments",
    "created_at": "2022-08-24T23:13:43Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/19935/events",
    "html_url": "https://github.com/neovim/neovim/issues/19935",
    "id": 1350117259,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/19935/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5QeSeL",
    "number": 19935,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/19935/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/19935/timeline",
    "title": "API to change mode (ie. nvim_set_mode)",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:45Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/19935",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/20801821?v=4",
        "events_url": "https://api.github.com/users/jrwrigh/events{/privacy}",
        "followers_url": "https://api.github.com/users/jrwrigh/followers",
        "following_url": "https://api.github.com/users/jrwrigh/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrwrigh/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jrwrigh",
        "id": 20801821,
        "login": "jrwrigh",
        "node_id": "MDQ6VXNlcjIwODAxODIx",
        "organizations_url": "https://api.github.com/users/jrwrigh/orgs",
        "received_events_url": "https://api.github.com/users/jrwrigh/received_events",
        "repos_url": "https://api.github.com/users/jrwrigh/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jrwrigh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrwrigh/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jrwrigh",
        "user_view_type": "public"
    }
}