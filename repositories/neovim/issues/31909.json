{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nWhen writing or configuring plugins, it's often useful to see the output of functions or variables in a buffer where you can navigate with `/` and `%` and other vim motions. Since lua is the core config language of neovim, this would be a great built-in feature.\n\nYou can achieve something like this with `:new | put =luaeval('vim.inspect(value_to_inspect)')` but it's awkward, not a proper scratch buffer, and it doesn't autocomplete (since the target lua command is inside a string).\n\nProposed solution: Similar to `:lua=` to print a lua expression, add `:lua>` to dump an expression into a scratch buffer.\n\n\nEssentially, bind it to this function:\n```lua\n-- Dump a lua value to a buffer for inspection.\nfunction View(v)\n    -- Use a unique filename to avoid opening an existing buffer.\n    vim.cmd.vnew(\"lua output \".. os.time())\n    vim.bo.buftype = \"nofile\"\n    vim.bo.bufhidden = \"delete\"\n    vim.bo.swapfile = false\n    vim.cmd.setfiletype(\"lua\")\n\n    local start_line = 0\n    local bufnr = vim.fn.bufnr()\n    for i=1,select('#', ...) do\n        local val = select(i, ...)\n        local lines = vim.split(vim.inspect(val), \"\\n\")\n        if i == 1 then\n            lines[1] = \"output = \".. lines[1]  -- make buffer closer to valid lua\n        else\n            lines[1] = \", \".. lines[1]\n        end\n        vim.api.nvim_buf_set_lines(bufnr, start_line, -1, false, lines)\n        start_line = -1\n    end \nend\n```\n\nI picked `>` to be like redirecting it to a buffer. I'm not sure if there's another symbol that's both easy to implement in the parser and has an association with buffers. Maybe `lua^` or `lua!` could work too.\n\n### Expected behavior\n\nWith this command, if you want to inspect the active lsp config, you can dump it into a buffer to examine:\n```vim\n:lua> vim.lsp.get_active_clients()\n```\n\nOr even browse the entire vim api:\n```vim\n:lua> vim\n```\n\nBoth of these commands would create a new scratch buffer (that's destroyed on close and with no backing file) and populate it with the pretty-printed output of those lua values. Another complete example using multiple values:\n\n```vim\n:lua> vim.cmd, vim.bo\n```\n\nSplits to create a scratch buffer with this content:\n```lua\noutput = {\n  autocmd = <function 1>,\n  file = <function 2>,\n  new = <function 3>,\n  setfiletype = <function 4>,\n  vnew = <function 5>,\n  <metatable> = {\n    __call = <function 6>,\n    __index = <function 7>\n  }\n}\n, {\n  <metatable> = {\n    __index = <function 1>,\n    __newindex = <function 2>\n  }\n}\n```\n\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "We have special `:=` for dumping Lua output to the message area; we could easily add `:^=` or a variant thereof to dump to a new buffer instead. (Special casing multiple values beyond what `print` does naturally seems overkill to me, though.)\n\nBut be aware that @luukvbaal is currently rewriting the message code entirely, which will give you the wanted behavior (searchable, copyable message output) for free.",
            "created_at": "2025-01-08T08:33:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/31909#issuecomment-2577066031",
            "id": 2577066031,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31909",
            "node_id": "IC_kwDOAPphoM6Zmugv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2577066031/reactions"
            },
            "updated_at": "2025-01-08T08:33:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2577066031",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No objection, but is there any reason this wouldn't be covered by the planned `:read :foo` enhancement? https://github.com/neovim/neovim/pull/30628 This is intended to support reading output of any Ex command into a buffer.",
            "created_at": "2025-01-08T12:28:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/31909#issuecomment-2577555584",
            "id": 2577555584,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31909",
            "node_id": "IC_kwDOAPphoM6ZomCA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2577555584/reactions"
            },
            "updated_at": "2025-01-08T12:28:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2577555584",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": " Mostly sugar on top of that (same as `:=` is -- _very_ convenient! -- sugar on top of `:lua vim.print(...)`).",
            "created_at": "2025-01-08T12:47:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/31909#issuecomment-2577592867",
            "id": 2577592867,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31909",
            "node_id": "IC_kwDOAPphoM6ZovIj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2577592867/reactions"
            },
            "updated_at": "2025-01-08T12:47:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2577592867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For those looking for an even more powerful way to inspect large lua values\nthere are also repl plugins like [nluarepl](https://github.com/mfussenegger/nluarepl) which additionally provide features like structured output that you can drill into, show upvalues of functions and have a tagfunc to jump to source definitions of functions.\n\nE.g.:\n\n```\ndap> vim.lsp.get_clients()\ntable: 0x7647e5752998 size=1\n  1: table: 0x7647e5f675d8 size=35\n```\n\nWhere you can expand the `1: table: ...` entry with `<CR>` to:\n\n```\ndap> vim.lsp.get_clients()\ntable: 0x7647e5752998 size=1\n  1: table: 0x7647e5f675d8 size=35\n    [[metatable]]: table: 0x7647e5f64320 size=31\n    _log_prefix: LSP[luals]\n    _on_attach_cbs: table: 0x7647e5f68478 size=0\n    _on_exit_cbs: table: 0x7647e5f68388 size=1\n    _on_init_cbs: table: 0x7647e5f68298 size=0\n    _trace: off\n    attached_buffers: table: 0x7647e5f677b8 size=1\n    cancel_request: function: 0x7647e5f513a0\n    capabilities: table: 0x7647e5f7e990 size=4\n    commands: table: 0x7647e5f67b08 size=0\n    [...]\n```\n\nThe REPL input contains some basic completion support but you can also evaluate expressions from a scratch eval buffer where you can have full luals support.\n\n(and it also supports logpoints, which is basically dynamic logging based on debug.sethook)\n\n\n",
            "created_at": "2025-01-08T15:00:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/31909#issuecomment-2577885055",
            "id": 2577885055,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31909",
            "node_id": "IC_kwDOAPphoM6Zp2d_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 3,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2577885055/reactions"
            },
            "updated_at": "2025-01-08T15:00:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2577885055",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> No objection, but is there any reason this wouldn't be covered by the planned `:read :foo` enhancement? [#30628](https://github.com/neovim/neovim/pull/30628) This is intended to support reading output of any Ex command into a buffer.\n\nThat sounds great! But the possible [limitation of no double quotes](https://github.com/neovim/neovim/pull/30628#discussion_r1818963700) would be limiting for Lua code. Possible to live without them, but that inconsistency with `:lua=` wouldn't feel right.",
            "created_at": "2025-02-08T16:53:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/31909#issuecomment-2645841970",
            "id": 2645841970,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31909",
            "node_id": "IC_kwDOAPphoM6dtFgy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2645841970/reactions"
            },
            "updated_at": "2025-02-08T16:53:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2645841970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/43559?v=4",
                "events_url": "https://api.github.com/users/idbrii/events{/privacy}",
                "followers_url": "https://api.github.com/users/idbrii/followers",
                "following_url": "https://api.github.com/users/idbrii/following{/other_user}",
                "gists_url": "https://api.github.com/users/idbrii/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/idbrii",
                "id": 43559,
                "login": "idbrii",
                "node_id": "MDQ6VXNlcjQzNTU5",
                "organizations_url": "https://api.github.com/users/idbrii/orgs",
                "received_events_url": "https://api.github.com/users/idbrii/received_events",
                "repos_url": "https://api.github.com/users/idbrii/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/idbrii/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/idbrii/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/idbrii",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That limitation is a (temporary) implementation detail that should not exist for `:read`. E.g. `:read \"foo` works (on a file named `\"foo`), so there is no reason that `:read :lua =foo(\"bar\")` can't support double-quotes.",
            "created_at": "2025-02-08T18:17:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/31909#issuecomment-2645889010",
            "id": 2645889010,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31909",
            "node_id": "IC_kwDOAPphoM6dtQ_y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2645889010/reactions"
            },
            "updated_at": "2025-02-08T18:17:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2645889010",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31909/comments",
    "created_at": "2025-01-08T05:27:34Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31909/events",
    "html_url": "https://github.com/neovim/neovim/issues/31909",
    "id": 2774333126,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31909/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 261,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 303,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-02-06T07:38:20Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6lXPbG",
    "number": 31909,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 2,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31909/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31909/timeline",
    "title": "`:lua>` command to dump Lua values to a buffer",
    "updated_at": "2025-02-08T18:17:01Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31909",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/43559?v=4",
        "events_url": "https://api.github.com/users/idbrii/events{/privacy}",
        "followers_url": "https://api.github.com/users/idbrii/followers",
        "following_url": "https://api.github.com/users/idbrii/following{/other_user}",
        "gists_url": "https://api.github.com/users/idbrii/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/idbrii",
        "id": 43559,
        "login": "idbrii",
        "node_id": "MDQ6VXNlcjQzNTU5",
        "organizations_url": "https://api.github.com/users/idbrii/orgs",
        "received_events_url": "https://api.github.com/users/idbrii/received_events",
        "repos_url": "https://api.github.com/users/idbrii/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/idbrii/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/idbrii/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/idbrii",
        "user_view_type": "public"
    }
}