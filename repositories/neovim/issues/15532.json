{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "- `nvim --version`:\r\n```\r\nNVIM v0.5.0\r\nBuild type: Release\r\nLuaJIT 2.0.5\r\nCompilation: /usr/bin/cc -D_FORTIFY_SOURCE=2 -march=x86-64 -mtune=generic -O2 -pipe -fno-plt -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -DNVIM_TS_HAS_SET_MATCH_LIMIT -O2 -DNDEBUG -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wshadow -Wconversion -Wmissing-prototypes -Wimplicit-fallthrough -Wvla -fstack-protector-strong -fno-common -fdiagnostics-color=always -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -DMIN_LOG_LEVEL=3 -I/build/neovim/src/neovim-0.5.0/build/config -I/build/neovim/src/neovim-0.5.0/src -I/usr/include -I/build/neovim/src/neovim-0.5.0/build/src/nvim/auto -I/build/neovim/src/neovim-0.5.0/build/include\r\nCompiled by builduser\r\n\r\nFeatures: +acl +iconv +tui\r\nSee \":help feature-compile\"\r\n\r\n   system vimrc file: \"$VIM/sysinit.vim\"\r\n  fall-back for $VIM: \"/usr/share/nvim\"\r\n\r\nRun :checkhealth for more info\r\n```\r\n- nvim-lspconfig version(commit hash):\r\n  - 0eccc1a\r\n- What language server (If the problem is related to a specific language server):\r\n  - I've only noticed this issue with pyright and sumenko_lua. I use typescript-language-server a lot and have never had this issue\r\n- Can you reproduce this behavior on other language server clients (vscode, languageclient-neovim, coc.nvim, etc.):\r\n  - have not been able to reproduce with vscode\r\n- Can you reproduce this behavior on other language servers offered in the nvim-lspconfig repo? (pyls -> pyright):\r\n  - no\r\n- Is the problem isolated to a particular language server:\r\n  - seems to just be just pyright and sumenko_lua\r\n- Operating system/version:\r\n  - arch linux/updated today\r\n\r\n### How to reproduce the problem from neovim startup\r\n1. install pyright, I installed from my distro's package manager `sudo pacman -S pyright`\r\n2. download minimal init file from: https://raw.githubusercontent.com/neovim/nvim-lspconfig/master\r\n3. add `'tpope/vim-surround'` to packer packages list (line 11 of minimal_init.lua)\r\n2. `nvim -u minimal_init.lua test.py`\r\n2. insert the text `f = {\"foo\"}`, using `<c-s>}` and `<c-s>\"` to create matching pairs\r\n3. leave insert mode and change the bracket spacing with `cs}{`\r\n\r\nNote: this error comes up a lot in normal use, but this is the only reproducible way to generate it I've found\r\n\r\n### Actual behaviour\r\nThe text that the lsp is processing seems become out of sync with the text actually in the buffer. Once out of sync various errors will be shown. Re-reading the file with `:e` always fixes the issue.\r\n\r\nhttps://user-images.githubusercontent.com/23488939/131427982-85d97216-6d20-4766-add6-92c662add7f8.mp4\r\n\r\n### Expected behaviour\r\nThe errors from the lsp should match the text in nvim is showing me\r\n\r\n### Minimal init.vim or init.lua and code sample\r\nI'm using the minimal init as suggested: https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/test/minimal_init.lua  with only one change, adding https://github.com/tpope/vim-surround/ because it makes this error easier to reproduce. I have seen this error without using this plugin, but using it is the most reliable way to reproduce.\r\n\r\n### Health check\r\n<details>\r\n<summary>Checkhealth result</summary>\r\nhealth#nvim#check\r\n========================================================================\r\n## Configuration\r\n  - WARNING: Missing user config file: /home/jack/.config/nvim/init.vim\r\n    - ADVICE:\r\n      - :help |init.vim|\r\n\r\n## Performance\r\n  - OK: Build type: Release\r\n\r\n## Remote Plugins\r\n  - OK: Up to date\r\n\r\n## terminal\r\n  - INFO: key_backspace (kbs) terminfo entry: key_backspace=\\177\r\n  - INFO: key_dc (kdch1) terminfo entry: key_dc=\\E[3~\r\n  - INFO: $COLORTERM='truecolor'\r\n\r\nhealth#provider#check\r\n========================================================================\r\n## Clipboard (optional)\r\n  - OK: Clipboard tool found: xclip\r\n\r\n## Python 2 provider (optional)\r\n  - INFO: pyenv: Path: /usr/share/pyenv/libexec/pyenv\r\n  - INFO: pyenv: $PYENV_ROOT is not set. Infer from `pyenv root`.\r\n  - WARNING: pyenv: Root does not exist: /home/jack/.pyenv. Ignoring pyenv for all following checks.\r\n  - WARNING: No Python executable found that can `import neovim`. Using the first available executable for diagnostics.\r\n  - ERROR: Python provider error:\r\n    - ADVICE:\r\n      - provider/pythonx: Could not load Python 2:\r\n          /usr/bin/python2 does not have the \"neovim\" module. :help |provider-python|\r\n          /usr/bin/python2.7 does not have the \"neovim\" module. :help |provider-python|\r\n          python2.6 not found in search path or not executable.\r\n          /usr/bin/python is Python 3.9 and cannot provide Python 2.\r\n  - INFO: Executable: Not found\r\n\r\n## Python 3 provider (optional)\r\n  - INFO: pyenv: Path: /usr/share/pyenv/libexec/pyenv\r\n  - INFO: pyenv: $PYENV_ROOT is not set. Infer from `pyenv root`.\r\n  - WARNING: pyenv: Root does not exist: /home/jack/.pyenv. Ignoring pyenv for all following checks.\r\n  - INFO: `g:python3_host_prog` is not set.  Searching for python3 in the environment.\r\n  - INFO: Executable: /usr/bin/python3\r\n  - INFO: Python version: 3.9.6\r\n  - INFO: pynvim version: 0.4.3\r\n  - OK: Latest pynvim is installed.\r\n\r\n## Python virtualenv\r\n  - OK: no $VIRTUAL_ENV\r\n\r\n## Ruby provider (optional)\r\n  - INFO: Ruby: ruby 3.0.2p107 (2021-07-07 revision 0db68f0233) [x86_64-linux]\r\n  - WARNING: `neovim-ruby-host` not found.\r\n    - ADVICE:\r\n      - Run `gem install neovim` to ensure the neovim RubyGem is installed.\r\n      - Run `gem environment` to ensure the gem bin directory is in $PATH.\r\n      - If you are using rvm/rbenv/chruby, try \"rehashing\".\r\n      - See :help |g:ruby_host_prog| for non-standard gem installations.\r\n\r\n## Node.js provider (optional)\r\n  - INFO: Node.js: v16.8.0\r\n  - INFO: Nvim node.js host: /home/jack/.config/yarn/global//node_modules/neovim/bin/cli.js\r\n  - OK: Latest \"neovim\" npm/yarn package is installed: 4.10.0\r\n\r\n## Perl provider (optional)\r\n  - ERROR: perl provider error:\r\n    - ADVICE:\r\n      - \"Neovim::Ext\" cpan module is not installed\r\n\r\nhealth#treesitter#check\r\n========================================================================\r\n## Checking treesitter configuration\r\n  - INFO: Runtime ABI version : 13\r\n\r\nhealth#lspconfig#check\r\n========================================================================\r\n## Checking language server protocol configuration\r\n  - INFO: pyright: configuration checked.\r\n</details>\r\n\r\n### LSP log\r\n<!-- If not using the minimal_init.lua please add vim.lsp.set_log_level(\"debug\") to your lua block \r\n     in init.vim and paste a link to your log file, located at  $HOME/.cache/nvim/lsp.log (formerly $HOME/.local/share/nvim/lsp.log) -->\r\n<details>\r\n<summary>Log file</summary>\r\n[ START ] 2021-08-31T11:49:52+1000 ] LSP logging initiated\r\n[ INFO ] 2021-08-31T11:49:52+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:316 ]\t\"Starting RPC client\"\t{  args = { \"--stdio\" },  cmd = \"pyright-langserver\",  extra = {}}\r\n[ DEBUG ] 2021-08-31T11:49:52+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:827 ]\t\"LSP[pyright]\"\t\"initialize_params\"\t{  capabilities = {    callHierarchy = {      dynamicRegistration = false,      <metatable> = <1>{        __tostring = <function 1>      }    },    textDocument = {      codeAction = {        codeActionLiteralSupport = {          codeActionKind = {            valueSet = { \"\", \"Empty\", \"QuickFix\", \"Refactor\", \"RefactorExtract\", \"RefactorInline\", \"RefactorRewrite\", \"Source\", \"SourceOrganizeImports\", \"quickfix\", \"refactor\", \"refactor.extract\", \"refactor.inline\", \"refactor.rewrite\", \"source\", \"source.organizeImports\" },            <metatable> = <table 1>          },          <metatable> = <table 1>        },        dynamicRegistration = false,        <metatable> = <table 1>      },      completion = {        completionItem = {          commitCharactersSupport = false,          deprecatedSupport = false,          documentationFormat = { \"markdown\", \"plaintext\" },          preselectSupport = false,          snippetSupport = false,          <metatable> = <table 1>        },        completionItemKind = {          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },          <metatable> = <table 1>        },        contextSupport = false,        dynamicRegistration = false,        <metatable> = <table 1>      },      declaration = {        linkSupport = true,        <metatable> = <table 1>      },      definition = {        linkSupport = true,        <metatable> = <table 1>      },      documentHighlight = {        dynamicRegistration = false,        <metatable> = <table 1>      },      documentSymbol = {        dynamicRegistration = false,        hierarchicalDocumentSymbolSupport = true,        symbolKind = {          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },          <metatable> = <table 1>        },        <metatable> = <table 1>      },      hover = {        contentFormat = { \"markdown\", \"plaintext\" },        dynamicRegistration = false,        <metatable> = <table 1>      },      implementation = {        linkSupport = true,        <metatable> = <table 1>      },      publishDiagnostics = {        relatedInformation = true,        tagSupport = {          valueSet = { 1, 2 },          <metatable> = <table 1>        },        <metatable> = <table 1>      },      references = {        dynamicRegistration = false,        <metatable> = <table 1>      },      rename = {        dynamicRegistration = false,        prepareSupport = true,        <metatable> = <table 1>      },      signatureHelp = {        dynamicRegistration = false,        signatureInformation = {          documentationFormat = { \"markdown\", \"plaintext\" },          <metatable> = <table 1>        },        <metatable> = <table 1>      },      synchronization = {        didSave = true,        dynamicRegistration = false,        willSave = false,        willSaveWaitUntil = false,        <metatable> = <table 1>      },      typeDefinition = {        linkSupport = true,        <metatable> = <table 1>      },      <metatable> = <table 1>    },    window = {      showDocument = {        support = false,        <metatable> = <table 1>      },      showMessage = {        messageActionItem = {          additionalPropertiesSupport = false,          <metatable> = <table 1>        },        <metatable> = <table 1>      },      workDoneProgress = true,      <metatable> = <table 1>    },    workspace = {      applyEdit = true,      configuration = true,      symbol = {        dynamicRegistration = false,        hierarchicalWorkspaceSymbolSupport = true,        symbolKind = {          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },          <metatable> = <table 1>        },        <metatable> = <table 1>      },      workspaceEdit = {        resourceOperations = { \"rename\", \"create\", \"delete\" },        <metatable> = <table 1>      },      workspaceFolders = true,      <metatable> = <table 1>    }  },  clientInfo = {    name = \"Neovim\",    version = \"0.5.0\"  },  initializationOptions = vim.empty_dict(),  processId = 130566,  rootPath = \"/home/jack/nvim-debug\",  rootUri = \"file:///home/jack/nvim-debug\",  trace = \"off\",  workspaceFolders = { {      name = \"/home/jack/nvim-debug\",      uri = \"file:///home/jack/nvim-debug\"    } }}\r\n[ DEBUG ] 2021-08-31T11:49:52+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  id = 1,  jsonrpc = \"2.0\",  method = \"initialize\",  params = {    capabilities = {      callHierarchy = {        dynamicRegistration = false,        <metatable> = <1>{          __tostring = <function 1>        }      },      textDocument = {        codeAction = {          codeActionLiteralSupport = {            codeActionKind = {              valueSet = { \"\", \"Empty\", \"QuickFix\", \"Refactor\", \"RefactorExtract\", \"RefactorInline\", \"RefactorRewrite\", \"Source\", \"SourceOrganizeImports\", \"quickfix\", \"refactor\", \"refactor.extract\", \"refactor.inline\", \"refactor.rewrite\", \"source\", \"source.organizeImports\" },              <metatable> = <table 1>            },            <metatable> = <table 1>          },          dynamicRegistration = false,          <metatable> = <table 1>        },        completion = {          completionItem = {            commitCharactersSupport = false,            deprecatedSupport = false,            documentationFormat = { \"markdown\", \"plaintext\" },            preselectSupport = false,            snippetSupport = false,            <metatable> = <table 1>          },          completionItemKind = {            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },            <metatable> = <table 1>          },          contextSupport = false,          dynamicRegistration = false,          <metatable> = <table 1>        },        declaration = {          linkSupport = true,          <metatable> = <table 1>        },        definition = {          linkSupport = true,          <metatable> = <table 1>        },        documentHighlight = {          dynamicRegistration = false,          <metatable> = <table 1>        },        documentSymbol = {          dynamicRegistration = false,          hierarchicalDocumentSymbolSupport = true,          symbolKind = {            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },            <metatable> = <table 1>          },          <metatable> = <table 1>        },        hover = {          contentFormat = { \"markdown\", \"plaintext\" },          dynamicRegistration = false,          <metatable> = <table 1>        },        implementation = {          linkSupport = true,          <metatable> = <table 1>        },        publishDiagnostics = {          relatedInformation = true,          tagSupport = {            valueSet = { 1, 2 },            <metatable> = <table 1>          },          <metatable> = <table 1>        },        references = {          dynamicRegistration = false,          <metatable> = <table 1>        },        rename = {          dynamicRegistration = false,          prepareSupport = true,          <metatable> = <table 1>        },        signatureHelp = {          dynamicRegistration = false,          signatureInformation = {            documentationFormat = { \"markdown\", \"plaintext\" },            <metatable> = <table 1>          },          <metatable> = <table 1>        },        synchronization = {          didSave = true,          dynamicRegistration = false,          willSave = false,          willSaveWaitUntil = false,          <metatable> = <table 1>        },        typeDefinition = {          linkSupport = true,          <metatable> = <table 1>        },        <metatable> = <table 1>      },      window = {        showDocument = {          support = false,          <metatable> = <table 1>        },        showMessage = {          messageActionItem = {            additionalPropertiesSupport = false,            <metatable> = <table 1>          },          <metatable> = <table 1>        },        workDoneProgress = true,        <metatable> = <table 1>      },      workspace = {        applyEdit = true,        configuration = true,        symbol = {          dynamicRegistration = false,          hierarchicalWorkspaceSymbolSupport = true,          symbolKind = {            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },            <metatable> = <table 1>          },          <metatable> = <table 1>        },        workspaceEdit = {          resourceOperations = { \"rename\", \"create\", \"delete\" },          <metatable> = <table 1>        },        workspaceFolders = true,        <metatable> = <table 1>      }    },    clientInfo = {      name = \"Neovim\",      version = \"0.5.0\"    },    initializationOptions = vim.empty_dict(),    processId = 130566,    rootPath = \"/home/jack/nvim-debug\",    rootUri = \"file:///home/jack/nvim-debug\",    trace = \"off\",    workspaceFolders = { {        name = \"/home/jack/nvim-debug\",        uri = \"file:///home/jack/nvim-debug\"      } }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"Pyright language server 1.1.164 starting\",    type = 3  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"Server root directory: /usr/lib/node_modules/pyright/dist/\",    type = 3  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"Pyright language server 1.1.164 starting\",  type = 3}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"Pyright language server 1.1.164 starting\",    type = 3  }}\r\n[ INFO ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:406 ]\t\"Pyright language server 1.1.164 starting\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"Server root directory: /usr/lib/node_modules/pyright/dist/\",  type = 3}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"Server root directory: /usr/lib/node_modules/pyright/dist/\",    type = 3  }}\r\n[ INFO ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:406 ]\t\"Server root directory: /usr/lib/node_modules/pyright/dist/\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  id = 1,  jsonrpc = \"2.0\",  result = {    capabilities = {      callHierarchyProvider = true,      codeActionProvider = {        codeActionKinds = { \"quickfix\", \"source.organizeImports\" },        workDoneProgress = true      },      completionProvider = {        resolveProvider = true,        triggerCharacters = { \".\", \"[\" },        workDoneProgress = true      },      declarationProvider = {        workDoneProgress = true      },      definitionProvider = {        workDoneProgress = true      },      documentHighlightProvider = {        workDoneProgress = true      },      documentSymbolProvider = {        workDoneProgress = true      },      executeCommandProvider = {        commands = {},        workDoneProgress = true      },      hoverProvider = {        workDoneProgress = true      },      referencesProvider = {        workDoneProgress = true      },      renameProvider = {        workDoneProgress = true      },      signatureHelpProvider = {        triggerCharacters = { \"(\", \",\", \")\" },        workDoneProgress = true      },      textDocumentSync = 2,      workspaceSymbolProvider = {        workDoneProgress = true      }    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"initialized\",  params = {    [true] = 6  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"workspace/didChangeConfiguration\",  params = {    settings = {      python = {        analysis = {          autoSearchPaths = true,          diagnosticMode = \"workspace\",          useLibraryCodeForTypes = true,          <metatable> = <1>{            __tostring = <function 1>          }        },        <metatable> = <table 1>      },      <metatable> = <table 1>    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:854 ]\t\"LSP[pyright]\"\t\"server_capabilities\"\t{  callHierarchyProvider = true,  codeActionProvider = {    codeActionKinds = { \"quickfix\", \"source.organizeImports\" },    workDoneProgress = true  },  completionProvider = {    resolveProvider = true,    triggerCharacters = { \".\", \"[\" },    workDoneProgress = true  },  declarationProvider = {    workDoneProgress = true  },  definitionProvider = {    workDoneProgress = true  },  documentHighlightProvider = {    workDoneProgress = true  },  documentSymbolProvider = {    workDoneProgress = true  },  executeCommandProvider = {    commands = {},    workDoneProgress = true  },  hoverProvider = {    workDoneProgress = true  },  referencesProvider = {    workDoneProgress = true  },  renameProvider = {    workDoneProgress = true  },  signatureHelpProvider = {    triggerCharacters = { \"(\", \",\", \")\" },    workDoneProgress = true  },  textDocumentSync = 2,  workspaceSymbolProvider = {    workDoneProgress = true  }}\r\n[ INFO ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:855 ]\t\"LSP[pyright]\"\t\"initialized\"\t{  resolved_capabilities = {    call_hierarchy = true,    code_action = {      codeActionKinds = { \"quickfix\", \"source.organizeImports\" },      workDoneProgress = true    },    code_lens = false,    code_lens_resolve = false,    completion = true,    declaration = false,    document_formatting = false,    document_highlight = {      workDoneProgress = true    },    document_range_formatting = false,    document_symbol = {      workDoneProgress = true    },    execute_command = true,    find_references = {      workDoneProgress = true    },    goto_definition = {      workDoneProgress = true    },    hover = {      workDoneProgress = true    },    implementation = false,    rename = true,    signature_help = true,    signature_help_trigger_characters = { \"(\", \",\", \")\" },    text_document_did_change = 2,    text_document_open_close = true,    text_document_save = true,    text_document_save_include_text = false,    text_document_will_save = false,    text_document_will_save_wait_until = false,    type_definition = false,    workspace_folder_properties = {      changeNotifications = false,      supported = false    },    workspace_symbol = {      workDoneProgress = true    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didOpen\",  params = {    textDocument = {      languageId = \"python\",      text = 'def foo():\\n    return 0\\n\\nf = { \"foo\" }\\n',      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 0    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  id = 0,  jsonrpc = \"2.0\",  method = \"client/registerCapability\",  params = {    registrations = { {        id = \"64feb454-c64c-4d68-a73d-a5e0a2868171\",        method = \"workspace/didChangeWorkspaceFolders\",        registerOptions = vim.empty_dict()      } }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:694 ]\t\"server_request\"\t\"client/registerCapability\"\t{  registrations = { {      id = \"64feb454-c64c-4d68-a73d-a5e0a2868171\",      method = \"workspace/didChangeWorkspaceFolders\",      registerOptions = {}    } }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:697 ]\t\"server_request: found handler for\"\t\"client/registerCapability\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"client/registerCapability\"\t{  client_id = 1,  params = {    registrations = { {        id = \"64feb454-c64c-4d68-a73d-a5e0a2868171\",        method = \"workspace/didChangeWorkspaceFolders\",        registerOptions = {}      } }  }}\r\n[ WARN ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:108 ]\t\"The language server pyright triggers a registerCapability handler despite dynamicRegistration set to false. Report upstream, this warning is harmless\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:507 ]\t\"server_request: callback result\"\t{  result = vim.NIL,  status = true}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  id = 0,  jsonrpc = \"2.0\",  result = vim.NIL}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  id = 1,  jsonrpc = \"2.0\",  method = \"workspace/configuration\",  params = {    items = { {        scopeUri = \"file:///home/jack/nvim-debug\",        section = \"python\"      } }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:694 ]\t\"server_request\"\t\"workspace/configuration\"\t{  items = { {      scopeUri = \"file:///home/jack/nvim-debug\",      section = \"python\"    } }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:697 ]\t\"server_request: found handler for\"\t\"workspace/configuration\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"workspace/configuration\"\t{  client_id = 1,  params = {    items = { {        scopeUri = \"file:///home/jack/nvim-debug\",        section = \"python\"      } }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:507 ]\t\"server_request: callback result\"\t{  result = { {      analysis = {        autoSearchPaths = true,        diagnosticMode = \"workspace\",        useLibraryCodeForTypes = true,        <metatable> = <1>{          __tostring = <function 1>        }      },      <metatable> = <table 1>    } },  status = true}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  id = 1,  jsonrpc = \"2.0\",  result = { {      analysis = {        autoSearchPaths = true,        diagnosticMode = \"workspace\",        useLibraryCodeForTypes = true,        <metatable> = <1>{          __tostring = <function 1>        }      },      <metatable> = <table 1>    } }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  id = 2,  jsonrpc = \"2.0\",  method = \"workspace/configuration\",  params = {    items = { {        scopeUri = \"file:///home/jack/nvim-debug\",        section = \"python.analysis\"      } }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:694 ]\t\"server_request\"\t\"workspace/configuration\"\t{  items = { {      scopeUri = \"file:///home/jack/nvim-debug\",      section = \"python.analysis\"    } }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:697 ]\t\"server_request: found handler for\"\t\"workspace/configuration\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"workspace/configuration\"\t{  client_id = 1,  params = {    items = { {        scopeUri = \"file:///home/jack/nvim-debug\",        section = \"python.analysis\"      } }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:507 ]\t\"server_request: callback result\"\t{  result = { {      autoSearchPaths = true,      diagnosticMode = \"workspace\",      useLibraryCodeForTypes = true,      <metatable> = {        __tostring = <function 1>      }    } },  status = true}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  id = 2,  jsonrpc = \"2.0\",  result = { {      autoSearchPaths = true,      diagnosticMode = \"workspace\",      useLibraryCodeForTypes = true,      <metatable> = {        __tostring = <function 1>      }    } }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  id = 3,  jsonrpc = \"2.0\",  method = \"workspace/configuration\",  params = {    items = { {        scopeUri = \"file:///home/jack/nvim-debug\",        section = \"pyright\"      } }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:694 ]\t\"server_request\"\t\"workspace/configuration\"\t{  items = { {      scopeUri = \"file:///home/jack/nvim-debug\",      section = \"pyright\"    } }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:697 ]\t\"server_request: found handler for\"\t\"workspace/configuration\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"workspace/configuration\"\t{  client_id = 1,  params = {    items = { {        scopeUri = \"file:///home/jack/nvim-debug\",        section = \"pyright\"      } }  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:507 ]\t\"server_request: callback result\"\t{  result = { vim.NIL },  status = true}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  id = 3,  jsonrpc = \"2.0\",  result = { vim.NIL }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"No configuration file found.\",    type = 3  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"No configuration file found.\",  type = 3}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"No configuration file found.\",    type = 3  }}\r\n[ INFO ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:406 ]\t\"No configuration file found.\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"No pyproject.toml file found.\",    type = 3  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"stubPath /home/jack/nvim-debug/typings is not a valid directory.\",    type = 2  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"No pyproject.toml file found.\",  type = 3}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"No pyproject.toml file found.\",    type = 3  }}\r\n[ INFO ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:406 ]\t\"No pyproject.toml file found.\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"Assuming Python platform Linux\",    type = 3  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"stubPath /home/jack/nvim-debug/typings is not a valid directory.\",  type = 2}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"stubPath /home/jack/nvim-debug/typings is not a valid directory.\",    type = 2  }}\r\n[ WARN ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:404 ]\t\"stubPath /home/jack/nvim-debug/typings is not a valid directory.\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",    type = 2  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",    type = 2  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"Assuming Python platform Linux\",  type = 3}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"Assuming Python platform Linux\",    type = 3  }}\r\n[ INFO ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:406 ]\t\"Assuming Python platform Linux\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",    type = 2  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",    type = 2  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"Searching for source files\",    type = 3  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",  type = 2}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",    type = 2  }}\r\n[ WARN ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:404 ]\t\"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"window/logMessage\",  params = {    message = \"Found 1 source file\",    type = 3  }}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",  type = 2}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",    type = 2  }}\r\n[ WARN ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:404 ]\t\"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",  type = 2}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",    type = 2  }}\r\n[ WARN ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:404 ]\t\"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",  type = 2}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\",    type = 2  }}\r\n[ WARN ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:404 ]\t\"Exception received when installing file system watcher: TypeError [ERR_FEATURE_UNAVAILABLE_ON_PLATFORM]: The feature watch recursively is unavailable on the current platform, which is being used to run Node.js\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"Searching for source files\",  type = 3}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"Searching for source files\",    type = 3  }}\r\n[ INFO ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:406 ]\t\"Searching for source files\"\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"window/logMessage\"\t{  message = \"Found 1 source file\",  type = 3}\r\n[ DEBUG ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"window/logMessage\"\t{  client_id = 1,  params = {    message = \"Found 1 source file\",    type = 3  }}\r\n[ INFO ] 2021-08-31T11:49:53+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:406 ]\t\"Found 1 source file\"\r\n[ DEBUG ] 2021-08-31T11:49:54+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:54+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = {},  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:49:54+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 4, firstline: 0, lastline: 4, new_lastline: 0, old_byte_size: 39, old_utf32_size: 39, old_utf16_size: 39\"\t{}\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 13,            line = 3          },          start = {            character = 0,            line = 0          }        },        rangeLength = 38,        text = \"\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 4    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = {},  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 5, firstline: 0, lastline: 1, new_lastline: 1, old_byte_size: 1, old_utf32_size: 1, old_utf16_size: 1\"\t{ \"d\" }\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 0,            line = 0          },          start = {            character = 0,            line = 0          }        },        rangeLength = 0,        text = \"d\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 5    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 6, firstline: 0, lastline: 1, new_lastline: 1, old_byte_size: 2, old_utf32_size: 2, old_utf16_size: 2\"\t{ \"de\" }\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 1,            line = 0          },          start = {            character = 1,            line = 0          }        },        rangeLength = 0,        text = \"e\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 6    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 7, firstline: 0, lastline: 1, new_lastline: 1, old_byte_size: 3, old_utf32_size: 3, old_utf16_size: 3\"\t{ \"def\" }\r\n[ DEBUG ] 2021-08-31T11:49:57+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 2,            line = 0          },          start = {            character = 2,            line = 0          }        },        rangeLength = 0,        text = \"f\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 7    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 8, firstline: 0, lastline: 1, new_lastline: 1, old_byte_size: 4, old_utf32_size: 4, old_utf16_size: 4\"\t{ \"def \" }\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 3,            line = 0          },          start = {            character = 3,            line = 0          }        },        rangeLength = 0,        text = \" \"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 8    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 9, firstline: 0, lastline: 1, new_lastline: 1, old_byte_size: 5, old_utf32_size: 5, old_utf16_size: 5\"\t{ \"def f\" }\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 4,            line = 0          },          start = {            character = 4,            line = 0          }        },        rangeLength = 0,        text = \"f\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 9    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 10, firstline: 0, lastline: 1, new_lastline: 1, old_byte_size: 6, old_utf32_size: 6, old_utf16_size: 6\"\t{ \"def fo\" }\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 5,            line = 0          },          start = {            character = 5,            line = 0          }        },        rangeLength = 0,        text = \"o\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 10    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 11, firstline: 0, lastline: 1, new_lastline: 1, old_byte_size: 7, old_utf32_size: 7, old_utf16_size: 7\"\t{ \"def foo\" }\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 6,            line = 0          },          start = {            character = 6,            line = 0          }        },        rangeLength = 0,        text = \"o\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 11    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 12, firstline: 0, lastline: 1, new_lastline: 1, old_byte_size: 8, old_utf32_size: 8, old_utf16_size: 8\"\t{ \"def foo(\" }\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 7,            line = 0          },          start = {            character = 7,            line = 0          }        },        rangeLength = 0,        text = \"(\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 12    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 13, firstline: 0, lastline: 1, new_lastline: 1, old_byte_size: 9, old_utf32_size: 9, old_utf16_size: 9\"\t{ \"def foo()\" }\r\n[ DEBUG ] 2021-08-31T11:49:58+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 8,            line = 0          },          start = {            character = 8,            line = 0          }        },        rangeLength = 0,        text = \")\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 13    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = { {        message = 'Expected \":\"',        range = {          end = {            character = 10,            line = 0          },          start = {            character = 9,            line = 0          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Expected expression\",        range = {          end = {            character = 10,            line = 0          },          start = {            character = 10,            line = 0          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Statements must be separated by newlines or semicolons\",        range = {          end = {            character = 10,            line = 0          },          start = {            character = 10,            line = 0          }        },        severity = 1,        source = \"Pyright\"      } },    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = { {      message = 'Expected \":\"',      range = {        end = {          character = 10,          line = 0        },        start = {          character = 9,          line = 0        }      },      severity = 1,      source = \"Pyright\"    }, {      message = \"Expected expression\",      range = {        end = {          character = 10,          line = 0        },        start = {          character = 10,          line = 0        }      },      severity = 1,      source = \"Pyright\"    }, {      message = \"Statements must be separated by newlines or semicolons\",      range = {        end = {          character = 10,          line = 0        },        start = {          character = 10,          line = 0        }      },      severity = 1,      source = \"Pyright\"    } },  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = { {        message = 'Expected \":\"',        range = {          end = {            character = 10,            line = 0          },          start = {            character = 9,            line = 0          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Expected expression\",        range = {          end = {            character = 10,            line = 0          },          start = {            character = 10,            line = 0          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Statements must be separated by newlines or semicolons\",        range = {          end = {            character = 10,            line = 0          },          start = {            character = 10,            line = 0          }        },        severity = 1,        source = \"Pyright\"      } },    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 14, firstline: 0, lastline: 1, new_lastline: 1, old_byte_size: 10, old_utf32_size: 10, old_utf16_size: 10\"\t{ \"def foo():\" }\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 9,            line = 0          },          start = {            character = 9,            line = 0          }        },        rangeLength = 0,        text = \":\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 14    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 15, firstline: 0, lastline: 1, new_lastline: 2, old_byte_size: 11, old_utf32_size: 11, old_utf16_size: 11\"\t{ \"def foo():\", \"\" }\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 10,            line = 0          },          start = {            character = 10,            line = 0          }        },        rangeLength = 0,        text = \"\\n\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 15    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 16, firstline: 1, lastline: 2, new_lastline: 2, old_byte_size: 1, old_utf32_size: 1, old_utf16_size: 1\"\t{ \"    \" }\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 0,            line = 1          },          start = {            character = 0,            line = 1          }        },        rangeLength = 0,        text = \"    \"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 16    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = { {        message = \"Expected indented block\",        range = {          end = {            character = 11,            line = 0          },          start = {            character = 11,            line = 0          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Expected expression\",        range = {          end = {            character = 11,            line = 0          },          start = {            character = 11,            line = 0          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Statements must be separated by newlines or semicolons\",        range = {          end = {            character = 11,            line = 0          },          start = {            character = 11,            line = 0          }        },        severity = 1,        source = \"Pyright\"      } },    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = { {      message = \"Expected indented block\",      range = {        end = {          character = 11,          line = 0        },        start = {          character = 11,          line = 0        }      },      severity = 1,      source = \"Pyright\"    }, {      message = \"Expected expression\",      range = {        end = {          character = 11,          line = 0        },        start = {          character = 11,          line = 0        }      },      severity = 1,      source = \"Pyright\"    }, {      message = \"Statements must be separated by newlines or semicolons\",      range = {        end = {          character = 11,          line = 0        },        start = {          character = 11,          line = 0        }      },      severity = 1,      source = \"Pyright\"    } },  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = { {        message = \"Expected indented block\",        range = {          end = {            character = 11,            line = 0          },          start = {            character = 11,            line = 0          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Expected expression\",        range = {          end = {            character = 11,            line = 0          },          start = {            character = 11,            line = 0          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Statements must be separated by newlines or semicolons\",        range = {          end = {            character = 11,            line = 0          },          start = {            character = 11,            line = 0          }        },        severity = 1,        source = \"Pyright\"      } },    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = { {        message = \"Expected indented block\",        range = {          end = {            character = 5,            line = 1          },          start = {            character = 5,            line = 1          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Expected expression\",        range = {          end = {            character = 5,            line = 1          },          start = {            character = 5,            line = 1          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Statements must be separated by newlines or semicolons\",        range = {          end = {            character = 5,            line = 1          },          start = {            character = 5,            line = 1          }        },        severity = 1,        source = \"Pyright\"      } },    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = { {      message = \"Expected indented block\",      range = {        end = {          character = 5,          line = 1        },        start = {          character = 5,          line = 1        }      },      severity = 1,      source = \"Pyright\"    }, {      message = \"Expected expression\",      range = {        end = {          character = 5,          line = 1        },        start = {          character = 5,          line = 1        }      },      severity = 1,      source = \"Pyright\"    }, {      message = \"Statements must be separated by newlines or semicolons\",      range = {        end = {          character = 5,          line = 1        },        start = {          character = 5,          line = 1        }      },      severity = 1,      source = \"Pyright\"    } },  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = { {        message = \"Expected indented block\",        range = {          end = {            character = 5,            line = 1          },          start = {            character = 5,            line = 1          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Expected expression\",        range = {          end = {            character = 5,            line = 1          },          start = {            character = 5,            line = 1          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"Statements must be separated by newlines or semicolons\",        range = {          end = {            character = 5,            line = 1          },          start = {            character = 5,            line = 1          }        },        severity = 1,        source = \"Pyright\"      } },    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 17, firstline: 1, lastline: 2, new_lastline: 2, old_byte_size: 5, old_utf32_size: 5, old_utf16_size: 5\"\t{ \"    r\" }\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 4,            line = 1          },          start = {            character = 4,            line = 1          }        },        rangeLength = 0,        text = \"r\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 17    }  }}\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 18, firstline: 1, lastline: 2, new_lastline: 2, old_byte_size: 6, old_utf32_size: 6, old_utf16_size: 6\"\t{ \"    re\" }\r\n[ DEBUG ] 2021-08-31T11:49:59+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 5,            line = 1          },          start = {            character = 5,            line = 1          }        },        rangeLength = 0,        text = \"e\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 18    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 19, firstline: 1, lastline: 2, new_lastline: 2, old_byte_size: 7, old_utf32_size: 7, old_utf16_size: 7\"\t{ \"    ret\" }\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 6,            line = 1          },          start = {            character = 6,            line = 1          }        },        rangeLength = 0,        text = \"t\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 19    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 20, firstline: 1, lastline: 2, new_lastline: 2, old_byte_size: 8, old_utf32_size: 8, old_utf16_size: 8\"\t{ \"    retu\" }\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 7,            line = 1          },          start = {            character = 7,            line = 1          }        },        rangeLength = 0,        text = \"u\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 20    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 21, firstline: 1, lastline: 2, new_lastline: 2, old_byte_size: 9, old_utf32_size: 9, old_utf16_size: 9\"\t{ \"    retur\" }\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 8,            line = 1          },          start = {            character = 8,            line = 1          }        },        rangeLength = 0,        text = \"r\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 21    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 22, firstline: 1, lastline: 2, new_lastline: 2, old_byte_size: 10, old_utf32_size: 10, old_utf16_size: 10\"\t{ \"    return\" }\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 9,            line = 1          },          start = {            character = 9,            line = 1          }        },        rangeLength = 0,        text = \"n\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 22    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 23, firstline: 1, lastline: 2, new_lastline: 2, old_byte_size: 11, old_utf32_size: 11, old_utf16_size: 11\"\t{ \"    return \" }\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 10,            line = 1          },          start = {            character = 10,            line = 1          }        },        rangeLength = 0,        text = \" \"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 23    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 24, firstline: 1, lastline: 2, new_lastline: 2, old_byte_size: 12, old_utf32_size: 12, old_utf16_size: 12\"\t{ \"    return 0\" }\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 11,            line = 1          },          start = {            character = 11,            line = 1          }        },        rangeLength = 0,        text = \"0\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 24    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = {},  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 25, firstline: 1, lastline: 2, new_lastline: 3, old_byte_size: 13, old_utf32_size: 13, old_utf16_size: 13\"\t{ \"    return 0\", \"    \" }\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 12,            line = 1          },          start = {            character = 12,            line = 1          }        },        rangeLength = 0,        text = \"\\n    \"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 25    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 26, firstline: 2, lastline: 3, new_lastline: 3, old_byte_size: 5, old_utf32_size: 5, old_utf16_size: 5\"\t{ \"\" }\r\n[ DEBUG ] 2021-08-31T11:50:00+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 4,            line = 2          },          start = {            character = 0,            line = 2          }        },        rangeLength = 4,        text = \"\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 26    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 27, firstline: 2, lastline: 3, new_lastline: 4, old_byte_size: 1, old_utf32_size: 1, old_utf16_size: 1\"\t{ \"\", \"\" }\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 0,            line = 2          },          start = {            character = 0,            line = 2          }        },        rangeLength = 0,        text = \"\\n\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 27    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = {},  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 28, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 1, old_utf32_size: 1, old_utf16_size: 1\"\t{ \"f\" }\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 0,            line = 3          },          start = {            character = 0,            line = 3          }        },        rangeLength = 0,        text = \"f\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 28    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 29, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 2, old_utf32_size: 2, old_utf16_size: 2\"\t{ \"f \" }\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 1,            line = 3          },          start = {            character = 1,            line = 3          }        },        rangeLength = 0,        text = \" \"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 29    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 30, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 3, old_utf32_size: 3, old_utf16_size: 3\"\t{ \"f =\" }\r\n[ DEBUG ] 2021-08-31T11:50:01+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 2,            line = 3          },          start = {            character = 2,            line = 3          }        },        rangeLength = 0,        text = \"=\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 30    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:02+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 31, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 4, old_utf32_size: 4, old_utf16_size: 4\"\t{ \"f = \" }\r\n[ DEBUG ] 2021-08-31T11:50:02+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 3,            line = 3          },          start = {            character = 3,            line = 3          }        },        rangeLength = 0,        text = \" \"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 31    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:02+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = { {        message = 'Expected expression to the right of \"=\"',        range = {          end = {            character = 5,            line = 3          },          start = {            character = 4,            line = 3          }        },        severity = 1,        source = \"Pyright\"      } },    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:02+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = { {      message = 'Expected expression to the right of \"=\"',      range = {        end = {          character = 5,          line = 3        },        start = {          character = 4,          line = 3        }      },      severity = 1,      source = \"Pyright\"    } },  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:50:02+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = { {        message = 'Expected expression to the right of \"=\"',        range = {          end = {            character = 5,            line = 3          },          start = {            character = 4,            line = 3          }        },        severity = 1,        source = \"Pyright\"      } },    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:03+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 32, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 5, old_utf32_size: 5, old_utf16_size: 5\"\t{ \"f = {\\r}\" }\r\n[ DEBUG ] 2021-08-31T11:50:03+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 4,            line = 3          },          start = {            character = 4,            line = 3          }        },        rangeLength = 0,        text = \"{\\r}\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 32    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:03+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 33, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 8, old_utf32_size: 8, old_utf16_size: 8\"\t{ \"f = {}\" }\r\n[ DEBUG ] 2021-08-31T11:50:03+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 6,            line = 3          },          start = {            character = 5,            line = 3          }        },        rangeLength = 1,        text = \"\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 33    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:03+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:03+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = {},  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:50:03+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:04+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 34, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 7, old_utf32_size: 7, old_utf16_size: 7\"\t{ 'f = {\"\\r\"}' }\r\n[ DEBUG ] 2021-08-31T11:50:04+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 5,            line = 3          },          start = {            character = 5,            line = 3          }        },        rangeLength = 0,        text = '\"\\r\"'      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 34    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:04+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 35, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 10, old_utf32_size: 10, old_utf16_size: 10\"\t{ 'f = {\"\"}' }\r\n[ DEBUG ] 2021-08-31T11:50:04+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 7,            line = 3          },          start = {            character = 6,            line = 3          }        },        rangeLength = 1,        text = \"\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 35    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:04+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 36, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 9, old_utf32_size: 9, old_utf16_size: 9\"\t{ 'f = {\"f\"}' }\r\n[ DEBUG ] 2021-08-31T11:50:04+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 6,            line = 3          },          start = {            character = 6,            line = 3          }        },        rangeLength = 0,        text = \"f\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 36    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:04+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 37, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 10, old_utf32_size: 10, old_utf16_size: 10\"\t{ 'f = {\"fo\"}' }\r\n[ DEBUG ] 2021-08-31T11:50:04+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 7,            line = 3          },          start = {            character = 7,            line = 3          }        },        rangeLength = 0,        text = \"o\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 37    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:04+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 38, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 11, old_utf32_size: 11, old_utf16_size: 11\"\t{ 'f = {\"foo\"}' }\r\n[ DEBUG ] 2021-08-31T11:50:04+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 8,            line = 3          },          start = {            character = 8,            line = 3          }        },        rangeLength = 0,        text = \"o\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 38    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:05+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:05+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = {},  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:50:05+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = {},    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:06+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didSave\",  params = {    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\"    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:07+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 40, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 12, old_utf32_size: 12, old_utf16_size: 12\"\t{ \"f = {}\" }\r\n[ DEBUG ] 2021-08-31T11:50:07+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 10,            line = 3          },          start = {            character = 5,            line = 3          }        },        rangeLength = 5,        text = \"\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 40    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:07+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 41, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 7, old_utf32_size: 7, old_utf16_size: 7\"\t{ \"f = \" }\r\n[ DEBUG ] 2021-08-31T11:50:07+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 6,            line = 3          },          start = {            character = 4,            line = 3          }        },        rangeLength = 2,        text = \"\"      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 41    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:07+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1035 ]\t\"on_lines bufnr: 1, changedtick: 42, firstline: 3, lastline: 4, new_lastline: 4, old_byte_size: 5, old_utf32_size: 5, old_utf16_size: 5\"\t{ 'f = { \"foo\" }' }\r\n[ DEBUG ] 2021-08-31T11:50:07+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didChange\",  params = {    contentChanges = { {        range = {          end = {            character = 4,            line = 3          },          start = {            character = 4,            line = 3          }        },        rangeLength = 0,        text = '{ \"foo\" }'      } },    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\",      version = 42    }  }}\r\n[ DEBUG ] 2021-08-31T11:50:08+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/publishDiagnostics\",  params = {    diagnostics = { {        message = \"Statements must be separated by newlines or semicolons\",        range = {          end = {            character = 15,            line = 3          },          start = {            character = 13,            line = 3          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"String literal is unterminated\",        range = {          end = {            character = 15,            line = 3          },          start = {            character = 13,            line = 3          }        },        severity = 1,        source = \"Pyright\"      } },    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:08+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:680 ]\t\"notification\"\t\"textDocument/publishDiagnostics\"\t{  diagnostics = { {      message = \"Statements must be separated by newlines or semicolons\",      range = {        end = {          character = 15,          line = 3        },        start = {          character = 13,          line = 3        }      },      severity = 1,      source = \"Pyright\"    }, {      message = \"String literal is unterminated\",      range = {        end = {          character = 15,          line = 3        },        start = {          character = 13,          line = 3        }      },      severity = 1,      source = \"Pyright\"    } },  uri = \"file:///home/jack/nvim-debug/test.py\"}\r\n[ DEBUG ] 2021-08-31T11:50:08+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/handlers.lua:434 ]\t\"default_handler\"\t\"textDocument/publishDiagnostics\"\t{  client_id = 1,  params = {    diagnostics = { {        message = \"Statements must be separated by newlines or semicolons\",        range = {          end = {            character = 15,            line = 3          },          start = {            character = 13,            line = 3          }        },        severity = 1,        source = \"Pyright\"      }, {        message = \"String literal is unterminated\",        range = {          end = {            character = 15,            line = 3          },          start = {            character = 13,            line = 3          }        },        severity = 1,        source = \"Pyright\"      } },    uri = \"file:///home/jack/nvim-debug/test.py\"  }}\r\n[ DEBUG ] 2021-08-31T11:50:11+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"textDocument/didSave\",  params = {    textDocument = {      uri = \"file:///home/jack/nvim-debug/test.py\"    }  }}\r\n[ INFO ] 2021-08-31T11:50:11+1000 ] /usr/share/nvim/runtime/lua/vim/lsp.lua:1214 ]\t\"exit_handler\"\t{ {    _on_attach = <function 1>,    cancel_request = <function 2>,    config = {      _on_attach = <function 3>,      autostart = true,      capabilities = {        callHierarchy = {          dynamicRegistration = false,          <metatable> = <1>{            __tostring = <function 4>          }        },        textDocument = {          codeAction = {            codeActionLiteralSupport = {              codeActionKind = {                valueSet = { \"\", \"Empty\", \"QuickFix\", \"Refactor\", \"RefactorExtract\", \"RefactorInline\", \"RefactorRewrite\", \"Source\", \"SourceOrganizeImports\", \"quickfix\", \"refactor\", \"refactor.extract\", \"refactor.inline\", \"refactor.rewrite\", \"source\", \"source.organizeImports\" },                <metatable> = <table 1>              },              <metatable> = <table 1>            },            dynamicRegistration = false,            <metatable> = <table 1>          },          completion = {            completionItem = {              commitCharactersSupport = false,              deprecatedSupport = false,              documentationFormat = { \"markdown\", \"plaintext\" },              preselectSupport = false,              snippetSupport = false,              <metatable> = <table 1>            },            completionItemKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },              <metatable> = <table 1>            },            contextSupport = false,            dynamicRegistration = false,            <metatable> = <table 1>          },          declaration = {            linkSupport = true,            <metatable> = <table 1>          },          definition = {            linkSupport = true,            <metatable> = <table 1>          },          documentHighlight = {            dynamicRegistration = false,            <metatable> = <table 1>          },          documentSymbol = {            dynamicRegistration = false,            hierarchicalDocumentSymbolSupport = true,            symbolKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },              <metatable> = <table 1>            },            <metatable> = <table 1>          },          hover = {            contentFormat = { \"markdown\", \"plaintext\" },            dynamicRegistration = false,            <metatable> = <table 1>          },          implementation = {            linkSupport = true,            <metatable> = <table 1>          },          publishDiagnostics = {            relatedInformation = true,            tagSupport = {              valueSet = { 1, 2 },              <metatable> = <table 1>            },            <metatable> = <table 1>          },          references = {            dynamicRegistration = false,            <metatable> = <table 1>          },          rename = {            dynamicRegistration = false,            prepareSupport = true,            <metatable> = <table 1>          },          signatureHelp = {            dynamicRegistration = false,            signatureInformation = {              documentationFormat = { \"markdown\", \"plaintext\" },              <metatable> = <table 1>            },            <metatable> = <table 1>          },          synchronization = {            didSave = true,            dynamicRegistration = false,            willSave = false,            willSaveWaitUntil = false,            <metatable> = <table 1>          },          typeDefinition = {            linkSupport = true,            <metatable> = <table 1>          },          <metatable> = <table 1>        },        window = {          showDocument = {            support = false,            <metatable> = <table 1>          },          showMessage = {            messageActionItem = {              additionalPropertiesSupport = false,              <metatable> = <table 1>            },            <metatable> = <table 1>          },          workDoneProgress = true,          <metatable> = <table 1>        },        workspace = {          applyEdit = true,          configuration = true,          symbol = {            dynamicRegistration = false,            hierarchicalWorkspaceSymbolSupport = true,            symbolKind = {              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },              <metatable> = <table 1>            },            <metatable> = <table 1>          },          workspaceEdit = {            resourceOperations = { \"rename\", \"create\", \"delete\" },            <metatable> = <table 1>          },          workspaceFolders = true,          <metatable> = <table 1>        }      },      cmd = { \"pyright-langserver\", \"--stdio\" },      filetypes = { \"python\" },      flags = {},      get_language_id = <function 5>,      handlers = <2>{},      init_options = vim.empty_dict(),      log_level = 2,      message_level = 2,      name = \"pyright\",      on_attach = <function 6>,      on_exit = <function 7>,      on_init = <function 8>,      root_dir = \"/home/jack/nvim-debug\",      settings = {        python = {          analysis = {            autoSearchPaths = true,            diagnosticMode = \"workspace\",            useLibraryCodeForTypes = true,            <metatable> = <table 1>          },          <metatable> = <table 1>        },        <metatable> = <table 1>      },      <metatable> = <table 1>    },    handlers = <table 2>,    id = 1,    initialized = true,    is_stopped = <function 9>,    messages = {      messages = {},      name = \"pyright\",      progress = {},      status = {}    },    name = \"pyright\",    notify = <function 10>,    offset_encoding = \"utf-16\",    request = <function 11>,    request_sync = <function 12>,    resolved_capabilities = {      call_hierarchy = true,      code_action = <3>{        codeActionKinds = { \"quickfix\", \"source.organizeImports\" },        workDoneProgress = true      },      code_lens = false,      code_lens_resolve = false,      completion = true,      declaration = false,      document_formatting = false,      document_highlight = <4>{        workDoneProgress = true      },      document_range_formatting = false,      document_symbol = <5>{        workDoneProgress = true      },      execute_command = true,      find_references = <6>{        workDoneProgress = true      },      goto_definition = <7>{        workDoneProgress = true      },      hover = <8>{        workDoneProgress = true      },      implementation = false,      rename = true,      signature_help = true,      signature_help_trigger_characters = <9>{ \"(\", \",\", \")\" },      text_document_did_change = 2,      text_document_open_close = true,      text_document_save = true,      text_document_save_include_text = false,      text_document_will_save = false,      text_document_will_save_wait_until = false,      type_definition = false,      workspace_folder_properties = {        changeNotifications = false,        supported = false      },      workspace_symbol = <10>{        workDoneProgress = true      }    },    rpc = {      handle = <userdata 1>,      notify = <function 13>,      pid = 130568,      request = <function 14>    },    server_capabilities = {      callHierarchyProvider = true,      codeActionProvider = <table 3>,      completionProvider = {        resolveProvider = true,        triggerCharacters = { \".\", \"[\" },        workDoneProgress = true      },      declarationProvider = {        workDoneProgress = true      },      definitionProvider = <table 7>,      documentHighlightProvider = <table 4>,      documentSymbolProvider = <table 5>,      executeCommandProvider = {        commands = {},        workDoneProgress = true      },      hoverProvider = <table 8>,      referencesProvider = <table 6>,      renameProvider = {        workDoneProgress = true      },      signatureHelpProvider = {        triggerCharacters = <table 9>,        workDoneProgress = true      },      textDocumentSync = 2,      workspaceSymbolProvider = <table 10>    },    stop = <function 15>,    supports_method = <function 16>,    workspaceFolders = { {        name = \"/home/jack/nvim-debug\",        uri = \"file:///home/jack/nvim-debug\"      } },    workspace_did_change_configuration = <function 17>  } }\r\n[ DEBUG ] 2021-08-31T11:50:11+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  id = 2,  jsonrpc = \"2.0\",  method = \"shutdown\"}\r\n[ DEBUG ] 2021-08-31T11:50:11+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:496 ]\t\"decoded\"\t{  id = 2,  jsonrpc = \"2.0\",  result = vim.NIL}\r\n[ DEBUG ] 2021-08-31T11:50:11+1000 ] /usr/share/nvim/runtime/lua/vim/lsp/rpc.lua:395 ]\t\"rpc.send.payload\"\t{  jsonrpc = \"2.0\",  method = \"exit\"}\r\n</details>\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I can't reproduce with vim-surround, the text stays in sync with the buffer for me using your exact reproduction script.",
            "created_at": "2021-08-31T03:16:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/15532#issuecomment-908864353",
            "id": 908864353,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15532",
            "node_id": "IC_kwDOAPphoM42LCth",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/908864353/reactions"
            },
            "updated_at": "2021-10-17T04:52:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/908864353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
                "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
                "followers_url": "https://api.github.com/users/mjlbach/followers",
                "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
                "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mjlbach",
                "id": 13316262,
                "login": "mjlbach",
                "node_id": "MDQ6VXNlcjEzMzE2MjYy",
                "organizations_url": "https://api.github.com/users/mjlbach/orgs",
                "received_events_url": "https://api.github.com/users/mjlbach/received_events",
                "repos_url": "https://api.github.com/users/mjlbach/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mjlbach",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I was trying to figure out what might be different about my system and noticed that the issue went away after restarting my computer, but the issue returns the next time neovim is opened. Seems to be true in a docker container as well.\r\n\r\nI've made a [hopefully] reproducible docker image that demonstrates the issue. https://github.com/jay-aye-see-kay/nvim-sync-debug",
            "created_at": "2021-08-31T05:15:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/15532#issuecomment-908906265",
            "id": 908906265,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15532",
            "node_id": "IC_kwDOAPphoM42LM8Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/908906265/reactions"
            },
            "updated_at": "2021-08-31T05:15:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/908906265",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23488939?v=4",
                "events_url": "https://api.github.com/users/jay-aye-see-kay/events{/privacy}",
                "followers_url": "https://api.github.com/users/jay-aye-see-kay/followers",
                "following_url": "https://api.github.com/users/jay-aye-see-kay/following{/other_user}",
                "gists_url": "https://api.github.com/users/jay-aye-see-kay/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jay-aye-see-kay",
                "id": 23488939,
                "login": "jay-aye-see-kay",
                "node_id": "MDQ6VXNlcjIzNDg4OTM5",
                "organizations_url": "https://api.github.com/users/jay-aye-see-kay/orgs",
                "received_events_url": "https://api.github.com/users/jay-aye-see-kay/received_events",
                "repos_url": "https://api.github.com/users/jay-aye-see-kay/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jay-aye-see-kay/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jay-aye-see-kay/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jay-aye-see-kay",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I looked into this a bit tonight. It's the carriage return character (^M) that vim-surround inserts during the replacement. Easier repro (insert carriage return with c-v c-m)\r\n```\r\na = 123\r\n# add 1 by 1\r\na = ^M^M^M^M^M^M^M^M123 \r\n# delete 1 by 1\r\na = 123\r\n```",
            "created_at": "2021-10-15T07:52:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/15532#issuecomment-944077918",
            "id": 944077918,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15532",
            "node_id": "IC_kwDOAPphoM44RXxe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/944077918/reactions"
            },
            "updated_at": "2021-10-16T17:50:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/944077918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
                "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
                "followers_url": "https://api.github.com/users/mjlbach/followers",
                "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
                "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mjlbach",
                "id": 13316262,
                "login": "mjlbach",
                "node_id": "MDQ6VXNlcjEzMzE2MjYy",
                "organizations_url": "https://api.github.com/users/mjlbach/orgs",
                "received_events_url": "https://api.github.com/users/mjlbach/received_events",
                "repos_url": "https://api.github.com/users/mjlbach/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mjlbach",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Edit: vim-surround no longer uses `\\r` but that doesn't mean that `\\r` can't cause issues elsewhere.\r\n\r\nLongform explanation copied from the PR I'm about to close.\r\n\r\nIn the protocol: `To ensure that both client and server split the string into the same line representation the protocol specifies the following end-of-line sequences: ‘\\n’, ‘\\r\\n’ and ‘\\r’.`\r\n\r\nThe issue is, vim allows inline carriage returns (c-v c-m), this completely breaks our notion of buffer positioning. When *deleting* an inline carriage return, all language-server-node derived servers as well as sumneko will desynchronize their buffer state, as they assume that a carriage return must be EOL in accordance with the rpotocol.  This will desynchronize the neovim buffer state with the server.\r\n\r\nThe options:\r\n* This PR: use a placeholder blank character when sending that to the server, as then the servers representation of the buffer will match that of neovim's. I don't like this \"hack\", because the minute we save the file to disk, the server is free to read the file with the saved `^M`/`\\r`  and do whatever it wants with it, including crashing when the buffer state and the on disk state of the file diverge (see julials). Not super happy with this one.\r\n* Internally split the buffers on carriage returns to normalize the neovim buffer state to  that which the language server protocol expects (carriage return delineates newline) and keep an internal mapping of the true 8-bit clean buffer position to the LSP compatible buffer.\r\n* Ask to amend the protocol\r\n* Search/replace all inline carriage returns when sending text changes with a placeholder char (like this PR does), but also ensure that when saving to disk, or first sending to the language server, these are replaced as well\r\n* Ask users to not use plugins that use inline carriage returns, and ask users to unmap c-v c-m\r\n* Add a mode to neovim that disallows inline carriage returns (inserts them as newlines) ~this may or may not break vim-surround~\r\n\r\nSee also:\r\n*  my conversation with @sumneko who was kind enough to confirm my suspicion, and point out exactly how this impacts synchronization with lua-language-server https://matrix.to/#/!JAfPjWAdLCtgeCAwnS:matrix.org/$163437861641380pkmPO:matrix.org?via=matrix.org&via=libera.chat&via=gitter.im\r\n\r\n* this repo containing the json packets we send which reproduces the issue: https://github.com/mjlbach/test-sumneko\r\n\r\n* the packet that causes the breakage, deleting an line `^M`\r\n```json\r\n{\r\n\t\"jsonrpc\": \"2.0\",\r\n\t\"params\": {\r\n\t\t\"textDocument\": {\r\n\t\t\t\"uri\": \"file:\\/\\/\\/home\\/michael\\/test\\/main.lua\",\r\n\t\t\t\"version\": 9\r\n\t\t},\r\n\t\t\"contentChanges\": [\r\n\t\t\t{\r\n\t\t\t\t\"range\": {\r\n\t\t\t\t\t\"end\": {\r\n\t\t\t\t\t\t\"line\": 0,\r\n\t\t\t\t\t\t\"character\": 7\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"start\": {\r\n\t\t\t\t\t\t\"line\": 0,\r\n\t\t\t\t\t\t\"character\": 6\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"rangeLength\": 1,\r\n\t\t\t\t\"text\": \"\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"method\": \"textDocument\\/didChange\"\r\n}\r\n```",
            "created_at": "2021-10-16T21:08:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/15532#issuecomment-945007805",
            "id": 945007805,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15532",
            "node_id": "IC_kwDOAPphoM44U6y9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/945007805/reactions"
            },
            "updated_at": "2022-04-09T20:30:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/945007805",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
                "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
                "followers_url": "https://api.github.com/users/mjlbach/followers",
                "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
                "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mjlbach",
                "id": 13316262,
                "login": "mjlbach",
                "node_id": "MDQ6VXNlcjEzMzE2MjYy",
                "organizations_url": "https://api.github.com/users/mjlbach/orgs",
                "received_events_url": "https://api.github.com/users/mjlbach/received_events",
                "repos_url": "https://api.github.com/users/mjlbach/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mjlbach",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is there an alternative to `vim-surround` that does not cause the breakage?",
            "created_at": "2022-02-28T12:21:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/15532#issuecomment-1054201879",
            "id": 1054201879,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15532",
            "node_id": "IC_kwDOAPphoM4-1dgX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1054201879/reactions"
            },
            "updated_at": "2022-02-28T12:21:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1054201879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12465195?v=4",
                "events_url": "https://api.github.com/users/ambroisie/events{/privacy}",
                "followers_url": "https://api.github.com/users/ambroisie/followers",
                "following_url": "https://api.github.com/users/ambroisie/following{/other_user}",
                "gists_url": "https://api.github.com/users/ambroisie/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ambroisie",
                "id": 12465195,
                "login": "ambroisie",
                "node_id": "MDQ6VXNlcjEyNDY1MTk1",
                "organizations_url": "https://api.github.com/users/ambroisie/orgs",
                "received_events_url": "https://api.github.com/users/ambroisie/received_events",
                "repos_url": "https://api.github.com/users/ambroisie/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ambroisie/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ambroisie/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ambroisie",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There's https://github.com/machakann/vim-sandwich. You could test and report here whether that has the same issue.",
            "created_at": "2022-02-28T12:26:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/15532#issuecomment-1054205905",
            "id": 1054205905,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15532",
            "node_id": "IC_kwDOAPphoM4-1efR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1054205905/reactions"
            },
            "updated_at": "2022-02-28T12:26:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1054205905",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "There's no reason surround.vim needs to use `\\r` for this. I've changed it to another control character as a workaround.",
            "created_at": "2022-04-09T20:06:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/15532#issuecomment-1094116851",
            "id": 1094116851,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15532",
            "node_id": "IC_kwDOAPphoM5BNuXz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 4,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1094116851/reactions"
            },
            "updated_at": "2022-04-09T20:06:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1094116851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/378?v=4",
                "events_url": "https://api.github.com/users/tpope/events{/privacy}",
                "followers_url": "https://api.github.com/users/tpope/followers",
                "following_url": "https://api.github.com/users/tpope/following{/other_user}",
                "gists_url": "https://api.github.com/users/tpope/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tpope",
                "id": 378,
                "login": "tpope",
                "node_id": "MDQ6VXNlcjM3OA==",
                "organizations_url": "https://api.github.com/users/tpope/orgs",
                "received_events_url": "https://api.github.com/users/tpope/received_events",
                "repos_url": "https://api.github.com/users/tpope/repos",
                "site_admin": true,
                "starred_url": "https://api.github.com/users/tpope/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tpope/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tpope",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks @tpope! I didn't want to bother you with this since it's a neovim (and vim) quirk for representing buffer lines, it's just the complexity of us accounting for vim (and neovim) not splitting on \\r is fairly high (and it affect coc.nvim too!). Thank you and sorry for any inconvenience! I've updated the issue title accordingly.",
            "created_at": "2022-04-09T20:29:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/15532#issuecomment-1094119764",
            "id": 1094119764,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15532",
            "node_id": "IC_kwDOAPphoM5BNvFU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1094119764/reactions"
            },
            "updated_at": "2022-04-09T20:31:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1094119764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
                "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
                "followers_url": "https://api.github.com/users/mjlbach/followers",
                "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
                "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mjlbach",
                "id": 13316262,
                "login": "mjlbach",
                "node_id": "MDQ6VXNlcjEzMzE2MjYy",
                "organizations_url": "https://api.github.com/users/mjlbach/orgs",
                "received_events_url": "https://api.github.com/users/mjlbach/received_events",
                "repos_url": "https://api.github.com/users/mjlbach/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mjlbach",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Status \r\nFrom https://github.com/neovim/neovim/pull/16044#issuecomment-945006967 : \r\n\r\n> After talking to Bjorn, I'm realizing that the only real fix is:\r\n> \r\n> > Internally split the buffers on carriage returns to normalize the neovim buffer state to that which the language server protocol expects (carriage return delineates newline) and keep an internal mapping of the true 8-bit clean buffer position to the LSP compatible buffer.\r\n\r\n",
            "created_at": "2023-07-16T10:21:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/15532#issuecomment-1637045745",
            "id": 1637045745,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/15532",
            "node_id": "IC_kwDOAPphoM5hk1Xx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1637045745/reactions"
            },
            "updated_at": "2023-07-16T10:21:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1637045745",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/15532/comments",
    "created_at": "2021-08-31T01:59:32Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/15532/events",
    "html_url": "https://github.com/neovim/neovim/issues/15532",
    "id": 983394368,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/15532/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 285,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 339,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-07-04T21:53:41Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWU5ODMzOTQzNjg=",
    "number": 15532,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/15532/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/15532/timeline",
    "title": "lsp: deleting inline carriage return (`\\r`/`^M`) breaks incremental synchronization",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:35:46Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/15532",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/23488939?v=4",
        "events_url": "https://api.github.com/users/jay-aye-see-kay/events{/privacy}",
        "followers_url": "https://api.github.com/users/jay-aye-see-kay/followers",
        "following_url": "https://api.github.com/users/jay-aye-see-kay/following{/other_user}",
        "gists_url": "https://api.github.com/users/jay-aye-see-kay/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jay-aye-see-kay",
        "id": 23488939,
        "login": "jay-aye-see-kay",
        "node_id": "MDQ6VXNlcjIzNDg4OTM5",
        "organizations_url": "https://api.github.com/users/jay-aye-see-kay/orgs",
        "received_events_url": "https://api.github.com/users/jay-aye-see-kay/received_events",
        "repos_url": "https://api.github.com/users/jay-aye-see-kay/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jay-aye-see-kay/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jay-aye-see-kay/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jay-aye-see-kay",
        "user_view_type": "public"
    }
}