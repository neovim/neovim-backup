{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Given `t-funcref.vim`:\r\n\r\n```vim\r\nlet s:q = []\r\n\r\nfunction! F1(...)\r\n    call add(s:q, [a:000])\r\nendfunction\r\n\r\n\" Needs two calls.\r\ncall F1({})\r\ncall F1({})\r\n\r\n\" Does not work: Cannot delete function F2: It is being used internally\r\ndelfunction F1\r\nq\r\n```\r\n\r\nRunning `nvim -u t-funcref.vim` results in:\r\n\r\n```\r\nError detected while processing â€¦/t-funcref.vim:\r\nline   12:\r\nCannot delete function F1: It is being used internally\r\n```\r\n\r\nThis happens via https://github.com/neovim/neovim/blob/cf93b5e9f9eea1b08ca8d7cb124265867b2f3bf9/src/nvim/eval.c#L21114-L21118, which is not used in Vim.\r\nAdding this check to Vim produces the same error there then.\r\n\r\nSo this is a problem also in Vim, but it does not make the `delfunction` fail.\r\n\r\nThe check in Neovim was added early on in 4b98ea1e8 already, and later adjusted/fixed in b7dab423e.\r\n\r\nNVIM v0.3.2-755-gcf93b5e9f",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'd be happy to forward this to Vim if it turns out that the check in Neovim makes sense.",
            "created_at": "2018-10-29T14:16:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/9169#issuecomment-433926261",
            "id": 433926261,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9169",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzkyNjI2MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/433926261/reactions"
            },
            "updated_at": "2018-10-29T14:16:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/433926261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Using `deepcopy()` avoids the issue:\r\n\r\n    call add(s:q, deepcopy([a:000]))\r\n\r\nNot sure it's a bug.  After all, you are keeping an external reference (`s:q`) to the internal function state (`a:000`). So how could deleting the function work?\r\n\r\nWhat do you think @ZyX-I ?\r\n\r\n* We should assign an Error number to that message.",
            "created_at": "2018-10-29T14:36:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/9169#issuecomment-433933779",
            "id": 433933779,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9169",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzkzMzc3OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/433933779/reactions"
            },
            "updated_at": "2018-10-29T14:37:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/433933779",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> call add(s:q, [a:000])\r\n\r\nIf you change that to `call add(s:q, [copy(a:000)])`, then there's no issue.  However, `a:000` is a list constructed for the function call, so it doesn't exist in any other scope.  I think it's correct that the function can't be deleted until the references are freed.",
            "created_at": "2018-10-29T14:36:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/9169#issuecomment-433933884",
            "id": 433933884,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9169",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzkzMzg4NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/433933884/reactions"
            },
            "updated_at": "2018-10-29T14:36:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/433933884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> However, a:000 is a list constructed for the function call, so it doesn't exist in any other scope.\r\n> I think it's correct that the function can't be deleted until the references are freed.\r\n\r\nDoesn't this mean that it should be considered to be freeable if the function call finished/returned?\r\n\r\nBasically like when using `copy()` yourself: everything in there is coming from outside the function call.",
            "created_at": "2018-10-29T14:53:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/9169#issuecomment-433940599",
            "id": 433940599,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9169",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzk0MDU5OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/433940599/reactions"
            },
            "updated_at": "2018-10-29T14:53:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/433940599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Doesn't this mean that it should be considered to be freeable if the function call finished/returned?\r\n\r\nThe internal scope is still referenced externally, so even though it returned it is not \"finished\". What should it do with that reference if you delete the scope? \r\n\r\nIt would need to \"detach\" the argument-scoped variable from the function, but then where does it go? Promote it to a global? Create a new special scope or `v:funcargs` structure?\r\n\r\n> when using copy() yourself: everything in there is coming from outside the function call\r\n\r\ncopy() creates a new reference, rather than merely assigning it. However AFAIK it's impossible to modify `a:000` contents. Maybe assigning `a:000` out of scope could implicitly do a copy(). (Is that what you are suggesting?) But note the behavior:\r\n\r\n```vim\r\nlet a={}\r\nlet b=copy(a)\r\necho id(a) ==# id(b)  \" 0\r\necho a is# b          \" 0\r\necho a ==# b          \" 1\r\n```",
            "created_at": "2018-10-29T15:06:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/9169#issuecomment-433945991",
            "id": 433945991,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9169",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzk0NTk5MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/433945991/reactions"
            },
            "updated_at": "2018-10-29T15:18:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/433945991",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk I would be more then happy if Neovim could do as much as\r\n\r\n```VimL\r\nfunction F()\r\n  delfunction F\r\nendfunction\r\n```\r\n\r\nwithout errors, not to mention just some measly variable holding a:000 (which directly keeps only frame structure, function being kept merely for extension; and you do *not* need function for `a:000` to be usable). Not impossible too: all you actually need is all functions having functional reference counter, frame holding a reference *and* various async callbacks holding a reference too instead of addressing function by name. If I am not mistaking error is there precisely for those callbacks, and was not added by me.\r\n\r\nIf I recall correctly (Neo)Vim has a system for keeping otherwise unneeded frame structures if variables inside are referenced and dealing with them in M&S GC when time comes. And somehow copes without also having to keep function references which you in any case *cannot* possibly access from VimL if all you have is the reference to `a:`.",
            "created_at": "2018-10-30T21:43:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/9169#issuecomment-434481055",
            "id": 434481055,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9169",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDQ4MTA1NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/434481055/reactions"
            },
            "updated_at": "2018-10-30T21:44:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/434481055",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is reloading a `function!` the same as deleting it first? i.e. does this mean that functions with externally referenced variables can't be override with `function!`? If so that would be motivation to allow this to work in some way.",
            "created_at": "2018-10-31T22:36:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/9169#issuecomment-434871302",
            "id": 434871302,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9169",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDg3MTMwMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/434871302/reactions"
            },
            "updated_at": "2018-10-31T22:36:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/434871302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/606923?v=4",
                "events_url": "https://api.github.com/users/mqudsi/events{/privacy}",
                "followers_url": "https://api.github.com/users/mqudsi/followers",
                "following_url": "https://api.github.com/users/mqudsi/following{/other_user}",
                "gists_url": "https://api.github.com/users/mqudsi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mqudsi",
                "id": 606923,
                "login": "mqudsi",
                "node_id": "MDQ6VXNlcjYwNjkyMw==",
                "organizations_url": "https://api.github.com/users/mqudsi/orgs",
                "received_events_url": "https://api.github.com/users/mqudsi/received_events",
                "repos_url": "https://api.github.com/users/mqudsi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mqudsi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mqudsi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mqudsi",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`function! F1 â€¦` works instead of `delfunction` in the test above.",
            "created_at": "2018-10-31T22:39:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/9169#issuecomment-434871951",
            "id": 434871951,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9169",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDg3MTk1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/434871951/reactions"
            },
            "updated_at": "2018-10-31T22:39:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/434871951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/9169/comments",
    "created_at": "2018-10-29T14:11:33Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/9169/events",
    "html_url": "https://github.com/neovim/neovim/issues/9169",
    "id": 375034783,
    "labels": [
        {
            "color": "c7def8",
            "default": false,
            "description": "",
            "id": 109899557,
            "name": "vimscript",
            "node_id": "MDU6TGFiZWwxMDk4OTk1NTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vimscript"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/9169/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 696,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-02-17T18:55:16Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWUzNzUwMzQ3ODM=",
    "number": 9169,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/9169/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/9169/timeline",
    "title": "cannot delete function if a:000 is referenced externally",
    "updated_at": "2025-02-14T02:29:15Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/9169",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
        "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
        "followers_url": "https://api.github.com/users/blueyed/followers",
        "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
        "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/blueyed",
        "id": 9766,
        "login": "blueyed",
        "node_id": "MDQ6VXNlcjk3NjY=",
        "organizations_url": "https://api.github.com/users/blueyed/orgs",
        "received_events_url": "https://api.github.com/users/blueyed/received_events",
        "repos_url": "https://api.github.com/users/blueyed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/blueyed",
        "user_view_type": "public"
    }
}