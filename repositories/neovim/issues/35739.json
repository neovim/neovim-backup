{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nNeovide added IME pre-edit support with API support https://github.com/neovide/neovide/pull/3110 and a plugin https://github.com/kanium3/neovide-ime.nvim. However, it had to immediately be reverted due to hangs when blocking message prompts were showing.\n\nThe reason for this was that `nvim_input` was changed to `nvim_exec_lua`, which calls a lua function to perform the actual input. But that lua function never gets executed when a message prompt is showing, even when it's a direct replacement like this\n```lua\nM.commit_handler = function(commit_raw_text, commit_formatted_text)\n    vim.api.nvim_input(commit_formatted_text)\nend\n```\n\nThe actual pre-edit functionality is complex, won't be possible, and doesn't even make sense when a message is waiting for input, so what we would like to have is a function like this:\n\n```lua\nM.commit_handler = function(commit_raw_text, commit_formatted_text)\n    if vim.in_fast_event() then\n        vim.api.nvim_input(commit_formatted_text)\n    else\n        -- do pre-edit stuff here\n    end\nend\n```\n\nBut as mentioned this does not work, due to `nvim_exec_lua` not being marked as `FUNC_API_FAST`\n\n### Expected behavior\n\nAn UI should be able to execute lua code when nvim is in a fast even handler. It could be done by changing `nvim_exec_lua` to allow it, but that can cause breakage, so maybe another more limited function could be added?\n\nNote, we don't want to do extra roundtrips by checking `vim.in_fast_event()` on the nvim side, which is not even possible to do in an atomic manner, so there could be race conditions.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "What specific things need to be done in a fast context? Maybe targeted API(s) could be added for them.\n\n> However, it had to immediately be reverted due to hangs when blocking message prompts were showing.\n> \n> The reason for this was that `nvim_input` was changed to `nvim_exec_lua`, which calls a lua function to perform the actual input.\n\nThis needs to be expanded, it seems like we're jumping to an \"XY solution\".\n\nWhat \"hangs\" and is there some other way we could achieve the goal instead of just adding a way to execute the universe in a fast context.",
            "created_at": "2025-09-14T18:57:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3289787286",
            "id": 3289787286,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EFiuW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289787286/reactions"
            },
            "updated_at": "2025-09-14T18:59:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289787286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "For this specific problem I need an API that does this\n```lua\nM.commit_handler = function(commit_raw_text, commit_formatted_text)\n    if vim.in_fast_event() then\n        vim.api.nvim_input(commit_formatted_text)\n    else\n        -- do pre-edit stuff here\n    end\nend\n```\nWhere pre-edit stuff is arbitrary lua code *not* run in fast context.\n\nAnd another one with the following signature \n`function(preedit_raw_text, cursor_offset)`",
            "created_at": "2025-09-14T19:03:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3289792715",
            "id": 3289792715,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EFkDL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289792715/reactions"
            },
            "updated_at": "2025-09-14T19:05:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289792715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Where pre-edit stuff is arbitrary lua code _not_ run in fast context.\n\nsorry, i don't understand. your code example should already work. `nvim_input` is \"fast\", and the `else` branch is not...",
            "created_at": "2025-09-14T19:07:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3289797261",
            "id": 3289797261,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EFlKN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289797261/reactions"
            },
            "updated_at": "2025-09-14T19:07:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289797261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "No it doesn't, `nvim_exec_lua` cant be called from a remote when a message is showing, it will be queued, because it's not a fast API.  So it can't call `vim.api.nvim_input` that would send the input to close the message ",
            "created_at": "2025-09-14T19:11:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3289799895",
            "id": 3289799895,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EFlzX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289799895/reactions"
            },
            "updated_at": "2025-09-14T19:11:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289799895",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is the remote client calling `nvim_exec_lua('M.commit_handler')` ? That was the part I was missing.\n\nCan the remote client check `nvim_get_mode()`? It exists for this purpose. If it returns `blocking=true`, then the remote client should call `nvim_input`, else it can call `nvim_exec_lua`.",
            "created_at": "2025-09-14T19:21:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3289807137",
            "id": 3289807137,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EFnkh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289807137/reactions"
            },
            "updated_at": "2025-09-14T19:21:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289807137",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes, the remote is calling it. \n\nAnd as explained in my first message, splitting it into two calls is a bad idea due to additional latency. And impossible due to race conditions. There's no guarantee that the actual call will have the same mode.",
            "created_at": "2025-09-14T19:35:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3289820262",
            "id": 3289820262,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EFqxm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289820262/reactions"
            },
            "updated_at": "2025-09-14T19:35:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289820262",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "how are we interpreting \"commit\"? something like `nvim_paste` might make sense, unless you expect commiting in normal mode to be read as a normal mode command",
            "created_at": "2025-09-14T19:46:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3289831048",
            "id": 3289831048,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EFtaI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289831048/reactions"
            },
            "updated_at": "2025-09-14T19:46:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289831048",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> how are we interpreting \"commit\"? something like `nvim_paste` might make sense, unless you expect commiting in normal mode to be read as a normal mode command\n\nCommit, in this case means IME commit and means insert the text as if it was typed.\n\nWith pre-edit the implementation is more complex than that, here's the implementation we have right now https://github.com/kanium3/neovide-ime.nvim/blob/main/lua/neovide-ime/init.lua, but it's still fairly incomplete, and misses a lot of special cases.\n\nWinit has a quite good description of IME as we implement it in Neovide https://docs.rs/winit/latest/winit/event/enum.Ime.html\n\nBut it can be a bit more complex than that, see the wayland protocol for example https://wayland.app/protocols/text-input-unstable-v3",
            "created_at": "2025-09-14T19:56:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3289842623",
            "id": 3289842623,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EFwO_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289842623/reactions"
            },
            "updated_at": "2025-09-14T19:56:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289842623",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "so for the actual question, it seems we want \"commit\" in normal mode to mean normal mode command? ",
            "created_at": "2025-09-14T20:10:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3289857582",
            "id": 3289857582,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EFz4u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289857582/reactions"
            },
            "updated_at": "2025-09-14T20:10:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289857582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> so for the actual question, it seems we want \"commit\" in normal mode to mean normal mode command?\n\nYes, it should act as regular input. \n\nIn fact, on at least some macOS systems dead keys are delivered as IME input and not as regular key presses, so some default mappings would stop working without it.\n\nBut often the user wants to automatically disable IME when going to the normal mode, so you don't want to create Chinese mappings for example. Those are things the plugin will take care of.\n\nThe default implementation without the plugin and pre-edit support is this.\n```lua\n---@param preedit_raw_text string\n---@param cursor_offset? [integer, integer] (start_col, end_col) This values show the cursor begin position and end position. The position is byte-wise indexed.\nM.preedit_handler = function(preedit_raw_text, cursor_offset) end\n\n---@param commit_raw_text string\n---@param commit_formatted_text string It's escaped.\nM.commit_handler = function(commit_raw_text, commit_formatted_text)\n    vim.api.nvim_input(commit_formatted_text)\nend\n```\nBut that already breaks because Neovide can't call it when nvim is blocking for input.",
            "created_at": "2025-09-14T20:29:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3289871364",
            "id": 3289871364,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EF3QE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289871364/reactions"
            },
            "updated_at": "2025-09-14T20:29:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3289871364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "What do you suggest? \n\nI think built-in pre-edit support could be something to aim for in the future. Terminals could also support it with a custom protocol, many already support IME with pre-edit, but it's only designed for the command line and can't really deal with the windows inside Neovim.\n\nBut currently the implementation is too unstable to even attempt including. And that's also the same reason I didn't want to include it directly in Neovide at this point and exposed an API hook instead.\n\nBut I think even the API hook is too unstable at the moment to standardize in Neovim. As mentioned before, the IME system supports more than we currently attempt to do, for example you can give it surrounding text. https://wayland.app/protocols/wayland-protocols/368#wp_input_method_v3:event:surrounding_text.\n\nSo, to me allowing remote clients to execute lua in a fast API context, seems like the solution for now. I don't see much reason to disallow that when a regular lua plugin also can execute lua code at that time by using `vim.uv` timers for example. But on the other hand, I can't think of that many other use cases either. Maybe smooth trackpad scrolling could benefit from being able to preprocess the mouse input on the nvim side before it's actually delivered. But I haven't thought much about that as an option.",
            "created_at": "2025-09-16T22:14:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3300513768",
            "id": 3300513768,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7Eudfo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3300513768/reactions"
            },
            "updated_at": "2025-09-16T22:14:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3300513768",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Adding a `_fast` variant of every (or any) api is not attractive.\n\nWe really need a way for clients to control per-request \"properties\". `nvim_call_atomic` was a similar concept, but don't want to do that again because it invents its own request model of leveraging msgpack-rpc.\n\nRelated to https://github.com/neovim/neovim/issues/31903 , perhaps it makes sense for *all* API calls to (automatically) accept an implicit `opts` (`flags`?) parameter as the last arg, so that the client can control per-request behaviors. Then `opt.fast` could control the \"fast\" behavior of any API call.",
            "created_at": "2025-09-16T22:20:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3300527189",
            "id": 3300527189,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7EugxV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3300527189/reactions"
            },
            "updated_at": "2025-09-16T22:23:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3300527189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "But what else than `nvim_exec_lua` would you need to control like that, where the user needs to decide when to run it? It's not really even an API IMO, since it does nothing by itself, and is just a gateway to execute lua code from remote plugins. Yes, I'm aware of `nvim_set_hl_ns_fast`, and that's where I took the name from. But to me it looks like that could have been implemented with just one function that knows its context internally, without the need to create a new function.\n\nRegarding the opts idea, I don't think `nvim_exec_lua` can be modified to take an opts argument since all the arguments are forwarded to the code being executed.",
            "created_at": "2025-09-16T22:41:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3300572614",
            "id": 3300572614,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7Eur3G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3300572614/reactions"
            },
            "updated_at": "2025-09-16T22:41:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3300572614",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I don't think `nvim_exec_lua` can be modified to take an opts argument since all the arguments are forwarded to the code being executed.\n\nthose are passed as 1 array arg. rpc api doesn't have \"variadic\" args (thankfully).\n",
            "created_at": "2025-09-16T22:52:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3300592225",
            "id": 3300592225,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7Euwph",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3300592225/reactions"
            },
            "updated_at": "2025-09-16T22:52:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3300592225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I wonder if it would be better to create a new function, `nvim_call_lua`, which takes a function name and arguments? It's a bit wasteful to compile the code on every call, when in almost all cases you want to call some existing function with some arguments. But since you seem to prefer options over separate functions that could also be handled as an option.\n\nNote that the current `nvim_exec_lua` is still useful for loading the initial code from a remote, but it would probably not need to support fast API if `nvim_call_lua` is made.\n\nAs a sidenote, options as function arguments are quite bad for feature detection. We can easily detect new functions and changed functions from the api metadata. But it has no information of what options it supports. And the pre-release information has the most an unordered hash, so the only way to know if something is supported is to check for major releases or add configuration options.",
            "created_at": "2025-09-19T21:06:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3313803750",
            "id": 3313803750,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7FhKHm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3313803750/reactions"
            },
            "updated_at": "2025-09-19T21:06:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3313803750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> nvim_call_lua, which takes a function name and arguments? It's a bit wasteful to compile the code on every call,\n\nunlikely to matter vs the other costs of an RPC call.\n\n> We can easily detect new functions and changed functions from the api metadata. But it has no information of what options it supports.\n\nwe have KeySets. if those aren't reflected in api metadata, they can be.\n\n> so the only way to know if something is supported is to check for major releases\n\nwhy does that matter? users/clients using the prerelease MUST be up to date. there is no such thing as \"feature detection\" for HEAD features, that is not supported and is just asking for headaches.",
            "created_at": "2025-09-19T21:52:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3313953286",
            "id": 3313953286,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7FhuoG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3313953286/reactions"
            },
            "updated_at": "2025-09-19T21:52:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3313953286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > nvim_call_lua, which takes a function name and arguments? It's a bit wasteful to compile the code on every call,\n> \n> unlikely to matter vs the other costs of an RPC call.\n\nMaybe it doesn't matter, I haven't benchmarked. But the RPC overhead is mostly in other threads and doesn't block the main loop. While the lua code needs to run through the lexer, then parser, then compiled to bytecode, then take a JIT compilation hit because it's always run the first time. \n\n> \n> > We can easily detect new functions and changed functions from the api metadata. But it has no information of what options it supports.\n> \n> we have KeySets. if those aren't reflected in api metadata, they can be.\n\nThe only information there is right now that it's a dict parameter.\n\n> \n> > so the only way to know if something is supported is to check for major releases\n> \n> why does that matter? users/clients using the prerelease MUST be up to date. there is no such thing as \"feature detection\" for HEAD features, that is not supported and is just asking for headaches.\n\nWe have needed and used it multiple times in Neovide. We have for example checked for the presence of functions and for UI event signatures. \n\nNeovide should always, if possible, work with any Neovim version, except when we cut support from older versions and the user is clearly notified at startup. It can of course break from bugs and Neovim breaking changes, which we should preferably be able to detect and work around even before they are merged to Neovim.\n\nWe also want to test various features and bug fixes before the release. In this case, we want to make sure the IME support works before the Neovim 0.12 is released, so we don't need to stall all development and testing until then. And users should be able to do that by just installing a new enough Neovim nightly user and a new enough Neovide main version. It should still not crash for users that have older nightly Neovim versions if we can prevent it. So, in this case, we can't just enable the IME API without checks once the fast API support is in.\n\nWe have the same issue with the grid 0 support, this can't be detected either, so in that case we are going to add a configuration option to enable it, which I don't like at all, but that's the only option we have.\n\nWe could refuse to start, but we can't since Neovim nightly builds don't include any date or incremental number that we can check. Any of those would be preferable over direct feature detection, but we don't have it.\n\nIt's also very idealistic to think that users either stay on a stable release or update every day. Many people want a certain nightly feature, and update to that version and stay there until the release.\n\nI guess plugins are not as affected by this, since breakages often affect only the plugin itself. Lua is also more dynamic and can handle error situations better.",
            "created_at": "2025-09-19T23:42:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3314204964",
            "id": 3314204964,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7FisEk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3314204964/reactions"
            },
            "updated_at": "2025-09-19T23:42:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3314204964",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> While the lua code needs to run through the lexer, then parser, then compiled to bytecode, then take a JIT compilation hit because it's always run the first time.\n\nI think luajit may surprise you. But if that turns out not to be the case, https://github.com/neovim/neovim/issues/8092 would be the preferred approach.\n\n> It's also very idealistic to think that users either stay on a stable release or update every day\n\nIt's not idealistic, it's a basic expectation that keeps everyone on the same page. They don't need to update every day, but every week or so, or at least do so if they notice breakage. That is completely reasonable.\n\nFactoring in \"what about users in the Nth HEAD commit\" into our design discussions is a complete waste of time. \n\nConstraints are good.\n\nGraceful degradation is also good, but that is not part of the design discussion in this project for **unreleased HEAD** features, nor should it be. Because it's a total waste of time.",
            "created_at": "2025-09-20T00:05:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3314258948",
            "id": 3314258948,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7Fi5QE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3314258948/reactions"
            },
            "updated_at": "2025-09-20T00:07:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3314258948",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It turns out that `:version` provides the information we want, an incrementing number and git hash for the pre-releases, so we are happy with that for compatibility checking. `vim.version()` and `api_info()` does not.\n\nNow back to the actual issue.\n\nAdding support for `opts = { fast = true }`, would require a quite big change to the event handling system. Currently the requests are added to the queue first and the unpacking of the arguments are done when actually handling it. When using an `fast` as an option, the unpacking has to be done before processing it. That seems like a risky overkill to implement if `nvim_exec_lua_fast` is the only function that will need it. The remote can always use `nvim_exec_lua_fast` to wrap the other needs.\n\nThe contract changes to allow `opts` everywhere does also not sound like something that will be done soon. And Neovide would like to experiment with the IME support, one of our most requested features soon. Especially when we for a brief moment had support for it, which received great positive feedback from Chinese user, who consider something like that mandatory and expected, but had to be reverted due to hangs.\n\nCould `nvim_exec_lua_fast` at least be added as an experimental API that can be removed in the future when we have a better alternative?\n",
            "created_at": "2025-09-21T12:22:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3315961665",
            "id": 3315961665,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7FpY9B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3315961665/reactions"
            },
            "updated_at": "2025-09-21T12:22:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3315961665",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Could `nvim_exec_lua_fast` at least be added as an experimental API that can be removed in the future when we have a better alternative?\n\ni guess. double underscore: `nvim__exec_lua_fast`",
            "created_at": "2025-09-21T20:11:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/35739#issuecomment-3316236363",
            "id": 3316236363,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35739",
            "node_id": "IC_kwDOAPphoM7FqcBL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3316236363/reactions"
            },
            "updated_at": "2025-09-21T20:11:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3316236363",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 20,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35739/comments",
    "created_at": "2025-09-12T18:58:25Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35739/events",
    "html_url": "https://github.com/neovim/neovim/issues/35739",
    "id": 3411629612,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35739/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM7LWVYs",
    "number": 35739,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35739/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35739/timeline",
    "title": "Fast API support for nvim_exec_lua",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-09-21T20:11:44Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35739",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
        "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
        "followers_url": "https://api.github.com/users/fredizzimo/followers",
        "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
        "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fredizzimo",
        "id": 9946255,
        "login": "fredizzimo",
        "node_id": "MDQ6VXNlcjk5NDYyNTU=",
        "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
        "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
        "repos_url": "https://api.github.com/users/fredizzimo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fredizzimo",
        "user_view_type": "public"
    }
}