{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "## Problem\r\nContained syntax rules *always* override color -- even if they only contain attributes.\r\nThey should be combinable -- but they are not (for `:syntax`).\r\n\r\n## Example\r\n```vimscript\r\n:new\r\nthis is line\r\n:hi! Line ctermfg=1 guifg=#ee0000 gui=NONE cterm=NONE\r\n:syn region Line display oneline keepend excludenl start=/^/ end=/$/\r\n:hi! Word ctermfg=NONE guifg=NONE gui=bold cterm=bold\r\n\" OR: :hi! Word gui=bold cterm=bold\r\n:syn match Word display excludenl contained containedin=Line /is/\r\n:call matchadd(\"Word\",\"line\")\r\n```\r\n\r\n## Goal\r\nI want to properly fix my 7yo markup:\r\n* `:syntax` accents for e.g. bold/italic should be combinable  with current line color (currently only `matchadd()` is able to do that). \r\n* \\*bold\\* word on red line -- should be red (and depend on the line color) instead of being fixed or default color -- only `:syntax` suffers from it, not `matchadd()`\r\n\r\nI can make a *really ugly* workaround: query *all* existing highlighting groups at the end of syntax file and auto-generate *contained* syntax rules (like above) with specific color per each highlight per each accent -- but it's ugly and *very slow* both on generation and during rendering that O(n*m) rules.\r\n\r\n## Prior Art (never was merged / concluded upon?)\r\n\r\n[patch] Add a 'modifier' keyword to the :syntax commands, allowing syntax matches to stack. \r\n  https://groups.google.com/g/vim_dev/c/5YgghIZH_-w\r\n  \r\n Can it be done: syntax region background color, with \"transparent\" foreground? : r/vim\r\n  https://www.reddit.com/r/vim/comments/2iz7ho/can_it_be_done_syntax_region_background_color/\r\n\r\n\r\n### Expected behavior\r\n\r\nWhen one `:syntax` is contained inside another and its `:hi` group does not contain explicit attributes [cterm/gui][fg/bg/-] -- don't override them and keep values from the underlying `:hi` present there (like `transparent` does).",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Fair warning: There's basically zero interest of touching the inherited legacy syntax engine; we're instead investing in tree-sitter based highlighting. We certainly don't want to diverge from Vim on such a fundamental and potentially breaking topic. If Vim implements something like that (in a reasonably self-contained way), we'll port it, of course. So your better bet may be to raise this issue at vim/vim.",
            "created_at": "2023-08-29T21:39:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/24934#issuecomment-1698181151",
            "id": 1698181151,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24934",
            "node_id": "IC_kwDOAPphoM5lODAf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1698181151/reactions"
            },
            "updated_at": "2023-08-29T21:40:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1698181151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Fair enough, will do. \r\nWas worth a try at least to know that.\r\n\r\nDoes \"touching\" means any alteration in any way? \r\nInstead of fixing/changing historical behavior I would be satisfied by additional keyword to enforce required behavior -- if such changes are acceptable.\r\n\r\n-----\r\n\r\nAny way to implement desired behavior in lua/tree-sitter based highlighting already?\r\nOr any roadmap on that?",
            "created_at": "2023-08-29T21:55:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/24934#issuecomment-1698197502",
            "id": 1698197502,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24934",
            "node_id": "IC_kwDOAPphoM5lOG_-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1698197502/reactions"
            },
            "updated_at": "2023-08-29T21:55:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1698197502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5730096?v=4",
                "events_url": "https://api.github.com/users/amerlyq/events{/privacy}",
                "followers_url": "https://api.github.com/users/amerlyq/followers",
                "following_url": "https://api.github.com/users/amerlyq/following{/other_user}",
                "gists_url": "https://api.github.com/users/amerlyq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amerlyq",
                "id": 5730096,
                "login": "amerlyq",
                "node_id": "MDQ6VXNlcjU3MzAwOTY=",
                "organizations_url": "https://api.github.com/users/amerlyq/orgs",
                "received_events_url": "https://api.github.com/users/amerlyq/received_events",
                "repos_url": "https://api.github.com/users/amerlyq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amerlyq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amerlyq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amerlyq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Does \"touching\" means any alteration in any way?\r\n\r\nYes, pretty much.\r\n\r\n> Any way to implement desired behavior in lua/tree-sitter based highlighting already?\r\n\r\nYes, extmark-based highlights (like treesittter, or LSP semantic tokens) have basic combine support.",
            "created_at": "2023-08-29T21:59:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/24934#issuecomment-1698201560",
            "id": 1698201560,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24934",
            "node_id": "IC_kwDOAPphoM5lOH_Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1698201560/reactions"
            },
            "updated_at": "2023-08-29T21:59:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1698201560",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Please, provide minimal example (like mine above, but lua/tree-sitter variant).\r\nLast time I was excited about extmark feature (around 2022-05) -- I couldn't achieve anything distantly similar to what `:syntax` above properly does.\r\n\r\nEdit: it didn't support regexes and only populated virtual text then, which makes it not even competitor to `:syntax`.\r\nAnything had changed? Description looks similar to what it was. \r\n\r\nIs there a roadmap to use it instead of `:syntax` full-fledgingly?\r\nOtherwise simultaneously freezing the edits to `:syntax` and not replacing it with the intended alive alternative makes all related features blackholed.",
            "created_at": "2023-08-29T22:03:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/24934#issuecomment-1698206220",
            "id": 1698206220,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24934",
            "node_id": "IC_kwDOAPphoM5lOJIM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1698206220/reactions"
            },
            "updated_at": "2023-08-29T22:09:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1698206220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5730096?v=4",
                "events_url": "https://api.github.com/users/amerlyq/events{/privacy}",
                "followers_url": "https://api.github.com/users/amerlyq/followers",
                "following_url": "https://api.github.com/users/amerlyq/following{/other_user}",
                "gists_url": "https://api.github.com/users/amerlyq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amerlyq",
                "id": 5730096,
                "login": "amerlyq",
                "node_id": "MDQ6VXNlcjU3MzAwOTY=",
                "organizations_url": "https://api.github.com/users/amerlyq/orgs",
                "received_events_url": "https://api.github.com/users/amerlyq/received_events",
                "repos_url": "https://api.github.com/users/amerlyq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amerlyq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amerlyq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amerlyq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Otherwise simultaneously freezing the edits to :syntax and not replacing it with the intended alive alternative makes all related features blackholed.\n\nIt is not frozen, but we will only take updates from vim.",
            "created_at": "2023-08-30T06:47:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/24934#issuecomment-1698591734",
            "id": 1698591734,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24934",
            "node_id": "IC_kwDOAPphoM5lPnP2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1698591734/reactions"
            },
            "updated_at": "2023-08-30T06:47:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1698591734",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24934/comments",
    "created_at": "2023-08-29T21:13:34Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24934/events",
    "html_url": "https://github.com/neovim/neovim/issues/24934",
    "id": 1872477546,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "regex syntax or non-regex parsing, lpeg, grammars",
            "id": 531600085,
            "name": "syntax",
            "node_id": "MDU6TGFiZWw1MzE2MDAwODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/syntax"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24934/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5vm71q",
    "number": 24934,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24934/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24934/timeline",
    "title": "Contained syntax highlight color/attribute combining is not supported [yet?]",
    "updated_at": "2025-01-17T15:30:21Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24934",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5730096?v=4",
        "events_url": "https://api.github.com/users/amerlyq/events{/privacy}",
        "followers_url": "https://api.github.com/users/amerlyq/followers",
        "following_url": "https://api.github.com/users/amerlyq/following{/other_user}",
        "gists_url": "https://api.github.com/users/amerlyq/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/amerlyq",
        "id": 5730096,
        "login": "amerlyq",
        "node_id": "MDQ6VXNlcjU3MzAwOTY=",
        "organizations_url": "https://api.github.com/users/amerlyq/orgs",
        "received_events_url": "https://api.github.com/users/amerlyq/received_events",
        "repos_url": "https://api.github.com/users/amerlyq/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/amerlyq/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/amerlyq/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/amerlyq",
        "user_view_type": "public"
    }
}