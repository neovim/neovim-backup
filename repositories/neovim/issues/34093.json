{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nThe discussion on https://github.com/neovim/neovim/pull/31399 is long and hard to follow. So, I'm writing a new issue with my proposal instead.\n\nBased on some earlier assumptions (at least mine), it was assumed that at least some of the terminal graphics protocol would be able to do pixel-based positions, which is not the case. See the following table\n\n|Protocol | Positioning | Sizing | Perfect Aspect Ratio | Crop Support | Needs conversion |\n| - | - | -| - | - | - |\n|Kitty| Pixel | Cell (*) | Yes | Yes | No| For other formats than png |\n|Iterm|Cell| Pixel| Yes | No | No | No (supports a lot of formats |\n|Sixel|Cell|Cell| No | No | Yes | Yes |\n\n(*) - Limited pixel-based sizing, affected by the position (see this message https://github.com/neovim/neovim/pull/31399#issuecomment-2876398780 and the replies after that, for a more detailed explanation\nPerfect Aspect Ratio = Automatically calculated with pixel accuracy when one dimension is left out\nCrop support = Can show a cropped portion of the source scaled to the destination size\n\nWhile technically external GUIs could support pixel size positions and sizes, I don't think it's worth it given the additional complexity and inconsistencies it brings. Furthermore, it's still possible to support it indirectly as I will explain later.\n\nWithout pixel-based positioning, I also think that the crop support, which in this context means defining which part of the source image gets rendered, needs to be gone. It just adds more complexity without much additional value.\n\nI'm also taking the liberation to re-define the API to a `nvim_` style one instead of the object oriented one in the PR. Which hopefully doesn't mean that everything needs to be re-done, since the code should still internally be able to use objects.\n\nThe providers are also excluded from the public user facing API, since I think that's an implementation detail, and ideally the image support should work with multiple UIs and/or terminals connected to the same nvim instance. \n\nI think most of the code in #31399 can remain, so hopefully this is not causing too much trouble for @chipsenkbeil, if it's getting implemented.\n\n### Expected behavior\n\nHere's the basic API, but other functions and parameters can be added\n\n## Loading and creating\nAll functions return an image id\n* `nvim_img_load_png(filename)`\n* `nvim_img_load_raw(filename, opts)`\n  * opts should contain, `width`, `height`, `format` (rgb, rgba)\n* `nvim_img_create_png(data)`\n* `nvim_img_create_raw(filename, opts)`\n\nKitty does unfortunately not support any other formats directly, so loading of those are delegated to external plugins. I would prefer if no external tools or libraries were needed by the core, and that the support isn't dependent on what the provider happens to support.\n\n## Showing / Placing\n* `nvim_img_place(image_id, opts)`\n  * returns a `placement_id`\n  * The same `image_id` can be used for multiple placements\n  * `opts` has the following fields (most mimicking the floating window config, with the difference that `win`, `cursor` and `mouse` updates in realtime when the image is showing\n    * `relative` `'editor'|'win'|'cursor'|'mouse'|'buffer'`. `buffer` displays the image inline in the buffer, and scrolls with it. The image is also then clipped to the window that contains the buffer.\n    * `row` \n    * `col`\n    * `win` only in use when `relative is set to `win`\n    * `buf` only in use when `relative` is set to `buffer`\n    * `width` width of the image in grid cells.\n    * `height` height of the image in grid cells\n    * `keep_aspect` defaults to true and is only used when both width and height are set. When set to false, the image is stretched in one dimension to fit the width and height exactly, rather than fitting the maximum image size with preserved aspect ratio in the box\n    * `zindex` - The zindex of the image, not effective when `relative` is set to `buffer`. In that case the z-order follows the normal window order. A positive z-index, displays the images on top neovim, while a negative index displays them under all the text.\n    * `visible` defaults to true\n\nWidth and height are optional for all relative placements except `buffer`, which needs to allocate space for the area were the image is displayed. It's up to the user/plugin to decide a suitable area. For the other placements, it works as follows:\n* Both unset - the image i displayed in its actual size\n* One dimension is set - the other dimension is automatically calculated, preserving the aspect ratio\n* Both dimensions are set and `keep_aspect` is set - Fill either the width or the height, calculated based on the actual image dimensions and the given dimensions. \n* Both dimensions are set and `keep_aspect` is unset - fill both dimensions so that the image covers both width and height\n\n`nvim_img_set_config(placement_id, opts)` - Changes a placed image, can also be used to hide a visible image. Uses the same opts as `nvim_img_place`. The options are merged with the old config\n\n## Deleting\n`nvim_img_del(image_id)` - Deletes the image and all its placements\n`nvim_img_del_placement(placement_id)` - Deletes a placement, but leaves the image loaded, so that it can be placed again\n\n## Information\n`nvim_img_get_info(image_id)` - Should return at least the width and height of the image in pixels, so that advanced plugins can use that together with the cell geometry (not part of this proposal, see https://github.com/neovim/neovim/pull/32408), to calculate for example the number of rows needed when using buffer based placement.\n`nvim_img_get_config(placement_id`)` - gets the current configuration of a placed image\n\nNote that cell geometry depends on currently attached TUI or GUI and the font used for example. Keep in mind that multiple UIs can be connected, and in that case it should be possible to query them all, perhaps assigning one of them the \"main ui\" status. But also note, that the API will never display images with the wrong aspect ratio, despite being displayed on another UI, but might appear bigger or smaller.\n\n## Other APIS\nWe could provide helper functions calculating the number of cells needed to display an image, to convert from pixels to cells and so on. But the information API should be enough to do that manually.\n\n## Pixel perfection\nIt's still possible to archive pixel perfect placement and sizing when targeting a single UI. But the plugin/user manually need add transparent borders around the images to shift them to the correct pixel positions. Which most likely means the usage of ImageMagick or similar, but this proposal keeps that out of the core.\n\n## Terminal support\n* `relative` `'editor'|'win'|'cursor'|'mouse'` can be supported by all `Kitty`, `Iterm2` and `Sixel` to some degree. Iterm2 and Sixel are probably slow when the positions are dynamically updated, since the whole image needs to be re-transmitted\n* `Sixel` does not support rendering with the correct aspect ratio without first resizing the image, so a library dependency or `ImageMagick` is required. Some sixel terminals can't with the correct aspect ratio when either width or height is given, due to a hardcoded cell size of 10x20, which is most likely wrong when a custom font is used.\n* `relative - buffer` can only be supported by Kitty. Or the images need to be cropped/resized every time the buffer is scrolled, which most likely is slow and also depends on external libraries/tools\n\nExternal UIs should be able to support everything easily, at least that's the case for Neovide.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34093/comments",
    "created_at": "2025-05-19T23:06:25Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34093/events",
    "html_url": "https://github.com/neovim/neovim/issues/34093",
    "id": 3075199332,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34093/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM63S9Fk",
    "number": 34093,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34093/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34093/timeline",
    "title": "Design proposal of grid based image API",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-05-19T23:06:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34093",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
        "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
        "followers_url": "https://api.github.com/users/fredizzimo/followers",
        "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
        "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fredizzimo",
        "id": 9946255,
        "login": "fredizzimo",
        "node_id": "MDQ6VXNlcjk5NDYyNTU=",
        "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
        "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
        "repos_url": "https://api.github.com/users/fredizzimo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fredizzimo",
        "user_view_type": "public"
    }
}