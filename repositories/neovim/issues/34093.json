{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nThe discussion on https://github.com/neovim/neovim/pull/31399 is long and hard to follow. So, I'm writing a new issue with my proposal instead.\n\nBased on some earlier assumptions (at least mine), it was assumed that at least some of the terminal graphics protocol would be able to do pixel-based positions, which is not the case. See the following table\n\n|Protocol | Positioning | Sizing | Perfect Aspect Ratio | Crop Support | Needs conversion |\n| - | - | -| - | - | - |\n|Kitty| Pixel | Cell (*) | Yes | Yes | No| For other formats than png |\n|Iterm|Cell| Pixel| Yes | No | No | No (supports a lot of formats |\n|Sixel|Cell|Cell| No | No | Yes | Yes |\n\n(*) - Limited pixel-based sizing, affected by the position (see this message https://github.com/neovim/neovim/pull/31399#issuecomment-2876398780 and the replies after that, for a more detailed explanation\nPerfect Aspect Ratio = Automatically calculated with pixel accuracy when one dimension is left out\nCrop support = Can show a cropped portion of the source scaled to the destination size\n\nWhile technically external GUIs could support pixel size positions and sizes, I don't think it's worth it given the additional complexity and inconsistencies it brings. Furthermore, it's still possible to support it indirectly as I will explain later.\n\nWithout pixel-based positioning, I also think that the crop support, which in this context means defining which part of the source image gets rendered, needs to be gone. It just adds more complexity without much additional value.\n\nI'm also taking the liberation to re-define the API to a `nvim_` style one instead of the object oriented one in the PR. Which hopefully doesn't mean that everything needs to be re-done, since the code should still internally be able to use objects.\n\nThe providers are also excluded from the public user facing API, since I think that's an implementation detail, and ideally the image support should work with multiple UIs and/or terminals connected to the same nvim instance. \n\nI think most of the code in #31399 can remain, so hopefully this is not causing too much trouble for @chipsenkbeil, if it's getting implemented.\n\n### Expected behavior\n\nHere's the basic API, but other functions and parameters can be added\n\n## Loading and creating\nAll functions return an image id\n* `nvim_img_load(filename, opts)`\n  * opts should contain, `width`, `height`, `format` (`rgb`, `rgba`, `png`)\n* `nvim_img_create(filename, opts)`\n\nKitty does unfortunately not support any other formats directly, so loading of those are delegated to external plugins. I would prefer if no external tools or libraries were needed by the core, and that the support isn't dependent on what the provider happens to support.\n\n## Showing / Placing\n* `nvim_img_place(image_id, opts)`\n  * returns a `placement_id`\n  * The same `image_id` can be used for multiple placements\n  * `opts` has the following fields\n    * `row` \n    * `col`\n    * `buf` the buffer to display the image in\n    * `width` width of the image in grid cells.\n    * `height` height of the image in grid cells\n    * `keep_aspect` defaults to true. When set to false, the image is stretched in one dimension to fit the width and height exactly, rather than fitting the maximum image size with preserved aspect ratio in the box\n    * `visible` defaults to true\n\n`nvim_img_set_config(placement_id, opts)` - Changes a placed image, can also be used to hide a visible image. Uses the same opts as `nvim_img_place`. The options are merged with the old config\n\n## Deleting\n`nvim_img_del(image_id)` - Deletes the image and all its placements\n`nvim_img_del_placement(placement_id)` - Deletes a placement, but leaves the image loaded, so that it can be placed again\n\n## Information\n`nvim_img_get_info(image_id)` - Should return at least the width and height of the image in pixels, so that advanced plugins can use that together with the cell geometry (not part of this proposal, see https://github.com/neovim/neovim/pull/32408), to calculate for example the number of rows needed when using buffer based placement.\n`nvim_img_get_config(placement_id`)` - gets the current configuration of a placed image\n\nNote that cell geometry depends on currently attached TUI or GUI and the font used for example. Keep in mind that multiple UIs can be connected, and in that case it should be possible to query them all, perhaps assigning one of them the \"main ui\" status. But also note, that the API will never display images with the wrong aspect ratio, despite being displayed on another UI, but might appear bigger or smaller.\n\n## Other APIS\nWe could provide helper functions calculating the number of cells needed to display an image, to convert from pixels to cells and so on. But the information API should be enough to do that manually. Out of the scope for the initial implementation and PR\n\n## Pixel perfection\nIt's still possible to archive pixel perfect placement and sizing when targeting a single UI. But the plugin/user manually need add transparent borders around the images to shift them to the correct pixel positions. Which most likely means the usage of ImageMagick or similar, but this proposal keeps that out of the core.",
    "closed_at": "2025-05-22T08:36:21Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "To be honest, I am not sure how the other protocols suddenly cropped up in that PR. We've been quite clear from the beginning that we are (at least for now) only interested in implementing the kitty protocol -- not sixels, and _certainly_ not iTerm2. That PR had a sudden Cambrian explosion of features that were never discussed with maintainers...",
            "created_at": "2025-05-20T06:15:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893087110",
            "id": 2893087110,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6scQGG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893087110/reactions"
            },
            "updated_at": "2025-05-20T06:15:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893087110",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> To be honest, I am not sure how the other protocols suddenly cropped up in that PR. We've been quite clear from the beginning that we are (at least for now) only interested in implementing the kitty protocol -- not sixels, and _certainly_ not iTerm2. That PR had a sudden Cambrian explosion of features that were never discussed with maintainers...\n\nOuch, that hurts a bit. There was quite a lot of back and forth about terminal availability and coverage, so I thought if it wasn't much more effort I'd try to add in another protocol that was popular: both sixel and iterm2 appear to have a range of adopters. It also pushed to make sure the abstraction for 3rd parties was more flexible than just a 1:1 copy with kitty, so that was a plus.\n\nRegardless, if other protocols aren't desired, it's as simple as deleting the file with their name on it ([sixel.lua](https://github.com/neovim/neovim/blob/ea8083808e962f43610556517192e2829010b832/runtime/lua/vim/ui/img/providers/sixel.lua), [iterm2.lua](https://github.com/neovim/neovim/blob/ea8083808e962f43610556517192e2829010b832/runtime/lua/vim/ui/img/providers/iterm2.lua)) from the PR. I've cleaned up the PR description with an overview of everything, and would love more feedback if there's things that maintainers don't want or need changed.",
            "created_at": "2025-05-20T06:44:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893153130",
            "id": 2893153130,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6scgNq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893153130/reactions"
            },
            "updated_at": "2025-05-20T06:44:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893153130",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, sorry, the phrasing was tongue in cheek but needlessly dismissive. But the core of my comment stands: The PR just exploded in size and features, to the point where maintainers no longer had the bandwidth to follow it (unlike some interested third parties). It's definitely grown beyond the size where it would be appropriate for core (instead of a plugin). For example, I don't see why image manipulation (and all that this drags in) is needed here. I'm also not sure why we need to have an `imgprovider` option _and_ a handler registration (the latter seems sufficient)? And do we really need async images from the start?\n\nIn general, for bringing in such completely new features, it's always best to\n1. stub out API first before implementation, and then wait until that is resolved (from the POV of core) before proceeding with drawing the rest of the owl;\n2. focus on an MVP for the first PR;\n3. if the full implementation is necessary and large, iterate out of core first, advertising your proposal in the feature request (this may not work for features requiring C-level changes, but this is not the case here).",
            "created_at": "2025-05-20T06:51:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893170204",
            "id": 2893170204,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sckYc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893170204/reactions"
            },
            "updated_at": "2025-05-20T06:58:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893170204",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@clason all good feedback. So what should the next step be? I've presented the API stub at the top of the PR. It's also implemented in the PR, but can always be adjusted.\n\nShould I just break this out into smaller PRs? What should go into each one based on what I presented?\n\n>  For example, I don't see why image manipulation (and all that this drags in) is needed here.\n\n1. The kitty protocol only supports png and rgb formats. If we don't want to support any other image type - that was how I first started - then we don't need ImageMagick.\n2. The sixel protocol only supports rgb. I started writing a pure-Lua decoder to support it, but then realized that we'd need other features like resizing, etc. and ImageMagick made sense to leverage.\n3. The iterm2 protocol supports everything except cropping, so if you want to support it when it can go partially out of view (i.e. buffer local), something needs to do cropping.\n\nSo, without ImageMagick, you can get the kitty protocol with just PNGs.\n\n> I'm also not sure why we need to have an imgprovider option and a handler registration (the latter seems sufficient)?\n\nWe don't if it's okay to just have something like `vim.ui.img.provider = 'kitty'` instead. I can remove the C code for `imgprovider`. Just thought these kinds of things were supposed to be options, but I don't know what the best practice is between choosing an option, a global like `vim.g.imgprovider = 'kitty'` and something embedded into the api.\n\n> where maintainers no longer had the bandwidth to follow it\n\nI didn't realize that was happening. Sorry. I had a few weeks of vacation and took the liberty to pick back up the PR, but seems like my eagerness to contribute a fully-fledged implementation got carried away.",
            "created_at": "2025-05-20T07:04:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893200112",
            "id": 2893200112,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6scrrw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893200112/reactions"
            },
            "updated_at": "2025-05-20T07:04:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893200112",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Personally, I agree that this proposal here (`nvim_` API that keeps the \"backend\" an implementation detail; keep imagemagick out of it) is cleaner, although the `nvim_` API (currently) has stronger constraints than the Lua API, which needs to be kept in mind.\n\nIn particular, we should strive to minimize the number of added API functions; for example, \n* I don't think `nvim_img_del_placement` is required since that can also be achieved by `nvim_img_set_config` with `visible=false`?\n* What does `nvim_img_create_*` do differently from `nvim_img_load_*`? \n* Can we combine `png` and `raw` into one function (defaulting to `png`, and `raw` is an `opt`?)\n\n> So, without ImageMagick, you can get the kitty protocol with just PNGs.\n\nI think that is perfectly fine (and preferable) for a MVP in core. If you want more, you can always build a convenience plugin on top of it.",
            "created_at": "2025-05-20T07:04:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893201376",
            "id": 2893201376,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6scr_g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893201376/reactions"
            },
            "updated_at": "2025-05-20T07:26:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893201376",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> nvim_ API that keeps the \"backend\" an implementation detail;\n\nI wasn't following @fredizzimo on how this keeps it more abstract than the current solution. Is it because you don't specify a provider? I'm not sure how he would switch over to neovide implementing, or is it that each user interface needs to implement all of the nvim_* methods? Is there a track record of doing that where I could follow?\n\nThe only thing a user has to do is say whether they want the kitty protocol (default) or something else. And that can be hidden if we can detect which protocol(s) supported by the UI and autoselect it.",
            "created_at": "2025-05-20T07:08:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893209906",
            "id": 2893209906,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6scuEy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893209906/reactions"
            },
            "updated_at": "2025-05-20T07:08:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893209906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, every UI would implement this API how it works best for them; TUI (which is all Neovim needs to worry about) would use the kitty protocol; Neovide would use their own implementation (which @fredizzimo can explain better than I), but that is Somebody Else's Problem from our point of view, as long as the API works.\n\nSo no user choice is needed (or desired); by choosing their UI, they choose the \"backend\". (For TUI, they'd also need to pick a terminal with kitty support; there's enough of them out there. At least for now: based on demand and feasibility, we could later add other protocols and support detection -- again, no user choice required.)",
            "created_at": "2025-05-20T07:11:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893219585",
            "id": 2893219585,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6scwcB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893219585/reactions"
            },
            "updated_at": "2025-05-20T07:13:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893219585",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@clason is the kitty-only decision a permanent one? Or a, \"let's start with kitty\" one? What got me carried away was the feedback from others in the PR about how many terminals support other protocols that are not kitty. And the major one on Windows Terminal seemed like an important one to unlock. Is the pushback on other TUI protocols that there isn't demand? Or the maintenance burden would be too high? Or something else?\n\nAnd this is coming from me who hasn't used a terminal that lacks kitty graphics support in years, so it's not like I'd be personally affected if neovim only supported kitty.\n\nAlso, thinking about it, if you're directly implementing this API for the user interface, and the TUI is already taken with kitty, doesn't this prevent anyone else from writing a plugin to support a different graphics protocol in the future (like sixel or iterm2) as a plugin? Or would they just override the functions in Lua (e.g. `vim.api.nvim_img_place = function(...) end`?",
            "created_at": "2025-05-20T07:16:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893233737",
            "id": 2893233737,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6scz5J",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893233737/reactions"
            },
            "updated_at": "2025-05-20T07:18:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893233737",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Nothing is permanent; the main thing is\n1. let's start with the minimal viable product for the first PR;\n2. focus on getting the general API right first (since changes to that will be breaking, in a way implementation changes aren't);\n3. avoid user choice (and hence user confusion); inline images should Just Work(tm).",
            "created_at": "2025-05-20T07:19:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893241135",
            "id": 2893241135,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sc1sv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893241135/reactions"
            },
            "updated_at": "2025-05-20T07:23:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893241135",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> * I don't think `nvim_img_del_placement` is required since that can also be achieved by `nvim_img_set_config` with `visible=false`?\n\nYou are right, the two partially overlaps in functionality, and we could get rid of one of them. But they do have two distinct use cases:\n1. Hiding by setting `visible = false` is for temporarily hiding, like an image that blinks, or is visible in certain situations. In this case it's convenient to have nvim track the configuration during the time it's hidden so that the plugin only needs the id. If only `nvim_img_del_placement` was supported, then the plugin needs to manually keep a copy of the config.\n2. Deleting by calling `nvim_img_del_placement` is when you don't need it anymore, say the same image is displayed in multiple places in a markdown file, so you can't delete the whole image, but you can delete one of the places where it's displayed. If only `visibile=false` was supported, then these kinds of applications might leak memory, unless they keep track of previously used placement ids and re-use them.\n\n> * What does `nvim_img_create_*` do differently from `nvim_img_load_*`?\n\n`nvim_img_load_`, loads the images from disk, while create takes a buffer to the data already loaded in memory. I guess the disk loading support could be removed completely, applications will most likely want to do it async anyway. The memory support is needed in a lot of applications, like downloading images from the net, or generated images, and also just when converting a jpg to RGB, and pass that to the api.\n\n> * Can we combine `png` and `raw` into one function (defaulting to `png`, and `raw` is an `opt`?)\n\nYes, that's a good idea. (**Edit:** Updated in the original message)",
            "created_at": "2025-05-20T08:04:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893359671",
            "id": 2893359671,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sdSo3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893359671/reactions"
            },
            "updated_at": "2025-05-20T13:23:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893359671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Regarding the providers. That's another thing I unfortunately noticed too late. But I don't think the current approach can be a permanent one. It's probably good for a first implementation though.\n\nFor a TUI, it really needs to be implemented in `tui.c`, especially if sixel and iterm2 are supported to avoid synchronization issues. But even for Kitty it needs to be in the same process as the actual terminal when you are connecting to a remote instance. Keeping it separate also allows using multiple providers at the same time, for example, the TUI could display the images in its way, and Neovide in another, but constrained to the rules of the API put up by this proposal.\n\nThe UI protocol is probably the most logical way to transfer the data to the right process.\n\n**Edit:** if this needs more discussion, it's probably wise to create a separate issue, or discuss it in the PR that adds it. To avoid overflooding this issue with different concerns as well.\n\n**Edit2:** I will open a new proposal for the UI protocol/provider part. This will also allow for registering lua based providers by attaching a new lua based UI, so that the existing providers in https://github.com/neovim/neovim/pull/31399 can be re-used as plugins for Sixel and Iterm2. And the Kitty provider can be adapted to that until it's moved to C.",
            "created_at": "2025-05-20T08:23:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2893417379",
            "id": 2893417379,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sdguj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893417379/reactions"
            },
            "updated_at": "2025-05-20T10:10:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893417379",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "There's one more subtle limitation, the images can't be properly positioned inside tmux, unless the kitty unicode placeholder protocol is used.  tmux would need its own image protocol implementation for that to work, which is something that as far as I have understood isn't something they want.\n\nThis makes me think that absolute positioning of images should not be supported, so only `relative = buffer` would be supported, and of course no option needed. It also makes `zindex` useless. Alternatively, it could be supported by creating unfocusable floating windows behind the scenes, but I'm not sure it's worth the effort.\n\nNote that it's still possible to position images by creating a floating window and place them inside a temporary buffer inside that, with the z-index is controlled by the window, so it's not a huge limitation. \n\nThe big drawback with this, is as far as I know, wezterm does not support unicode placeholders for the image protocol yet. But I'm sure the support can be created, especially if the demand through Neovim is high.\n\nThe other unfortunate drawback of this, is that it makes much of the work by @chipsenkbeil unnecessary, or in the need for rework.\n",
            "created_at": "2025-05-20T13:20:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894390749",
            "id": 2894390749,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6shOXd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894390749/reactions"
            },
            "updated_at": "2025-05-20T13:26:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894390749",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@fredizzimo I have tmux and images working across all three providers using pass through. Is there something else you're referring to? ",
            "created_at": "2025-05-20T13:48:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894486989",
            "id": 2894486989,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6shl3N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894486989/reactions"
            },
            "updated_at": "2025-05-20T13:48:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894486989",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I haven't tested it, but I believe that if you are using tmux splits, then the absolute coordinates will refer to the tmux window as a whole, not the relative coordinates inside the split. It might be fixed of course, I'm basing my comment on this https://sw.kovidgoyal.net/kitty/faq/#i-am-using-tmux-zellij-and-have-a-problem, and https://github.com/tmux/tmux/issues/1391#issuecomment-403267557 (I know that the pixel sizes have been added)",
            "created_at": "2025-05-20T13:56:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894513746",
            "id": 2894513746,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6shsZS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894513746/reactions"
            },
            "updated_at": "2025-05-20T13:56:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894513746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yes, for tmux and similar multiplexers you need to use both unicode placeholders and passthrough. A simple example will illustrate this. Suppose you have drawn an image at cell 1, 1. Now the user initiates a split in the multiplexer and moves the left window to the right. The image should now be at the co-ordinates 100, 1 (assuming the left window is 100 cells wide. However the multiplexer knows nothing about the image, so it cannot move it. As a result the image will remain at 1, 1, wrongly positioned. Thus, you need unicode placeholders. ",
            "created_at": "2025-05-20T14:05:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894559991",
            "id": 2894559991,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sh3r3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894559991/reactions"
            },
            "updated_at": "2025-05-20T14:05:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894559991",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1308621?v=4",
                "events_url": "https://api.github.com/users/kovidgoyal/events{/privacy}",
                "followers_url": "https://api.github.com/users/kovidgoyal/followers",
                "following_url": "https://api.github.com/users/kovidgoyal/following{/other_user}",
                "gists_url": "https://api.github.com/users/kovidgoyal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kovidgoyal",
                "id": 1308621,
                "login": "kovidgoyal",
                "node_id": "MDQ6VXNlcjEzMDg2MjE=",
                "organizations_url": "https://api.github.com/users/kovidgoyal/orgs",
                "received_events_url": "https://api.github.com/users/kovidgoyal/received_events",
                "repos_url": "https://api.github.com/users/kovidgoyal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kovidgoyal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kovidgoyal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kovidgoyal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yep, you guys are totally right, if you do a tmux split and have neovim on the right side, the image still follows as if it was on the left. So that is a limitation of absolute positioning.\n\n@fredizzimo @kovidgoyal @clason @justinmk @j4james @gpanders  I'll be honest, if this is the direction to go - and that's absolutely fine, by the way 😄  - I'll bow out of contributing and let another person take a stab.\n\nNothing any of you guys did wrong here, in fact I really appreciate all of your feedback and help. @kovidgoyal on kitty details and patience with my questions, likewise with @j4james on all of my sixel and terminal questions, and of course @fredizzimo for your perspective and detailed API design considerations.\n\nI think I just put in a bit more effort and enthusiasm into the PR than I thought, and needing to discard the majority of the work to start from scratch isn't something I want to invest time into. Hope you understand!",
            "created_at": "2025-05-20T14:32:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894656600",
            "id": 2894656600,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6siPRY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894656600/reactions"
            },
            "updated_at": "2025-05-20T14:32:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894656600",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@chipsenkbeil, I totally understand you! \n\nI feel a bit guilty though, I should have been able to bring up the issues earlier, before you started doing too much work, but I was concentrating too much on the Neovide side in addition to being quite busy during the last few weeks.\n\nHopefully some of the work you have done will still be usable in some form or another, so that it doesn't go completely to waste.\n\nFor now, I think it's important that we iterate the API until we all think it's right before we do any implementation work. That's what should have been done before the initial implementation as well (and for some of my rejected Neovim contributions as well).\n\nI will continue to drive those discussions further, and I think I can also make a draft PR based on that.  I also think one worthwhile exercise would be to try to port the snaps image to the new API, to verify that it actually works in practice. I'm not yet sure about bringing it to a mergeable status, since that might require a lot of effort, and I also have other things to do. But let's see how much work there actually is to do, since the new API scope gets quite limited, most of the work might be with getting the documentation right.",
            "created_at": "2025-05-20T15:00:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894752438",
            "id": 2894752438,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6simq2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894752438/reactions"
            },
            "updated_at": "2025-05-20T15:00:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894752438",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I feel a bit guilty though, I should have been able to bring up the issues earlier, before you started doing too much work, but I was concentrating too much on the Neovide side in addition to being quite busy during the last few weeks.\n\nThese things happen, and I don't harbor any ill will towards you or the other folks for challenging and pushing. Still excited to see this manifest in whatever form it takes, and if my PR spurred on the conversation to the point where something gets built, then great. 😄 \n\n@justinmk originally encouraged #31399 and I haven't heard from him since prior to the Cambrian explosion of features 😛, so @clason should I just close the PR out at this point? Or do you and the neovim team want more voices first before I do that? ",
            "created_at": "2025-05-20T15:05:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894772235",
            "id": 2894772235,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sirgL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894772235/reactions"
            },
            "updated_at": "2025-05-20T15:05:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894772235",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Speaking for myself, I've found the pace of the discussion difficult to keep up with. It's exceeded my personal bandwidth. I think that is generally speaking true for all of the core maintainers, at least right now. We are the bottleneck.\n\nHow much, if any, of this can be prototyped in a plugin? The design space here is huge, and experimenting in a plugin first will help narrow that down (and also eliminates the maintainer bottleneck).\n\nIf doing this in a plugin is impossible, can we identify what core primitives are missing and have separate, focused, _well-scoped_ discussions about those primitives? This too will reduce the maintainer bandwidth needed to move forward.",
            "created_at": "2025-05-20T15:13:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894797994",
            "id": 2894797994,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sixyq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894797994/reactions"
            },
            "updated_at": "2025-05-20T15:13:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894797994",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We still very much want that feature, and I'm sure a large part of the implementation is salvageable even with the reduced scope (and API surface).\n\nJustin can be very busy (and thus effectively offline) for weeks at a time, so I wouldn't read anything into it. I am fairly certain that we don't want to merge the PR in its current form, but I think it'd be useful to keep around to look at implementation details. So let me do the following:\n\n1. Mark your PR as draft and add a disclaimer on it that it is parked pending discussions (and possibly lock it temporarily, so discussions are focused in the right place, which is an API design issue).\n2. As this issue is already gathering a lot of comments, quickly, maybe it's better to give a fresh start for that as well. So let me lock this issue as well for a bit to \"cool off\".\n3. May I suggest you two @chipsenkbeil @fredizzimo iterate on a design in a private repo (as @gpanders suggested) -- either as a design document (documentation only), interface stubs, or POC plugin? I think you both have a good feeling for the constraints we have for core now (MVP, only one terminal protocol, core primitives over monolithic \"convenience interface\"). Feel free to ping us on Matrix if you want the repo linked here or elsewhere when you are ready for outside input.",
            "created_at": "2025-05-20T15:18:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894826119",
            "id": 2894826119,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6si4qH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894826119/reactions"
            },
            "updated_at": "2025-05-22T08:01:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894826119",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@gpanders, I suggested a plugin here already https://github.com/neovim/neovim/pull/31399#issuecomment-2701255114\n\nAt that point, it seemed feasible to me. But now I'm not sure\n\nThe API as discussed here could be a plugin. But the integration with the UI protocol which is my following proposal would need to be in the core.  \n\n@clason \nI would like to keep discussing both proposals with the maintainers in issues here, to have the API at least roughly locked down before doing any implementation. And I think the proposal here is good enough already to be discussed without requiring too much bandwidth, once we get into the mode of actually discussing it. I addressed one of @clason's comments, with the other two waiting for answer here https://github.com/neovim/neovim/issues/34093#issuecomment-2893359671. And just deleted the support for absolute placement.\n\nBut maybe it's still worth to open a new issue, just to get rid of all this extra discussion unrelated to the design itself? \n\n",
            "created_at": "2025-05-20T15:35:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894897695",
            "id": 2894897695,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sjKIf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894897695/reactions"
            },
            "updated_at": "2025-05-22T07:58:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894897695",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That said, if the API here looks roughly OK, and my follow up UI protocol proposal also looks good, I can start making an implementation and battle test it by modifying snacks.nvim to call that instead of its own wrappers.\n\nActually, maybe the detailed UI protocol design is not needed, that's where more experimentation is needed anyway. The basic idea is that there's a new UI extension, which `tui.c` and UIs react to. And raw image and control data is transferred over this. And the tui code is the one that sends the actual control codes to kitty.\n\nThe image placeholder itself is just an extmark with the virtual text containing the placeholder data.",
            "created_at": "2025-05-20T15:52:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894994519",
            "id": 2894994519,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sjhxX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894994519/reactions"
            },
            "updated_at": "2025-05-20T15:52:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894994519",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@fredizzimo That's why I wrote \"design document\" or \"API stub\" rather than \"full implementation\". The problem is exactly that none of the maintainers currently has the bandwidth to give input, so I worry that an issue here would languish in the same way before taking on a life of its own. We certainly don't have the bandwidth to discuss _two_ proposals in parallel.\n\nSo let me propose the following compromise:\n1. I will close this issue.\n2. (optional) If you and @chipsenkbeil want, you can discuss offline (you're both on Matrix, I believe) how to combine the best features (from your point of view) under the stated constraints (no terminal protocol beside kitty -- which I recall was already a hard decision from maintainers on the original PR! -- no user configuration, and keeping the API surface as minimal as possible).\n3. You open a new issue with a proposed API design (take your time!). Be specific on how the API is used and keep implementation details for followup questions.\n4. I will lock that issue so maintainers can take their time studying it and giving feedback (after which they'll unlock it).",
            "created_at": "2025-05-20T15:52:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2894995738",
            "id": 2894995738,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sjiEa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894995738/reactions"
            },
            "updated_at": "2025-05-22T07:59:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2894995738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It sounds like you need something fairly complete and finished to review, so I guess I go with my plan from my previous message to validate the API through snacks, with just a prototype implementation not caring too much about code quality. I hope that should be quick enough for me to do.\n\nAfter that I can send either a draft PR or a design document.\n\nMeanwhile, you can still review what's put up here if you have time.\n\n@chipsenkbeil, if you want to contribute, or otherwise discuss, please contact me.",
            "created_at": "2025-05-20T16:10:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2895062843",
            "id": 2895062843,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sjyc7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2895062843/reactions"
            },
            "updated_at": "2025-05-22T07:59:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2895062843",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It sounds like you need something fairly complete and finished to review\n\nNo, that is _not_ what I'm saying -- in fact, it's the opposite: At this point, we(!) care mostly about how the API looks, because that is what we will have to maintain for a long time due to API stability. Implementation is secondary since that can always be fixed/improved/changed later on.\n\nIt need not be more detailed than what you have now; it should just not be a moving target for us to read, and cover all the bases that are important to you.",
            "created_at": "2025-05-20T16:17:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2895084165",
            "id": 2895084165,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6sj3qF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2895084165/reactions"
            },
            "updated_at": "2025-05-22T07:59:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2895084165",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "In that case I will just let it sit for a couple of days and open a new issue, perhaps with a little bit of extra details about the actual API and usage, like actual documentation, but fully targeting only the kitty protocol and UIs that time, so those parts can be removed to make it shorter. \n\nThere are no moving targets from my side. My provider comment was about implementation details.  And I stumbled upon the tmux limitation when thinking about the implementation of the UI protocol by pure co-incidence. And that had the implication that the absolute positioning had to be removed, or at least hard to support, making the design simpler. That was something I actually suggested before, but kept here in the initial design, because I wanted to keep some of the work by @chipsenkbeil",
            "created_at": "2025-05-20T16:53:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2895195278",
            "id": 2895195278,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6skSyO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2895195278/reactions"
            },
            "updated_at": "2025-05-22T08:01:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2895195278",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk heads up that you're reviewing #31399 and I can't reply to any of your comments with the locked status. I'm not sure what the intention is now in terms of cleaning up that PR to resolve your comments, or if you had seen the recent discussion here?",
            "created_at": "2025-05-21T10:20:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2897420150",
            "id": 2897420150,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6ssx92",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2897420150/reactions"
            },
            "updated_at": "2025-05-22T07:59:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2897420150",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm not sure what the intention is now in terms of cleaning up that PR to resolve your comments, or if you had seen the recent discussion here?\n\ni unlocked it. i saw \"recent discussion\". what is unclear ?\n\n> needing to discard the majority of the work to start from scratch isn't something I want to invest time into.\n\nmy request is to revert some parts of the PR. the reverted parts can be in a followup PR.\n\nthe first goal is to get a simple interface available that does useful things, without exposing unnecessary surface area like \"imagemagick info\".",
            "created_at": "2025-05-21T14:20:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2898151934",
            "id": 2898151934,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6svkn-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2898151934/reactions"
            },
            "updated_at": "2025-05-22T08:00:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2898151934",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk \n\n> i unlocked it. i saw \"recent discussion\". what is unclear ?\n\nThe problem is that the design here (if approved) replaces https://github.com/neovim/neovim/pull/31399, only keeping parts of it (from the implementation, not API). \n\nThe reason for this is stated in the original message, the biggest one being that pixel based positioning isn't supported on any terminal, which forces ImageMagick and similar usage just to make it work. It also exposes providers to the interface, runs in the server rather than in the TUI process. Finally, one additional problem was found later by me almost by accident, the absolute positioning support, which the PR adds can't be supported in tmux, therefore it's better to implement the placeholder/extmark approach directly, which is supported, and the approach that is actually useful for markdown documents with scrolling.",
            "created_at": "2025-05-21T14:36:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2898202603",
            "id": 2898202603,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6svw_r",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2898202603/reactions"
            },
            "updated_at": "2025-05-22T08:12:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2898202603",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk I can make all of the changes you mentioned, what's unclear to me is the direction of image support in neovim: are we supporting absolute positioning (what my PR does), or only embedding images within a buffer (which was step 2 for me)?\n\nIf we are discarding the absolute positioning work - hence removing my PRs contributions where I'd need to start nearly from scratch - then I'll take a back seat. Once again, not out of ill intent perceived (of all of you have been patient, friendly, and collaborative!), just not wanting to invest the time to make a brand new PR instead of revising what I have.\n\nPersonally, I don't think the limitation of tmux should be the driving factor, but that's a discussion for maintainers on what they want neovim to support.\n\n### Open Items\n\nNone of these open items would prevent me from making changes to the PR itself, so figured I'd run through them.\n\n1. Removing and/or splitting out which providers are included in the PR. Feedback from @clason and @gpanders was that the PR got too big, and that's totally my fault. I didn't realize that was the reason I wasn't getting feedback from folks here. Regardless, the way it's designed, I could remove the `iterm2.lua` and `sixel.lua` files from the PR and you'd just have kitty working without issue.\n2. Adapting to @fredizzimo 's API suggestions here. To be honest, I prefer my design compared to the one that is proposed here; however, nothing from what has been proposed I couldn't adapt my work to fill. The main thing I'd suggest is that we provide callbacks in the opts for showing, hiding, and updating images so users have the ability to know when something is has completed. That was a big part of how I designed, and was important to the providers to be async.\n3. Removing ImageMagick support isn't an issue if we are removing the `sixel` provider. Additionally, for `iterm2` provider, it only needs ImageMagick for cropping, so if we removed that feature then it could still be a PR on its own without introducing that dependency. Here's a table that breaks down their needs.\n    | Provider         | Show PNG     | Show non-PNG | Resize Image | Crop Image | Track in buffer | Supports tmux split |\n    | ------------- | ------------- |----------------|-------------|------------------|---|---|\n    | Kitty               | ✅                    | ❌ (needs `magick`)                     | ✅ | ✅                  | ✅  | ⚠️ (unicode placeholder only) |\n    | Sixel               | ❌ (needs `magick`)                   | ❌  (needs `magick`)                    | ❌ (needs `magick`) | ❌ (needs `magick`)                 |  ⚠️ (needs `crop`) | ❌ |\n    | iterm2            | ✅                    | ✅                     | ✅  |  ❌  (needs `magick`)               | ⚠️ (needs `crop`) | ❌ |\n4. If we want to remove or hard-code the `unit` aspect of `Size`, `Position` and `Region`, it's trivial to do. Position of images across all providers was using `cell`. Size for all providers was also using `cell`. The region was using `pixel` for cropping. We could remove cropping as an option per @fredizzimo because it would be an internal-only feature, anyway.\n\nI don't know if @clason or @gpanders or @fredizzimo had a chance to actually look at the design or code itself given the size of it now. Definitely check out the revised PR comment at the top (a bit of pride in the writeup there :smile:) when you have time, if it isn't too much trouble!\n\nI actually started with `id` being passed around at an API level and found in practice from testing and using it that I was getting confused regarding which `id` I had - image (the data) or placement (the visual representation on screen) - and also needed to operate on the placements enough to the point that it felt more natural in the OO way, but that is also a preference. I was inspired a bit by `vim.system()`'s returned object.",
            "created_at": "2025-05-21T15:40:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2898419333",
            "id": 2898419333,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6swl6F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2898419333/reactions"
            },
            "updated_at": "2025-05-21T15:50:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2898419333",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Not that it matters if you're planning to drop sixel support, but just for the record, multiplexers like tmux and zellij handle sixel natively, so you don't need passthrough, and absolute positioning should work automatically in a split pane.",
            "created_at": "2025-05-21T22:08:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2899366742",
            "id": 2899366742,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6s0NNW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2899366742/reactions"
            },
            "updated_at": "2025-05-21T22:08:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2899366742",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
                "events_url": "https://api.github.com/users/j4james/events{/privacy}",
                "followers_url": "https://api.github.com/users/j4james/followers",
                "following_url": "https://api.github.com/users/j4james/following{/other_user}",
                "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/j4james",
                "id": 4181424,
                "login": "j4james",
                "node_id": "MDQ6VXNlcjQxODE0MjQ=",
                "organizations_url": "https://api.github.com/users/j4james/orgs",
                "received_events_url": "https://api.github.com/users/j4james/received_events",
                "repos_url": "https://api.github.com/users/j4james/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/j4james",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "NOTE: If the following sounds too negative, it's not my intention at all, I would be very happy, if we could adapt the existing work, so that the huge effort @chipsenkbeil has done doesn't go to waste. But at the same time, we have to make sure that everything works in the real world and supports practical use cases and that we follow the Neovim track record of having a stable API from release to release.\n\n> Personally, I don't think the limitation of tmux should be the driving factor, but that's a discussion for maintainers on what they want neovim to support.\n\nThere's also the question, if the absolute positioning has any practical usage, at least I have a bit hard time seeing it. But I haven't mentioned it earlier, since that's what you started with and probably have some use cases in mind. I can vaguely see something that follows the cursor or mouse pointer useful, but the same can be done by creating a floating window that follows, with the image in a buffer. For me the main problem is that the image will either have to be behind *all* text, or in front of *all* text, disregarding Neovims floating window order. Even if clipping is exposed, it won't be that useful, since it only supports square regions. Some tricks could be possible by interleaving text and image drawing, if the TUI supported mutligrid, but currently it doesn't.\n\n> The main thing I'd suggest is that we provide callbacks in the opts for showing, hiding, and updating images so users have the ability to know when something is has completed. That was a big part of how I designed, and was important to the providers to be async.\n\nCorrect me if I'm wrong, but I don't see why the API would need to be async, and previous versions, including the version from the 12th, which I have been integrating into Neovide are not. It just complicates the usage for no good reason. There are no responses that we need to wait for, in fact when using the kitty protocol through tmux it's not possible to get any feedback at all. And even when relying on responses the kitty protocol is designed to not have to wait for anything https://sw.kovidgoyal.net/kitty/graphics-protocol/#requesting-image-ids-from-the-terminal\n\nThe providers themselves should be asynchronous though, but from the perspective of the API, that's completely transparent as long as all calls are processed in order and the screen state eventually updates consistently.\n\nActual file loading should probably be asynchronous, but based on @clason's feedback, I'm actually planning to remove the responsibility for that completely from the API proposal here, so that it's up to the user/plugin to load or generate the data. Realistically speaking, a plugin will support more than png images and probably also loading from internet, so it will need to convert anyway",
            "created_at": "2025-05-21T22:39:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2899425455",
            "id": 2899425455,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6s0biv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2899425455/reactions"
            },
            "updated_at": "2025-05-22T08:23:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2899425455",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@j4james\n\n> Not that it matters if you're planning to drop sixel support, but just for the record, multiplexers like tmux and zellij handle sixel natively, so you don't need passthrough, and absolute positioning should work automatically in a split pane.\n\nI wouldn't rule out sixel support from future implementations. It should be possible to write a generator that converts the unicode placeholders of the kitty protocol into sixel data without the support of imagemagic. It only really need to do sampling and writing the output from raw pixel data. I'm sure many people would take that as a challenge to write an avx optimized algorithm (assuming that we move the actual terminal implementation to C, like I was going to suggest in my follow up proposal)\n\nThings get a lot more feasible when operating in the fully composed screen with the info of exaxtly which image cells are visible, updated and scrolled.",
            "created_at": "2025-05-21T23:22:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2899487099",
            "id": 2899487099,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6s0ql7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2899487099/reactions"
            },
            "updated_at": "2025-05-22T08:23:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2899487099",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\n\n> the biggest one being that pixel based positioning isn't supported on any terminal, which forces ImageMagick and similar usage just to make it work.\n\nNothing in the initial interface requires ImageMagick. Where did the pixel-based requirement come from? I have consistently said that the initial impl can support row/column positions, while keeping the door open for \"42px\" units in the future.\n\n> It also exposes providers to the interface\n\nProviders can be internal-only, they should not be exposed in the initial impl.\n\n> absolute positioning support, which the PR adds can't be supported in tmux, therefore it's better to implement the placeholder/extmark approach directly,\n\nThese things are 2-way doors. \n\nEveryone, please focus ONLY on things that MUST be decided NOW. \"tmux doesnt do...\" doesn't matter at all. If a UI can't support absolute positioning, we just document that. The door is still open for relative positioning. It doesn't mean we need to solve both NOW.\n\n> what's unclear to me is the direction of image support in neovim: are we supporting absolute positioning (what my PR does), or only embedding images within a buffer (which was step 2 for me)?\n\nWe can start with abs positioning. It is a 2-way door.\n\nPlease, no more \"this won't work here or there...\" for ANYTHING that is a two-way door.\n\n> If we want to remove or hard-code the unit aspect of Size, Position and Region, it's trivial to do.\n\nDon't want to hardcode. Rather, start with the simplest thing, and keep the door OPEN for other units in the future. This probably just means that `number` positions are assumed to be row/column, and we can add `string` or `table` positions for other units in the future. Extremely simple.\n\n> Correct me if I'm wrong, but I don't see why the API would need to be async\n\nAgreed. @chipsenkbeil the usual pattern is that we start with a sync interface, and we always have the option of adding a callback parameter in the future. The lack of the callback parameter means \"sync\"; the presence of the callback means \"async\". This is how luv/libuv works, and `:help LanguageTree:parse()`, etc. And we eventually will add a nice wrapper around this pattern when we have `vim.async`.\n\nSo that might eliminate the \"promise\" module in the current PR.\n\nRegarding the `nvim_img_*` api: if UI events are needed, then a formalized `nvim_img_*` API may be needed (to trigger the UI events). But it doesn't block the first iteration of @chipsenkbeil's PR. \n\n> The basic idea is that there's a new UI extension, which `tui.c` and UIs react to. And raw image and control data is transferred over this. And the tui code is the one that sends the actual control codes to kitty.\n\nDoing stuff in C can be avoided. Lua can write to UIs (and we can make that more ergonomic if needed). If needed, `tui.c` can delegate to Lua.",
            "created_at": "2025-05-22T08:26:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2900351333",
            "id": 2900351333,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6s39ll",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2900351333/reactions"
            },
            "updated_at": "2025-05-22T08:31:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2900351333",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "## Resolution\n\nThe `nvim_img_*` api might be needed, but the rest of the discussion here is outdated. And I think the UI events need to be figured out first, before any `nvim_img_*` API is added.\n\nMeanwhile, the first-pass `vim.ui.img` impl isn't blocked by that. It might not work in every platform, but that doesn't matter. What matters is its interface. For full \"platform\" support, we will need UI events, but those will come later.",
            "created_at": "2025-05-22T08:36:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2900376143",
            "id": 2900376143,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6s4DpP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2900376143/reactions"
            },
            "updated_at": "2025-05-22T08:36:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2900376143",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "First of all, my aim here was to simplify the API to a common dominator that we *know* can be supported and implemented. Instead of ending up in a situation where one terminal supports feature x and another feature y, where the features not necessarily even intersect with each other. The discussion and the code in https://github.com/neovim/neovim/pull/31399, was very valuable here, because it helped us find these constraints.\n\n> > the biggest one being that pixel based positioning isn't supported on any terminal, which forces ImageMagick and similar usage just to make it work.\n> \n> Nothing in the initial interface requires ImageMagick. Where did the pixel-based requirement come from? I have consistently said that the initial impl can support row/column positions, while keeping the door open for \"42px\" units in the future.\n\nIt does require pixels. The crop parameter was always specified in pixels, since it's specifying the area of the source image that is mapped to the cells. But you are right it does not need ImageMagick for the Kitty provider if pixel positioning and sizing is not supported.\n\nNow, it could be changed to support columns, but that adds extra complexity. The user has to specify the image full width and height in columns, the start column and row (the end can be inferred from the destination) of the source image, and the destination area. \n\nThe provider then need to convert that into pixels, using the actual cell and image geometry and same fitting algorithm as the Kitty protocol internally does.\n\nIn my proposal here in this issue no cropping is needed, you simply place the image where you want it specifying the area you want and areas outside the window will automatically be cropped. The kitty protocol itself takes care of the cropping and calculating of the geometry. \n\nPixel support was also brought up because for a long time we thought that Kitty supports it to a decent degree. But that turned out to not be the case, so I don't think we should even attempt to support it. I also wanted to keep the door open for it, because for Neovide that would have been interesting. \n\nI'm not shutting down the option here, my API is extensible enough to add it later. I just don't want to expose it as a possibility in the API right now, when we know that it doesn't work.\n\n> \n> > It also exposes providers to the interface\n> \n> Providers can be internal-only, they should not be exposed in the initial impl.\n> \n> > absolute positioning support, which the PR adds can't be supported in tmux, therefore it's better to implement the placeholder/extmark approach directly,\n> \n> These things are 2-way doors.\n> \n> Everyone, please focus ONLY on things that MUST be decided NOW. \"tmux doesnt do...\" doesn't matter at all. If a UI can't support absolute positioning, we just document that. The door is still open for relative positioning. It doesn't mean we need to solve both NOW.\n> \n> > what's unclear to me is the direction of image support in neovim: are we supporting absolute positioning (what my PR does), or only embedding images within a buffer (which was step 2 for me)?\n> \n> We can start with abs positioning. It is a 2-way door.\n> \n\nIt's not really a 2-way door, absolute positioning can't support everything the inline positioning can. The other way everything is supported as far as I know. Therefore, why concentrate on the former first, other than that's what happened to be implemented? For example, the following is not supported (a floating window with borders with an image on top of an image in the base buffer. The reason for that is that Kitty images with absolute positions either have to be on top of all text or below it, and it only support square regions. For Neovide, this would be a smaller issue, since we are using multigrid, and could re-define what the z-indices mean, and make the same as the Neovim ones. Some additional parameter could be added to tell if it's below the background, above the background, or above the text in the z-index. And a third parameter to clip the image to the containing window.\n\n![Image](https://github.com/user-attachments/assets/0d5a5ddd-3560-45e8-b94e-f0de329c5052)\n\nBut sure, we could implement absolute positions now to get something working. And then replace it to use inline images in order to not have to maintain two systems and support cases like that even with absolute positioning. Then we'd keep the more bloated interface. In my API proposal the plan is to put that burden to create floating windows on the few plugins that actually needs it, since they know the best what makes sense. If they are building a user interface, they probably have a window anyway, and markdown rendering and such have no use for absolute positioning.\n\n> Please, no more \"this won't work here or there...\" for ANYTHING that is a two-way door.\n\nIf you prefer to have an API that we know won't work in many common cases, that's fine. But my goal has been to find a minimal API that we know we can support and keep extensible it in the future when there is better terminal support, or someone comes up with clever workarounds.\n\n> \n> > If we want to remove or hard-code the unit aspect of Size, Position and Region, it's trivial to do.\n> \n> Don't want to hardcode. Rather, start with the simplest thing, and keep the door OPEN for other units in the future. This probably just means that `number` positions are assumed to be row/column, and we can add `string` or `table` positions for other units in the future. Extremely simple.\n\n\n> > The basic idea is that there's a new UI extension, which `tui.c` and UIs react to. And raw image and control data is transferred over this. And the tui code is the one that sends the actual control codes to kitty.\n> \n> Doing stuff in C can be avoided. Lua can write to UIs (and we can make that more ergonomic if needed). If needed, `tui.c` can delegate to Lua.\n\nMy point here was not about C vs LUA, but actually running the terminal I/O in the right process, right now it runs on the server nvim instance, so with remote connections it doesn't work at all, and has no chance of working if multiple terminals are attached to the same instance. The current implementation also has a huge chance of having race conditions, since it's in no way synchronized with the writes by `tui.c`, for example both could move the cursor at the same time. \n\n",
            "created_at": "2025-05-22T10:13:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2900665038",
            "id": 2900665038,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6s5KLO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2900665038/reactions"
            },
            "updated_at": "2025-05-22T10:13:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2900665038",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But sure, we could implement absolute positions now to get something working. And then replace it to use inline images in order to not have to maintain two systems and support cases like that even with absolute positioning. \n\nAbsolute positioning will always be useful. I think more targets will eventually support it. It doesn't require \"bloat\" to support both absolute and relative, because these are standard concepts.\n\n> My point here was not about C vs LUA, but actually running the terminal I/O in the right process\n\nThat will require UI events, which can come later.\n\nLet's start with a small thing that actually does something useful. If the interface is small, we don't need to worry about \"bloat\" and numerous edge cases. And we can *delete* and refactor the initial implementation. That is better than endlessly discussing stuff, to the point where it's hard to understand the scope.",
            "created_at": "2025-05-22T10:25:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/34093#issuecomment-2900698226",
            "id": 2900698226,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34093",
            "node_id": "IC_kwDOAPphoM6s5SRy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2900698226/reactions"
            },
            "updated_at": "2025-05-22T10:26:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2900698226",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 37,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34093/comments",
    "created_at": "2025-05-19T23:06:25Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34093/events",
    "html_url": "https://github.com/neovim/neovim/issues/34093",
    "id": 3075199332,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "issue needs attention from an expert, or PR proposes significant changes to architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "graphics, image display",
            "id": 8052232450,
            "name": "image",
            "node_id": "LA_kwDOAPphoM8AAAAB3_NRAg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/image"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34093/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM63S9Fk",
    "number": 34093,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34093/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34093/timeline",
    "title": "Design proposal of grid based image API",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-05-22T10:26:29Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34093",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
        "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
        "followers_url": "https://api.github.com/users/fredizzimo/followers",
        "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
        "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fredizzimo",
        "id": 9946255,
        "login": "fredizzimo",
        "node_id": "MDQ6VXNlcjk5NDYyNTU=",
        "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
        "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
        "repos_url": "https://api.github.com/users/fredizzimo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fredizzimo",
        "user_view_type": "public"
    }
}