{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nSome LSP request responses need to be retained after processing the results, such as:\n\n- `textDocument/foldingRange` needs to retain state for closing a specific `foldingRangeKind`. For neovim, folding information must be cached.\n- `textDocument/inlayHint` and `textDocument/codeLens` require maintaining state for subsequent requests like `resolve`.\n- `textDocument/documentHighlight` could retain state to enable forward/backward navigation.\n\n### Expected behavior\n\nImplement an internal-only module dedicated to handling these stateful data, by:\n\n- Creating `bufstate` and corresponding callback functions when a buffer has a client that supports the relevant methods.\n- Destroying `bufstate` and corresponding callback functions when no clients in the buffer support the relevant methods.\n\nUse this module for the methods mentioned above to avoid relying on nil-checks (which might mask bugs) and automatically creating tables via metatable methods (which can be difficult to debug).\n\nThe `bufstate` should only contain results directly obtained from the server (e.g., `lsp.foldingRange[]`, `lsp.InlayHint[]`) and derived information (e.g.,  computed caches or whether they are applied). It should not store user-managed settings (e.g., `enabled`).",
    "closed_at": "2025-07-07T03:51:31Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "If this is considered a viable strategy, I would like to convert this issue into a tracking issue and proceed with refactoring related functionalities, starting with `lsp/_folding_range.lua`, then `lsp/codelens.lua`, finally `lsp/inlay_hint.lua`.",
            "created_at": "2024-12-05T03:57:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/31453#issuecomment-2519035316",
            "id": 2519035316,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31453",
            "node_id": "IC_kwDOAPphoM6WJW20",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2519035316/reactions"
            },
            "updated_at": "2024-12-05T03:57:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2519035316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Will be helpful to to existing code that will be replaced/lifted into this architecture.\n\n> Use this module for the methods mentioned above to avoid relying on nil-checks (which might mask bugs) and automatically creating tables via metatable methods (which can be difficult to debug).\n\nSounds like a benefit. What are the costs, i.e. why wouldn't we do this?\n\np.s. is https://github.com/neovim/neovim/issues/31454 related?",
            "created_at": "2024-12-05T12:31:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/31453#issuecomment-2520194382",
            "id": 2520194382,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31453",
            "node_id": "IC_kwDOAPphoM6WNx1O",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2520194382/reactions"
            },
            "updated_at": "2024-12-05T12:31:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2520194382",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> What are the costs, i.e. why wouldn't we do this?\n\nMy concern is the risk of regression of already stable and usable features, as refactoring involves some rewriting of the code. My familiarity with the code is not as high as that of the maintainers, so I am unsure if I have enough experience to address this issue, but I am willing to try it myself if others do not. Therefore, the roadmap I currently have is relatively low-risk:\n\n1. Refine the state management part in `_folding_range.lua` and extract state management into a separate module/function.\n2. Change the API of `codelens.lua` to be similar to `inlay_hint.lua`, that is, `vim.lsp.codelens.enable()`.\n\nI was already very interested in the goals above before my recent PRs, but it seems that they are currently blocked by the state management strategy. The priority for refactoring `inlay_hint.lua` is not high, as it should currently be a relatively stable API, and there is no compelling reason to refactor it at this time.\n\n> p.s. is https://github.com/neovim/neovim/issues/31454 related?\n\nI hadn't looked at `vim.lsp.diagnostic` in detail before, but it seems to be quite relevant. Interestingly, I mentioned in the chat that I experienced significant lag when modifying `vim.lsp.buf`, which seems to be the reason described in this issue. I can explore further, and if it is indeed related, I can solve them together.",
            "created_at": "2024-12-05T15:59:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/31453#issuecomment-2520732316",
            "id": 2520732316,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31453",
            "node_id": "IC_kwDOAPphoM6WP1Kc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2520732316/reactions"
            },
            "updated_at": "2024-12-05T16:08:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2520732316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Would it be bad to keep folding data in a more generalized place (such that it is not specific to LSP folds)? I dream of a way in the future to set something like \n\n```scm\n((import_statement)+ @fold \n  (#set! foldkind.imports))\n```\n\nusing tree-sitter queries, and then users can just set some simple config option to auto-fold imports which will work regardless of whether a certain filetype is using TS or LSP folding\n\nI assume this is relevant because the current LSP way does this by iterating through the LSP's own cache of folds, checking fold type (and TS has its own separate fold cache)",
            "created_at": "2024-12-08T17:25:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/31453#issuecomment-2526272977",
            "id": 2526272977,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31453",
            "node_id": "IC_kwDOAPphoM6Wk93R",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526272977/reactions"
            },
            "updated_at": "2024-12-08T17:27:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526272977",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think mixing folding for both LSP and treesitter would be way too complex, and thus out of scope, unless there is a strong argument. These are just different backends",
            "created_at": "2024-12-08T18:54:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/31453#issuecomment-2526327027",
            "id": 2526327027,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31453",
            "node_id": "IC_kwDOAPphoM6WlLDz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526327027/reactions"
            },
            "updated_at": "2024-12-08T18:54:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526327027",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Would it be bad to keep folding data in a more generalized place (such that it is not specific to LSP folds)? I dream of a way in the future to set something like\n\nMy personal recommendation is to implement a server with a backend based on tree-sitter, providing folding data through LSP (after all, it is an interface). I should have implemented basic support for multiple servers. This may not be closely related to the scope of this issue. I mainly want to find a reliable way to save the result of the LSP response (not only folding ranges but also inlay hints or code lenses) instead of handling it and immediately discarding it here.",
            "created_at": "2024-12-09T05:35:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/31453#issuecomment-2526975033",
            "id": 2526975033,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31453",
            "node_id": "IC_kwDOAPphoM6WnpQ5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526975033/reactions"
            },
            "updated_at": "2024-12-09T05:35:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526975033",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Among all the implemented features that require state management (including semantic highlighting, diagnostics, inlay hints, and folding range), the model we use is that buffer data has client data to facilitate garbage collection when the buffer is deleted.\n\nHowever, https://github.com/neovim/neovim/issues/32247 indicates that there may be some client data in LSP that needs to persist even after the buffer is deleted. This makes me a bit worried about thoroughly addressing this issue based on the current model.\n\nFortunately, the issue reported in the above issue seems to be a flaw of LSP itself. I suspect it may be due to the fact that vscode's OOP model manages data primarily through the client class, which may lead them to adopt a strategy where client data owns buffer data. This ambiguous and flawed definition in LSP is very likely something they added as a private addition to directly describe vscode's erroneous behavior.\n\nLeave this comment as a reminder.",
            "created_at": "2025-03-14T07:34:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/31453#issuecomment-2723868118",
            "id": 2723868118,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31453",
            "node_id": "IC_kwDOAPphoM6iWu3W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2723868118/reactions"
            },
            "updated_at": "2025-03-14T07:34:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2723868118",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Copying comment from https://github.com/neovim/neovim/discussions/34254#discussioncomment-13356500 : \n\n> introduce an internal module (or modify `lsp/client.lua`) that enables each LSP client to store independent buffer-level data. The key challenge is ensuring proper cleanup when a client detaches or a buffer is deleted, to prevent memory leaks.\n\nThe main goal is to find *something* that can be shared amongst all the existing use-cases in the lsp modules. Initially, it will just be a frankenstein in `runtime/lua/vim/lsp/util.lua` or `_util.lua` , and internal-only. This initial step will tell us whether it can be further generalized. Then we can refine the interface.\n\nGoing a bit further, it's worth seeing if https://github.com/neovim/neovim/issues/12544#issuecomment-1116794687 could be useful here, and maybe we want to implement that in this gsoc project.\n\nWe want:\n\n- the \"key\" for stored items is caller-defined. some callers may want to key on namespace+bufnr, others may need something else?\n- cleanup on buf-delete and other events (as you mentioned)\n- no memory leaks; Lua \"weak table\" may be useful.\n- visibility (so :checkhealth can print something like `1031 items in lsp cache`)\n",
            "created_at": "2025-06-03T14:11:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/31453#issuecomment-2935466244",
            "id": 2935466244,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31453",
            "node_id": "IC_kwDOAPphoM6u96kE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2935466244/reactions"
            },
            "updated_at": "2025-06-03T14:11:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2935466244",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I wonder if OOP(specifically, using abstract classes and inheritance) is a viable option. `:h dev-lua` indicates that elaborate OOP design should be avoided.\n\nThe benefits of using OOP are as follows:\n\n- Code can be shared through abstract classes and inheritance while keeping flexibility by overriding, or at least, interfaces can be clearly defined. Wherever `bufstate` is used, there is boilerplate code.\n- A general benefit of OOP design is to solve the problem of inconsistent state. In our case, I mean all functions that use `bufstate` should be methods of the `bufstate`(or other name, like `FeatureProvider`) object so that we can avoid nil-checks. This can prevent data from being inconsistent with expectations.\n- We currently have a fairly successful example in `lsp/semantic_tokens.lua`, which is an OOP implementation managing its own \"`bufstate`\" (`STHighlighter`).\n\nMy rough idea at the moment is to convert these places using `bufstate` into an OOP design, similar to `vim.lsp.semantic_tokens`, and extract reusable parts as an abstract class to reuse code. Moreover, the existence of a unified parent class might share implementation for the following missing feature:\n\n- `partialResultParams`\n- `dynamicRegistration`\n-  >visibility (so :checkhealth can print something like `1031 items in lsp cache`)\n\n   This can also be done, just like printing active clients by `:checkhealth vim.lsp`(`client.lua` is also based on OOP design).\n\n\n",
            "created_at": "2025-06-03T15:26:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/31453#issuecomment-2935964811",
            "id": 2935964811,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31453",
            "node_id": "IC_kwDOAPphoM6u_0SL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2935964811/reactions"
            },
            "updated_at": "2025-06-04T01:13:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2935964811",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We can try that. Primary goal is to find some sort of pattern that can be shared. OOP usually isn't necessary since behavior and state can be shared in other ways, but it's not a blocker in this phase.",
            "created_at": "2025-06-04T16:22:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/31453#issuecomment-2940643831",
            "id": 2940643831,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31453",
            "node_id": "IC_kwDOAPphoM6vRqn3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2940643831/reactions"
            },
            "updated_at": "2025-06-04T16:22:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2940643831",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31453/comments",
    "created_at": "2024-12-05T03:54:15Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31453/events",
    "html_url": "https://github.com/neovim/neovim/issues/31453",
    "id": 2719248324,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4457150369,
            "name": "architecture",
            "node_id": "LA_kwDOAPphoM8AAAABCaq3oQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/architecture"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31453/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6iFG_E",
    "number": 31453,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 4,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31453/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31453/timeline",
    "title": "LSP: need a strategy for handling stateful data",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-07T03:51:56Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31453",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
        "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
        "followers_url": "https://api.github.com/users/ofseed/followers",
        "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
        "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ofseed",
        "id": 61115159,
        "login": "ofseed",
        "node_id": "MDQ6VXNlcjYxMTE1MTU5",
        "organizations_url": "https://api.github.com/users/ofseed/orgs",
        "received_events_url": "https://api.github.com/users/ofseed/received_events",
        "repos_url": "https://api.github.com/users/ofseed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ofseed",
        "user_view_type": "public"
    }
}