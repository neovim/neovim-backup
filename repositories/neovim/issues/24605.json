{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "# Updates info:\r\n1. Remove irrelevant information => keep it concise.\r\n\r\n# Issue\r\n\r\nThe rule of how a `aw` find its space as a part of its `word`,  is dynamic-forward-style, instead of a fixed `space + word` or `word + space` pattern as an object\r\n1. When the cursor is on a word, `yaw` treats the word + forward space as `a word`. If `p` the `a word`, you get a forward space. But it's a perspective issue, you can think the two(word and space) are forward-finding.\r\n2. When the cursor is on a space, `yaw` treats the space + forward word as `a word`. If `p` the `a word`, you get a backward space. But it's a perspective issue, you can think the two(word and space) are forward-finding. This is command-style instead of the text-object-style.\r\n\r\nSay, we get a text, `This is a cute cat.`, if `daw` or `yaw`,\r\n1. if cursor is on the space in ` cute`, then forward `daw`, to satisfy that => a set {a word, a space}, no sequence\r\n2. if cursor is on the `cute`, then forward `daw`, to satisfy that => a set {a word and a}\r\n    1. if forward fails(meet no space but punctuation or EOL, then backward searching the space)\r\n    2. if backward fails, then nothing else and only select a pure word( e.g. `<SOL>Honestly, `)\r\n\r\n1. Considering compatibility, keep it as origin.\r\n\r\n# Solutions\r\n### Solution A\r\n\r\nIt is a dynamic forward-search... instead of a fixed text-object...when you do want select a space as a part of `aw`(for pure, use `diw` or `yiw`), e.g.\r\n1. delete \"hello\" and conveniently the forward white space in `print(\"hello world\")`\r\n2. delete white space and conveniently the forward `world` in `print(\"hello world\")`\r\n4. delete \"world\" and forward-no-space, so conveniently the backward white space in `print(\"hello world\")`\r\n\r\nThe only thing should care is that if paste, pay attention the white space is whether ahead or after the word.\r\n1. if want the white space ahead, just `yaw` on white space\r\n2. if want the white space after, just `yaw` on word(pure word)\r\n3. if want no white space, just `yiw` on word(pure word)\r\n### Solution B\r\nThink more => a word became a word because its end char meet a non-word char: {no char, space, EOL, punctuation}\r\n\r\nBut a space is not only an end mark of a word, it is a delimiter, e.g. \"Frankly speaking, I love it!\", when you `e` or `w` to a word, `daw` is safe, cos `edb` and `wde` didn't behave same(or intend to be like this, thus you can use a `till`-like operation by `edb`\r\n\r\n# It is a feature well documented in `:help motion.txt`\r\n```\r\nWhen used after an operator:\r\nFor non-block objects:\r\n\tFor the \"a\" commands: The operator applies to the object and the white\r\n\tspace after the object.  If there is no white space after the object\r\n\tor when the cursor was in the white space before the object, the white\r\n\tspace before the object is included.\r\n\tFor the \"inner\" commands: If the cursor was on the object, the\r\n\toperator applies to the object.  If the cursor was on white space, the\r\n\toperator applies to the white space.\r\n```\r\n\r\n# further reference\r\n1. :help `aw`\r\n7. :help `daw`\r\n8. :help `word`\r\n9. :help `WORD`\r\n10. :help `iw`\r\n\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "TLDR: I agree that `aw` has inconsistencies, but I also think this one is justified and good.\r\n\r\n---\r\n\r\n`:help aw` says\r\n\r\n> Leading or trailing white space is included, but not counted.\r\n\r\nThe wording is somewhat ambiguous and doesn't tell which space is included when. But the explicit mention of \"leading white space\" makes me think this might be intended behaviour.\r\n\r\nThe mention of leading space could refer to:\r\n\r\n- the behaviour you described\r\n- the case when you do `aw` outside of a word (e.i. on a white space)\r\n- or both of the above\r\n\r\nAlso `aw` includes the trailing space for the other `foo`s. I'm not sure if you included that in you example, since the markdown formatting might eat some spaces.\r\n\r\n---\r\n\r\nI think it is correct to include the space. Consider for example `daw` on the last word of a sentence (or a line).\r\n\r\nThis also has the advantage of including a space, so you don't have to add one manually when pasting between other words.\r\n\r\n<details><summary>Example</summary>\r\n\r\nConsider a file:\r\n\r\n```\r\nHow are doing you?\r\n```\r\n\r\nYou'd like to swap the words. I'll indicate the cursor position with a `^`, and show the keys to the left.\r\n\r\n```\r\nHow are doing you?\r\n              ^          daw (delete a word)\r\nHow are doing?\r\n             ^           gE (backwards to end of WORD)\r\nHow are doing?\r\n      ^                  p (put)\r\nHow are you doing?\r\n          ^\r\n```\r\n\r\nNotice how you don't have to separately delete the space before `you`, or add one when pasting it back.\r\n\r\n</details>\r\n\r\n---\r\n\r\nThe current algorithm seems to be taking the first matching of the following cases:\r\n\r\n1. if not currently on a word\r\n   1. if there is a next word, include\r\n      - any leading space from the cursor (on the same line)\r\n      - any space until the next word (this may include a single `<EOL>`)\r\n      - and the next word (an empty line is also \"a word\" according to `:help word`)\r\n   2. otherwise, do nothing\r\n2. if there is trailing space (excluding `<EOL>`), include that\r\n3. if it is the first word on the line, do not include leading space\r\n4. otherwise include any leading space (on the same line)\r\n\r\nCase 3 also feels a bit inconsistent, but it might be considering the leading space to be indentation...",
            "created_at": "2023-08-08T09:05:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/24605#issuecomment-1669218850",
            "id": 1669218850,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24605",
            "node_id": "IC_kwDOAPphoM5jfkIi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1669218850/reactions"
            },
            "updated_at": "2023-08-08T09:08:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1669218850",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/47396753?v=4",
                "events_url": "https://api.github.com/users/juntuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/juntuu/followers",
                "following_url": "https://api.github.com/users/juntuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/juntuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/juntuu",
                "id": 47396753,
                "login": "juntuu",
                "node_id": "MDQ6VXNlcjQ3Mzk2NzUz",
                "organizations_url": "https://api.github.com/users/juntuu/orgs",
                "received_events_url": "https://api.github.com/users/juntuu/received_events",
                "repos_url": "https://api.github.com/users/juntuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/juntuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/juntuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/juntuu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Has been like this since forever. If you don't want the space, use `iw`.\r\n\r\n> Expected behavior ... if with space, pls with space if there is a space with all words\r\n\r\nWhat is \"pls\" ?",
            "created_at": "2023-08-08T13:26:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/24605#issuecomment-1669614210",
            "id": 1669614210,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24605",
            "node_id": "IC_kwDOAPphoM5jhEqC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1669614210/reactions"
            },
            "updated_at": "2023-08-08T13:26:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1669614210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Updated to 1st floor, pls is abbr for \"please\"... A good dictionary online is m-w.com, it contains many abbr...\r\n\r\nConsidering multi-platform consistency(godbolt.org, linux server, IDEA, VSCode...)\r\n1. I only put my understanding here.\r\n2. Changing the handling logic will cost more and get little...\r\n\r\n",
            "created_at": "2023-08-08T17:35:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/24605#issuecomment-1670032471",
            "id": 1670032471,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24605",
            "node_id": "IC_kwDOAPphoM5jiqxX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1670032471/reactions"
            },
            "updated_at": "2023-08-08T17:35:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1670032471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/141681913?v=4",
                "events_url": "https://api.github.com/users/anonaa/events{/privacy}",
                "followers_url": "https://api.github.com/users/anonaa/followers",
                "following_url": "https://api.github.com/users/anonaa/following{/other_user}",
                "gists_url": "https://api.github.com/users/anonaa/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/anonaa",
                "id": 141681913,
                "login": "anonaa",
                "node_id": "U_kgDOCHHk-Q",
                "organizations_url": "https://api.github.com/users/anonaa/orgs",
                "received_events_url": "https://api.github.com/users/anonaa/received_events",
                "repos_url": "https://api.github.com/users/anonaa/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/anonaa/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/anonaa/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/anonaa",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24605/comments",
    "created_at": "2023-08-07T21:21:45Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24605/events",
    "html_url": "https://github.com/neovim/neovim/issues/24605",
    "id": 1840224729,
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "compatibility with Vim or older Neovim",
            "id": 109899712,
            "name": "compatibility",
            "node_id": "MDU6TGFiZWwxMDk4OTk3MTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/compatibility"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "upstream issue that must be fixed in Vim first",
            "id": 2639399975,
            "name": "needs:vim-patch",
            "node_id": "MDU6TGFiZWwyNjM5Mzk5OTc1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:vim-patch"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "text objects, normal commands",
            "id": 5826986707,
            "name": "normal-mode",
            "node_id": "LA_kwDOAPphoM8AAAABW1DC0w",
            "url": "https://api.github.com/repos/neovim/neovim/labels/normal-mode"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24605/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM5tr5nZ",
    "number": 24605,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24605/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24605/timeline",
    "title": "`aw` inconsistency at eol, with/without leading space",
    "updated_at": "2025-01-19T11:53:51Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24605",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/141681913?v=4",
        "events_url": "https://api.github.com/users/anonaa/events{/privacy}",
        "followers_url": "https://api.github.com/users/anonaa/followers",
        "following_url": "https://api.github.com/users/anonaa/following{/other_user}",
        "gists_url": "https://api.github.com/users/anonaa/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/anonaa",
        "id": 141681913,
        "login": "anonaa",
        "node_id": "U_kgDOCHHk-Q",
        "organizations_url": "https://api.github.com/users/anonaa/orgs",
        "received_events_url": "https://api.github.com/users/anonaa/received_events",
        "repos_url": "https://api.github.com/users/anonaa/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/anonaa/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/anonaa/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/anonaa",
        "user_view_type": "public"
    }
}