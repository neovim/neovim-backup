{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nWhen running `iter_captures` on a query that is uses alternation and predicates no results are returned. However, if I run the query without predicates it returns the expected results, or if I run the individual parts without alternation.\n\n### Steps to reproduce\n\n## Sample Ruby File\n```ruby\nclass Test\n\n  def self.test_class_method\n  end\n\n  def test_instance_method\n  end\n\nend\n```\n\n## Test function\n```lua\nM.test_queries = function()\n  local tree = parse()[1]\n  local query_1 = vim.treesitter.query.parse(\n    'ruby',\n    [[\n      [\n        ((method\n          name: (_) @method_name)\n          (#eq? @method_name \"test_instance_method\")) @instance_method\n        ((singleton_method\n          name: (identifier) @method_name)\n          (#eq? @method_name \"test_class_method\")) @class_method\n      ]\n    ]]\n  )\n  print(\"query 1, with predicates and alternation\")\n  for id, node in query_1:iter_captures(tree:root(), 0) do\n    print(vim.inspect(query_1.captures[id]))\n  end\n\n  local query_2 = vim.treesitter.query.parse(\n    'ruby',\n    [[\n      [\n        ((method\n          name: (_) @method_name)) @instance_method\n        ((singleton_method\n          name: (identifier) @method_name)) @class_method\n      ]\n    ]]\n  )\n  print(\"query 2, no predicates and alternation\")\n  for id, node in query_2:iter_captures(tree:root(), 0) do\n    print(vim.inspect(query_2.captures[id]))\n  end\n\n  local query_3 = vim.treesitter.query.parse(\n    'ruby',\n    [[\n      ((method\n        name: (_) @method_name)\n        (#eq? @method_name \"test_instance_method\")) @instance_method\n    ]]\n  )\n  print(\"query 3, no alternation\")\n  for id, node in query_3:iter_captures(tree:root(), 0) do\n    print(vim.inspect(query_3.captures[id]))\n  end\n\n  local query_4 = vim.treesitter.query.parse(\n    'ruby',\n    [[\n      ((singleton_method\n        name: (identifier) @method_name)\n        (#eq? @method_name \"test_class_method\")) @class_method\n    ]]\n  )\n  print(\"query 4, no alternation\")\n  for id, node in query_4:iter_captures(tree:root(), 0) do\n    print(vim.inspect(query_4.captures[id]))\n  end\nend\n```\n\nPrints out the following\n\n```\nquery 1, with predicates and alternation\nquery 2, no predicates and alternation\n\"class_method\"\n\"method_name\"\n\"instance_method\"\n\"method_name\"\nquery 3, no alternation\n\"instance_method\"\n\"method_name\"\nquery 4, no alternation\n\"class_method\"\n\"method_name\"\n```\n\n### Expected behavior\n\nI expect query 1 to have the same output as query 2:\n\n```\nquery 1, with predicates and alternation\n\"class_method\"\n\"method_name\"\n\"instance_method\"\n\"method_name\"\nquery 2, no predicates and alternation\n\"class_method\"\n\"method_name\"\n\"instance_method\"\n\"method_name\"\nquery 3, no alternation\n\"instance_method\"\n\"method_name\"\nquery 4, no alternation\n\"class_method\"\n\"method_name\"\n```\n\n### Nvim version (nvim -v)\n\nNVIM v0.11.0\n\n### Vim (not Nvim) behaves the same?\n\nNot tested in Vim\n\n### Operating system/version\n\nmacOS 14.7.4 \n\n### Terminal name/version\n\nkitty 0.40.1\n\n### $TERM environment variable\n\nxterm-kitty\n\n### Installation\n\nhomebrew",
    "closed_at": "2025-06-19T22:24:49Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/538226?v=4",
        "events_url": "https://api.github.com/users/robotbill/events{/privacy}",
        "followers_url": "https://api.github.com/users/robotbill/followers",
        "following_url": "https://api.github.com/users/robotbill/following{/other_user}",
        "gists_url": "https://api.github.com/users/robotbill/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/robotbill",
        "id": 538226,
        "login": "robotbill",
        "node_id": "MDQ6VXNlcjUzODIyNg==",
        "organizations_url": "https://api.github.com/users/robotbill/orgs",
        "received_events_url": "https://api.github.com/users/robotbill/received_events",
        "repos_url": "https://api.github.com/users/robotbill/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/robotbill/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/robotbill/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/robotbill",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I don't know if this is a bug. All of the predicates are applied to all of the capture. So, for the query\n\n```scheme\n[\n  (method\n    name: (_) @method_name\n    (#eq? @method_name \"test_instance_method\")) @instance_method\n  (singleton_method\n    name: (identifier) @method_name\n    (#eq? @method_name \"test_class_method\")) @class_method\n]\n```\n\nand the ruby code\n\n```ruby\nclass Test\n\n  def self.test_class_method\n  end\n\n  def test_instance_method\n  end\n\nend\n```\n\nNeovim creates four captures (two matches, each one with two captures). Two named `method_name`, `instance_method` and `class_method`. The first match has the captures `test_instance_method` as `@method_name` and `def test_instance_method\\nend` as `instance method`. The second match has the captures `test_class_method` as `@method_name` and `def self.test_class_method\\nend` as `@class_method`.\n\nThen, Neovim applies the predicates. In order for a capture to be valid, it needs to match all of the predicates of the query. This query hast two predicates: `@method_name` must be equal to `test_instance_method` and `@method_name` must be equal to `test_class_method`. As you can see, it's impossible for any capture to fulfill both predicates, so you get not captures at all. If you would instead modify the query to\n\n```scheme\n[\n  (method\n    name: (_) @method_name\n    (#eq? @method_name \"test_instance_method\")) @instance_method\n  (singleton_method\n    name: (identifier) @singleton_method_name\n    (#eq? @singleton_method_name \"test_class_method\")) @class_method\n]\n```\n\nit'll find all four matches because, now, each predicate it's targeting a different capture. So, the query it's not impossible to be fulfilled.\n\nNow, all of this is assuming that the query should be parsed as \"all matches should be fulfilled\", which I don't know if it's what the `tree-sitter` CLI does (I couldn't manage to get it working in order to try). \n\nhttps://github.com/neovim/neovim/blob/fb8dba413f2bcaa61c15d1854b28112e3e91a035/runtime/lua/vim/treesitter/query.lua#L1005-L1012\n\nIs what checks that every capture fulfills every predicate.\n\nhttps://github.com/neovim/neovim/blob/fb8dba413f2bcaa61c15d1854b28112e3e91a035/runtime/lua/vim/treesitter/query.lua#L72\n\nIs where all of the predicates in the capture are put into a single list. Once again, I don't know if treesitter itself gives enough information to try and applied certain patterns only to certain captures/matches.",
            "created_at": "2025-06-19T02:41:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/33232#issuecomment-2986404934",
            "id": 2986404934,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33232",
            "node_id": "IC_kwDOAPphoM6yAOxG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2986404934/reactions"
            },
            "updated_at": "2025-06-19T02:42:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2986404934",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53507599?v=4",
                "events_url": "https://api.github.com/users/TheLeoP/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheLeoP/followers",
                "following_url": "https://api.github.com/users/TheLeoP/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheLeoP/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheLeoP",
                "id": 53507599,
                "login": "TheLeoP",
                "node_id": "MDQ6VXNlcjUzNTA3NTk5",
                "organizations_url": "https://api.github.com/users/TheLeoP/orgs",
                "received_events_url": "https://api.github.com/users/TheLeoP/received_events",
                "repos_url": "https://api.github.com/users/TheLeoP/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheLeoP/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheLeoP/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheLeoP",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thank you for the explanation. When I read https://tree-sitter.github.io/tree-sitter/using-parsers/queries/2-operators.html#alternations I think I misunderstood it and expected it to treat each query as completely separate and not AND together their respective predicates. The tree-sitter CLI is working for me and I confirmed that my original query does not work in it, but when changing the query as you suggested it does match.\n\n```\n‚ùØ tree-sitter query query.txt test.rb\ntest.rb\n  pattern: 0\n    capture: class_method, start: (2, 2), end: (3, 5)\n    capture: 2 - singleton_method_name, start: (2, 11), end: (2, 28), text: `test_class_method`\n  pattern: 0\n    capture: instance_method, start: (5, 2), end: (6, 5)\n    capture: 0 - method_name, start: (5, 6), end: (5, 26), text: `test_instance_method`\n```\n\nClosing this as it seems consistent with the CLI.\n\nThanks again, Joe",
            "created_at": "2025-06-19T22:24:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/33232#issuecomment-2989262683",
            "id": 2989262683,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33232",
            "node_id": "IC_kwDOAPphoM6yLIdb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2989262683/reactions"
            },
            "updated_at": "2025-06-19T22:24:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2989262683",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/538226?v=4",
                "events_url": "https://api.github.com/users/robotbill/events{/privacy}",
                "followers_url": "https://api.github.com/users/robotbill/followers",
                "following_url": "https://api.github.com/users/robotbill/following{/other_user}",
                "gists_url": "https://api.github.com/users/robotbill/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robotbill",
                "id": 538226,
                "login": "robotbill",
                "node_id": "MDQ6VXNlcjUzODIyNg==",
                "organizations_url": "https://api.github.com/users/robotbill/orgs",
                "received_events_url": "https://api.github.com/users/robotbill/received_events",
                "repos_url": "https://api.github.com/users/robotbill/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robotbill/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robotbill/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robotbill",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33232/comments",
    "created_at": "2025-03-31T18:42:36Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33232/events",
    "html_url": "https://github.com/neovim/neovim/issues/33232",
    "id": 2961281085,
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "issue needs attention from an expert, or PR proposes significant changes to architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33232/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 284,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 332,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-06-23T14:24:08Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6wgZA9",
    "number": 33232,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33232/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33232/timeline",
    "title": "Treesitter: iter_captures with alternation and predicates not finding nodes",
    "type": null,
    "updated_at": "2025-06-19T22:24:49Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33232",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/538226?v=4",
        "events_url": "https://api.github.com/users/robotbill/events{/privacy}",
        "followers_url": "https://api.github.com/users/robotbill/followers",
        "following_url": "https://api.github.com/users/robotbill/following{/other_user}",
        "gists_url": "https://api.github.com/users/robotbill/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/robotbill",
        "id": 538226,
        "login": "robotbill",
        "node_id": "MDQ6VXNlcjUzODIyNg==",
        "organizations_url": "https://api.github.com/users/robotbill/orgs",
        "received_events_url": "https://api.github.com/users/robotbill/received_events",
        "repos_url": "https://api.github.com/users/robotbill/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/robotbill/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/robotbill/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/robotbill",
        "user_view_type": "public"
    }
}