{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "# Problem\n\n## Context\nAI are emergent. AI work better with context.\nSome AI plugin devs need to provide LLMs with context of recent files changed accross buffer.\n## Attempts\n\":changes\" seems to only work on the current buffer. Also a  lot of --invalid-- for some reasons.\nHard to parse. Hard to use.\nI tried custom algorithm with InsertEnter InsertLeave. Bad perfs, poor result, hard, annoying.\n\n# Expected behavior\n\n## Solution\nAn API to get all recent changes. Ability to pass the number of buffer we need.\nThe changes should include if it's removal/modification/insertion.\n## Related\nBlocking to have better AI autocompletion as discussed here https://github.com/milanglacier/minuet-ai.nvim/issues/70#issuecomment-2790545165 and there https://github.com/Davidyz/VectorCode/issues/45#issuecomment-2777987777\n\n\n# Discussion about AIs powered IDEs such as cursor\nI do not know if you ever tried cursor (you should do so to have a feeling of the current SOTA in AI powered IDEs). It is mindblowing how good the \"tab\" is, it is much more than just completion. What missing for nvim is explained [here](https://github.com/milanglacier/minuet-ai.nvim/issues/70#issuecomment-2767447036)).\nI have acquaintances who have +15 years experience able to accomplish tasks that took theme previously 2/3 days in 2 hours with Cursor and I keep hearing similar stories. Things like minuet does provide some values too but we're a farcry from cursor for various reasons.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "For reference, did you try `getchangelist()` (Edit: or `undotree()`)?\n\nThe topic of providing AI context is generally covered by https://github.com/neovim/neovim/issues/32949 , but we can keep this issue open since it's a more targeted/narrow change that doesn't need to be blocked.\n\nIn general, the `nvim_get_context()` was added years ago for exactly this kind of purpose: programmatic inspection of the editor state. AI just happens to be another really good use-case for it.\n\nIf you want to work on this, it should be straightforward to add changes to https://github.com/neovim/neovim/blob/master/src/nvim/context.c . The benefit of doing it that way is it avoids the discussion about \"API surface area\". \n\nAlternatively (or simultaneously), a new `nvim_buf_get_changes()` or `nvim_buf_get_state()` API seems reasonable.",
            "created_at": "2025-04-11T11:33:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/33414#issuecomment-2796652054",
            "id": 2796652054,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33414",
            "node_id": "IC_kwDOAPphoM6msYYW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2796652054/reactions"
            },
            "updated_at": "2025-04-12T16:12:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2796652054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> For reference, did you try `getchangelist()`?\n\n1. Correct me if I am wrong, but this will just list essentially the chronological order of line numbers changed but not the actual change itself?\n2. This `getchangelist()` is tied to `:changes` correct?\n3. Assuming item 2 is correct, the `:changes` gets a bit messy (maybe from git related branch changes etc., maybe from undo/redo stuff, who else knows from what)... see screenshot below. Many repeated entries.\n4. Similar to item 3, the `:changes` I believe just shows the text of the line as it currently is. So past change entries for the same line all show the same current state of the text and NOT what the text was at time of change. This prevents ability to leverage any sort of \"diff\" to pass to the LLM to actually show what has changed to help it predict what the next change may be.\n\nThe closest I got was combining the `getchangelist()` data with git hunk diff info for current buffer since the last commit... matching up the diff hunk with the chronological order of changes based on change list line numbers. But it became pretty fragile and crude as many corner cases especially for multi line hunks.\n\n![Image](https://github.com/user-attachments/assets/53a4bcbc-ff7f-4240-a575-b7dae2e19451)",
            "created_at": "2025-04-11T15:15:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/33414#issuecomment-2797203175",
            "id": 2797203175,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33414",
            "node_id": "IC_kwDOAPphoM6mue7n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797203175/reactions"
            },
            "updated_at": "2025-04-11T15:15:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797203175",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/64155612?v=4",
                "events_url": "https://api.github.com/users/GitMurf/events{/privacy}",
                "followers_url": "https://api.github.com/users/GitMurf/followers",
                "following_url": "https://api.github.com/users/GitMurf/following{/other_user}",
                "gists_url": "https://api.github.com/users/GitMurf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/GitMurf",
                "id": 64155612,
                "login": "GitMurf",
                "node_id": "MDQ6VXNlcjY0MTU1NjEy",
                "organizations_url": "https://api.github.com/users/GitMurf/orgs",
                "received_events_url": "https://api.github.com/users/GitMurf/received_events",
                "repos_url": "https://api.github.com/users/GitMurf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/GitMurf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GitMurf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/GitMurf",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "TLDR for my previous comment would be that the `:changes` would likely work (or be much more effective for these AI purposes) if instead of the text of the current line, it included a diff (before and after of that line at the time of the change). IMO basically what is needed is a combination of `:changes` and undo history. Not sure what is possible there from a neovim core perspective.\n\nThanks as always for engaging with the community and ideas @justinmk !",
            "created_at": "2025-04-11T15:18:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/33414#issuecomment-2797210455",
            "id": 2797210455,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33414",
            "node_id": "IC_kwDOAPphoM6mugtX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797210455/reactions"
            },
            "updated_at": "2025-04-12T16:12:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797210455",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/64155612?v=4",
                "events_url": "https://api.github.com/users/GitMurf/events{/privacy}",
                "followers_url": "https://api.github.com/users/GitMurf/followers",
                "following_url": "https://api.github.com/users/GitMurf/following{/other_user}",
                "gists_url": "https://api.github.com/users/GitMurf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/GitMurf",
                "id": 64155612,
                "login": "GitMurf",
                "node_id": "MDQ6VXNlcjY0MTU1NjEy",
                "organizations_url": "https://api.github.com/users/GitMurf/orgs",
                "received_events_url": "https://api.github.com/users/GitMurf/received_events",
                "repos_url": "https://api.github.com/users/GitMurf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/GitMurf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GitMurf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/GitMurf",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@davidyz curious your thoughts on my comments above, based on your comment here: https://github.com/neovim/neovim/issues/32949#issuecomment-2774570781 it sounds like we have been looking into and thinking similarly, and wondering if you have any additional thoughts to add.",
            "created_at": "2025-04-11T15:23:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/33414#issuecomment-2797222650",
            "id": 2797222650,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33414",
            "node_id": "IC_kwDOAPphoM6mujr6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797222650/reactions"
            },
            "updated_at": "2025-04-12T16:12:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797222650",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/64155612?v=4",
                "events_url": "https://api.github.com/users/GitMurf/events{/privacy}",
                "followers_url": "https://api.github.com/users/GitMurf/followers",
                "following_url": "https://api.github.com/users/GitMurf/following{/other_user}",
                "gists_url": "https://api.github.com/users/GitMurf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/GitMurf",
                "id": 64155612,
                "login": "GitMurf",
                "node_id": "MDQ6VXNlcjY0MTU1NjEy",
                "organizations_url": "https://api.github.com/users/GitMurf/orgs",
                "received_events_url": "https://api.github.com/users/GitMurf/received_events",
                "repos_url": "https://api.github.com/users/GitMurf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/GitMurf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GitMurf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/GitMurf",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hi thanks for opening this issue and tagging me! I've kinda looked away from this specific topic after I closed the VectorCode issue that you mentioned above. I looked at some \"undo tree\" plugins and they seem to be maintaining their own undo history by setting up autocmd on `TextChanged` and `TextChangedI`, which imo is a very inefficient way to do this (imagine if you have multiple plugins all trying to track the changes with their own autocmds). I also tried `:changes` and `getchangelist()`, which @GitMurf already covered in great details so I'm not going to repeat. I have little knowledge about neovim internals but I've been wondering about the feasibility to just expose the undo stack used for `:undo` (maybe read-only).",
            "created_at": "2025-04-11T15:45:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/33414#issuecomment-2797299124",
            "id": 2797299124,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33414",
            "node_id": "IC_kwDOAPphoM6mu2W0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797299124/reactions"
            },
            "updated_at": "2025-04-11T15:45:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797299124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> but I've been wondering about the feasibility to just expose the undo stack used for :undo (maybe read-only).\n\nTotally agree! And as you've said, I've looked into other plugins and ultimately came to the same conclusion that as it stands currently, it seems that rolling your own tracker of changes is the only way to do it. Although if I were to do it, I would likely just track changes on insert enter and leave instead of text change. And then maybe additionally track on save and text change normal mode (for pasting text or other changes like LSP / linter stuff outside of insert mode). I don't like the idea of tracking the changes as I type.",
            "created_at": "2025-04-11T16:31:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/33414#issuecomment-2797415213",
            "id": 2797415213,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33414",
            "node_id": "IC_kwDOAPphoM6mvSst",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797415213/reactions"
            },
            "updated_at": "2025-04-12T16:11:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797415213",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/64155612?v=4",
                "events_url": "https://api.github.com/users/GitMurf/events{/privacy}",
                "followers_url": "https://api.github.com/users/GitMurf/followers",
                "following_url": "https://api.github.com/users/GitMurf/following{/other_user}",
                "gists_url": "https://api.github.com/users/GitMurf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/GitMurf",
                "id": 64155612,
                "login": "GitMurf",
                "node_id": "MDQ6VXNlcjY0MTU1NjEy",
                "organizations_url": "https://api.github.com/users/GitMurf/orgs",
                "received_events_url": "https://api.github.com/users/GitMurf/received_events",
                "repos_url": "https://api.github.com/users/GitMurf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/GitMurf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GitMurf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/GitMurf",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "What about `undotree()` ?",
            "created_at": "2025-04-12T16:11:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/33414#issuecomment-2798890633",
            "id": 2798890633,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33414",
            "node_id": "IC_kwDOAPphoM6m066J",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2798890633/reactions"
            },
            "updated_at": "2025-04-12T16:11:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2798890633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> What about `undotree()` ?\n\nAs far as I know, doesn't that require you actually undoing? Or is there a way to get the history?",
            "created_at": "2025-04-13T03:48:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/33414#issuecomment-2799578011",
            "id": 2799578011,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33414",
            "node_id": "IC_kwDOAPphoM6m3iub",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2799578011/reactions"
            },
            "updated_at": "2025-04-13T03:48:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2799578011",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/64155612?v=4",
                "events_url": "https://api.github.com/users/GitMurf/events{/privacy}",
                "followers_url": "https://api.github.com/users/GitMurf/followers",
                "following_url": "https://api.github.com/users/GitMurf/following{/other_user}",
                "gists_url": "https://api.github.com/users/GitMurf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/GitMurf",
                "id": 64155612,
                "login": "GitMurf",
                "node_id": "MDQ6VXNlcjY0MTU1NjEy",
                "organizations_url": "https://api.github.com/users/GitMurf/orgs",
                "received_events_url": "https://api.github.com/users/GitMurf/received_events",
                "repos_url": "https://api.github.com/users/GitMurf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/GitMurf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GitMurf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/GitMurf",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've seen a workaround in [snacks](https://github.com/folke/snacks.nvim/blob/bc0630e43be5699bb94dadc302c0d21615421d93/lua/snacks/picker/source/vim.lua#L324-L344), it write the dummy undo file to another buffer and  use `:undo` and `vim.diff` to get histories, it's generally fast enough",
            "created_at": "2025-04-13T08:31:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/33414#issuecomment-2799859113",
            "id": 2799859113,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33414",
            "node_id": "IC_kwDOAPphoM6m4nWp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2799859113/reactions"
            },
            "updated_at": "2025-04-13T08:31:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2799859113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/97848247?v=4",
                "events_url": "https://api.github.com/users/xzbdmw/events{/privacy}",
                "followers_url": "https://api.github.com/users/xzbdmw/followers",
                "following_url": "https://api.github.com/users/xzbdmw/following{/other_user}",
                "gists_url": "https://api.github.com/users/xzbdmw/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xzbdmw",
                "id": 97848247,
                "login": "xzbdmw",
                "node_id": "U_kgDOBdULtw",
                "organizations_url": "https://api.github.com/users/xzbdmw/orgs",
                "received_events_url": "https://api.github.com/users/xzbdmw/received_events",
                "repos_url": "https://api.github.com/users/xzbdmw/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xzbdmw/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xzbdmw/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xzbdmw",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33414/comments",
    "created_at": "2025-04-10T08:37:37Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33414/events",
    "html_url": "https://github.com/neovim/neovim/issues/33414",
    "id": 2984917561,
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "save/restore editor state: shada, context, ctx, sessions, mksession",
            "id": 4449264023,
            "name": "editor-state",
            "node_id": "LA_kwDOAPphoM8AAAABCTJhlw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor-state"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33414/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 709,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 637,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-04-12T17:52:52Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6x6jo5",
    "number": 33414,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33414/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33414/timeline",
    "title": "API: get buffer changes history list",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-13T08:31:51Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33414",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9869317?v=4",
        "events_url": "https://api.github.com/users/ilan-schemoul/events{/privacy}",
        "followers_url": "https://api.github.com/users/ilan-schemoul/followers",
        "following_url": "https://api.github.com/users/ilan-schemoul/following{/other_user}",
        "gists_url": "https://api.github.com/users/ilan-schemoul/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ilan-schemoul",
        "id": 9869317,
        "login": "ilan-schemoul",
        "node_id": "MDQ6VXNlcjk4NjkzMTc=",
        "organizations_url": "https://api.github.com/users/ilan-schemoul/orgs",
        "received_events_url": "https://api.github.com/users/ilan-schemoul/received_events",
        "repos_url": "https://api.github.com/users/ilan-schemoul/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ilan-schemoul/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ilan-schemoul/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ilan-schemoul",
        "user_view_type": "public"
    }
}