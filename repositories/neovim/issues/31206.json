{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "## Problem\n\nAll `vim.lsp.buf.*` functions run asynchronously, however they do not provide callbacks when they finish.\n\nThis is needed so users can invoke other behaviours after calling these functions. And in general, asynchronous functions should always provide continuations of some form.\n\n\n## Proposal\n\n- Add a `callback` argument after every `opts` field in `vim.lsp.buf*`.\n  - `vim.lsp.buf.hover(config)` -> `vim.lsp.buf.hover(opts, callback)`\n  - `vim.lsp.buf.declaration(opts)` -> `vim.lsp.buf.declaration(opts, callback)`\n  - `vim.lsp.buf.definition(opts)` -> `vim.lsp.buf.definition(opts, callback)`\n  - `vim.lsp.buf.type_definition(opts)` -> `vim.lsp.buf.type_definition(opts, callback)`\n  - `vim.lsp.buf.implementation(opts)` -> `vim.lsp.buf.implementation(opts, callback)`\n  - `vim.lsp.buf.signature_help(config)` -> `vim.lsp.buf.signature_help(opts, callback)`\n  - `vim.lsp.buf.format(opts)` -> `vim.lsp.buf.format(opts, callback)`\n  - `vim.lsp.buf.rename(new_name, opts)` -> `vim.lsp.buf.rename(new_name, opts, callback)`\n  - `vim.lsp.buf.references(context, opts)` -> `vim.lsp.buf.references(context, opts, callback)`\n  - `vim.lsp.buf.document_symbol(opts)` -> `vim.lsp.buf.document_symbol(opts, callback)`\n  - `vim.lsp.buf.incoming_calls()` -> `vim.lsp.buf.incoming_calls(callback)`\n  - `vim.lsp.buf.outgoing_calls()` -> `vim.lsp.buf.outgoing_calls(callback)`\n  - `vim.lsp.buf.typehierarchy(kind)` -> `vim.lsp.buf.typehierarchy(kind, callback)`\n  - `vim.lsp.buf.workspace_symbol(query, opts)` -> `vim.lsp.buf.workspace_symbol(query, opts, callback)`\n  - `vim.lsp.buf.document_highlight()` -> `vim.lsp.buf.document_highlight(callback)`\n  - `vim.lsp.buf.code_action(opts)` -> `vim.lsp.buf.code_action(opts, callback)`\n- Deprecate the `async` and `sync` options from `vim.lsp.buf.format()`\n- Deprecate `vim.lsp.buf_request_sync()`\n- ~(optional) If `callback` is not provided, then functions are run synchronously (like `vim.uv.*`).~\n  - ~How would this impact mappings?~\n- Each function should return a object with the methods `cancel()` ~and `wait()`~, similar to `vim.system()`'s `vim.SystemObj`. EDIT: `wait()` will be provided by `vim.async()`.\n\n### Notes:\n- For functions that don't have an `opts`, `callback` will be the only option. If `opts` is required in the future then it can be added with overloads.\n- `callback` could alternatively be made an option in `opts`, however this is likely to make it more awkward to use with what gets implemented in #19624, which will include `async.wrap(argc, fun)` function.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "What also came up is having the ability to cancel the actions (https://github.com/neovim/neovim/pull/18372) (including LSP's cancel mechanism, not just client side).\nI'm not sure how that could be solved with the callback approach, instead we'd probably need a model like we're using for `vim.system` - some kind of result object with `:cancel`, `:(a)wait` and so on.  (See also https://github.com/neovim/neovim/pull/22598#issuecomment-1463367606)\nFor chained actions like rename, where there is a (optional) prepare step, this would then need to cancel the current active operation & short-circuit.\n\n\n\n",
            "created_at": "2024-11-14T13:45:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/31206#issuecomment-2476397351",
            "id": 2476397351,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31206",
            "node_id": "IC_kwDOAPphoM6TmtMn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2476397351/reactions"
            },
            "updated_at": "2024-11-14T13:46:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2476397351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, I guess the only way to do that would be for the functions to return a table with a `cancel` method. Then the implementations can keep adjusting this cancel method depending on the stage it is at.\n\nThis would also rule out:\n\n> (optional) If callback is not provided, then functions are run synchronously (like vim.uv.*).\n\nSince the returned object can provide a `:wait` method.",
            "created_at": "2024-11-14T14:11:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/31206#issuecomment-2476455941",
            "id": 2476455941,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31206",
            "node_id": "IC_kwDOAPphoM6Tm7gF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2476455941/reactions"
            },
            "updated_at": "2024-11-14T14:11:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2476455941",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This would also rule out:\n> \n> > (optional) If callback is not provided, then functions are run synchronously (like vim.uv.*).\n\nWhy does that rule that out? If synchronous, the returned `:wait()` would be a no-op.\n\n@gregorias does either of these approaches harmonize better with your proposal/design in https://github.com/neovim/neovim/issues/19624#issuecomment-2466700118 , or is it orthogonal ? ",
            "created_at": "2024-11-15T01:47:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/31206#issuecomment-2477786325",
            "id": 2477786325,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31206",
            "node_id": "IC_kwDOAPphoM6TsATV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2477786325/reactions"
            },
            "updated_at": "2024-11-15T01:48:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2477786325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Why does that rule that out? If synchronous, the returned :wait() would be a no-op.\n\nI made the same design decision with `vim.system`. if you want it to be synchronous you just suffix the call with `:wait()`.  As opposed to the opposite of adding an empty callback to get async.\n\nI think async should be default, like it is now, as using continuations is an uncommon use case. Most people just want to call these functions in mappings.",
            "created_at": "2024-11-15T07:47:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/31206#issuecomment-2478155513",
            "id": 2478155513,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31206",
            "node_id": "IC_kwDOAPphoM6Ttab5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2478155513/reactions"
            },
            "updated_at": "2024-11-15T07:47:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2478155513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "## Compatibility with asynchrony\n\n> @gregorias does either of these approaches harmonize better with your proposal/design in https://github.com/neovim/neovim/issues/19624#issuecomment-2466700118 , or is it orthogonal ?\n\nThere must be a way to **provide a callback that is called asynchronously by the server** (or whatever handles executing the long-running operation). Other than that, whether this is done with a callback in the first call or through some returned future/promise object doesn’t matter for achieving asynchronous semantics:\n\n```lua\n-- This…\nvim.lsp.buf.code_action(foo, function(result) coroutine.resume(this_coroutine, result) end)\n\n-- … or this are fine.\nlocal ca_promise = vim.lsp.buf.code_action(foo)\n-- Register a callback to be executed upon completion.\nca_promise:await(function(result) coroutine.resume(this_coroutine, result) end)\n```\n\nWhat must not happen is to only have a `Future:wait` that blocks until completion in the original thread. There must be something that resumes the continuation while allowing the original thread to continue.\n\nTheoretically, you could turn `Future:wait` into a coroutine, but then you’d need to think about what the protocol for your coroutines is and you end up implementing https://github.com/neovim/neovim/issues/19624, so I think it’s out of scope here. Better stick with a callback somewhere.\n\n## Additional design notes\n\nPlease take these as just sharing thoughts for your consideration.\n\n### On consistency\n\n> I made the same design decision with vim.system. if you want it to be synchronous you just suffix the call with :wait(). As opposed to the opposite of adding an empty callback to get async.\n\nOn its own this sounds reasonable but consider also consistency with the rest of Neovim’s API. It adds mental load for `vim.uv` and `vim.lsp` to use different call semantics. For one module to use continuation callbacks as a function parameter and for the other to return promise-like objects sounds like quite a mixing of approaches.\n\n### CancellationToken\n\nYou can still have cancellation without returning a promise-like object. You can pass something like C#’s cancellation token: an observable object that the callee can register observers (callbacks) on whenever the caller requests cancellation. Here’s a pseudo-code for how this could look like:\n\n```lua\nfunction vim.lsp.foo(args, cancellation_token, callback)\n  local request_id = start_foo(callback)\n  cancellation_token:register(function()\n    send_cancellation_request(request_id)\n  end)\nend\n```\n\n```lua\n-- caller\nvim.lsp.foo(args, cancellation_token, on_done)\n-- …\n-- some time later\ncancellation_token:cancel()\n```\n\nYou would probably want to keep `cancellation_token` and `callback` inside a single table parameter. I would also expect the `token` to have an `unregister` option.\n\n### Callback in opts\n\n> callback could alternatively be made an option in opts, however this is likely to make it more awkward to use with what gets implemented in https://github.com/neovim/neovim/issues/19624,\n\nI don’t think it matters much. It will require a bit of new plumbing, but it will mostly stay hidden from end-users. However, having a callback as a separate parameter does feel like the most common approach.\n",
            "created_at": "2024-11-15T08:41:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/31206#issuecomment-2478242534",
            "id": 2478242534,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31206",
            "node_id": "IC_kwDOAPphoM6Ttvrm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2478242534/reactions"
            },
            "updated_at": "2024-11-15T08:41:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2478242534",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/722385?v=4",
                "events_url": "https://api.github.com/users/gregorias/events{/privacy}",
                "followers_url": "https://api.github.com/users/gregorias/followers",
                "following_url": "https://api.github.com/users/gregorias/following{/other_user}",
                "gists_url": "https://api.github.com/users/gregorias/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gregorias",
                "id": 722385,
                "login": "gregorias",
                "node_id": "MDQ6VXNlcjcyMjM4NQ==",
                "organizations_url": "https://api.github.com/users/gregorias/orgs",
                "received_events_url": "https://api.github.com/users/gregorias/received_events",
                "repos_url": "https://api.github.com/users/gregorias/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gregorias/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gregorias/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gregorias",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31206/comments",
    "created_at": "2024-11-14T10:01:53Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31206/events",
    "html_url": "https://github.com/neovim/neovim/issues/31206",
    "id": 2658284584,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "futures/promises, async/await, concurrency, task pipelines",
            "id": 5683343649,
            "name": "async",
            "node_id": "LA_kwDOAPphoM8AAAABUsDxIQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/async"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31206/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6ecjQo",
    "number": 31206,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 7,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 2,
        "hooray": 2,
        "laugh": 0,
        "rocket": 9,
        "total_count": 20,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31206/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 4
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31206/timeline",
    "title": "Add continuations to `vim.lsp.buf.*` functions",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:11Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31206",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    }
}