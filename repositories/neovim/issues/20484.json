{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Neovim version (nvim -v)\r\n\r\n0.8.0\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nnot sure is replicable\r\n\r\n### Operating system/version\r\n\r\nmacOS 12.6\r\n\r\n### Terminal name/version\r\n\r\nkitty 0.25.2\r\n\r\n### $TERM environment variable\r\n\r\nxterm-256color\r\n\r\n### Installation\r\n\r\nbrew install neovim\r\n\r\n### How to reproduce the issue\r\n\r\n```\r\npython -m venv ~/nvimvenv\r\ncd ~/nvimvenv\r\n. ./bin/activate\r\npip install --upgrade pip\r\npip install neovim\r\ndeactivate\r\ncd ~\r\n---\r\noptional: install CoC and CocInstall coc-snippets\r\n---\r\ninit.vim add: `let g:python3_host_prog = $HOME . '/nvimvenv/bin/python3'`\r\ncd mypythonproject\r\nnvim\r\n---\r\n:call pyxeval('1')\r\nnote result (no error)\r\n---\r\nnvim mypythonfile.py\r\n:call pyxeval('1')\r\nthrows error, cannot find python provider, run checkhealth\r\n---\r\ncheckhealth provider\r\nshows no errors in either scenario.\r\n```\r\n\r\n### Expected behavior\r\n\r\nwhen running `call pyxeval('1')`, regardless of opening nvim with a file as an argument or not, it should be able to locate and execute with the specified python provider.\r\n\r\n### Actual behavior\r\n\r\nopening nvim with a .py file as argument seems to cause some bug with pyxeval, but checkhealth provider still works fine.\r\n\r\nI notice this with CoC and coc-snippets, where it will fail on open of the .py file, but only if its an argument to nvim. whether or not the local project has its own virtualenv that is activated or not seems to have no bearing.",
    "closed_at": "2025-08-16T22:24:29Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "opening nvim and then going `:e mypythonfile.py` also works fine",
            "created_at": "2022-10-04T15:59:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1267226004",
            "id": 1267226004,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LiFWU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1267226004/reactions"
            },
            "updated_at": "2022-10-04T15:59:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1267226004",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/253048?v=4",
                "events_url": "https://api.github.com/users/jhogendorn/events{/privacy}",
                "followers_url": "https://api.github.com/users/jhogendorn/followers",
                "following_url": "https://api.github.com/users/jhogendorn/following{/other_user}",
                "gists_url": "https://api.github.com/users/jhogendorn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jhogendorn",
                "id": 253048,
                "login": "jhogendorn",
                "node_id": "MDQ6VXNlcjI1MzA0OA==",
                "organizations_url": "https://api.github.com/users/jhogendorn/orgs",
                "received_events_url": "https://api.github.com/users/jhogendorn/received_events",
                "repos_url": "https://api.github.com/users/jhogendorn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jhogendorn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jhogendorn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jhogendorn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "for troubleshooting, does this work:\r\n\r\n    nvim --cmd \"let g:python3_host_prog = $HOME . '/nvimenv/bin/python3'\" mypythonfile.py\r\n\r\nI wonder if `filetype.lua` needs a tweak. cc @clason ",
            "created_at": "2022-10-04T16:46:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1267281782",
            "id": 1267281782,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LiS92",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1267281782/reactions"
            },
            "updated_at": "2022-10-04T16:46:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1267281782",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> for troubleshooting, does this work:\r\n> \r\n> ```\r\n> nvim --cmd \"let g:python3_host_prog = $HOME . '/nvimenv/bin/python3'\" mypythonfile.py\r\n> ```\r\n> \r\n> I wonder if `filetype.lua` needs a tweak. cc @clason\r\n\r\nThis works, although i had to drop the $HOME and just do a hardcoded full path.",
            "created_at": "2022-10-04T18:04:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1267366738",
            "id": 1267366738,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LintS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1267366738/reactions"
            },
            "updated_at": "2022-10-04T18:04:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1267366738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/253048?v=4",
                "events_url": "https://api.github.com/users/jhogendorn/events{/privacy}",
                "followers_url": "https://api.github.com/users/jhogendorn/followers",
                "following_url": "https://api.github.com/users/jhogendorn/following{/other_user}",
                "gists_url": "https://api.github.com/users/jhogendorn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jhogendorn",
                "id": 253048,
                "login": "jhogendorn",
                "node_id": "MDQ6VXNlcjI1MzA0OA==",
                "organizations_url": "https://api.github.com/users/jhogendorn/orgs",
                "received_events_url": "https://api.github.com/users/jhogendorn/received_events",
                "repos_url": "https://api.github.com/users/jhogendorn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jhogendorn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jhogendorn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jhogendorn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think this is the same problem with clipboard providers. Would the following settings solve the problem? Still, it seems odd that this should happen since `runtime/ftplugin/python.vim` is never loaded before `init.vim`. You misspelled `nvimvenv` as `nvimenv`, is the real setting the correct path for the virtual environment?\r\n\r\n```vim\r\nlet g:python3_host_prog = $HOME . '/nvimvenv/bin/python3'\r\nif exists('g:loaded_python3_provider')\r\n  unlet g:loaded_python3_provider\r\n  runtime autoload/provider/python3.vim\r\nendif\r\n```\r\n\r\nRef. https://github.com/neovim/neovim/wiki/FAQ#gclipboard-settings-are-not-used\r\n\r\nRelated: #13062, #13331",
            "created_at": "2022-10-06T05:43:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1269352918",
            "id": 1269352918,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LqMnW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1269352918/reactions"
            },
            "updated_at": "2022-10-06T06:11:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1269352918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11682285?v=4",
                "events_url": "https://api.github.com/users/erw7/events{/privacy}",
                "followers_url": "https://api.github.com/users/erw7/followers",
                "following_url": "https://api.github.com/users/erw7/following{/other_user}",
                "gists_url": "https://api.github.com/users/erw7/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/erw7",
                "id": 11682285,
                "login": "erw7",
                "node_id": "MDQ6VXNlcjExNjgyMjg1",
                "organizations_url": "https://api.github.com/users/erw7/orgs",
                "received_events_url": "https://api.github.com/users/erw7/received_events",
                "repos_url": "https://api.github.com/users/erw7/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/erw7/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/erw7/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/erw7",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Redoing the runtime autoload results in this error:\r\n\r\n> `line    5: E605: Exception not caught: Plugin \"script_host.py\" is already registered`\r\n\r\nSo just unsetting the flag is not enough, it would have to unload the provider fully I would say? Looking at `/runtime/autoload/remote/host.vim` theres no convenient way to unload the plugin properly.",
            "created_at": "2022-10-06T08:55:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1269619790",
            "id": 1269619790,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LrNxO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1269619790/reactions"
            },
            "updated_at": "2022-10-06T08:55:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1269619790",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/253048?v=4",
                "events_url": "https://api.github.com/users/jhogendorn/events{/privacy}",
                "followers_url": "https://api.github.com/users/jhogendorn/followers",
                "following_url": "https://api.github.com/users/jhogendorn/following{/other_user}",
                "gists_url": "https://api.github.com/users/jhogendorn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jhogendorn",
                "id": 253048,
                "login": "jhogendorn",
                "node_id": "MDQ6VXNlcjI1MzA0OA==",
                "organizations_url": "https://api.github.com/users/jhogendorn/orgs",
                "received_events_url": "https://api.github.com/users/jhogendorn/received_events",
                "repos_url": "https://api.github.com/users/jhogendorn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jhogendorn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jhogendorn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jhogendorn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> You misspelled nvimvenv as nvimenv, is the real setting the correct path for the virtual environment?\r\n\r\nIt's a contrived path for the bugreport, so that is just a typo. The paths in my actual usage are correct. `/Users/jhogendorn/.config/nvim/providers/python3/venv/bin/python3`",
            "created_at": "2022-10-06T09:00:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1269628060",
            "id": 1269628060,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LrPyc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1269628060/reactions"
            },
            "updated_at": "2022-10-06T09:00:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1269628060",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/253048?v=4",
                "events_url": "https://api.github.com/users/jhogendorn/events{/privacy}",
                "followers_url": "https://api.github.com/users/jhogendorn/followers",
                "following_url": "https://api.github.com/users/jhogendorn/following{/other_user}",
                "gists_url": "https://api.github.com/users/jhogendorn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jhogendorn",
                "id": 253048,
                "login": "jhogendorn",
                "node_id": "MDQ6VXNlcjI1MzA0OA==",
                "organizations_url": "https://api.github.com/users/jhogendorn/orgs",
                "received_events_url": "https://api.github.com/users/jhogendorn/received_events",
                "repos_url": "https://api.github.com/users/jhogendorn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jhogendorn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jhogendorn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jhogendorn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The minimal steps that can cause this problem are as follows:\r\n\r\n```\r\npython -m venv ~/nvimvenv\r\ncd ~/nvimvenv\r\n. ./bin/activate\r\npip install --upgrade pip\r\npip install pynvim\r\ndeactivate\r\ncd ~\r\npython -m venv ~/nonvimvenv\r\nnvim -u <(echo 'let g:python3_host_prog=$HOME.\"/nonvimvenv/bin/python3\" | call has(\"python3\") | let g:python3_host_prog=$HOME.\"/nvimvenv/bin/python3\" | call pyxeval(\"1\")')\r\n```\r\n\r\nSince this problem also occurs with other providers, ~we need to provide a way to change cached script-local variables(`s:prog`)~. Also, `:checkhealth` should be changed to use the cached program instead of `g:..._host_prog`.\r\n\r\nAs a workaround, the following seems to work.\r\n\r\n```vim\r\nlet g:python3_host_prog = $HOME . '/nvimvenv/bin/python3'\r\nif exists('g:loaded_python3_provider')\r\n  unlet g:loaded_python3_provider\r\n  try\r\n    runtime autoload/provider/python3.vim\r\n  catch\r\n  endtry\r\nendif\r\n```\r\n\r\nOr you need to change `init.vim` so that `runtime/provider/python3.vim` is not loaded before you set `g:python3_host_prog`.",
            "created_at": "2022-10-06T12:13:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1269924481",
            "id": 1269924481,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LsYKB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1269924481/reactions"
            },
            "updated_at": "2022-10-08T10:25:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1269924481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11682285?v=4",
                "events_url": "https://api.github.com/users/erw7/events{/privacy}",
                "followers_url": "https://api.github.com/users/erw7/followers",
                "following_url": "https://api.github.com/users/erw7/following{/other_user}",
                "gists_url": "https://api.github.com/users/erw7/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/erw7",
                "id": 11682285,
                "login": "erw7",
                "node_id": "MDQ6VXNlcjExNjgyMjg1",
                "organizations_url": "https://api.github.com/users/erw7/orgs",
                "received_events_url": "https://api.github.com/users/erw7/received_events",
                "repos_url": "https://api.github.com/users/erw7/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/erw7/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/erw7/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/erw7",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Can confirm that if i move the setting of provider to the very very top of `init.vim` the bug does not reproduce. It has to be first though, before even `syntax on` which was previously my first line.",
            "created_at": "2022-10-06T14:56:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1270209419",
            "id": 1270209419,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LtduL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1270209419/reactions"
            },
            "updated_at": "2022-10-06T14:56:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1270209419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/253048?v=4",
                "events_url": "https://api.github.com/users/jhogendorn/events{/privacy}",
                "followers_url": "https://api.github.com/users/jhogendorn/followers",
                "following_url": "https://api.github.com/users/jhogendorn/following{/other_user}",
                "gists_url": "https://api.github.com/users/jhogendorn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jhogendorn",
                "id": 253048,
                "login": "jhogendorn",
                "node_id": "MDQ6VXNlcjI1MzA0OA==",
                "organizations_url": "https://api.github.com/users/jhogendorn/orgs",
                "received_events_url": "https://api.github.com/users/jhogendorn/received_events",
                "repos_url": "https://api.github.com/users/jhogendorn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jhogendorn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jhogendorn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jhogendorn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It has to be first though, before even `syntax on`\r\n\r\nAh, let's just document that then. (Edit: and fix checkhealth.)",
            "created_at": "2022-10-06T15:56:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1270318775",
            "id": 1270318775,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5Lt4a3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1270318775/reactions"
            },
            "updated_at": "2022-10-06T18:07:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1270318775",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Ah, let's just document that then.\r\n\r\nI would say that that solution is probably a fluke from race condition. Ie, its getting set early enough to avoid the bug. The bug is still a bug that should be fixed. But, its not me making the fix to be fair.\r\n\r\nThe issue was _extremely_ annoying to debug, took about 2 days of messing around. Largely because `checkhealth` was giving the old thumbs up. That points to the health checker not using the same thing as what everything else is, as @erw7 pointed out.\r\n\r\nThe better fix is probably to change from providing a global variable to configure and rather direct the user to call a function to reload the provider with a new host prog. Single source of truth and all, stops the global being used as a bad pointer.\r\n",
            "created_at": "2022-10-06T16:03:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1270330509",
            "id": 1270330509,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5Lt7SN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1270330509/reactions"
            },
            "updated_at": "2022-10-06T16:03:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1270330509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/253048?v=4",
                "events_url": "https://api.github.com/users/jhogendorn/events{/privacy}",
                "followers_url": "https://api.github.com/users/jhogendorn/followers",
                "following_url": "https://api.github.com/users/jhogendorn/following{/other_user}",
                "gists_url": "https://api.github.com/users/jhogendorn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jhogendorn",
                "id": 253048,
                "login": "jhogendorn",
                "node_id": "MDQ6VXNlcjI1MzA0OA==",
                "organizations_url": "https://api.github.com/users/jhogendorn/orgs",
                "received_events_url": "https://api.github.com/users/jhogendorn/received_events",
                "repos_url": "https://api.github.com/users/jhogendorn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jhogendorn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jhogendorn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jhogendorn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The better fix is probably to change from providing a global variable to configure and rather direct the user to call a function to reload the provider with a new host prog.\r\n\r\nThen that causes slow startup, which was the point of the variable in the first place.\r\n\r\nWhy do you think there is a \"race\"? There is certainly an _order of operations_ issue, but not necessarily a race.",
            "created_at": "2022-10-06T18:08:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1270487170",
            "id": 1270487170,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LuhiC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1270487170/reactions"
            },
            "updated_at": "2022-10-06T18:09:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1270487170",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm totally unfamiliar with the neovim architecture, so I don't really know how it loads on startup, whether it does multiple processes or async ops etc. So race seemed a better word.\r\n\r\nI had a quick read of the code, I don't really understand the interaction of init.vim and autoload scripts in terms of order of execution, or if one triggers the other etc.\r\n\r\nBut it looks like the [provider is autoloaded](https://github.com/neovim/neovim/blob/v0.8.0/runtime/autoload/provider/python3.vim) by some kind of trigger at some point, it seems to hinge on `provider#pythonx#Detect` which grabs the var and figures itself out, then registers the plugin later in the autoload. it provides a `provider#python3#Prog` that seems to be a func to grab the detected provider, but thats only used in one place? The provider flow/arch seems to be pretty 'per provider', ie the pattern/api seems fairly loose. Once the plugin is registered into the list of host plugins for rpc calls thats where it gets locked in. The [healthcheck](https://github.com/neovim/neovim/blob/v0.8.0/runtime/autoload/health/provider.vim#L285) calls `provider#pythonx#Detect` again which is why it fails in this bug, because its not grabbing the loaded plugin, its starting ground up with whatever current global state is.\r\n\r\nI'm not sure what parts of this process are fast/slow, i presume any time you call out to a script or external binary its slow. So theres kind of two places that seems to happen, where neovim is doing all the detection stuff, figuring out paths, pyenv, versions etc etc, and where you execute a call to the provider?\r\n\r\nSo the options seem to be, in no particular order, and keeping in mind i have no idea what i'm talking about:\r\n\r\n- give a function, let the user cop the speed penalty of a double register\r\n- change order of invocation re autoload/init.vim stuff so the global var is correct in time\r\n- rearchitect so first invocation to the provider detects/loads from the global var\r\n- provide a function to force a provider redetect/reload (ie the user knowingly pays a speed penalty)\r\n- provide a function to trigger provider load (ie let the user schedule the order of first run after config)\r\n- refactor checkhealth to execute against the registered provider rather than rebuild it, and or have it report a cache of what the provider found when it tried to load.\r\n\r\nlots of pros and cons.\r\n\r\nBecause I don't know where the slow part is (or what the actual speed penalty is, 0.01ms or 1s), hard for me to offer anything more useful. If it were me I'd probably try to refactor for a lazy-load and cache approach, and give hooks for checkhealth to read directly against the loaded provider rather than spinning up a parallel ghost provider. Or, depending on how the rpc calls work, if they're keeping a python executable path in memory somewhere, change that to a function that grabs the global var, so its 'always correct'. although that would probably lead to weirdness in the boot where there is not yet a host var.\r\n\r\nAgain, super aware i'm not the one doing the work. Just scrubbing through the code trying to be somewhat useful.\r\n\r\nWrt the the various providers, theres lots and lots of code thats trying to detect multiple install locations, version manager installs, diff package manager installs etc etc etc. And you end up with weirdness like how the node provider you cant change the node binary, but you can change the host binary, so you can kind of mismatch that inadvertently. Would it perhaps be an idea to drop a lot of that complexity and rely on shimming? ie, expect your provider bin to always exist at location x, where location x is a folder of symlinks to the correct binaries? have a reshim function to redo them. cut out all the constant detection stuff. Or potentially support redefining the actual binary called. ie, atm python is just hardcoded as python, but most version tools provide exec commands. so you could let the user spec it as `asdf python exec`. or even weirder `docker run python:somever` lol. would allow use of things like `npx` for node.\r\n\r\nPoint being it might be worth offloading that complexity, and make it easier to support providers as isolated environments. (python virtualenvs, node project level installs, ruby doesnt have great options but gemsets from rvm kinda, perl has carton local). I have my providers doing this in my config dotfiles, its all symlinks and wrapping bash scripts to abstract this stuff out to keep providers isolated/clean.\r\n\r\ntwo birds one stone.\r\n\r\n",
            "created_at": "2022-10-07T06:15:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1271157029",
            "id": 1271157029,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LxFEl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1271157029/reactions"
            },
            "updated_at": "2022-10-07T06:15:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1271157029",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/253048?v=4",
                "events_url": "https://api.github.com/users/jhogendorn/events{/privacy}",
                "followers_url": "https://api.github.com/users/jhogendorn/followers",
                "following_url": "https://api.github.com/users/jhogendorn/following{/other_user}",
                "gists_url": "https://api.github.com/users/jhogendorn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jhogendorn",
                "id": 253048,
                "login": "jhogendorn",
                "node_id": "MDQ6VXNlcjI1MzA0OA==",
                "organizations_url": "https://api.github.com/users/jhogendorn/orgs",
                "received_events_url": "https://api.github.com/users/jhogendorn/received_events",
                "repos_url": "https://api.github.com/users/jhogendorn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jhogendorn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jhogendorn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jhogendorn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Your analysis sounds mostly correct, except that nothing is \"async\". It's deterministic. That's why just documenting where to put the override, is good enough--it's certainly at least as good as asking users to \"rehash a symlink\". Any fixes needed for `:checkhealth` also are certainly worth doing.\r\n\r\nSimplifying and DRYing the provider internals has been in the backlog.\r\n\r\n> Would it perhaps be an idea to drop a lot of that complexity and rely on shimming? ie, expect your provider bin to always exist at location x, where location x is a folder of symlinks to the correct binaries? have a reshim function to redo them. cut out all the constant detection stuff.\r\n\r\n$PATH serves that purpose, no? The detection stuff becomes a problem when $PATH isn't easy. And in all cases, we must do version checks and check that the interpreter actually works.",
            "created_at": "2022-10-07T09:22:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1271342732",
            "id": 1271342732,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LxyaM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1271342732/reactions"
            },
            "updated_at": "2022-10-07T09:22:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1271342732",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "If its deterministic, what part of the process triggers the autoload of providers? If position in init.vim can influence things than something in init.vim triggers it? Just trying to get my understanding correct.\r\n\r\n$PATH is kind of tricky, because its contextually different. Your average user probably just has a provider (lets say python) from the system in their path in /usr/bin or something. No matter where they are, python is python. But here are some other scenarios:\r\n\r\n- They have a virtualenv, so python on path is the one in virtualenv\r\n- They use a version manager of some kind, so the python on path will be determined by the version manager tooling\r\n- The user does something tricksy rabbit in particular, such as having `./bin` on path with a python file in there (a shell script or symlink or whatever).\r\n\r\nIt's not unheard of for the python of the users project and a 'global tooling' python to be different. This causes issues, obviously. The naive fix is in your virtualenv to just pip install neovim but then thats in your virtualenv and you have to account for the fact you've got packages in there that need special treatment (such as making sure they dont sneak into requirements.txt and then get built into whatever target). Neovim sort of accounts for this with python and the virtualenv handling.\r\n\r\nSo you cant, really, trust $PATH. like yes you respect it, but if $PATH did everything you wouldnt need `g:python_host_prog` right?\r\n\r\nThe point to reshimming is basically the argument of compile vs runtime. At the moment, all the version checking and determining correct tools (is it npm, yarn, pnpm? what version of python? pip? etc) is all runtime. So theres concerns about it being fast/slow. If you shift all that stuff from runtime to compile time, then you pay that perf penalty once on compile.\r\n\r\nCompile doesn't really exist in this context, so what it actually is, is cache. You build your shims, cache and key it and then dont redo it until something invalidates the cache. At the moment, you do the build every startup, and theres no way to invalidate the cache, you just avoid a rebuild with the loaded flags. If you 'compile' and keep the cache between runs, then you pay perf penalty on first start and then not after. Providers are not going to materially change much/often/ever after first setup. Cache invalidation can be checksum on the binary or user driven or whatever mechanism you want.\r\n\r\nTheres also odd edge cases in the current approach. For example, with the node provider, I can't actually specify what node version/binary gets used. It just picks up whatever node is on the path at the time. The assumption is that theres 1 node installed, and the neovim host package is installed globally. The `g:nodejs_host_prog` var actually has to point to the `neovim_node_host` binary somewhere, but it gets passed as `node <hostprog>`. So, if i install it in node v5, but local project/path is node v6, it will do `nodev5 <hostproginstalledinv6context>` which may break things. You can leverage the system to install the host package in a local dir structure, `$SOMEPATH/node_modules/bin/neovim_node_host`, but this gap wrt the node binary makes that a little touchy. fine until its not.\r\n\r\nVersion managers are common, so commands like `versionmanager exec <bin>` are common. In the case of node, you also have the `npx` tool, so you're actually not using node directly at all. so `node neovim_node_host` is wrong, and `asdf exec npx neovim_node_host` is probably better. And honestly, everything out there has some special tooling. Give it a minute and there will be another node package manager. Rather than having to write support into neovim for that stuff, why not shuffle it out to userland config more. Especially since version managers typically rely on current directory context to load a tool version file, or you spec it as part of the exec command.\r\n\r\nIf you want to get even more complicated, in certain contexts it gets more tricky. If you spec a special nvim python venv, then you say run coc with coc-pyright, its going to drop pyright into that venv. Which then will be unhappy because none of your imports will resolve for it, because its in a different venv to your project one. Phew, how many ways do you want to skin this cat? The best approach I've found is to either mess with $PYTHON_PATH, or more commonly add extra search paths in `pyproject.toml`. I have no expectation that Neovim handle this, but it would be a cool feature for the virtualenv detection stuff to figure out this pathing.\r\n\r\nAt the moment, you can see how I kind of manipulate all this in [my config dotfiles](https://github.com/jhogendorn/dotconfig/tree/master/nvim/providers). I'm feeding nvim a generic 'heres your binary' for the host prog, and depending on what i can get away with, that binary is actually either a symlink or a wrapping shell script, and the whole thing works fairly hard to keep a nice separate neovim playpen for these things.\r\n\r\nNone of that stuff would be needed, nor would a lot of the neovim internal fussing over detection, if we could more directly spec and cache how the provider gets called/executed. a rough stab might look like:\r\n\r\n`provider('node', { 'path': $XDG_CONFIG_HOME.'/nvim/providers', 'exec': 'asdf npx neovim_node_host' })`\r\n`provider('python3', { 'path': $XDG_CONFIG_HOME.'nvim/providers', 'exec': 'venv/bin/python3 -m neovim', 'env': { 'PYTHON_PATH': $XDG_CONFIG_HOME.'/nvim/providers/venv/:'.$PYTHON_PATH } })`\r\n`provider('perl', { 'path': $XDG_CONFIG_HOME.'nvim/providers', 'exec': 'asdf carton exec neovim' })`\r\n`provider('ruby', { 'exec': 'ruby neovim_host_prog' })`\r\n\r\nso on, so forth. this is a somewhat naive example because i havent fully considered all the details, more just a rough sketch. The config object for the provider could be hashed in some way as the cache key and it uses that key to invalidate and redo the various version/compat checks.\r\n\r\nBasically, I'm advocating:\r\n\r\n- More direct user control over the provider\r\n- Caching the provider checks on success\r\n- Checkhealth rerunning those checks (as in same code) directly\r\n- This then gives scope for expanding provider configuration to give Neovim control over environment/setup\r\n- By the above, providers as neovim specific walled gardens that dont touch my project are more viable\r\n- If you expose more config to the user, you can worry less about their setup. are they using yarn, cargo, npm, npx, pnpm, carton, composer, apt? neovim tracking all that is sisyphean. do they use rbenv, rvm, asdf, pyenv, system, brew, apt, apk, yum, carton or cpanm? can you `carton exec` or do you need to mess with `PERL5_PATH`? Just let the user spec the right command, have sane defaults.\r\n\r\n(in the meantime, yes just fixing the docs is the obvious first step)",
            "created_at": "2022-10-07T11:30:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1271472221",
            "id": 1271472221,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5LySBd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1271472221/reactions"
            },
            "updated_at": "2022-10-07T11:30:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1271472221",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/253048?v=4",
                "events_url": "https://api.github.com/users/jhogendorn/events{/privacy}",
                "followers_url": "https://api.github.com/users/jhogendorn/followers",
                "following_url": "https://api.github.com/users/jhogendorn/following{/other_user}",
                "gists_url": "https://api.github.com/users/jhogendorn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jhogendorn",
                "id": 253048,
                "login": "jhogendorn",
                "node_id": "MDQ6VXNlcjI1MzA0OA==",
                "organizations_url": "https://api.github.com/users/jhogendorn/orgs",
                "received_events_url": "https://api.github.com/users/jhogendorn/received_events",
                "repos_url": "https://api.github.com/users/jhogendorn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jhogendorn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jhogendorn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jhogendorn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If its deterministic, what part of the process triggers the autoload of providers?\r\n\r\nanything that calls has('python')\r\n\r\n> are they using yarn, cargo, npm, npx, pnpm, carton, composer, apt? neovim tracking all that is sisyphean. ... Just let the user spec the right command, have sane defaults.\r\n\r\nagree in general, if it can be done in a simple, low risk way without tons of docs required to read.",
            "created_at": "2022-10-07T18:38:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1271946458",
            "id": 1271946458,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5L0Fza",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1271946458/reactions"
            },
            "updated_at": "2022-10-07T18:44:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1271946458",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The bug is still a bug that should be fixed.\r\n\r\nOn second thought, I have come to the conclusion that this is not a bug but a specification by design.  It is a simple design that must be configured before use and the provider, once activated, persists until the end of neovim.\r\n\r\nThere are roughly three possible solutions to this problem.\r\n\r\n1. If `g:...host_prog` and `s:prog` are different by `:checkhelth`, it reports that the user's setting of `g:...host_prog` is ignored.\r\n2. If the provider is already loaded when setting `g:…host_prog`, a warning will be displayed (It can be implemented by using `dictwatcheradd()`).\r\n3. Redesign to accommodate provider reloading.\r\n\r\n3 is not worth the cost because this problem occurs only infrequently and there is no use case for switching providers. 2 can cause performance problems. Also, there is no advantage in that it is no different from 1 in that it does not know when the provider is loaded. So I think the best solution is to implement 1 and improve the documentation.\r\n\r\nOf course you can implement 3 and create a PR if you need it.",
            "created_at": "2022-10-08T10:23:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1272287159",
            "id": 1272287159,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5L1Y-3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1272287159/reactions"
            },
            "updated_at": "2022-10-08T10:23:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1272287159",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11682285?v=4",
                "events_url": "https://api.github.com/users/erw7/events{/privacy}",
                "followers_url": "https://api.github.com/users/erw7/followers",
                "following_url": "https://api.github.com/users/erw7/following{/other_user}",
                "gists_url": "https://api.github.com/users/erw7/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/erw7",
                "id": 11682285,
                "login": "erw7",
                "node_id": "MDQ6VXNlcjExNjgyMjg1",
                "organizations_url": "https://api.github.com/users/erw7/orgs",
                "received_events_url": "https://api.github.com/users/erw7/received_events",
                "repos_url": "https://api.github.com/users/erw7/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/erw7/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/erw7/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/erw7",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">> If its deterministic, what part of the process triggers the autoload of providers?\r\n>>\r\n> anything that calls has('python')\r\n\r\nAnd function calls included in `runtime/provider/python3.vim`. It includes the following and more.\r\n\r\n- Direct function calls (`:call provider#python3#Prog()` etc...)\r\n- Calling functions registered in `rplugin.vim`\r\n- Firing of autocommand registered in `rplugin.vim`\r\n- Execution of commands registered in `rplugin.vim`\r\n- Calls to `py3eval()`, `pyeval()`, `pyxeval()`\r\n\r\nDirect loading of `runtime/provider/python3.vim` (`:runtime autoload/provider/python3.vim` etc...)\r\n\r\nIt could also be due to a plugin you are using.\r\n\r\nAfter executing the following command, examining the `verbose.log` should help you find out.\r\n\r\n```\r\nnvim -V9verbose.log a.py\r\n```\r\n",
            "created_at": "2022-10-08T10:24:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1272287219",
            "id": 1272287219,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5L1Y_z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1272287219/reactions"
            },
            "updated_at": "2022-10-08T10:24:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1272287219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11682285?v=4",
                "events_url": "https://api.github.com/users/erw7/events{/privacy}",
                "followers_url": "https://api.github.com/users/erw7/followers",
                "following_url": "https://api.github.com/users/erw7/following{/other_user}",
                "gists_url": "https://api.github.com/users/erw7/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/erw7",
                "id": 11682285,
                "login": "erw7",
                "node_id": "MDQ6VXNlcjExNjgyMjg1",
                "organizations_url": "https://api.github.com/users/erw7/orgs",
                "received_events_url": "https://api.github.com/users/erw7/received_events",
                "repos_url": "https://api.github.com/users/erw7/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/erw7/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/erw7/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/erw7",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "\r\n> After executing the following command, examining the `verbose.log` should help you find out.\r\n> \r\n> ```\r\n> nvim -V9verbose.log a.py\r\n> ```\r\n\r\nhttps://gist.github.com/jhogendorn/49eca85bf912f1bbefe2f96ddb4ad511\r\n\r\nRan it with both the bug triggered and not. Not exactly sure what I'm looking for tbqh.\r\n\r\n> agree in general, if it can be done in a simple, low risk way without tons of docs required to read.\r\n\r\nI think a very simple structure like i proposed is probably roughly the right direction? its no more complex than the existing approach, and the defautls would just be `exec: python` ie rely on $PATH. Providing different examples will make it pretty clear how it works.\r\n\r\n> 3 is not worth the cost because this problem occurs only infrequently and there is no use case for switching providers. 2 can cause performance problems. Also, there is no advantage in that it is no different from 1 in that it does not know when the provider is loaded. So I think the best solution is to implement 1 and improve the documentation.\r\n> \r\n> Of course you can implement 3 and create a PR if you need it.\r\n\r\nI don't necessarily think provider reloading is needed, like you said once init.vim is parsed its very very unlikely a user will want to reload a provider while running. It's definitely an ordering issue that reloading kind of papers over. If you do reloading then some amount of init.vim will have executed with the 'wrong' provider (unless you cache between nvim invocations, where your first run will be partially broken. Thats an annoying heisenbug to give people to deal with)\r\n\r\nSo, as you said, sorting out checkhealth a bit better, and warning the user if they redefine the provider 'too late'.\r\n\r\nFeels to me like good goals might be:\r\n\r\n1. Make the provider config in init.vim more powerful to shift the full details to the user config\r\n2. Document that provider config needs to happen very early. Throw errors if you try and redefine provider after it exists\r\n3. Have checkhealth use the loaded provider, not make a new shadow provider\r\n4. Optional: Cache the provider version / environment checking so it doesnt slow every boot\r\n\r\n(I would be happy to do a pr for this but I am quite out of my depth on it. No real vimscript ability, I only write C for arduino/esp stuff, never touched lua. If theres a good guide somewhere on how to get a neovim dev environment setup i can try and give some of it a stab though.)",
            "created_at": "2022-10-09T05:48:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1272462336",
            "id": 1272462336,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5L2DwA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1272462336/reactions"
            },
            "updated_at": "2022-10-09T05:48:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1272462336",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/253048?v=4",
                "events_url": "https://api.github.com/users/jhogendorn/events{/privacy}",
                "followers_url": "https://api.github.com/users/jhogendorn/followers",
                "following_url": "https://api.github.com/users/jhogendorn/following{/other_user}",
                "gists_url": "https://api.github.com/users/jhogendorn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jhogendorn",
                "id": 253048,
                "login": "jhogendorn",
                "node_id": "MDQ6VXNlcjI1MzA0OA==",
                "organizations_url": "https://api.github.com/users/jhogendorn/orgs",
                "received_events_url": "https://api.github.com/users/jhogendorn/received_events",
                "repos_url": "https://api.github.com/users/jhogendorn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jhogendorn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jhogendorn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jhogendorn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If theres a good guide somewhere on how to get a neovim dev environment setup i can try and give some of it a stab though.)\r\n\r\nhttps://github.com/neovim/neovim/blob/master/BUILD.md#quick-start",
            "created_at": "2022-10-09T11:56:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-1272526040",
            "id": 1272526040,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM5L2TTY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1272526040/reactions"
            },
            "updated_at": "2024-02-15T12:53:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1272526040",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Tons of discussion but no one stepped up to improve the docs, so just going to close this.\n\nIf you disagree with closing this issue, then send a small docs improvement.",
            "created_at": "2025-08-16T22:24:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/20484#issuecomment-3193940347",
            "id": 3193940347,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20484",
            "node_id": "IC_kwDOAPphoM6-X6l7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3193940347/reactions"
            },
            "updated_at": "2025-08-16T22:25:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3193940347",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 20,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/20484/comments",
    "created_at": "2022-10-04T14:57:53Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/20484/events",
    "html_url": "https://github.com/neovim/neovim/issues/20484",
    "id": 1396426915,
    "labels": [
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 144672485,
            "name": "provider",
            "node_id": "MDU6TGFiZWwxNDQ2NzI0ODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/provider"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "",
            "id": 606691254,
            "name": "has:plan",
            "node_id": "MDU6TGFiZWw2MDY2OTEyNTQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:plan"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/20484/labels{/name}",
    "locked": true,
    "milestone": {
        "closed_at": null,
        "closed_issues": 738,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 629,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-08-17T22:15:11Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5TO8ij",
    "number": 20484,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/20484/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/20484/timeline",
    "title": "Python provider fails when opening nvim with a .py file",
    "type": null,
    "updated_at": "2025-08-16T22:25:20Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/20484",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/253048?v=4",
        "events_url": "https://api.github.com/users/jhogendorn/events{/privacy}",
        "followers_url": "https://api.github.com/users/jhogendorn/followers",
        "following_url": "https://api.github.com/users/jhogendorn/following{/other_user}",
        "gists_url": "https://api.github.com/users/jhogendorn/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jhogendorn",
        "id": 253048,
        "login": "jhogendorn",
        "node_id": "MDQ6VXNlcjI1MzA0OA==",
        "organizations_url": "https://api.github.com/users/jhogendorn/orgs",
        "received_events_url": "https://api.github.com/users/jhogendorn/received_events",
        "repos_url": "https://api.github.com/users/jhogendorn/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jhogendorn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jhogendorn/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jhogendorn",
        "user_view_type": "public"
    }
}