{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Vim's encryption code was removed. This ticket explores the idea of providing a basic alternative to enable the user to decrypt, edit, and re-encrypt a file using Neovim in a way that is reasonably secure.\r\n\r\n#694 suggests:\r\n- avoiding any sort of random access mode and focusing entirely on something that decrypts the entire file in one fell swoop when it's opened, and rewrites a brand new ciphertext with a new random nonce each time the file is written.\r\n- Using XSalsa20+Poly1305 (from NaCl) or ChaCha20+Poly1305 with a random nonce from /dev/urandom (or CryptoGenRandom on Windows) should be OK\r\n\r\nSee also: http://tonyarcieri.com/all-the-crypto-code-youve-ever-written-is-probably-broken\r\n\r\nPotential solutions:\r\n\r\n- [libsodium](https://download.libsodium.org/doc/)\r\n- [aws-encryption-sdk-c](https://github.com/aws/aws-encryption-sdk-c/)\r\n- [google/tink](https://github.com/google/tink)\r\n\r\n# Plan\r\n\r\n* [google/tink](https://github.com/tink-crypto) has a very good design ([more info](https://news.ycombinator.com/item?id=17880789)) which minimizes room for error.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Another question to discuss is: should core neovim provide such a feature at all? As @kopischke pointed out, neovim doesn't even consider interfacing with the system clipboard essential enough to be included in the core. This is arguably a much more common operation in a text editor than cryptography. If the neovim philosophy is to offload as many features as possible to plugins, then this should definitely be one of them.\n",
            "created_at": "2014-05-08T07:44:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42521583",
            "id": 42521583,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTIxNTgz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42521583/reactions"
            },
            "updated_at": "2024-05-14T13:55:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42521583",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3405586?v=4",
                "events_url": "https://api.github.com/users/schmee/events{/privacy}",
                "followers_url": "https://api.github.com/users/schmee/followers",
                "following_url": "https://api.github.com/users/schmee/following{/other_user}",
                "gists_url": "https://api.github.com/users/schmee/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/schmee",
                "id": 3405586,
                "login": "schmee",
                "node_id": "MDQ6VXNlcjM0MDU1ODY=",
                "organizations_url": "https://api.github.com/users/schmee/orgs",
                "received_events_url": "https://api.github.com/users/schmee/received_events",
                "repos_url": "https://api.github.com/users/schmee/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/schmee/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/schmee/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/schmee",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Personally, for the reasons I named in #694 already, I agree with @schmee and think Neovim should stay as far away from providing any kind of encryption as possible: this is a highly complex, specialized area of software development that falls far outside the core responsibility of a text editor and that can (and, seeing encryption is meant to protect data malevolent people are interested in, usually will) critically compromise user security at the slightest error.\n\nI think a safer course would be to provide a “secure” mode of editing files which guarantees Neovim  only ever loads the file in memory, writes no swap or persistent undo, purges memory contents on unload etc. Encryption / decryption plugins could then safely hook into that. Such an API and / or set of `:` commands would greatly reduce the security-critical overhead for Neovim; if we include crypto into the core instead, we will not only have to maintain all of the above (for that is required for in-app crypto to be useful), but also to constantly monitor the evolution of crypto security, regularly audit the chosen scheme / lib, and issue critical security fixes each time the chosen crypto library or implementation proves vulnerable  – which it will. Hardware advancements, software entropy, human malice and the NSA will see to that.\n\n---\n\n[EDIT] the “secure” API proposal was a brainfart. Left as is for the sake of the thread’s integrity, but see my next comment on the issue.\n",
            "created_at": "2014-05-08T08:30:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42524766",
            "id": 42524766,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTI0NzY2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42524766/reactions"
            },
            "updated_at": "2014-05-08T20:38:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42524766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80906?v=4",
                "events_url": "https://api.github.com/users/kopischke/events{/privacy}",
                "followers_url": "https://api.github.com/users/kopischke/followers",
                "following_url": "https://api.github.com/users/kopischke/following{/other_user}",
                "gists_url": "https://api.github.com/users/kopischke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kopischke",
                "id": 80906,
                "login": "kopischke",
                "node_id": "MDQ6VXNlcjgwOTA2",
                "organizations_url": "https://api.github.com/users/kopischke/orgs",
                "received_events_url": "https://api.github.com/users/kopischke/received_events",
                "repos_url": "https://api.github.com/users/kopischke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kopischke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kopischke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kopischke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> falls far outside the core responsibility of a text editor and that can [...] critically compromise user security at the slightest error.\n\n@kopischke Noted, and I agree. The discussion in #694 should make it clear that the goal is to do the simplest thing that could cover the common use-case and be secure. It doesn't necessarily need to be part of the core, but I'd like to hear you address the questions I raised in #694 : how is it preferrable (\"more secure\") to require the user to find or create a random plugin that accomplishes the task? What script or plugin do you personally recommend? (\"Make your own\" is not a valid answer, it's a cop-out.)\n\n> Encryption / decryption plugins could then safely hook into that\n\nThat's basically what this ticket is for. \n\n> if we include crypto into the core instead, we will not only have to maintain all of the above (for that is required for in-app crypto to be useful)\n\nWe could, in this exceptional case, require the user to download libsodium.so/dll on their own. (I'm assuming there is no security issue with demand-loading--would be interested to hear from someone who knows better.)\n\n> but also to constantly monitor the evolution of crypto security, regularly audit the chosen scheme / lib, and issue critical security fixes each time the chosen crypto library or implementation proves vulnerable – which it will.\n\nSo every user is supposed to do that instead? \n",
            "created_at": "2014-05-08T18:26:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42586600",
            "id": 42586600,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTg2NjAw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42586600/reactions"
            },
            "updated_at": "2014-05-08T18:30:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42586600",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> That's basically what this ticket is for.\n\n@justinmk duly noted and agreed. I’m just voicing the opinion that Neovim should not include any encryption facilities at all. On second thought, _it should not even include any “secure” editing API_. Both builtin encryption and a “secure” API amount to security theater: file level encryption is for transport security, not for security at rest. You need full disk encryption, both of the data disk and of the disk housing the temp, swap and hibernation data, to even come close, as no user software can guarantee the OS won’t write unencrypted swap or hibernation data to disk, keep FIFOs recoverable on the FS, or similar.\n\n**The difference between both is one (offering in-Neovim crypto) is a can of worms incurring a huge moral contract for zero net security gain, the other (a “secure” editing API) is a bit of low maintenance, disingenuous papering … over zero net security gain.**\n\n> how is it preferrable (\"more secure\") to require the user to find or create a random plugin that accomplishes the task?\n\nNot lulling the user in the expectation of their data being safe when it is not **is** a net security gain, counterintuitive as that may seem – it forces users to assess security solutions. In this light, anybody who trust their data security to a random plugin (possibly one written in VImL – _gasp_) is playing a fool’s game. I just advocate Neovim should not be playing that game too.\n\n> So every user is supposed to do that instead?\n\nNope. Users should rely on a few, battle-tested libraries / tools where the OS offering is not enough, and read up on crypto and data security enough to realize file-level encryption is not providing security at rest, unless the data is never, ever accessed. Keeping these libraries / tools up to date is their maintainer’s responsibility (see moral contract mentioned above).\n\n> What script or plugin do you personally recommend? (\"Make your own\" is not a valid answer, it's a cop-out.)\n\nI recommend you use transparent full disk encryption on your system disk and all data disks (FileVault in my case, but LUKS, BitLocker etc. will do as well). And that you run away screaming when you see an editor plugin that claims to offer _secure_ editing of file level encrypted data.\n",
            "created_at": "2014-05-08T20:07:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42599702",
            "id": 42599702,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTk5NzAy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42599702/reactions"
            },
            "updated_at": "2014-05-08T20:08:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42599702",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80906?v=4",
                "events_url": "https://api.github.com/users/kopischke/events{/privacy}",
                "followers_url": "https://api.github.com/users/kopischke/followers",
                "following_url": "https://api.github.com/users/kopischke/following{/other_user}",
                "gists_url": "https://api.github.com/users/kopischke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kopischke",
                "id": 80906,
                "login": "kopischke",
                "node_id": "MDQ6VXNlcjgwOTA2",
                "organizations_url": "https://api.github.com/users/kopischke/orgs",
                "received_events_url": "https://api.github.com/users/kopischke/received_events",
                "repos_url": "https://api.github.com/users/kopischke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kopischke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kopischke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kopischke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> file level encryption is for transport security, not for security at rest. You need full disk encryption, both of the data disk and of the disk housing the temp, swap and hibernation data\n\n@kopischke Thank you, now I have a better understanding.\n\n> no user software can guarantee the OS won’t write unencrypted swap\n\nI'm not at all trying to be contentious, but are you saying:\n- KeePass provides no security? \n- Chrome should store personal data in clear text, if the OS does not have a keychain service? \n- users should not bother encrypting at-rest files with gpg? \n\n> lulling the user in the expectation of their data being safe\n\nCouldn't that be mitigated by making the risks known to the user? I noticed that the gpg manual only talks about symmetric cyphers in the context of message transport, so gpg seems to assume that users would never use gpg to encrypt files at rest. [The gpg manual](https://www.gnupg.org/gph/en/manual/x110.html) makes no explicit warning about the inappropriateness of using gpg as a file encryption tool. Furthermore, there are numerous, countless articles explaining how to use gpg for this purpose. So gpg is also guilty of this, to some degree.\n\n> FileVault in my case, but LUKS, BitLocker etc. will do as well\n\nFileVault was totally broken in Tiger :) which is partly why I gave up the hassle of full-disk encryption. \n\nBut I'm essentially convinced of your position now: the distinction between \"transport\" and \"at-rest\" is enlightening. Thanks. \n\nIt is frustrating, though, that this is the state of the art. Why don't operating systems have a way of flagging a process so that its data and related I/O are protected? Is there work being done on this? \n\nIs the Linux [crypto API](http://en.wikipedia.org/wiki/Crypto_API_%28Linux%29) of any use for software that wants to securely decrypt-edit-encrypt?\n",
            "created_at": "2014-05-08T21:31:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42608968",
            "id": 42608968,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjA4OTY4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42608968/reactions"
            },
            "updated_at": "2014-05-08T21:31:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42608968",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Both builtin encryption and a “secure” API amount to security theater: file level encryption is for transport security, not for security at rest.\n\n@kopischke you should probably take a look at the multitude of systems which provide distributed encrypted filesystems, including Freenet, GNUnet, and Tahoe-LAFS. There are many systems which aim to provide \"at rest\" confidentiality and integrity for files.\n\nPassword protecting files in vim with a decent enough scheme is not an unreasonable thing to do. scrypt+chacha20+poly1305 is a reasonable combination for that use case.\n\nDeleting what's already there and starting over with a new scheme that gets a reasonable amount of scrutiny and is based on modern, authenticated encryption primitives (none of the existing schemes use authenticated encryption and therefore don't assure integrity) is probably the safest way to go, IMO.\n",
            "created_at": "2014-05-09T06:39:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42637719",
            "id": 42637719,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjM3NzE5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42637719/reactions"
            },
            "updated_at": "2014-05-09T06:39:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42637719",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/797?v=4",
                "events_url": "https://api.github.com/users/tarcieri/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarcieri/followers",
                "following_url": "https://api.github.com/users/tarcieri/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarcieri/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarcieri",
                "id": 797,
                "login": "tarcieri",
                "node_id": "MDQ6VXNlcjc5Nw==",
                "organizations_url": "https://api.github.com/users/tarcieri/orgs",
                "received_events_url": "https://api.github.com/users/tarcieri/received_events",
                "repos_url": "https://api.github.com/users/tarcieri/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarcieri/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarcieri/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarcieri",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> you should probably take a look at the multitude of systems which provide distributed encrypted filesystems, including Freenet, GNUnet, and Tahoe-LAFS. There are many systems which aim to provide \"at rest\" confidentiality and integrity for files.\n\n@tarcieri there certainly are, but that argument is conflating two entirely different security aspects: _confidentiality_ (i.e. access control) and _integrity_ (i.e. proof of origin and untampered content). The encryption discussed in this issue and its cohort are about content encryption for the first purpose, not about cryptographically signing files for the latter, and thus confidentiality s is what my comments are about.\n\nWhen it come to this, I am not sure how Freenet or GNUnet figure in the equation: both are content distribution systems that use encryption to provide private and tamper proof access to publicly available content (in the case of Freenet without guaranteeing its persistent availability, as unrequested keys can drop off the nodes). Neither aim at restricting access to data to a designated number of users (the [GNUnet FAQ](https://gnunet.org/faq-page#t8n213) states “In any event, we are not trying to hide content”). They are firmly on the integrity side of things, with a side order of privacy – a laudable aim, but not the issue at hand.\n\nAs to Tahoe-LAFS, its aim is to ensure confidentiality of data distributed over potentially untrustworthy network storage for data replication purposes. Note how the data is never decrypted on the network itself, but only on the clients, which is what I mean by transport security (_out of decrypted usage context security_ would be a better term, but it’s a bit unwieldy, as is its opposite _in decrypted usage context security_. I’ll gladly take any better term you have on offer :)).\n\n> – KeePass provides no security?\n> – Chrome should store personal data in clear text, if the OS does not have a keychain service?\n> – users should not bother encrypting at-rest files with gpg?\n\n@justinmk password stores provide a certain amount of security against accidental disclosure (a program or person reading data that is not meant for them, not necessarily out of malicious intent, think file searching utilities for instance) through a mechanism that cannot be waved away with administrative control of the system, as well as transport security in the sense that an out of context copy of the concerned files should be as secure as the encryption they use (both scheme and implementation). That is basically true of encrypting individual files too, though these usually carry so much metadata (name, size, time stamps) that guesses can be made about their contents, thus weakening their out of context security. What this doesn't change is that if you decrypt data temporarily on a system, any attacker that can run full disk forensics on that system puts you at the mercy of the accessing software’s and the OS’ ability to never leave any incidental data disclosing content or facilitating circumvention of the access control scheme. Hence the idea behind full disk encryption: mitigate this by expanding the secured perimeter to enclose all persistent incidental data. \n\nWhat file level encryption does not provide, despite claims to the contrary, is secure compartmentalisation. Any attacker that can breach your perimeter to tamper with your system will be able to subvert its security in as many ways as human malice can devise (just think key loggers, or a modified version of the gpg binary – you do check its checksum against the documented one via a verifiably secure communication channel before every use, don’t you? No? Neither do I :)). Full disk encryption OTOH makes no pretence of offering anything but perimeter security, which in my book is a net security gain even when in use (all data accessible) as it does not foster the illusion that  segments of your data are secured against anything but accidental disclosure or the weakest, least sophisticated of attackers.\n\n> FileVault was totally broken in Tiger :) \n\nFileVault before 10.7 was a mess, and it wasn’t full disk encryption anyway: it mounted an encrypted disk image as your home directory. I only ever used it to secure company data against casual disclosure in case I lost my machine (a due diligence thing). The current implementation OTOH, FileVault 2, is a firmware level full disk encryption scheme actually worthy of its name.\n",
            "created_at": "2014-05-09T08:37:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42644567",
            "id": 42644567,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjQ0NTY3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42644567/reactions"
            },
            "updated_at": "2014-05-09T09:05:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42644567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80906?v=4",
                "events_url": "https://api.github.com/users/kopischke/events{/privacy}",
                "followers_url": "https://api.github.com/users/kopischke/followers",
                "following_url": "https://api.github.com/users/kopischke/following{/other_user}",
                "gists_url": "https://api.github.com/users/kopischke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kopischke",
                "id": 80906,
                "login": "kopischke",
                "node_id": "MDQ6VXNlcjgwOTA2",
                "organizations_url": "https://api.github.com/users/kopischke/orgs",
                "received_events_url": "https://api.github.com/users/kopischke/received_events",
                "repos_url": "https://api.github.com/users/kopischke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kopischke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kopischke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kopischke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "To cap the above off, without adding to an already overlong comment: **though there are limited use cases for file level encryption to those fully aware of its limitations, neither of these rank as close enough to a text editor’s core responsibilities to incur the maintenance overhead and moral contract that goes with offering any kind of content encryption facilities.** In my book, that is :).\n",
            "created_at": "2014-05-09T08:57:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42646009",
            "id": 42646009,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjQ2MDA5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42646009/reactions"
            },
            "updated_at": "2014-05-09T08:59:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42646009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80906?v=4",
                "events_url": "https://api.github.com/users/kopischke/events{/privacy}",
                "followers_url": "https://api.github.com/users/kopischke/followers",
                "following_url": "https://api.github.com/users/kopischke/following{/other_user}",
                "gists_url": "https://api.github.com/users/kopischke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kopischke",
                "id": 80906,
                "login": "kopischke",
                "node_id": "MDQ6VXNlcjgwOTA2",
                "organizations_url": "https://api.github.com/users/kopischke/orgs",
                "received_events_url": "https://api.github.com/users/kopischke/received_events",
                "repos_url": "https://api.github.com/users/kopischke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kopischke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kopischke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kopischke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@kopischke I have no idea what you're trying to get at, but as long as we're talking about protecting the integrity of ciphertexts, the current implementation doesn't do that, which is yet another problem with it.\n\nRegarding terms like \"transport encryption\", this typically refers to data-in-motion protocols like TLS that need to be resilient in the wake of active attackers that might try to do things like reorder or replay packets or messages.\n\nThat's not really a problem here, provided the entire file is encrypted-then-MACed into a single authenticated ciphertext. In this scenario, we are effectively dealing with data-at-rest. \n",
            "created_at": "2014-05-09T16:46:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42687517",
            "id": 42687517,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjg3NTE3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42687517/reactions"
            },
            "updated_at": "2014-05-09T16:46:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42687517",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/797?v=4",
                "events_url": "https://api.github.com/users/tarcieri/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarcieri/followers",
                "following_url": "https://api.github.com/users/tarcieri/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarcieri/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarcieri",
                "id": 797,
                "login": "tarcieri",
                "node_id": "MDQ6VXNlcjc5Nw==",
                "organizations_url": "https://api.github.com/users/tarcieri/orgs",
                "received_events_url": "https://api.github.com/users/tarcieri/received_events",
                "repos_url": "https://api.github.com/users/tarcieri/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarcieri/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarcieri/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarcieri",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I have no idea what you're trying to get at\n\n@tarcieri talking at cross purposes with you, obviously :). You are saying there are reliable crypto implementations that Neovim **could** use to provide an encrypted editing feature, and I readily bow to your expertise on that. What I am trying to argue is that, _however reliable the implementation_, a higher level assessment tells us that we **should not** provide such a feature.\n",
            "created_at": "2014-05-09T18:17:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42697021",
            "id": 42697021,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjk3MDIx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42697021/reactions"
            },
            "updated_at": "2014-05-09T18:17:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42697021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80906?v=4",
                "events_url": "https://api.github.com/users/kopischke/events{/privacy}",
                "followers_url": "https://api.github.com/users/kopischke/followers",
                "following_url": "https://api.github.com/users/kopischke/following{/other_user}",
                "gists_url": "https://api.github.com/users/kopischke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kopischke",
                "id": 80906,
                "login": "kopischke",
                "node_id": "MDQ6VXNlcjgwOTA2",
                "organizations_url": "https://api.github.com/users/kopischke/orgs",
                "received_events_url": "https://api.github.com/users/kopischke/received_events",
                "repos_url": "https://api.github.com/users/kopischke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kopischke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kopischke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kopischke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@kopischke well then, we agree! I was arguing that the best option is to just delete all the current encryption code and let that be that in #694 ;)\n",
            "created_at": "2014-05-09T18:20:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-42697312",
            "id": 42697312,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjk3MzEy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42697312/reactions"
            },
            "updated_at": "2014-05-09T18:20:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42697312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/797?v=4",
                "events_url": "https://api.github.com/users/tarcieri/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarcieri/followers",
                "following_url": "https://api.github.com/users/tarcieri/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarcieri/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarcieri",
                "id": 797,
                "login": "tarcieri",
                "node_id": "MDQ6VXNlcjc5Nw==",
                "organizations_url": "https://api.github.com/users/tarcieri/orgs",
                "received_events_url": "https://api.github.com/users/tarcieri/received_events",
                "repos_url": "https://api.github.com/users/tarcieri/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarcieri/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarcieri/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarcieri",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "If you wanted to be both secure and compatible, I would note that VimCrypt, if not secure, was at least trying to be future proof.\n\nVimCrypt used to do \"zip\" at first, but then in a later version implemented \"blowfish\" and now treated that as the default. The user could still open \"zip\" encrypted files, and could save new files as \"zip\" if he changed the \"cm\" value.\n\nWhat I would do is release neovim with a new third \"cm\" value as something like \"reject\" which basically means if you press `:X` and enter on an unencrypted file, then by default Vim is going to give you a big red error message saying: \"WARNING: it has been determined that VimCrypt that has been implemented so far is not actually secure, so we don't recommend you use it. If you really really want to use it, then do `set cm=blowfish`\" and reject your attempt to start encryption mode unless you change your \"cm\" from the default. In this case you would still be able to open and save files that were already encrypted by VimCrypt.\n\nAnd then after Neovim is released and people feel they have time to actually implement a secure encryption system, then they can declare it as e.g. \"actuallysecurevimcrypt\" and make THAT the new `:X` default and not show an error message anymore.\n\nSo the timeline of `cm` values for VimCrypt would be:\n1. zip\n2. blowish\n3. reject (first release of neovim)\n4. actuallysecurevimcrypt\n",
            "created_at": "2014-06-09T14:14:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-45494669",
            "id": 45494669,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDk0NjY5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45494669/reactions"
            },
            "updated_at": "2024-05-14T13:54:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45494669",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/116494?v=4",
                "events_url": "https://api.github.com/users/amcsi/events{/privacy}",
                "followers_url": "https://api.github.com/users/amcsi/followers",
                "following_url": "https://api.github.com/users/amcsi/following{/other_user}",
                "gists_url": "https://api.github.com/users/amcsi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amcsi",
                "id": 116494,
                "login": "amcsi",
                "node_id": "MDQ6VXNlcjExNjQ5NA==",
                "organizations_url": "https://api.github.com/users/amcsi/orgs",
                "received_events_url": "https://api.github.com/users/amcsi/received_events",
                "repos_url": "https://api.github.com/users/amcsi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amcsi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amcsi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amcsi",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In this case you would still be able to open and save files that were already encrypted by VimCrypt.\n\nSupporting legacy VimCrypt isn't up for discussion. We already decided to remove it, after a thorough discussion. Only thing up for discussion is https://github.com/neovim/neovim/issues/701#issue-33034271\n",
            "created_at": "2014-06-09T16:56:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-45514706",
            "id": 45514706,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTE0NzA2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45514706/reactions"
            },
            "updated_at": "2014-06-09T16:56:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45514706",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Was initially a little disappointed to see that I could no longer open up my simple Vim encrypted password list.  Not that anything in it is very sensitive, but it was a handy precaution.  However, I had no idea that the Vim default encryption method was so weak.  It's pretty bad that Vim favored backward compatibility over safety.   This is a good article about it:\n\nhttps://dgl.cx/2014/10/vim-blowfish\n\nAnyway, it's very simple to set up autocommands in Neovim to simulate this old feature but with stronger encryption.  The example:\n\naugroup CPT\n  au!\n  au BufReadPre *.cpt set bin\n  au BufReadPre *.cpt set viminfo=\n  au BufReadPre *.cpt set noswapfile\n  au BufReadPost *.cpt let $vimpass = inputsecret(\"Password: \")\n  au BufReadPost *.cpt silent '[,']!ccrypt -cb -E vimpass\n  au BufReadPost *.cpt set nobin\n  au BufWritePre *.cpt set bin\n  au BufWritePre *.cpt '[,']!ccrypt -e -E vimpass\n  au BufWritePost *.cpt u\n  au BufWritePost *.cpt set nobin\naugroup END\n\nComes from:\n\nhttp://vim.wikia.com/wiki/Encryption\n\nAnd works great in Neovim, although could probably be refined further (password should be erased from environment on BufUnload etc).\n",
            "created_at": "2014-12-06T05:53:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-65886864",
            "id": 65886864,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODg2ODY0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/65886864/reactions"
            },
            "updated_at": "2014-12-06T08:25:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/65886864",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6493?v=4",
                "events_url": "https://api.github.com/users/loops/events{/privacy}",
                "followers_url": "https://api.github.com/users/loops/followers",
                "following_url": "https://api.github.com/users/loops/following{/other_user}",
                "gists_url": "https://api.github.com/users/loops/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/loops",
                "id": 6493,
                "login": "loops",
                "node_id": "MDQ6VXNlcjY0OTM=",
                "organizations_url": "https://api.github.com/users/loops/orgs",
                "received_events_url": "https://api.github.com/users/loops/received_events",
                "repos_url": "https://api.github.com/users/loops/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/loops/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/loops/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/loops",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@loops ccrypt is using Rijndael (not AES) in unauthenticated CFB mode with a key derived from a simple hash of the password.\n\nYou'd be better off using gpg2, which supports AES w\\ PBKDF2 for key derivation (note gpg1 used CAST5 for symmetric encryption)\n\nIn the absence of any key stretching / strengthening, passwords can be brute forced.\n",
            "created_at": "2014-12-06T19:08:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-65909745",
            "id": 65909745,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTA5NzQ1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/65909745/reactions"
            },
            "updated_at": "2014-12-06T19:13:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/65909745",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/797?v=4",
                "events_url": "https://api.github.com/users/tarcieri/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarcieri/followers",
                "following_url": "https://api.github.com/users/tarcieri/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarcieri/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarcieri",
                "id": 797,
                "login": "tarcieri",
                "node_id": "MDQ6VXNlcjc5Nw==",
                "organizations_url": "https://api.github.com/users/tarcieri/orgs",
                "received_events_url": "https://api.github.com/users/tarcieri/received_events",
                "repos_url": "https://api.github.com/users/tarcieri/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarcieri/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarcieri/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarcieri",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "This issue should be changed to \"remove all semblances of anything like vimcrypt.\"\n\nFor the reasons @tarccieri points out this really isn't any better. You're providing a false sense of security without the engineering team/resources to do otherwise and inuding any form of this functionality under these conditions is _negligent._ possibly criminally so. At the very least it is unethical and immoral.\n",
            "created_at": "2014-12-06T19:40:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-65910793",
            "id": 65910793,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTEwNzkz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/65910793/reactions"
            },
            "updated_at": "2014-12-06T19:40:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/65910793",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/48147?v=4",
                "events_url": "https://api.github.com/users/jrmithdobbs/events{/privacy}",
                "followers_url": "https://api.github.com/users/jrmithdobbs/followers",
                "following_url": "https://api.github.com/users/jrmithdobbs/following{/other_user}",
                "gists_url": "https://api.github.com/users/jrmithdobbs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jrmithdobbs",
                "id": 48147,
                "login": "jrmithdobbs",
                "node_id": "MDQ6VXNlcjQ4MTQ3",
                "organizations_url": "https://api.github.com/users/jrmithdobbs/orgs",
                "received_events_url": "https://api.github.com/users/jrmithdobbs/received_events",
                "repos_url": "https://api.github.com/users/jrmithdobbs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jrmithdobbs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jrmithdobbs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jrmithdobbs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@jrmithdobbs What about https://github.com/jamessan/vim-gnupg ? Also criminal?\n",
            "created_at": "2014-12-08T23:54:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-66211247",
            "id": 66211247,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjExMjQ3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/66211247/reactions"
            },
            "updated_at": "2014-12-08T23:54:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/66211247",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk on cursory glance that's a better approach and much less harmful. It seems to work much like mutt has handled the situation for years letting the gpg software handled all the key storage/etc.\n\nMaybe criminal is slightly overstating, but it's not good in the current state even with the proposed updates.\n",
            "created_at": "2014-12-23T01:42:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-67913468",
            "id": 67913468,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTEzNDY4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/67913468/reactions"
            },
            "updated_at": "2014-12-23T01:42:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/67913468",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/48147?v=4",
                "events_url": "https://api.github.com/users/jrmithdobbs/events{/privacy}",
                "followers_url": "https://api.github.com/users/jrmithdobbs/followers",
                "following_url": "https://api.github.com/users/jrmithdobbs/following{/other_user}",
                "gists_url": "https://api.github.com/users/jrmithdobbs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jrmithdobbs",
                "id": 48147,
                "login": "jrmithdobbs",
                "node_id": "MDQ6VXNlcjQ4MTQ3",
                "organizations_url": "https://api.github.com/users/jrmithdobbs/orgs",
                "received_events_url": "https://api.github.com/users/jrmithdobbs/received_events",
                "repos_url": "https://api.github.com/users/jrmithdobbs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jrmithdobbs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jrmithdobbs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jrmithdobbs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ok, thanks for the followup.\n",
            "created_at": "2014-12-23T01:45:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-67913656",
            "id": 67913656,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTEzNjU2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/67913656/reactions"
            },
            "updated_at": "2014-12-23T01:45:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/67913656",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@loops, @aktau, @justinmk \n\nAdding documentation or features similar to what @loops suggested would probably represent weaker security than that suggested in the original comment.\n\nThere is no practical way for NeoVim to protect data against attackers who gain access to the machine in-between or concurrently with user accesses, however, if the user has secured swap and neovim avoids leaking any message or keydata, practical protection might be provided against attackers who only gain access to your machine after your final access.\n\nThe encryption scheme would have to be chosen in the knowledge that attackers may be able to guess the entire contents of some files and at least the partial contents of most files (from filenames, metadata, etc).\n\nIt is worth noting that an attacker who gains administrative or physical access to a machine between uses could use the same keylogger and malicious software approach to defeat full-disk encryption.\n\nFull-disk encryption improves on file-level encryption by extending confidentiality to file metadata, filesystem structure and so can deny an attacker hints about data contents or location. Full disk encryption also precludes most unprivileged software attacks (some side-channel and timing attacks still possible, but you can't just jack the disk and install neovim.hack)\n\nI think it is worth at least investigating implementing a neo-vim mode that doesn't leak to persistent storage. If that's possible then a reasonable level of file-contents confidentiality versus an after-final-use attacker would be achievable (assuming secured os and swap and that no leaky software ever interacts with the files). You'd have to assume that filenames would still get leaked and you'd have to explain the caveats to the users, but they're not necessarily a whole lot worse than full-disk.\n",
            "created_at": "2015-02-26T20:33:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-76264761",
            "id": 76264761,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2MjY0NzYx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76264761/reactions"
            },
            "updated_at": "2015-02-26T20:33:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76264761",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6000761?v=4",
                "events_url": "https://api.github.com/users/cmcaine/events{/privacy}",
                "followers_url": "https://api.github.com/users/cmcaine/followers",
                "following_url": "https://api.github.com/users/cmcaine/following{/other_user}",
                "gists_url": "https://api.github.com/users/cmcaine/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cmcaine",
                "id": 6000761,
                "login": "cmcaine",
                "node_id": "MDQ6VXNlcjYwMDA3NjE=",
                "organizations_url": "https://api.github.com/users/cmcaine/orgs",
                "received_events_url": "https://api.github.com/users/cmcaine/received_events",
                "repos_url": "https://api.github.com/users/cmcaine/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cmcaine/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cmcaine/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cmcaine",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Adding documentation or features similar to what @loops suggested\n\nResolved not to do that, in case it is not clear.\n\nSince you are here, :+1:  or :-1:  on  https://github.com/jamessan/vim-gnupg ?\n",
            "created_at": "2015-02-26T21:42:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-76280201",
            "id": 76280201,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2MjgwMjAx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76280201/reactions"
            },
            "updated_at": "2015-02-26T21:42:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76280201",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "On Thu, Feb 26, 2015 at 01:42:29PM -0800, Justin M. Keyes wrote:\n\n> > Adding documentation or features similar to what @loops suggested\n> \n> Resolved not to do that, in case it is not clear.\n\nAlright.\n\n> Since you are here, :+1:  or :-1:  on  https://github.com/jamessan/vim-gnupg ?\n\nConceptually? I don't have a problem with the encryption being done, but of course that's all going on outside vim.\n\nVim does get access to the plaintext, though, the important question to ask is where that plaintext goes. Is it ever saved to temporary files?  (in that implementation, yes) Are those files ever on disk? (probably) Does vim save any data anywhere about the contents of the file? (dunno) Does vim communicate any data about the plaintext over any network devices? (probably not)\n\nTo be used without full-disk encryption, vim would first need to answer authoritatively no to those questions (when in an appropriate mode).\n\nIf not, it's a false sense of security and the users should be made noisily aware of the limitations. (if the plaintext ever hits the disk it shouldn't be used for confidential work if your physical machine is ever going to be compromised).\n\nso :+1: for the concept of encryption in vim (especially for gpg, cos email), :-1: for that implementation.\n",
            "created_at": "2015-02-27T00:56:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-76310618",
            "id": 76310618,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzEwNjE4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76310618/reactions"
            },
            "updated_at": "2015-02-27T01:10:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76310618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6000761?v=4",
                "events_url": "https://api.github.com/users/cmcaine/events{/privacy}",
                "followers_url": "https://api.github.com/users/cmcaine/followers",
                "following_url": "https://api.github.com/users/cmcaine/following{/other_user}",
                "gists_url": "https://api.github.com/users/cmcaine/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cmcaine",
                "id": 6000761,
                "login": "cmcaine",
                "node_id": "MDQ6VXNlcjYwMDA3NjE=",
                "organizations_url": "https://api.github.com/users/cmcaine/orgs",
                "received_events_url": "https://api.github.com/users/cmcaine/received_events",
                "repos_url": "https://api.github.com/users/cmcaine/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cmcaine/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cmcaine/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cmcaine",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is it ever saved to temporary files?  (in that implementation, yes)\n\n`let g:GPGUsePipes=1` to avoid the temporary file, but it messes with the display of the pinentry prompt, if you're using pinentry-curses.  I'd prefer to default `g:GPGUsePipes` to 1, but having a garbled prompt isn't ideal.  Note that Vim's temp files are created in a temporary directory which only the user can access.\n\nAlthough, I think Neovim does everything with pipes and basically makes `:set noshelltemp` a no-op.\n\n> Does vim save any data anywhere about the contents of the file? (dunno)\n\nPart of the purpose of the plugin is to disable all the features that would do that.\n",
            "created_at": "2015-02-27T01:31:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-76314398",
            "id": 76314398,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzE0Mzk4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76314398/reactions"
            },
            "updated_at": "2015-02-27T01:31:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76314398",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@jamessan Saw the pipes stuff in vim-gnupg and neovim, should have been more optomistic. If communication is exclusively with pipes, then my understanding is that it won't hit the disk.\n\nProblem remains will vim leak any of that data? I saw the disabling of viminfo and swap. Does this also turn off undofiles? Are other data leaked into vim's run-environment, might that data get saved to disk by other buffers with viminfo or swap on? I don't know enough about vim's codebase to answer these questions.\n\nAre there some data we want to be able to leak (copying out of an encrypted mail into an unencrypted file)? I'm not sure that this should be made easy. Could be hard to explain that if you copy some part of the plaintext into an unencrypted file, trim it and then save, you probably leak all of the plaintext you copied, not just the trimmed remainder.\n\nThings obviously get worse if you try and bring plugins into the mix. How do we guarantee that plugins won't write parts of the plaintext to un-encrypted storage? (I'm assuming that autocomplete plugins might generate tag files and so on automatically.)\n\nI think that preventing leaks properly could be quite difficult and probably needs to be integrated into neovim core. Then we can simplify plugins like vim-gnupg slightly and make adding support for other encryption easier.\n\nIn any case, users need to be made aware that they must disable or secure swap.\n",
            "created_at": "2015-02-27T09:05:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-76359329",
            "id": 76359329,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzU5MzI5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76359329/reactions"
            },
            "updated_at": "2015-02-27T09:05:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76359329",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6000761?v=4",
                "events_url": "https://api.github.com/users/cmcaine/events{/privacy}",
                "followers_url": "https://api.github.com/users/cmcaine/followers",
                "following_url": "https://api.github.com/users/cmcaine/following{/other_user}",
                "gists_url": "https://api.github.com/users/cmcaine/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cmcaine",
                "id": 6000761,
                "login": "cmcaine",
                "node_id": "MDQ6VXNlcjYwMDA3NjE=",
                "organizations_url": "https://api.github.com/users/cmcaine/orgs",
                "received_events_url": "https://api.github.com/users/cmcaine/received_events",
                "repos_url": "https://api.github.com/users/cmcaine/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cmcaine/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cmcaine/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cmcaine",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @jamessan Saw the pipes stuff in vim-gnupg and neovim, should have been more optomistic. If communication is exclusively with pipes, then my understanding is that it won't hit the disk.\n\nWe use pipes for `system()` and  bang commands, but there are still some parts of the code that create temporary files by passing redirection instructions to the shell command(only `:diff` comes to mind right now). @splinterofchaos has a [PR](https://github.com/neovim/neovim/pull/1391) that changes that.\n",
            "created_at": "2015-02-27T10:21:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-76370860",
            "id": 76370860,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzcwODYw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76370860/reactions"
            },
            "updated_at": "2015-02-27T10:21:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76370860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "On February 27, 2015 12:05:30 PM EAT, Colin Caine notifications@github.com wrote:\n\n> @jamessan Saw the pipes stuff in vim-gnupg and neovim, should have been\n> more optomistic. If communication is exclusively with pipes, then my\n> understanding is that it won't hit the disk.\n> \n> Problem remains will vim leak any of that data? I saw the disabling of\n> viminfo and swap. Does this also turn off undofiles? Are other data\n\nIf I were using encryption then I would prefer undo files being encrypted rather then disabling them. Obviously requires support in NeoVim core.\n\n> leaked into vim's run-environment, might that data get saved to disk by\n> other buffers with viminfo or swap on? I don't know enough about vim's\n> codebase to answer these questions.\n> \n> Are there some data we want to be able to leak (copying out of an\n> encrypted mail into an unencrypted file)? I'm not sure that this should\n> be made easy. Could be hard to explain that if you copy some part of\n> the plaintext into an unencrypted file, trim it and then save, you\n> probably leak all of the plaintext you copied, not just the trimmed\n> remainder.\n> \n> Things obviously get worse if you try and bring plugins into the mix.\n> How do we guarantee that plugins won't write parts of the plaintext to\n> un-encrypted storage? (I'm assuming that autocomplete plugins might\n> generate tag files and so on automatically.)\n> \n> I think that preventing leaks properly could be quite difficult and\n> probably needs to be integrated into neovim core. Then we can simplify\n> plugins like vim-gnupg slightly and make adding support for other\n> encryption easier.\n> \n> In any case, users need to be made aware that they must disable or\n> secure swap.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/701#issuecomment-76359329\n\nWhat should :saveas and :(range)?write (>>)? do with an encrypted file? I would say that all should ask about user opinion on the matter (with option to prefer some variant): produce another un/encrypted file with the same/different key.\n\nNote that Vim has different autocommands for :write (BufWriteCmd), :saveas (runs BufFile(Pre/Post), not sure which of the other autocommands from :write) and :(range)write (FileWriteCmd), :write >> (FileAppendCmd). Without support from the core or from the framework it is hard to do this right: e.g. many implementations of *Cmd autocommands ignore ++opts (AFAIR even netrw was, or is still ignoring them), it is also easy to forget to add support for some autocmd. And with encryption this means unintentional leakage.\n",
            "created_at": "2015-02-27T12:29:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-76387487",
            "id": 76387487,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2Mzg3NDg3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76387487/reactions"
            },
            "updated_at": "2024-05-14T13:52:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76387487",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "On Fri, Feb 27, 2015 at 04:29:53AM -0800, ZyX-I wrote:\n\n> If I were using encryption then I would prefer undo files being encrypted rather then disabling them. Obviously requires support in NeoVim core.\n\nI'd probably prefer that too, but, yeah, more effort. If NeoVim had just\none file-writing code-path we could just tell it to send everything it\nwould write to an external handler in this mode.\n\nThat and denying use of the same vim-instance with non-encrypted data\nwould achieve what I was looking for.\n\n> What should :saveas and :(range)?write (>>)? do with an encrypted file? I would say that all should ask about user opinion on the matter (with option to prefer some variant): produce another un/encrypted file with the same/different key.\n\nAgree.\n\n> Note that Vim has different autocommands for :write (BufWriteCmd), :saveas (runs BufFile(Pre/Post), not sure which of the other autocommands from :write) and :(range)write (FileWriteCmd), :write >> (FileAppendCmd). Without support from the core or from the framework it is hard to do this right: e.g. many implementations of *Cmd autocommands ignore ++opts (AFAIR even netrw was, or is still ignoring them), it is also easy to forget to add support for some autocmd. And with encryption this means unintentional leakage.\n\nWhich goes to show that even the modest goal of avoiding leakage may be\nquite difficult\n",
            "created_at": "2015-02-27T12:51:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-76389791",
            "id": 76389791,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc2Mzg5Nzkx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76389791/reactions"
            },
            "updated_at": "2015-02-27T12:51:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/76389791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6000761?v=4",
                "events_url": "https://api.github.com/users/cmcaine/events{/privacy}",
                "followers_url": "https://api.github.com/users/cmcaine/followers",
                "following_url": "https://api.github.com/users/cmcaine/following{/other_user}",
                "gists_url": "https://api.github.com/users/cmcaine/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cmcaine",
                "id": 6000761,
                "login": "cmcaine",
                "node_id": "MDQ6VXNlcjYwMDA3NjE=",
                "organizations_url": "https://api.github.com/users/cmcaine/orgs",
                "received_events_url": "https://api.github.com/users/cmcaine/received_events",
                "repos_url": "https://api.github.com/users/cmcaine/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cmcaine/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cmcaine/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cmcaine",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Sorry for re-awakening this very old thread; I came here from the `:help encryption` entry, and it is still active.\r\n\r\nI am looking for a way to edit sensitive files containing passwords or certificates with nvim. I do have full-disk encryption, but I still wanted to chase down all cases where nvim would save a buffer, like swap, backups, undo-file, and maybe something else I hadn't thought of. I very much like @kopischke 's idea with a \"secure api\", however it seems that is not moving forward. Have we settled on: \"Everyone should have full-disk encryption and if you do, there is no reason to have file-encryption. We should leave all our files on disk without any further encryption, openly readable other than full-disk encryption, and only use other encryption for file transport\"? Did I understand the consensus right? It isn't what I am doing; I make sure that I can never read a secure file without a password, even after booting. Is that pointless?",
            "created_at": "2024-05-14T13:45:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-2110288532",
            "id": 2110288532,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "IC_kwDOAPphoM59yHKU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110288532/reactions"
            },
            "updated_at": "2024-05-14T17:40:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110288532",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12941516?v=4",
                "events_url": "https://api.github.com/users/stefanmohl/events{/privacy}",
                "followers_url": "https://api.github.com/users/stefanmohl/followers",
                "following_url": "https://api.github.com/users/stefanmohl/following{/other_user}",
                "gists_url": "https://api.github.com/users/stefanmohl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stefanmohl",
                "id": 12941516,
                "login": "stefanmohl",
                "node_id": "MDQ6VXNlcjEyOTQxNTE2",
                "organizations_url": "https://api.github.com/users/stefanmohl/orgs",
                "received_events_url": "https://api.github.com/users/stefanmohl/received_events",
                "repos_url": "https://api.github.com/users/stefanmohl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stefanmohl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stefanmohl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stefanmohl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I am looking for a way to edit sensitive files with nvim. To do that I wanted to chase down all cases where nvim would save a buffer, like swap, backups, undo-file,\r\n\r\nSet these: [XDG env vars](https://neovim.io/doc/user/starting.html#base-directories), [$TMPDIR](https://neovim.io/doc/user/change.html#tempdir), [$NVIM_LOG_FILE](https://neovim.io/doc/user/starting.html#%24NVIM_LOG_FILE)\r\n\r\nPlugins like [vim-gnupg](https://github.com/jamessan/vim-gnupg) are also a useful reference for which options to set.",
            "created_at": "2024-05-14T13:49:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-2110297540",
            "id": 2110297540,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "IC_kwDOAPphoM59yJXE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110297540/reactions"
            },
            "updated_at": "2024-05-17T19:10:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110297540",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "So, just to clarify: I do have full-disk encryption set up, but generally speaking I believe a Unix system expects anything that needs to be secure to be encrypted at the file level as well (e.g. you would still have passwords encrypted in /etc/shadow, even in a full-disk encrypted system).\r\n\r\nWith the help of @justinmk's explanation of the relevant directories, I set up an inotifywait to find any writes to the XDG directories as well as my own directory for backups/undo/swap: `inotifywait -mr -e modify -e attrib -e close_write -e move -e create -e delete .vim/ .local/ .config/ .cache/ /tmp/`. It seems to me that adding the below to a dedicated .vimrc-secure (getting rid of any plugins) doesn't seem to write any secret information that I could detect:\r\n```\r\n    set nobackup\r\n    set noundofile\r\n    set noswapfile\r\n    set viminfo=\r\n    set nowritebackup\r\n    set noexrc\r\n```\r\n(`noexrc` makes sure that no local rc-files I have forgotten about start loading plugins that leak.)\r\n\r\nhowever, I still feel unsure. I wasn't able to avoid writes to /tmp (though /tmp needs to be secure regardless) and nvim is still writing to .cache/nvim/log. Is there a way to avoid these writes? Are there any other file writes I am missing? Stack Overflow also gave me:\r\n```\r\n    set nomodeline\r\n```\r\nwhich I don't really understand, however as long as I don't load plugins I believe I don't need to worry about it.\r\n\r\nI might be a bit oldschool about all this, but it seems reasonable to me that I should be able to ask an editor to edit the file I specify and nothing else; I wish it were easier to achieve and be sure of it.\r\n\r\nIn regards to `set nowritebackup`: Even if `nobackup` makes sure to delete the backup immediately after write, it is still possible to retrieve the deleted backup through an undelete tool. The risk is minuscule, so I am leaning towards crash-safety as being more valuable, but I believe overwriting random data to the backup file with the same size as the file content before deleting it would thwart many file systems' ability to undelete, i.e. the file write process would be: Make backup, write file, overwrite backup, delete backup. E.g. COW file systems would of course still be able to retrieve the data so the user would need to understand their own file system's interaction with `set nowritebackup` (COW systems might not need file backup at all).",
            "created_at": "2024-05-17T16:01:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-2117913324",
            "id": 2117913324,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "IC_kwDOAPphoM5-PMrs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2117913324/reactions"
            },
            "updated_at": "2024-05-17T16:51:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2117913324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12941516?v=4",
                "events_url": "https://api.github.com/users/stefanmohl/events{/privacy}",
                "followers_url": "https://api.github.com/users/stefanmohl/followers",
                "following_url": "https://api.github.com/users/stefanmohl/following{/other_user}",
                "gists_url": "https://api.github.com/users/stefanmohl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stefanmohl",
                "id": 12941516,
                "login": "stefanmohl",
                "node_id": "MDQ6VXNlcjEyOTQxNTE2",
                "organizations_url": "https://api.github.com/users/stefanmohl/orgs",
                "received_events_url": "https://api.github.com/users/stefanmohl/received_events",
                "repos_url": "https://api.github.com/users/stefanmohl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stefanmohl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stefanmohl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stefanmohl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  nvim is still writing to .cache/nvim/log\r\n\r\n`:help $NVIM_LOG_FILE`\r\n\r\n> I should be able to ask an editor to edit the file I specify and nothing else; I wish it were easier to achieve and be sure of it.\r\n\r\nExpecting apps to have a \"quasi-security mode\" is not really a great solution though. OS-level features are more appropriate, and effective: ramdisk, containers/jails, etc. ",
            "created_at": "2024-05-17T18:59:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-2118211995",
            "id": 2118211995,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "IC_kwDOAPphoM5-QVmb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2118211995/reactions"
            },
            "updated_at": "2024-05-17T19:07:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2118211995",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thank you for the help on $NVIM_LOG_FILE. By adding an alias that does `NVIM_LOG_FILE=/dev/null` I managed to turn it off. It would have been more consistent and useful if there was a way to do it from an rc-file, but this way works. I still haven't been able to figure out how to turn off using the /tmp directory (nvim still finds the /tmp directory, even if I set TMPDIR=/dev/null).\r\n\r\nClearly a dubious security mode would be bad! However I wouldn't consider this a security mode at all; I just want a mode where I know exactly what nvim is doing to my disk and that nvim does only what I tell it to. Preferably I should be able to rely on nvim to be sane in that way and not have any unknown side effects. I prefer not to need a heavy weight solution like putting it in a VM or container because I can't trust it. It isn't just about security, there are other situations (e.g. when fixing disk-related issues) where I might want to know *exactly* what is being written to my disk. It's how most applications were before Microsoft Word ruined it all.",
            "created_at": "2024-05-18T11:41:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-2118794203",
            "id": 2118794203,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "IC_kwDOAPphoM5-Sjvb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2118794203/reactions"
            },
            "updated_at": "2024-05-21T14:58:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2118794203",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12941516?v=4",
                "events_url": "https://api.github.com/users/stefanmohl/events{/privacy}",
                "followers_url": "https://api.github.com/users/stefanmohl/followers",
                "following_url": "https://api.github.com/users/stefanmohl/following{/other_user}",
                "gists_url": "https://api.github.com/users/stefanmohl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stefanmohl",
                "id": 12941516,
                "login": "stefanmohl",
                "node_id": "MDQ6VXNlcjEyOTQxNTE2",
                "organizations_url": "https://api.github.com/users/stefanmohl/orgs",
                "received_events_url": "https://api.github.com/users/stefanmohl/received_events",
                "repos_url": "https://api.github.com/users/stefanmohl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stefanmohl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stefanmohl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stefanmohl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "You could probably use Justine Tunney's pledge cli to use the OS's containment tools to control what paths nvim can write to.\r\n\r\nhttps://justine.lol/pledge/\r\n\r\nSomething like this:\r\n\r\n```sh\r\npledge -v r:/ -v rwc:path/to/edited/file nvim -u NORC path/to/edited/file\r\n```",
            "created_at": "2024-05-19T23:29:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-2119445218",
            "id": 2119445218,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "IC_kwDOAPphoM5-VCri",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2119445218/reactions"
            },
            "updated_at": "2024-05-19T23:29:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2119445218",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6000761?v=4",
                "events_url": "https://api.github.com/users/cmcaine/events{/privacy}",
                "followers_url": "https://api.github.com/users/cmcaine/followers",
                "following_url": "https://api.github.com/users/cmcaine/following{/other_user}",
                "gists_url": "https://api.github.com/users/cmcaine/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cmcaine",
                "id": 6000761,
                "login": "cmcaine",
                "node_id": "MDQ6VXNlcjYwMDA3NjE=",
                "organizations_url": "https://api.github.com/users/cmcaine/orgs",
                "received_events_url": "https://api.github.com/users/cmcaine/received_events",
                "repos_url": "https://api.github.com/users/cmcaine/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cmcaine/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cmcaine/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cmcaine",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yes, or containerize nvim, I'm just a little disappointed that nvim doesn't allow me to control what is written to disk. I guess pico is the way 😆",
            "created_at": "2024-05-20T12:44:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-2120390576",
            "id": 2120390576,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "IC_kwDOAPphoM5-Ypew",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120390576/reactions"
            },
            "updated_at": "2024-05-21T14:59:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120390576",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12941516?v=4",
                "events_url": "https://api.github.com/users/stefanmohl/events{/privacy}",
                "followers_url": "https://api.github.com/users/stefanmohl/followers",
                "following_url": "https://api.github.com/users/stefanmohl/following{/other_user}",
                "gists_url": "https://api.github.com/users/stefanmohl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stefanmohl",
                "id": 12941516,
                "login": "stefanmohl",
                "node_id": "MDQ6VXNlcjEyOTQxNTE2",
                "organizations_url": "https://api.github.com/users/stefanmohl/orgs",
                "received_events_url": "https://api.github.com/users/stefanmohl/received_events",
                "repos_url": "https://api.github.com/users/stefanmohl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stefanmohl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stefanmohl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stefanmohl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Sounds like you want to be disappointed more than you want to solve your \"problem\" 🤷\r\n\r\nThe OS is the right thing to use to control these side effects. If nvim offered a switch for this then it would be best implemented with the same OS features.\r\n\r\nConfiguring a complex program (with a plugin ecosystem!) will be a moving target and would not offer me much assurance.",
            "created_at": "2024-05-20T13:19:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-2120448619",
            "id": 2120448619,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "IC_kwDOAPphoM5-Y3pr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120448619/reactions"
            },
            "updated_at": "2024-05-21T14:59:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120448619",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6000761?v=4",
                "events_url": "https://api.github.com/users/cmcaine/events{/privacy}",
                "followers_url": "https://api.github.com/users/cmcaine/followers",
                "following_url": "https://api.github.com/users/cmcaine/following{/other_user}",
                "gists_url": "https://api.github.com/users/cmcaine/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cmcaine",
                "id": 6000761,
                "login": "cmcaine",
                "node_id": "MDQ6VXNlcjYwMDA3NjE=",
                "organizations_url": "https://api.github.com/users/cmcaine/orgs",
                "received_events_url": "https://api.github.com/users/cmcaine/received_events",
                "repos_url": "https://api.github.com/users/cmcaine/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cmcaine/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cmcaine/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cmcaine",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I am not saying that your solution is bad, it's just that everyone on our system already know containerization, it does roughly the same thing and it's simple enough to do. Regarding plugins, I am fine with not loading them, my rc-file above doesn't do that. nvim isn't what I believed it was, but as you say, maybe I just want to be disappointed 😄.",
            "created_at": "2024-05-20T13:55:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/701#issuecomment-2120514123",
            "id": 2120514123,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/701",
            "node_id": "IC_kwDOAPphoM5-ZHpL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120514123/reactions"
            },
            "updated_at": "2024-05-21T14:59:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120514123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12941516?v=4",
                "events_url": "https://api.github.com/users/stefanmohl/events{/privacy}",
                "followers_url": "https://api.github.com/users/stefanmohl/followers",
                "following_url": "https://api.github.com/users/stefanmohl/following{/other_user}",
                "gists_url": "https://api.github.com/users/stefanmohl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stefanmohl",
                "id": 12941516,
                "login": "stefanmohl",
                "node_id": "MDQ6VXNlcjEyOTQxNTE2",
                "organizations_url": "https://api.github.com/users/stefanmohl/orgs",
                "received_events_url": "https://api.github.com/users/stefanmohl/received_events",
                "repos_url": "https://api.github.com/users/stefanmohl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stefanmohl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stefanmohl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stefanmohl",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 36,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/701/comments",
    "created_at": "2014-05-07T23:25:20Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/701/events",
    "html_url": "https://github.com/neovim/neovim/issues/701",
    "id": 33034271,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "security or privacy implications",
            "id": 97680355,
            "name": "security",
            "node_id": "MDU6TGFiZWw5NzY4MDM1NQ==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/security"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "compatibility with Vim or older Neovim",
            "id": 109899712,
            "name": "compatibility",
            "node_id": "MDU6TGFiZWwxMDk4OTk3MTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/compatibility"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "",
            "id": 606691254,
            "name": "has:plan",
            "node_id": "MDU6TGFiZWw2MDY2OTEyNTQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:plan"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/701/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWUzMzAzNDI3MQ==",
    "number": 701,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 1,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/701/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/701/timeline",
    "title": "alternative to legacy 'cryptmethod'",
    "updated_at": "2025-01-17T16:19:11Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/701",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}