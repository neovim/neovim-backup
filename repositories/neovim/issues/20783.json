{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Feature already in Vim?\r\n\r\nAfaik no\r\n\r\n### Feature description\r\n\r\n## Problem\r\n\r\nCurrently it is necessary to provide the `lnum` and `col` (+ `_end` variants) eagerly when setting quickfix items. Calculating the position can be expensive. E.g for LSP it would be useful if resolving those values could be done lazy/ad-hoc and asynchronous when needed.\r\n\r\nThere would probably be a lot of BWC cases to consider, e.g. how this would work for existing uses of `getqtflist`.\r\n\r\n## Concrete use case:\r\n\r\nQuerying workspace symbols via LSP. In neovim this is currently exposed via the `vim.lsp.buf.workspace_symbol` function. Using this function queries LSP for the symbols and populates the quickfix list with the results. Users can then jump to the definition of a symbol via the quickfix list.\r\n\r\nThere are two problems:\r\n\r\n- The existing implementation ignores that the language server usually uses UTF-16 offsets. This could be fixed in the implementation, but would make it slower as we'd have to read the line for each position to convert utf-16 offset to byte indices. (We already do this in other places, which could also be changed to improve performance if it could be done lazy/as-needed)\r\n- They added a `workspaceSymbol/resolve` capability in 3.17.0 of the specification to allow language servers to defer the calculation of the position (because it can be expensive). You'd first list all items and only if the user selects one resolve its position. It's currently not possible to use a quickfix list to implement this. (Unless we'd eagerly resolve all symbols, but that defeats the purpose of the capability).\r\n\r\n## Alternative Solutions\r\n\r\n- Create and use a custom buffer/widget for the workspace symbol case\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Sounds like something Vim should do upstream. Quickfix is a complex interface that gets a lot of attention from upstream Vim, and not something we want to own.",
            "created_at": "2022-10-24T12:38:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/20783#issuecomment-1288972660",
            "id": 1288972660,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20783",
            "node_id": "IC_kwDOAPphoM5M1Cl0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1288972660/reactions"
            },
            "updated_at": "2022-10-24T12:38:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1288972660",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Calculating the position can be expensive.\n\nNot just expensive, but also incorrect in the case of `workspace_symbols()`. Positions are calculating by applying the position & encoding to the current buffer, but every symbol that comes from a different buffer will have an incorrect position shown in neovim. The fix for this could be to load a buffer for every URI received, but this is probably very expensive, hence the need for this feature and #21539.",
            "created_at": "2025-07-02T20:17:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/20783#issuecomment-3029206249",
            "id": 3029206249,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20783",
            "node_id": "IC_kwDOAPphoM60jgTp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3029206249/reactions"
            },
            "updated_at": "2025-07-02T20:17:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3029206249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Using this function queries LSP for the symbols and populates the quickfix list with the results. \n\nI feel like Neovim is approaching this the wrong way. When I’ve used the native LSP in the past, I’ve never liked or wanted the quickfix interface that Neovim provides for interacting with the LSP—it’s not just the workspace symbols in this case (there are more complex interatctions like the call hierarchy, which is a tree, that can not be even represented as a qf list, which it is actually right now). On top of that, most people rely on external plugins (like fzf-lua, Telescope, etc.) to interact with LSP clients precisely because the built-in method is too rigid.\n\nIn practice, you rarely want to retrieve every result in the qf list all at once. It's far more common to apply a live filter to the results provided by the lsp, selecting only specific items for the qf list. **In fact, the most typical scenario is live filtering and navigating to a single item rather than multiple.**\n\nA lot of the LSP interaction and interface needs to be re-evaluated, as some LSP responses don’t align well with the flat, eager-loading nature of the quickfix list. Perhaps Neovim should explore a dedicated UI/UX tailored to specific use cases or LSP responses, which could then integrate with native structures like the quickfix list (e.g. allowing users to select a subset of items to send to the quickfix list for further interaction if needed).",
            "created_at": "2025-07-03T06:49:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/20783#issuecomment-3031079407",
            "id": 3031079407,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20783",
            "node_id": "IC_kwDOAPphoM60qpnv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3031079407/reactions"
            },
            "updated_at": "2025-07-03T11:52:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3031079407",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> A lot of the LSP interaction and interface needs to be re-evaluated, as some LSP responses don’t align well with the flat, eager-loading nature of the quickfix list. Perhaps Neovim should explore a dedicated UI/UX tailored to specific use cases or LSP responses, which could then integrate with native structures like the quickfix list\n\nSo... instead of enhancing quickfix, just redesign everything?",
            "created_at": "2025-07-03T11:31:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/20783#issuecomment-3031928835",
            "id": 3031928835,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20783",
            "node_id": "IC_kwDOAPphoM60t5AD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3031928835/reactions"
            },
            "updated_at": "2025-07-03T11:31:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3031928835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I would say more along the lines of do not try to fit a round peg in a square hole, it is clear that qf list is very limited for this purpose or any future design decisions, i was trying to provide an alternative approach to consider. If however the idea is to have a very basic interface, that might be okay. But in that case people would gravitate towards replacing it completely with a plugin, as mentioned. \n\nA combination of a prompt buffer with matchfuzzy is what i was always imagining can be the default backend provided by nvim for vim.ui.select, and be used for doing most of the live filtering and interaction with lsp responses, which are most of the / majority of the interactions that are done, you can still select one or multiple entries from the prompt buffer/ select, and send it to qf list, or simply select any of the entries - this is up to the community and the project to decide if the user experience already designed / used by things like fzf-lua and telescope are really the optimal and/or useful, and if part of it can be adapted by core.\n\nAs for some of the other interactions which are static non linear structures such as the call hierarchy the qf list is not great anyway, and a specialized interface would need to be built, there was already a talk about vim.ui.tree for example, we are also already discussing things like UI elements or interfaces such as - progress, spinners and such, it might make sense to think about how the user can interface with the lsp in a more friendly way. \n\nMaybe neovim only specified the API interface, for vairous UI/UX lsp interactions, and the implementation is left to external parties. ",
            "created_at": "2025-07-03T11:45:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/20783#issuecomment-3031965228",
            "id": 3031965228,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20783",
            "node_id": "IC_kwDOAPphoM60uB4s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3031965228/reactions"
            },
            "updated_at": "2025-07-03T12:07:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3031965228",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> there was already a talk about vim.ui.tree for example, we are also already discussing things like UI elements or interfaces such as - progress, spinners and such, it might make sense to think about how the user can interface with the lsp in a more friendly way.\n\nwe are doing that, and that's why we are tracking \"tree UI\" in other issues. it's not a binary decision. the quickfix is very high-leverage meanwhile.",
            "created_at": "2025-07-03T11:53:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/20783#issuecomment-3031988862",
            "id": 3031988862,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20783",
            "node_id": "IC_kwDOAPphoM60uHp-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3031988862/reactions"
            },
            "updated_at": "2025-07-03T11:53:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3031988862",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Related:\n- https://github.com/neovim/neovim/issues/31987, which would cover the `:tselect` / `vim.ui.select` case (lsp tagfunc uses workspace symbols, so this is pretty close to your mentioned use-case)\n- https://github.com/neovim/neovim/issues/33914 for tree displays which could be used in the future for call-hierarchy\n\nNeither of these mean that we can't _also_ improve qflist, which comes with powerful capabilities like `:cdo`, `:colder`, movement with `]q` and so on.\nI make heavy use of it, implying that it is sorta outdated is ignoring a part of the user-base.",
            "created_at": "2025-07-03T11:58:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/20783#issuecomment-3032001958",
            "id": 3032001958,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20783",
            "node_id": "IC_kwDOAPphoM60uK2m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3032001958/reactions"
            },
            "updated_at": "2025-07-03T12:30:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3032001958",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I have not implied it is outdated in any way, apologies if that was the way it was interpreted. I  myself am constantly using the qf list as well, but not that often when interacting with the lsp clients, i find myself often needing 1 of the many results provided by the lsp responses (aside from diagnostics for example). \n\nMy primary argument was that if core implements an intermediate interactive live/dynamic filtering step (akin to what the mentioned plugins do) for the results of the LSP, allowing the user to either select one or put multiple into qf list for further reference, then a lazy loading of the col/lnum would not be necessary, or pressing issue, since the filtered results put in the qf list from the response would likely be a very small fraction of the initial response, or most often the user would select 1 entry, and never interact with the qf list in the first place.",
            "created_at": "2025-07-03T12:42:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/20783#issuecomment-3032127651",
            "id": 3032127651,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20783",
            "node_id": "IC_kwDOAPphoM60upij",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3032127651/reactions"
            },
            "updated_at": "2025-07-03T12:42:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3032127651",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> So... instead of enhancing quickfix, just redesign everything?\n\nOff-topic but it might be worth considering porting the qflist stuff from C to Lua. Could be a lot of work up-front, but will open lots of doors going forward. That way instead of redesigning everything, we can maintain the current interfaces (and improve them), and remove lots of hard to maintain C code.\n\nAs a rough estimate, this is all the exported functions in `quickfix.c`:\n```\nint qf_init(win_T *wp, const char *restrict efile, char *restrict errorformat, int newlist,\nint qf_stack_get_bufnr(void)\nvoid qf_free_all(win_T *wp)\nvoid qf_resize_stack(int n)\nvoid ll_resize_stack(win_T *wp, int n)\nvoid qf_init_stack(void)\nvoid copy_loclist_stack(win_T *from, win_T *to)\nvoid qf_jump(qf_info_T *qi, int dir, int errornr, int forceit)\nvoid qf_list(exarg_T *eap)\nvoid qf_age(exarg_T *eap)\nvoid qf_history(exarg_T *eap)\nbool qf_mark_adjust(buf_T *buf, win_T *wp, linenr_T line1, linenr_T line2, linenr_T amount,\nvoid qf_view_result(bool split)\nvoid ex_cwindow(exarg_T *eap)\nvoid ex_cclose(exarg_T *eap)\nvoid ex_copen(exarg_T *eap)\nvoid ex_cbottom(exarg_T *eap)\nlinenr_T qf_current_entry(win_T *wp)\nint grep_internal(cmdidx_T cmdidx)\nvoid ex_make(exarg_T *eap)\nsize_t qf_get_size(exarg_T *eap)\nsize_t qf_get_valid_size(exarg_T *eap)\nsize_t qf_get_cur_idx(exarg_T *eap)\nint qf_get_cur_valid_idx(exarg_T *eap)\nvoid ex_cc(exarg_T *eap)\nvoid ex_cnext(exarg_T *eap)\nvoid ex_cbelow(exarg_T *eap)\nvoid ex_cfile(exarg_T *eap)\nvoid ex_vimgrep(exarg_T *eap)\nint set_errorlist(win_T *wp, list_T *list, int action, char *title, dict_T *what)\nbool set_ref_in_quickfix(int copyID)\nvoid ex_cbuffer(exarg_T *eap)\nvoid ex_cexpr(exarg_T *eap)\nvoid ex_helpgrep(exarg_T *eap)\nvoid f_getloclist(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\nvoid f_getqflist(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\nvoid f_setloclist(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\nvoid f_setqflist(typval_T *argvars, typval_T *rettv, EvalFuncData fptr)\n```\n\nFrom a quick look, everything seems quite well contained.",
            "created_at": "2025-07-03T12:43:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/20783#issuecomment-3032131381",
            "id": 3032131381,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20783",
            "node_id": "IC_kwDOAPphoM60uqc1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3032131381/reactions"
            },
            "updated_at": "2025-07-03T12:50:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3032131381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/20783/comments",
    "created_at": "2022-10-23T10:02:48Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/20783/events",
    "html_url": "https://github.com/neovim/neovim/issues/20783",
    "id": 1419733136,
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 6937717172,
            "name": "quickfix",
            "node_id": "LA_kwDOAPphoM8AAAABnYUptA",
            "url": "https://api.github.com/repos/neovim/neovim/labels/quickfix"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/20783/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 285,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 339,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-07-04T21:53:41Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM5Un2iQ",
    "number": 20783,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/20783/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/20783/timeline",
    "title": "Lazy resolve lnum/col in quickfix items",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-03T12:50:50Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/20783",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
        "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
        "followers_url": "https://api.github.com/users/mfussenegger/followers",
        "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
        "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mfussenegger",
        "id": 38700,
        "login": "mfussenegger",
        "node_id": "MDQ6VXNlcjM4NzAw",
        "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
        "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
        "repos_url": "https://api.github.com/users/mfussenegger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mfussenegger",
        "user_view_type": "public"
    }
}