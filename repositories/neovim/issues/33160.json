{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "## Problem\n\n`b:undo_ftplugin` is a fragile and error-prone way to \"restore\" temporary filetype-local options, mappings, etc. It requires extra (manually-maintained) boilerplate. And `:set foo<` resets to the current option global, it doesn't restore the (possibly local) option value.\n\n## Expected behavior\n\n- Enhance `vim._with()` so that it provides a way for the \"restorable\" to be executed later.\n    - Idea: currently `vim._with()` returns a value. Instead, it could return a closure, which returns a value when executed.\n        - Callers that want to restore immediately can do this: `vim._with()()`.\n        - Callers (such as ftplugins) that want to restore later can do `local restore = vim._with()` and call `restore()` later.\n- Use `vim._with()` instead of `b:undo_ftplugin`.\n    - Only in Nvim-owned `ftplugin/*.lua`, initially...\n\n\n### Example\n\nHere's a random ftplugin example: https://github.com/neovim/neovim/blob/6ef5dd5266822960d254b8acd5ab0934cc2b117e/runtime/ftplugin/8th.vim#L21-L27\n\nHere's what it would look like as Lua using `vim._with()`. Note:\n\n- the `b:undo_ftplugin` undo logic does not need to be manually specified. \n- \"append\" to `vim.o.matchpairs` is awkward. Blocked until https://github.com/neovim/neovim/issues/20107 provides a way to \"append\" to `vim.o` and friends.\n\n```lua\nvim.b.undo_ftplugin = vim._with({ bo = {\n  ts=2, sts=2, sw=2, et=true,\n  com=[[s1:/*,mb:*,ex:*/,b:--,be:\\\\]],\n  fo='tcrqol',\n  matchpairs= vim.o.matchpairs .. [[\\::;]],\n  iskeyword='!,@,33-35,%,$,38-64,A-Z,91-96,a-z,123-126,128-255',\n  suffixesadd='.8th',\n} }, function()\nend)\n```",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "@echasnovski noted:\n\n> currently doesn't support Vimscript variables, Lua global variables,\n\nSo this is less compelling until `vim._with()` gains support for those.\n\nIt also is a reminder that `nvim_get_context()` and `vim._with()` have a lot of overlap.\n\nI'm leaning towards continuing to enhance `vim._with()` so that it is the single interface. Internally, `vim._with_c` https://github.com/neovim/neovim/blob/6ef5dd5266822960d254b8acd5ab0934cc2b117e/runtime/lua/vim/shared.lua#L1399 may use `context.c` , or shada. But in the Lua stdlib (and API), we only really need one interface. And internally, the interface is \"shada\".",
            "created_at": "2025-03-29T15:36:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/33160#issuecomment-2763536104",
            "id": 2763536104,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33160",
            "node_id": "IC_kwDOAPphoM6kuDbo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763536104/reactions"
            },
            "updated_at": "2025-03-29T15:36:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763536104",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The core idea of `vim._with()` is to execute code with temporarily set context. So like `nvim_buf_call`, `nvim_win_call`, etc.\n\nI don't think it is a valid replacement for the `b:undo_ftplugin` because it fundamentally limits (to what `vim._with` supports as a context) of what ftplugin can set and later unset. As was mentioned in previous comment, it currently doesn't support Vimscript variables, Lua global variables, and probably won't support something like buffer-local mappings.\n\n---\n\nAlso, here is the comparison of the current and proposed here `vim._with` approaches for the common case of ftplugins setting buffer-local options:\n\n```lua\n-- Current\nvim.bo.comments, vim.bo.commentstring = 'b:#', '# %s'\nvim.b.undo_ftplugin = 'setl com< cms<'\n\n-- With `_with`\nlocal context = { bo = { comments = 'b:#', commentstring = '# %s' } }\nvim.b.undo_ftplugin = vim._with(context, function() end)\n```\n\nThe current approach uses more common syntax (easier to maintain in long term) but requires manual tracking of what to restore. The `vim._with` approaches feels like inventing a DSL specifically for ftplugins, but there is automatic tracking of restored context.\n\nAll in all, a more direct and feature-rich solution to #18238 would indeed be to \"simply\" allow `vim.b.undo_ftplugin` to be Lua function. Then users can do significantly more with it, while still being kind of forced to use current Vimscript-like approach for common cases.\n\nThe ideal approach for `undo_ftplugin` is probably to:\n\n- Somehow track the buffer-local \"context\" automatically before sourcing any ftplugin.\n- Figure out the difference after ftplugin is sourced.\n- Automatically restore only the changed context values when now `undo_ftplugin` takes effect.\n\n",
            "created_at": "2025-03-29T15:47:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/33160#issuecomment-2763562338",
            "id": 2763562338,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33160",
            "node_id": "IC_kwDOAPphoM6kuJ1i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763562338/reactions"
            },
            "updated_at": "2025-03-29T15:47:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763562338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I don't think it is a valid replacement for the `b:undo_ftplugin` because it fundamentally limits (to what `vim._with` supports as a context) of what ftplugin can set and later unset.\n\nThat limitation only matters for a few ftplugins, which can simply elect not to use `vim._with`.\n\nOTOH, `b:undo_ftplugin` has its own limitation: it resets to the current option global value, it doesn't restore the actual (possibly local) option value.",
            "created_at": "2025-04-09T10:07:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/33160#issuecomment-2789129945",
            "id": 2789129945,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33160",
            "node_id": "IC_kwDOAPphoM6mPr7Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2789129945/reactions"
            },
            "updated_at": "2025-04-09T10:07:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2789129945",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I agree with @echasnovski here. How would the example provided in the description deal with other ftplugin code that does not simply set buffer-local options? Looking at the current ftplugin files maintained by Nvim they almost exclusively include code that does a lot more than setting options.\n\nI think an easy start (and not a one-way door probably?) would be to allow `b:undo_ftplugin` to be a lua function. Yes, the ftplugin writers still needs to manually maintain the restoring of the settings, but at least it's less error-prone than editing a multi-line vimscript string. It's also easier to clear namespaces and the like. For example to undo runtime/ftplugin/help.lua:\n\n```lua\nvim.b.undo_ftplugin = function ()\n  vim.treesitter.stop()\n  vim.api.nvim_buf_clear_namespace(0, color_ns, 0, -1)\n  vim.keymap.del('n', 'gO', { buffer = 0 })\n  vim.keymap.del('n', '[[', { buffer = 0 })\n  vim.keymap.del('n', ']]', { buffer = 0 })\n  vim.keymap.del('n', 'g==', { buffer = 0 })\n  vim.api.nvim_buf_clear_namespace(0, ns, 0, -1)\nend\n```",
            "created_at": "2025-09-15T22:10:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/33160#issuecomment-3294136913",
            "id": 3294136913,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33160",
            "node_id": "IC_kwDOAPphoM7EWIpR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3294136913/reactions"
            },
            "updated_at": "2025-09-15T22:10:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3294136913",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think an easy start (and not a one-way door probably?) would be to allow `b:undo_ftplugin` to be a lua function.\n\nThat'll not work with multiple ftplugins that append to `b:undo_ftplugin`.",
            "created_at": "2025-09-15T22:41:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/33160#issuecomment-3294215060",
            "id": 3294215060,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33160",
            "node_id": "IC_kwDOAPphoM7EWbuU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3294215060/reactions"
            },
            "updated_at": "2025-09-15T22:42:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3294215060",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That's true. Not sure how prevalent that is (for the ftplugins currently maintained by Nvim). It seems that Justin's proposed solution would also break appending to `b:undo_ftplugin`.\n\nCurrent options I can think of to stay backwards compatible:\n\nHave a function `vim.undo_ftplugin` (tbd) that registers a function to execute on ftplugoff. Thus the end of a Lua ftplugin would have:\n\n```lua\nvim.undo_ftplugin(function()\n  -- ...\nend)\n```\n\nWhich registers the passed function. On ftplugoff the registered functions are called and `b:undo_ftplugin` is executed. I can experiment with this later this week to see if it would work.",
            "created_at": "2025-09-18T12:12:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/33160#issuecomment-3307119442",
            "id": 3307119442,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33160",
            "node_id": "IC_kwDOAPphoM7FHqNS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3307119442/reactions"
            },
            "updated_at": "2025-09-18T12:12:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3307119442",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33160/comments",
    "created_at": "2025-03-29T14:23:09Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33160/events",
    "html_url": "https://github.com/neovim/neovim/issues/33160",
    "id": 2958049228,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "funtime",
            "id": 120251370,
            "name": "runtime",
            "node_id": "MDU6TGFiZWwxMjAyNTEzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/runtime"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "filetype detection, filetype.lua, ftplugins",
            "id": 3708202139,
            "name": "filetype",
            "node_id": "LA_kwDOAPphoM7dBqyb",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filetype"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33160/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 294,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 351,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-09-22T19:59:53Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6wUD_M",
    "number": 33160,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 1,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33160/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33160/timeline",
    "title": "runtime/ftplugin: replace b:undo_ftplugin with `vim._with()`",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-09-18T12:12:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33160",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}