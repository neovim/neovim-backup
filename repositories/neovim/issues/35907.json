{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nBackground here #35855 \n\nSometimes plugin authors faced with a problem to create some kind of control panel or just pretty render some structured data. For neovim there are:\n- [neogit](https://github.com/NeogitOrg/neogit) renders each its buffer  to user can interact with git\n- [gh.nvim](https://github.com/ldelossa/gh.nvim) for you to see issues and PRs inside nvim's buffer\n- some other plugins that essentially are UI clients for something, which use non modifiable buffer to pretty print things on it\n\nIn all these cases if author wants highlight some things or make them foldable, one needs to reimplement all basic treesitter's logic related to a tree bypass, creation of custom nodes, etc. For example, neogit has a custom UI [implementation](https://github.com/NeogitOrg/neogit/blob/master/lua/neogit/lib/ui/init.lua), and it takes a lot of work to implement the already existing features that provide the neovim api + treesitter.\n\nRoot of that problem is there is no way to manually create a TSTree and TSNode with its own type, position, etc.  to use it as a language. This is because treesitter have no API for that. It allows to create a language using `const TSLanguage *tree_sitter_some_language(void);`, which is always generated by treesitter.\n\n### Expected behavior\n\nCurrently I see 3 solutions. I am ready to implement the feature in both neovim and treesitter if necessary (see below).\n\n## New types of `Node`, `Tree`, `LanguageTree` in Lua level only\nThis idea relies on what @vanaigr [suggested](https://github.com/neovim/neovim/discussions/35855#discussioncomment-14470603). Create `Node`, `Tree` and `LanguageTree` lua objects the minimum required functionality to mimic treesitter's ones. Then extend existing neovim lua API to support these objects.\n\nThe pros are that it's *relatively* simple to do. Problem is what exactly is a \"minimum required functionality\"? If you look at TSNode's API, there is a lot of functions and I can't say for sure which ones are essential and which ones can be ignored. This also applies to TSLanguage. There is a lot of contexts where we use treesitter, so if we want to support all of that we need to reimplement a lot of existing treesitter's logic in lua.\n\nNote: the purpose for which I need this feature is, as I wrote above, to create a UI in an unmodifiable buffer with highlight and folding like neogit does. That is all. Therefore, I personally know my \"minimum required functionality\". But this does not mean that only this functionality should be implemented, as the new API should be general and cover many cases. This is the place where I need advice.\n\n## Make treesitter support this case and integrate its new API to neovim core\n\nThis way needs treesitter's team approval. Point is to allow create special TSLanguage object that holds custom tree. It created that way so TSParser just translate custom tree to TSTree rather than actually parse anything. Here's about what needs to be added:\n```c\n// NEW: Node type that can be created via lua\ntypedef struct TSManualNode {\nTSNode node;\nbool visibility;\nbool named;\n/*sometype*/  children;\n// what else?\n} TSManualNode;\n\n// NEW: returns special language. it is allocated on the heap, whereas it is usually a static object.\nconst TSLanguage *tree_sitter_manual_language(TSManualNode* root);\n\n// CHANGED (?): parser now just makes TSManualNode -> TSTree \nts_parser_set_language(parser, tree_sitter_manual_language(root));\n\n// Also adopt some functions to new behaviour\n// And add some utility functions\n```\n\nThis is my preferred way since we don't need to duplicate anything and we get all the existing features of treesitter for free. Even after some new treesitter's module arrive, we immediately receive it.\n\nThe problem is that first of all it's most difficult way (at least for me). Second, this feature may be a fifth wheel for treesitter, since there probably will be only one consumer of that (neovim). But maybe TS team will be ok, IDK.\n\n## Write a plugin ðŸ«¤\n\nThe most prosaic way. Neovim already does folding and highlighting. Treesitter just helps do it right for **programming languages**. Not for custom UI buffers. So if we make things strictly through guidelines, maybe this is the best choice, and this issue should be closed as not planned.\n\nHowever, , if I write such a plugin, 90% of its code will be a duplication of treesitter functionality. And when the neovim treesitter api has new features, I'll have to duplicate them again. So maybe one should compromise he's principles:)\n\n---\nAnyway, sorry for that TLDR. What do you think about that? What is the best way?",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "\nIf this requires complex changes or hard-to-support APIs, it's going to be a slow process, since we need to wait and hear from people that actually want this. If the changes are simple or don't add a big maintenance cost, then we can move more quickly.\n\nFrom your proposed solutions: \"Make treesitter support this case\" is the most preferred. \"New types of Node, Tree, LanguageTree\" sounds pretty horrible. But I could be wrong, waiting to hear from people that know this area deeply.",
            "created_at": "2025-09-24T22:06:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/35907#issuecomment-3330863401",
            "id": 3330863401,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35907",
            "node_id": "IC_kwDOAPphoM7GiPEp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3330863401/reactions"
            },
            "updated_at": "2025-09-24T22:07:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3330863401",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35907/comments",
    "created_at": "2025-09-24T17:55:34Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35907/events",
    "html_url": "https://github.com/neovim/neovim/issues/35907",
    "id": 3450377138,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "issue needs attention from an expert, or PR proposes significant changes to architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35907/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM7NqJOy",
    "number": 35907,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35907/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35907/timeline",
    "title": "Treesitter features for non existent (anonymous) grammar/static AST",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-09-24T22:07:59Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35907",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/65226211?v=4",
        "events_url": "https://api.github.com/users/daniilrozanov/events{/privacy}",
        "followers_url": "https://api.github.com/users/daniilrozanov/followers",
        "following_url": "https://api.github.com/users/daniilrozanov/following{/other_user}",
        "gists_url": "https://api.github.com/users/daniilrozanov/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/daniilrozanov",
        "id": 65226211,
        "login": "daniilrozanov",
        "node_id": "MDQ6VXNlcjY1MjI2MjEx",
        "organizations_url": "https://api.github.com/users/daniilrozanov/orgs",
        "received_events_url": "https://api.github.com/users/daniilrozanov/received_events",
        "repos_url": "https://api.github.com/users/daniilrozanov/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/daniilrozanov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/daniilrozanov/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/daniilrozanov",
        "user_view_type": "public"
    }
}