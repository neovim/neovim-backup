{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\nConsider the scenario where my Neovim server is running on a remote server and I connect to it through ssh. Any and every operation that happens, including buffer changes, happen on the remote server. This makes the editing experience on the local feel \"laggy\" for slow networks. Instead, the editing experience on Neovim should be amazing even when the network is lagging. It's fine if the global search is slow or running system commands is slow, but the editing experience should always be premium and fast.\r\n\r\nI looked into other editors that support such behavior:\r\n1. [JetBrains client](https://www.jetbrains.com/help/idea/remote-development-overview.html#859dd19f): JetBrains Client has an advanced editor based on the JetBrains Riderâ€™s RD protocol, which makes typing feel instant.\r\n2. [Lapce](https://docs.lapce.dev/development/architecture): Lapce lets the client do the buffer management and communicates the delta changes in the buffer over to the server which does everything else.\r\n3. VS Code: My guess, is that VS Code, also does something similar to support snappy editing over remote connections, although I could not find any documents supporting this.\r\n\r\nAnother question is how does this fit into our roadmap and vision for Neovim? If this is something we would be interested in, I would be happy to work towards getting it across the finish line.\r\n\r\n### Expected behavior\r\n\r\nEditing is fast even when network is unstable or disconnected (obviously for the cached buffers)",
    "closed_at": null,
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
        "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
        "followers_url": "https://api.github.com/users/zeertzjq/followers",
        "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
        "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zeertzjq",
        "id": 35768171,
        "login": "zeertzjq",
        "node_id": "MDQ6VXNlcjM1NzY4MTcx",
        "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
        "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
        "repos_url": "https://api.github.com/users/zeertzjq/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zeertzjq",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Duplicate of #21635",
            "created_at": "2023-08-13T04:24:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1676220901",
            "id": 1676220901,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5j6Rnl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676220901/reactions"
            },
            "updated_at": "2023-08-13T04:24:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676220901",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Created this because of [this comment](https://github.com/neovim/neovim/issues/21635#issuecomment-1674698983) from @justinmk. The scope of that issue seemed to be to just set up remote connections through a single command.\r\n\r\nThis issue is to initiate discussion on how we can achieve this behavior. Let me know if this discussion would be more suitable in that issue @zeertzjq. Thanks!",
            "created_at": "2023-08-13T04:28:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1676221440",
            "id": 1676221440,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5j6RwA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676221440/reactions"
            },
            "updated_at": "2023-09-15T13:02:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676221440",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29333147?v=4",
                "events_url": "https://api.github.com/users/amitds1997/events{/privacy}",
                "followers_url": "https://api.github.com/users/amitds1997/followers",
                "following_url": "https://api.github.com/users/amitds1997/following{/other_user}",
                "gists_url": "https://api.github.com/users/amitds1997/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amitds1997",
                "id": 29333147,
                "login": "amitds1997",
                "node_id": "MDQ6VXNlcjI5MzMzMTQ3",
                "organizations_url": "https://api.github.com/users/amitds1997/orgs",
                "received_events_url": "https://api.github.com/users/amitds1997/received_events",
                "repos_url": "https://api.github.com/users/amitds1997/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amitds1997/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amitds1997/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amitds1997",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Maybe mosh is also relevant, though I don't think it can work with neovim out of the box.",
            "created_at": "2023-08-13T09:22:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1676294311",
            "id": 1676294311,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5j6jin",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676294311/reactions"
            },
            "updated_at": "2023-08-13T09:22:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676294311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41792945?v=4",
                "events_url": "https://api.github.com/users/fecet/events{/privacy}",
                "followers_url": "https://api.github.com/users/fecet/followers",
                "following_url": "https://api.github.com/users/fecet/following{/other_user}",
                "gists_url": "https://api.github.com/users/fecet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fecet",
                "id": 41792945,
                "login": "fecet",
                "node_id": "MDQ6VXNlcjQxNzkyOTQ1",
                "organizations_url": "https://api.github.com/users/fecet/orgs",
                "received_events_url": "https://api.github.com/users/fecet/received_events",
                "repos_url": "https://api.github.com/users/fecet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fecet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fecet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fecet",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Maybe mosh is also relevant, though I don't think it can work with neovim out of the box.\r\n\r\nMosh will definitely help us perform better on slow networks but it would not help us much with the overall situation that every action has to happen at the remote and travel back to the UI client.\r\n\r\nIf the buffer changes instead happen locally and the remote server just provides all the additional details, LSP, linters, remote commands, etc. I think we can reduce the net data transfer and make things faster. I am obviously overlooking a lot of actual details and challenges that we would have to get through to make this possible.\r\n\r\nI do not want to distract the group but this approach might have further advantages:\r\n1. Actual real time collaboration can be a reality with this. I don't think it's possible right now. But that's a non-goal for this issue.\r\n2. Right now, UIs are auto adjusted to the smallest viewframe available. Shifting this responsibility onto the client would help each client draw it's own UI and operate at different scales independently with the same data.",
            "created_at": "2023-08-13T09:52:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1676302638",
            "id": 1676302638,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5j6lku",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676302638/reactions"
            },
            "updated_at": "2023-08-13T09:52:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676302638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29333147?v=4",
                "events_url": "https://api.github.com/users/amitds1997/events{/privacy}",
                "followers_url": "https://api.github.com/users/amitds1997/followers",
                "following_url": "https://api.github.com/users/amitds1997/following{/other_user}",
                "gists_url": "https://api.github.com/users/amitds1997/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amitds1997",
                "id": 29333147,
                "login": "amitds1997",
                "node_id": "MDQ6VXNlcjI5MzMzMTQ3",
                "organizations_url": "https://api.github.com/users/amitds1997/orgs",
                "received_events_url": "https://api.github.com/users/amitds1997/received_events",
                "repos_url": "https://api.github.com/users/amitds1997/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amitds1997/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amitds1997/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amitds1997",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I have been leveraging Neovim to work on Dev containers and this would make my life way better so I am willing to put a bit of effort into making this possible. I do realize that this may involve some lengthy design discussions before deciding upon how to achieve this. But if I could have some pointers on what would be the right place to begin at, I would happy to do some initial legwork on this or start a discussion on this.\r\n\r\nI do see that this is currently unplanned so I do realize that this is not a priority, and I don't see it being immediately prioritized either but if possible, I do not want this to go stale.\r\n\r\n",
            "created_at": "2023-08-19T17:18:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1685055335",
            "id": 1685055335,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5kb-dn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685055335/reactions"
            },
            "updated_at": "2023-09-15T13:01:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685055335",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29333147?v=4",
                "events_url": "https://api.github.com/users/amitds1997/events{/privacy}",
                "followers_url": "https://api.github.com/users/amitds1997/followers",
                "following_url": "https://api.github.com/users/amitds1997/following{/other_user}",
                "gists_url": "https://api.github.com/users/amitds1997/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amitds1997",
                "id": 29333147,
                "login": "amitds1997",
                "node_id": "MDQ6VXNlcjI5MzMzMTQ3",
                "organizations_url": "https://api.github.com/users/amitds1997/orgs",
                "received_events_url": "https://api.github.com/users/amitds1997/received_events",
                "repos_url": "https://api.github.com/users/amitds1997/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amitds1997/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amitds1997/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amitds1997",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "My comment in the other thread was the inspiration for this issue, but the comment was flagged in that thread, so I'm reproducing here. Hopefully I can also explain it a bit better after sitting with it for a week.\r\n\r\n**Background** Neovim already supports editing files with native-like performance with minimal latency: netrw. However, modern users also want to run language servers, integrated terminals, and other extensions that netrw does not support. Therefore, we want to add these features to neovim, so that users can edit files in on remote machines without also running the full UI on the remote machine.\r\n\r\n**Most basic version** I think the best approach to adding this is to build an abstraction around how Neovim interacts with the host system. The abstraction includes filesystem access, process execution, environment variables, and any other OS interfaces that Neovim uses. Once the abstraction is in place, the \"local OS\" implementation can be swapped with a \"network socket\" implementation (e.g. a filesystem access would not go to the local OS, but instead would send a request across a network socket to a server which would fulfill the request).\r\n\r\nThis approach would mean that all UI is rendered locally (no network latency), but Neovim would act like it was running on the remote system (scripts would not be able to tell they weren't). For some examples, in this state `:pwd` shows a path on the remote system, `!` filters run processes on the remote system, etc.\r\n\r\n**Ideal version** If we could get this far, it would be a big win for remote editing with neovim, but I don't think it fully gets us to the ideal state, because while most operations should happen on the \"remote\" side, there are many cases where we do actually want to run operations on the local side. The most obvious is init files: I want my local vimrc, but I want to edit files on a remote system. \r\n\r\nTo implement something like this, there should be some way for Neovim to direct each operation to either the \"default\" location (the local OS most of the time, but sometimes a network socket) or the \"local\" location (always the local OS). Some examples might be `:local COMMAND` would run a command in the local location, or a Lua function that runs a closure in the local location.\r\n\r\nWith this new targeting mechanism in place, Neovim could locate runtime path files using the local location, but execute them using the default location. This means that an existing script doesn't need to do anything to support remote editing: it simply thinks that it's being hosted in a neovim running on the remote system. But new scripts can use escape hatches like `:local` to perform rich integrations with the user's local terminal where appropriate (e.g. opening a browser window).\r\n\r\n**Open questions:**\r\n\r\n- What needs to be covered under this abstraction? The goal of the default location is to effectively trick any user command or script that isn't \"location-aware\" that it's actually running on the remote system.\r\n- What core parts of Neovim need to be made location-aware? Init scripts and runtime path files are already mentioned. The integrated terminal will likely require special attention.\r\n- Does there need to be a \"remote runtime path\" feature or some other way of supporting \"remote extensions\"? I don't think this is critical and I think that a third-party plugin manager could add support for it instead.\r\n- This proposal does not talk about where the magic \"network socket\" comes from (i.e. installation o the remote host). I think this is better left to third-party scripts, but we should make sure to leave a way for such a script to install and connect to a remote from within Neovim (e.g. \"restart with this modified command line\").\r\n\r\nHopefully this helps get the discussion going around the ideal architecture for a no-latency, network-enabled editing experience, and what would have to change in Neovim to reach it. I would love to help work on this feature, but realistically it's low on my priority list (when I am remote editing today, I switch to VSCodium).",
            "created_at": "2023-08-21T10:46:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1686091498",
            "id": 1686091498,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5kf7bq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686091498/reactions"
            },
            "updated_at": "2023-09-15T11:30:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686091498",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1216626?v=4",
                "events_url": "https://api.github.com/users/CGamesPlay/events{/privacy}",
                "followers_url": "https://api.github.com/users/CGamesPlay/followers",
                "following_url": "https://api.github.com/users/CGamesPlay/following{/other_user}",
                "gists_url": "https://api.github.com/users/CGamesPlay/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/CGamesPlay",
                "id": 1216626,
                "login": "CGamesPlay",
                "node_id": "MDQ6VXNlcjEyMTY2MjY=",
                "organizations_url": "https://api.github.com/users/CGamesPlay/orgs",
                "received_events_url": "https://api.github.com/users/CGamesPlay/received_events",
                "repos_url": "https://api.github.com/users/CGamesPlay/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/CGamesPlay/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CGamesPlay/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/CGamesPlay",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Have you tried https://github.com/chipsenkbeil/distant.nvim ? What's missing from it, if we integrated it into Nvim?",
            "created_at": "2023-09-13T10:20:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1717355269",
            "id": 1717355269,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5mXMMF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717355269/reactions"
            },
            "updated_at": "2023-09-13T10:21:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717355269",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Distant looks promising (haven't used it personally), but from the design doc the biggest thing it's missing: it requires all plugins to opt in to accessing remote resources. If nvim exposed some way for distant to make this behavior opt-out rather than opt-in, I think it could be a viable approach.\r\n\r\nWhat I mean by this: if I want to use a language server plugin, it has to be distant-aware and know to execute the language server remotely rather than on the local system. By default, it won't and will crash because none of the source files are locatable.\r\n\r\nSo to make this a solution that enables a true seamless remote environment, nvim should provide some hooks that distant could use to make other scripts think they were actually running on the remote system, including for processes, environment, and file system. If nvim exposed these and distant implemented them, the entire existing plugin ecosystem would \"just work\" remotely, I believe.",
            "created_at": "2023-09-15T05:23:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1720694633",
            "id": 1720694633,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5mj7dp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1720694633/reactions"
            },
            "updated_at": "2023-09-15T05:24:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1720694633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1216626?v=4",
                "events_url": "https://api.github.com/users/CGamesPlay/events{/privacy}",
                "followers_url": "https://api.github.com/users/CGamesPlay/followers",
                "following_url": "https://api.github.com/users/CGamesPlay/following{/other_user}",
                "gists_url": "https://api.github.com/users/CGamesPlay/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/CGamesPlay",
                "id": 1216626,
                "login": "CGamesPlay",
                "node_id": "MDQ6VXNlcjEyMTY2MjY=",
                "organizations_url": "https://api.github.com/users/CGamesPlay/orgs",
                "received_events_url": "https://api.github.com/users/CGamesPlay/received_events",
                "repos_url": "https://api.github.com/users/CGamesPlay/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/CGamesPlay/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CGamesPlay/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/CGamesPlay",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> if I want to use a language server plugin, it has to be distant-aware and know to execute the language server remotely rather than on the local system.\r\n\r\n[vscode remote](https://code.visualstudio.com/docs/remote/remote-overview) runs extensions on the remote system in a remote vscode server. It doesn't have a layer that allows _local_ extensions to transparently operate in a remote context. That's a [tarpit](https://www.bu.edu/csmet/2018/08/30/re-reading-tanenbaums-critique-of-rpc-30-years-later/).\r\n\r\n> nvim should provide some hooks that distant could use to make other scripts think they were actually running on the remote system, including for processes, environment, and file system.\r\n\r\nImpossible. And outside the scope of the original request here.\r\n\r\n# Proposal\r\n\r\nI interpret the \"expected behavior\" as:\r\n\r\n> Make insert/visual/normal-mode fast, for the current buffer.\r\n\r\nMost latency-sensitive editing operations do not need to run remotely. The obvious exception is auto-completion. Here's a sketch (can be adjusted/updated) of something that could work:\r\n\r\n1. Let plugins declare themselves as \"workspace\", or \"ui\". VSCode has this [concept](https://code.visualstudio.com/api/advanced-topics/remote-extensions#architecture-and-extension-kinds).\r\n2. Introduce \"remote-sync mode\": unlike the current `--remote-ui` where _everything_ is owned by the remote, this alternate mode does:\r\n    - _2-way sync_ of remote <=> local buffers (how [ActualVim](https://github.com/lunixbochs/ActualVim) and [vscode-neovim](https://github.com/vscode-neovim/vscode-neovim/) work).\r\n        - Syncs buffer contents, does _not_ attempt to resolve \"edit operations\" (CRDT-style).\r\n    - Local Nvim presents the current buffer as a scratch buffer in local Nvim.\r\n    - Local Nvim owns editing of the current (scratch) buffer.\r\n    - Local Nvim enables \"ui\" plugins on the current (scratch) buffer.\r\n    - Everything else (window layout, cmdline-mode, execution of most plugins and scripts, ...) is owned by the remote.\r\n3. Implement this as a _plugin_, just like vscode-neovim.\r\n    - The edges are getting polished away over time, which indicates this is tractable.\r\n    - We have line-of-sight to concrete improvements needed in Nvim ([example](https://github.com/neovim/neovim/issues/19806)).\r\n4. How does LSP completion work in insert-mode?\r\n    - Note: vscode-neovim delegates insert-mode to vscode (the \"remote\"). But for this feature request, local Nvim needs to own insert-mode (to avoid latency).\r\n    - `vim.lsp` provides a special \"ui\" variant of `vim.lsp.omnifunc()` which makes a request to the remote `vim.lsp` and feeds the result into local.\r\n    - Other LSP plugins would need to provide a (thin) \"ui\" variant which calls into remote Nvim as needed.",
            "created_at": "2023-09-15T13:05:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1721251205",
            "id": 1721251205,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5mmDWF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721251205/reactions"
            },
            "updated_at": "2023-09-15T13:54:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1721251205",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "You're right, trying to proxy local plugins over to the remote is probably a bad idea. Definitely an oversight on my part. It makes sense for a remote-providing plugin to be responsible for installing \"ui\" or \"workspace\" plugins separately. I definitely would like to see a solution that, as much as is possible, doesn't require throwing out all of the existing plugin ecosystem.\r\n\r\nWhat would it mean for a plugin to actually be \"workspace\" or \"ui\"? Would this be just a flag that enables a plugin to disable itself if not used in the right context?\r\n\r\nPer your second point, is there a technical reason why it couldn't be all open buffers? During a transient lag spike (wifi drops), I would love to be able to switch between opened buffers, referencing one file and typing into another. Similarly, is it impossible to do the window layout locally? Users can resize splits and the entire terminal with the mouse, and which would lead to a pretty laggy experience, and completely break Nvim during a transient lag spike.",
            "created_at": "2023-09-16T22:58:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1722335364",
            "id": 1722335364,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5mqMCE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722335364/reactions"
            },
            "updated_at": "2023-09-16T22:58:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722335364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1216626?v=4",
                "events_url": "https://api.github.com/users/CGamesPlay/events{/privacy}",
                "followers_url": "https://api.github.com/users/CGamesPlay/followers",
                "following_url": "https://api.github.com/users/CGamesPlay/following{/other_user}",
                "gists_url": "https://api.github.com/users/CGamesPlay/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/CGamesPlay",
                "id": 1216626,
                "login": "CGamesPlay",
                "node_id": "MDQ6VXNlcjEyMTY2MjY=",
                "organizations_url": "https://api.github.com/users/CGamesPlay/orgs",
                "received_events_url": "https://api.github.com/users/CGamesPlay/received_events",
                "repos_url": "https://api.github.com/users/CGamesPlay/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/CGamesPlay/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CGamesPlay/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/CGamesPlay",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The suggested proposal seems great for the current issue. \r\n\r\nWhen we talk about plugins under the UI/workspace concept, would a status line plugin like [lualine.nvim](https://github.com/nvim-lualine/lualine.nvim) be a UI plugin or a workspace one? The status line is just a UI component but it needs data that is only available at remote (e.g. the LSP attached to current buffer, current warnings, number of search results found, etc). Would it be possible for plugins to dictate which components of the UI will be owned by them and coming over the network? \r\n\r\nIf not, then it might make sense for the entire UI to be owned either by remote (the current way) or the local Nvim.",
            "created_at": "2023-09-17T06:30:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1722405509",
            "id": 1722405509,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5mqdKF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722405509/reactions"
            },
            "updated_at": "2023-09-17T06:30:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722405509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29333147?v=4",
                "events_url": "https://api.github.com/users/amitds1997/events{/privacy}",
                "followers_url": "https://api.github.com/users/amitds1997/followers",
                "following_url": "https://api.github.com/users/amitds1997/following{/other_user}",
                "gists_url": "https://api.github.com/users/amitds1997/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amitds1997",
                "id": 29333147,
                "login": "amitds1997",
                "node_id": "MDQ6VXNlcjI5MzMzMTQ3",
                "organizations_url": "https://api.github.com/users/amitds1997/orgs",
                "received_events_url": "https://api.github.com/users/amitds1997/received_events",
                "repos_url": "https://api.github.com/users/amitds1997/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amitds1997/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amitds1997/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amitds1997",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What would it mean for a plugin to actually be \"workspace\" or \"ui\"?\r\n\r\nWhen connected in \"remote-sync mode\", \r\n\r\n- \"workspace\" plugins execute in the remote `nvim` server\r\n- \"ui\" plugins execute in the local `nvim` client. They don't have any idea about the remote server unless they explicity request it (as in the LSP completion example above).\r\n\r\n> is there a technical reason why it couldn't be all open buffers? ... is it impossible to do the window layout locally?\r\n\r\nNo technical reason, just a constraint that limits scope, without being a \"one-way door\".\r\n\r\n> would a status line plugin like [lualine.nvim](https://github.com/nvim-lualine/lualine.nvim) be a UI plugin or a workspace one?\r\n\r\nThat's up to the plugin. I would expect it to be a \"ui\" plugin, but it will likely need to make explicit requests to the remote.",
            "created_at": "2023-09-18T15:09:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/24690#issuecomment-1723652569",
            "id": 1723652569,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24690",
            "node_id": "IC_kwDOAPphoM5mvNnZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1723652569/reactions"
            },
            "updated_at": "2023-09-18T15:15:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1723652569",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 12,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24690/comments",
    "created_at": "2023-08-13T04:20:30Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24690/events",
    "html_url": "https://github.com/neovim/neovim/issues/24690",
    "id": 1848399157,
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "remote UI, --remote commands, p2p / peer-to-peer",
            "id": 2269137131,
            "name": "remote",
            "node_id": "MDU6TGFiZWwyMjY5MTM3MTMx",
            "url": "https://api.github.com/repos/neovim/neovim/labels/remote"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 5415073845,
            "name": "network",
            "node_id": "LA_kwDOAPphoM8AAAABQsN4NQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/network"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24690/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 285,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 339,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-07-04T21:53:41Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM5uLFU1",
    "number": 24690,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 27,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 27,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24690/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": "reopened",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24690/timeline",
    "title": "Making editing snappier over remote networks",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:57:54Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24690",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29333147?v=4",
        "events_url": "https://api.github.com/users/amitds1997/events{/privacy}",
        "followers_url": "https://api.github.com/users/amitds1997/followers",
        "following_url": "https://api.github.com/users/amitds1997/following{/other_user}",
        "gists_url": "https://api.github.com/users/amitds1997/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/amitds1997",
        "id": 29333147,
        "login": "amitds1997",
        "node_id": "MDQ6VXNlcjI5MzMzMTQ3",
        "organizations_url": "https://api.github.com/users/amitds1997/orgs",
        "received_events_url": "https://api.github.com/users/amitds1997/received_events",
        "repos_url": "https://api.github.com/users/amitds1997/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/amitds1997/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/amitds1997/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/amitds1997",
        "user_view_type": "public"
    }
}