{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nI'd like to disable some language servers based on what the path / cwd is. For example, I don't want to run [harper-ls](https://github.com/Automattic/harper) if the path is outside of my development paths. eg: Don't run on public cloned trees.\n\nI was thinking something like a `enabled = function(...):boolean` or similar. I'm aware that I can have this logic around where I call `vim.lsp.enable()`, but having it in the LS definition table feels cleaner.\n\nI can create a PR if this is a feature that would be accepted. Thanks.\n\nRelated: https://github.com/neovim/neovim/issues/31762\n\n### Expected behavior\n\nHave the ability to enable/disable a language server from the `vim.lsp.Config` table.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Use `vim.lsp.start()` directly for this, which gives you full control. `vim.lsp.enable()` is meant to reduce boilerplate in the \"90% case\".",
            "created_at": "2025-01-15T17:00:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/32037#issuecomment-2593468422",
            "id": 2593468422,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32037",
            "node_id": "IC_kwDOAPphoM6alTAG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2593468422/reactions"
            },
            "updated_at": "2025-01-15T17:01:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2593468422",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think something like an `LspInit` autocmd would be a good addition that would fulfill this and a few other use cases. Basically a hook to intercept when the LSP is about to be started to give the user a chance to change the config or abandon attaching. Hopefully this will cover 7-8% of the remaining 10% maybe ðŸ¤ž. We can continue to collect requests and make a decision later.",
            "created_at": "2025-01-15T19:33:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/32037#issuecomment-2593777432",
            "id": 2593777432,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32037",
            "node_id": "IC_kwDOAPphoM6amecY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2593777432/reactions"
            },
            "updated_at": "2025-01-15T19:34:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2593777432",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Can `before_init` be used for this, or does that occur after the server is launched? If not, +1 to something like an `LspInit` event or `before_launch` handler.",
            "created_at": "2025-01-16T03:52:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/32037#issuecomment-2594422503",
            "id": 2594422503,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32037",
            "node_id": "IC_kwDOAPphoM6ao77n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2594422503/reactions"
            },
            "updated_at": "2025-01-16T03:52:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2594422503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/42975660?v=4",
                "events_url": "https://api.github.com/users/andrewbraxton/events{/privacy}",
                "followers_url": "https://api.github.com/users/andrewbraxton/followers",
                "following_url": "https://api.github.com/users/andrewbraxton/following{/other_user}",
                "gists_url": "https://api.github.com/users/andrewbraxton/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/andrewbraxton",
                "id": 42975660,
                "login": "andrewbraxton",
                "node_id": "MDQ6VXNlcjQyOTc1NjYw",
                "organizations_url": "https://api.github.com/users/andrewbraxton/orgs",
                "received_events_url": "https://api.github.com/users/andrewbraxton/received_events",
                "repos_url": "https://api.github.com/users/andrewbraxton/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/andrewbraxton/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/andrewbraxton/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/andrewbraxton",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think something like an LspInit autocmd would be a good addition that would fulfill this and a few other use cases. Basically a hook to intercept when the LSP is about to be started to give the user a chance to change the config or abandon attaching\n\nSounds interesting, but what's the advantage over deferring to a FileType autocmd or ftplugin file that calls lsp.start?\n\nIn light of https://github.com/neovim/neovim/pull/31824 I'm also a bit warry of adding X new properties for each use-case.\nTwo others that already come to mind: Require file on disk (with potential auto-save), some servers fail otherwise and `buftype` filter/logic.\n\n",
            "created_at": "2025-01-17T09:47:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/32037#issuecomment-2597837234",
            "id": 2597837234,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32037",
            "node_id": "IC_kwDOAPphoM6a19my",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2597837234/reactions"
            },
            "updated_at": "2025-01-17T09:47:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2597837234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Sounds interesting, but what's the advantage over deferring to a FileType autocmd or ftplugin file that calls lsp.start?\n\nI guess so users can use the high level API `vim.lsp.enable` as normal, and then (potentially in other files), add these hooks to handle special cases, which may be defined by language plugins.\n\n> In light of #31824 I'm also a bit warry of adding X new properties for each use-case.\n\nWell I'm hoping that providing more generic hooks that can be composed in a sort of distributed way can avoid adding new properties. For example, the require_workspace property _could_ actually be implemented by an LspInit autocmd, though need to keep in mind if the goal is to prevent an Lsp from starting, you'll want that hook to run last.\n\nWith that said, I don't see this any different to the myriad of `Buf*` autocmds. Yes there's a lot and it can be complex sometimes, but they fulfill their role very well and are the backbone to many plugins. I wouldn't be against us taking a similar route with LSP hooks.",
            "created_at": "2025-01-17T10:51:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/32037#issuecomment-2598035563",
            "id": 2598035563,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32037",
            "node_id": "IC_kwDOAPphoM6a2uBr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2598035563/reactions"
            },
            "updated_at": "2025-01-17T10:51:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2598035563",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> and then (potentially in other files), add these hooks to handle special cases, which may be defined by language plugins.\n\nThat does sound compelling and if it achives that would remove the remaining blockers I have in nvim-jdtls to fully support lsp.config without any downsides compared to the current jdtls.start_or_attach approach.",
            "created_at": "2025-01-17T12:31:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/32037#issuecomment-2598267015",
            "id": 2598267015,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32037",
            "node_id": "IC_kwDOAPphoM6a3miH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2598267015/reactions"
            },
            "updated_at": "2025-01-17T12:31:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2598267015",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> something like an `LspInit` autocmd would be a good addition that would fulfill this and a few other use cases. Basically a hook to intercept when the LSP is about to be started to give the user a chance to change the config or abandon attaching.\n\nSounds like `LspAttachPre`, if following existing conventions.\n\n\n\n> I was thinking something like a `enabled = function(...):boolean` or similar. I'm aware that I can have this logic around where I call `vim.lsp.enable()`, but having it in the LS definition table feels cleaner.\n\nThat motivation is not compelling at all. \n\nBut I'll assume that @lewis6991 @mfussenegger see some other worthwhile motivation.",
            "created_at": "2025-01-17T23:30:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/32037#issuecomment-2599370600",
            "id": 2599370600,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32037",
            "node_id": "IC_kwDOAPphoM6a7z9o",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599370600/reactions"
            },
            "updated_at": "2025-01-17T23:30:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599370600",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "FWIW, I was able to control when `vim.lsp.start()` runs by mis-using `root_dir`, and only calling the callback function under certain conditions:\n\n```lua\nvim.lsp.config.denols = {\n\tcmd = { \"deno\", \"lsp\" },\n\tfiletypes = { \"javascript\", \"javascriptreact\", \"javascript.jsx\", \"typescript\", \"typescriptreact\", \"typescript.tsx\" },\n\troot_dir = function(_, callback)\n\t\tlocal root_dir = vim.fs.root(0, { \"deno.json\", \"deno.jsonc\" })\n\n\t\tif root_dir then\n\t\t\tcallback(root_dir)\n\t\tend\n\tend,\n}\n\nvim.lsp.enable({ \"denols\" })\n\nvim.lsp.config.ts_ls = {\n\tcmd = { \"typescript-language-server\", \"--stdio\" },\n\tfiletypes = { \"javascript\", \"javascriptreact\", \"javascript.jsx\", \"typescript\", \"typescriptreact\", \"typescript.tsx\" },\n\troot_dir = function(_, callback)\n\t\tlocal deno_dir = vim.fs.root(0, { \"deno.json\", \"deno.jsonc\" })\n\t\tlocal root_dir = vim.fs.root(0, { \"tsconfig.json\", \"jsconfig.json\", \"package.json\" })\n\n\t\tif root_dir and deno_dir == nil then\n\t\t\tcallback(root_dir)\n\t\tend\n\tend,\n}\n\nvim.lsp.enable({ \"ts_ls\" })\n```\n\nThis particular example gives me desirable behavior in a Supabase project where I want to run `denols` on my Edge Functions (which run w/ the Deno runtime) and `ts_ls` everywhere else in the project.\n\nNot sure this is the API y'all will want to settle on, but I thought it was interesting that the desired behavior in this issue is technically possible today, and perhaps useful to anyone who needs this now.",
            "created_at": "2025-04-03T04:16:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/32037#issuecomment-2774451000",
            "id": 2774451000,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32037",
            "node_id": "IC_kwDOAPphoM6lXsM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2774451000/reactions"
            },
            "updated_at": "2025-04-03T04:16:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2774451000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/121139610?v=4",
                "events_url": "https://api.github.com/users/h14h/events{/privacy}",
                "followers_url": "https://api.github.com/users/h14h/followers",
                "following_url": "https://api.github.com/users/h14h/following{/other_user}",
                "gists_url": "https://api.github.com/users/h14h/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h14h",
                "id": 121139610,
                "login": "h14h",
                "node_id": "U_kgDOBzhxmg",
                "organizations_url": "https://api.github.com/users/h14h/orgs",
                "received_events_url": "https://api.github.com/users/h14h/received_events",
                "repos_url": "https://api.github.com/users/h14h/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h14h/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h14h/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h14h",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32037/comments",
    "created_at": "2025-01-15T16:58:31Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32037/events",
    "html_url": "https://github.com/neovim/neovim/issues/32037",
    "id": 2790364778,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32037/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6mUZZq",
    "number": 32037,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32037/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32037/timeline",
    "title": "boolean in vim.lsp.Config to determine if a language server should be enabled.",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-03T04:16:16Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32037",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/22371?v=4",
        "events_url": "https://api.github.com/users/dsully/events{/privacy}",
        "followers_url": "https://api.github.com/users/dsully/followers",
        "following_url": "https://api.github.com/users/dsully/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsully/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dsully",
        "id": 22371,
        "login": "dsully",
        "node_id": "MDQ6VXNlcjIyMzcx",
        "organizations_url": "https://api.github.com/users/dsully/orgs",
        "received_events_url": "https://api.github.com/users/dsully/received_events",
        "repos_url": "https://api.github.com/users/dsully/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dsully/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsully/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dsully",
        "user_view_type": "public"
    }
}