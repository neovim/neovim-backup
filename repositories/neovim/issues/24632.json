{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\n`vim.ui.select` is based on the inversion of control pattern and takes as an argument the callback that will handle the selected element. This is clearly a very useful function!\r\n\r\nBut I was thinking it would also be useful with the blocking variant, perhaps called `vim.ui.select_blocking`, that will instead return the selected element and return control to the calling function. I know we have `inputlist()`, with which I can do this:\r\n\r\n```lua\r\nlocal foo = function()\r\n  local list = {\r\n    \"one\",\r\n    \"two\",\r\n    \"three\",\r\n  }\r\n\r\n  local idx = vim.fn.inputlist(list)\r\n\r\n  print(\"You chose: \" .. list[idx])\r\nend\r\n```\r\n\r\nHowever, I would argue that `inputlist()` is quite restricted with regards to allowing modern UIs. With `vim.ui.select`, we are able to give the user quite a lot of flexibility. Both with regards to things like adding a formatter function and on allowing different implementations/backends (e.g. fzf, Telescope). Further, `inputlist()` really \"feels\" old fashioned. It does not work well with things like noice.nvim. I could go on, but I believe most of you understand what I'm talking about here.\r\n\r\n### Expected behavior\r\n\r\nI would like to do things like this:\r\n\r\n```lua\r\nlocal foo = function()\r\n  local list = {\r\n    \"one\",\r\n    \"two\",\r\n    \"three\",\r\n  }\r\n\r\n  local selection = vim.ui.select_blocking(list, {\r\n      prompt =  \"please select:\",\r\n      format_item =  function(i) return \"â†’ \" .. i end,\r\n  })\r\n\r\n  print(\"You chose: \" .. selection)\r\nend\r\n```\r\n\r\nWhere `select_blocking` can have a useful default implementation that can be overridden by users that want to use e.g. things like fzf, Telescope or similar as backends.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "By the way: If the community should agree that this would be useful, then I would also think the same \"logic\" applies for building the corresponding blocking variants of `vim.ui.input` and `vim.ui.confirm`. If so, I can open similar feature requests for these. But I'll hold back until we've had a discussion on the `select` behaviour first.",
            "created_at": "2023-08-09T17:52:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-1671884752",
            "id": 1671884752,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM5jpu_Q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1671884752/reactions"
            },
            "updated_at": "2023-08-09T17:52:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1671884752",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/998898?v=4",
                "events_url": "https://api.github.com/users/lervag/events{/privacy}",
                "followers_url": "https://api.github.com/users/lervag/followers",
                "following_url": "https://api.github.com/users/lervag/following{/other_user}",
                "gists_url": "https://api.github.com/users/lervag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lervag",
                "id": 998898,
                "login": "lervag",
                "node_id": "MDQ6VXNlcjk5ODg5OA==",
                "organizations_url": "https://api.github.com/users/lervag/orgs",
                "received_events_url": "https://api.github.com/users/lervag/received_events",
                "repos_url": "https://api.github.com/users/lervag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lervag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lervag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lervag",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think that could be done with `sync = true` keyword (or omitted `on_choice` function?), so no need for separate functions. (Of course, whether the overriding UIs respect that is another question entirely...)",
            "created_at": "2023-08-09T17:56:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-1671890720",
            "id": 1671890720,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM5jpwcg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1671890720/reactions"
            },
            "updated_at": "2023-08-09T17:58:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1671890720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Or luv style where omitting a callback infers sync.",
            "created_at": "2023-08-09T18:06:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-1671902815",
            "id": 1671902815,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM5jpzZf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1671902815/reactions"
            },
            "updated_at": "2023-08-09T18:06:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1671902815",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Where select_blocking can have a useful default implementation that can be overridden by users that want to use e.g. things like fzf, Telescope or similar as backends.\r\n\r\nIt's afaik impossible to implement a version using fzf or telescope that's *blocking* the main loop. The main loop has to run in order to display the window and process input. \r\n\r\nThe way to go is to use coroutine's if you want to avoid callback nesting. See also https://github.com/neovim/neovim/issues/19624\r\n\r\n---\r\n\r\n> I think that could be done with sync = true keyword (or omitted on_choice function?), so no need for separate functions. (Of course, whether the overriding UIs respect that is another question entirely...)\r\n\r\n> Or luv style where omitting a callback infers sync.\r\n\r\nEven if it would be possible to implement a blocking style, adding new options or changing signatures is unfortunately also problematic - see discussions in https://github.com/neovim/neovim/pull/21681 and https://github.com/neovim/neovim/pull/20053",
            "created_at": "2023-08-11T05:36:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-1674234234",
            "id": 1674234234,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM5jysl6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1674234234/reactions"
            },
            "updated_at": "2023-08-11T06:06:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1674234234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > Where select_blocking can have a useful default implementation that can be overridden by users that want to use e.g. things like fzf, Telescope or similar as backends.\r\n> \r\n> It's afaik impossible to implement a version using fzf or telescope that's _blocking_ the main loop. The main loop has to run in order to display the window and process input.\r\n\r\nNo, it is _not_ impossible. And IMHO clearly so: More or less all of the \"classic\" selector plugins were blocking (e.g. CtrlP).\r\n\r\nWe have all the building blocks to build a blocking selector. I built one for wiki.vim - the source is [here](https://github.com/lervag/wiki.vim/blob/04459625f1b6faa2b02ce763fc6fbc24d4a51f21/autoload/wiki/ui/nvim.vim#L90-L143). I'm not saying it's very good, my point is only to say that this is indeed possible.\r\n\r\nFor Telescope, it _would_ require some work that perhaps no one is interested in doing. But for fzf, I think it is fair to point out that the first fzf integrations in Vim was always blocking (but clearly very much of a hack!).\r\n\r\n> The way to go is to use coroutine's if you want to avoid callback nesting. See also #19624\r\n\r\nIf we use coroutine's then we don't need the blocking variant. However, I believe this means we need to be able to control the coroutine's from the caller. This means the concept becomes impossible to work with in Vimscript, but it also means it will be much harder to use also in Lua scripts.\r\n\r\n> > I think that could be done with sync = true keyword (or omitted on_choice function?), so no need for separate functions. (Of course, whether the overriding UIs respect that is another question entirely...)\r\n> \r\n> > Or luv style where omitting a callback infers sync.\r\n> \r\n> Even if it would be possible to implement a blocking style, adding new options or changing signatures is unfortunately also problematic - see discussions in #21681 and #20053\r\n\r\nI believe you might be right about this one, though - I don't quite see how to properly combine the blocking style with the non-blocking in a single function. I think the only way would be to have an outer interface that wraps both variants. And this would be a major breaking change.\r\n\r\nPersonally, I'm fine with having a new name for the blocking style.",
            "created_at": "2023-08-11T06:32:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-1674269021",
            "id": 1674269021,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM5jy1Fd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1674269021/reactions"
            },
            "updated_at": "2023-08-11T06:32:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1674269021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/998898?v=4",
                "events_url": "https://api.github.com/users/lervag/events{/privacy}",
                "followers_url": "https://api.github.com/users/lervag/followers",
                "following_url": "https://api.github.com/users/lervag/following{/other_user}",
                "gists_url": "https://api.github.com/users/lervag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lervag",
                "id": 998898,
                "login": "lervag",
                "node_id": "MDQ6VXNlcjk5ODg5OA==",
                "organizations_url": "https://api.github.com/users/lervag/orgs",
                "received_events_url": "https://api.github.com/users/lervag/received_events",
                "repos_url": "https://api.github.com/users/lervag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lervag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lervag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lervag",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Oh right, I didn't think of blocking via `getchar`.\r\n\r\n\r\nIn that case, a way forward could be to:\r\n\r\n- Switch `vim.ui.select` to a pull/provider model like health checks. It would discover implementations, and use them if they have the required capabilities. Otherwise it has a fallback implementation.\r\n   E.g. there could be a `vim/provider/ui` namespace for plugins, where a plugin can put a module into `vim/provider/ui.lua` that returns supported functions and their capabilities.\r\n\r\nThis would allow extending the function with new options as needed.\r\n\r\n- Support luv style as Lewis suggested\r\n\r\n- In another release, add metatable to `vim.ui` that warns overriding functions is deprecated\r\n\r\n- In another release after ^, turn `vim.ui` into a frozen table.\r\n\r\n\r\n---\r\n\r\n-1 for adding a new function. I think we've to figure out a solution for the extension model, we can't add a new function each time we'd like to add a new parameter and with `confirm()`, `inputlist`, `inputsecret` and `vim.ui.select` it's already quite overloaded.",
            "created_at": "2023-08-11T08:49:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-1674408050",
            "id": 1674408050,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM5jzXBy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1674408050/reactions"
            },
            "updated_at": "2023-08-11T08:52:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1674408050",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes https://github.com/neovim/neovim/issues/19624 seems very relevant, there should be a general way to \"await\" async functionality.\r\n\r\n> E.g. there could be a vim/provider/ui namespace for plugins\r\n\r\n\"pull/provider model\" is generally the right way, but can't we avoid the explicit `provider` namespace? With something like `on_func` #22598 I am convinced that _any_ function can be transformed into a \"provider\" model, we don't need to explicitly organize it for special functions. \r\n\r\nProviders can \"publish\" their capabilities by accepting a special arg, e.g. calling `vim.ui.select({capabilities=true})` gets the capabilities. Or this could be registered when `on_func` is called.",
            "created_at": "2023-08-11T11:55:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-1674624107",
            "id": 1674624107,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM5j0Lxr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1674624107/reactions"
            },
            "updated_at": "2023-08-11T11:55:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1674624107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> In that case, a way forward could be to: â€¦\r\n\r\nYes, your suggestions make a lot of sense to me! And I agree with your argument that adding a new function is suboptimal.",
            "created_at": "2023-08-12T10:00:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-1675825690",
            "id": 1675825690,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM5j4xIa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1675825690/reactions"
            },
            "updated_at": "2023-08-12T10:00:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1675825690",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/998898?v=4",
                "events_url": "https://api.github.com/users/lervag/events{/privacy}",
                "followers_url": "https://api.github.com/users/lervag/followers",
                "following_url": "https://api.github.com/users/lervag/following{/other_user}",
                "gists_url": "https://api.github.com/users/lervag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lervag",
                "id": 998898,
                "login": "lervag",
                "node_id": "MDQ6VXNlcjk5ODg5OA==",
                "organizations_url": "https://api.github.com/users/lervag/orgs",
                "received_events_url": "https://api.github.com/users/lervag/received_events",
                "repos_url": "https://api.github.com/users/lervag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lervag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lervag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lervag",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Providers can \"publish\" their capabilities by accepting a special arg, e.g. calling vim.ui.select({capabilities=true}) gets the capabilities. Or this could be registered when on_func is called.\r\n\r\nI think we need at least one level of indirection between consumer/implementation to be able to add fallback implementations transparently.\r\nOtherwise we'd push the responsibility to check the capabilities to all consumers.\r\n\r\n\r\nInstead of:\r\n\r\nPluginA, B, C, D:\r\n\r\n```\r\nlocal capabilities = vim.ui.select({ capabilities = true })\r\nif capabilities.xy then\r\n    ...\r\nelse\r\n    -- custom falback implementation\r\nend\r\n```\r\n\r\n\r\nWe'd have:\r\n\r\nPluginA, B, C, D:\r\n\r\n```\r\nvim.ui.select(...)\r\n```\r\n\r\nAnd in neovim the implementation would lookup providers, check it's capabilities, and use a fallback implementation if the requested capabilities are missing.\r\nWe'd need to have a spot for this provider lookup and fallback logic. If users continue to override `vim.ui.select` directly, or via `on_func`, we wouldn't have that.\r\n",
            "created_at": "2023-08-24T07:33:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-1691161063",
            "id": 1691161063,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM5kzRHn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1691161063/reactions"
            },
            "updated_at": "2023-08-24T07:33:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1691161063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We'd need to have a spot for this provider lookup and fallback logic. If users continue to override `vim.ui.select` directly, or via `on_func`, we wouldn't have that.\r\n\r\nCouldn't `on_func` (which allows \"stacking\", btw) maintain that lookup? ",
            "created_at": "2024-06-03T13:20:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-2145187821",
            "id": 2145187821,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM5_3Pft",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2145187821/reactions"
            },
            "updated_at": "2024-06-03T13:20:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2145187821",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "+1 on having a blocked version, as someone that makes small plugins and utilities that rely on selection and doing something else with the nested callback is problematic so if we could pause the execution until something is picked by a user it would facilitate the flow of information.\n\nThis is specifically useful when a selection spawns another ui element like a window or input. By default everything launches and becomes nil since it doesn't wait.",
            "created_at": "2025-03-23T04:38:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/24632#issuecomment-2746016730",
            "id": 2746016730,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24632",
            "node_id": "IC_kwDOAPphoM6jrOPa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2746016730/reactions"
            },
            "updated_at": "2025-03-23T23:31:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2746016730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20586114?v=4",
                "events_url": "https://api.github.com/users/mvaldes14/events{/privacy}",
                "followers_url": "https://api.github.com/users/mvaldes14/followers",
                "following_url": "https://api.github.com/users/mvaldes14/following{/other_user}",
                "gists_url": "https://api.github.com/users/mvaldes14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mvaldes14",
                "id": 20586114,
                "login": "mvaldes14",
                "node_id": "MDQ6VXNlcjIwNTg2MTE0",
                "organizations_url": "https://api.github.com/users/mvaldes14/orgs",
                "received_events_url": "https://api.github.com/users/mvaldes14/received_events",
                "repos_url": "https://api.github.com/users/mvaldes14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mvaldes14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mvaldes14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mvaldes14",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 11,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24632/comments",
    "created_at": "2023-08-09T17:39:56Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24632/events",
    "html_url": "https://github.com/neovim/neovim/issues/24632",
    "id": 1843730827,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "futures/promises, async/await, concurrency, task pipelines",
            "id": 5683343649,
            "name": "async",
            "node_id": "LA_kwDOAPphoM8AAAABUsDxIQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/async"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24632/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 706,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-03-23T23:17:47Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5t5RmL",
    "number": 24632,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 5,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 5,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24632/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24632/timeline",
    "title": "vim.ui.select \"blocking\" version that yields result similar to inputlist()",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-03-23T23:31:09Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24632",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/998898?v=4",
        "events_url": "https://api.github.com/users/lervag/events{/privacy}",
        "followers_url": "https://api.github.com/users/lervag/followers",
        "following_url": "https://api.github.com/users/lervag/following{/other_user}",
        "gists_url": "https://api.github.com/users/lervag/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lervag",
        "id": 998898,
        "login": "lervag",
        "node_id": "MDQ6VXNlcjk5ODg5OA==",
        "organizations_url": "https://api.github.com/users/lervag/orgs",
        "received_events_url": "https://api.github.com/users/lervag/received_events",
        "repos_url": "https://api.github.com/users/lervag/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lervag/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lervag/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lervag",
        "user_view_type": "public"
    }
}