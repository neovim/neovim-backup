{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Currently vim loads the whole file into memory, which is bad idea for some files. I think we should consider reworking memfile,regexp engine and all related code to allow editing files that do not fit into the available memory.\r\nAt this time it means that all API functions should be designed as if files are all impossible to load into memory (e.g. you cannot request a piece of file without specifying maximum length you can accept). On VimL side this will result in adding string-pretending lua objects that may be returned by getline()/@c/... and that actually use file positions + binary diffs (API must have FileChangeWritten hooks providing all necessary information) with a warning that editing file (but _not_ appending to it) outside of vim may result in changing some \"strings\". It is better to create infrastructure for handling this on new VimL side right now.\r\n\r\nAn idea for API: getline() C implementation should look like\r\n\r\n```\r\ntypedef struct {\r\n    fpos_t start;  // First byte position\r\n    fpos_t end;    // Last byte position\r\n    size_t len;    // Length of the next field\r\n    char string[1];\r\n} FileString;\r\n```\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "// Accidently hit accept and this app does not seem to allow editing issues unless I have right to edit any issue in repository.\n\n```\nFileString getline(line_T lnr, size_t maxlen);\n```\n\nwith no more then maxlen bytes in the result.\n",
            "created_at": "2014-04-25T09:57:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-41376692",
            "id": 41376692,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzc2Njky",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/41376692/reactions"
            },
            "updated_at": "2014-04-25T09:57:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/41376692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think we should try to support both models (whole file in memory, and streamed file), if possible.\n\nEditing really large files (log files and the like) should be possible. It's a not so common but definitely it's an important use case.\n\nBut most common situation (by large) is, and will be, relatively small files, which pose no problem to be loaded in memory. And having the whole file in memory allows for some improvements (like better syntax checking by really-parsing whole file) that would be prevented if all files were treated in a stream-like way.\n",
            "created_at": "2014-05-05T12:38:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42183152",
            "id": 42183152,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTgzMTUy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42183152/reactions"
            },
            "updated_at": "2014-05-05T12:39:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42183152",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@elmart It is actually how I imagined it will be implemented, but since I am not the one who will be doing this I did not want to give advices which I do not think I am proficient enough to give. I do not think large files will use streaming though.\n\nParsing whole file is completely irrelevant to having whole file in memory. Nothing can prevent you from creating `fgetc`-based parser which will parse the whole file without ever loading it into memory completely. More, you can syntax check the whole file without both having syntax tree of the whole file in memory and having the file itself in memory.\n\nEven more: if the file is not loaded into memory it does not mean API cannot pretend it is. You can use `mmap` to map the whole file into memory (unless it is large enough for it to be impossible to be addressed), but that does not mean it will be actually loaded: kernel may and sometimes does choose to load file only on page fault: when process tried to access file, not when process called `mmap`.\n",
            "created_at": "2014-05-05T17:31:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42213982",
            "id": 42213982,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjEzOTgy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42213982/reactions"
            },
            "updated_at": "2014-05-05T17:34:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42213982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Parsing whole file is completely irrelevant to having whole file in memory\n\nThat's true. Now that I think of it better, they're orthogonal things.\nI was thinking of a live-parser, continuously parsing buffer contents on every change, and that would be much faster if all buffer contents can be hold at memory at the same time. But it's true what you say. We are talking about two different, orthogonal things.\n\nThanks for clarifying.\n",
            "created_at": "2014-05-05T17:44:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42215411",
            "id": 42215411,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjE1NDEx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42215411/reactions"
            },
            "updated_at": "2014-05-05T17:44:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42215411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@elmart This is much faster if you have incremental parser (AFAIK something like only Yi has this). Cannot say how it is needed to have the whole file in memory for incremental parser.\n\nI do not think that current implementation is going to change soon. But if and when it changes it is better to use Yi’s solution, not constantly reparsing file _completely_ on each change. From its brief summary I have an impression that after first parsing it should not need whole file.\n\nThere are other considerations which disable streaming though: almost any job is easier if you have large enough portion of the file is loaded into memory. Just make it larger then most files you edit and you get the whole file into memory with no effort to code this separately.\n",
            "created_at": "2014-05-05T19:56:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42231143",
            "id": 42231143,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjMxMTQz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42231143/reactions"
            },
            "updated_at": "2014-05-05T19:56:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42231143",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This article [1] by Poul-Henning Kamp is relevant to this problem/discussion.\n\n> The really short version of the story is that Varnish knows it is not running on the bare metal but under an operating system that provides a virtual-memory-based abstract machine. For example, Varnish does not ignore the fact that memory is virtual; it actively exploits it. A 300-GB backing store, memory mapped on a machine with no more than 16 GB of RAM, is quite typical. The user paid for 64 bits of address space, and I am not afraid to use it.\n\n[1] http://queue.acm.org/detail.cfm?id=1814327\n",
            "created_at": "2014-05-06T12:03:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42294078",
            "id": 42294078,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjk0MDc4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42294078/reactions"
            },
            "updated_at": "2014-05-06T12:03:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42294078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/207795?v=4",
                "events_url": "https://api.github.com/users/felipecrv/events{/privacy}",
                "followers_url": "https://api.github.com/users/felipecrv/followers",
                "following_url": "https://api.github.com/users/felipecrv/following{/other_user}",
                "gists_url": "https://api.github.com/users/felipecrv/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/felipecrv",
                "id": 207795,
                "login": "felipecrv",
                "node_id": "MDQ6VXNlcjIwNzc5NQ==",
                "organizations_url": "https://api.github.com/users/felipecrv/orgs",
                "received_events_url": "https://api.github.com/users/felipecrv/received_events",
                "repos_url": "https://api.github.com/users/felipecrv/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/felipecrv/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/felipecrv/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/felipecrv",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "vim_use is currently discussing a patch for large files support: https://groups.google.com/d/msg/vim_use/RLM8Vqa_aME/nY-tlqBB6dMJ\n",
            "created_at": "2014-05-12T23:00:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42899295",
            "id": 42899295,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyODk5Mjk1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42899295/reactions"
            },
            "updated_at": "2014-05-12T23:00:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42899295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Note: I haven't read anything about it, so take my ramblings with a grain of salt. But wouldn't it be the least amount of work to use mmap() everywhere? That way we might not even have to change the internal API a lot, and the OS can take care of the backing store for us (like the Varnish article says, I had read it before). AFAIK all our platforms support it. For small files, we could perhaps force the OS to preload everything with something madvise()-like, as mentioned here: https://news.ycombinator.com/item?id=7736845\n\nAnd maybe it's just better of me to ask: why does vim load the entire swapfile in memory? What _is_ the swapfile exactly? Does it keep all open buffers in memory all the time. Someone who's touched these parts of the code could enlighten me here :).\n",
            "created_at": "2014-05-13T14:43:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42963989",
            "id": 42963989,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTYzOTg5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42963989/reactions"
            },
            "updated_at": "2014-05-13T15:01:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42963989",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "- [2010 mozilla post about Windows mmap performance; mentions madvise](http://blog.mozilla.org/tglek/2010/04/19/windows-sucks-at-memory-mapped-io-during-startup/)\r\n  - [reddit discussion](http://www.reddit.com/r/programming/comments/bu2do/windows_sucks_at_memorymapped_io_during_startup/)\r\n- [hacker news discussion](https://news.ycombinator.com/item?id=239524)\r\n",
            "created_at": "2014-05-13T15:34:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42971242",
            "id": 42971242,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTcxMjQy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42971242/reactions"
            },
            "updated_at": "2019-05-02T20:38:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42971242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@aktau From my Linux knowledge, most probably the Vim swapfile is similar to the swap partition Linux usually has. When the RAM runs out the swap partition is temporarily assigned the work of RAM, it is much more space to work with, but much slower, unless it's an SSD, which should be used for swap partitions as that can reduce the life of the SSD AFAIK.\n\nMaybe the swapfile is similar just for Vim specifically? Gotta remember Vim was coded when GBs upon GBs of RAM weren't available. :)\n\nIf I'm wrong, anyone, feel free to correct me, since I'm just using related(?) knowledge to fill this void in my knowledge. :)\n",
            "created_at": "2014-05-13T15:37:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42971687",
            "id": 42971687,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTcxNjg3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42971687/reactions"
            },
            "updated_at": "2019-12-22T03:26:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42971687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2314074?v=4",
                "events_url": "https://api.github.com/users/greduan/events{/privacy}",
                "followers_url": "https://api.github.com/users/greduan/followers",
                "following_url": "https://api.github.com/users/greduan/following{/other_user}",
                "gists_url": "https://api.github.com/users/greduan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/greduan",
                "id": 2314074,
                "login": "greduan",
                "node_id": "MDQ6VXNlcjIzMTQwNzQ=",
                "organizations_url": "https://api.github.com/users/greduan/orgs",
                "received_events_url": "https://api.github.com/users/greduan/received_events",
                "repos_url": "https://api.github.com/users/greduan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/greduan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/greduan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/greduan",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "There are buffers that do not represent files. It is also very inefficient to move lots of data on each character insertion. You can use mmap() for reading/writing (e.g. :w/:e) always, but never for representing file in memory.\n\n13.05.14, 18:43, \"Nicolas Hillegeer\" notifications@github.com\":\n\n> Note: I haven't read anything about it. But wouldn't it be the least amount of work to use mmap() everywhere? That way we might not even have to change the internal API a lot, and the OS can take care of the backing store for us (like the Varnish article says, I had read it before). AFAIK all our platforms support it. For small files, we could perhaps force the OS to preload everything with something madvise()-like, as mentioned here: https://news.ycombinator.com/item?id=7736845\n> —\n> Reply to this email directly or view it on GitHub.\n\n## \n\nSent from Yandex.Mail for mobile: http://m.ya.ru/ymail\n",
            "created_at": "2014-05-13T15:50:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42973531",
            "id": 42973531,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTczNTMx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42973531/reactions"
            },
            "updated_at": "2014-05-13T15:50:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42973531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> There are buffers that do not represent files. It is also very inefficient to move lots of data on each character insertion. You can use mmap() for reading/writing (e.g. :w/:e) always, but never for representing file in memory.\n\nI (think I) get what you mean. I suppose the swapfile is either more of a `diff` to the original file, truncated whenever `:w` is called. I always had (in the back of my head) that the [rope](http://en.wikipedia.org/wiki/Rope_%28data_structure%29) data structure was a reasonable idea for a text editor data structure. \n\nDoes anybody have a reasonably complete picture of what vim actually does on input/output? How does it modify files? I can't imagine that it writes out a file completely everytime `:w` is called. How doe @tarruda's new fs/io abstractions factor into this? I was (trying to) make head or tails of the `readfile()` function in fileio.c, which mentioned that one of the possibilities was STDIN. I suppose this is separate from the aforementioned new parts.\n\nA diagram would be nice.\n\n(in the meantime, I'll try to make some sense by reading memfile.c a bit, wish I had more time)\n",
            "created_at": "2014-05-13T16:37:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42979520",
            "id": 42979520,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTc5NTIw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42979520/reactions"
            },
            "updated_at": "2019-12-22T03:26:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42979520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": " vfr\n\n13.05.14, 20:37, \"Nicolas Hillegeer\" notifications@github.com\":\n\n> There are buffers that do not represent files. It is also very inefficient to move lots of data on each character insertion. You can use mmap() for reading/writing (e.g. :w/:e) always, but never for representing file in memory.\n> I get what you mean. I suppose the swapfile is either more of a diff to the original file, truncated whenever :w is called. I always had (in the back of my head) that the rope data structure was a reasonable idea for a text editor data structure. \n> Does anybody have a reasonably complete picture of what vim actually does on input/output? How does it modify files? I can't imagine that it writes out a file completely everytime :w is called.\n\nNo clear idea. But it definitely does this at least in one case: when vim is configured to create a new file, write to it and replace old one with new one only upon successful write.\n\nI though have an impression that it overwrites the whole file in any case. You can use strace to check this if you want.\n\n> How doe @tarruda's new fs/io abstractions factor into this? I was (trying to) make head or tails of the readfile() function in fileio.c, which mentioned that one of the possibilities was STDIN. I suppose this is separate from the aforementioned new parts.\n> A diagram would be nice.\n> —\n> Reply to this email directly or view it on GitHub.\n",
            "created_at": "2014-05-13T18:57:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-42997155",
            "id": 42997155,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTk3MTU1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42997155/reactions"
            },
            "updated_at": "2014-05-13T18:57:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/42997155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "A case where such a feature would be useful is to reduce the waiting time when viewing a git log with vim as the pager.\n",
            "created_at": "2014-11-02T21:39:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-61424931",
            "id": 61424931,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDI0OTMx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/61424931/reactions"
            },
            "updated_at": "2014-11-02T21:42:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/61424931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1020987?v=4",
                "events_url": "https://api.github.com/users/mullikine/events{/privacy}",
                "followers_url": "https://api.github.com/users/mullikine/followers",
                "following_url": "https://api.github.com/users/mullikine/following{/other_user}",
                "gists_url": "https://api.github.com/users/mullikine/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mullikine",
                "id": 1020987,
                "login": "mullikine",
                "node_id": "MDQ6VXNlcjEwMjA5ODc=",
                "organizations_url": "https://api.github.com/users/mullikine/orgs",
                "received_events_url": "https://api.github.com/users/mullikine/received_events",
                "repos_url": "https://api.github.com/users/mullikine/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mullikine/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mullikine/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mullikine",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This would only be feasible to support for read-only files, as editing files that are partially loaded in memory would probably be too much of a pain. Not sure how syntax-highlighting will react either, though we can try to game the system by searching for newlines as \"boundaries\" if possible. Quite fragile.\n\nThen there's encoding conversions, which as of right now require the entire file to be read at once. Some encodings are self-synchronizing, like utf-8, so that's easier to support.\n\nActually, now that I think about it more, such a thing would presuppose a dynamic `ml_delete() / ml_append()` scroller than pages in lines from an mmap'ed fd (windows [MapViewOfFile](http://msdn.microsoft.com/en-us/library/windows/desktop/aa366761%28v=vs.85%29.aspx) and converts them on request. Perhaps it will be simpler once we can redo file loading to be a bit saner: #1374\n",
            "created_at": "2014-11-02T22:35:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-61427172",
            "id": 61427172,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDI3MTcy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/61427172/reactions"
            },
            "updated_at": "2014-11-02T22:35:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/61427172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @ZyX-I @aktau I read recently that glibc’s malloc() uses mmap() internally for large files. Does that have any bearing on the goals here?\n\nDo you mean for large allocations? If so, then yes, that's true :). Also did you know that OSX's malloc() uses only mmap()? Afaik OSX doesn't even implement the (s)brk() system calls.\n\nIn any case, I'm afraid it doesn't have too much bearing. Here's something that does (these links have been posted in other issues): \n- https://github.com/martanne/vis\n- https://www.cs.unm.edu/~crowley/papers/sds.pdf\n\nSimply put, currently Vim has a line-based system. Which I appreciate for its elegance/simplicity. Yet it also implies that really large files are difficult. The mmap() I and the paper/program authors are referring to is the direct mmap() of a file to be able to read its contents through demand paging, not an anonymous mmap() used to get memory from the kernel to allocate.\n",
            "created_at": "2015-01-13T22:10:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-69830660",
            "id": 69830660,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODMwNjYw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/69830660/reactions"
            },
            "updated_at": "2015-01-13T22:10:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/69830660",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The mmap() I and the paper/program authors are referring to is the direct mmap() of a file to be able to read its contents through demand paging, not an anonymous mmap() used to get memory from the kernel to allocate.\n\nExactly. It would be magical if malloc alone could solve that for us.\nMemory mapping should reduce the need of #1807.\n",
            "created_at": "2015-01-14T00:31:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-69849281",
            "id": 69849281,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODQ5Mjgx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/69849281/reactions"
            },
            "updated_at": "2015-02-04T05:01:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/69849281",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/207795?v=4",
                "events_url": "https://api.github.com/users/felipecrv/events{/privacy}",
                "followers_url": "https://api.github.com/users/felipecrv/followers",
                "following_url": "https://api.github.com/users/felipecrv/following{/other_user}",
                "gists_url": "https://api.github.com/users/felipecrv/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/felipecrv",
                "id": 207795,
                "login": "felipecrv",
                "node_id": "MDQ6VXNlcjIwNzc5NQ==",
                "organizations_url": "https://api.github.com/users/felipecrv/orgs",
                "received_events_url": "https://api.github.com/users/felipecrv/received_events",
                "repos_url": "https://api.github.com/users/felipecrv/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/felipecrv/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/felipecrv/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/felipecrv",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Nvim project: just great!. Brings one of my \"dreams\" come to reality. For years wanted to write a kind of clone for vim where main requirement was to be able to open an arbitrary large file (as big as RAM allows). The main use case was to open an aggregation of source files, books, anything that could be converted to text and do kind fast fuzzy find like searches inside text, find relation between parts of text (like definition of a variable, usage etc.). I used to hack a bit the source code of vim, do not remember too much now, but I think one of the obvious issues that slows down a bit opening of huge files and this cannot be avoided, vim (and as any editor would do) needs to parse the newlines to satisfy commands like :1234 (go to line). Ideally reading such big files should be done in a background thread, and the user should be able to start to interact with the chunk already loaded. \n\nBTW: did not find so far any reference: does neovim intend to implement threads? Lot of processing could be/should be done in background threads. Often browsing huge files (huge XML for instance) is slow as syntax highlighting and other plugins needs time to react. If all this would be done in a backgroud thread, main operations would be hyper fast, while \"decorators\" could be delayed.\n\n@aktau : do not remember exactly, years ago was looking at what is the best algorithm for editor. Found somewhere a nice article that compares approaches, and I think the conclusion was that best is to work with transaction log. No change is made in the original buffer. When the file is written the transaction log is processed and pieces from original are copied. I think this is also what is done in vim, or? \n",
            "created_at": "2015-02-04T18:21:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-72908766",
            "id": 72908766,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcyOTA4NzY2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/72908766/reactions"
            },
            "updated_at": "2019-05-02T20:41:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/72908766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/141859?v=4",
                "events_url": "https://api.github.com/users/mobiphil/events{/privacy}",
                "followers_url": "https://api.github.com/users/mobiphil/followers",
                "following_url": "https://api.github.com/users/mobiphil/following{/other_user}",
                "gists_url": "https://api.github.com/users/mobiphil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mobiphil",
                "id": 141859,
                "login": "mobiphil",
                "node_id": "MDQ6VXNlcjE0MTg1OQ==",
                "organizations_url": "https://api.github.com/users/mobiphil/orgs",
                "received_events_url": "https://api.github.com/users/mobiphil/received_events",
                "repos_url": "https://api.github.com/users/mobiphil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mobiphil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mobiphil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mobiphil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> does neovim intend to implement threads\n\nTrying to make the core threadsafe would be a complete waste of time, IMO.\n\n> Lot of processing could be/should be done in background threads.\n\nCoprocesses can (and will) be used for that. \n\n>  When the file is written the transaction log is processed and pieces from original are copied.\n\nIf you are talking about operational transforms, I think it is not worth the complication. There are other strategies to consider, that don't require a complete rewrite...\n",
            "created_at": "2015-02-04T19:42:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-72923779",
            "id": 72923779,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcyOTIzNzc5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/72923779/reactions"
            },
            "updated_at": "2015-02-04T19:42:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/72923779",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "While most of the cases syntax highlighting and other \"decorators\" that need to reason about the buffer are very responsive. However in certain cases, when you open a large XML file or similar situations, plugins tend to slow down the user experince, things like scroll down/up etc. The reason is that all operations need to be done in parallel. Scrolling itself which is the most important is jeopardized by the plugins. Threads could help here obviously.\n\nI understand however making it thread safe is indeed very complex. I was wondering if you have it as objective... Maybe a complete rewrite would have been probably an alternative to consider. Obviously one would have wanted to keep the script interface to keep the large script asset base.\n\nNow as you say co processes are the only solution, do you have any design document about that? I think would not be bad to think about separating the basic/core operations being done in a core process. This core process would prepare all the data structures relevant for the buffers (newlines, undo etc. etc.). Coprocesses could read-only \"mirror\" these data structures through shared memory and do things like syntax highlighting and run other scripts. This could be done with some segment/offset addressing, where offsets would be equal in data-structures in both processes and segment pointers would point to the start of the shared memory in processes/co-processes.\n",
            "created_at": "2015-02-05T12:09:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-73036506",
            "id": 73036506,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczMDM2NTA2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73036506/reactions"
            },
            "updated_at": "2019-05-02T20:41:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73036506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/141859?v=4",
                "events_url": "https://api.github.com/users/mobiphil/events{/privacy}",
                "followers_url": "https://api.github.com/users/mobiphil/followers",
                "following_url": "https://api.github.com/users/mobiphil/following{/other_user}",
                "gists_url": "https://api.github.com/users/mobiphil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mobiphil",
                "id": 141859,
                "login": "mobiphil",
                "node_id": "MDQ6VXNlcjE0MTg1OQ==",
                "organizations_url": "https://api.github.com/users/mobiphil/orgs",
                "received_events_url": "https://api.github.com/users/mobiphil/received_events",
                "repos_url": "https://api.github.com/users/mobiphil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mobiphil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mobiphil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mobiphil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Making Neovim multithreaded is just as hard as to make GUI toolkits multithreaded. And GUI toolkits aren't multithreaded for good reasons [1].\n\nWe could do some work to make it possible to defer computation to other threads without sharing memory, but it's hard to allow plugins to leverage that programming model. Besides that VimL and the dynamic languages used to create Vim plugins aren't multithreaded.\n\n> Maybe a complete rewrite would have been probably an alternative to consider. \n\nNo, rewriting everything is never a good idea.\n\n[1] [Multithreaded toolkits: A failed dream?](https://weblogs.java.net/blog/kgh/archive/2004/10/multithreaded_t.html)\n",
            "created_at": "2015-02-05T22:31:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-73144103",
            "id": 73144103,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczMTQ0MTAz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73144103/reactions"
            },
            "updated_at": "2015-02-05T22:31:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73144103",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/207795?v=4",
                "events_url": "https://api.github.com/users/felipecrv/events{/privacy}",
                "followers_url": "https://api.github.com/users/felipecrv/followers",
                "following_url": "https://api.github.com/users/felipecrv/following{/other_user}",
                "gists_url": "https://api.github.com/users/felipecrv/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/felipecrv",
                "id": 207795,
                "login": "felipecrv",
                "node_id": "MDQ6VXNlcjIwNzc5NQ==",
                "organizations_url": "https://api.github.com/users/felipecrv/orgs",
                "received_events_url": "https://api.github.com/users/felipecrv/received_events",
                "repos_url": "https://api.github.com/users/felipecrv/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/felipecrv/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/felipecrv/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/felipecrv",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I admit, I used for a moment an over-simplified model, that would probably not work. The idea was not to use locking at all, and \"slow\" VimL scripts or dynamic language scripts would run in a separate thread and would just read-only-consume buffers. Main thread (or process with shared memory), would manipulate buffers, and as response to any action that would change the buffer, would first notify consumer threads to invalidate their knowledge (to avoid accessing invalid memory), update buffer, and send another message to consumers, that new \"model\" is available in the shared memory. I am still not sure what would be the best to stop a thread if it is doing a busy action.\n",
            "created_at": "2015-02-05T23:55:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-73155764",
            "id": 73155764,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczMTU1NzY0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73155764/reactions"
            },
            "updated_at": "2019-05-06T21:36:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73155764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/141859?v=4",
                "events_url": "https://api.github.com/users/mobiphil/events{/privacy}",
                "followers_url": "https://api.github.com/users/mobiphil/followers",
                "following_url": "https://api.github.com/users/mobiphil/following{/other_user}",
                "gists_url": "https://api.github.com/users/mobiphil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mobiphil",
                "id": 141859,
                "login": "mobiphil",
                "node_id": "MDQ6VXNlcjE0MTg1OQ==",
                "organizations_url": "https://api.github.com/users/mobiphil/orgs",
                "received_events_url": "https://api.github.com/users/mobiphil/received_events",
                "repos_url": "https://api.github.com/users/mobiphil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mobiphil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mobiphil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mobiphil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "back here... what about using fibers instead of threads. Exactly like jobstart, one could have a feature fiberstart which could be called both by vim scripts and C. Fiberstart would create a new stack and call the fiber function on a this stack. The main problem would be how to implement concurrency. This would be a little tricky, but once the the programming model accepted, should work without problem. The main fiber (the vim interface) is \"interrupting\" itself on the event loop, so this one could allow the control logic to decide if it is time to give processor to another fiber. If we have a calculation fiber that has some longer calculation, may cause the ui seem sluggish. So one has to insert interrupt points in such a code. And here comes a trivial solution: Each function called by the fibers should be a call to a wrapper. Such a wrapper will check if time slice for the fiber is exhausted. If yes, give the processor to the next fiber, otherwise continue. While it sounds hackish would be a simple/trivial \"thread safe\" parallel processing for tools like vim.\n",
            "created_at": "2015-02-14T11:17:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-74371217",
            "id": 74371217,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzcxMjE3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/74371217/reactions"
            },
            "updated_at": "2019-05-02T20:41:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/74371217",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/141859?v=4",
                "events_url": "https://api.github.com/users/mobiphil/events{/privacy}",
                "followers_url": "https://api.github.com/users/mobiphil/followers",
                "following_url": "https://api.github.com/users/mobiphil/following{/other_user}",
                "gists_url": "https://api.github.com/users/mobiphil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mobiphil",
                "id": 141859,
                "login": "mobiphil",
                "node_id": "MDQ6VXNlcjE0MTg1OQ==",
                "organizations_url": "https://api.github.com/users/mobiphil/orgs",
                "received_events_url": "https://api.github.com/users/mobiphil/received_events",
                "repos_url": "https://api.github.com/users/mobiphil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mobiphil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mobiphil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mobiphil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Are there any plans for this in the near future?",
            "created_at": "2018-06-27T08:08:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-400581550",
            "id": 400581550,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDU4MTU1MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/400581550/reactions"
            },
            "updated_at": "2019-05-06T21:35:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/400581550",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/203261?v=4",
                "events_url": "https://api.github.com/users/XVilka/events{/privacy}",
                "followers_url": "https://api.github.com/users/XVilka/followers",
                "following_url": "https://api.github.com/users/XVilka/following{/other_user}",
                "gists_url": "https://api.github.com/users/XVilka/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/XVilka",
                "id": 203261,
                "login": "XVilka",
                "node_id": "MDQ6VXNlcjIwMzI2MQ==",
                "organizations_url": "https://api.github.com/users/XVilka/orgs",
                "received_events_url": "https://api.github.com/users/XVilka/received_events",
                "repos_url": "https://api.github.com/users/XVilka/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/XVilka/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/XVilka/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/XVilka",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Recent discussion about mmap pitfalls: \r\n\r\n- https://news.ycombinator.com/item?id=19805675\r\n- https://lobste.rs/s/gfllo3/use_mmap_with_care\r\n\r\nI do not think mmap will help much. The architecture changes needed to support streaming a file in memory are the same regardless of whether mmap is used.\r\n\r\n> Currently vim loads the whole file into memory\r\n\r\n9ea111d1af6abcac361eece478fb7709e5264b82 explains that the `maxmem` option enabled behavior that would limit the memory cost of a file. The tradeoff is that the file contents are copied to the swapfile (Vim's reimplementation of OS virtual memory). As the user scrolls in the buffer, contents of the swapfile are paged into memory in `maxmem`-sized chunks.",
            "created_at": "2019-05-02T20:47:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-488826738",
            "id": 488826738,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODgyNjczOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/488826738/reactions"
            },
            "updated_at": "2019-05-06T21:34:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/488826738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If anything, mmap will make it harder. I used to be more optimistic about\nmmap but it's too scary these days. Neovim's portability would suffer\nunless we understand the semantic details of mmap on every platform.\n\nOn Thu, 2 May 2019 at 22:48, Justin M. Keyes <notifications@github.com>\nwrote:\n\n> Recent discussion about mmap pitfalls:\n> https://news.ycombinator.com/item?id=19805675\n>\n> I do not think mmap will help much. The architecture changes needed to\n> support streaming a file in memory are the same regardless of whether mmap\n> is used.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/neovim/neovim/issues/614#issuecomment-488826738>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AABSXM44KEOAS6UVU5YV4Y3PTNHQBANCNFSM4AOVZPJA>\n> .\n>\n",
            "created_at": "2019-05-03T07:50:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-488991474",
            "id": 488991474,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODk5MTQ3NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/488991474/reactions"
            },
            "updated_at": "2019-05-03T07:50:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/488991474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/207795?v=4",
                "events_url": "https://api.github.com/users/felipecrv/events{/privacy}",
                "followers_url": "https://api.github.com/users/felipecrv/followers",
                "following_url": "https://api.github.com/users/felipecrv/following{/other_user}",
                "gists_url": "https://api.github.com/users/felipecrv/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/felipecrv",
                "id": 207795,
                "login": "felipecrv",
                "node_id": "MDQ6VXNlcjIwNzc5NQ==",
                "organizations_url": "https://api.github.com/users/felipecrv/orgs",
                "received_events_url": "https://api.github.com/users/felipecrv/received_events",
                "repos_url": "https://api.github.com/users/felipecrv/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/felipecrv/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/felipecrv/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/felipecrv",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hi all,\r\n\r\nI'm in the planning phase for a plugin for a related task.\r\n\r\nMy goal is to be able to tail an arbitrary Unix file descriptor in Neovim, and apply an `errorformat`-like parsing structure to each line. For example, if the debug output of a server is something like:\r\n\r\n```\r\nWARNING::file.py:100::This is a test\r\n```\r\n\r\nThen `setl tailformat=WARNING::%f:%l:\\(\\.*\\)` or similar would print out the according error into the quickfix menu and allow the user to navigate to `file.py` at line 100.\r\n\r\nThis is simple enough to do, but it has to tail the file descriptor and parse these error messages in real-time.\r\n\r\nThe problem of large file support could be reduced to the one I'm describing, because in both cases, you're lazily reading/parsing what's being outputted onto the screen.\r\n\r\nHowever, I think I'd have to override `BufOpen` and insert my own logic in its place in order to accomplish this, which I don't know how to do; any suggestions?",
            "created_at": "2019-12-22T01:47:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-568225863",
            "id": 568225863,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODIyNTg2Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/568225863/reactions"
            },
            "updated_at": "2022-09-02T22:35:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/568225863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31974830?v=4",
                "events_url": "https://api.github.com/users/hariamoor-zz/events{/privacy}",
                "followers_url": "https://api.github.com/users/hariamoor-zz/followers",
                "following_url": "https://api.github.com/users/hariamoor-zz/following{/other_user}",
                "gists_url": "https://api.github.com/users/hariamoor-zz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hariamoor-zz",
                "id": 31974830,
                "login": "hariamoor-zz",
                "node_id": "MDQ6VXNlcjMxOTc0ODMw",
                "organizations_url": "https://api.github.com/users/hariamoor-zz/orgs",
                "received_events_url": "https://api.github.com/users/hariamoor-zz/received_events",
                "repos_url": "https://api.github.com/users/hariamoor-zz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hariamoor-zz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hariamoor-zz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hariamoor-zz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> My goal is to be able to tail an arbitrary Unix file descriptor in Neovim, and apply an `errorformat`-like parsing structure to each line.\r\n\r\n@hariamoor interesting idea, though I would suggest a function callback rather than 'errorformat' style (which is notorious for its limitations and insufficient to parse some formats).\r\n\r\n> tail the file descriptor ... The problem of large file support could be reduced to the one I'm describing, because in both cases\r\n\r\nTailing doesn't help for random access, does it? \r\n\r\nAnyways please discuss in a new issue, this one is long enough and don't want to diverge from the main topics already here.\r\n",
            "created_at": "2019-12-22T03:32:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-568229806",
            "id": 568229806,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODIyOTgwNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/568229806/reactions"
            },
            "updated_at": "2019-12-22T03:32:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/568229806",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think it would be a worthwhile effort to first abstract buffers, and provide a way of creating external buffers that can use arbitrary, custom data structures.\r\n\r\nA rough idea of the interface (in C, just to express types):\r\n\r\nExternal buffer provider defines the following methods for neovim to use:\r\n\r\n- `get_lines`\r\n  ```c\r\n  kvec_t(String) get_lines(linenr_T start, linenr_T end);\r\n  ```\r\n  Neovim calls this method to fetch lines.\r\n  Maybe there could be a way of fetching just a parts of lines, so if there is a really long line, only the displayed part could be fetched for rendering.\r\n\r\n- `set_text`\r\n  ```c\r\n  void set_text(lpos_T start, lpos_T end, kvec_t(String) text);\r\n  ```\r\n  Neovim calls this method when it modifies text. The provider updates its internal data structures with the new text.\r\n  Maybe this method could reject the new text (implementing validation for text forms?) and return a status.\r\n\r\nProvider sends the following notifications to neovim:\r\n\r\n- `line_count_changed`\r\n  ```c\r\n  void line_count_changed(linenr_T line_count);\r\n  ```\r\n  The provider notifies neovim when the line count changes, neovim caches the value.\r\n  I'm assuming the line count can be needed quite often, so to limit the amount of requests the provider notifies about it instead of neovim explicitly asking about it.\r\n\r\n- `text_changed`\r\n  ```c\r\n  void text_changed(lpos_T start, lpos_T old_end, lpos_T new_end);\r\n  ```\r\n  The provider notifies neovim about any external changes made to the text. Neovim triggers buffer update callbacks based on this. Actual contents of the new text are not sent. If it's actually needed, neovim will fetch it with `get_lines`.\r\n  Neovim could also cache lines, and invalidate the cache based on this notification.\r\n\r\n---\r\n\r\nOther than implementing more efficient data structures, having that would enable other editors that embed neovim to reuse their own data structures.\r\nAnother use case for this is fuzzy finders, that might store millions of items. Only the range of items that can fit in the window can be passed to neovim.",
            "created_at": "2022-09-03T01:31:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-1236020312",
            "id": 1236020312,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "IC_kwDOAPphoM5JrCxY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1236020312/reactions"
            },
            "updated_at": "2022-09-03T03:21:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1236020312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Could make sense as part of the `nvim_buf_attach()` interface?",
            "created_at": "2022-09-03T02:47:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-1236032142",
            "id": 1236032142,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "IC_kwDOAPphoM5JrFqO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1236032142/reactions"
            },
            "updated_at": "2022-09-03T02:47:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1236032142",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm not sure. Right now you can attach multiple `nvim_buf_attach` callbacks to a buffer, but there can be only one source of text in the buffer. I think it just has a different purpose",
            "created_at": "2022-09-03T03:42:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/614#issuecomment-1236040547",
            "id": 1236040547,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/614",
            "node_id": "IC_kwDOAPphoM5JrHtj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1236040547/reactions"
            },
            "updated_at": "2022-09-03T03:42:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1236040547",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 31,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/614/comments",
    "created_at": "2014-04-25T09:53:41Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/614/events",
    "html_url": "https://github.com/neovim/neovim/issues/614",
    "id": 32218612,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/614/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWUzMjIxODYxMg==",
    "number": 614,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 24,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 24,
        "url": "https://api.github.com/repos/neovim/neovim/issues/614/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/614/timeline",
    "title": "Improve large files support",
    "updated_at": "2025-01-17T16:19:11Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/614",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
        "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
        "followers_url": "https://api.github.com/users/ZyX-I/followers",
        "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ZyX-I",
        "id": 322097,
        "login": "ZyX-I",
        "node_id": "MDQ6VXNlcjMyMjA5Nw==",
        "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
        "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
        "repos_url": "https://api.github.com/users/ZyX-I/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ZyX-I",
        "user_view_type": "public"
    }
}