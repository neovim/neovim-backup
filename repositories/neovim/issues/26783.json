{
    "active_lock_reason": "too heated",
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nGiven a document of a given file type (e.g. `html`, `markdown` or `nix`), inside this document, regions of text might not represent the ft of the source document, but are instead embedded languages within. For an HTML document, this could be inline CSS, for a Markdown document this can be any code block with a language denotation, or in nix documents (or any other generic file type with string support), an arbitrary string could be defined as needing to be parsed as a specific language.\r\n\r\nFor Tree-sitter, this already works in Neovim (I'm running `NVIM v0.10.0-dev-7f9fc2f`), by using the concept of [Language Injection](https://tree-sitter.github.io/tree-sitter/syntax-highlighting#language-injection). Tree-sitter allows injected languages to be detected by specific rules (such as provided by [hmts.nvim](https://github.com/calops/hmts.nvim)), or by prefixing a string with a generic comment, such as `foo = /* lua */ \"local bar = 'baz'\"`.\r\n\r\nWhile this is great, and many features and plugins (e.g. highlighting, textobjects, etc.) work with these injections out-of-the-box, it would be even better if LSP would also support a similar feature.\r\n\r\nFor example, given the [`vim-illuminate`](https://github.com/RRethy/vim-illuminate) plugin, it supports multiple \"providers\", `lsp`, `treesitter` and `regex`. If I enable the first two, and it detects that the root language type of the document has a configured LSP client, it will enable LSP, but I don't have the option to run a different LSP for injected languages, if I set `treesitter` as the only provider, it works as expected, and both the document and injected language types are supported by the plugin.\r\n\r\nThere are similar requests for, e.g. `conform.nvim` (see: https://github.com/stevearc/conform.nvim/issues/200), of being able to run LSPs on injected languages.\n\n### Expected behavior\n\nIt looks like VSCode has support for this, in the form of [embedded languages](https://code.visualstudio.com/api/language-extensions/embedded-languages). Specifically, they support two different modes:\r\n\r\n- **[Language Services](https://code.visualstudio.com/api/language-extensions/embedded-languages#language-services)**, which requires a language server to embed one or more language services to detect language injections and handle them accordingly. This seems mostly geared towards one or more languages that usually go together, think of an HTML language Server that can also handle inline CSS or JavaScript.\r\n- **[Request Forwarding](https://code.visualstudio.com/api/language-extensions/embedded-languages#request-forwarding)** which seems to allow the client to determine which server should handle which part of the document, and send the request to the correct server accordingly.\r\n\r\nI couldn't find any other issue discussing this feature, and given that NeoVim already supports Tree-sitter's language injection, this seemed like a natural (although presumably not easy) extension to the editor.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Please lobby MSFT to include this into the open LSP standard; then we will consider implementing it. We will _not_ implement off-standard VS Code specific features. (Tree-sitter is a different beast since there injection _is_ built into the standard.)\r\n\r\nMulti-client support for LSP is a different issue and actively being worked on.",
            "created_at": "2023-12-28T14:57:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871249226",
            "id": 1871249226,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viP9K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 9,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 9,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871249226/reactions"
            },
            "updated_at": "2023-12-28T14:58:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871249226",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "No, saying that VSCode actually has support for embedded languages from the list they gave in the link you provided above is just not right. By using the same language servers as VSCode (Volar, tsc, vscode-html-language-server), we also get all of those behaviors.\r\n\r\nFor Vue, the reason why autocompletion inside interpolations work is because the language server itself detect that and consider it to be javascript/typescript code. Another reason is because Volar is a self-replacement for typescript language server, so you are having 2 language servers in one.\r\n\r\nSame for JavaScript (also for tree-sitter javascript), they just consider JavaScript to be a JSX file :).\r\n\r\nHTML and PHP are also the same so I won't dive deeper here.",
            "created_at": "2023-12-28T15:15:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871264827",
            "id": 1871264827,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viTw7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871264827/reactions"
            },
            "updated_at": "2023-12-28T15:16:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871264827",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> No, saying that VSCode actually has support for embedded languages from the list they gave in the link you provided above is just not right.\r\n\r\nFair point. As I said, it _seemed_ to me that VSCode supported the feature (I don't have VSCode installed).\r\n\r\n> For Vue, the reason why autocompletion inside interpolations work is because the language server itself detect that and consider it to be javascript/typescript code.\r\n\r\nThat makes sense.\r\n\r\nSo yes, it seems to me that there are two use-cases:\r\n\r\n1. Languages that are commonly used together (e.g. HTML and CSS) are handled by a single language server.\r\n2. Arbitrary languages injected into a document with a different \"root\" language cannot be handled by a single language server, and instead requires a feature similar to Tree-sitter's language injection.\r\n\r\nI'm asking for the second feature. The first seems to work already, given that this is (completely?) handled by the individual language servers.",
            "created_at": "2023-12-28T15:21:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871269541",
            "id": 1871269541,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viU6l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871269541/reactions"
            },
            "updated_at": "2023-12-28T15:21:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871269541",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/383250?v=4",
                "events_url": "https://api.github.com/users/JeanMertz/events{/privacy}",
                "followers_url": "https://api.github.com/users/JeanMertz/followers",
                "following_url": "https://api.github.com/users/JeanMertz/following{/other_user}",
                "gists_url": "https://api.github.com/users/JeanMertz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JeanMertz",
                "id": 383250,
                "login": "JeanMertz",
                "node_id": "MDQ6VXNlcjM4MzI1MA==",
                "organizations_url": "https://api.github.com/users/JeanMertz/orgs",
                "received_events_url": "https://api.github.com/users/JeanMertz/received_events",
                "repos_url": "https://api.github.com/users/JeanMertz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JeanMertz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JeanMertz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JeanMertz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm asking for the second feature. \r\n\r\nAnd that is a \"No\" until this is an official LSP feature (which it isn't). Since LSP is a \"project-centric\" protocol, \"language injection\" is simply not a thing.",
            "created_at": "2023-12-28T15:23:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871270599",
            "id": 1871270599,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viVLH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871270599/reactions"
            },
            "updated_at": "2023-12-28T15:23:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871270599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Arbitrary languages injected into a document with a different \"root\" language cannot be handled by a single language server, and instead requires a feature similar to Tree-sitter's language injection.\r\n\r\nAll the languages that VSCode showed in the list are commonly used with one another. So VSCode is also not handling anything off-spec here, just sending a text range and let the language server handle all of that. Which also means VSCode cannot actually handle arbitrary injected languages, because it's fully dependent on a language server handling requests for multiple programming languages.",
            "created_at": "2023-12-28T15:25:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871272342",
            "id": 1871272342,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viVmW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871272342/reactions"
            },
            "updated_at": "2023-12-28T15:26:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871272342",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> And that is a \"No\" until this is an official LSP feature (which it isn't). Since LSP is a \"project-centric\" protocol, \"language injection\" is simply not a thing.\r\n\r\nMakes sense, and yes, I did get the message from your initial post. Happy to close this if you don't want any lingering feature requests that can't/won't (currently) be supported, or keep this open to gauge support and potentially have someone (likely not me, though), champion this becoming an official protocol extension.",
            "created_at": "2023-12-28T15:26:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871273887",
            "id": 1871273887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viV-f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871273887/reactions"
            },
            "updated_at": "2023-12-28T15:26:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871273887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/383250?v=4",
                "events_url": "https://api.github.com/users/JeanMertz/events{/privacy}",
                "followers_url": "https://api.github.com/users/JeanMertz/followers",
                "following_url": "https://api.github.com/users/JeanMertz/following{/other_user}",
                "gists_url": "https://api.github.com/users/JeanMertz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JeanMertz",
                "id": 383250,
                "login": "JeanMertz",
                "node_id": "MDQ6VXNlcjM4MzI1MA==",
                "organizations_url": "https://api.github.com/users/JeanMertz/orgs",
                "received_events_url": "https://api.github.com/users/JeanMertz/received_events",
                "repos_url": "https://api.github.com/users/JeanMertz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JeanMertz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JeanMertz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JeanMertz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > Arbitrary languages injected into a document with a different \"root\" language cannot be handled by a single language server, and instead requires a feature similar to Tree-sitter's language injection.\r\n> \r\n> All the languages that VSCode showed in the list are commonly used with one another. So VSCode is also not handling anything off-spec here, just sending a text range and let the language server handle all of that. Which also means VSCode cannot actually handle arbitrary injected languages, because it's fully dependent on a language server handling requests for multiple programming languages.\r\n\r\nIs that also true for LSP \"request forwarding\" as described here? https://code.visualstudio.com/api/language-extensions/embedded-languages#request-forwarding\r\n\r\nMy impression is that this process is driven entirely by the client. In my interpretation of that page, the client detects regions of \"embedded\" code, then submits those regions of code to the appropriate language server.\r\n\r\nBut maybe that's better suited as a 3rd-party plugin, unless/until more of a formal protocol emerges, as long as there's a mechanism in the Neovim LSP API to pass chunks of text to an arbitrary language server instance.",
            "created_at": "2023-12-28T15:33:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871279331",
            "id": 1871279331,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viXTj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871279331/reactions"
            },
            "updated_at": "2023-12-28T15:35:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871279331",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5758789?v=4",
                "events_url": "https://api.github.com/users/gwerbin/events{/privacy}",
                "followers_url": "https://api.github.com/users/gwerbin/followers",
                "following_url": "https://api.github.com/users/gwerbin/following{/other_user}",
                "gists_url": "https://api.github.com/users/gwerbin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gwerbin",
                "id": 5758789,
                "login": "gwerbin",
                "node_id": "MDQ6VXNlcjU3NTg3ODk=",
                "organizations_url": "https://api.github.com/users/gwerbin/orgs",
                "received_events_url": "https://api.github.com/users/gwerbin/received_events",
                "repos_url": "https://api.github.com/users/gwerbin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gwerbin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gwerbin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gwerbin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> My impression is that this process is driven entirely by the client. In my interpretation of that page, the client detects regions of \"embedded\" code, then submits those regions of code to the appropriate language server. That least seems entirely doable in Neovim, as long as there's a mechanism to pass chunks of text to an arbitrary language server instance.\r\n\r\nAs I wrote, that's a different thing and already tracked elsewhere. The bottleneck for \"mixed language\" files is getting the right server to index the file so that the request actually does something.",
            "created_at": "2023-12-28T15:36:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871281409",
            "id": 1871281409,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viX0B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871281409/reactions"
            },
            "updated_at": "2023-12-28T15:36:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871281409",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> already tracked elsewhere\r\n\r\nI'm [having trouble finding this tracking issue](https://github.com/neovim/neovim/issues?q=lsp+multi+is%3Aopen), possibly because I'm not using the right terminology. Would you happen to have a link for me to read up on/start tracking?",
            "created_at": "2023-12-28T15:41:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871285703",
            "id": 1871285703,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viY3H",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871285703/reactions"
            },
            "updated_at": "2023-12-28T15:41:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871285703",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/383250?v=4",
                "events_url": "https://api.github.com/users/JeanMertz/events{/privacy}",
                "followers_url": "https://api.github.com/users/JeanMertz/followers",
                "following_url": "https://api.github.com/users/JeanMertz/following{/other_user}",
                "gists_url": "https://api.github.com/users/JeanMertz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JeanMertz",
                "id": 383250,
                "login": "JeanMertz",
                "node_id": "MDQ6VXNlcjM4MzI1MA==",
                "organizations_url": "https://api.github.com/users/JeanMertz/orgs",
                "received_events_url": "https://api.github.com/users/JeanMertz/received_events",
                "repos_url": "https://api.github.com/users/JeanMertz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JeanMertz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JeanMertz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JeanMertz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There's no single tracking issue; it's a planned (significant) refactor to handle multiple attached servers gracefully. But again, this will not address your original use case since in general language servers cannot attach to \"parts of files\". ",
            "created_at": "2023-12-28T15:46:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871289215",
            "id": 1871289215,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viZt_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871289215/reactions"
            },
            "updated_at": "2023-12-28T15:46:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871289215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > My impression is that this process is driven entirely by the client. In my interpretation of that page, the client detects regions of \"embedded\" code, then submits those regions of code to the appropriate language server. That least seems entirely doable in Neovim, as long as there's a mechanism to pass chunks of text to an arbitrary language server instance.\r\n> \r\n> As I wrote, that's a different thing and already tracked elsewhere. The bottleneck for \"mixed language\" files is getting the right server to index the file so that the request actually does something.\r\n\r\n> There's no single tracking issue; it's a planned (significant) refactor to handle multiple attached servers gracefully. But again, this will not address your original use case since in general language servers cannot attach to \"parts of files\".\r\n\r\nUnless I misunderstood the MS doc, that's what the \"request forwarding\" mechanism is meant to take care of: the client sends a chunk of the file to a language server other than the one that's attached to the current file.\r\n\r\nI completely understand if that's not planned for Neovim as a core feature, but I do want to be precise because there are at least 3 distinct features being discussed here:\r\n\r\n1. Server-level \"language services\": automatic, no action by the client needed.\r\n2. Client-level \"request forwarding\": client determines that a chunk of text represents an embedded/injected language, and sends an LSP request to a language server other than the one attached to the current buffer.\r\n3. Multiple language servers attached to a buffer.\r\n\r\nIt seems like you're talking about item 3, but I was talking about item 2. Or does item 3 cover the use case of item 2 in a way that I'm not aware of?",
            "created_at": "2023-12-28T16:11:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871309164",
            "id": 1871309164,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viels",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871309164/reactions"
            },
            "updated_at": "2023-12-28T16:13:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871309164",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5758789?v=4",
                "events_url": "https://api.github.com/users/gwerbin/events{/privacy}",
                "followers_url": "https://api.github.com/users/gwerbin/followers",
                "following_url": "https://api.github.com/users/gwerbin/following{/other_user}",
                "gists_url": "https://api.github.com/users/gwerbin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gwerbin",
                "id": 5758789,
                "login": "gwerbin",
                "node_id": "MDQ6VXNlcjU3NTg3ODk=",
                "organizations_url": "https://api.github.com/users/gwerbin/orgs",
                "received_events_url": "https://api.github.com/users/gwerbin/received_events",
                "repos_url": "https://api.github.com/users/gwerbin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gwerbin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gwerbin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gwerbin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That's fair; I _am_ talking about 3 (which is in scope) and saying that it does not give you 2 (which is _not_ in scope, as that is something off-spec VS Code does). I am also saying that 1 and 2 are not distinct, since both require the server to be able to handle \"chunks of files\" (which, again, is not something the LSP specification covers, so changing that would be the -- only -- way forward).\r\n\r\n",
            "created_at": "2023-12-28T16:17:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871313730",
            "id": 1871313730,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5viftC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871313730/reactions"
            },
            "updated_at": "2023-12-28T16:17:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871313730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Understood and thanks for clarifying.\r\n\r\nIt sounds like VS Code actually just uses a dirty hack for this, rather than extending the LSP protocol:\r\n\r\n> The virtual text document provider provides CSS language server with virtual content, where all non-CSS code is replaced with whitespace.\r\n\r\nBut again, maybe that's better left for a third-party plugin.\r\n\r\nIt doesn't seem too outlandish to extract the embedded code to a new buffer in a split or floating window and attach an LSP server thereto. The UX wouldn't be too different from https://github.com/chrisbra/NrrwRgn. If anyone is looking for a project, that might be an interesting proof of concept (and a good use of Tree Sitter language injections).",
            "created_at": "2023-12-28T16:39:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871330866",
            "id": 1871330866,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5vij4y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871330866/reactions"
            },
            "updated_at": "2024-04-07T23:38:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871330866",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5758789?v=4",
                "events_url": "https://api.github.com/users/gwerbin/events{/privacy}",
                "followers_url": "https://api.github.com/users/gwerbin/followers",
                "following_url": "https://api.github.com/users/gwerbin/following{/other_user}",
                "gists_url": "https://api.github.com/users/gwerbin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gwerbin",
                "id": 5758789,
                "login": "gwerbin",
                "node_id": "MDQ6VXNlcjU3NTg3ODk=",
                "organizations_url": "https://api.github.com/users/gwerbin/orgs",
                "received_events_url": "https://api.github.com/users/gwerbin/received_events",
                "repos_url": "https://api.github.com/users/gwerbin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gwerbin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gwerbin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gwerbin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It sounds like VS Code actually just uses a dirty hack for this, rather than extending the LSP protocol:\r\n\r\nExactly.\r\n\r\n> But again, maybe that's better left for a third-party plugin.\r\n\r\nIf everybody just lets VS Code run rough shod over \"its own\" protocol, nothing will change. It's better to open an issue at https://github.com/microsoft/language-server-protocol and lobby for this to be standardized.",
            "created_at": "2023-12-28T16:42:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871332817",
            "id": 1871332817,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5vikXR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871332817/reactions"
            },
            "updated_at": "2023-12-28T16:42:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871332817",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> If everybody just lets VS Code run rough shod over \"its own\" protocol, nothing will change. It's better to open an issue at [microsoft/language-server-protocol](https://github.com/microsoft/language-server-protocol) and lobby for this to be standardized.\r\n\r\nI'd be curious to know _what_ would need to be standardized in this case. Is it, support for handling regions of text instead of full document processing?",
            "created_at": "2023-12-28T18:57:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871418639",
            "id": 1871418639,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5vi5UP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871418639/reactions"
            },
            "updated_at": "2023-12-28T18:57:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871418639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/383250?v=4",
                "events_url": "https://api.github.com/users/JeanMertz/events{/privacy}",
                "followers_url": "https://api.github.com/users/JeanMertz/followers",
                "following_url": "https://api.github.com/users/JeanMertz/following{/other_user}",
                "gists_url": "https://api.github.com/users/JeanMertz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JeanMertz",
                "id": 383250,
                "login": "JeanMertz",
                "node_id": "MDQ6VXNlcjM4MzI1MA==",
                "organizations_url": "https://api.github.com/users/JeanMertz/orgs",
                "received_events_url": "https://api.github.com/users/JeanMertz/received_events",
                "repos_url": "https://api.github.com/users/JeanMertz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JeanMertz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JeanMertz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JeanMertz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes; exactly what you are asking for here.",
            "created_at": "2023-12-28T18:58:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871419166",
            "id": 1871419166,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5vi5ce",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871419166/reactions"
            },
            "updated_at": "2023-12-28T18:58:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871419166",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> If anyone is looking for a project, that might be an interesting proof of concept (and a good use of Tree Sitter language injections).\n\nThere already is AckslD/nvim-FeMaco.lua, which does what you are asking for but with additional step rather than somehow transparently/automatically. ",
            "created_at": "2023-12-28T21:14:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1871494083",
            "id": 1871494083,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5vjLvD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871494083/reactions"
            },
            "updated_at": "2023-12-28T21:14:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1871494083",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/69750637?v=4",
                "events_url": "https://api.github.com/users/gegoune/events{/privacy}",
                "followers_url": "https://api.github.com/users/gegoune/followers",
                "following_url": "https://api.github.com/users/gegoune/following{/other_user}",
                "gists_url": "https://api.github.com/users/gegoune/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gegoune",
                "id": 69750637,
                "login": "gegoune",
                "node_id": "MDQ6VXNlcjY5NzUwNjM3",
                "organizations_url": "https://api.github.com/users/gegoune/orgs",
                "received_events_url": "https://api.github.com/users/gegoune/received_events",
                "repos_url": "https://api.github.com/users/gegoune/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gegoune/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gegoune/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gegoune",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "One of the main issues here is that most language servers assume they can access the file on the filesystem directly too and most also need some sort of project setup information - e.g cargo files. Because of that, to implement this without protocol extension, neovim would need to create some sort of virtual filesystem with dedicated files for the embedded regions.\r\n\r\nAnd in some cases that would require language specific knowledge. For example for Java you need to have file names that match class names and directory structures that match package definitions.\r\n\r\n\r\nHaving some sort of first class document region handling in the specification would avoid all that - with the downside that servers would need to add support for it.\r\n\r\nAnd even then this would still be a lot of effort to support as it makes the multi-client handling even more complex. So far it's mostly either merge the results, or use one specific client. With injection/embedding that changes. E.g. something like vim.lsp.buf.format would probably need to format each region with its specific client, and then stitch together the different results. On the other hand, for something like `vim.lsp.buf.definition` you likely only want to use the clients for the specific region. \r\n\r\n",
            "created_at": "2024-01-02T09:48:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1873804064",
            "id": 1873804064,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5vr_sg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873804064/reactions"
            },
            "updated_at": "2024-01-02T09:56:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873804064",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> it's a planned (significant) refactor to handle multiple attached servers gracefully\r\n\r\nSome discussion in https://github.com/neovim/neovim/issues/26278",
            "created_at": "2024-01-03T11:18:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-1875208977",
            "id": 1875208977,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM5vxWsR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1875208977/reactions"
            },
            "updated_at": "2024-01-03T11:18:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1875208977",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Understood and thanks for clarifying.\r\n> \r\n> It sounds like VS Code actually just uses a dirty hack for this, rather than extending the LSP protocol:\r\n> \r\n> > The virtual text document provider provides CSS language server with virtual content, where all non-CSS code is replaced with whitespace.\r\n> \r\n> But again, maybe that's better left for a third-party plugin.\r\n> \r\n> It doesn't seem too outlandish to extract the embedded code to a new buffer in a split or floating window and attach an LSP server thereto. The UX wouldn't be too different from https://github.com/chrisbra/NrrwRgn. If anyone is looking for a project, that might be an interesting proof of concept (and a good use of Tree Sitter language injections).\r\n\r\nIf I'm not mistaken, the [otter](https://github.com/jmbuhr/otter.nvim) plugin uses a similar trick with hidden buffers & replacing any text other than the embedded region with whitespace.",
            "created_at": "2024-04-06T05:29:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-2040974419",
            "id": 2040974419,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM55psxT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2040974419/reactions"
            },
            "updated_at": "2024-04-06T05:29:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2040974419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17056143?v=4",
                "events_url": "https://api.github.com/users/jakubbortlik/events{/privacy}",
                "followers_url": "https://api.github.com/users/jakubbortlik/followers",
                "following_url": "https://api.github.com/users/jakubbortlik/following{/other_user}",
                "gists_url": "https://api.github.com/users/jakubbortlik/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jakubbortlik",
                "id": 17056143,
                "login": "jakubbortlik",
                "node_id": "MDQ6VXNlcjE3MDU2MTQz",
                "organizations_url": "https://api.github.com/users/jakubbortlik/orgs",
                "received_events_url": "https://api.github.com/users/jakubbortlik/received_events",
                "repos_url": "https://api.github.com/users/jakubbortlik/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jakubbortlik/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jakubbortlik/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jakubbortlik",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "This would be a great feature when it's actually part of the LSP spec.\r\n\r\nI work in C# .NET with GraphQL and Rider has a rather neat feature when you have the GraphQL extension installed where you just write a comment above a string like this:\r\n```csharp\r\n// lang=graphql\r\n\"\"\"\r\n// some graphql stuff\r\n\"\"\"\r\n```\r\nAnd the GraphQL LSP actually give completion in the string based on all *.graphql files that exists in the project.\r\nI'm certainly loving that part of Rider when i need it, but would love to have it for Neovim as it's my main editor these days.",
            "created_at": "2024-07-25T07:25:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-2249640115",
            "id": 2249640115,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM6GFsiz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2249640115/reactions"
            },
            "updated_at": "2024-07-25T07:28:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2249640115",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/84551201?v=4",
                "events_url": "https://api.github.com/users/Skyppex/events{/privacy}",
                "followers_url": "https://api.github.com/users/Skyppex/followers",
                "following_url": "https://api.github.com/users/Skyppex/following{/other_user}",
                "gists_url": "https://api.github.com/users/Skyppex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Skyppex",
                "id": 84551201,
                "login": "Skyppex",
                "node_id": "MDQ6VXNlcjg0NTUxMjAx",
                "organizations_url": "https://api.github.com/users/Skyppex/orgs",
                "received_events_url": "https://api.github.com/users/Skyppex/received_events",
                "repos_url": "https://api.github.com/users/Skyppex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Skyppex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Skyppex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Skyppex",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This would be a great feature when it's actually part of the LSP spec.\r\n\r\nThen you should request it to be added to the spec; commenting _here_ will not help in any way.",
            "created_at": "2024-07-25T07:27:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/26783#issuecomment-2249643254",
            "id": 2249643254,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26783",
            "node_id": "IC_kwDOAPphoM6GFtT2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2249643254/reactions"
            },
            "updated_at": "2024-07-25T07:27:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2249643254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 22,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26783/comments",
    "created_at": "2023-12-28T14:53:50Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/26783/events",
    "html_url": "https://github.com/neovim/neovim/issues/26783",
    "id": 2058530602,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "Needs a third-party / external change or fix",
            "id": 101945532,
            "name": "status:blocked-external",
            "node_id": "MDU6TGFiZWwxMDE5NDU1MzI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/status:blocked-external"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/26783/labels{/name}",
    "locked": true,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM56sq8q",
    "number": 26783,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 7,
        "-1": 0,
        "confused": 0,
        "eyes": 3,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 10,
        "url": "https://api.github.com/repos/neovim/neovim/issues/26783/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/26783/timeline",
    "title": "LSP: Language Injection/Embedding Support",
    "updated_at": "2025-01-17T15:27:27Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/26783",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/383250?v=4",
        "events_url": "https://api.github.com/users/JeanMertz/events{/privacy}",
        "followers_url": "https://api.github.com/users/JeanMertz/followers",
        "following_url": "https://api.github.com/users/JeanMertz/following{/other_user}",
        "gists_url": "https://api.github.com/users/JeanMertz/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/JeanMertz",
        "id": 383250,
        "login": "JeanMertz",
        "node_id": "MDQ6VXNlcjM4MzI1MA==",
        "organizations_url": "https://api.github.com/users/JeanMertz/orgs",
        "received_events_url": "https://api.github.com/users/JeanMertz/received_events",
        "repos_url": "https://api.github.com/users/JeanMertz/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/JeanMertz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JeanMertz/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/JeanMertz",
        "user_view_type": "public"
    }
}