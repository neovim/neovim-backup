{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Background\r\n\r\nThe `vim.{o,bo,wo,go}` metamethods allow getting and setting Neovim options from Lua and are full replacements for the `:set` ~~and `:setlocal`~~ commands. (The drawback of `vim.bo` and `vim.wo` over `:set` is that users need to know whether a local option is buffer-local or window-local, but 1. that information is easily looked up via `:h '<option>'` and 2. this is more than made up for by being able to target specific buffers or windows via `vim.bo[bufnr]` or `vim.wo[winid]`, respectively.)\r\n\r\nHowever, Vim has a number of string options that are actually lists (either \"commalists\" like `runtimepath` or \"flaglists\" like `formatoptions`) or dictionaries (like `listchars`), which are cumbersome to manipulate as strings from Lua. For this, `vim.opt` offers a convenient special (object-oriented) table-based interface:\r\n\r\nFor dictionaries:\r\n* `vim.opt.listchars = { space = '_', tab = '>-'}`\r\n* `vim.opt.listchars:append({tab = '>-'})` (same as `set listchars+=tab:>-`)\r\n* `vim.opt.listchars:remove('tab')` (same as `set listchars-=tab:>-`)\r\n* `vim.opt.listchars:get()` (returns a table, e.g. `{ space = '_', tab = '>-'}`)\r\n\r\nSimilarly for flaglists (which are represented by a \"set\" (`table<string,boolean>`), e.g.\r\n* `vim.opt.formatoptions = { j = true, c = true}`\r\n\r\nAnd for commalists, which can be ordered (in particular `runtimepath`) additionally\r\n* `vim.opt.runtimepath:append('/tmp')` (same as `set runtimepath+=/tmp`)\r\n* `vim.opt.runtimepath:prepend('/tmp')` (same as `set runtimepath^=/tmp`)\r\n* `vim.opt.runtimepath:remove('/tmp')` (same as `set runtimepath-=/tmp`)\r\n\r\n\r\nBut the existence of two different interfaces is confusing, especially since `vim.opt` can work with number and boolean options as well.\r\n\r\n### Proposal\r\n\r\nTo unify these two interfaces, make `vim.{o,bo,wo,go}` return **tables** for such list- and map-style options (other options are unaffected). This information should be scraped from the metadata in `src/nvim/options.lua`.\r\nOne difficulty is that we cannot put too much \"metamagic\" into these tables without losing the possibility to nicely print or otherwise work with them (hence the need for `:get()` in `vim.opt`). The proposal would be to keep the metamagic in the `vim.o` accessors so that users would only see normal tables. The flip side is that the option keys cannot be manipulated individually (that would require adding an `__index` on the `vim.o.listchars` table), so the option has to be copied to a local table, which can be edited and then reassigned to the option. (The exact same situation occurs when [accessing vimscript dictionaries via `vim.g`](https://github.com/nanotee/nvim-lua-guide#caveats-3).)\r\n\r\nThe proposal is therefore to add new convenience functions to allow a one-line replacement of the statements above:\r\n\r\n* `vim.dict_set_key(table, key, value)` with `value = true` as default\r\n* `vim.dict_del_key(table, key)`\r\n* `vim.list_set_key(table, key, position)` with `position = #table+1` as default\r\n* `vim.list_del_key(table, key)`\r\n* `vim.tbl_del(table, key)`\r\n\r\nThe first two functions would also be useful for working with `vim.g.dict`; the last function is used to implement the other `del` functions and is of general usefulness.\r\n\r\n\r\nOne can then do for dictionary options (matching the first list above, item by item):\r\n* `vim.o.listchars = { space = '_', tab = '>-'}` (or `= 'space:_,tab:>-'`; the metamethod could dispatch on the argument type)\r\n* `vim.o.listchars = vim.dict_set_key(vim.o.listchars, 'tab', '>-'`)`\r\n* `vim.o.listchars = vim.dict_del_key(vim.o.listchars, 'tab')`\r\n* `vim.o.listchars`\r\n\r\nFor flaglists:\r\n* `vim.o.formatoptions = { j = true, c = true }` (or `= 'jc'`)\r\n* `vim.o.formatoptions = vim.dict_set_key(vim.o.formatoptions, 'l')`\r\n* `vim.o.formatoptions = vim.dict_del_key(vim.o.formatoptions, 'c')`\r\n* `vim.o.formatoptions`\r\n\r\nFor commalists:\r\n* `vim.o.runtimepath = vim.list_set_key(vim.o.runtimepath, '/tmp')`\r\n* `vim.o.runtimepath = vim.list_set_key(vim.o.runtimepath, '/tmp', 1)`\r\n* `vim.o.runtimepath = vim.list_del_key(vim.o.runtimepath, '/tmp')`\r\n\r\nThis would be a breaking change since, e.g., `vim.o.listchars` would now return a table instead of a string;\r\nbut it still remains possible to use `vim.api.nvim_get_option_value('listchars', {})` directly to get the raw string.\r\n\r\n### Outlook\r\n\r\nFurther on, the conversion to and from tables could be handled by `vim.api.nvim_{get,set}_option_value` via a new key to `opts` (which should not affect the user interface of `vim.o` and friends).  Even further, it could be useful to change the internal representation of these list- and dict-style options to actual tables and convert to string only when necessary, e.g. for access from Vimscript.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Related interface sketch: https://github.com/neovim/neovim/issues/18246#issuecomment-1107931182\r\n\r\n> This would be a breaking change since, e.g., vim.o.listchars would now return a table instead of a string;\r\n\r\nWe could avoid that for now (and revisit later), by introducing `vim.o()`, so:\r\n\r\n- `foo = vim.o.listchars` stays as it is (no breaking change)\r\n- `vim.o().listchars` returns a table\r\n\r\n>  `vim.dict_set_key(table, key, value)` with `value = true` as default\r\n\r\nYes! This is the direction we should be driving towards in the Nvim stdlib. `vim.dict_set_key()` (aka [tbl_set()](https://github.com/neovim/neovim/issues/28586)) and similar generic functions are composable concepts, and they help users work with all kinds of data in plugins and converted forms (like JSON, ASTs from treesitter, ...).\r\n\r\n`dict_set_key` (`tbl_set`) could also optionally take a _list_ of keys which would drill into nested dicts, so `{'a','b'}` would set key `a.b`. https://github.com/neovim/neovim/issues/28586",
            "created_at": "2022-09-08T00:51:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1240069511",
            "id": 1240069511,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5J6fWH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 1,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1240069511/reactions"
            },
            "updated_at": "2024-05-12T09:15:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1240069511",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for picking this up again! I'm really excited to see this work! I'm happy to lend my time to help design and implement this.\r\n\r\nI'd say that there's still value in adding a `__newindex` metamethod to returned tables. These wouldn't be plain tables returned from `vim.o` in that case, but users would be able to interact with them more similarly to how they interact with plain Lua tables, i.e. by mutating (or in this case appearing to mutate) a shared reference to an underlying object. This would (at least in my opinion) produce more idiomatic Lua and enable more standard patterns of interacting with tables, since tables returned from `vim.o` would behave more closely to how tables without `__index`/`__newindex` usually behave. I guess my suggestion is basically to add metamagic to smooth over the metamagic that already has to exist in `vim.o` itself, with the former helping conceal the latter. That said I fully understand the arguments against this approach, and my suggestion would be implementable as a fairly basic wrapper API in a plugin (like adding a `vim.my_o` table that calls `dict_set_key` and friends under the hood), but just wanted to give my two cents 😄\r\n\r\nAlso, is the reason some of the suggested functions start with `dict` as opposed to `tbl` to declare them as being specifically for tables like `vim.o` and `vim.g` that require direct assignment rather than field mutation? Personally I think it still makes sense to use `tbl` for those, since they're also generally useful for table manipulation where you might want to follow a functional pattern (e.g. returning a copy of the original table but with a different key value rather than mutating the value on the original table).",
            "created_at": "2022-09-08T04:16:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1240196642",
            "id": 1240196642,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5J6-Yi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1240196642/reactions"
            },
            "updated_at": "2022-09-08T17:11:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1240196642",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2928612?v=4",
                "events_url": "https://api.github.com/users/binyomen/events{/privacy}",
                "followers_url": "https://api.github.com/users/binyomen/followers",
                "following_url": "https://api.github.com/users/binyomen/following{/other_user}",
                "gists_url": "https://api.github.com/users/binyomen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/binyomen",
                "id": 2928612,
                "login": "binyomen",
                "node_id": "MDQ6VXNlcjI5Mjg2MTI=",
                "organizations_url": "https://api.github.com/users/binyomen/orgs",
                "received_events_url": "https://api.github.com/users/binyomen/received_events",
                "repos_url": "https://api.github.com/users/binyomen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/binyomen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/binyomen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/binyomen",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sorry, but all these points were discussed and rejected:\r\n* it is the explicit goal here for `vim.o` to return plain tables _just like `vim.g`_. Otherwise we end up at `vim.opt` (which we already have, so there's no point in changing `vim.o` to match). So this is very much against this proposal.\r\n* the reason for using `vim.dict_` is that they are specific to \"dict-like\" (i.e., keyword-value style) tables; they are meaningless for list-like (and hence general) tables. The naming should reflect that.",
            "created_at": "2022-09-08T07:38:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1240343673",
            "id": 1240343673,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5J7iR5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1240343673/reactions"
            },
            "updated_at": "2022-09-08T07:38:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1240343673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  `vim.dict_set_key(table, key, value)` with `value = true` as default\r\n\r\nNaming nit: do these functions need \"key\" in the name? `vim.dict_set` is unambiguous.\r\n\r\nAlso if we swap the position of value, we can accept variadic series of keys, so to set `vim.o.foo.key1.key2`:\r\n\r\n```\r\nvim.dict_set(vim.o.foo, val, 'key1', 'key2', ...)\r\n```",
            "created_at": "2022-09-08T17:14:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1240995438",
            "id": 1240995438,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5J-BZu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1240995438/reactions"
            },
            "updated_at": "2022-09-08T17:14:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1240995438",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> it is the explicit goal here for vim.o to return plain tables just like vim.g. Otherwise we end up at vim.opt (which we already have, so there's no point in changing vim.o to match). So this is very much against this proposal.\r\n\r\nMakes sense to me.\r\n\r\nWould `dict_del_key` be setting the key to `nil`, or would there be additional functionality there? Just trying to gauge whether there'd be a difference between `vim.dict_del_key(tbl, key)` and `vim.dict_set_key(tbl, key, nil)`.\r\n\r\n> Also if we swap the position of value, we can accept variadic series of keys, so to set `vim.o.foo.key1.key2`\r\n\r\nIt seems like it would be confusing to put the keys after the value for the function. Maybe there could be an alternative function `vim.dict_set_nested(tbl, {'key1', 'key2'}, val)` (very bad name, but that's the idea)?",
            "created_at": "2022-09-09T06:48:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1241568284",
            "id": 1241568284,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5KANQc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1241568284/reactions"
            },
            "updated_at": "2024-05-12T09:13:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1241568284",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2928612?v=4",
                "events_url": "https://api.github.com/users/binyomen/events{/privacy}",
                "followers_url": "https://api.github.com/users/binyomen/followers",
                "following_url": "https://api.github.com/users/binyomen/following{/other_user}",
                "gists_url": "https://api.github.com/users/binyomen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/binyomen",
                "id": 2928612,
                "login": "binyomen",
                "node_id": "MDQ6VXNlcjI5Mjg2MTI=",
                "organizations_url": "https://api.github.com/users/binyomen/orgs",
                "received_events_url": "https://api.github.com/users/binyomen/received_events",
                "repos_url": "https://api.github.com/users/binyomen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/binyomen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/binyomen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/binyomen",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Table would be cleaner; we can dispatch on the type of argument (string vs. table) and do this without adding another function.",
            "created_at": "2022-09-09T18:12:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1242313261",
            "id": 1242313261,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5KDDIt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1242313261/reactions"
            },
            "updated_at": "2022-09-09T18:12:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1242313261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Isn't it possible to have, for example\r\n\r\n```lua\r\nvim.o.rtp   -- returns a string\r\nvim.o.rtp() -- returns a table\r\n-- chainable metamethods\r\nvim.o.rtp()\r\n  :append(path) -- append a path to current runtimepath\r\n  :prepend(path) -- prepend a path\r\n```\r\n\r\nAnd get rid of `vim.opt` obviously.",
            "created_at": "2022-10-18T14:48:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1282516892",
            "id": 1282516892,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5Mcaec",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282516892/reactions"
            },
            "updated_at": "2024-05-12T09:13:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282516892",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/26169924?v=4",
                "events_url": "https://api.github.com/users/mg979/events{/privacy}",
                "followers_url": "https://api.github.com/users/mg979/followers",
                "following_url": "https://api.github.com/users/mg979/following{/other_user}",
                "gists_url": "https://api.github.com/users/mg979/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mg979",
                "id": 26169924,
                "login": "mg979",
                "node_id": "MDQ6VXNlcjI2MTY5OTI0",
                "organizations_url": "https://api.github.com/users/mg979/orgs",
                "received_events_url": "https://api.github.com/users/mg979/received_events",
                "repos_url": "https://api.github.com/users/mg979/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mg979/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mg979/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mg979",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Isn't it possible to have, for example\n> \n> ```lua\n> vim.o.rtp   -- returns a string\n> vim.o.rtp() -- returns a table\n> -- chainable metamethods\n> vim.o.rtp()\n>   :append(path) -- append a path to current runtimepath\n>   :prepend(path) -- prepend a path\n> ```\n> \n> And get rid of `vim.opt` obviously.\n\nNo this is not possible ",
            "created_at": "2022-10-18T14:49:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1282518327",
            "id": 1282518327,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5Mca03",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282518327/reactions"
            },
            "updated_at": "2024-09-15T19:52:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282518327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Why not? You could use the `__call` metamethod on the string to return the table, and implement additional metamethods on it (or directly on the string). I think it would be backwards compatible too.",
            "created_at": "2022-10-18T14:55:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1282527459",
            "id": 1282527459,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5McdDj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282527459/reactions"
            },
            "updated_at": "2024-09-15T19:52:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282527459",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/26169924?v=4",
                "events_url": "https://api.github.com/users/mg979/events{/privacy}",
                "followers_url": "https://api.github.com/users/mg979/followers",
                "following_url": "https://api.github.com/users/mg979/following{/other_user}",
                "gists_url": "https://api.github.com/users/mg979/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mg979",
                "id": 26169924,
                "login": "mg979",
                "node_id": "MDQ6VXNlcjI2MTY5OTI0",
                "organizations_url": "https://api.github.com/users/mg979/orgs",
                "received_events_url": "https://api.github.com/users/mg979/received_events",
                "repos_url": "https://api.github.com/users/mg979/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mg979/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mg979/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mg979",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You can't apply metamethods to strings.",
            "created_at": "2022-10-18T14:55:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1282528871",
            "id": 1282528871,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5McdZn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282528871/reactions"
            },
            "updated_at": "2024-09-15T19:51:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282528871",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "How not, this works\r\n\r\n```lua\r\nlocal rtp = vim.o.rtp\r\nlocal mt = getmetatable(rtp)\r\n\r\nfunction mt.__call()\r\n  return vim.opt.rtp:get()\r\nend\r\n\r\nprint(rtp)\r\nprint(vim.inspect(rtp()))\r\n```",
            "created_at": "2022-10-18T14:59:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1282534507",
            "id": 1282534507,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5Mcexr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282534507/reactions"
            },
            "updated_at": "2022-10-18T14:59:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282534507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/26169924?v=4",
                "events_url": "https://api.github.com/users/mg979/events{/privacy}",
                "followers_url": "https://api.github.com/users/mg979/followers",
                "following_url": "https://api.github.com/users/mg979/following{/other_user}",
                "gists_url": "https://api.github.com/users/mg979/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mg979",
                "id": 26169924,
                "login": "mg979",
                "node_id": "MDQ6VXNlcjI2MTY5OTI0",
                "organizations_url": "https://api.github.com/users/mg979/orgs",
                "received_events_url": "https://api.github.com/users/mg979/received_events",
                "repos_url": "https://api.github.com/users/mg979/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mg979/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mg979/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mg979",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That's changing the global metatable for all strings. We are not doing that!",
            "created_at": "2022-10-18T15:09:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1282551568",
            "id": 1282551568,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5Mci8Q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282551568/reactions"
            },
            "updated_at": "2022-10-18T15:10:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282551568",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Then as @justinmk said, `vim.o().rtp` can return a table and implement all metamethods there, so that\r\n\r\n    vim.o().rtp\r\n    vim.o().rtp:append(path)\r\n\r\nbehave like\r\n\r\n    vim.opt.rtp:get()\r\n    vim.opt.rtp:append(path)\r\n\r\nSorry for the noise.",
            "created_at": "2022-10-18T15:25:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1282576103",
            "id": 1282576103,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5Mco7n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282576103/reactions"
            },
            "updated_at": "2022-10-18T15:25:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1282576103",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/26169924?v=4",
                "events_url": "https://api.github.com/users/mg979/events{/privacy}",
                "followers_url": "https://api.github.com/users/mg979/followers",
                "following_url": "https://api.github.com/users/mg979/following{/other_user}",
                "gists_url": "https://api.github.com/users/mg979/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mg979",
                "id": 26169924,
                "login": "mg979",
                "node_id": "MDQ6VXNlcjI2MTY5OTI0",
                "organizations_url": "https://api.github.com/users/mg979/orgs",
                "received_events_url": "https://api.github.com/users/mg979/received_events",
                "repos_url": "https://api.github.com/users/mg979/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mg979/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mg979/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mg979",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hello! o/\r\n\r\nI don't understand the reasoning to expose _plain Lua tables_ at `vim.o` level, what's so appealing?\r\n\r\nWhat are the problems with the `vim.opt` way of doing things?\r\nWhy are you (@justinmk) against having a kind of (leaf) Option type (with meta methods, and/or helpers that manipulate Option values)\r\nYou say in https://github.com/neovim/neovim/issues/18246#issuecomment-1240119929 `we can do that (exposing structure) without adding special interfaces or opaque objects`\r\nBut IMO options seems like a sensible place for a dedicated Option type, with special interfaces to query/set them. They are such a central cornerstone of (neo)vim!\r\n\r\nWe agree that `vim.o` interface is sub-optimal and could benefit from being removed to favor a more structured way to interact with options, with meta helpers to get/set/traverse values and its structure.\r\n\r\nMaybe we can dumb it down a little, to try to remove some _magic_, but the interface has a good structure and helpers that shouldn't be dismissed.\r\n\r\nIDEA: I'm also thinking we could offer a better set of option names by namespacing them like `gui.font`, `ui.statusline`, `wm.equalalways`, `formatopts.join_removes_comment`, ...\r\n=> Would much improve discoverability (god knows how many times I discovered some options by mistake while navigating some unrelated options..) and better see the relations between options.\r\n(What do you think about such an idea? If you say _not now_ I'd agree it might not be the time, maybe we can add this later?)\r\n\r\nIn https://github.com/neovim/neovim/issues/18246#issuecomment-1107931182 you say `A Lua table interface is useful _if it works with vanilla tables_.`\r\nThen why not add more support for vanilla tables, to make them _feel like_ vanilla tables if you want, with good composition while offering a nice interface ?\r\n\r\nIn your proposal you mention:\r\n> One difficulty is that we cannot put too much \"metamagic\" into these tables without losing the possibility to nicely print or otherwise work with them (hence the need for :get() in vim.opt).\r\n\r\nFor me printing them can easily be achieved with a `__tostring`, printing something like `<(window) Option statusline \"somevalue\">`.\r\n\r\nCould you define `work with them` ?\r\n\r\n> [... The flip side is that the option keys cannot be manipulated individually ...]\r\n> (that would require adding an __index on the vim.o.listchars table)\r\n\r\nWhy not do that?",
            "created_at": "2023-09-21T00:22:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1728587287",
            "id": 1728587287,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5nCCYX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1728587287/reactions"
            },
            "updated_at": "2023-09-21T05:42:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1728587287",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9730330?v=4",
                "events_url": "https://api.github.com/users/bew/events{/privacy}",
                "followers_url": "https://api.github.com/users/bew/followers",
                "following_url": "https://api.github.com/users/bew/following{/other_user}",
                "gists_url": "https://api.github.com/users/bew/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bew",
                "id": 9730330,
                "login": "bew",
                "node_id": "MDQ6VXNlcjk3MzAzMzA=",
                "organizations_url": "https://api.github.com/users/bew/orgs",
                "received_events_url": "https://api.github.com/users/bew/received_events",
                "repos_url": "https://api.github.com/users/bew/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bew/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bew/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bew",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You misunderstand the fundamental point: we do not want to handle table options (painfully) at the Lua level, we want to have options _natively_ (i.e., at the C core level) support lists/dicts so it Just Works™️ from vimscript, Nvim API, Lua, ...\r\n\r\nAt that point, the `vim.opt` interface simply becomes obsolete and can be removed in favor of the (much, much thinner and hence better) `vim.o` interface.",
            "created_at": "2023-09-21T05:42:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/20107#issuecomment-1728888430",
            "id": 1728888430,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20107",
            "node_id": "IC_kwDOAPphoM5nDL5u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 9,
                "-1": 0,
                "confused": 1,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 10,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1728888430/reactions"
            },
            "updated_at": "2023-09-21T05:43:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1728888430",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 15,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/20107/comments",
    "created_at": "2022-09-07T12:20:27Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/20107/events",
    "html_url": "https://github.com/neovim/neovim/issues/20107",
    "id": 1364580513,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "",
            "id": 3968935075,
            "name": "breaking-change",
            "node_id": "LA_kwDOAPphoM7skSSj",
            "url": "https://api.github.com/repos/neovim/neovim/labels/breaking-change"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "configuration, settings",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/20107/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5RVdih",
    "number": 20107,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 1,
        "confused": 3,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/20107/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/20107/timeline",
    "title": "vim.o (bo/wo/go) works with tables (meta accessors), deprecate vim.opt",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:36Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/20107",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
        "events_url": "https://api.github.com/users/clason/events{/privacy}",
        "followers_url": "https://api.github.com/users/clason/followers",
        "following_url": "https://api.github.com/users/clason/following{/other_user}",
        "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/clason",
        "id": 2361214,
        "login": "clason",
        "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
        "organizations_url": "https://api.github.com/users/clason/orgs",
        "received_events_url": "https://api.github.com/users/clason/received_events",
        "repos_url": "https://api.github.com/users/clason/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/clason",
        "user_view_type": "public"
    }
}