{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "As long as ncurses are used, it should be pretty straightforward to add option for showing the _statusline_ and the _cmdline_ at the top (under the tab list if any) instead of at the bottom.\n\nThis is a feature I've been waiting for for more than 6 years. I have all important stuff in all applications at the top and _(n)vim_ is the only one, which forces me to often look at the very bottom of my screen which causes unnecessary neck and back pain even after a short-time use on a notebook.\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I also want this. :+1: \nDoesn't belong to the first release, though. \n",
            "created_at": "2014-11-08T15:33:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62261825",
            "id": 62261825,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjYxODI1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62261825/reactions"
            },
            "updated_at": "2014-11-08T15:33:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62261825",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ":+1: \n\nBut I agree with @elmart \n",
            "created_at": "2014-11-08T15:48:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62262362",
            "id": 62262362,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjYyMzYy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62262362/reactions"
            },
            "updated_at": "2014-11-08T15:48:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62262362",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3374574?v=4",
                "events_url": "https://api.github.com/users/myitcv/events{/privacy}",
                "followers_url": "https://api.github.com/users/myitcv/followers",
                "following_url": "https://api.github.com/users/myitcv/following{/other_user}",
                "gists_url": "https://api.github.com/users/myitcv/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/myitcv",
                "id": 3374574,
                "login": "myitcv",
                "node_id": "MDQ6VXNlcjMzNzQ1NzQ=",
                "organizations_url": "https://api.github.com/users/myitcv/orgs",
                "received_events_url": "https://api.github.com/users/myitcv/received_events",
                "repos_url": "https://api.github.com/users/myitcv/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/myitcv/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/myitcv/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/myitcv",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've been delaying dicussing this until later, but a refactor in the command-line code may be required for the first release. The reason is that command-line, just like interactive ex mode, uses a completely isolated mechanism for input and redraw, and making that play nicely with msgpack-rpc redraw events could be very challenging\n\nBefore evolving the discussion, what do you guys think of this:\n\n``` vim\nfunction! SetupCommandLine()\n  if exists('g:enhanced_command_line')\n    inoremap <buffer> <silent> <esc> <esc>:q<cr>\n  endif\nendfunction\n\nfunction! TeardownCommandLine()\n  if exists('g:enhanced_command_line')\n    iunmap <buffer> <silent> <esc>\n  endif\n  unlet g:enhanced_command_line\nendfunction\n\nau CmdwinEnter * call SetupCommandLine()\nau CmdwinLeave * call TeardownCommandLine()\nnnoremap <silent> : :let g:enhanced_command_line = 1<cr>q:i\n```\n\nCurrently we can't make the command window a full replacement for the command line(see `:help command-line-window` for limitations), but I'm showing this because it has crossed my mind the idea of making command line just a special mode of the command-window. Advantages of this:\n- Simplification(one less mode the editor can be in)\n- Remove a lot of code in favor of reusing existing facilities to achieve the same funcitonality\n- Make the command-line more easily customizable\n- Transparent integration with UIs over msgpack-rpc\n\nAny thoughts? I'm interested in reading what @ZyX-I thinks of this(especially possible implications)\n",
            "created_at": "2014-11-08T16:47:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62264484",
            "id": 62264484,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY0NDg0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62264484/reactions"
            },
            "updated_at": "2022-05-25T22:04:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62264484",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@tarruda the idea is lean and I like it (assuming that the limitations of _command-line-window_ will be mitigated in the future). I like it, because it allows easier editing of commands (history, full insert/normal mode etc.). The current worst downside is missing proper completion (one can switch on only the \"known-words\" one if I'm not mistaken).\n\nRegarding possible implications, it will definitely confuse non-negligible number of modules which use buffers.\n\nAnd finally, the discussion was about _cmdline_, but how about _statusline_?\n",
            "created_at": "2014-11-08T18:05:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62269101",
            "id": 62269101,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY5MTAx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62269101/reactions"
            },
            "updated_at": "2014-11-08T18:06:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62269101",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2451044?v=4",
                "events_url": "https://api.github.com/users/dumblob/events{/privacy}",
                "followers_url": "https://api.github.com/users/dumblob/followers",
                "following_url": "https://api.github.com/users/dumblob/following{/other_user}",
                "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dumblob",
                "id": 2451044,
                "login": "dumblob",
                "node_id": "MDQ6VXNlcjI0NTEwNDQ=",
                "organizations_url": "https://api.github.com/users/dumblob/orgs",
                "received_events_url": "https://api.github.com/users/dumblob/received_events",
                "repos_url": "https://api.github.com/users/dumblob/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dumblob",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure if I'm understanding this well. \n\nI mean, I use a lot `q:`, to see the list of commands, and move through them, edit one of them, and reexecuting. But in the process of editing a command, I can press Esc several times. Wouldn't this\n\n> `inoremap <buffer> <silent> <esc> <esc>:q<cr>`\n\nexit on the first esc?\n\nUPDATE: I think I get it now.  I had taken `g:enhanced_command_line` for a constant option. But I suppose the intent is to change it just before/after command line is shown/hidden. Please correct me if I'm wrong.\n",
            "created_at": "2014-11-08T18:06:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62269143",
            "id": 62269143,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY5MTQz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62269143/reactions"
            },
            "updated_at": "2014-11-08T18:14:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62269143",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> UPDATE: I think I get it now. I had taken g:enhanced_command_line for a constant option. But I suppose the intent is to change it just before/after command line is shown/hidden. Please correct me if I'm wrong.\n\nThat vimscript snippet was just to play with the idea of using a command window like interface for normal command line.\n\nIn other words: If we take the current command window, enhance with command line mappings and behavior(activated when pressing `:`, would it be a viable alternative to the current command line?\n\nFrom the code maintenance POV, it seems to be a good simplification(possible removal of ex_getln.c?), but I'm also interested in knowing what users think of the idea.\n",
            "created_at": "2014-11-08T21:56:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62280393",
            "id": 62280393,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjgwMzkz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62280393/reactions"
            },
            "updated_at": "2014-11-08T21:56:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62280393",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes, yes. I did have understood that the idea is was to recreate command line using command window.\nWhat remains unclear to me is if we would still have normal command window, AND then a command line out of another modified command window, or you're talking about some kind of unification into a single thing.\n",
            "created_at": "2014-11-08T23:07:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62282562",
            "id": 62282562,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjgyNTYy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62282562/reactions"
            },
            "updated_at": "2014-11-08T23:07:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62282562",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "To me, in principle, a separate mode for commands makes sense. Meaning that I do want to be able to have different mappings/completions/etc. in command mode that what I have at normal insert mode. \n\nNow, can everything that is now associated to command mode be simulated with insert mode on a new special filetype? \n\nI can't answer at once. It needs some thinking. Probably, we would need to have a prototype of it to really grasp how it would feel, and find unseen limitations/potentialities.\n",
            "created_at": "2014-11-08T23:20:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62282962",
            "id": 62282962,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjgyOTYy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62282962/reactions"
            },
            "updated_at": "2014-11-08T23:21:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62282962",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We would still have the current command window. The idea is to give it some enhancements(enabled when invoked with `:`) that made it a drop-in replacement for the command line\n",
            "created_at": "2014-11-08T23:22:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62283034",
            "id": 62283034,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjgzMDM0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62283034/reactions"
            },
            "updated_at": "2014-11-08T23:22:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62283034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "There are two things regarding command line/window that I've always felt far from perfect:\n- Not being able to press Esc in command line to go backwards and correct a typo, and having to press C-F to go to command window, when all I want is normal mode, but for the single command line.\n- Not having command completion when in command window's insert mode, editing a previous command.\n\nNow, imagine we have an improved command-window, which can be launched two ways (single-line and multi-line). And that command window's insert mode is able to completely emulate previous command mode, completions and all.\n\nThen, I would have my problems solved. Normal mode in command line just pressing esc. And command completion in command window.\u0010 What do you think?\n",
            "created_at": "2014-11-08T23:52:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62283923",
            "id": 62283923,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjgzOTIz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62283923/reactions"
            },
            "updated_at": "2014-11-08T23:53:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62283923",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Now, imagine we have an improved command-window, which can be launched two ways (single-line and multi-line). And that command window's insert mode is able to completely emulate previous command mode, completions and all.\n\nThats what I have been imagining, though it is already possible to use completion in the command window(did you try pressing TAB in insert mode? it shows a insert-mode menu with the completions you would get in the command line). The only thing it is not emulated in command window insert mode is history search(with `<up>`/`<down>` with what has been typed so far\n\n> Then, I would have my problems solved. Normal mode in command line just pressing esc. And command completion in command window. What do you think?\n\nNot sure if we should change the default behavior of the command line(eg: make <esc> go into normal mode) because existing mappings may depend on it. What you desire is already possible though, you can simply remap `<esc>` in the command line, something like `cnoremap <esc> <c-f>`\n\nHere's an improved version of the previous snippet, this one makes sure normal command window isn't affected:\n\n``` vim\nfunction! EnableImprovedCommandLine()\n  nnoremap <silent> : :let g:improved_command_line = 1<cr>q:i\nendfunction\n\nfunction! DisableImprovedCommandLine()\n  nunmap :\nendfunction\n\nfunction! SetupImprovedCommandLine()\n  if exists('g:improved_command_line')\n    inoremap <buffer> <silent> <esc> <esc>:q<cr>\n  else\n    call DisableImprovedCommandLine()\n  endif\nendfunction\n\nfunction! TeardownImprovedCommandLine()\n  if exists('g:improved_command_line')\n    iunmap <buffer> <esc>\n    unlet g:improved_command_line\n  else\n    call EnableImprovedCommandLine()\n  endif\nendfunction\n\nau CmdwinEnter * call SetupImprovedCommandLine()\nau CmdwinLeave * call TeardownImprovedCommandLine()\ncall EnableImprovedCommandLine()\n```\n",
            "created_at": "2014-11-09T02:16:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62287901",
            "id": 62287901,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjg3OTAx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62287901/reactions"
            },
            "updated_at": "2022-05-25T22:04:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62287901",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ok. One small itch I have about this:\n\nTo me, command mode and insert mode are conceptually different. In particular, there are mapppings I want in command mode I don't want in insert mode. So, I understand we would be emulating command mode reusing implementation of insert mode, but not dropping conceptual command mode. \n\nBut then, how would things like command mode mappings work? I suppose a command mode mapping would translate into an insert mode mapping restricted to a particular buffer (command line buffer). Am I right? Do you preview any difficulties down that path?\n",
            "created_at": "2014-11-12T18:23:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62765885",
            "id": 62765885,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzY1ODg1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62765885/reactions"
            },
            "updated_at": "2014-11-12T18:23:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62765885",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But then, how would things like command mode mappings work? I suppose a command mode mapping would translate into an insert mode mapping restricted to a particular buffer (command line buffer). Am I right? Do you preview any difficulties down that path?\n\nA short-term solution is keeping \"command state\" just for the sake of mappings(enter command mode when `i` is pressed in command line window).\n",
            "created_at": "2014-11-13T13:23:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-62889238",
            "id": 62889238,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODg5MjM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62889238/reactions"
            },
            "updated_at": "2014-11-13T13:23:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62889238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Where did this end up? Would really love to be able to have statusbar on top. ",
            "created_at": "2017-10-01T00:41:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-333345467",
            "id": 333345467,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzM0NTQ2Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/333345467/reactions"
            },
            "updated_at": "2017-10-01T00:41:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/333345467",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/606014?v=4",
                "events_url": "https://api.github.com/users/jamischarles/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamischarles/followers",
                "following_url": "https://api.github.com/users/jamischarles/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamischarles/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamischarles",
                "id": 606014,
                "login": "jamischarles",
                "node_id": "MDQ6VXNlcjYwNjAxNA==",
                "organizations_url": "https://api.github.com/users/jamischarles/orgs",
                "received_events_url": "https://api.github.com/users/jamischarles/received_events",
                "repos_url": "https://api.github.com/users/jamischarles/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamischarles/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamischarles/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamischarles",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The status is described by the issue status: it's open, and in the \"unplanned\" milestone. \r\n\r\nSome pull requests exist in various states of completion.\r\n\r\n- https://github.com/neovim/neovim/pull/6162 (**update:** merged) allows external UIs to show the cmdline (not statusline) however they like. Similar work is planned for statusline.\r\n- https://github.com/neovim/neovim/pull/4382 swaps statusline/cmdline, for whatever reason. It doesn't have any test coverage ...",
            "created_at": "2017-10-01T10:04:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-333366264",
            "id": 333366264,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzM2NjI2NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/333366264/reactions"
            },
            "updated_at": "2017-10-29T00:35:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/333366264",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "How about cmdline in Floating Window?",
            "created_at": "2019-10-13T08:40:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-541399127",
            "id": 541399127,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTM5OTEyNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/541399127/reactions"
            },
            "updated_at": "2019-10-13T08:40:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/541399127",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11004324?v=4",
                "events_url": "https://api.github.com/users/yudium/events{/privacy}",
                "followers_url": "https://api.github.com/users/yudium/followers",
                "following_url": "https://api.github.com/users/yudium/following{/other_user}",
                "gists_url": "https://api.github.com/users/yudium/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yudium",
                "id": 11004324,
                "login": "yudium",
                "node_id": "MDQ6VXNlcjExMDA0MzI0",
                "organizations_url": "https://api.github.com/users/yudium/orgs",
                "received_events_url": "https://api.github.com/users/yudium/received_events",
                "repos_url": "https://api.github.com/users/yudium/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yudium/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yudium/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yudium",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@yudisupriyadi123 cmdline _window_ as a float should already be possible, i e `nvim_win_set_config` in `CmdwinEnter`, but it might benefit from some additional native support to avoid needing to split and then restore split layout. #10842 would cover or at least tangent this (i e the layout of a modal window should be disentangled from its function).",
            "created_at": "2019-10-14T18:02:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-541828730",
            "id": 541828730,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTgyODczMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/541828730/reactions"
            },
            "updated_at": "2019-10-14T18:02:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/541828730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "If I may, I'd really like to add a request for a feature that would spare me of sereval lines of code in a Neovim plugin I've made for workspace management. For now I need to implement split handling, but I haven't done it because statusline and tabline seem to work differently from each other. Here's a gif that shows what I mean:\r\n\r\n![split](https://user-images.githubusercontent.com/7888397/89704665-40f7ee00-d92c-11ea-868f-019d40bbe450.gif)\r\n\r\nSo what I mean is that when performing the `:split` command, Neovim creates an independent statusline for each split buffer, but keeps the same tabline. I know there must be a reason for this, but it would really improve the next version of my plugin if the user had the option of disabling the creation of a separate statusline for each split. \r\n\r\nThe way the plugin already works is this. By creating a project file such as\r\n\r\n\r\n![Screenshot from 2020-08-08 04-08-09](https://user-images.githubusercontent.com/7888397/89704722-d1cec980-d92c-11ea-91a5-27191484806d.png)\r\n\r\nNVPM then renders the statusline to show the buffer-list created in the project file as shown in the code snippet above. The tabline, on the other hand, will render both the workspace list and the tablist. \r\n\r\nIn the next version of NVPM plugin, I intend to implement the feature of creating splits in the project file, such as\r\n\r\n![split](https://user-images.githubusercontent.com/7888397/89704764-4b66b780-d92d-11ea-8409-5048e11ac9bd.png)\r\n\r\nwhere the user could tell NVPM to split them horizontally or vertically. But it's of great importance if Neovim doesn't create two statuslines for each split, as shown at the end of the gif.\r\n\r\nI don't know how hard would be to implement it or even if it's already possible somehow. Any help?\r\n\r\nwith regards,\r\nItamar Soares",
            "created_at": "2020-08-08T07:17:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-670837497",
            "id": 670837497,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDgzNzQ5Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/670837497/reactions"
            },
            "updated_at": "2022-05-25T22:05:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/670837497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7888397?v=4",
                "events_url": "https://api.github.com/users/iasj/events{/privacy}",
                "followers_url": "https://api.github.com/users/iasj/followers",
                "following_url": "https://api.github.com/users/iasj/following{/other_user}",
                "gists_url": "https://api.github.com/users/iasj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iasj",
                "id": 7888397,
                "login": "iasj",
                "node_id": "MDQ6VXNlcjc4ODgzOTc=",
                "organizations_url": "https://api.github.com/users/iasj/orgs",
                "received_events_url": "https://api.github.com/users/iasj/received_events",
                "repos_url": "https://api.github.com/users/iasj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iasj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iasj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iasj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> How about cmdline in Floating Window?\r\n\r\nThat should be now even simpler with prompt being displayable using `0.9` window `title` option. Would be especially useful for `vim.ui.input` for not moving the focuspoint when lsp-renaming.",
            "created_at": "2023-05-17T20:51:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-1552068256",
            "id": 1552068256,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "IC_kwDOAPphoM5cgq6g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1552068256/reactions"
            },
            "updated_at": "2023-05-17T20:55:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1552068256",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/54900518?v=4",
                "events_url": "https://api.github.com/users/litoj/events{/privacy}",
                "followers_url": "https://api.github.com/users/litoj/followers",
                "following_url": "https://api.github.com/users/litoj/following{/other_user}",
                "gists_url": "https://api.github.com/users/litoj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/litoj",
                "id": 54900518,
                "login": "litoj",
                "node_id": "MDQ6VXNlcjU0OTAwNTE4",
                "organizations_url": "https://api.github.com/users/litoj/orgs",
                "received_events_url": "https://api.github.com/users/litoj/received_events",
                "repos_url": "https://api.github.com/users/litoj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/litoj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/litoj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/litoj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I hope some clever soul with neck pain or not figures this out. Having the status line at eye level will be a dream come true! ❤️",
            "created_at": "2023-11-03T20:56:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-1793086303",
            "id": 1793086303,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "IC_kwDOAPphoM5q4FNf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1793086303/reactions"
            },
            "updated_at": "2023-11-03T20:56:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1793086303",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/129185?v=4",
                "events_url": "https://api.github.com/users/lpanebr/events{/privacy}",
                "followers_url": "https://api.github.com/users/lpanebr/followers",
                "following_url": "https://api.github.com/users/lpanebr/following{/other_user}",
                "gists_url": "https://api.github.com/users/lpanebr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lpanebr",
                "id": 129185,
                "login": "lpanebr",
                "node_id": "MDQ6VXNlcjEyOTE4NQ==",
                "organizations_url": "https://api.github.com/users/lpanebr/orgs",
                "received_events_url": "https://api.github.com/users/lpanebr/received_events",
                "repos_url": "https://api.github.com/users/lpanebr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lpanebr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lpanebr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lpanebr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "In the meantime: https://github.com/vimpostor/vim-tpipeline",
            "created_at": "2023-11-03T21:20:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-1793117951",
            "id": 1793117951,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "IC_kwDOAPphoM5q4M7_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1793117951/reactions"
            },
            "updated_at": "2023-11-03T21:20:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1793117951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/129185?v=4",
                "events_url": "https://api.github.com/users/lpanebr/events{/privacy}",
                "followers_url": "https://api.github.com/users/lpanebr/followers",
                "following_url": "https://api.github.com/users/lpanebr/following{/other_user}",
                "gists_url": "https://api.github.com/users/lpanebr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lpanebr",
                "id": 129185,
                "login": "lpanebr",
                "node_id": "MDQ6VXNlcjEyOTE4NQ==",
                "organizations_url": "https://api.github.com/users/lpanebr/orgs",
                "received_events_url": "https://api.github.com/users/lpanebr/received_events",
                "repos_url": "https://api.github.com/users/lpanebr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lpanebr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lpanebr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lpanebr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "For custom command location I'm using [`folke/noice.nvim`](https://github.com/folke/noice.nvim) and it's amazing ",
            "created_at": "2023-11-22T19:16:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-1823359051",
            "id": 1823359051,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "IC_kwDOAPphoM5srkBL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1823359051/reactions"
            },
            "updated_at": "2023-11-22T19:16:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1823359051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20543337?v=4",
                "events_url": "https://api.github.com/users/4rgc/events{/privacy}",
                "followers_url": "https://api.github.com/users/4rgc/followers",
                "following_url": "https://api.github.com/users/4rgc/following{/other_user}",
                "gists_url": "https://api.github.com/users/4rgc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/4rgc",
                "id": 20543337,
                "login": "4rgc",
                "node_id": "MDQ6VXNlcjIwNTQzMzM3",
                "organizations_url": "https://api.github.com/users/4rgc/orgs",
                "received_events_url": "https://api.github.com/users/4rgc/received_events",
                "repos_url": "https://api.github.com/users/4rgc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/4rgc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/4rgc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/4rgc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@4rgc wow, that one looks really nice. Thanks for the catch!",
            "created_at": "2024-04-13T07:49:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-2053562339",
            "id": 2053562339,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "IC_kwDOAPphoM56Zt_j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053562339/reactions"
            },
            "updated_at": "2024-04-13T07:49:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2053562339",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2451044?v=4",
                "events_url": "https://api.github.com/users/dumblob/events{/privacy}",
                "followers_url": "https://api.github.com/users/dumblob/followers",
                "following_url": "https://api.github.com/users/dumblob/following{/other_user}",
                "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dumblob",
                "id": 2451044,
                "login": "dumblob",
                "node_id": "MDQ6VXNlcjI0NTEwNDQ=",
                "organizations_url": "https://api.github.com/users/dumblob/orgs",
                "received_events_url": "https://api.github.com/users/dumblob/received_events",
                "repos_url": "https://api.github.com/users/dumblob/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dumblob",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I think, I may be onto something.\n\nTL;DR\nYou can construct a global statusline from the tabline on the top.\n\nYou can \"simply\" turn off the `statusline`, create a custom function that will basically draw opened buffers on the `tabline`, and add to it the elements from `statusline` (since it accepts them), and then create an Autocmd that will update it every `CursorMoved` event (since it doesn't auto-update).\n\nHere's the code:\n\n`vim.opt.laststatus = 0` and\n<details>\n\n<summary>\nui.lua\n</summary>\n\n```lua\n-- Bufferline (https://github.com/hacke2man/suffer) and statusline combined\nlocal function display(bufnum)\n    local name = string.match(vim.api.nvim_buf_get_name(bufnum), \"[^/]*$\")\n    local hi_group\n    if bufnum == vim.fn.bufnr(\"%\") then\n        hi_group = \"%#None#\"\n    else\n        hi_group = \"%#CustomStatusLine#\"\n    end\n    -- CustomStatusLine is a custom highlight group I have created\n    return hi_group .. \" \" .. name .. \" \" .. \"%#CustomStatusLine#\"\nend\n\nlocal function suffer_run()\n    local bufnum_list = vim.api.nvim_list_bufs()\n    local buffer_display_list = {}\n\n    for _, bufnum in ipairs(bufnum_list) do\n        if vim.fn.buflisted(bufnum) == 1 then\n            table.insert(buffer_display_list, display(bufnum))\n        end\n    end\n\n    -- return table.concat(buffer_display_list, '%#CustomStatusLine#')\n    return table.concat(buffer_display_list, '%#CustomStatusLine#')\nend\n\nvim.g.suffer_run = suffer_run\n\nlocal tabline = {\n    \"%{%suffer_run()%}\",    -- evaluate suffer_run as statusline argument\n    \" %r \",\n    -- https://github.com/SmiteshP/nvim-navic\n    -- \"%{%v:lua.require'nvim-navic'.get_location()%}\",\n    -- \"%m\",\n    \"%=\", -- separation point\n    -- \"%{&filetype}\",\n    \"%2p%% %l/%L\",\n}\n\n-- Set the status line with your custom highlight (that is defined via colorscheme in colorscheme.lua)\n-- tabline have the same arguments as statusline (see :h 'statusline')\nvim.o.tabline = \"%#CustomStatusLine#\" .. table.concat(tabline, '') .. \"%#CustomStatusLine#\"\n\n-- Tabline doesn't update automatically (:h 'tabline')\nvim.api.nvim_create_augroup('RedrawOnMove', { clear = true })\nvim.api.nvim_create_autocmd('CursorMoved', {\n    group = 'RedrawOnMove',\n    callback = function()\n        -- Execute the redraw command\n        vim.cmd('redrawtabline')\n    end,\n})\n```\n\n</details>\n\nAlso I don't know how to move `cmdline`, but I don't really care about it.",
            "created_at": "2025-03-31T22:04:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-2767518695",
            "id": 2767518695,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "IC_kwDOAPphoM6k9Pvn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2767518695/reactions"
            },
            "updated_at": "2025-03-31T22:04:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2767518695",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/37738748?v=4",
                "events_url": "https://api.github.com/users/bogdan-the-great/events{/privacy}",
                "followers_url": "https://api.github.com/users/bogdan-the-great/followers",
                "following_url": "https://api.github.com/users/bogdan-the-great/following{/other_user}",
                "gists_url": "https://api.github.com/users/bogdan-the-great/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bogdan-the-great",
                "id": 37738748,
                "login": "bogdan-the-great",
                "node_id": "MDQ6VXNlcjM3NzM4NzQ4",
                "organizations_url": "https://api.github.com/users/bogdan-the-great/orgs",
                "received_events_url": "https://api.github.com/users/bogdan-the-great/received_events",
                "repos_url": "https://api.github.com/users/bogdan-the-great/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bogdan-the-great/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bogdan-the-great/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bogdan-the-great",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bogdan-the-great screenshot?",
            "created_at": "2025-04-01T00:43:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/1435#issuecomment-2767737791",
            "id": 2767737791,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1435",
            "node_id": "IC_kwDOAPphoM6k-FO_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2767737791/reactions"
            },
            "updated_at": "2025-04-01T00:43:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2767737791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/606014?v=4",
                "events_url": "https://api.github.com/users/jamischarles/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamischarles/followers",
                "following_url": "https://api.github.com/users/jamischarles/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamischarles/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamischarles",
                "id": 606014,
                "login": "jamischarles",
                "node_id": "MDQ6VXNlcjYwNjAxNA==",
                "organizations_url": "https://api.github.com/users/jamischarles/orgs",
                "received_events_url": "https://api.github.com/users/jamischarles/received_events",
                "repos_url": "https://api.github.com/users/jamischarles/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamischarles/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamischarles/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamischarles",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 25,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/1435/comments",
    "created_at": "2014-11-08T15:25:02Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/1435/events",
    "html_url": "https://github.com/neovim/neovim/issues/1435",
    "id": 48168790,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "UI extensibility, events, protocol, externalized UI",
            "id": 640132777,
            "name": "ui-extensibility",
            "node_id": "MDU6TGFiZWw2NDAxMzI3Nzc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui-extensibility"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "tabline, winbar, statuscolumn",
            "id": 3385615828,
            "name": "statusline",
            "node_id": "LA_kwDOAPphoM7JzGXU",
            "url": "https://api.github.com/repos/neovim/neovim/labels/statusline"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/1435/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 707,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 637,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-03-31T13:15:01Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWU0ODE2ODc5MA==",
    "number": 1435,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 38,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 1,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 39,
        "url": "https://api.github.com/repos/neovim/neovim/issues/1435/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/1435/timeline",
    "title": "UI: custom placement of statusline, tabline, winbar, cmdline",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-01T00:43:14Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/1435",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2451044?v=4",
        "events_url": "https://api.github.com/users/dumblob/events{/privacy}",
        "followers_url": "https://api.github.com/users/dumblob/followers",
        "following_url": "https://api.github.com/users/dumblob/following{/other_user}",
        "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dumblob",
        "id": 2451044,
        "login": "dumblob",
        "node_id": "MDQ6VXNlcjI0NTEwNDQ=",
        "organizations_url": "https://api.github.com/users/dumblob/orgs",
        "received_events_url": "https://api.github.com/users/dumblob/received_events",
        "repos_url": "https://api.github.com/users/dumblob/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dumblob",
        "user_view_type": "public"
    }
}