{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Tracking/discussion issue for planned UI enhancements. NB: being mentioned on the list below is not a guarantee for being done at any specific time scale, nor is the order necessarily indicative of readiness/priority (except perhaps for the smaller follow-up items for multigrid, which I hope to get done pretty soon). Feel free to add stuff.\r\n\r\n- [x] multigrid (#8455 **merged**)\r\n  - [x] improve size handling: non-screen functions should use requested size, not grid allocated size.\r\n  - [x] `:term` sizing issues (fix `terminal_resize`)\r\n  - [x] mouse support (#9429)\r\n  - [ ] messages on dedicated grid (when not `ext_messages`)\r\n- [x] floating windows (#6619)\r\n  - [x] for `!ext_popupmenu`: pum as float (#9530)\r\n  - [x] for `ext_popupmenu`: add tests for grid anchoring \r\n  - [x] `nvim_win_close` to close window by id.\r\n  - [x] Ex-commands for floats (#9663)\r\n      - [ ] #9920\r\n  - [x] `pumblend` but for floats (because why not)\r\n- [x] `ext_messages` (#7466)\r\n- [ ] `ext_windows`: UI control of layout and wincmds (#8707)\r\n- [x]  use `ext_popupmenu` events for wildmenu to support info and pum (#9607) \r\n- [ ] `ext_statusline` (I have some ideas/pre-WIP code...)\r\n- [ ] external columns (number, signs) by transmitting `wline_T` info (no work done)\r\n- [ ] \"tabgrid\" (#7541 but with multigrid)\r\n- [x] transmit UI highlight definitions for `ext_popupmenu` using `hl-Pmenu`, etc. (#10504)\r\n    - [x] ensure that we always use concrete rgb colors for `default_colors_set`\r\n    - [ ] allow subscribing non-default groups\r\n- [x] UI control of `ext_popupmenu` #9445 \r\n    - [ ] For `ext_cmdline` maybe `nvim_call_function('setcmdpos')` already works (check + add docs/test)",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I've got a question that is vaguely related to the \"GUI Features\" proposal of GSOC (https://github.com/neovim/neovim/wiki/GSoC-2019-Ideas#gui-features).\r\n\r\nOni2 is currently going in a different way than Oni1, where Oni2 is going to own the entire front-end essentially, and use neovim as what powers the editing, rather than neovim powering both the editing and all the visual features (highlights, syntax, etcetc). There is some on that in the original design stuff @bryphe did for Oni2: https://gist.github.com/bryphe/ca3260914818a1293864e9fa6422a69c#a-new-view-layer\r\n\r\nWe've hit two bumps with parts of that:\r\n\r\n1. Non-externalised features. One aspect of us owning the front end is the wealth of information that we are currently going to miss out on. For example, we aren't aware of a simple way of us getting the currently searched term highlight, or live substitution etc. This understandably is just a slow process, so I think eventually this will become less and less of an issue.\r\n\r\n2. Scope of the externalised features. From our understanding, a lot of the APIs as they exist today transmit information about what is currently visible to neovim (as in the current lines on screen), rather than information on the whole buffer. Ie, we get syntax highlights for the lines on screen, not the whole buffer. That then makes doing something like a minimap much harder/impossible without weird hacks. Similarly, stuff like showing to the user where every search term is, highlight all parts of the code that are being substituted and so on aren't feasible. Having the APIs return the information for the full buffer when requested would be useful, though I don't know how realistic that is/what is blocking that from happening.\r\n\r\nThe proposal sounds like it is at least aware that there are UIs that are implementing their own front-ends, and we wanted to check that if the things we are hoping for are reasonable to want! I can't speak for all of us, but we are willing to help and attempt to help get this sort of thing into nvim as well, if it is appropriate.",
            "created_at": "2019-03-27T10:22:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/9421#issuecomment-477082110",
            "id": 477082110,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9421",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzA4MjExMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477082110/reactions"
            },
            "updated_at": "2019-03-27T10:22:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477082110",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10038688?v=4",
                "events_url": "https://api.github.com/users/CrossR/events{/privacy}",
                "followers_url": "https://api.github.com/users/CrossR/followers",
                "following_url": "https://api.github.com/users/CrossR/following{/other_user}",
                "gists_url": "https://api.github.com/users/CrossR/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/CrossR",
                "id": 10038688,
                "login": "CrossR",
                "node_id": "MDQ6VXNlcjEwMDM4Njg4",
                "organizations_url": "https://api.github.com/users/CrossR/orgs",
                "received_events_url": "https://api.github.com/users/CrossR/received_events",
                "repos_url": "https://api.github.com/users/CrossR/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/CrossR/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CrossR/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/CrossR",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@CrossR There is definitely awareness in nvim that the current GUI api doesn't cover the use case of embedders that do their own text rendering. I had the design document of Oni2 partially in mind when I wrote the \"buffer contents\" paragraph, but these issues are not completely new, also VscodeNvim and similar integrations would like to get nvim highlights by buffer positions, rather than screen positions.\r\n\r\nAny contributions on this front would certainly be welcome, for instance design suggestions for how a protocol extension for Oni2 and similar embedders could look like.\r\n",
            "created_at": "2019-03-27T12:57:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/9421#issuecomment-477140556",
            "id": 477140556,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9421",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzE0MDU1Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 5,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477140556/reactions"
            },
            "updated_at": "2019-03-27T12:57:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477140556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> 2\\. a lot of the APIs as they exist today transmit information about what is currently visible to neovim (as in the current lines on screen), rather than information on the whole buffer. Ie, we get syntax highlights for the lines on screen, not the whole buffer.\r\n\r\nIn my mind, this is the \"Syntax API\" mentioned in the \"Long Term\" section of https://neovim.io/roadmap/ : programmatically create (defined structurally, not with regex: text properties / extended marks) /query Vim syntax groups .  (Legacy regex-defined Vim syntax groups could also be queried.)\r\n\r\nIn the near term we get a lot of leverage by letting \"syntax\" be defined by third-parties, sent to Nvim as \"dumb\" highlights. But in the long-term, \"syntax API\"  is better for integration with Vim plugins/conventions, as well as GUIs like Oni2.\r\n\r\nIt is  complicated by the risk of whole-buffer operations being  expensive compared to viewport context.\r\n\r\nThat gives me an idea: what if Nvim API allowed caller to specify a \"fake viewport\"? So clients could \"scroll\" through a buffer by defining a window (viewport) on the buffer. You could even make a gigantic viewport to get everything at once. Actually, it's not clear to me why Oni2 could not already take this approach for its minimap.",
            "created_at": "2019-03-27T14:14:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/9421#issuecomment-477174643",
            "id": 477174643,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9421",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzE3NDY0Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477174643/reactions"
            },
            "updated_at": "2019-03-27T14:24:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477174643",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hey sorry for a massive braindump - but figured this would be as good of place as any to document our approach / findings between Onivim 1 & 2 so far! Thanks @CrossR for jumping in. And @bfredl - really appreciate you thinking about our case of doing our own rendering. \r\n\r\n## Rendering Features for Onivim 1/2\r\n\r\nThere's a multitude of features that we want to support:\r\n\r\n- __Onivim 1__ Rendering of custom UI against tokens (buffer space -> view space transform)\r\n\r\nGiven a _range_ in a buffer (`line, column`, ), we should be able to draw a UI element at that position.  In essence, this just a function that is like `bufferSpaceToPixelSpace = (line, colum) => (pixelX, pixelY)`. \r\n\r\n- __Onivim 2__ Smooth scroll\r\n\r\nAbility to scroll at the pixel-level as opposed to line-level\r\n\r\n- __Onivim 2__ Minimap\r\n\r\nShow a larger view of the buffer, with syntax highlighting, cursor position, etc.\r\n\r\n- __Onivim 2__ Codelens\r\n\r\nIf you're not familiar with codelens - this is the idea:\r\n![image](https://user-images.githubusercontent.com/13532591/55190239-b068a580-515c-11e9-8fe3-9f1d13259178.png)\r\n\r\nEssentially it lets you drop informational bits interspersed in the code. Note that it takes up some space and could potentially change the number of visible lines in the window, depending on how many are shown.\r\n\r\n## Challenge 1: Buffer Space to View Space Transform\r\n\r\nOne challenge we had with Oni1 is coming up with a reliable way to go from _buffer space_ (a `line`, `column`) in a buffer to pixel coordinates on the screen. For a lot of our 'enhanced UI', it really wasn't necessary for us to have this - like, for completion and hover, we just showed that at the cursor position, so it wasn't necessary. \r\n\r\nBut we wanted to have the ability to do some more interesting things - like render images or previews next to URLs, clickable hyperlinks in code, etc. One example of how we use this 'buffer space to view space' transform is this experience when you drop in a snippet:\r\n![image](https://user-images.githubusercontent.com/13532591/55189522-55827e80-515b-11e9-8181-7dcf6b63c075.png)\r\n\r\nWe take the _range_ of the snippet, and pass it to a function that converts from buffer space to pixel space, and then render the drop shadows above and below. \r\n\r\nThis sounds like it should be easy! But it actually was really hard to get this logic working (it depends on a lot of factors: the window layout, whether line numbers are shown, the window size, etc). We ended up with this really crazy (and _slow_) code here:\r\nhttps://github.com/onivim/oni/blob/50d89d1a5f5f77a780ff92cd667560e86d757e4e/browser/src/neovim/NeovimWindowManager.ts#L170\r\n\r\nEssentially we query to get the top and bottom lines of the window - then we get the buffer ranges - and then we create a mapping of 'view ranges' to buffer ranges: https://github.com/onivim/oni/blob/50d89d1a5f5f77a780ff92cd667560e86d757e4e/browser/src/neovim/NeovimWindowManager.ts#L242\r\n\r\nWe made ~4 round-trip calls to Neovim for this. On Windows, when I measured the RTT for API calls, it had a high variance - anywhere from <1ms to ~4ms. With that, and the fact we were making additional API calls, we easily missed frame deadlines. One consequence of this is that scrolling was really janky for any feature that used this 'buffer space' to 'view space' mapping - it would be off for a few frames.\r\n\r\n__Potential Mitigation:__\r\n\r\nIf there was an API to get the __screen cell position__, based on a window and a buffer position - I think that could help. But it might still be too slow to handle the scroll case. Handling the view rendering in the UI helps alleviate this for us (in fact, scrolling independent of the cursor in Onivim 2 is faster than when the cursor moves - due to the fact we don't need any RPC calls for that).\r\n\r\n## Challenge 2: Minimap / Smooth Scroll / Codelens\r\n\r\nI grouped these together since they kind of together forced us down the path of a custom view layer (well, along with the mapping issue above).\r\n\r\nRegarding the Minimap / Smooth Scroll / Codelens features in Onivim 2 - we actually discussed this at length @justinmk - creating a large Window was something we experimented a bit with. However, we still had the challenge that we didn't have a robust, fast way to create that buffer space -> pixel space mapping. In addition, the codelens feature makes this challenging - we'd be constantly resizing the view as we get different codelenses taking up space.\r\n\r\nWith Oni1, I found for most operations we tended to work in 'buffer space' - except for the rendering. Stuff like handling LSP requests all happens in buffer space. And, as the rendering is performance critical path, if we incorporated it inline - we avoid the pitfalls we had in Oni1 with the round-trips needed to build up that buffer space -> screen space map, and it gives us a lot of flexibility in how we render the buffer.\r\n\r\nThe downside with our approach, though, is we have to manage all these things:\r\n- Search highlighting\r\n- Syntax highlighting (we offload to `vscode-textmate` for this)\r\n- Line wrapping / virtual lines\r\n- Folding - we need to account for this (deferring to VSCode's model)\r\n\r\nI have some ideas for search highlighting / syntax highlighting covered below - but not sure if there is much Neovim could do for these other pieces.\r\n\r\n### Externalization Ideas for Onivim 2\r\n\r\n#### Externalization of Search Highlights\r\n\r\nOne of the biggest challenges we have at the moment is figuring out where search highlights should be shown via `/` and `?`. We'd like to show them in the text view, in the minimap, _and_ the scrollbar (so a complete picture of search results in the buffer).\r\n\r\n__Potential API:__\r\n- An `ext_searchhl` attach option - Use external search highlights\r\n\r\nThen, during a search operation, if `ext_searchhl` was set on attach - Neovim would emit messages of the form `ui-event-search_highlight`:\r\n`[\"search_highlight\", highlights]` where `highlights` is a List of `[startLine, startCharacter, endLine, endCharacter]`.\r\n\r\nWe also were looking at plugins like [`incsearch.vim`](https://github.com/haya14busa/incsearch.vim) to see if we could tweak it to return a list of search positions, but I don't think that is doable (but maybe an alternative would be - to have an API to run a Vim RegEx and get match positions?)\r\n\r\n#### Externalization of Syntax Highlighting\r\n\r\nAnother gap @CrossR mentioned was the lack of syntax highlighting. This isn't a deal-breaker per-se... since we get syntax highlights from Textmate - but it would be nice to have so that we can provide better support for Neovim plugins that use highlighting!\r\n\r\nOne thing I found interesting with `vscode-textmate` was the packed format it used to send highlights: \r\nhttps://github.com/Microsoft/vscode-textmate/blob/8870575f0a42eb75d035d93f60c6ba8fb795fc2a/src/main.ts#L212\r\n\r\nEach line was an array of two indices - the first, a character offset, the second, a packed 32-bit integer containing information for the foreground color / background color / font style / and a 'standard token type' (we could ditch the language id!).\r\n\r\n__Potential API:__\r\n\r\nTaking inspiration from the current 'buffer updates' API - maybe there could be an API that lets us listen for syntax highlight changes?\r\n\r\n`nvim_buf_attach_hl({buffer}, {send_buffer}, {opts})` - Activates syntax highlight updates from this buffer. Opts could contain some marker for an `offsetTop` and `offsetBottom` - some way to specify a _subset of the buffer_ for ranges.\r\n\r\nWhen active - Neovim would send highlight updates of the form:\r\n`[\"buffer_highlights\", highlightUpdates]`, where `highlightUpdates` is a List of something like: `[lineNumber, highlights]`. `highlights` could be some sort of packed format like above - perhaps incorporating the highlight ID, or some other option for representing it.\r\n\r\nAn important consideration for highlights is, unlike buffer updates, we only need a subset of the view. (For Onivim 2 - it'd be guided by the extent of the minimap). I'm not sure whether this should be expressed in `opts` or some other API to adjust the visible range.\r\n\r\nWe'd also need an API to  `nvim_buf_detach_hl`.\r\n\r\n### Other Externalization Considerations\r\n\r\nWith Onivim 2's current architecture - we actually don't require grid / draw updates. I wonder if some performance could be saved by having a mode where those aren't broadcasted? \r\n\r\nWe also 'instrument' several Autocommands with information about the current state:\r\nhttps://github.com/onivim/oni2/blob/091c69aec243811220a14a9267a9aa952669b553/assets/viml/init.vim#L32\r\n\r\nI wonder if we could improve this by having an API to listen to autocommands? \r\n---\r\n\r\nAgain.. sorry for the wall of text. Let me know if you want to discuss any piece in more detail (or we can split this up in other issues).\r\n\r\nThere's still a lot of untapped potential in the API surface we haven't touched! I would like to spend more time with APIs like `nvim_get_keymap` - I think there's a lot of powerful stuff there. \r\n\r\nI'm also interested at some point in revisiting linking directly against `libnvim` - I think that could help mitigate the performance overhead of the RPC calls (since we could talk directly to nvim), as well as potentially sharing the buffer line memory, so we don't have it duplicated between Onivim 2 and nvim.\r\n\r\nIn addition - the ongoing externalization work is a huge help - having the messages externalized will be very beneficial for Onivim 2. \r\n\r\n__Thanks for all your help & hard work - Neovim is a great foundation to build on!__\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
            "created_at": "2019-03-28T21:02:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/9421#issuecomment-477769923",
            "id": 477769923,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9421",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Nzc2OTkyMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 6,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 11,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477769923/reactions"
            },
            "updated_at": "2019-03-28T21:03:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477769923",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13532591?v=4",
                "events_url": "https://api.github.com/users/bryphe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bryphe/followers",
                "following_url": "https://api.github.com/users/bryphe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bryphe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bryphe",
                "id": 13532591,
                "login": "bryphe",
                "node_id": "MDQ6VXNlcjEzNTMyNTkx",
                "organizations_url": "https://api.github.com/users/bryphe/orgs",
                "received_events_url": "https://api.github.com/users/bryphe/received_events",
                "repos_url": "https://api.github.com/users/bryphe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bryphe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bryphe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bryphe",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If there was an API to get the **screen cell position**, based on a window and a buffer position - I think that could help. \r\n\r\nWorth adding as a short-term mitigation, should not be difficult.\r\n\r\n> ext_searchhl attach option - Use external search highlights\r\n> ...\r\n> maybe an alternative would be - to have an API to run a Vim RegEx and get match positions?)\r\n\r\nPossible today by calling `searchpos()` in a server-side Lua chunk until it returns \"not found\". Adding a builtin function won't help performance, but would save hassle.\r\n\r\n> `nvim_buf_attach_hl({buffer}, {send_buffer}, {opts})` - Activates syntax highlight updates from this buffer. Opts could contain some marker for an `offsetTop` and `offsetBottom` - some way to specify a _subset of the buffer_ for ranges.\r\n\r\nI lump that in with the \"Syntax API\" hand-wave. I'll create a proper issue for this, now that we've written some things down.\r\n\r\n> having an API to listen to autocommands?\r\n\r\nI've been thinking about that quite a bit. It's very much planned.",
            "created_at": "2019-03-28T21:14:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/9421#issuecomment-477773593",
            "id": 477773593,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9421",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Nzc3MzU5Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477773593/reactions"
            },
            "updated_at": "2019-03-28T21:39:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477773593",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Possible today by calling searchpos() in a server-side Lua chunk until it returns \"not found\". Adding a builtin function won't help performance, but would save hassle.\r\n\r\nAh, I didn't know about that family of functions (`searchpos`, `search`, `searchpair`)... indeed looks like we could get the full list of matches by iterating across the buffer with `searchpos`. Will explore that route - thanks for the suggestion!\r\n\r\n",
            "created_at": "2019-03-28T22:32:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/9421#issuecomment-477795212",
            "id": 477795212,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9421",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Nzc5NTIxMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477795212/reactions"
            },
            "updated_at": "2019-03-28T22:32:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477795212",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13532591?v=4",
                "events_url": "https://api.github.com/users/bryphe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bryphe/followers",
                "following_url": "https://api.github.com/users/bryphe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bryphe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bryphe",
                "id": 13532591,
                "login": "bryphe",
                "node_id": "MDQ6VXNlcjEzNTMyNTkx",
                "organizations_url": "https://api.github.com/users/bryphe/orgs",
                "received_events_url": "https://api.github.com/users/bryphe/received_events",
                "repos_url": "https://api.github.com/users/bryphe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bryphe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bryphe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bryphe",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@bryphe Thanks for your input!\r\n\r\n> nvim_buf_attach_hl({buffer}, {send_buffer}, {opts}) - Activates syntax highlight updates from this buffer. Opts could contain some marker for an offsetTop and offsetBottom - some way to specify a subset of the buffer for ranges.\r\n\r\nThis is roughly what I had in the back of my head, but I would make it more general: enable to subscribe to all buffer \"decorations\", where decoration is essentially the state that `screen.c` in nvim might make use of on top of the text itself: \r\n  - syntax highlighting and concealing\r\n  - matchaddpos/nvim_buf_add_highlight\r\n   - signs\r\n   - virtual text.\r\n   - etc\r\n\r\nAs @justinmk mentioned it might sense to integrate with extmark APIs, e.g. so that the UI event receives data on the same form as a \"query\" API function for extmarks with visual state.\r\n\r\n> Each line was an array of two indices - the first, a character offset, the second, a packed 32-bit integer containing information for the foreground color / background color / font style / and a 'standard token type' (we could ditch the language id!).\r\n\r\nThe `ext_linegrid` extension defines a packed highlight representation as a single index into a table. Additionally `ext_hlstate` will transmit semantic information in the highlight definitions, but still use a single index for the cells. We can reuse them for the subscription API.\r\n",
            "created_at": "2019-03-29T09:34:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/9421#issuecomment-477931420",
            "id": 477931420,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9421",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzkzMTQyMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477931420/reactions"
            },
            "updated_at": "2019-03-29T09:34:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/477931420",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> This is roughly what I had in the back of my head, but I would make it more general: enable to subscribe to all buffer \"decorations\", where decoration is essentially the state that screen.c in nvim might make use of on top of the text itself\r\n\r\nCool! I like the idea of generalizing the concept to encompass decorations / concealing / signs / virtual text... It means even w/o handling the grid updates - we'd potentially be able to support a broader surface area of neovim functionality. And likely could be useful for other GUI clients, too.",
            "created_at": "2019-03-29T23:12:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/9421#issuecomment-478176520",
            "id": 478176520,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9421",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODE3NjUyMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/478176520/reactions"
            },
            "updated_at": "2019-03-29T23:12:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/478176520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13532591?v=4",
                "events_url": "https://api.github.com/users/bryphe/events{/privacy}",
                "followers_url": "https://api.github.com/users/bryphe/followers",
                "following_url": "https://api.github.com/users/bryphe/following{/other_user}",
                "gists_url": "https://api.github.com/users/bryphe/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bryphe",
                "id": 13532591,
                "login": "bryphe",
                "node_id": "MDQ6VXNlcjEzNTMyNTkx",
                "organizations_url": "https://api.github.com/users/bryphe/orgs",
                "received_events_url": "https://api.github.com/users/bryphe/received_events",
                "repos_url": "https://api.github.com/users/bryphe/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bryphe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bryphe/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bryphe",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/9421/comments",
    "created_at": "2018-12-31T17:45:33Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/9421/events",
    "html_url": "https://github.com/neovim/neovim/issues/9421",
    "id": 395012216,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "UI extensibility, events, protocol, externalized UI",
            "id": 640132777,
            "name": "ui-extensibility",
            "node_id": "MDU6TGFiZWw2NDAxMzI3Nzc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui-extensibility"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/9421/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWUzOTUwMTIyMTY=",
    "number": 9421,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 68,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 35,
        "hooray": 31,
        "laugh": 0,
        "rocket": 17,
        "total_count": 151,
        "url": "https://api.github.com/repos/neovim/neovim/issues/9421/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/9421/timeline",
    "title": "UI extension work (tracking issue)",
    "updated_at": "2025-01-17T16:02:35Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/9421",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
        "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
        "followers_url": "https://api.github.com/users/bfredl/followers",
        "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
        "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/bfredl",
        "id": 1363104,
        "login": "bfredl",
        "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
        "organizations_url": "https://api.github.com/users/bfredl/orgs",
        "received_events_url": "https://api.github.com/users/bfredl/received_events",
        "repos_url": "https://api.github.com/users/bfredl/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/bfredl",
        "user_view_type": "public"
    }
}