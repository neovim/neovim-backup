{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nvim.diagnostic.status() is only able to output unhighlighted diagnostics for the current buffer. In the original PR a few improvements were suggested as well such as\n* include workspace diagnostics, example `E:4/14 W:1/7`\n* include highlighting groups\n* disable specific types of diagnostics, example output only includes errors and warnings and not hints and info\n\n### Expected behavior\n\nUsers are able to customise the output to include workplace diagnostics; include highlighting groups, and disable specific types of diagnostics from output\n\nDo we want all of the above? Are there other features that should be included?",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> disable specific types of diagnostics, example output only includes errors and warnings and not hints and info\n\nnot a priority, but the first step to allow any customization (include the output string itself) is to think about how we can provide a \"hook\" that users can override. probably as a callback like `vim.diagnostic.status(..., fmt: fun())` (and users would need to put this in their 'statusline').\n\n> include workspace diagnostics, example `E:4/14 W:1/7`\n\nseems useful.\n\nhighlighting may also allow us to drop the \":\" colon.",
            "created_at": "2025-08-03T21:37:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3148714384",
            "id": 3148714384,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM67rZGQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148714384/reactions"
            },
            "updated_at": "2025-08-03T21:37:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148714384",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> how we can provide a \"hook\" that users can override. probably as a callback\n\nInteresting idea, I have not considered a callback.\n\nMy initial idea was to have an options param `diagnostic.status(buf, opts)` similar to `diagnostic.open_float`. This could also be expanded to set options in `vim.diagnostic.config`. Though, I do see having an option per each of these to be less customisable opposed to allowing providing a callback that formats the diagnostics in a preferred way.\n\nOne caveat with a callback is with todays ergonomics it is a more complex task as users would either need to inline it in the statusline (most awkward) or make a global function like `_G.my_diagnostic_status = fun()` and to use it in their statusline.\n\nIMHO an ergonomic way is to set it in the vim.diagnostic.config if it's an option.",
            "created_at": "2025-08-03T22:33:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3148742626",
            "id": 3148742626,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM67rf_i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148742626/reactions"
            },
            "updated_at": "2025-08-03T22:33:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148742626",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\n> One caveat with a callback is with todays ergonomics it is a more complex task as users would e\n\nwell we need to solve that, or users will just need to deal with it for now. need to avoid tons of options ",
            "created_at": "2025-08-03T22:39:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3148745254",
            "id": 3148745254,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM67rgom",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148745254/reactions"
            },
            "updated_at": "2025-08-03T22:39:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148745254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "+1 for a `vim.diagnostic.config.status` field. The use of vim.diagnostic.config is well-documented and works incredibly well with accounting for both status-specific diagnostics config and global diagnostics config. It can have a `format` field, just like `vim.diagnostic.Opts.VirtualText` has. ",
            "created_at": "2025-08-04T11:42:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3150267081",
            "id": 3150267081,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM67xULJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3150267081/reactions"
            },
            "updated_at": "2025-08-04T11:44:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3150267081",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "How about making the individual counts available in a form easily integrateable into a custom `statusline` format string instead of making `vim.diagnostic.status` itself configurable? \n\n",
            "created_at": "2025-08-06T16:41:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3160857670",
            "id": 3160857670,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM68ZtxG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3160857670/reactions"
            },
            "updated_at": "2025-08-06T16:41:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3160857670",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "After giving this some thought I am not clear on the best path to proceed here. We have 3 mentioned paths forward\n\n1. **Format callback `vim.diagnostic.status(..., fmt: fun())`**: This would be the most flexible solution, allowing users full control over the output. As highlighted above, today the economics of passing a callback in a statusline expression are not great, though we can also allow setting this in `diagnostic.config`. I can see this being useful for cases where users are happy with the default statusline and want to slightly tweak the format. For anything too advanced it might be easier to write a custom function and bypass `diagnostic.status` entirely as `diagnostic.status()` becomes a wrapper around a user-provided function passing it `diagnostic.count(0)`. For this reason I am hesitant to suggest this approach.\n2. **Format options `vim.diagnostic.status(..., format: { ... })`**: This is least flexible and most opinionated, allows user to provide a minimal set of options. Which can include selecting diagnostic level to display, setting statusline specific characters, etc.\n3. **Introducing a new statusline item for each diagnostic level**: Proposed by @mfussenegger . This feels like a more ergonomic and native to statusline format. If we decide to go with this option, the statusline expression for diagnostics can look similar to `\"E:%de W:%dw I:%di H:%dh\"` where `%de` is diagnostic error count and so on. I do not mind what the exact names we can settle. This option solves the problem for users to select which kind of diagnostics they want to display. I can see it often require to use item groups `%(E:%de %)` for spacing and then highlights.\n\nMaking a choice here comes down to what exactly do we want as we have the based use case covered already with either `diagnostic.status()` or if we decide to move to statusline items. I guess the choice comes to\n* we want to make the common things easy and for others its to the user (option 2)\n* \"bring your own complexity\" for any customisation i.e. any customisation is on user (option 1 or 3)\n\nInterested to see what others think about this",
            "created_at": "2025-08-18T23:39:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3198727273",
            "id": 3198727273,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM6-qLRp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3198727273/reactions"
            },
            "updated_at": "2025-08-18T23:39:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3198727273",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The \"workspace diagnostics `E:4/14 W:1/7`\" isn't blocked, right? Don't need to decide everything at once.",
            "created_at": "2025-08-19T02:09:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3198976989",
            "id": 3198976989,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM6-rIPd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3198976989/reactions"
            },
            "updated_at": "2025-08-19T02:09:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3198976989",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This depends on whether we want to have workplace diagnostics on by default or behind an option. I am not aware of other editors or IDEs that have it on by default so I am more inclined to have it behind an option. The option might not be needed if we decide to go with new statusline items and ditch `diagnostic.status()`. For this reason I think deciding on the general approach first should be preferred and then we can triage how we want to handle options or formatting if needed.",
            "created_at": "2025-08-19T23:56:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3203181239",
            "id": 3203181239,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM6-7Kq3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3203181239/reactions"
            },
            "updated_at": "2025-08-19T23:56:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3203181239",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> 3\\. **Introducing a new statusline item for each diagnostic level**\n\nA downside I see with this approach is that without any diagnostics set this would draw `E:0 W:0 I:0 H:0`. Personally I like zero counts to remain hidden and thus don't draw any unneeded items in the statusbar. I can imagine this is the same for others i.e. when they don't have an LSP client configured.\n\nOfcourse unless there is a way to resolve this.",
            "created_at": "2025-08-20T07:24:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3204547202",
            "id": 3204547202,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM6_AYKC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3204547202/reactions"
            },
            "updated_at": "2025-08-20T07:24:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3204547202",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/214730?v=4",
                "events_url": "https://api.github.com/users/dietrichm/events{/privacy}",
                "followers_url": "https://api.github.com/users/dietrichm/followers",
                "following_url": "https://api.github.com/users/dietrichm/following{/other_user}",
                "gists_url": "https://api.github.com/users/dietrichm/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dietrichm",
                "id": 214730,
                "login": "dietrichm",
                "node_id": "MDQ6VXNlcjIxNDczMA==",
                "organizations_url": "https://api.github.com/users/dietrichm/orgs",
                "received_events_url": "https://api.github.com/users/dietrichm/received_events",
                "repos_url": "https://api.github.com/users/dietrichm/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dietrichm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dietrichm/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dietrichm",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> A downside I see with this approach is that without any diagnostics set this would draw E:0 W:0 I:0 H:0\n\nWas thinking this too. I feel that changing the format with a function is more flexible and modern. We however could have a new statusline item that is defined as the result of the vim.diagnostic.status() function. ",
            "created_at": "2025-08-20T09:44:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3205232536",
            "id": 3205232536,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM6_C_eY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3205232536/reactions"
            },
            "updated_at": "2025-08-20T09:44:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3205232536",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> A downside I see with this approach is that without any diagnostics set this would draw E:0 W:0 I:0 H:0\n\nOne could still use expressions in the statusline definition to check the value. E.g. I also have something like: `\"%{&ff!='unix'?'['.&ff.'] ':''}\",`\n\nBut if new statusline items are added, it raises the question if `status()` should be removed again and if the default statusline definition should simply use those items.\n\nAnother alternative to dedicated statusline items would be to maintain buffer/global variables for the counts (`b:diagnostic_errors`) - they could then be used via `%{...}`\n\n---\n\nAside from that, just to recap, this is one variant how the counts can currently already be customized:\n\n```vimscript\nset statusline=%!v:lua.require'myconfig'.statusline()\n```\n\n```lua\nfunction M.statusline()\n  local parts = {\n    -- regular statusline definition goes here\n  }\n  local counts = vim.diagnostic.count(0)\n  local num_errors = counts[vim.diagnostic.severity.ERROR] or 0\n  if num_errors > 0 then\n    vim.list_extend(parts, {\" E \", tostring(num_errors), \" \"})\n  end\n  return table.concat(parts, '')\nend\n```\n\nAny proposed addition should probably be easier than that to make it worthwhile.\n",
            "created_at": "2025-08-20T10:10:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/35152#issuecomment-3205352525",
            "id": 3205352525,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35152",
            "node_id": "IC_kwDOAPphoM6_DcxN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3205352525/reactions"
            },
            "updated_at": "2025-08-20T10:33:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3205352525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 11,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35152/comments",
    "created_at": "2025-08-03T21:18:44Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35152/events",
    "html_url": "https://github.com/neovim/neovim/issues/35152",
    "id": 3287547244,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35152/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 738,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 631,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-08-26T02:25:08Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM7D8_1s",
    "number": 35152,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35152/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35152/timeline",
    "title": "diagnostic.status() enhancements",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-08-20T10:33:23Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35152",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
        "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
        "followers_url": "https://api.github.com/users/antonk52/followers",
        "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
        "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/antonk52",
        "id": 5817809,
        "login": "antonk52",
        "node_id": "MDQ6VXNlcjU4MTc4MDk=",
        "organizations_url": "https://api.github.com/users/antonk52/orgs",
        "received_events_url": "https://api.github.com/users/antonk52/received_events",
        "repos_url": "https://api.github.com/users/antonk52/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/antonk52",
        "user_view_type": "public"
    }
}