{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I'm not asking for https://github.com/neovim/neovim/issues/304 , or even the \"refactoring regex matching to a swappable plugin\" suggestion within there. As much as I would love that, it seems to me that would either be a headache to plugin writers who'll need to check which style user has and duplicate their regexes, or end up splitting plugins into those usable with vim-regex and those that use PCRE. \n\nMy suggestion is to allow PCRE style regular expressions entirely optionally and distinctly from the existing vim-regex matching, so that mere mortals who do not grok vim-re can more easily write and edit regex matches in vim. It need not interfere with current syntax at all, and perhaps could be just functions like `pcre_match(str, pat)` (equivalent to `str =~ pat` except for using PCRE syntax in pat), and `pcre_substitute(str, pat, sub, flags)` (equivalent to `substitute`, with PCRE syntax in pat). \n\nCurrently, this can sort-of be achieved with external plugins like https://github.com/othree/eregex.vim using its `E2v` function that converts PCRE-regexes into vim-style regexes, but \n(1) it is an external dependency\n(2) there are load order issues - only those plugins that load after eregex.vim can use its functions, and crucially, users can't use it in vimrc itself unless you do something hacky like prefix every statement with `au VimEnter`. \n(3) perhaps most important of all, using `E2v` repeatedly means taking a potentially enormous performance hit, since every regex has to be first parsed character by character by eregex and then transformed into vim-regex textually, after which the actual matching begins. \n\nSo, having a PCRE engine within neovim directly and being able to use it by explicit choice would be a big usability improvement for a lot of us. \n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "> (2) there are load order issues - only those plugins that load after eregex.vim can use its functions, and crucially, users can't use it in vimrc itself unless you do something hacky like prefix every statement with au VimEnter. \n\n(This may amount to a nitpick since you also pointed out real issues, but...) any script—including your nvimrc—can invoke `:runtime! plugin/eregex.vim` to make its functions available.\n",
            "created_at": "2015-08-20T18:21:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-133107851",
            "id": 133107851,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzEwNzg1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/133107851/reactions"
            },
            "updated_at": "2024-06-10T11:25:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/133107851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/151598?v=4",
                "events_url": "https://api.github.com/users/noahfrederick/events{/privacy}",
                "followers_url": "https://api.github.com/users/noahfrederick/followers",
                "following_url": "https://api.github.com/users/noahfrederick/following{/other_user}",
                "gists_url": "https://api.github.com/users/noahfrederick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/noahfrederick",
                "id": 151598,
                "login": "noahfrederick",
                "node_id": "MDQ6VXNlcjE1MTU5OA==",
                "organizations_url": "https://api.github.com/users/noahfrederick/orgs",
                "received_events_url": "https://api.github.com/users/noahfrederick/received_events",
                "repos_url": "https://api.github.com/users/noahfrederick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/noahfrederick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/noahfrederick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/noahfrederick",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "To amplify here, the variation in RE patterns is one of the tough selling points for early-stage users. Maybe in the spirit of other sensible defaults that Neovim provides, defaulting to \"PCRE on the command line\" would be a good feature.\n",
            "created_at": "2016-09-30T22:04:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-250863209",
            "id": 250863209,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDg2MzIwOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250863209/reactions"
            },
            "updated_at": "2016-09-30T22:04:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250863209",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/127548?v=4",
                "events_url": "https://api.github.com/users/nyarly/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyarly/followers",
                "following_url": "https://api.github.com/users/nyarly/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyarly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyarly",
                "id": 127548,
                "login": "nyarly",
                "node_id": "MDQ6VXNlcjEyNzU0OA==",
                "organizations_url": "https://api.github.com/users/nyarly/orgs",
                "received_events_url": "https://api.github.com/users/nyarly/received_events",
                "repos_url": "https://api.github.com/users/nyarly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyarly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyarly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyarly",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@nyarly If you think this is not going to break scripts then you are wrong: writing `execute \"normal! v/abc\\n\"` or `/abc/,/def/write part` is perfectly legal. I doubt very much that there is a good (simple (easily maintainable and not containing a bunch of edge cases where it breaks unexpectedly), consistent and compatible) way to do this.\n",
            "created_at": "2016-09-30T22:13:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-250864572",
            "id": 250864572,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDg2NDU3Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250864572/reactions"
            },
            "updated_at": "2016-09-30T22:13:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250864572",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "This is why (and I'm not saying this is a simple home-run) I was suggesting that the toggle of behavior be contextual. A flag like `\\v` (per #3376) might be easiest to implement, but I wonder if a setting akin to `'gdefault'` to enable \"pcre mode for command line searches\" would make sense.\n\nI appreciate the compatibility issue in terms of scripts using `:normal` and I'm ignorant of the internals in this case, but if `:/` and `:s` knew whether they'd been entered at the command line, or if the appropriate setting were reset during script execution, that might address the situation you're raising, yes?  \n",
            "created_at": "2016-09-30T22:28:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-250866851",
            "id": 250866851,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDg2Njg1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250866851/reactions"
            },
            "updated_at": "2016-09-30T22:28:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250866851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/127548?v=4",
                "events_url": "https://api.github.com/users/nyarly/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyarly/followers",
                "following_url": "https://api.github.com/users/nyarly/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyarly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyarly",
                "id": 127548,
                "login": "nyarly",
                "node_id": "MDQ6VXNlcjEyNzU0OA==",
                "organizations_url": "https://api.github.com/users/nyarly/orgs",
                "received_events_url": "https://api.github.com/users/nyarly/received_events",
                "repos_url": "https://api.github.com/users/nyarly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyarly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyarly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyarly",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If someone writes a converter that parses pcre style expressions and returns vim-compatible expressions, and vice versa, for some subset of each, that might be worth including eventually. Someone needs to do it though.\r\n",
            "created_at": "2016-10-01T07:30:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-250898112",
            "id": 250898112,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDg5ODExMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250898112/reactions"
            },
            "updated_at": "2017-03-08T19:55:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250898112",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Is there documentation of the Lua interface somewhere? I've been stymied\ntrying to figure that piece out\n\nOn Sat, Oct 1, 2016, 05:02 Justin M. Keyes notifications@github.com wrote:\n\n> Lua would be ideal. I would discourage a C implementation.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/neovim/neovim/issues/3208#issuecomment-250908765, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAHyPJBzNgObJXKrENCOTHC04ur7dy3aks5qvkvCgaJpZM4FvVMc\n> .\n",
            "created_at": "2016-10-01T17:52:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-250926618",
            "id": 250926618,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDkyNjYxOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250926618/reactions"
            },
            "updated_at": "2021-09-23T12:47:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250926618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/127548?v=4",
                "events_url": "https://api.github.com/users/nyarly/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyarly/followers",
                "following_url": "https://api.github.com/users/nyarly/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyarly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyarly",
                "id": 127548,
                "login": "nyarly",
                "node_id": "MDQ6VXNlcjEyNzU0OA==",
                "organizations_url": "https://api.github.com/users/nyarly/orgs",
                "received_events_url": "https://api.github.com/users/nyarly/received_events",
                "repos_url": "https://api.github.com/users/nyarly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyarly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyarly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyarly",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@nyarly Writing a working two-way parser-translator can be done without ever touching the lua interface ;) However for reference, currently the [nvim lua-client](https://github.com/neovim/lua-client) is the only way to interact with nvim via lua. We're working on built-in lua support at #4411\n",
            "created_at": "2016-10-01T18:00:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-250927066",
            "id": 250927066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDkyNzA2Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250927066/reactions"
            },
            "updated_at": "2016-10-01T18:00:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/250927066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@nyarly In case you're doing this, it might be worth checking out the [eregex plugin](https://github.com/othree/eregex.vim) I linked to earlier. The code is in vimscript, but reading it might be useful for learning about those niggling corner cases that usually exist in conversions like this. \n",
            "created_at": "2016-10-05T17:19:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-251739879",
            "id": 251739879,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTczOTg3OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/251739879/reactions"
            },
            "updated_at": "2016-10-05T17:19:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/251739879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/28880?v=4",
                "events_url": "https://api.github.com/users/digital-carver/events{/privacy}",
                "followers_url": "https://api.github.com/users/digital-carver/followers",
                "following_url": "https://api.github.com/users/digital-carver/following{/other_user}",
                "gists_url": "https://api.github.com/users/digital-carver/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/digital-carver",
                "id": 28880,
                "login": "digital-carver",
                "node_id": "MDQ6VXNlcjI4ODgw",
                "organizations_url": "https://api.github.com/users/digital-carver/orgs",
                "received_events_url": "https://api.github.com/users/digital-carver/received_events",
                "repos_url": "https://api.github.com/users/digital-carver/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/digital-carver/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/digital-carver/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/digital-carver",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Just wanted to chime in that I've been using the eregex plugin for some time, and find it to be quite frustrating for a couple of reasons. It doesn't support the full regular expression syntax, yet still supports some vim regex, but not other vim regex. In short, it's a mess. I get that the standard behavior must be preserved for backwards compatibility and scripts, but some native support for proper PCRE matching would be great. Call me lazy for not wanting to learn vim regex, but PCRE is everywhere and pretty much the de facto standard",
            "created_at": "2017-03-08T19:49:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-285148696",
            "id": 285148696,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTE0ODY5Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/285148696/reactions"
            },
            "updated_at": "2024-06-10T11:24:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/285148696",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1179265?v=4",
                "events_url": "https://api.github.com/users/youngmit/events{/privacy}",
                "followers_url": "https://api.github.com/users/youngmit/followers",
                "following_url": "https://api.github.com/users/youngmit/following{/other_user}",
                "gists_url": "https://api.github.com/users/youngmit/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/youngmit",
                "id": 1179265,
                "login": "youngmit",
                "node_id": "MDQ6VXNlcjExNzkyNjU=",
                "organizations_url": "https://api.github.com/users/youngmit/orgs",
                "received_events_url": "https://api.github.com/users/youngmit/received_events",
                "repos_url": "https://api.github.com/users/youngmit/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/youngmit/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/youngmit/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/youngmit",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I get that the standard behavior must be preserved for backwards compatibility and scripts, \r\n\r\nIt's not only that. Vim regex has good features.\r\n\r\n> but some native support for proper PCRE matching would be great. \r\n\r\nThanks for the feedback. Please use [reactions](https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comments) feature to vote up the issue, instead of comments.",
            "created_at": "2017-03-08T20:00:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-285151703",
            "id": 285151703,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTE1MTcwMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/285151703/reactions"
            },
            "updated_at": "2017-03-08T20:03:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/285151703",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> @justinmk Just to confirm, should the `pcre <-> vim` regex conversions be implemented in C to be included in neovim, or are implementations in vimscript/lua/something else (via remote plugin interface) acceptable?\r\n\r\nMaybe is better to do a full `vimregex` -> PCRE compiler and then replace the regex backend, and then allow to use pcre direclty with a regex flag (as \\v for magic)  ",
            "created_at": "2019-02-15T09:27:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-463967826",
            "id": 463967826,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Mzk2NzgyNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/463967826/reactions"
            },
            "updated_at": "2019-02-15T09:27:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/463967826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2947276?v=4",
                "events_url": "https://api.github.com/users/leiserfg/events{/privacy}",
                "followers_url": "https://api.github.com/users/leiserfg/followers",
                "following_url": "https://api.github.com/users/leiserfg/following{/other_user}",
                "gists_url": "https://api.github.com/users/leiserfg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/leiserfg",
                "id": 2947276,
                "login": "leiserfg",
                "node_id": "MDQ6VXNlcjI5NDcyNzY=",
                "organizations_url": "https://api.github.com/users/leiserfg/orgs",
                "received_events_url": "https://api.github.com/users/leiserfg/received_events",
                "repos_url": "https://api.github.com/users/leiserfg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/leiserfg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/leiserfg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/leiserfg",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If someone writes a converter that parses pcre style expressions and returns vim-compatible expressions\r\n\r\nProof of concept PCRE to Vim regex converter (using LPeg): https://github.com/neovim/neovim/discussions/29199",
            "created_at": "2024-06-07T15:12:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/3208#issuecomment-2155041198",
            "id": 2155041198,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/3208",
            "node_id": "IC_kwDOAPphoM6Ac1Gu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 1,
                "hooray": 1,
                "laugh": 0,
                "rocket": 1,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2155041198/reactions"
            },
            "updated_at": "2024-06-10T11:25:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2155041198",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 12,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/3208/comments",
    "created_at": "2015-08-20T18:04:45Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/3208/events",
    "html_url": "https://github.com/neovim/neovim/issues/3208",
    "id": 102197109,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/3208/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWUxMDIxOTcxMDk=",
    "number": 3208,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 64,
        "-1": 1,
        "confused": 0,
        "eyes": 0,
        "heart": 9,
        "hooray": 2,
        "laugh": 1,
        "rocket": 0,
        "total_count": 77,
        "url": "https://api.github.com/repos/neovim/neovim/issues/3208/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/3208/timeline",
    "title": "PCRE regex support",
    "updated_at": "2025-01-17T16:19:02Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/3208",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/28880?v=4",
        "events_url": "https://api.github.com/users/digital-carver/events{/privacy}",
        "followers_url": "https://api.github.com/users/digital-carver/followers",
        "following_url": "https://api.github.com/users/digital-carver/following{/other_user}",
        "gists_url": "https://api.github.com/users/digital-carver/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/digital-carver",
        "id": 28880,
        "login": "digital-carver",
        "node_id": "MDQ6VXNlcjI4ODgw",
        "organizations_url": "https://api.github.com/users/digital-carver/orgs",
        "received_events_url": "https://api.github.com/users/digital-carver/received_events",
        "repos_url": "https://api.github.com/users/digital-carver/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/digital-carver/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/digital-carver/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/digital-carver",
        "user_view_type": "public"
    }
}