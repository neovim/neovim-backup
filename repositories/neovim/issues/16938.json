{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "## Feature description\r\n\r\nOne of the features I'd love to see in NeoVim is a nice looking test runner that works with multiple languages/frameworks and is well integrated with the rest of the editor. I have done a cursory search in the repo to check if there is already any open issues in this arena and I can find none. Please feel free to point me towards any existing discussions that I've missed.\r\n\r\nWhile I believe that the responsibility for some of this lies with the plugin community, I think the NVIM core could really benefit from an internal testing API (in the same way that [VSCode announced last year](https://code.visualstudio.com/api/extension-guides/testing) to help facilitate efforts in this area and avoid multiple plugins doing the same work.\r\n\r\nThe way I believe that this would work would be this\r\n\r\n* NeoVIM would provide a Lua API that provided a mechanism to register test projects, tests and associated metadata (ideally a predefined standard set of metadata), and to update the state of projects and tests. \r\n* When updated, this API would fire events to indicate it had been updated, and provide a mechanism for plugins to retrieve the metadata\r\n* This would act as an adapter layer, decoupling testing backends from test UX frontends, in the same spirit of the LSP\r\n* Further work might actually go as far as to build a nice UI on top of this layer; but that could equally be left to plugin authors\r\n\r\nNow I could probably (with enough time) write something like this as a plugin; but I believe that this should be included as part of the NeoVim core APIs to encourage it as a golden path for the community. I'm not entirely sure what it would look like yet (though I have some more specific ideas of my own), but I wanted to get a sense of whether there was an appetite for this, or if there has already been any work done.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "A short comment: While I'm sure it would be convenient to have this built-in, the question that needs to be answered is not \"can it be in core\" but \"why can (or should), for technical reasons, it not be a plugin?\"\r\n\r\nFor example, LSP profits greatly from having core protocol handling implemented in the C core. On the other hand, this is a reason why DAP is not being considered for core currently (which for me would be an even stronger candidate otherwise.)",
            "created_at": "2022-01-05T12:26:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/16938#issuecomment-1005643359",
            "id": 1005643359,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16938",
            "node_id": "IC_kwDOAPphoM478OZf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1005643359/reactions"
            },
            "updated_at": "2022-01-05T12:27:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1005643359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> an internal testing API (in the same way that [VSCode announced last year](https://code.visualstudio.com/api/extension-guides/testing)\r\n\r\nRelated issue: https://github.com/microsoft/vscode/issues/107467 \r\n\r\nFrom the vscode page:\r\n\r\n> Similar to Diagnostics, it's mostly up to the extension to control when tests are discovered\r\n\r\nThe idea is something like the Vim \"signs\" concept (+ Nvim \"diagnostics\"): markers that enable UI and functionality for workspace locations.\r\n\r\nI would expect LSP to cover this, if it doesn't already. Then one could use `vim.lsp.run_tests()`, `vim.lsp.get_tests()`, ...",
            "created_at": "2022-06-07T15:49:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/16938#issuecomment-1148852643",
            "id": 1148852643,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16938",
            "node_id": "IC_kwDOAPphoM5Eehmj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1148852643/reactions"
            },
            "updated_at": "2023-07-31T19:14:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1148852643",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Recenlty a new plugin (extensible framework for testing) has been gaining traction in the community [neotest](https://github.com/rcarriga/neotest). It leverages treesitter and even the debug adapter protocol (DAP). The main author seems to have a lot of experience in the subject since he's the autor of [vim-ultest](https://github.com/rcarriga/vim-ultest).",
            "created_at": "2022-06-09T23:50:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/16938#issuecomment-1151720628",
            "id": 1151720628,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16938",
            "node_id": "IC_kwDOAPphoM5Epdy0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1151720628/reactions"
            },
            "updated_at": "2022-06-09T23:50:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1151720628",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9699804?v=4",
                "events_url": "https://api.github.com/users/muniter/events{/privacy}",
                "followers_url": "https://api.github.com/users/muniter/followers",
                "following_url": "https://api.github.com/users/muniter/following{/other_user}",
                "gists_url": "https://api.github.com/users/muniter/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/muniter",
                "id": 9699804,
                "login": "muniter",
                "node_id": "MDQ6VXNlcjk2OTk4MDQ=",
                "organizations_url": "https://api.github.com/users/muniter/orgs",
                "received_events_url": "https://api.github.com/users/muniter/received_events",
                "repos_url": "https://api.github.com/users/muniter/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/muniter/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/muniter/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/muniter",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/16938/comments",
    "created_at": "2022-01-05T12:13:58Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/16938/events",
    "html_url": "https://github.com/neovim/neovim/issues/16938",
    "id": 1094289384,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "plugins and Vim \"pack\"",
            "id": 117905553,
            "name": "plugin",
            "node_id": "MDU6TGFiZWwxMTc5MDU1NTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/plugin"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/16938/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM5BOYfo",
    "number": 16938,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/16938/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/16938/timeline",
    "title": "run and discover tests in a project",
    "updated_at": "2025-01-17T15:59:35Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/16938",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/87009396?v=4",
        "events_url": "https://api.github.com/users/benwainwrightcinch/events{/privacy}",
        "followers_url": "https://api.github.com/users/benwainwrightcinch/followers",
        "following_url": "https://api.github.com/users/benwainwrightcinch/following{/other_user}",
        "gists_url": "https://api.github.com/users/benwainwrightcinch/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/benwainwrightcinch",
        "id": 87009396,
        "login": "benwainwrightcinch",
        "node_id": "MDQ6VXNlcjg3MDA5Mzk2",
        "organizations_url": "https://api.github.com/users/benwainwrightcinch/orgs",
        "received_events_url": "https://api.github.com/users/benwainwrightcinch/received_events",
        "repos_url": "https://api.github.com/users/benwainwrightcinch/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/benwainwrightcinch/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/benwainwrightcinch/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/benwainwrightcinch",
        "user_view_type": "public"
    }
}