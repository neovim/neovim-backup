{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\r\n\r\nDo we still think it was the right choice to make `vim.iter` handle arrays and general tables together? Could we consider splitting this (as Lua does with `pairs` and `ipairs`), so the right behaviour can be opted in appropriately so it is less confusing?\r\n\r\nE.g. I was experimenting with `vim.iter` today and wanted to port:\r\n\r\n```lua\r\n    local unmatched_msg = table.concat(\r\n      vim.tbl_map(function(v)\r\n        return string.format('    - %s', v.text or v)\r\n      end, spec),\r\n      '\\n'\r\n    )\r\n```\r\nwhich with `vim.iter` is:\r\n```lua\r\n    local unmatched_msg = vim.iter(lines):map(function(v)\r\n      return string.format('    - %s', v.text or v)\r\n    end):join('\\n')\r\n```\r\n\r\nHowever, it really wasn't obvious to me that the map function only takes a single argument, unlike `ipairs` which gives you both the index and the value.\r\n\r\nI know `vim.iter(pairs(t))` is a thing, but it's just an unnecessary footgun and `vim.iter()` behaving very differently depending on the shape of the keys seems problematic to me. The user may have a table that just happens to be indexed my integers but should be treated as a regular table, e.g. for a `table<id: integer, object: table>` type.\r\n\r\n### Expected behavior\r\n\r\nI propose that `vim.iter(t) == vim.iter(pairs(t))` and we add something like `vim.arrayiter(t)` so the specialized behaviour can be opted in. This would also allow us to:\r\n- remove the extra table allocation and scan. The user tells us how to iterate, we do not try to infer.\r\n- remove the polymorphic return type of `vim.iter()` thereby making all methods of `vim.iter(...)` have the same signature.\r\n\r\nOverall I think removing some of this extra smartness will simplify the mental model of `vim.iter` which for me is currently a bit overloaded.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "## Note: review https://github.com/neovim/neovim/issues/24746 before commenting here\r\n\r\nHaving a way to tell `vim.iter` \"treat this like a dict/list/array\" seems useful. This be a thin wrapper like `vim.iter.dict`/`vim.iter.list` (or `vim.dict`/`vim.list`) which just skips the \"sniffing\" logic of `vim.iter`.\r\n\r\n\r\n> it really wasn't obvious to me that the map function only takes a single argument, unlike `ipairs` which gives you both the index and the value.\r\n\r\nYeah, I also advocated for having the same signature for the callbacks, regardless of list vs dict. There were valid arguments for the current behavior, but I still prefer the predictable and consistent signature.",
            "created_at": "2024-05-23T11:27:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/28941#issuecomment-2126874713",
            "id": 2126874713,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28941",
            "node_id": "IC_kwDOAPphoM5-xYhZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2126874713/reactions"
            },
            "updated_at": "2024-05-23T11:28:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2126874713",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Yeah, I also advocated for having the same signature for the callbacks, regardless of list vs dict. There were valid arguments for the current behavior, but I still prefer the predictable and consistent signature.\r\n\r\nOk, so we can treat this orthogonally.\r\n\r\n> Having a way to tell vim.iter \"treat this like a dict/list/array\" seems useful. This be a thin wrapper like vim.iter.dict/vim.iter.list (or vim.dict/vim.list) which just skips the \"sniffing\" logic of vim.iter.\r\n\r\nI really think we should remove the sniffing logic entirely. `Iter` (with tables) and `ArrayIter` have different semantics and having some _magic_ logic decide the semantics for you isn't good design IMO. I really don't want to get hung up on having _one all knowing interface_, there's a reason Lua split these out into `ipairs` and `pairs`. It seems we've further added `array` which has some optimisations (that I don't think are documented btw, but I trust they are worth it).\r\n\r\nThe way I'm trying to model this is that `vim.iter(<function>)` is the main interface and `vim.iter(<table>)` is just a small convenience for `vim.iter(pairs(<table>))` and I think that's all it should be.\r\n\r\nAlternatively, we could change `vim.iter` to **only** accept a function and provide simple convenience wrappers:\r\n- `vim.iter.pairs(<table>)` -> `vim.iter(pairs(<table>))`\r\n- `vim.iter.ipairs(<table>)` -> `vim.iter(ipairs(<table>))` \r\n- `vim.iter.array(<table>)` -> `ArrayIter`\r\n\r\nIf I understand correctly, with this a user could add `local pairs = vim.iter.pairs` and it work as normal?\r\n\r\nA table like `{1,2,3,4, [-1] = 'value', key = 'other_value' }` should be valid in each, with a different desirable outcome depending on the context.",
            "created_at": "2024-05-23T11:54:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/28941#issuecomment-2126923530",
            "id": 2126923530,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28941",
            "node_id": "IC_kwDOAPphoM5-xkcK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2126923530/reactions"
            },
            "updated_at": "2024-05-23T13:47:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2126923530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> with this a user could add `local pairs = vim.iter.pairs` and it work as normal?\r\n\r\nNot in favor of that. It would be annoying if the builtin `pairs` is needed in the same module. And `vim.iter(pairs(..))` is perfectly reasonable.\r\n\r\n> I really don't want to get hung up on having _one all knowing interface_, there's a reason Lua split these out into `ipairs` and `pairs`.\r\n\r\nTo make progress, let's be very precise and concrete. Currently, we've identified that an opt-in is needed. Let's focus on that rather than more general statements about an \"all knowing interface\".",
            "created_at": "2024-05-23T12:55:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/28941#issuecomment-2127038659",
            "id": 2127038659,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28941",
            "node_id": "IC_kwDOAPphoM5-yAjD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2127038659/reactions"
            },
            "updated_at": "2024-05-23T12:55:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2127038659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Not in favor of that. It would be annoying if the builtin pairs is needed in the same module. And vim.iter(pairs(..)) is perfectly reasonable.\r\n\r\nIf so, then yes it's not a good idea. However, I don't think it would ever be needed. From what I can tell it's basically a drop in replacement with additional functionality (`:fold`, `:map`).\r\n\r\nI think we also need specialized versions so `:totable()` works properly. `vim.iter(pairs())` is indistinguishable from the general `vim.iter(<function>)`. Specifically, I think we want:\r\n\r\n- `vim.iter.pairs({1,2,3,nil,5,key=value}):totable() == {1,2,3,nil,5,key=value})`\r\n   - and generally `vim.iter.pairs(t):totable() == t`\r\n- `vim.iter.ipairs({1,2,3,nil,5,key=value}):totable() == {1,2,3})`\r\n- `vim.iter.array({1,2,3,nil,5,key=value}):totable()== {1,2,3,nil,5})` \r\n   - I think this is right? Or is it `{1,2,3,5}`?\r\n- `vim.iter(<function>)` generally returns `{ {v_1_1, v_1_2, ...}, {v_2_1, v_2_2, ...}, ...}` (as it does now)\r\n    - `vim.iter(pairs({1,2,3,nil,5,key=value})):totable() == {{1, 1}, {2, 2}, {3, 3}, {5, 5}, {key, value}}`\r\n    - `vim.iter(ipairs({1,2,3,nil,5,key=value})):totable() == {{1, 1}, {2, 2}, {3, 3}}`\r\n- `vim.iter(<table>)`:\r\n    - I don't know of a good choice here so my preference would be to not allow it. \r\n\r\nAnd overall we do not make any assumptions about how a table is expected to be iterated. Just like with `ipairs` and `pairs` it must be explicit.\r\n\r\n> To make progress, let's be very precise and concrete. Currently, we've identified that an opt-in is needed. Let's focus on that rather than more general statements about an \"all knowing interface\".\r\n\r\nOk, let's start with the removal/deprecation of the sniffing logic.",
            "created_at": "2024-05-23T13:21:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/28941#issuecomment-2127096185",
            "id": 2127096185,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28941",
            "node_id": "IC_kwDOAPphoM5-yOl5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2127096185/reactions"
            },
            "updated_at": "2024-05-23T13:25:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2127096185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> let's start with the removal/deprecation of the sniffing logic.\r\n\r\nStarting with an opt-in is much lower risk and more tractable. ",
            "created_at": "2024-05-23T13:27:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/28941#issuecomment-2127108946",
            "id": 2127108946,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28941",
            "node_id": "IC_kwDOAPphoM5-yRtS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2127108946/reactions"
            },
            "updated_at": "2024-05-23T13:27:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2127108946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28941/comments",
    "created_at": "2024-05-23T11:00:03Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28941/events",
    "html_url": "https://github.com/neovim/neovim/issues/28941",
    "id": 2312607293,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28941/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6J15Y9",
    "number": 28941,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28941/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28941/timeline",
    "title": "Split out `ArrayIter` from `vim.iter()`",
    "updated_at": "2025-01-17T15:26:52Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28941",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    }
}