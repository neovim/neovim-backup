{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\r\n\r\nWhen using \"unlimited\" persistent undo we generally have in the undofile the full logical information of the last version of a file (at least up to the last time I opened it in vim).\r\n\r\nSome `git` (and other) mishaps can delete the file or revert it to a different version which according to the **public neovim API** makes the undofile unusable. But it's only unusable if we consider the current copy to be the correct version of the file and thus needing to be a leaf in the undofile.\r\n\r\nHowever, \r\n\r\n1. if saved from the beginning of the life of the file. We could force reading the undo file from an empty file and recover the file entirely **and** with its undo history intact.\r\n2. Furthermore, even if we didn't keep the full undo history from the beginning (maybe such an issue already happened in the past, and so the undo history has effectively been truncated of everything before this date), replaying the undofile from an empty file will still give us the correct last version of the file and all the history we still have.\r\n3. *\r\n\r\n### Research\r\n\r\n- I have seen that you @chrisbra personally made a patch for exactly this at least 12 years ago for Vim which was aptly called [`:rundo!`](https://groups.google.com/g/vim_use/c/pOia0eB8ZWo/m/FmIQ4lUOPDIJ) to *force* reading the undofile.\r\n- I have found that you published another patch 3 years later to add [`:undorecover`](https://github.com/chrisbra/vim-mq-patches/blob/master/undorecover), which if I understood well has the same purpose but with a more polite way to \"force\" reading the undofile\r\n- I also noticed that the current [Vim Todo](https://vimhelp.org/todo.txt.html) still mentions *considering* adding the patch that is now 9 years old, meaning it hasn't been added.\r\n\r\nI haven't been able to find any more information on this topic online, nothing in issues for both projects.\r\n\r\nThat's the feature that I have most wished for since I literally started using Vim and personally feel like it would be an absolute life changer in the text editing space. We would virtually have an unlimited file undo history through the whole life of a file.\r\n\r\n### Question\r\n\r\nSo, my current question @chrisbra is, is there an equivalent patch I could use in neovim, quickly adapted from these patches, or would this now need a complete rewrite of the feature with the current state of the codebase, now a fork and 10 years in the future ? \r\n\r\nIf not, as a last resort, do you think it would possible to compile Vim rolled back to the commit in history when this patch was made (or even the current release if the patch could be adapted with a few changes), load the (1000 empty lines) file with my undofile (made with Nvim 0.9.2.2) and run `:rundo!` successfully recover my file to its last saved version, or did the codebases diverge too much since then to be of any use ?\r\n\r\nThanks a lot in advance, (I am trying to recover a precious file I know the corresponding undofile still has all the information in it.)\r\n\r\n\r\n\r\nPS: I've read the code around the definition of `u_read_undo` in both codebases (neovim and vim) and would be glad to try spending time at implementing I could be guided towards the right direction, I unfortunately am far from proficient enough in C to be able to tackle such a foundational and performance-needing feature by myself...\r\n\r\n*: I believe we could also even additionally add the observed current state when opening `nvim` as the new leaf in the undo tree right after the last saved state in order to continually use the undo history without any problem no matter what happens to the file, with losing the undofile itself being the only left risk.\r\n\r\n\r\n### Expected behavior\r\n\r\nRun `:rundo!` on a file with a corresponding undofile, and have the buffer modified to be in the last state saved in the undofile.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "It'd be nice to have a cli option to read unto files (and swp files) as well. Or if I'm able to reread it, maybe rundo() could be directed into a buffer or something.",
            "created_at": "2024-02-05T06:08:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/25690#issuecomment-1926293355",
            "id": 1926293355,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25690",
            "node_id": "IC_kwDOAPphoM5y0Odr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1926293355/reactions"
            },
            "updated_at": "2024-02-05T06:10:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1926293355",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1271615?v=4",
                "events_url": "https://api.github.com/users/ag4ve/events{/privacy}",
                "followers_url": "https://api.github.com/users/ag4ve/followers",
                "following_url": "https://api.github.com/users/ag4ve/following{/other_user}",
                "gists_url": "https://api.github.com/users/ag4ve/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ag4ve",
                "id": 1271615,
                "login": "ag4ve",
                "node_id": "MDQ6VXNlcjEyNzE2MTU=",
                "organizations_url": "https://api.github.com/users/ag4ve/orgs",
                "received_events_url": "https://api.github.com/users/ag4ve/received_events",
                "repos_url": "https://api.github.com/users/ag4ve/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ag4ve/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ag4ve/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ag4ve",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25690/comments",
    "created_at": "2023-10-17T17:48:40Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/25690/events",
    "html_url": "https://github.com/neovim/neovim/issues/25690",
    "id": 1947944263,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "issue is fixed in vim and patch needs to be ported",
            "id": 152276149,
            "name": "has:vim-patch",
            "node_id": "MDU6TGFiZWwxNTIyNzYxNDk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:vim-patch"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "save/restore editor state: shada, context, ctx",
            "id": 4449264023,
            "name": "editor-state",
            "node_id": "LA_kwDOAPphoM8AAAABCTJhlw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor-state"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/25690/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM50G0VH",
    "number": 25690,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 8,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 8,
        "url": "https://api.github.com/repos/neovim/neovim/issues/25690/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/25690/timeline",
    "title": "Force Read Undo File from beginning: Bring forth `:rundo!`",
    "updated_at": "2025-01-17T15:27:44Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/25690",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/77821695?v=4",
        "events_url": "https://api.github.com/users/adamency/events{/privacy}",
        "followers_url": "https://api.github.com/users/adamency/followers",
        "following_url": "https://api.github.com/users/adamency/following{/other_user}",
        "gists_url": "https://api.github.com/users/adamency/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/adamency",
        "id": 77821695,
        "login": "adamency",
        "node_id": "MDQ6VXNlcjc3ODIxNjk1",
        "organizations_url": "https://api.github.com/users/adamency/orgs",
        "received_events_url": "https://api.github.com/users/adamency/received_events",
        "repos_url": "https://api.github.com/users/adamency/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/adamency/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/adamency/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/adamency",
        "user_view_type": "public"
    }
}