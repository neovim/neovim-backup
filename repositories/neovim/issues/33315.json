{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nThere seems to be no way in pure lua to define a user command which opens a split that respects `:vertical` or `:horizontal`. Nor even a way to detect the use of `:vertical` or `:horizontal` from lua, as far as I'm aware. The `nvim_open_win` api function does not respect `:botright` and `:topleft` despite respecting `'splitright'` and `'splitbelow'`. As these are all meant to work together to let the user customise things, it seems like a missed opportunity to make this work. Currently, this seems to leave no way for lua user-defined or even plugin-defined commands to respect `:vertical`/`:horizontal`, making those commands less useful than they could be, especially as they're intended to combine with the other split modifiers. Of course at a push `vim.cmd.split` does the job, but then we lose the lua options, as well as the nice option of user functions passing config straight to `nvim_open_win` to customize window opening, so I'd assume it makes most sense to have one function to open windows.\n\n### Expected behavior\n\nIt would be nice if there were some way to ask `nvim_open_win` to respect `:vertical` or `:horizontal`, maybe to detect these from lua too for further scripting. Perhaps this could be the default if no particular kind of split is requested, without breakage as currently the function fails if `vertical` and `split` are omitted without asking for a float, but we could at least have a `split='respect'` config option or something similar. The doc for the `vertical` option already directly points to `:vertical`, so it seems very strange that there's no option for this.\n\nIf there is some obstacle to implementation in this function, shouldn't there at least be some way for the lua world to know if a command was modified by these?",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> Nor even a way to detect the use of `:vertical` or `:horizontal` from lua\n\nIt's possible via the `smods` passed to the Lua callback in `nvim_create_user_command`, though I think at the moment you'd need to figure out which `opts` to pass to `nvim_open_win` yourself.\n\nE.g, maybe something like the following (though I haven't tested it much; assumes `:horizontal` as the default direction):\n\n```lua\nvim.api.nvim_create_user_command(\"Foo\", function(args)\n  local opts = {}\n  if args.smods.split == \"belowright\" then\n    opts.split = args.smods.vertical and \"right\" or \"below\"\n  elseif args.smods.split == \"aboveleft\" then\n    opts.split = args.smods.vertical and \"left\" or \"above\"\n  elseif args.smods.split == \"botright\" then\n    opts.split = args.smods.vertical and \"right\" or \"below\"\n    opts.win = -1\n  elseif args.smods.split == \"topleft\" then\n    opts.split = args.smods.vertical and \"left\" or \"above\"\n    opts.win = -1\n  else\n    opts.vertical = args.smods.vertical  -- (respects `&splitbelow`, `&splitright`)\n  end\n\n  vim.api.nvim_open_win(0, true, opts)\nend, {})\n```\n\nThough it's rather hideous.",
            "created_at": "2025-04-04T17:00:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/33315#issuecomment-2779298045",
            "id": 2779298045,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33315",
            "node_id": "IC_kwDOAPphoM6lqLj9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2779298045/reactions"
            },
            "updated_at": "2025-04-04T17:05:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2779298045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Somehow I ended up thinking that `botright`, `topleft`, etc worked lol, clearly messed up my quick playing about with that. Didn't know about the `smods` stuff, thanks, so definitely *possible* to respect it if you try hard enough, I agree it's hideous though. I guess that can be hidden away in a utility function though.\n\n~~I was also thinking though, that even being able to know the modifiers, while better, might not be the best solution, since this won't help if the splitting happens deep in another lua function far away from the command definition. The user would need to pass this information through each function of the code. That said, the only way to solve that case would probably be to have the likes of `:vertical` and `:topleft` set and restore some global state or something like that, which feels incredibly hacky.~~\n\nEdit: okay, seems I didn't realise that mods don't propagate even in vimscript lol ðŸ˜†, yeah so I guess a simple utility to map these to opts resolves this unless there's a massive rewrite. Still, that should probably be documented somewhere, a lot of the docs of modifiers are written as though they're expected to propagate.\n\nEdit 2: okay, some of the modifiers *do* propagate, e.g. `:silent`, but there's no indication in docs of which ones do or not. This seems messy, and the docs definitely don't reflect that.",
            "created_at": "2025-04-04T22:02:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/33315#issuecomment-2779801005",
            "id": 2779801005,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33315",
            "node_id": "IC_kwDOAPphoM6lsGWt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2779801005/reactions"
            },
            "updated_at": "2025-04-04T22:55:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2779801005",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7932999?v=4",
                "events_url": "https://api.github.com/users/jamesb6626/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamesb6626/followers",
                "following_url": "https://api.github.com/users/jamesb6626/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamesb6626/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamesb6626",
                "id": 7932999,
                "login": "jamesb6626",
                "node_id": "MDQ6VXNlcjc5MzI5OTk=",
                "organizations_url": "https://api.github.com/users/jamesb6626/orgs",
                "received_events_url": "https://api.github.com/users/jamesb6626/received_events",
                "repos_url": "https://api.github.com/users/jamesb6626/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamesb6626/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamesb6626/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamesb6626",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33315/comments",
    "created_at": "2025-04-04T16:04:33Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33315/events",
    "html_url": "https://github.com/neovim/neovim/issues/33315",
    "id": 2972823834,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "viewport, scrolling, window",
            "id": 8375980619,
            "name": "window",
            "node_id": "LA_kwDOAPphoM8AAAAB8z9SSw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/window"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33315/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6xMbEa",
    "number": 33315,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33315/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33315/timeline",
    "title": "`nvim_open_win` should optionally respect `:vertical`/`:horizontal` if possible",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-04T22:55:49Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33315",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7932999?v=4",
        "events_url": "https://api.github.com/users/jamesb6626/events{/privacy}",
        "followers_url": "https://api.github.com/users/jamesb6626/followers",
        "following_url": "https://api.github.com/users/jamesb6626/following{/other_user}",
        "gists_url": "https://api.github.com/users/jamesb6626/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jamesb6626",
        "id": 7932999,
        "login": "jamesb6626",
        "node_id": "MDQ6VXNlcjc5MzI5OTk=",
        "organizations_url": "https://api.github.com/users/jamesb6626/orgs",
        "received_events_url": "https://api.github.com/users/jamesb6626/received_events",
        "repos_url": "https://api.github.com/users/jamesb6626/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jamesb6626/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jamesb6626/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jamesb6626",
        "user_view_type": "public"
    }
}