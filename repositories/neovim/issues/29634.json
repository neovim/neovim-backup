{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nCurrently you can launch a remote server with `--headless --listen addr:port`, and later connect an UI like Neovide to it, which is good. But the problem is that Neovim does not wait for the UI to attach and proceeds to load the init files immediately. This is problematic because the user might have conditional customization in the init files, for example `if vim.g.neovide`, which will never run.\r\n\r\nWe, the maintainers of Neovide, have always assumed that `--headless` waits for the UI to attach, so that's what we have been suggesting in the documentation. But as part of investigating bugs like https://github.com/neovide/neovide/issues/2620, https://github.com/neovide/neovide/issues/1868 I found that to not be the case. It's also not a bug, since the behaviour is clearly documented in the documentation (but not the commandline help).\r\n\r\nhttps://github.com/neovim/neovim/pull/25709 (Neovim 0.10) added support for `--embed --listen addr:port`, which waits for the UI to attach. But that is only suitable as a workaround at best, since it also captures the stdin. Another hacky workaround is to do the GUI specific configuration in `UIEnter`, but that's too late due to https://github.com/neovim/neovim/issues/25377, and things like font's should definitely be set before anything is drawn on the screen.\r\n\n\n### Expected behavior\n\nPreferably `--headless --listen addr:port`, should always wait for an UI to attach, at least I can't think of any use cases for the current behavour. \r\n\r\nBut if that's not possible, a new command line parameter should be added to make the startup wait for an UI to attach.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "The [approach I took in Firenvim](https://github.com/glacambre/firenvim/blob/master/autoload/firenvim.vim#L713) is to add a bunch of `--cmd` switches to perform UI-specifc initialization. Would having Neovide add `--cmd 'source /path/to/neovide-init.lua'` to the arguments it passes to Neovim be an acceptable solution?",
            "created_at": "2024-07-10T14:39:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2220698232",
            "id": 2220698232,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EXSp4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2220698232/reactions"
            },
            "updated_at": "2024-07-10T14:45:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2220698232",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4",
                "events_url": "https://api.github.com/users/glacambre/events{/privacy}",
                "followers_url": "https://api.github.com/users/glacambre/followers",
                "following_url": "https://api.github.com/users/glacambre/following{/other_user}",
                "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glacambre",
                "id": 11534587,
                "login": "glacambre",
                "node_id": "MDQ6VXNlcjExNTM0NTg3",
                "organizations_url": "https://api.github.com/users/glacambre/orgs",
                "received_events_url": "https://api.github.com/users/glacambre/received_events",
                "repos_url": "https://api.github.com/users/glacambre/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glacambre",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@glacambre using `--cmd` flags might work, but it feels slightly like a hack in this case, and I'm not sure it's the most general solution.\r\n\r\nI can't speak on behalf of the neovide maintainers, but I also don't think sourcing a custom startup file would work in all cases. Currently, neovide allows you to customize _any_ section of the config by simply checking if the global `vim.g.neovide` variable is set. This allows both adding configuration for the GUI, and preventing terminal specific configurations from running.\r\n\r\nUsing `--cmd` flags helps out with adding configuration when launching the GUI, but it doesn't handle preventing other code from running.",
            "created_at": "2024-07-10T20:10:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2221345659",
            "id": 2221345659,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EZwt7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221345659/reactions"
            },
            "updated_at": "2024-09-17T09:52:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221345659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17417793?v=4",
                "events_url": "https://api.github.com/users/cosmicboots/events{/privacy}",
                "followers_url": "https://api.github.com/users/cosmicboots/followers",
                "following_url": "https://api.github.com/users/cosmicboots/following{/other_user}",
                "gists_url": "https://api.github.com/users/cosmicboots/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cosmicboots",
                "id": 17417793,
                "login": "cosmicboots",
                "node_id": "MDQ6VXNlcjE3NDE3Nzkz",
                "organizations_url": "https://api.github.com/users/cosmicboots/orgs",
                "received_events_url": "https://api.github.com/users/cosmicboots/received_events",
                "repos_url": "https://api.github.com/users/cosmicboots/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cosmicboots/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cosmicboots/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cosmicboots",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@cosmicboots I'm not sure I understand what you mean. I'm suggesting adding `--cmd 'let g:neovide = true'` to the arguments Neovide passes to nvim. As the [docs](https://neovim.io/doc/user/starting.html#--cmd) explain, this piece of code will be executed before any vimrc/init.vim is executed - thus `g:neovide` would be defined when the vimrc is executed, and users could use `if exists('g:neovide') && g:neovide` in order to gate their configuration. Gating is even nicer in lua since undefined variables will be nil, which is falsy.",
            "created_at": "2024-07-10T20:22:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2221371062",
            "id": 2221371062,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EZ262",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221371062/reactions"
            },
            "updated_at": "2024-09-17T13:17:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221371062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4",
                "events_url": "https://api.github.com/users/glacambre/events{/privacy}",
                "followers_url": "https://api.github.com/users/glacambre/followers",
                "following_url": "https://api.github.com/users/glacambre/following{/other_user}",
                "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glacambre",
                "id": 11534587,
                "login": "glacambre",
                "node_id": "MDQ6VXNlcjExNTM0NTg3",
                "organizations_url": "https://api.github.com/users/glacambre/orgs",
                "received_events_url": "https://api.github.com/users/glacambre/received_events",
                "repos_url": "https://api.github.com/users/glacambre/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glacambre",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@glacambre,\r\n\r\nThe use case here is to launch a remote Neovim instance, which you can later connect to using `neovide --server host:port`\r\n\r\nIt feels quite hacky to let the user start the instance with `nvim --headless --listen --cmd 'let g:neovide = true`, since neovide is supposed to be set by Neovide itself and not by the user.\r\n\r\nAnd it does also not cover all the cases. Right now, it's mostly OK; the checks in the user configuration are not really needed, since Neovide is configured using global variables (https://neovide.dev/configuration.html), so they can be set no matter if Neovide is connected or not. They are typically only needed for doing something else when Neovide is *not* running, or for configuring standard Neovim options based on the configuration.\r\n\r\nBut we probably want to add custom commands and functions that can be run during the configuration stage at some point, perhaps a traditional `setup` function or something else, since the flat variable list is not really extendible enough for what we have been planning. Some options were discussed here https://github.com/neovim/neovim/issues/12544, and they all require that Neovide, or at least some Neovide plugin is running when the init file is parsed. And having a separate plugin that needs to be in sync with Neovide sounds like a nightmare for the users.\r\n\r\nSo as far as I see it, the absolutely cleanest solution is to have a parameter that waits at the startup, just like `--embed` does. That way the GUI can add its own configuration before the user init file is parsed.",
            "created_at": "2024-07-10T20:52:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2221436970",
            "id": 2221436970,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EaHAq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221436970/reactions"
            },
            "updated_at": "2024-07-10T20:52:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221436970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ah, okay, I understand better now. On a philosophical level, I'm against this proposal - as you said in the OP, there's already `UIEnter` to do this, and it's strictly better than setting things in init.vim/init.lua based on whether a global variable is defined, since it'll work when multiple GUIs connect to a same Neovim instance or when a same UI connects and disconnects to the same instance multiple times.\r\n\r\nHowever, on a practical level, I must admit that in my experience users clearly don't understand `UIEnter` and don't want to learn anything more than global variables. Moreover, aside from combining noice.nvim and another GUI, there has been very little use of combined GUIs, despite this being possible since the inception of Neovim's UI protocol. Finally, I must admit that having a better way to delay sourcing of the user's init.vim/init.lua would likely have helped me a lot with Firenvim. So in the end, I'd say this change would indeed be a very worthwhile improvement to Neovim.\r\n\r\nYet another case of worse is better I guess :)",
            "created_at": "2024-07-11T06:46:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2222160975",
            "id": 2222160975,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6Ec3xP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222160975/reactions"
            },
            "updated_at": "2024-09-17T13:16:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222160975",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4",
                "events_url": "https://api.github.com/users/glacambre/events{/privacy}",
                "followers_url": "https://api.github.com/users/glacambre/followers",
                "following_url": "https://api.github.com/users/glacambre/following{/other_user}",
                "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glacambre",
                "id": 11534587,
                "login": "glacambre",
                "node_id": "MDQ6VXNlcjExNTM0NTg3",
                "organizations_url": "https://api.github.com/users/glacambre/orgs",
                "received_events_url": "https://api.github.com/users/glacambre/received_events",
                "repos_url": "https://api.github.com/users/glacambre/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glacambre",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`--headless` kinda implies that an UI is _not_ expected (cf `--embed` with `--embed --headless`) so if we support this specific pattern a different flag would be preferable. ",
            "created_at": "2024-07-11T08:20:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2222322016",
            "id": 2222322016,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EdfFg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222322016/reactions"
            },
            "updated_at": "2024-07-11T08:20:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222322016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@glacambre,\r\n\r\n`UIEnter` is not really an option since it's not guaranteed to be called before the UI is rendered. For example, `lazy.nvim` draws its UI completely before `UIEnter`. Many error messages are also displayed before that. So, if you set for example the `guifont` there, the initial window size and font will be wrong. See https://github.com/neovim/neovim/issues/25377\r\n\r\nSo, for this reason in Neovide, we assume that all the options are valid when the screen is drawn for the first time and the first flush message is received. We delay showing our UI window until that point.",
            "created_at": "2024-07-11T08:56:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2222391878",
            "id": 2222391878,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EdwJG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222391878/reactions"
            },
            "updated_at": "2024-07-11T08:56:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222391878",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">> Preferably `--headless --listen addr:port`, should always wait for an UI to attach,\r\n>\r\n> `--headless` kinda implies that an UI is _not_ expected\r\n\r\nShould we add a flag that sets a mode where Nvim pauses startup until some sort of global function `init()` is called? Then when a UI, or whatever else, connects, it can call `init()` when it's ready. That avoids needing more flags for the various permutations of scenarios. Or maybe there aren't more scenarios after this one? :)\r\n\r\nOTOH, isn't this already possible by starting with `nvim --clean`? Then the UI can source the user's runtime. Maybe we need to make that more ergonomic though.",
            "created_at": "2024-09-02T20:02:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2325256528",
            "id": 2325256528,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6KmJlQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2325256528/reactions"
            },
            "updated_at": "2024-09-02T20:04:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2325256528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`--clean --headless --listen addr:port` could work, if we have an api function to trigger the configuration loading using the correct runtime paths, takiing everything into account, like `NVIM_APP` set on the remote for example. But it also needs an extra argument to `neovide` to enable this behavior, we don't know if the remote server has loaded the configuration or not, without the user telling us.\r\n\r\nAnother option is to fix `UIEnter`, so that can be used for the UI specific configuration.\r\n\r\nCurrently, that's not a viable option for Neovide in the general case, since the screen is drawn before that using the wrong configuration  like wrong fonts, causing redraws and flickering.\r\n\r\n* https://github.com/neovim/neovim/issues/25377",
            "created_at": "2024-09-17T06:51:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2354692129",
            "id": 2354692129,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MWcAh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2354692129/reactions"
            },
            "updated_at": "2024-09-17T06:51:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2354692129",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But it also needs an extra argument to `neovide` to enable this behavior, we don't know if the remote server has loaded the configuration or not, without the user telling us.\r\n\r\nIf the server wasn't started by the UI (e.g. neovide) then of course it wouldn't wait for the UI. I don't see how that's relevant here. And even if it did, another UI may connect later...\r\n\r\n\r\n\r\n\r\n> Another option is to fix `UIEnter`\r\n\r\nLet's start with that. I reviewed https://github.com/neovim/neovim/issues/25377 again, and I don't see what is blocking us from redefining the behavior of UIEnter. See https://github.com/neovim/neovim/issues/25377#issuecomment-2355084760",
            "created_at": "2024-09-17T09:51:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355104948",
            "id": 2355104948,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MYAy0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355104948/reactions"
            },
            "updated_at": "2024-09-17T13:15:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355104948",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> If the server wasn't started by the UI (e.g. neovide) then of course it wouldn't wait for the UI. I don't see how that's relevant here. And even if it did, another UI may connect later...\r\n\r\nThat's the problem here, Neovide can't start the server on a remote machine, just connect to it. So, we need a way to make that server wait for the connection.\r\n\r\nAnd, even if we added ssh support for example, it would still not cover any case where you login to the remote some other way to start it.",
            "created_at": "2024-09-17T10:38:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355268499",
            "id": 2355268499,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MYouT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355268499/reactions"
            },
            "updated_at": "2024-09-17T10:38:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355268499",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> That's the problem here, Neovide can't start the server on a remote machine, just connect to it. So, we need a way to make that server wait for the connection.\r\n\r\nThat case, by definition, happens after `VimEnter`, and indeed the server may be a long-lived session. Why would it need to wait for a UI to attach? And what if another UI already attached?\r\n\r\n*Assume* that UI \"A\" *already* attached, and now Neovide (UI \"B\", the \"incoming\" UI) also wants to attach. The incoming UI may set `:help ui-override`, and may also override various other editor options that affect UI. What's missing from that scenario?",
            "created_at": "2024-09-17T11:43:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355465305",
            "id": 2355465305,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MZYxZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355465305/reactions"
            },
            "updated_at": "2024-09-17T12:47:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355465305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Proposal\n\n> #25709 (Neovim 0.10) added support for `--embed --listen addr:port`, which waits for the UI to attach.\n\n1. We could make `--remote-ui` (without `--server`) wait for a UI.\n    - (That \"inverts\" the meaning of `--remote-ui`, but maybe the current `--remote-ui` isn't needed: `nvim --server` should always start a UI unless `--headless` is provided? This is a UX question, doesn't block the above suggestion.)\n2. **[Alternative](https://github.com/neovim/neovim/issues/29634#issuecomment-2422234572):** allow `--embed` stdio channel to detach without forcing Nvim to exit.",
            "created_at": "2024-09-17T12:05:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355527810",
            "id": 2355527810,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MZoCC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355527810/reactions"
            },
            "updated_at": "2025-04-02T14:52:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355527810",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The problem is described in the original message.\r\n\r\nThe user has something like this in the configuration, but it does not get applied due to `vim.g.neovide` not being set. There's no way to set it from neovide before the user configuration is run, unless it waits for the UI to attach first.\r\n\r\n```lua\r\nif vim.g.neovide then\r\n   vim.g.neovide_transparency = 0.8\r\nend\r\n```\r\n\r\nThis is not a very big problem currently, since all our configuration is done with global variables, so they can be set regardless of `vim.g.neovide` being set or not. \r\n\r\nBut the use of just global variables is starting to become limited. The dictwatcher approach that we are currently using only supports watching at the top level. So, if we want advanced font configuration for example, using user commands or functions like `neovide_set_font()`, then it would not work. More discussion about that here https://github.com/neovim/neovim/issues/12544. \r\n\r\nI'm not very concerned about being able to attach multiple different UIs at this point, especially not of different types. Although it would be nice to have support for that as well. Currently even the simple case of detaching neovide and attaching again is quite broken, much of the multigrid state is not properly synchronized, and I assume that it will take a lot of work to make that possible, let alone attaching several UIs at different times. \r\n\r\n",
            "created_at": "2024-09-17T12:09:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355540140",
            "id": 2355540140,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MZrCs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355540140/reactions"
            },
            "updated_at": "2024-09-17T12:09:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355540140",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The user has something like this in the configuration, but it does not get applied due to `vim.g.neovide` not being set.\r\n\r\nBut Neovide didn't start the server, so why would anyone expect neovide globals to be set during startup? Of course `UIEnter` is required to handle when a UI attaches. \r\n\r\n> Currently even the simple case of detaching neovide and attaching again is quite broken, much of the multigrid state is not properly synchronized\r\n\r\nThen let's fix that. Meanwhile, I haven't seen any issues with reattaching the TUI (including multiple clients)...",
            "created_at": "2024-09-17T12:13:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355552345",
            "id": 2355552345,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MZuBZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355552345/reactions"
            },
            "updated_at": "2024-09-17T12:15:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355552345",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The dictwatcher approach that we are currently using only supports watching at the top level\r\n\r\nWhich is a limitation of the dictwatcher that should be fixed, no? Instead of worked around in increasingly byzantine constructions?",
            "created_at": "2024-09-17T12:15:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355559474",
            "id": 2355559474,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MZvwy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355559474/reactions"
            },
            "updated_at": "2025-04-02T14:49:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355559474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think we should enhance dictwatcher, but https://github.com/neovim/neovim/issues/12544#issuecomment-1116794687 is on the roadmap.",
            "created_at": "2024-09-17T12:23:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355584887",
            "id": 2355584887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MZ193",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355584887/reactions"
            },
            "updated_at": "2024-09-17T12:23:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355584887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well, whether it's by improving the builtin dictwatcher or adding a new Lua-only \"tablewatcher\" is secondary here; the point is that there's missing functionality that a) seems broadly desirable and b) would obviate a lot of the discussion here.\r\n\r\n(Personally, I absolutely agree that a modern Neovim GUI should communicate via a Lua API, not legacy Vimscript.)",
            "created_at": "2024-09-17T12:26:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355594357",
            "id": 2355594357,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MZ4R1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355594357/reactions"
            },
            "updated_at": "2024-09-17T12:27:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355594357",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The proposal in https://github.com/neovim/neovim/issues/29634#issuecomment-2355527810, sounds good to me. It's probably a lot easier to add than to fix `UIEnter`  to be called before anything is drawn.\r\n\r\n>> Currently even the simple case of detaching neovide and attaching again is quite broken, much of the multigrid state is not properly synchronized\r\n>\r\n>Then let's fix that. Meanwhile, I haven't seen any issues with reattaching the TUI (including multiple clients)...\r\n\r\nI will try to write some issues later today. But one of the biggest issues is that we can't render the UI the same way terminal Neovim, due to not having access to the full composition order. This means that we have to emulate it, which can only be done if we receive each window event in the correct order. Here's how it's done https://github.com/neovide/neovide/pull/2612. I briefly mentioned it here as well https://github.com/neovim/neovim/issues/29135\r\n\r\nThe other, probably easier to fix problem, is that the whole UI state needs to be sent to the UI when it connects. I will give some examples of what's missing when I write the issues.",
            "created_at": "2024-09-17T12:49:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355670279",
            "id": 2355670279,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MaK0H",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355670279/reactions"
            },
            "updated_at": "2024-09-17T12:49:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355670279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Pro tip: In these issues, focus on the Neovide side (i.e., specify exactly what _you_ need from _your_ side, independent of how you are _currently_ trying to achieve that) and leave the discussion on how _Neovim_ should implement to later/us.",
            "created_at": "2024-09-17T13:07:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2355728349",
            "id": 2355728349,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6MaY_d",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355728349/reactions"
            },
            "updated_at": "2024-09-17T13:07:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355728349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@fredizzimo @glacambre  related to this, I recently noticed that there doesn't seem to be a way to \"detach\" from a `nvim --embed` process: closing the channel from either end causes nvim to exit? I can definitely see a use-case there, would that be useful to you?\n\nIn fact, wouldn't that address your request here? You could start with `--embed`, then detach as needed. Though that requires a stdio channel, which would be somewhat tricky (but still workable) remotely",
            "created_at": "2024-10-18T11:18:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2422234572",
            "id": 2422234572,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6QYF3M",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422234572/reactions"
            },
            "updated_at": "2025-04-02T14:51:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422234572",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I don't personally see much need for it, but that doesn't mean that there aren't any. \n\nI think it could address the request, although I don't think it would be as ergonomic as a dedicated argument. I think you either have to run some additional commands after nvim starts, or somehow pipe stdio over the network. If you have an ssh connection, that's easy but not every remote machine has that, and then you need to use something like socat.",
            "created_at": "2024-10-18T19:10:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2423080515",
            "id": 2423080515,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6QbUZD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2423080515/reactions"
            },
            "updated_at": "2025-02-16T21:22:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2423080515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> although I don't think it would be as ergonomic as a dedicated argument.\n\nFor the socket (not TCP) use-case, `--embed` has nice ergonomics because it lets Nvim choose the socket path. Then once the caller gets the `v:servername`, it could detach and continue with the socket connection instead of stdio.\n \n> I think you either have to run some additional commands after nvim starts, or somehow pipe stdio over the network\n\nInstead of piping stdio, run `nvim --embed --listen 127.0.0.1:x` script remotely, which waits until a UI attaches to the TCP `--listen` address, which then can close the stdio channel. Any problems with that?",
            "created_at": "2024-10-18T22:05:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2423304292",
            "id": 2423304292,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6QcLBk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2423304292/reactions"
            },
            "updated_at": "2024-10-18T22:08:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2423304292",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> For the socket (not TCP) use-case, --embed has nice ergonomics because it lets Nvim choose the socket path. Then once the caller gets the v:servername, it could detach and continue with the socket connection instead of stdio.\n\nBut then you need to attach to it through stdio first or pass some additional command line parameters to run some scripts, or am I misunderstanding what you mean here.\n\n> Instead of piping stdio, run nvim --embed --listen 127.0.0.1:x script remotely, which waits until a UI attaches to the TCP --listen address, which then can close the stdio channel. Any problems with that?\n\n`nvim --embed --listen` already does almost exactly what's needed, except that it also listens to stdin for connections. This is problematic, since you can type something in the terminal by mistake. \n\nBut now after reading https://github.com/neovim/neovim/pull/25709, and https://github.com/neovim/neovim/issues/25706, I don't think that was ever part of the requirement, but a side effect of the implementation.  So, we could fix this issue by simply redefining it to always wait for only the remote connection.",
            "created_at": "2024-10-21T07:23:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2425831446",
            "id": 2425831446,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6Ql0AW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2425831446/reactions"
            },
            "updated_at": "2024-10-21T07:23:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2425831446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@fredizzimo I don't think having `--listen` wait for the first UI attach is a good idea. Generally, I think this \"waiting for the first UI attach\" is non standard behaviour and should have to be opt-in. `--listen` does exactly one thing and that is to enable connecting to that specified address later. I think it should stay that way.\nThough I am absolutely with you that there should be a way to start nvim without it's own TUI, listening to a socket, waiting for the first UI attach and not capturing stdin.\n\n@justinmk \nThe problem I see with `--embed` and `--headless` is that they already touch too many different things: They prevent nvim from starting it's own UI, they capture stdio and (in the case of `--embed`) they enable this deferred initialization.\nTo me, `--headless` implies exactly one thing: \"start without your own TUI\". I wouldn't expect it to open a stdio channel. In fact, I would expect *exactly that* to be the difference between `--headless` and `--embed`. If I embed nvim inside my application, nvim should first of all not render it's own UI (like `--headless`), and since it sits *inside* my application, I (can) communicate with it via stdio.\nCurrently the defining difference is another: `--embed` waits for the UI to attach, while `--headless` does not. They differ in the type of stdio channel they open as well.\nTo me, embedding nvim does not imply having it wait for the first UI attach. Sure, many UIs might want this behavior, but others may want nvim to start and init normally and handle their stuff in UIEnter. I consider this \"waiting for UI attach\" an implementation detail which shouldn't be the defining characteristic of \"embedding nvim\".\nMaybe that's just my interpretation of what `--headless` and `--embed` imply semantically.\n\nI'm thinking about the following:\n1. Have `--headless` not open a channel on stdio, but *just* make nvim start without it's TUI\n2. Have `--embed` not wait for the first UI to attach, but rather behave like `--headless` with the addition that it opens an RPC channel on stdio\n3. Introduce a new switch for having nvim wait for the first UI to attach\n\nThe lost functionality of `--headless` could be regained by opening a channel through `--cmd`.\nThe lost functionality of `--embed` would be provided by 3., something like `--wait-for-ui`. This would make this behaviour more explicit, but at least allow one to get this behaviour *without* having stdin captured automatically.\nSummarizing, I think the problem is that `--embed` and `--headless` do too much at once and should be broken apart. There are desirable combinations of behaviour that should involve them, but you're buying into too much at once.",
            "created_at": "2024-11-06T02:11:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2458590619",
            "id": 2458590619,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6Six2b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2458590619/reactions"
            },
            "updated_at": "2025-02-16T21:16:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2458590619",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/91015021?v=4",
                "events_url": "https://api.github.com/users/Glirastes/events{/privacy}",
                "followers_url": "https://api.github.com/users/Glirastes/followers",
                "following_url": "https://api.github.com/users/Glirastes/following{/other_user}",
                "gists_url": "https://api.github.com/users/Glirastes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Glirastes",
                "id": 91015021,
                "login": "Glirastes",
                "node_id": "MDQ6VXNlcjkxMDE1MDIx",
                "organizations_url": "https://api.github.com/users/Glirastes/orgs",
                "received_events_url": "https://api.github.com/users/Glirastes/received_events",
                "repos_url": "https://api.github.com/users/Glirastes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Glirastes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Glirastes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Glirastes",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I hid the last comment because it (1) suggested unnecessary, breaking changes, and (2) seemed to miss my [current proposal](https://github.com/neovim/neovim/issues/29634#issuecomment-2422234572). I am proposing:\n\n    nvim --embed --listen foo -c 'call chanclose(1)'\n\nThat will leave the server in a \"waiting for UI\" state, and it addresses this issue.",
            "created_at": "2025-02-16T21:17:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2661622506",
            "id": 2661622506,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6epSLq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2661622506/reactions"
            },
            "updated_at": "2025-02-16T21:21:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2661622506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "From the perspective of the user I'm not sure what `call chanclose(1)` would do there if you never attach anything else than the remote UI. I know that it internally opens a channel, but it doesn't seem like implementation details that should be exposed and documented.\n\nThe command is also fairly hard to remember when you login to a remote server and want to use it.",
            "created_at": "2025-02-17T01:41:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2661769374",
            "id": 2661769374,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6ep2Ce",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2661769374/reactions"
            },
            "updated_at": "2025-02-17T10:49:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2661769374",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It also does not work, at least not with the current master version. It still keeps the stdin open until the remote UI tries to attach, so pressing enter for example exits with an error. And as soon as the remote UI attaches, it exits with the following\n```\nERROR [neovide::bridge::ui_commands] Resize failed\n\nCaused by:\n    0: Error sending request 'nvim_ui_try_resize'\n    1: Error writing to the Writer\n    2: Broken pipe (os error 32)\n```",
            "created_at": "2025-02-17T02:37:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2661825066",
            "id": 2661825066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6eqDoq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2661825066/reactions"
            },
            "updated_at": "2025-02-17T10:50:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2661825066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think that https://github.com/neovim/neovim/issues/25377, is the more generic way of resolving the issue. Especially with the new developments in regard to dynamically attaching and detaching different UI. That way the UI will always have a chance to configure itself before anything is rendered with that UI, this is especially important if a different type of UI is reconnected. And the command-line option would not help with resolving that problem, it only helps when the first UI is connected.",
            "created_at": "2025-02-17T03:43:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2661899245",
            "id": 2661899245,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6eqVvt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2661899245/reactions"
            },
            "updated_at": "2025-02-17T10:55:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2661899245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm not sure what `call chanclose(1)` would do there if you never attach anything else than the remote UI.\n\nIt waits for a UI to attach, as `nvim --embed` always does, and as the alternatives proposed here would?\n\n> The command is also fairly hard to remember when you login to a remote server and want to use it.\n\nWhy would a *user* start a remote `nvim` that \"waits for UI\"? I understood the use-case as \"a local GUI wants to start a remote Nvim for the user\".\n\nIf a *user* is running the remote `nvim`, they already have a UI, and can `:detach`. Then a GUI can attach later.\n\n> It also does not work, at least not with the current master version.\n\nThat is why this issue is still open. But it will work pretty soon, only a small change is needed.\n\n> I think that [#25377](https://github.com/neovim/neovim/issues/25377), is the more generic way of resolving the issue.\n\nThat proposal is essentially undefined beyond \"rework the redraw order somehow\".",
            "created_at": "2025-02-17T10:55:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2662751633",
            "id": 2662751633,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6etl2R",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2662751633/reactions"
            },
            "updated_at": "2025-02-17T14:05:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2662751633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Why would a user start a remote nvim that \"waits for UI\"? I understood the use-case as \"a local GUI wants to start a remote Nvim for the user\".\n\nBecause they are working on a remote server and want to connect Neovide to it, that's the primary use case for this. If there's no server involved, then the standard `--embed` works just fine.\n\nNeovide could maybe support *one* type of remote, ssh ones by utilizing some library, but I think that's out of scope for it. And there are other types of remotes, where you might only have a remote desktop connection, or even a web based shell.\n\n> That proposal is essentially undefined beyond \"rework the redraw order somehow\".\n\nI don't think so, the only requirement is that `UIEnter` (if added is called before anything is drawn using that UI). The discussion there got out of track because of too many different other proposals.",
            "created_at": "2025-02-17T11:41:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2662869036",
            "id": 2662869036,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6euCgs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2662869036/reactions"
            },
            "updated_at": "2025-02-17T11:41:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2662869036",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ok so to address the original motivation in this issue description...\n\n# Proposal\n\n> the user might have conditional customization in the init files, for example `if vim.g.neovide`, which will never run.\n\n...we have two clear paths (and both are planned/feasible in the short term):\n\n1. Users that want to check `g:neovide` at startup, can use the `chanclose()` approach. I will implement & document this week. \n    - We aren't going to add random startup flags for that use-case.\n3. Users that define a `UIEnter` handler can start `nvim` normally on their remote, then `:detach`, then connect with a GUI.\n    - Depends on [#25377](https://github.com/neovim/neovim/issues/25377) so that `UIEnter` is predictable/reliable.",
            "created_at": "2025-02-17T14:03:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2663228040",
            "id": 2663228040,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6evaKI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2663228040/reactions"
            },
            "updated_at": "2025-04-02T14:52:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2663228040",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Proposal (additional)\n\n> `nvim --embed --listen` already does almost exactly what's needed, except that it also listens to stdin for connections. This is problematic, since you can type something in the terminal by mistake.\n\nHow about this: When user invokes `nvim --embed` in a terminal, Nvim auto-daemonizes; does *not* connect to stdin; and immediately exits the builtin UI. The `nvim --embed` server continues running as a detached (background) process, waiting for UI connect before continuing startup.\n\nUser flow:\n\n1. (in a terminal) `nvim --embed --listen foo`\n2. TUI immmediately exits and prints `nvim server (pid: 123) listening on \"foo\" is waiting for UI` to the terminal.\n3. User can close the terminal.\n4. User connects a UI to the `foo` server.\n5. The `foo` server continues startup.",
            "created_at": "2025-04-02T14:55:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2772837520",
            "id": 2772837520,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6lRiSQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2772837520/reactions"
            },
            "updated_at": "2025-04-02T15:00:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2772837520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 33,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29634/comments",
    "created_at": "2024-07-09T18:33:10Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/29634/events",
    "html_url": "https://github.com/neovim/neovim/issues/29634",
    "id": 2398883508,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "listen",
            "id": 406104372,
            "name": "server",
            "node_id": "MDU6TGFiZWw0MDYxMDQzNzI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/server"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "",
            "id": 606691254,
            "name": "has:plan",
            "node_id": "MDU6TGFiZWw2MDY2OTEyNTQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:plan"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim startup sequence (`:h startup`)",
            "id": 870629450,
            "name": "startup",
            "node_id": "MDU6TGFiZWw4NzA2Mjk0NTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/startup"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/29634/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 3,
        "created_at": "2025-04-26T13:55:41Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/50",
        "id": 12793246,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/50/labels",
        "node_id": "MI_kwDOAPphoM4AwzWe",
        "number": 50,
        "open_issues": 21,
        "state": "open",
        "title": "0.11.2",
        "updated_at": "2025-04-28T13:01:46Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/50"
    },
    "node_id": "I_kwDOAPphoM6O_A60",
    "number": 29634,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 4,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/29634/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/29634/timeline",
    "title": "wait for UI when launching with --listen (without --embed)",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-26T13:56:17Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/29634",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
        "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
        "followers_url": "https://api.github.com/users/fredizzimo/followers",
        "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
        "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fredizzimo",
        "id": 9946255,
        "login": "fredizzimo",
        "node_id": "MDQ6VXNlcjk5NDYyNTU=",
        "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
        "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
        "repos_url": "https://api.github.com/users/fredizzimo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fredizzimo",
        "user_view_type": "public"
    }
}