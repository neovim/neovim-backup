{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Neovim version (nvim -v)\n\nv0.8.2\n\n### Language server name/version\n\ntsserver v0.6.4 and cssmodules-language-server v1.2.1\n\n### Operating system/version\n\nmacOS 13.0.1\n\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\n\nThis issue can be reproduced when two language servers provide a single result for symbol.\r\n\r\n## minimal init.lua\r\n\r\n```lua\r\n-- install lspconfig.nvim\r\n\r\nlocal function on_attach()\r\n    vim.keymap.set('n', 'gd', vim.lsp.buf.definition)\r\nend\r\n\r\nlocal lspconfig = require('lspconfig')\r\n\r\nlspconfig.cssmodules_ls.setup({on_attach = on_attach})\r\nlspconfig.tsserver.setup({on_attach = on_attach})\r\n```\r\n\r\nTo repro the issue with these servers a typescript project with cssmodules should be available. For example [swaggerlint-playground](https://github.com/antonk52/swaggerlint-playground).\r\n\r\nTo setup project\r\n\r\n```sh\r\ngit clone https://github.com/antonk52/swaggerlint-playground.git\r\ncd swaggerlint-playground\r\nnpm install\r\n```\r\n\r\n## Reproduce issue\r\n\r\n- `nvim .`  from swaggerlint-playground\r\n- open `component/Button/index.tsx`\r\n- call `vim.lsp.buf.definition` (directly or via a keymap) while the cursor is over `btn` on line 23\r\n\r\n## Aside\r\n\r\nAs a temporary workaround a custom solution to merge results can be used [gist](https://gist.github.com/antonk52/19e2bb21e24b275881cbd9118655ff01). It would be nice to have this behaviour be built in. It is worth to mention that VS Code merges the results from multiple sources by default. I cannot think \n\n### Expected behavior\n\nSee a location list with locations to jump to, similar to when a single server returns multiple results. \n\n### Actual behavior\n\nSee both files open one after another based on which server return a result first. Files open instantly so it may seem like only one result was used. If you use `<C-o>` to jump to a previous location you will see the result from an language server that was first to response and only then the line where you invoked `vim.lsp.buf.definition`.\n\n### Log file\n\n_No response_",
    "closed_at": "2024-10-20T21:42:40Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
        "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
        "followers_url": "https://api.github.com/users/mfussenegger/followers",
        "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
        "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mfussenegger",
        "id": 38700,
        "login": "mfussenegger",
        "node_id": "MDQ6VXNlcjM4NzAw",
        "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
        "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
        "repos_url": "https://api.github.com/users/mfussenegger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mfussenegger",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "As a workaround you can use the tag function - which is set by default (`vim.lsp.tagfunc`, used via `ctrl+]`, `ctrl + mouse-click` or commands like `:tjump`) \r\n\r\nTo fix this we've to rework the implementation and move way from the global handler model and instead use something like `buf_request_all` (or manually iterate over the clients) to merge the results.\r\n\r\nSee:\r\n\r\nhttps://github.com/neovim/neovim/blob/94c2703a0390fc7908faf5dcde80615ddf5e616e/runtime/lua/vim/lsp/buf.lua#L78-L81\r\n\r\nAnd here is how the tagfunc merges the results:\r\n\r\nhttps://github.com/neovim/neovim/blob/94c2703a0390fc7908faf5dcde80615ddf5e616e/runtime/lua/vim/lsp/tagfunc.lua#L25-L50\r\n\r\n(See also `vim.lsp.buf.code_action` or `vim.lsp._completion.omnifunc` for examples of functions which merge results from mulitple clients)\r\n\r\n",
            "created_at": "2023-12-09T09:29:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/22318#issuecomment-1848343783",
            "id": 1848343783,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22318",
            "node_id": "IC_kwDOAPphoM5uK3zn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1848343783/reactions"
            },
            "updated_at": "2023-12-09T09:29:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1848343783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> To fix this we've to rework the implementation and move way from the global handler model and instead use something like buf_request_all (or manually iterate over the clients) to merge the results.\r\n\r\nThis is pretty much what I ended up doing in my personal config. Here is what I have been using since creating this issue. check all clients that support the lsp method, merge responses from them and jump to definition if there is a single response or quickfix/telescope for multiple ones.\r\n\r\nPlease let me know if this would be a welcome contribution.\r\n\r\n```lua\r\nlocal function cross_lsp_definition()\r\n    local util = require('vim.lsp.util')\r\n    local req_params = util.make_position_params()\r\n    local all_clients = vim.lsp.get_active_clients()\r\n\r\n    ---@table (Location | Location[] | LocationLink[] | nil)\r\n    local raw_responses = {}\r\n    -- essentially redoing Promise.all with filtering of empty/nil values\r\n    local responded = 0\r\n\r\n    local function make_cb(client)\r\n        return function(err, response)\r\n            if err == nil and response ~= nil then\r\n                table.insert(raw_responses, { response = response, encoding = client.offset_encoding })\r\n            end\r\n\r\n            responded = responded + 1\r\n\r\n            if responded == #all_clients then\r\n                local flatten_responses = {}\r\n                local flatten_responses_encoding = {}\r\n                for _, v in ipairs(raw_responses) do\r\n                    -- first check for Location | LocationLink because\r\n                    -- tbl_islist returns `false` for empty lists\r\n                    if v.response.uri or v.response.targetUri then\r\n                        table.insert(flatten_responses, v.response)\r\n                        table.insert(flatten_responses_encoding, v.encoding)\r\n                    elseif vim.tbl_islist(v.response) then\r\n                        for _, v2 in ipairs(v.response) do\r\n                            table.insert(flatten_responses, v2)\r\n                            table.insert(flatten_responses_encoding, v.encoding)\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #flatten_responses == 0 then\r\n                    return\r\n                end\r\n\r\n                -- if there is only one response, jump to it\r\n                if #flatten_responses == 1 and not vim.tbl_islist(flatten_responses[1]) then\r\n                    return util.jump_to_location(flatten_responses[1], flatten_responses_encoding[1])\r\n                end\r\n\r\n                local items = util.locations_to_items(flatten_responses, nil)\r\n\r\n                vim.fn.setqflist({}, ' ', { title = 'LSP locations', items = items })\r\n                vim.api.nvim_command('botright copen')\r\n                -- or use Telescope vim.api.nvim_command('Telescope quickfix')\r\n            end\r\n        end\r\n    end\r\n\r\n    for _, client in ipairs(all_clients) do\r\n        if client.supports_method('textDocument/definition') then\r\n            client.request('textDocument/definition', req_params, make_cb(client))\r\n        else\r\n            responded = responded + 1\r\n        end\r\n    end\r\nend\r\n```",
            "created_at": "2023-12-09T20:09:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/22318#issuecomment-1848667227",
            "id": 1848667227,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22318",
            "node_id": "IC_kwDOAPphoM5uMGxb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1848667227/reactions"
            },
            "updated_at": "2023-12-09T20:09:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1848667227",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "With https://github.com/neovim/neovim/pull/30877 definitions from multiple servers are now merged/concattenated",
            "created_at": "2024-10-20T21:42:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/22318#issuecomment-2425237334",
            "id": 2425237334,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22318",
            "node_id": "IC_kwDOAPphoM6Qji9W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2425237334/reactions"
            },
            "updated_at": "2024-10-20T21:42:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2425237334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I guess for those who were overriding `vim.lsp.handlers[\"textDocument/definition\"]` and friends this means migrating to `vim.lsp.buf_request_all`, right?\n\nBTW: The [docs](https://neovim.io/doc/user/lsp.html#lsp-api) still mention `vim.lsp.handlers` as an API to intercept requests, which is a bit confusing.",
            "created_at": "2025-04-21T14:41:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/22318#issuecomment-2818616133",
            "id": 2818616133,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22318",
            "node_id": "IC_kwDOAPphoM6oAKtF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2818616133/reactions"
            },
            "updated_at": "2025-04-21T14:41:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2818616133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/103897890?v=4",
                "events_url": "https://api.github.com/users/benjiwolff/events{/privacy}",
                "followers_url": "https://api.github.com/users/benjiwolff/followers",
                "following_url": "https://api.github.com/users/benjiwolff/following{/other_user}",
                "gists_url": "https://api.github.com/users/benjiwolff/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/benjiwolff",
                "id": 103897890,
                "login": "benjiwolff",
                "node_id": "U_kgDOBjFbIg",
                "organizations_url": "https://api.github.com/users/benjiwolff/orgs",
                "received_events_url": "https://api.github.com/users/benjiwolff/received_events",
                "repos_url": "https://api.github.com/users/benjiwolff/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/benjiwolff/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/benjiwolff/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/benjiwolff",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> BTW: The [docs](https://neovim.io/doc/user/lsp.html#lsp-api) still mention `vim.lsp.handlers` as an API to intercept requests, which is a bit confusing.\n\nWhich part specifically? Everywhere it's mentioned, it (should) also mentions \"server-to-client only, not client-to-server\".",
            "created_at": "2025-04-21T14:45:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/22318#issuecomment-2818637492",
            "id": 2818637492,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22318",
            "node_id": "IC_kwDOAPphoM6oAP60",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2818637492/reactions"
            },
            "updated_at": "2025-04-21T14:45:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2818637492",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "`textDocument/definition` is a client-to-server request (see [spec](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_definition)). However, it is still listed in the paragraph as having an entry in `vim.lsp.handlers`.\n\nFor that matter, most entries in the list are client-to-server requests and therefore no longer have a handler. This is what is confusing. Especially because it used to be possible to override handlers for responses coming from the server for those methods.",
            "created_at": "2025-04-21T20:24:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/22318#issuecomment-2819433456",
            "id": 2819433456,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22318",
            "node_id": "IC_kwDOAPphoM6oDSPw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2819433456/reactions"
            },
            "updated_at": "2025-04-21T20:25:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2819433456",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/103897890?v=4",
                "events_url": "https://api.github.com/users/benjiwolff/events{/privacy}",
                "followers_url": "https://api.github.com/users/benjiwolff/followers",
                "following_url": "https://api.github.com/users/benjiwolff/following{/other_user}",
                "gists_url": "https://api.github.com/users/benjiwolff/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/benjiwolff",
                "id": 103897890,
                "login": "benjiwolff",
                "node_id": "U_kgDOBjFbIg",
                "organizations_url": "https://api.github.com/users/benjiwolff/orgs",
                "received_events_url": "https://api.github.com/users/benjiwolff/received_events",
                "repos_url": "https://api.github.com/users/benjiwolff/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/benjiwolff/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/benjiwolff/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/benjiwolff",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/22318/comments",
    "created_at": "2023-02-18T19:47:38Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/22318/events",
    "html_url": "https://github.com/neovim/neovim/issues/22318",
    "id": 1590451638,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "BFDADC",
            "default": false,
            "description": "Low-risk, self-contained. Do NOT ask \"can I work on this\", just read CONTRIBUTING.md",
            "id": 407246773,
            "name": "complexity:low",
            "node_id": "MDU6TGFiZWw0MDcyNDY3NzM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/complexity:low"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/22318/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5ezF22",
    "number": 22318,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/22318/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/22318/timeline",
    "title": "vim.lsp.definition race condition with multiple servers",
    "type": null,
    "updated_at": "2025-04-21T20:25:25Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/22318",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
        "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
        "followers_url": "https://api.github.com/users/antonk52/followers",
        "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
        "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/antonk52",
        "id": 5817809,
        "login": "antonk52",
        "node_id": "MDQ6VXNlcjU4MTc4MDk=",
        "organizations_url": "https://api.github.com/users/antonk52/orgs",
        "received_events_url": "https://api.github.com/users/antonk52/received_events",
        "repos_url": "https://api.github.com/users/antonk52/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/antonk52",
        "user_view_type": "public"
    }
}