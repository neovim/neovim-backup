{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "For the last 2 years as I follow the development of NeoVim, every single time I open the main NeoVim GitHub page and see _MessagePack_, I ask myself why didn't I already proposed [Cap'n Proto](https://capnproto.org/) as a better alternative.\n\nLong story short, [Cap'n Proto](https://capnproto.org/) is basically the fastest possible binary serialization format. It's also quite easy to implement in [any language](https://capnproto.org/otherlang.html).\n\nI think it's worth switching to it as it will make NeoVim frontends faster and with lower latency (imagine interpreted languages like JavaScript working with MessagePack) and allow for higher efficiency in CPU utilization for larger buffer changes.\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "> imagine interpreted languages like JavaScript working with MessagePack\n\nAre there any benchmarks showing that Cap'n Proto provides any benefit for an interpreted language like Javascript?\n",
            "created_at": "2016-10-23T18:42:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-255606024",
            "id": 255606024,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTYwNjAyNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/255606024/reactions"
            },
            "updated_at": "2016-10-23T18:42:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/255606024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ghost",
                "id": 10137,
                "login": "ghost",
                "node_id": "MDQ6VXNlcjEwMTM3",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ghost",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Decoupling the serialization format might be worth a look some day. But at the moment serialization is not the bottleneck. There are substantially bigger gains to be had by being smarter about what changes are sent. \n\nAlso this would entail changes in the RPC protocol. What's your suggestion there?\n\nDiscussion from 2014: https://groups.google.com/d/msg/neovim/BUyA0HxLxvc/LKu7xJ_12b0J\n",
            "created_at": "2016-10-23T18:46:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-255606275",
            "id": 255606275,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTYwNjI3NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/255606275/reactions"
            },
            "updated_at": "2016-10-23T20:26:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/255606275",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "https://capnproto.org/rpc.html is kinda interesting, but nothing really stops us from doing the same things on top of msgpack-rpc like #4568 (when references are implemented we should allow referencing previous results) or (from the boring-and-ugly-but-already-works-well department) by rplugins injecting a bit vimL (in the future lua) into nvim to do these things. \n",
            "created_at": "2016-10-23T18:55:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-255606844",
            "id": 255606844,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTYwNjg0NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/255606844/reactions"
            },
            "updated_at": "2016-10-23T18:55:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/255606844",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Agreed. Pipelining seems more relevant to systems that (ahem) don't offer \"remote eval\" :)\n\nIn a plugin/extension/coordination ecosystem, stability and commonality is 10x more valuable than a moving target that improves things by 10% or even 200% (1000% is a different story). Let's see measurements first, and real-world experiences where msgpack is limiting some use case.\n",
            "created_at": "2016-10-23T19:39:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-255609293",
            "id": 255609293,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTYwOTI5Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/255609293/reactions"
            },
            "updated_at": "2016-10-23T19:39:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/255609293",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I don't have any recent benchmarks for any JavaScript implementation of Cap'n Proto. I can just point out, that MessagePack is in this particular case (JavaScript implementation) slower than JSON (because of built-in JSON support in JavaScript interpreters), whereas JSON is in general known to be very slow serialization format (just a tiny demonstration: [BSON versus JSON versus MessagePack](https://jsperf.com/json-bson-msgpack/5)). So I'm sure the [Cap'n Proto JavaScript implementation](https://github.com/capnp-js/serialization) is faster than MessagePack.\n\nCap'n Proto for Lua supports FFI and is very fast (as expected) - see https://blog.cloudflare.com/introducing-lua-capnproto-better-serialization-in-lua/ and the repository https://github.com/cloudflare/lua-capnproto .\n\nThe Cap'n Proto main architect also recommends the C implementation https://github.com/opensourcerouting/c-capnproto .\n\nOf course if currently MessagePack is not a performance bottleneck, we shouldn't hurry with making serialization more efficient as the gain against MessagePack would be \"only\" about 6x for low level implementations ([C/C++](https://github.com/thekvs/cpp-serializers)) and 20x for implementation in interpreted languages (such as Lua with FFI).\n\nBut I agree, that it would make sense to decouple RPC from serialization, which Cap'n Proto allows (as well as MessagePack to be fair).\n",
            "created_at": "2016-10-24T13:31:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-255740939",
            "id": 255740939,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTc0MDkzOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/255740939/reactions"
            },
            "updated_at": "2016-10-24T13:37:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/255740939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2451044?v=4",
                "events_url": "https://api.github.com/users/dumblob/events{/privacy}",
                "followers_url": "https://api.github.com/users/dumblob/followers",
                "following_url": "https://api.github.com/users/dumblob/following{/other_user}",
                "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dumblob",
                "id": 2451044,
                "login": "dumblob",
                "node_id": "MDQ6VXNlcjI0NTEwNDQ=",
                "organizations_url": "https://api.github.com/users/dumblob/orgs",
                "received_events_url": "https://api.github.com/users/dumblob/received_events",
                "repos_url": "https://api.github.com/users/dumblob/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dumblob",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@dumblob I don't know much about neovim internals and I'm not a maintainer, but I can point out one thing that you seem to not taking into account.\n\nMessagePack is schemaless and capnproto, protobuf etc are schema-based. And schemaless gives you one important property - better programmers productivity.\n1. You don't need to write schema. That's obviously better.\n2. You don't need to use generated code. That's not that obvious for some people. If you're using generated code for serialization for the most projects you **should** have a layer of abstraction above it. It tends to be fairly stupid level that for the most part copies the interface of generated code, but if you wouldn't do it you would be stuck with you serialization protocol for basically forever (if you can't or not willing to change all clients). I've seen projects that used protobuf generated code directly without a layer of abstraction. I bet they still using it although there are better alternatives now.\nAnd this two parts gives programmer more productivity. And that's exactly the things that makes schemaless serialization less performant in general (I've read that messagepck is actually on par or faster than protobuf, which is kind of wierd)\n\nSo you shoudn't think how much capnproto is faster than MessagePack but how much the speed is relevant in this case. So I would say that probably not only \"we shouldn't hurry making serialization more efficient\" but probably (not for me to decide) never do it at all, because of the cost of productivity.\n",
            "created_at": "2016-10-26T08:05:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-256277568",
            "id": 256277568,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjI3NzU2OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/256277568/reactions"
            },
            "updated_at": "2016-10-26T08:21:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/256277568",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6205841?v=4",
                "events_url": "https://api.github.com/users/purpleP/events{/privacy}",
                "followers_url": "https://api.github.com/users/purpleP/followers",
                "following_url": "https://api.github.com/users/purpleP/following{/other_user}",
                "gists_url": "https://api.github.com/users/purpleP/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/purpleP",
                "id": 6205841,
                "login": "purpleP",
                "node_id": "MDQ6VXNlcjYyMDU4NDE=",
                "organizations_url": "https://api.github.com/users/purpleP/orgs",
                "received_events_url": "https://api.github.com/users/purpleP/received_events",
                "repos_url": "https://api.github.com/users/purpleP/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/purpleP/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/purpleP/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/purpleP",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@purpleP good points, thanks for bringing them up.\n\n> 1. You don't need to write schema. That's obviously better.\n\nNot in long term. It's better solely for the first attempt to \"make it work somehow\". In other words, schema-less significantly lowers the initial burden, but schema-based promotes stable, long-existing schema. With schema I explicitly say _\"This is the way of thinking about the data and related performance in this project, accommodate yourself.\"_ and with schema-less _\"These are the data we wanted to publish today. Tomorrow we might want to publish different data, so don't be surprised by that and don't expect it to be performance-optimized.\"_.\n\n> 1. You don't need to use generated code. That's not that obvious for some people. If you're using generated code for serialization for the most projects you **should** have a layer of abstraction above it...\n\nLayers of abstraction are just a matter of personal opinion. Your example with Protocol Buffers clearly shows how it's done in [Go](https://golang.org/) (as Protocol Buffers were developed to be performant in Go and to have neat minimal interface in Go). Namely \"there is only one way of writing code and using the language\" (including style, structuring, etc. - see e.g. the famous [\"bug\" about `}else{`](https://github.com/golang/go/issues/5440) and many more other rants about preprocessing, freedom for bindings and embedding, etc.). Milions of programmers love Go just for this prescribed structure - because of the nature of code being read 100x more than written (i.e. _conformity and resulting clarity over creativity_). So, I must say no, there is no objective need for writing an abstraction layer.\n\nAnyway this discussion is irelevant, because it's very general (not directly related to NeoVim) and leads us astray. The question is though what main NeoVim developers think about the added value of schema or schema-less in long term.\n",
            "created_at": "2016-10-26T10:56:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-256314414",
            "id": 256314414,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjMxNDQxNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/256314414/reactions"
            },
            "updated_at": "2016-10-26T10:56:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/256314414",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2451044?v=4",
                "events_url": "https://api.github.com/users/dumblob/events{/privacy}",
                "followers_url": "https://api.github.com/users/dumblob/followers",
                "following_url": "https://api.github.com/users/dumblob/following{/other_user}",
                "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dumblob",
                "id": 2451044,
                "login": "dumblob",
                "node_id": "MDQ6VXNlcjI0NTEwNDQ=",
                "organizations_url": "https://api.github.com/users/dumblob/orgs",
                "received_events_url": "https://api.github.com/users/dumblob/received_events",
                "repos_url": "https://api.github.com/users/dumblob/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dumblob",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@dumblob I'm sorry, but I can't agree.\n1. Yes, schema-based promotes stable schema etc. But so does discipline. I mean it's entirely up to team to change or not to change the schema. You don't want users of api suffer from changes to schema - don't change it.\n\n> These are the data we wanted to publish today. Tomorrow we might want to publish different data, so don't be surprised by that and don't expect it to be performance-optimized.\n\nThat's not true. At least not all truth. With schema-less it's \"These are the data we want to publish today. If we want api to be stable we will tell you about it, if we're not - we wouldn't\". So again, It's up to developer to specify whether api would change or not in the future. And the fact that they published their current schema have nothing to do with it. They still can change the schema entirely if they would like.\n1. And layers of abstraction is not a matter of opinions. Look at this python code for protobufs\n\n``` python\nclass Person(message.Message):\n  __metaclass__ = reflection.GeneratedProtocolMessageType\n\n  class PhoneNumber(message.Message):\n    __metaclass__ = reflection.GeneratedProtocolMessageType\n    DESCRIPTOR = _PERSON_PHONENUMBER\n  DESCRIPTOR = _PERSON\n\nclass AddressBook(message.Message):\n  __metaclass__ = reflection.GeneratedProtocolMessageType\n  DESCRIPTOR = _ADDRESSBOOK\n\nimport addressbook_pb2\nperson = addressbook_pb2.Person()\nperson.id = 1234\nperson.name = \"John Doe\"\nperson.email = \"jdoe@example.com\"\nphone = person.phone.add()\nphone.number = \"555-4321\"\nphone.type = addressbook_pb2.Person.HOME\n```\n\nI can assure that if you wouldn't make a layer above this message layer you would have to rewrite it, because in now way that's a pythonic code. So to limit effect of a change you **need** another layer.\n\nBut I agree that that's a offtopic and if you want we should continue our discussion in another place.\n",
            "created_at": "2016-10-26T12:12:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-256329151",
            "id": 256329151,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjMyOTE1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/256329151/reactions"
            },
            "updated_at": "2016-11-03T07:15:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/256329151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6205841?v=4",
                "events_url": "https://api.github.com/users/purpleP/events{/privacy}",
                "followers_url": "https://api.github.com/users/purpleP/followers",
                "following_url": "https://api.github.com/users/purpleP/following{/other_user}",
                "gists_url": "https://api.github.com/users/purpleP/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/purpleP",
                "id": 6205841,
                "login": "purpleP",
                "node_id": "MDQ6VXNlcjYyMDU4NDE=",
                "organizations_url": "https://api.github.com/users/purpleP/orgs",
                "received_events_url": "https://api.github.com/users/purpleP/received_events",
                "repos_url": "https://api.github.com/users/purpleP/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/purpleP/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/purpleP/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/purpleP",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> With schema I explicitly say \"This is the way of thinking about the data and related performance in this project, accommodate yourself.\" and with schema-less \"These are the data we wanted to publish today. Tomorrow we might want to publish different data, so don't be surprised by that and don't expect it to be performance-optimized.\".\n\nWith 0.1.6 and later we will formalize strong guarantees about rpc api stability. An API method's metadata must not change in any way, not even widening arguments or narrowing return values. Rather a new method must be added and the old one deprecated for least for one api level and only removed at a major release point. On top of this, schema based rpc might be an worthwhile _optimization_ but it will not provide any further stability or long-existingness guarantees, which already will be strong enough.\n\nAnd the api must be an abstraction layer, because it is not only accessible through rpc, also through vimL and in the likely future though direct C calls with in-process embedding. \n",
            "created_at": "2016-10-26T12:14:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-256329494",
            "id": 256329494,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjMyOTQ5NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/256329494/reactions"
            },
            "updated_at": "2016-10-26T12:15:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/256329494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Nvim [provides a schema in machine readable form](https://neovim.io/doc/user/msgpack_rpc.html#rpc-api). \n",
            "created_at": "2016-10-26T14:51:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-256371724",
            "id": 256371724,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjM3MTcyNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/256371724/reactions"
            },
            "updated_at": "2016-10-26T14:51:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/256371724",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ghost",
                "id": 10137,
                "login": "ghost",
                "node_id": "MDQ6VXNlcjEwMTM3",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ghost",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bfredl thank you for revealing the plans. Apparently the abstractions are in case of Neovim independent from the underlying serialization technology, which also renders the discussion about Cap'n Proto (not) needing writing an abstraction layer pointless.\n\n@mondico wow, that's great. Nice to see that already now there is a need for machine readable schema. In case Cap'n Proto will be used at some point, the switch won't be so painful.\n",
            "created_at": "2016-11-04T16:12:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-258475452",
            "id": 258475452,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODQ3NTQ1Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/258475452/reactions"
            },
            "updated_at": "2016-11-04T16:12:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/258475452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2451044?v=4",
                "events_url": "https://api.github.com/users/dumblob/events{/privacy}",
                "followers_url": "https://api.github.com/users/dumblob/followers",
                "following_url": "https://api.github.com/users/dumblob/following{/other_user}",
                "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dumblob",
                "id": 2451044,
                "login": "dumblob",
                "node_id": "MDQ6VXNlcjI0NTEwNDQ=",
                "organizations_url": "https://api.github.com/users/dumblob/orgs",
                "received_events_url": "https://api.github.com/users/dumblob/received_events",
                "repos_url": "https://api.github.com/users/dumblob/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dumblob",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Bringing in the info which was lacking in a duplicate I created to suggest using CBOR format for the rpc functionality in neovim (#10246).\r\n\r\nHere's a comment which goes over what I recalled were the problems with msgpack, from someone explaining why IPLD used CBOR over msgpack:\r\n\r\n > Msgpack has some bonkerinos stuff about being unable to tell the difference between strings and bytes, iirc. This may not be true anymore -- I think it was eventually patched into a saner state (though not necessarily with an unambiguous migration path) -- but the ecosystemic uncertainty damage was done. (Discussions: msgpack/msgpack#121 , msgpack/msgpack#128 )\r\n(So, yeah, \"not canonical representation\".)\r\n\r\nNotable projects using CBOR include [matrix](https://fosdem.org/2019/schedule/event/matrix/) (as eventual JSON replacement), IPLD (IPFS backend), and [CoAP](https://coap.technology/)\r\n\r\nNote that my suggestion mostly stemmed from my unproven belief that msgpack being an ancestor of CBOR would mean easy porting. The fork is over 5 years old now so this could be somewhat unfounded, but probably not wildly so.",
            "created_at": "2019-06-17T07:39:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-502570154",
            "id": 502570154,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjU3MDE1NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/502570154/reactions"
            },
            "updated_at": "2019-06-17T07:39:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/502570154",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ghost",
                "id": 10137,
                "login": "ghost",
                "node_id": "MDQ6VXNlcjEwMTM3",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ghost",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Those linked issues are 6-7 years old. All maintained msgpack libs implement the \"new\" spec with STR and EXT types. ",
            "created_at": "2019-06-17T07:51:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-502573631",
            "id": 502573631,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjU3MzYzMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/502573631/reactions"
            },
            "updated_at": "2019-06-17T07:51:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/502573631",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "True, and I must take back the statement that msgpack refused to break, since they did with v5 of the spec.\r\nHence it is understandably not enticing for nvim to migrate.\r\n\r\nSo I'll simply leave it at: I would develop on CBOR since there are other projects I wish to talk to that use it. That is all.\r\n\r\nI also forgot to mention that dhall has a CBOR representation, which is what got me into this really. Dhall is probably the most innovative language I know of today. Maybe that counts for something.",
            "created_at": "2019-06-17T08:03:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-502577767",
            "id": 502577767,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjU3Nzc2Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/502577767/reactions"
            },
            "updated_at": "2019-06-17T08:04:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/502577767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ghost",
                "id": 10137,
                "login": "ghost",
                "node_id": "MDQ6VXNlcjEwMTM3",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ghost",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bfredl Having non-seekable data is ... I guess the word isnt allowed here.\r\nImagine a world of interoperable, navigatable data ...\r\nhttps://www.youtube.com/watch?v=PBo1lEZ_Iik\r\n\r\nEdit: Searching for the last video I found a new, much longer but quite good and very related to this whole thing about data.\r\nData with ipld:\r\nhttps://www.youtube.com/watch?v=totVQXYS1N8N",
            "created_at": "2019-06-17T08:17:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-502582190",
            "id": 502582190,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjU4MjE5MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/502582190/reactions"
            },
            "updated_at": "2019-06-17T11:23:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/502582190",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ghost",
                "id": 10137,
                "login": "ghost",
                "node_id": "MDQ6VXNlcjEwMTM3",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ghost",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I think this whole topic deserves a new issue, but I'll ask this time.\r\n\r\nThis is about the *next standard*. So the right question is:\r\n\r\n#### What is the next UTF8 ?\r\n\r\nOf course to perhaps most programmers this doesnt matter, but my work is about creating the most efficient computer systems possible. So (directly) supporting multiple data format is completly out of the question.\r\n\r\nMessage pack can't be the next data type since it doesn't have union, or sum types, which is a basic data type in modern computing systems. Im basing my first implementation on [bincode](https://github.com/servo/bincode) but of course it is only rust right now. CBOR just seems to be where everyone will settle on if only because IPLD and dhall are based on it. Dhall is the only language I use which has real code representation, and it uses a CBOR format, which supports sum type using a tuple structure I think, or something similar. Who knows the original author might have a word to say about this; he might use neovim too!",
            "created_at": "2019-06-23T10:08:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-504737464",
            "id": 504737464,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDczNzQ2NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/504737464/reactions"
            },
            "updated_at": "2019-06-23T10:08:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/504737464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ghost",
                "id": 10137,
                "login": "ghost",
                "node_id": "MDQ6VXNlcjEwMTM3",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ghost",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We can't spend time chasing marginally improved formats, there are higher priorities right now. \r\n\r\nMsgpack is quite reasonable in the meantime, and it is a _reversible_ decision. There is zero reason for us to spin our wheels optimizing this until there is an obvious, unambiguously better alternative.",
            "created_at": "2019-06-23T13:31:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-504752572",
            "id": 504752572,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDc1MjU3Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/504752572/reactions"
            },
            "updated_at": "2019-06-23T13:31:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/504752572",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> until there is an obvious, unambiguously better alternative.\r\n\r\nThat's exacly what I'm working on. So if a truck doesnt hit me it'll be bincode-based. So this issue now depends on a c++ port of [bincode](https://github.com/servo/bincode).",
            "created_at": "2019-06-24T07:12:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-504887949",
            "id": 504887949,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDg4Nzk0OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/504887949/reactions"
            },
            "updated_at": "2019-06-24T07:12:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/504887949",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ghost",
                "id": 10137,
                "login": "ghost",
                "node_id": "MDQ6VXNlcjEwMTM3",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ghost",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> We can't spend time chasing marginally improved formats, there are higher priorities right now.\r\n\r\nTrue, the only sensible move is to a format which *cannot be improved further*. Capnproto pretty much fits the bill; improvements can be made of course but more on implementation details than the format itself; a format like capnproto has reached the limits/design-restraints of the hardware architecture of the day (8/16/32/64 bits words).\r\n\r\nIn other words, it looks like capnproto is actually worth it.\r\nOtherwise, msgpack was a lot nicer choice than json/toml/yaml,other-utf8-nonsense.\r\n\r\n~~This might be relevant to Li's sajban project, which at this point looks like it will use nvim as its first UI.~~ [1]\r\nAnd lately he has been thinking about a capnproto-formated sajban (as opposed to bincode, which is rust-only for now. They are both rather similar in deserialized form).\r\nThis issue might reach the people who already have similar interests...\r\n\r\nInsight: A certain category of people - they could be called perfectionists - would rather turn their back on a project than use a sub-optimal interface. This would explain why the msgpack interface ended up getting less attention than the newer lua interface. So the C/C++/rust/swift/C# crowd might get pulled more reliably into a project that use capnproto rather than msgpack/cbor.\r\n\r\nPS: There does not seem to be a completly-efficient-yet-type-complete serialization format around yet, or at least it isn't known yet. Perhaps @justinmk is right, and it isn't worth the effort since all the programming frameworks will be rendered obsolete by something like sajban. Self-describing formats intrinsically compromise, and no project has come up which uses total explicitness, probably since it would be difficult to implement in many frameworks that lack or have poor support for some types. So the cross-framework format that cannot be improved is both difficult to implement and ultimately a self-defeating project. \r\n\r\n[1]: Li now believes, after lots of reading, that sajban will implement its own format almost-from-scratch, since none of the popular candidates really constrain their design with similar intent. So msgpack is fine, and rust has an interesting library for it which should work fine for nvim integration. Kudos again for picking one of the least horrible data format in the pack.",
            "created_at": "2020-12-04T04:44:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-738561325",
            "id": 738561325,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczODU2MTMyNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/738561325/reactions"
            },
            "updated_at": "2020-12-04T06:34:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/738561325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/64073256?v=4",
                "events_url": "https://api.github.com/users/maisiliym/events{/privacy}",
                "followers_url": "https://api.github.com/users/maisiliym/followers",
                "following_url": "https://api.github.com/users/maisiliym/following{/other_user}",
                "gists_url": "https://api.github.com/users/maisiliym/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maisiliym",
                "id": 64073256,
                "login": "maisiliym",
                "node_id": "MDQ6VXNlcjY0MDczMjU2",
                "organizations_url": "https://api.github.com/users/maisiliym/orgs",
                "received_events_url": "https://api.github.com/users/maisiliym/received_events",
                "repos_url": "https://api.github.com/users/maisiliym/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maisiliym/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maisiliym/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maisiliym",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> True, the only sensible move is to a format which cannot be improved further. Capnproto pretty much fits the bill; improvements can be made of course but more on implementation details than the format itself; a format like capnproto has reached the limits/design-restraints of the hardware architecture of the day (8/16/32/64 bits words).\r\n\r\nFor capnproto to be seriously considreded what would be needed is\r\n(1) a clear overview fo what limitations of msgpack/msgpack-rpc it improves on\r\n(2) some sketch how our API conventions (while _inspired_ by msgpack is not directly tied to it; in-process code can use same API without encode/decode) map to capnproto (or similar)\r\n\r\nTo be clear: this something which existing core contributors most likely would not be driving for either the 0.5 or 0.6 cycle, but we are happy to guide some one willing to de heavy lifting. but again, a clear analysis of the benefits (and risks) should be presented and discussed before coding.",
            "created_at": "2020-12-04T09:25:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-738673334",
            "id": 738673334,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczODY3MzMzNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/738673334/reactions"
            },
            "updated_at": "2020-12-04T09:25:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/738673334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Another reason why it isn't worth all this work; nvim uses lots of strings, which would need to be changed to enum(from rust-dialect, C uses different term) types to get most of the benefit. Which is also why LI gave up on capnproto; not enough benefits for all those legacy applications which did not have de/serialize optimization in mind when designing the data structure (the main reason to do this was to communicate with all popular frameworks). By the time a good data format comes, nvim will be about as useful as `ed`. So Li is weighting for closing this and focusing on multi-selection and multi-frontends, without which nvim is still a bit of a laughing stock.",
            "created_at": "2020-12-06T01:00:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-739438386",
            "id": 739438386,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczOTQzODM4Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/739438386/reactions"
            },
            "updated_at": "2020-12-06T01:00:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/739438386",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/64073256?v=4",
                "events_url": "https://api.github.com/users/maisiliym/events{/privacy}",
                "followers_url": "https://api.github.com/users/maisiliym/followers",
                "following_url": "https://api.github.com/users/maisiliym/following{/other_user}",
                "gists_url": "https://api.github.com/users/maisiliym/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maisiliym",
                "id": 64073256,
                "login": "maisiliym",
                "node_id": "MDQ6VXNlcjY0MDczMjU2",
                "organizations_url": "https://api.github.com/users/maisiliym/orgs",
                "received_events_url": "https://api.github.com/users/maisiliym/received_events",
                "repos_url": "https://api.github.com/users/maisiliym/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maisiliym/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maisiliym/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maisiliym",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": ">Another reason why it isn't worth all this work; nvim uses lots of strings, which would need to be changed to enum(from rust-dialect, C uses different term) types to get most of the benefit. Which is also why LI gave up on capnproto; not enough benefits for all those legacy applications which did not have de/serialize optimization in mind when designing the data structure (the main reason to do this was to communicate with all popular frameworks).\r\n\r\nI can't comment on the general effort needed, but I'd like to point out, that Rust has absolutely no issues with Cap'n Proto and than Rust's enums **are** fully supported by Cap'n Proto. So I'm not sure the issues are truly related to Nvim's \"strings\" or other data types.",
            "created_at": "2020-12-06T09:37:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-739478251",
            "id": 739478251,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczOTQ3ODI1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/739478251/reactions"
            },
            "updated_at": "2020-12-06T09:37:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/739478251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2451044?v=4",
                "events_url": "https://api.github.com/users/dumblob/events{/privacy}",
                "followers_url": "https://api.github.com/users/dumblob/followers",
                "following_url": "https://api.github.com/users/dumblob/following{/other_user}",
                "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dumblob",
                "id": 2451044,
                "login": "dumblob",
                "node_id": "MDQ6VXNlcjI0NTEwNDQ=",
                "organizations_url": "https://api.github.com/users/dumblob/orgs",
                "received_events_url": "https://api.github.com/users/dumblob/received_events",
                "repos_url": "https://api.github.com/users/dumblob/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dumblob",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Rust's enums **are** fully supported by Cap'n Proto. \r\n\r\nThat's unrelated to the last comment, which started with: \r\n> > Another reason why it isn't worth all this work\r\n\r\nAnd then went on to explain the said 'why' ...\r\n\r\nIn other words; it's possible but a major waste of time.",
            "created_at": "2020-12-11T03:49:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-742949558",
            "id": 742949558,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc0Mjk0OTU1OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/742949558/reactions"
            },
            "updated_at": "2020-12-11T03:49:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/742949558",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/64073256?v=4",
                "events_url": "https://api.github.com/users/maisiliym/events{/privacy}",
                "followers_url": "https://api.github.com/users/maisiliym/followers",
                "following_url": "https://api.github.com/users/maisiliym/following{/other_user}",
                "gists_url": "https://api.github.com/users/maisiliym/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maisiliym",
                "id": 64073256,
                "login": "maisiliym",
                "node_id": "MDQ6VXNlcjY0MDczMjU2",
                "organizations_url": "https://api.github.com/users/maisiliym/orgs",
                "received_events_url": "https://api.github.com/users/maisiliym/received_events",
                "repos_url": "https://api.github.com/users/maisiliym/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maisiliym/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maisiliym/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maisiliym",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Related: msgpack-rust in a bit of disrepair; https://github.com/3Hren/msgpack-rust/issues/255\r\nIt seems msgpack did not (yet) draw activation-energy-level interest rust-side, for a number of reasons, which include both CBOR and bincode.\r\n\r\nApparently, the CBOR debate was more smoke than fire in the end, but the person/people behind CBOR had better PR/marketing skills/friends in high places, and so the ecosystem was fragmented a few years ago, right around the time when neovim would have picked msgpack. Now, people seem to point/switch to CBOR/others, which is creating a msgpack exodus.\r\n\r\nHere is in interesting excerpt, from [this blog post](https://diziet.dreamwidth.org/6568.html) (emphasis added)\r\n\"MessagePack seems to have been prompted into fixing the missing string type problem, but only by the threat of a fork. However, this fork went ahead even after MessagePack clearly accepted the need for a string type. MessagePack had a fixed protocol spec before the IETF did.\r\n\r\nThe continued pursuit of the IETF fork was ostensibly been motivated by a disapproval of the development process and in particular a sense that the IETF process was superior. [...]\r\n\r\n*One lesson for the rest of us is that although being the upstream and nominally in charge of a project seems to give us a lot of power, it's wise to listen carefully to one's users and downstreams. Once people are annoyed enough to fork, the fork will have a life of its own.*\"\r\n\r\nAnd so it seems the lack of love for msgpack is unwarranted. CBOR offers little over it.\r\n\r\nNote: the commenter is simply sharing and not engaging into an argumentation.\r\n\r\nEdit: related: https://github.com/msgpack/msgpack/issues/129#issuecomment-798845486",
            "created_at": "2021-03-12T04:21:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/5526#issuecomment-797224465",
            "id": 797224465,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5526",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzIyNDQ2NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/797224465/reactions"
            },
            "updated_at": "2021-03-14T06:56:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/797224465",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/64073256?v=4",
                "events_url": "https://api.github.com/users/maisiliym/events{/privacy}",
                "followers_url": "https://api.github.com/users/maisiliym/followers",
                "following_url": "https://api.github.com/users/maisiliym/following{/other_user}",
                "gists_url": "https://api.github.com/users/maisiliym/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/maisiliym",
                "id": 64073256,
                "login": "maisiliym",
                "node_id": "MDQ6VXNlcjY0MDczMjU2",
                "organizations_url": "https://api.github.com/users/maisiliym/orgs",
                "received_events_url": "https://api.github.com/users/maisiliym/received_events",
                "repos_url": "https://api.github.com/users/maisiliym/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/maisiliym/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maisiliym/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/maisiliym",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 24,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/5526/comments",
    "created_at": "2016-10-23T17:17:07Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/5526/events",
    "html_url": "https://github.com/neovim/neovim/issues/5526",
    "id": 184702118,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "channels, RPC, msgpack",
            "id": 242522707,
            "name": "channels-rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/channels-rpc"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/5526/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 285,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 339,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-07-04T21:53:41Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWUxODQ3MDIxMTg=",
    "number": 5526,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/5526/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/5526/timeline",
    "title": "RPC/API: Use Cap'n Proto instead of MessagePack",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:31Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/5526",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2451044?v=4",
        "events_url": "https://api.github.com/users/dumblob/events{/privacy}",
        "followers_url": "https://api.github.com/users/dumblob/followers",
        "following_url": "https://api.github.com/users/dumblob/following{/other_user}",
        "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dumblob",
        "id": 2451044,
        "login": "dumblob",
        "node_id": "MDQ6VXNlcjI0NTEwNDQ=",
        "organizations_url": "https://api.github.com/users/dumblob/orgs",
        "received_events_url": "https://api.github.com/users/dumblob/received_events",
        "repos_url": "https://api.github.com/users/dumblob/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dumblob",
        "user_view_type": "public"
    }
}