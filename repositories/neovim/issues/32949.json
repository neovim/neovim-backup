{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\nAI/LLM works by ingesting text with lots of detail. Including relevant details and excluding irrelevant details helps LLMs work much better.\n\nCurrently, most Nvim AI plugins are gigantic buckets of code with their own custom UI. But all of that is just a totally irrelevant waste of time.\n\nWhat's actually needed is a way to generate a \"digest\" of the useful state from the editor, workspace, and system environment.\n\nThis plugin shows an example of that: https://github.com/0xrusowsky/nvim-ctx-ingest\n\n### Expected behavior\n\nProvide stdlib functions for use in LLM prompts:\n\n- `vim.ctx.get_state()` returns the useful editor state\n    - see https://github.com/0xrusowsky/nvim-ctx-ingest for ideas, especially:\n        - project file structure digest (ideally with some intelligence to avoid noise files, truncate if there are too many files, and include the most important files such as package.json etc)\n- `vim.ctx.get_llm_prompt()` returns the state in a LLM prompt-friendly way\n  ```\n  Directory structure:\n  project\n  ├── src\n  │   ├── main.lua\n  │   └── utils.lua\n  ├── tests\n  │   └── test_main.lua\n  └── README.md\n  ```\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "As mentioned here: https://www.reddit.com/r/neovim/comments/1jdcqp7/nvimctxingest_easily_share_project_ctx_with_ur_llm/mid7v1i/\n\nI think that:\n1. When providing information about project files to LLM, it is better to provide the file list directly, LLMs understand this and providing tree can confuse LLM when trying to output file path to some file in the project\n\n2. For context providers, I think these are the most useful\n\n## Diagnostics\nwell formatted diagnostics, with option to grab (all, visible, open buffers) diagnostics, in some easily digestible format by LLM, for example:\n\n\n```\n# <filename> diagnostics:\n<SEVERITY> line <start>-<end> : <diagnostic message>\n<SEVERITY> line <start2>-<end2> : <diagnostic message2c>\n```\n\nThis format could of course be slightly better but something like this is somewhat easily digestible by LLMs. alternative would be XML format, which would be more understandable for LLMs but less understandable for humans so I think just some decently structured free form text is good middle ground\n    \n## Outline\n\nFile outline based on treesitter. This is mostly useful for not sending more data than needed to LLMs, and also for filtering data using keyword search which is much more reliable than full text search\n\nExample of outline data format:\n\n```\n{\n   filename\n   filetype\n   symbols {\n      name\n      signature\n      type\n      start_row\n      start_col\n      end_row\n      end_col\n   }\n}\n```\n\nExample of textual representation (notice the omitted bodies of functins)\n\n`# <filename> outline`\n\n```lua\nrequire(\"my_require1\")\nrequire(\"my_require2\")\n\nmy_variable_1\nmy_variable_2\n\n-- comments\nfunction my_function()\n   function my_inner_function()\n   end\nend\n\n-- comments\nfunction my_function2(my_arg1, my_arg2)\nend\n```\n\nUsing headers like `# <filename> diagnostics` and `# <filename> content` is pretty useful because most LLMs seem to understand markdown links fairly well, which means user can embed these outline/filename/diagnostic messages separately from their actual message (and send/not send them as they need to save tokens) and then simply use markdown link format like:\n\n`[<filename>](#<filename>-content)` when talking about the file in message\n\nIf i replied with all this in wrong issue and this issue is purely for project tree then let me know but I think it makes sense here\n\n",
            "created_at": "2025-03-18T14:28:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/32949#issuecomment-2733461111",
            "id": 2733461111,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32949",
            "node_id": "IC_kwDOAPphoM6i7U53",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2733461111/reactions"
            },
            "updated_at": "2025-03-18T14:28:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2733461111",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32949/comments",
    "created_at": "2025-03-18T00:07:30Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32949/events",
    "html_url": "https://github.com/neovim/neovim/issues/32949",
    "id": 2926679261,
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "save/restore editor state: shada, context, ctx, sessions, mksession",
            "id": 4449264023,
            "name": "editor-state",
            "node_id": "LA_kwDOAPphoM8AAAABCTJhlw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor-state"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32949/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6ucZTd",
    "number": 32949,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 1,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32949/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32949/timeline",
    "title": "AI primitive: produce a well-formatted \"digest\" including the project tree",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-03-18T14:44:38Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32949",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}