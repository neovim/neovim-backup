{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "## Problem\n\nAI/LLM works by ingesting text with lots of detail. Including relevant details and excluding irrelevant details helps LLMs work much better.\n\nCurrently, most Nvim AI plugins are gigantic buckets of code with their own custom UI. But all of that is just a totally irrelevant waste of time.\n\nWhat's actually needed is a way to generate a \"digest\" of the useful state from the editor, workspace, and system environment.\n\nThese plugin(s) give some ideas: \n\n- https://github.com/0xrusowsky/nvim-ctx-ingest\n- https://github.com/Davidyz/VectorCode/ ?\n- https://github.com/lazymaniac/nvim-ide/blob/master/lua/plugins/ai.lua\n- \"fragments\" concept: https://simonwillison.net/2025/Apr/7/long-context-llm/\n\n## Expected behavior\n\nProvide stdlib functions for use in LLM prompts:\n\n- `vim.ctx.get_state()` returns the useful editor state\n    - see https://github.com/0xrusowsky/nvim-ctx-ingest for ideas, especially:\n        - project file structure digest (ideally with some intelligence to avoid noise files, truncate if there are too many files, and include the most important files such as package.json etc)\n- `vim.ctx.get_llm_prompt()` returns the state in a LLM prompt-friendly way\n  ```\n  Directory structure:\n  project\n  ├── src\n  │   ├── main.lua\n  │   └── utils.lua\n  ├── tests\n  │   └── test_main.lua\n  └── README.md\n  ```\n\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "As mentioned here: https://www.reddit.com/r/neovim/comments/1jdcqp7/nvimctxingest_easily_share_project_ctx_with_ur_llm/mid7v1i/\n\nI think that:\n1. When providing information about project files to LLM, it is better to provide the file list directly, LLMs understand this and providing tree can confuse LLM when trying to output file path to some file in the project\n\n2. For context providers, I think these are the most useful\n\n## Diagnostics\nwell formatted diagnostics, with option to grab (all, visible, open buffers) diagnostics, in some easily digestible format by LLM, for example:\n\n\n```\n# <filename> diagnostics:\n<SEVERITY> line <start>-<end> : <diagnostic message>\n<SEVERITY> line <start2>-<end2> : <diagnostic message2c>\n```\n\nThis format could of course be slightly better but something like this is somewhat easily digestible by LLMs. alternative would be XML format, which would be more understandable for LLMs but less understandable for humans so I think just some decently structured free form text is good middle ground\n    \n## Outline\n\nFile outline based on treesitter. This is mostly useful for not sending more data than needed to LLMs, and also for filtering data using keyword search which is much more reliable than full text search\n\nExample of outline data format:\n\n```\n{\n   filename\n   filetype\n   symbols {\n      name\n      signature\n      type\n      start_row\n      start_col\n      end_row\n      end_col\n   }\n}\n```\n\nExample of textual representation (notice the omitted bodies of functins)\n\n`# <filename> outline`\n\n```lua\nrequire(\"my_require1\")\nrequire(\"my_require2\")\n\nmy_variable_1\nmy_variable_2\n\n-- comments\nfunction my_function()\n   function my_inner_function()\n   end\nend\n\n-- comments\nfunction my_function2(my_arg1, my_arg2)\nend\n```\n\nUsing headers like `# <filename> diagnostics` and `# <filename> content` is pretty useful because most LLMs seem to understand markdown links fairly well, which means user can embed these outline/filename/diagnostic messages separately from their actual message (and send/not send them as they need to save tokens) and then simply use markdown link format like:\n\n`[<filename>](#<filename>-content)` when talking about the file in message\n\nIf i replied with all this in wrong issue and this issue is purely for project tree then let me know but I think it makes sense here\n\n",
            "created_at": "2025-03-18T14:28:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/32949#issuecomment-2733461111",
            "id": 2733461111,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32949",
            "node_id": "IC_kwDOAPphoM6i7U53",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 4,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2733461111/reactions"
            },
            "updated_at": "2025-03-18T14:28:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2733461111",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Apart from what @deathbeam already suggested, I'd like to propose an easy way of **accessing edit history**. There's the `:changes` command, but it lacks information like buffer ID and what the actual edit is (eg, before/after or diffs). [Plugins that track the undo history](https://github.com/debugloop/telescope-undo.nvim) tend to set up their own thing to track the changes, which should be unnecessary because neovim itself already maintains an undo tree that contains the actual diffs. \n\nThis information can be useful for LLM in understanding the current workflow and providing a clearer picture of what the user is trying to do. In the context of [vector search and retrieval](https://github.com/Davidyz/VectorCode), this helps to refine the search query to be closer to the current task, potentially giving more accurate retrieval results (see related discussion [here](https://github.com/Davidyz/VectorCode/issues/45)). This could also help implement something like edit prediction, like [Zed's zeta](https://zed.dev/blog/edit-prediction).",
            "created_at": "2025-04-03T05:56:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/32949#issuecomment-2774570781",
            "id": 2774570781,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32949",
            "node_id": "IC_kwDOAPphoM6lYJcd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2774570781/reactions"
            },
            "updated_at": "2025-04-03T05:57:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2774570781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "\nI'm not sure my code will help in this approach. What I see here is that you want to give LLM all files that might be related to the coding task. My approach is to give LLM tools to gather the context by itself without even the need to share the snippets of code manually, in the most effective and efficient way.\n\nI will talk only in the context of programming as I'm not interested and educated enough in other cases. Sharing files is okay and works well, but when a project contains a lot of files and references, or very long code files, it just makes weaker models unusable as relevant code could be just a few percent of shared context. More complex models are struggling because this can be more of a needle in the haystack problem for LLM than programming problem. \n\nWhat I did is basically an MCP server for LSP server + TreeSitter with the option to edit code. It works pretty decently. It's efficient in terms of shared context but also complicated, and sometimes LLMs use this tool in very convoluted ways with weaker models but I guess this can be fixed by improving the prompt. So both methods have some pros and cons but as I said in the beginning my approach kind of doesn’t fit to your idea. ",
            "created_at": "2025-04-11T14:22:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/32949#issuecomment-2797061977",
            "id": 2797061977,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32949",
            "node_id": "IC_kwDOAPphoM6mt8dZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797061977/reactions"
            },
            "updated_at": "2025-04-11T14:22:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797061977",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2697331?v=4",
                "events_url": "https://api.github.com/users/lazymaniac/events{/privacy}",
                "followers_url": "https://api.github.com/users/lazymaniac/followers",
                "following_url": "https://api.github.com/users/lazymaniac/following{/other_user}",
                "gists_url": "https://api.github.com/users/lazymaniac/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lazymaniac",
                "id": 2697331,
                "login": "lazymaniac",
                "node_id": "MDQ6VXNlcjI2OTczMzE=",
                "organizations_url": "https://api.github.com/users/lazymaniac/orgs",
                "received_events_url": "https://api.github.com/users/lazymaniac/received_events",
                "repos_url": "https://api.github.com/users/lazymaniac/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lazymaniac/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lazymaniac/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lazymaniac",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "What you are describing as MCP is actually only part of MCP, e.g tools.\nAnother important part is resources, and that is what I would personally use these primitives for, and tools can return resources when needed (including some of these primitives), and also what people rarely talk about when talking about MCP (also i personally think the protocol itself is deeply flawed after looking at it for past 3 weeks and causes these misunderstandings easily).\n\nWithout using resources, you have no option to add/remove resources manually (at least if you were to follow the spec, because calling tools manually is both discouraged and dangerous because they inherently have side effects) or update existing resources, when you dump everything directly to history (as most tool implementations currently do, including yours), you are just wasting big amount of tokens every time you need to grab updated state because you have to add it to history again instead of just hotswapping the reference and possibly not even sending the resource anymore because its no longer needed (so sending raw text and dumping it to history is very bad for iteration on code for example as it eats huge amount of tokens eventually, compared to hotswapping the relevant code every time).",
            "created_at": "2025-04-11T15:08:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/32949#issuecomment-2797186194",
            "id": 2797186194,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32949",
            "node_id": "IC_kwDOAPphoM6muayS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797186194/reactions"
            },
            "updated_at": "2025-04-11T15:08:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2797186194",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I used MCP server concept to visualize the difference between sharing relevant files “manually” by neovim using some fancy logic and exposing a tool which actually understands the structure of the code because it’s an LSP server and LSP understands semantics of the code.\n\nI consider hot swapping resources as valid improvement but not a core issue. This would help with long iterative sessions if I understand it correctly. \n\nFor me the biggest issue is actually finding the right context for given task. Programming problems can be different. Sometimes it’s just adding explanatory comments to the function. Sharing all usages of this function with LLM doesn’t make sense in that case and sharing whole content of the files where function was used doesn’t make sense even more. Sharing a list of symbols from treesitter is fine but may not help in case where references have to be updated as well. Because of that I went to conclusion that context can’t be a static or predefined thing. It has to adapt to the given task if I want to consider it efficient and effective and I want LLM to decide what it actually needs to solve the task.\n\nIf my task is to change function parameters I want LLM to be able to find relative pieces of code (not whole files) where this function was used so it can make necessary adjustments. If some symbol is not clear for LLM I expect it to find definition of it and nothing beyond to avoid context clutter.",
            "created_at": "2025-04-11T21:53:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/32949#issuecomment-2798073383",
            "id": 2798073383,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32949",
            "node_id": "IC_kwDOAPphoM6mxzYn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2798073383/reactions"
            },
            "updated_at": "2025-04-11T21:53:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2798073383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2697331?v=4",
                "events_url": "https://api.github.com/users/lazymaniac/events{/privacy}",
                "followers_url": "https://api.github.com/users/lazymaniac/followers",
                "following_url": "https://api.github.com/users/lazymaniac/following{/other_user}",
                "gists_url": "https://api.github.com/users/lazymaniac/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lazymaniac",
                "id": 2697331,
                "login": "lazymaniac",
                "node_id": "MDQ6VXNlcjI2OTczMzE=",
                "organizations_url": "https://api.github.com/users/lazymaniac/orgs",
                "received_events_url": "https://api.github.com/users/lazymaniac/received_events",
                "repos_url": "https://api.github.com/users/lazymaniac/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lazymaniac/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lazymaniac/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lazymaniac",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32949/comments",
    "created_at": "2025-03-18T00:07:30Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32949/events",
    "html_url": "https://github.com/neovim/neovim/issues/32949",
    "id": 2926679261,
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "save/restore editor state: shada, context, ctx, sessions, mksession",
            "id": 4449264023,
            "name": "editor-state",
            "node_id": "LA_kwDOAPphoM8AAAABCTJhlw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor-state"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32949/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6ucZTd",
    "number": 32949,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 1,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32949/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32949/timeline",
    "title": "AI primitive: produce a well-formatted \"digest\" including the project tree",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-11T21:53:05Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32949",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}