{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nI've read https://github.com/neovim/neovim/pull/31031 and realize that it's meant to be  a 90% solution. I also realize that my use-case are likely not shared by that 90%. But I also feel it could be captured by \"project-specific setup\", which was mentioned in the  PR as a desired use case.\n\nMy current configuration is simple conceptually, but looks ugly in code. It satisfies the following needs:\n\n - (OSS development use-case) Start configured LSPs (gopls, luals, ...) when certain file-types and allowed roots are signaled, using `vim.lsp.start()`. This is straightforward, and would be simplified a little more with `vim.lsp.config()` and `vim.lsp.enable()`.\n - ($DAY_JOB use-case) Allow supplying an [override LSP](https://github.com/aktau/dotfiles/blob/47b85e2c733f8e66b7176da08c4812679d41d316/.vim/lua/lsp.lua#L151-L179)  that inhibits the previously configured LSPs from running under the given condition (matches root path, has matching filetype).\n\nThis override LSP is a company-internal one that can handle multiple languages. Open-source LSPs don't work with the source code in this tree at all.\n\nThis looks akin to the project-specific configuration discussed in https://github.com/neovim/neovim/pull/31031. Where I'd define this special project as \"anything under `$SPECIAL_DIR`\". But I can't figure out how to do it with the new APIs given that they're all global. \n\nTo make it more concrete, If I want that when a file under the \"override\" root is opened, only the override LSP should start **for that specific buffer**, even if the root patterns and filetypes match for other LSPs:\n\n - `vim.lsp.enable()` seems to be a global property, but I want buffer-local decisions.\n - I could imagine a hack where I override the `vim.lsp.config`'s  for the other LSPs so that they match only a dummy file-type (will that (de)register the auto-commands?), but too won't allow them to start.\n - I could imagine inhibiting the start from `vim.lsp.ClientConfig.before_init`. But I don't see it documented that `before_init` is able to do that.\n\nIf `root_marker` was changed to accept a function, I can imagine doing something like this (psuedo-code):\n\n```lua\nfor i, v in pairs(vim.lsp.config) do\n  local old_root_marker = v.root_marker\n  v.root_marker = function(fname)\n    return not vim.startswith(fname, override_root) and old_root_marker(fname) or nil\n  end\n  vim.lsp.config[i] = v\nend\n```\n\nIt's fine if the response is: this use case isn't and won't be supported, just use `vim.lsp.start()`. Just thought I'd bring it up in case I missed something or this type of flexibility is desired in the end.\n\ncc @lewis6991 \n\n### Expected behavior\n\nI expect either:\n\n - Someone telling me that these types of use-cases is exactly what the lower-level `vim.lsp.start` is for.\n - Someone telling me that I misunderstand things and it's easy to use `vim.lsp.config` and `vim.lsp.enable` to do what I want. Or\n - It's not available right now and may come in the future.",
    "closed_at": "2025-03-24T20:33:44Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
        "events_url": "https://api.github.com/users/aktau/events{/privacy}",
        "followers_url": "https://api.github.com/users/aktau/followers",
        "following_url": "https://api.github.com/users/aktau/following{/other_user}",
        "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/aktau",
        "id": 189413,
        "login": "aktau",
        "node_id": "MDQ6VXNlcjE4OTQxMw==",
        "organizations_url": "https://api.github.com/users/aktau/orgs",
        "received_events_url": "https://api.github.com/users/aktau/received_events",
        "repos_url": "https://api.github.com/users/aktau/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/aktau",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Related https://github.com/neovim/neovim/issues/8610\n\nNote that with 'exrc' option enabled, you can define arbitrary project-local logic in a `.nvim.lua` file, which can call `vim.lsp.config('foo')` to define or override your default LSP configs. I don't know if this composes very well if you have multiple \"projects\" open in a single Nvim. But it fully addresses the project-local use-case if you only open one \"project\" in a given Nvim instance.",
            "created_at": "2024-12-11T17:33:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/31552#issuecomment-2536649054",
            "id": 2536649054,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31552",
            "node_id": "IC_kwDOAPphoM6XMjFe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2536649054/reactions"
            },
            "updated_at": "2024-12-11T17:37:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2536649054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Note that with 'exrc' option enabled, you can define arbitrary project-local logic in a `.nvim.lua` file, which can call `vim.lsp.config('foo')` to define or override your default LSP configs. \n\nThat's a good option. For my specific use case it wouldn't work as it is difficult to get any user-defined config file at the root of this project.\n\nSince #31630, `root_dir` (when passed to `vim.lsp.config`, not when passed to `vim.lsp.start`) can be a function. Using it, I was able to build (hack) `lsp_prefer`:\n\nUsage:\n\n```lua\nvim.lsp.config(\"clangd\", { ... })\nvim.lsp.config(\"gopls\", { ... })\nvim.lsp.config(\"companylsp\", { \n  ...,\n  root_dir = function(bufnr, cb)\n      if vim.startswith(vim.api.nvim_buf_get_name(bufnr), \"/my/remote/fs\") then\n        cb(\"/my/remote/fs\")\n      end\n  end \n})\n\nlsp_prefer(\"companylsp\") -- If companylsp starts, no other LSPs start.\n```\n\nThis is based on two things:\n\n 1. If `root_dir` is a function and doesn't call `cb`, the LSP is not started. https://github.com/neovim/neovim/blob/76eca621374b7d19604c820d8ebaefb184de1fc9/runtime/lua/vim/lsp.lua#L288-L292\n 2. Override the `root_dir` for non-preferred LSPs by way of monkey-patching the metatable of `vim.lsp.config`. I could not find a public API way of doing this. There is no way iterate over all registered configs, and even if we had such a way, overriding the current set means that `vim.lsp.config/vim.lsp.enable` calls after overriding don't get patched.\n\nImplementation:\n\n```lua\n-- If the passed-in LSP is started, inhibits other LSP servers from starting.\n-- The LSP in question must have a vim.lsp.Config.root_dir or\n-- vim.lsp.Config.root_markers set.\n--\n---@param override_lsp_name string\nlocal function lsp_prefer(override_lsp_name)\n  -- Collapse the root_dir/root_markers into a root_dir function.\n  --\n  --- @param config vim.lsp.Config\n  local function config_to_root_dir_fn(config)\n    local root_dir = config.root_dir\n    local root_markers = config.root_markers\n\n    if type(root_dir) == \"function\" then return root_dir end\n    if root_dir then return function(_, cb) cb(root_dir) end end\n    return function(bufnr, cb) cb(vim.fs.root(bufnr, root_markers)) end\n  end\n\n  -- Returns the effective root of config for bufnr.\n  --\n  --- @param config vim.lsp.Config\n  --- @param bufnr integer\n  local function eval_root(config, bufnr)\n    if type(config.root_dir) == \"function\" then\n      local saved_root_dir = nil\n      config.root_dir(bufnr, function(root_dir) saved_root_dir = root_dir end)\n      return saved_root_dir\n    end\n\n    if config.root_dir then\n      return config.root_dir\n    end\n\n    return vim.fs.root(bufnr, config.root_markers)\n  end\n\n  -- override_lsp_config takes a |vim.lsp.Config| and modifies it so that the\n  -- LSP is not started when the root matches a given prefix.\n  --\n  --- @param config vim.lsp.Config\n  local function set_inhibit(config)\n    if config.__startup_trigger_overridden then\n      return\n    end\n    config.__startup_trigger_overridden = true -- Only override once.\n\n    -- Translate the existing root_dir/root_markers setup into an equivalent\n    -- root_dir function.\n    local root_dir_fn = config_to_root_dir_fn(config)\n\n    -- Set a |vim.lsp.config.root_dir| function, which takes precedence over\n    -- |vim.lsp.Config.root_markers|.\n    config.root_dir = function(bufnr, cb)\n      if eval_root(vim.lsp.config[override_lsp_name], bufnr) then\n        return -- Inhibit start.\n      end\n\n      root_dir_fn(bufnr, cb)\n    end\n  end\n\n  -- Inhibit other LSPs from starting if override_lsp_name will start.\n  --\n  -- To do this in way that survives calls to |vim.lsp.config| that come\n  -- afterwards, monkey-patch the |vim.lsp.config| metatable. This is only\n  -- possible because it is not protected, see\n  -- https://www.lua.org/pil/13.3.html.\n  --\n  -- The monkey-patch getter ensures that the config for all LSPs not named\n  -- override_lsp_name inhibit startup whenever override_lsp_name would start.\n  local mt = getmetatable(vim.lsp.config)\n  if not mt.__override_lsp_marker then\n    mt.__override_lsp_marker = true -- Only override once.\n\n    local old__index = mt.__index\n    mt.__index = function(self, name)\n      local config = old__index(self, name)\n      if name ~= override_lsp_name then\n        set_inhibit(config)\n      end\n      return config\n    end\n  end\nend\n```\n\nDespite the hackeyness, this approach has a great advantage: I can now really separate my public and company setup properly. ...and I can use plain `vim.lsp.config`/`vim.lsp.enable` for all my configs.\n\ncc @gpanders @mfussenegger @lewis6991 who had a discussion on what this should be able to do.",
            "created_at": "2025-03-24T20:33:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/31552#issuecomment-2749329318",
            "id": 2749329318,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31552",
            "node_id": "IC_kwDOAPphoM6j32-m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2749329318/reactions"
            },
            "updated_at": "2025-03-24T20:35:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2749329318",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for sharing! Since you have put some thought into this, is there a key change we can make to 'exrc' or `vim.lsp` which would make this use-case less cumbersome (less coding)?",
            "created_at": "2025-03-25T11:21:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/31552#issuecomment-2750934577",
            "id": 2750934577,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31552",
            "node_id": "IC_kwDOAPphoM6j9-4x",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2750934577/reactions"
            },
            "updated_at": "2025-03-25T11:21:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2750934577",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "As mentioned `exrc` doesn't work because I don't control what's in (or in parents of) the remote FS folder for which the company LSP should work.\n\nAs for enhancing `vim.lsp` to make this thing easier. There's various ways to make what I want easier to do. Some off the cuff thoughts:\n\n### Avoiding the need to monkey-patch\n\nWe can add an official API for (post-)processing configs.  But this only really replaces the monkey-patching code and the already-modified checks, which are ugly but not very big. \n\nI'd still need to code `config_to_root_dir_fn` (to make any config inhibitable), `eval_root` (to discern the inhibit condition, meaning the activation of the overriding LSP) and a slightly reduced version of `set_inhibit`.\n\nProposals:\n\n**1. A  pre-start hook:**\n\n```lua\nvim.lsp.on_start(function(config, ...) \n  -- ...\n  return config -- if nil, nothing will be started\nend)\n```\n\nIt's unclear what the other arguments should be. For my use case, the bufnr would be needed, for example.\n\n**2. A post-config registration hook:**\n\nThis is cheaper than the former since it's not in the hot path.\n\n```lua\n-- on_config is called before the first time a |vim.lsp.Config| is \n-- used to start an LSP.\nvim.lsp.on_config(function(resolved_config, ...) \n  config.root_dir = do_something(config)\n  return config\nend)\n```\n\nThe question remains about whether `on_config` should replace or append if set.  That could be resolved by making it a field I suppose:\n\n```lua\nlocal prev_on_config = vim.lsp.on_config\nif not prev_on_config\n  prev_on_config = function(c)  return c end -- TODO: avoid endless chaining.\nend\nvim.lsp.on_config = function(resolved_config, ...) \n  -- Translate the existing root_dir/root_markers setup into an equivalent\n  -- root_dir function.\n  local root_dir_fn = config_to_root_dir_fn(resolved_config)\n\n  -- Set a |vim.lsp.config.root_dir| function, which takes precedence over\n  -- |vim.lsp.Config.root_markers|.\n  resolved_config.root_dir = function(bufnr, cb)\n    if eval_root(vim.lsp.config[override_lsp_name], bufnr) then\n      return -- Inhibit start.\n    end\n    root_dir_fn(bufnr, cb)\n  end\n  return prev_on_config(resolved_config)\nen\n```\n\n**Another special \"name\" like `*`**:\n\nIn this proposal, `^` (or anything really) would be applied last. As opposed to `*`, which is applied first. This is very similar to `vim.lsp.on_config`, but reuses the ` vim.lsp.config` name. The disadvantage is that this changes the API into not just taking a `vim.lsp.Config` but also a function. That feels a little dirty.\n\nApart from that, it has (IMHO) the same up/downsides.\n\n```lua\nvim.lsp.config(\"^\", function(config) ... end)\n```\n\nI'm struggling to come up with more general mechanisms that don't paint us into a corner. It would be useful to collate more use cases where vim.lsp.config/vim.lsp.enable are almost but not quite there, and see how the desires can be generalized.\n\n### Making it easier to determining whether an LSP is started and inhibiting it\n\nMost of the code in https://github.com/neovim/neovim/issues/31552#issuecomment-2749329318 is due to:\n\n 1. The need to evaluate the root in order to determine whether the \"override/preferred LSP\" should activate.\n 2. The need to transform the root options into the most flexible variant (`root_dir` as a function) in order to avoid getting started up.\n\nNeovim could export the code it uses internally for this, which would result in mild code savings on my side. The advantage is that it would be more future safe (what if `vim.lsp.Config` gets another field that determines root?). But it feels very specific, and in any case it is not required for an LSP (AFAIU) to even have a root. A `nil` root meaning \"don't start\" is just a convention that I've kept from the nvim-lspconfig days.\n\n### Straw-man proposal\n\n(Note: I don't want this, it is far too specific.) There could be an `isolate` attribute on `vim.lsp.Config` which, if set, would ensure that only this LSP is spawned. This has a lot of caveats (what if there are two LSPs with this property?",
            "created_at": "2025-03-25T14:05:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/31552#issuecomment-2751380001",
            "id": 2751380001,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31552",
            "node_id": "IC_kwDOAPphoM6j_roh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2751380001/reactions"
            },
            "updated_at": "2025-03-26T12:35:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2751380001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "something like helix' `required_root_markers` would help with things like:\n\n- only start prettier lsp when there's a prettier RC present\n- ditto for eslint config\n- only start deno lsp when there's a deno.json\n- never start typescript lsp when there's a deno.json (deno handles typescript itself)",
            "created_at": "2025-03-30T12:53:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/31552#issuecomment-2764550709",
            "id": 2764550709,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31552",
            "node_id": "IC_kwDOAPphoM6kx7I1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764550709/reactions"
            },
            "updated_at": "2025-03-30T12:53:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764550709",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1466420?v=4",
                "events_url": "https://api.github.com/users/bennypowers/events{/privacy}",
                "followers_url": "https://api.github.com/users/bennypowers/followers",
                "following_url": "https://api.github.com/users/bennypowers/following{/other_user}",
                "gists_url": "https://api.github.com/users/bennypowers/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bennypowers",
                "id": 1466420,
                "login": "bennypowers",
                "node_id": "MDQ6VXNlcjE0NjY0MjA=",
                "organizations_url": "https://api.github.com/users/bennypowers/orgs",
                "received_events_url": "https://api.github.com/users/bennypowers/received_events",
                "repos_url": "https://api.github.com/users/bennypowers/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bennypowers/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bennypowers/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bennypowers",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31552/comments",
    "created_at": "2024-12-11T17:08:39Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31552/events",
    "html_url": "https://github.com/neovim/neovim/issues/31552",
    "id": 2733522704,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "configuration, settings",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31552/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6i7j8Q",
    "number": 31552,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31552/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31552/timeline",
    "title": "LSP: inhibit language servers with vim.lsp.config / vim.lsp.enable (project-specific)",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-03-30T12:53:49Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31552",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
        "events_url": "https://api.github.com/users/aktau/events{/privacy}",
        "followers_url": "https://api.github.com/users/aktau/followers",
        "following_url": "https://api.github.com/users/aktau/following{/other_user}",
        "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/aktau",
        "id": 189413,
        "login": "aktau",
        "node_id": "MDQ6VXNlcjE4OTQxMw==",
        "organizations_url": "https://api.github.com/users/aktau/orgs",
        "received_events_url": "https://api.github.com/users/aktau/received_events",
        "repos_url": "https://api.github.com/users/aktau/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/aktau",
        "user_view_type": "public"
    }
}