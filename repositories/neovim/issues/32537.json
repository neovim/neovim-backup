{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nThere already exist multiples plugins that handle progress report ([noice](https://github.com/folke/noice.nvim) or [fidget](https://github.com/j-hui/fidget.nvim) comes to mind). Progress report is currently only used by LSPs in core so for other plugins that would want to report progress, they need to either fake being an LSP or use the private APIs.\n\nSome other usages of progress report APIs could be:\n- progress of external formatters (https://github.com/stevearc/conform.nvim/issues/250 -> workaround available relying on `noice.lsp.progress`)\n- progress of external linters (https://github.com/mfussenegger/nvim-lint/issues/366 -> api available you can hook yourself on a plugin)\n- progress of task runners plugins or user tasks (`git push` and co for example)\n\n### Expected behavior\n\nProvide a `vim.ui.progress` that could look like this:\n\n```\nvim.ui.progress({opts})\n    Starts progress report of an asynchronous action.\n\n    Example: >lua\n        local handle = vim.ui.progress({ name = 'Git push'' })\n        -- provide updates while the task is runnig\n        handle:update({ subtext = \"subtext\"})\n        handle:update({ percent = 75 })\n        -- task succeeded, clear progress report\n        handle:complete()\n        -- or signal a failure\n        handle:fail(\"error message\")\n<\n\n    Parameters:\n      • {opts}        (`table`) Additional options.\n                      • name (string) Name of the long running task\n                      • subtext (string|nil) Description/name of the subtask\n                      • percent (int|nil) If not null, percentage of progress of the task.\n\n    Returns:\n      • {handle}        (`table`) Handle to update the task.\n             • update (function(opts)) Change displayed information\n                          • name (string|nil) Name of the long running task\n                          • subtext (string|nil) Description/name of the subtask\n                          • percent (int|nil) If not null, percentage of progress of the task.\n             • complete (function) Mark task as successfull & remove it\n             • fail (function(string)) Mark task as failed, send an error message & remove the task\n```",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "+1. Added to https://github.com/neovim/neovim/issues/32084\nRelated: \n\n- https://github.com/neovim/neovim/issues/28809\n\nGetting the interface right is the main thing needed here, the implementation can be lifted from an existing plugin (why don't these plugins upstream stuff?). Your outline looks decent.\n\n- should `complete`/`fail` be a single function like `stop(status:'success'|'fail'|'cancel')` ?\n- do we need `cancel()` ? \n- `subtext` => `desc`\n- (orthogonal?) By default, `CTRL-c` should cancel whatever is in-progress.\n\n\nThe [vscode Progress interface](https://github.com/microsoft/vscode-extension-samples/blob/main/progress-sample/README.md) is also worth a look.",
            "created_at": "2025-02-20T20:23:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/32537#issuecomment-2672600804",
            "id": 2672600804,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32537",
            "node_id": "IC_kwDOAPphoM6fTKbk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2672600804/reactions"
            },
            "updated_at": "2025-02-20T21:03:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2672600804",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'd like to throw a small note into the API design of something like this:\nPlease allow quantifying progress as `#steps / #total` instead of only `%percentage completed`.\n\nFor a user of the API that wants percentage, that can always be done trivially by setting `total = 100`.\nFor a lot of other common cases:\n - `#tests run / #total number of tests`\n - `bytes read / total size`\n - `# files checked / # total files`\n\nI think `#steps / #total` would be better, because that way, when progress is slow, it's easier to distinguish if it's due to a large total number of steps, or due to one specific step taking very long.\nPlus, users of the API wouldn't be forced to convert to percentage (meaning less plumbing for the user, as the API or the UI could take care of it).\nAlso, in some cases it can be useful to allow updating the total (more steps detected while the task is running).\n\n```\n    • update (function(opts)) Change displayed information\n        • name (string|nil) Name of the long running task\n        • subtext (string|nil) Description/name of the subtask\n        • progress (int|float|nil) If not null, current progress of the task.\n          If total is null, this is interpreted as percentage.\n        • total (int|float|nil) If not null, total number of steps in the task.\n          If null, progress is interpreted as a percentage.\n```\n```lua\n        local handle = vim.ui.progress({ name = 'Testing' })\n        handle:update({ subtext = \"Running my_tests.lua:my_test()...\"})\n        handle:update({ progress = 1, total =  4}) -- Render as \"1/4\" or \"25%\"\n```\n",
            "created_at": "2025-05-17T17:38:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/32537#issuecomment-2888508049",
            "id": 2888508049,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32537",
            "node_id": "IC_kwDOAPphoM6sKyKR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2888508049/reactions"
            },
            "updated_at": "2025-05-17T17:38:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2888508049",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77458451?v=4",
                "events_url": "https://api.github.com/users/tobii-dev/events{/privacy}",
                "followers_url": "https://api.github.com/users/tobii-dev/followers",
                "following_url": "https://api.github.com/users/tobii-dev/following{/other_user}",
                "gists_url": "https://api.github.com/users/tobii-dev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tobii-dev",
                "id": 77458451,
                "login": "tobii-dev",
                "node_id": "MDQ6VXNlcjc3NDU4NDUx",
                "organizations_url": "https://api.github.com/users/tobii-dev/orgs",
                "received_events_url": "https://api.github.com/users/tobii-dev/received_events",
                "repos_url": "https://api.github.com/users/tobii-dev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tobii-dev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tobii-dev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tobii-dev",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32537/comments",
    "created_at": "2025-02-20T17:33:59Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32537/events",
    "html_url": "https://github.com/neovim/neovim/issues/32537",
    "id": 2866845546,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32537/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 49,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 67,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-05-18T12:44:47Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "I_kwDOAPphoM6q4Jdq",
    "number": 32537,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 8,
        "-1": 0,
        "confused": 0,
        "eyes": 5,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 13,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32537/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32537/timeline",
    "title": "vim.ui.progress",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-05-17T17:38:29Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32537",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/32224410?v=4",
        "events_url": "https://api.github.com/users/zoriya/events{/privacy}",
        "followers_url": "https://api.github.com/users/zoriya/followers",
        "following_url": "https://api.github.com/users/zoriya/following{/other_user}",
        "gists_url": "https://api.github.com/users/zoriya/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zoriya",
        "id": 32224410,
        "login": "zoriya",
        "node_id": "MDQ6VXNlcjMyMjI0NDEw",
        "organizations_url": "https://api.github.com/users/zoriya/orgs",
        "received_events_url": "https://api.github.com/users/zoriya/received_events",
        "repos_url": "https://api.github.com/users/zoriya/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zoriya/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zoriya/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zoriya",
        "user_view_type": "public"
    }
}