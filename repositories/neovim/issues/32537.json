{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nThere already exist multiples plugins that handle progress report ([noice](https://github.com/folke/noice.nvim) or [fidget](https://github.com/j-hui/fidget.nvim) comes to mind). Progress report is currently only used by LSPs in core so for other plugins that would want to report progress, they need to either fake being an LSP or use the private APIs.\n\nSome other usages of progress report APIs could be:\n- progress of external formatters (https://github.com/stevearc/conform.nvim/issues/250 -> workaround available relying on `noice.lsp.progress`)\n- progress of external linters (https://github.com/mfussenegger/nvim-lint/issues/366 -> api available you can hook yourself on a plugin)\n- progress of task runners plugins or user tasks (`git push` and co for example)\n\n### Expected behavior\n\nsee https://github.com/neovim/neovim/issues/32537#issuecomment-2672600804\n\n\n\n<details>\n<summary>oudated proposal</summary>\n\nProvide a `vim.ui.progress` that could look like this:\n\n\n```\nvim.ui.progress({opts})\n    Starts progress report of an asynchronous action.\n\n    Example: >lua\n        local handle = vim.ui.progress({ name = 'Git push'' })\n        -- provide updates while the task is runnig\n        handle:update({ subtext = \"subtext\"})\n        handle:update({ percent = 75 })\n        -- task succeeded, clear progress report\n        handle:complete()\n        -- or signal a failure\n        handle:fail(\"error message\")\n<\n\n    Parameters:\n      • {opts}        (`table`) Additional options.\n                      • name (string) Name of the long running task\n                      • subtext (string|nil) Description/name of the subtask\n                      • percent (int|nil) If not null, percentage of progress of the task.\n\n    Returns:\n      • {handle}        (`table`) Handle to update the task.\n             • update (function(opts)) Change displayed information\n                          • name (string|nil) Name of the long running task\n                          • subtext (string|nil) Description/name of the subtask\n                          • percent (int|nil) If not null, percentage of progress of the task.\n             • complete (function) Mark task as successfull & remove it\n             • fail (function(string)) Mark task as failed, send an error message & remove the task\n```\n\n</details>\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "+1. Added to https://github.com/neovim/neovim/issues/32084\nRelated: \n\n- https://github.com/neovim/neovim/issues/28809\n\n\n\n# Proposal\n\nNote: start with [vscode withProgress()](https://github.com/microsoft/vscode-extension-samples/blob/main/progress-sample/README.md) to see what features are useful.\n\n\n## Phase 1\n\nFocus on storing and managing the *state*. This phase does not address *display*.\n\n- Add a new \"message kind\".\n- Progress messages are stored in the internal messages and appear in `:messages`.\n- All messages (incl. non-progress) have an id.\n- There is some way to update an existing message. Initially this might only be relevant for \"progress\" messages.\n    - `nvim_echo({id=42, { status='done|fail|cancel|waiting|...', percent=75, }`\n- Updating a (progress) message emits a `Progress` or `Message` event which plugins can listen to.\n\nsketch:\n\n```lua\nlocal msg_id = vim.api.nvim_echo('Counting (0/' .. n .. ')', { status = 'begin', data = { percent = 0 } })\n\nfor i = 1, n do\n  vim.uv.sleep(1000)\n  local msg_opts = { id = msg_id, status = 'report', data = { percent = math.floor(i / n) } }\n  vim.api.nvim_echo('Counting (' .. i .. '/' .. n .. ')', msg_opts)\nend\n\nvim.api.nvim_echo('Counting (' .. i .. '/' .. n .. ')', { id = msg_id, status = 'end', data = { percent = 1 } })\n```\n\n## Phase 2\n\nAddress any *display* topics that we discover.\n\n- After some bake-time, see if a dedicated `vim.ui.progress()` interface is needed.\n    - validates input, triggers event\n    - displays?\n\n\n## Closed questions\n\n- should `complete`/`fail` be a single function like `stop(status:'success'|'fail'|'cancel')` ? do we need `cancel()` ? \n    - not initially. just have a `status` parameter, and include this in the emitted event.\n- By default, `CTRL-c CTRL-c` should cancel whatever is in-progress?\n    - yes, but off-topic here.",
            "created_at": "2025-02-20T20:23:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/32537#issuecomment-2672600804",
            "id": 2672600804,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32537",
            "node_id": "IC_kwDOAPphoM6fTKbk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2672600804/reactions"
            },
            "updated_at": "2025-07-03T17:36:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2672600804",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'd like to throw a small note into the API design of something like this:\nPlease allow quantifying progress as `#steps / #total` instead of only `%percentage completed`.\n\nFor a user of the API that wants percentage, that can always be done trivially by setting `total = 100`.\nFor a lot of other common cases:\n - `#tests run / #total number of tests`\n - `bytes read / total size`\n - `# files checked / # total files`\n\nI think `#steps / #total` would be better, because that way, when progress is slow, it's easier to distinguish if it's due to a large total number of steps, or due to one specific step taking very long.\nPlus, users of the API wouldn't be forced to convert to percentage (meaning less plumbing for the user, as the API or the UI could take care of it).\nAlso, in some cases it can be useful to allow updating the total (more steps detected while the task is running).\n\n```\n    • update (function(opts)) Change displayed information\n        • name (string|nil) Name of the long running task\n        • subtext (string|nil) Description/name of the subtask\n        • progress (int|float|nil) If not null, current progress of the task.\n          If total is null, this is interpreted as percentage.\n        • total (int|float|nil) If not null, total number of steps in the task.\n          If null, progress is interpreted as a percentage.\n```\n```lua\n        local handle = vim.ui.progress({ name = 'Testing' })\n        handle:update({ subtext = \"Running my_tests.lua:my_test()...\"})\n        handle:update({ progress = 1, total =  4}) -- Render as \"1/4\" or \"25%\"\n```\n",
            "created_at": "2025-05-17T17:38:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/32537#issuecomment-2888508049",
            "id": 2888508049,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32537",
            "node_id": "IC_kwDOAPphoM6sKyKR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 8,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2888508049/reactions"
            },
            "updated_at": "2025-06-23T08:38:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2888508049",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77458451?v=4",
                "events_url": "https://api.github.com/users/tobii-dev/events{/privacy}",
                "followers_url": "https://api.github.com/users/tobii-dev/followers",
                "following_url": "https://api.github.com/users/tobii-dev/following{/other_user}",
                "gists_url": "https://api.github.com/users/tobii-dev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tobii-dev",
                "id": 77458451,
                "login": "tobii-dev",
                "node_id": "MDQ6VXNlcjc3NDU4NDUx",
                "organizations_url": "https://api.github.com/users/tobii-dev/orgs",
                "received_events_url": "https://api.github.com/users/tobii-dev/received_events",
                "repos_url": "https://api.github.com/users/tobii-dev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tobii-dev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tobii-dev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tobii-dev",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'd like to propose a bit different, more \"flat\" design. Although nothing majorly wrong with returning a special object after initiating progress, it (arguably) has several issues:\n- Requires a dedicated design. Not bad per se, but trying to reuse existing approaches might be better.\n- Can be harder for users/plugins to override/reimplement. I assume this is meant to be overridable by plugins (like `vim.ui.select()`, `vim.ui.input()`, `vim.notify()`), so this should be taken into account.\n- Leads to more convoluted tests, as it would require transferring all test code to be executed in child process.\n\nThe suggestion mostly reuses already existing approaches of [LSP `workDoneProgress`](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workDoneProgressReport) and loosely some basic Nvim's API/Lua functions (`nvim_buf_set_extmark()`, `vim.diagnostic.set()`, etc.). It can look something like this:\n\n```lua\n--- @param ns_id integer Namespace for progress source. Implementations can\n---   use to display information about the source (like name of LSP server)\n---   based on namespace's name. Can also be a string directly.\n--- @param token integer|string Token to identify specific progress report\n---   within namespace.\n--- @param kind 'begin'|'report'|'end' Stage of progress. Can also have `'fail'` if needed.\n--- @param opts? { title: string?, cancellable: boolean?, message: string?, percentage: integer? }\n---   Notes:\n---   - `title` is required for `'begin'` kind.\n---   - `message` can be used to show more detailed `#done / #total` progress,\n---     as is currently done by LSP servers.\nvim.ui.progress = function(ns_id, token, kind, opts) end\n```\n",
            "created_at": "2025-06-02T12:10:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/32537#issuecomment-2930373767",
            "id": 2930373767,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32537",
            "node_id": "IC_kwDOAPphoM6uqfSH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2930373767/reactions"
            },
            "updated_at": "2025-06-02T12:10:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2930373767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hi, I was wondering about this as well and started a proof of concept plugin/api.. \n\nThe idea I have is that neovim should be progress \"broker\", to decouple progress source/event from progress visualization.\nThis api would allow to have \"levels\" or \"categories\" to which progress sources could direct the event to, and with them, specific visualizations for each.\n\nFor example, LSP workDoneProgress events are \"global\" in a sense that a user would want to always see it. There are also progress events that only have meaning to a single buffer, like clangd's fileStatus event.\n\nIf the api in the plugin where to exist in neovim, I think it could be like this\n\nCreate a progress viewer/display:\n```lua\nlocal display = vim.progress.create_display({ --[[categories]]  }, { on_start = function(event)  end, on_update = function(event) end, on_end = function(event) end }) \n\n```\n\nSend progress event:\n```lua\nlocal event = vim.progress.create_event(srcid, category, { title = '...', --[[additional data]] })\nvim.progress.event_start(event)\n-- ...\nvim.progress.event_update(event, { message = '..', progress = 0.4 })\n-- ...\nvim.progress.event_end(event, { message = '..' , --[[...]] })\n```\n\nThis [plugin](https://github.com/drehren/fltprogr.nvim) implements a similar idea.",
            "created_at": "2025-06-03T14:44:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/32537#issuecomment-2935680545",
            "id": 2935680545,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32537",
            "node_id": "IC_kwDOAPphoM6u-u4h",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2935680545/reactions"
            },
            "updated_at": "2025-06-23T08:38:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2935680545",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2888452?v=4",
                "events_url": "https://api.github.com/users/drehren/events{/privacy}",
                "followers_url": "https://api.github.com/users/drehren/followers",
                "following_url": "https://api.github.com/users/drehren/following{/other_user}",
                "gists_url": "https://api.github.com/users/drehren/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/drehren",
                "id": 2888452,
                "login": "drehren",
                "node_id": "MDQ6VXNlcjI4ODg0NTI=",
                "organizations_url": "https://api.github.com/users/drehren/orgs",
                "received_events_url": "https://api.github.com/users/drehren/received_events",
                "repos_url": "https://api.github.com/users/drehren/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/drehren/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/drehren/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/drehren",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Updated proposal: https://github.com/neovim/neovim/issues/32537#issuecomment-2672600804\n\nThis may be a case where we don't need a new \"object\", instead we can augment the existing vim messages concept.\n\nI hid some comments here which are already covered by the proposal (especially the part that mentions referring vscode `withProgress()`).\n\nThe ['busy' status](https://github.com/neovim/neovim/pull/34493) is a statusline-only thing, but connecting it to the \"progress\" concept could make sense (later).",
            "created_at": "2025-06-23T11:40:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/32537#issuecomment-2996141813",
            "id": 2996141813,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32537",
            "node_id": "IC_kwDOAPphoM6ylX71",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996141813/reactions"
            },
            "updated_at": "2025-06-23T11:40:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996141813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Does `nvim_msg_set` also emit the message? In that case maybe it fits in `nvim_echo` which already has an `opts` field?",
            "created_at": "2025-06-24T14:33:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/32537#issuecomment-3000752168",
            "id": 3000752168,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32537",
            "node_id": "IC_kwDOAPphoM6y29go",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3000752168/reactions"
            },
            "updated_at": "2025-06-24T14:33:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3000752168",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Could extend `nvim_echo` as a starting point, and see how far we get with that.",
            "created_at": "2025-06-25T13:48:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/32537#issuecomment-3004853695",
            "id": 3004853695,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32537",
            "node_id": "IC_kwDOAPphoM6zGm2_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004853695/reactions"
            },
            "updated_at": "2025-06-25T13:48:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004853695",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@shadmansaleh replying to you here because matrix is broken (also, matrix is not good for long outlines, let's use either email or issues/discussions for that)\n\n\n> Currently, we only store some off the messages as message-history.\n\n`nvim_echo` can make that decision.\n\n> message-history stores the messages as linked-list ... We'd probably want some type of map. [and] timestamp on the messages too\n\nIterating a linked-list isn't ideal but it's fine for now. Vim does this in many places. It's \"ugly\"/non-optimal but doesn't really matter for now, though we certainly refactor messages in the future (out of scope for now).\n\n> nvim_echo can't be used I think. Because, we'd like to return the id once message is created right? but nvim_echo doesn't return anything.\n\n`nvim_echo` can change its return type. I will plan to implement https://github.com/neovim/neovim/issues/31903 this weekend to unblock you there.\n\n> implementing in lua means it's more accessable for future updates, C generally feels like will be harder to update in future too. What benefits do we get for the added complication?\n\nWe can't have two parallel message systems. We will migrate messages from C eventually.\n\n> messages as is doesn't feel like a good spot for showing progress.\n\nCheck `:help vim._extui` and try `require('vim._extui').enable()`, loosely referred to as \"ui2\". In Nvim 0.12 we will enable this by default. For now, it just means you don't need to worry about where progress is shown, we can route it to either the \"message\" area or the \"notifications\" area.\n\n> Progress updates can get quite spammy.\n\nhttps://github.com/neovim/neovim/issues/34281 \"ui2\" totally solves message spam. It's just not a thing anymore.\n\nFurthermore, presentation doesn't matter right now, we can tweak that later. It's not something we need to spend much time on. That's why I separated \"Phase 1\" and \"Phase 2\" above.\n\n\n> I think the following items can be useful for progress ... `msg`, `title`\n\nCould add a `title` to `nvim_echo`, but let's consider that out of scope (P2) for now.\n\n> `location`: where to show the message\n\nThis is `kind` field of `nvim_echo`.\n\n> `onCancel`: if not provided progress item can be canceled. When user presses ctrl-c or some x button on ui we can call this call back to notify the client\n\nFor now, to peform \"cancel\" we may need to do that by `nvim_echo(..., {id=42, status='cancel'})`, or something like that. No callbacks in this phase.\n",
            "created_at": "2025-07-03T17:39:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/32537#issuecomment-3033055999",
            "id": 3033055999,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32537",
            "node_id": "IC_kwDOAPphoM60yML_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3033055999/reactions"
            },
            "updated_at": "2025-07-03T17:39:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3033055999",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32537/comments",
    "created_at": "2025-02-20T17:33:59Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32537/events",
    "html_url": "https://github.com/neovim/neovim/issues/32537",
    "id": 2866845546,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32537/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 90,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 70,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-07-07T17:05:04Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "I_kwDOAPphoM6q4Jdq",
    "number": 32537,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 10,
        "-1": 0,
        "confused": 0,
        "eyes": 5,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 15,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32537/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32537/timeline",
    "title": "vim.ui.progress",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-03T17:39:13Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32537",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/32224410?v=4",
        "events_url": "https://api.github.com/users/zoriya/events{/privacy}",
        "followers_url": "https://api.github.com/users/zoriya/followers",
        "following_url": "https://api.github.com/users/zoriya/following{/other_user}",
        "gists_url": "https://api.github.com/users/zoriya/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zoriya",
        "id": 32224410,
        "login": "zoriya",
        "node_id": "MDQ6VXNlcjMyMjI0NDEw",
        "organizations_url": "https://api.github.com/users/zoriya/orgs",
        "received_events_url": "https://api.github.com/users/zoriya/received_events",
        "repos_url": "https://api.github.com/users/zoriya/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zoriya/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zoriya/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zoriya",
        "user_view_type": "public"
    }
}