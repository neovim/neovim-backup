{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nI found an attempt to call `vim.lsp.semantic_tokens.start()` on nonexisting buffer and then found that it was a dummy buffer created by `vim.api.nvim_get_option_value('lisp', { filetype = 'lua' })` called by some plugin. The following part\n\nhttps://github.com/neovim/neovim/blob/25b53b593ef6f229fbec5b3dc205a7539579d13a/src/nvim/api/options.c#L103-L131 shows how such buffer is created. \n\nThe user may not know about such workarounds. On the other side it is a documented behavior, not a bug. \n\n### Expected behavior\n\nIn this case it would be good to include some hint how to detect such buffer and filter it out in `FileType` autocommand (probably within `:h FileType`). I have no better idea than using something like\n\n```lua\nlocal function isDummyFileTypeBuffer(buf)\n  local opts = vim.bo[buf]\n  return opts.buftype == 'nofile' and opts.bufhidden == 'hide' and opts.swapfile == false and opts.modeline == false\nend\n\n\nvim.api.nvim_create_autocmd('FileType', {\n  pattern = '*',\n  callback = function (args)\n    if args.file == args.match and isDummyFileTypeBuffer(args.buf) then\n      return\n    end\n    vim.print(args)\n  end,\n})\n\nvim.api.nvim_get_option_value('lisp', {filetype = 'php'})\n```\nbut I am aware that it depends on probability that there is no other such buffer (and on undocumented internals).",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "The docs already contain:\n```vimdoc\n                • filetype: |filetype|. Used to get the default option for a\n                  specific filetype. Cannot be used with any other option.\n                  Note: this will trigger |ftplugin| and all |FileType|\n                  autocommands for the corresponding filetype.\n```\n\n`vim.filetype.get_option()` is preferred since this has caching.\n\n\nWhether a buffer is a dummy buffer created from `nvim_buf_get_option` is irrelevant. Autocmds should always be checking things like `buftype` etc.\n\n> I found an attempt to call vim.lsp.semantic_tokens.start() \n\nWhy was this being called? It is enabled by default when a client attaches.",
            "created_at": "2024-11-01T14:58:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/30957#issuecomment-2452018120",
            "id": 2452018120,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30957",
            "node_id": "IC_kwDOAPphoM6SJtPI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452018120/reactions"
            },
            "updated_at": "2024-11-01T15:02:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452018120",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Maybe it should execute `b:undo_ftplugin` (e.g. by setting filetype of the dummy buffer to empty) after getting the option value?",
            "created_at": "2024-11-02T02:20:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/30957#issuecomment-2452805252",
            "id": 2452805252,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30957",
            "node_id": "IC_kwDOAPphoM6SMtaE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452805252/reactions"
            },
            "updated_at": "2024-11-02T02:21:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2452805252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The docs already contain:\n> \n> ```\n>                 • filetype: |filetype|. Used to get the default option for a\n>                   specific filetype. Cannot be used with any other option.\n>                   Note: this will trigger |ftplugin| and all |FileType|\n>                   autocommands for the corresponding filetype.\n> ```\n> \n> `vim.filetype.get_option()` is preferred since this has caching.\n> \n> Whether a buffer is a dummy buffer created from `nvim_buf_get_option` is irrelevant. Autocmds should always be checking things like `buftype` etc.\n> \n> > I found an attempt to call vim.lsp.semantic_tokens.start()\n> \n> Why was this being called? It is enabled by default when a client attaches.\n\n\nI also mentioned that it's documented. The problem is that the user cannot simply guess what buffer has to be excluded in probably most user-side uses, but especially for starting LSP autocommands. It seems to be easier to catch such buffer if it is created by a plugin than when it's created internally and has filetype not specific to any plugin (e.g. `lua` in contrast to `gitsigns-blame`). \n\nThis initial file\n```lua\nvim.api.nvim_create_autocmd('FileType', {\n  pattern = '*',\n  callback = function (args)\n    vim.print(args)\n  end,\n})\n\nvim.filetype.get_option('php', 'lisp')\nvim.filetype.get_option('php', 'lisp')\n```\ngives \n```\n{\n  buf = 2,\n  event = \"FileType\",\n  file = \"php\",\n  id = 10,\n  match = \"php\"\n}\n{\n  buf = 3,\n  event = \"FileType\",\n  file = \"php\",\n  id = 10,\n  match = \"php\"\n}\nPress ENTER or type command to continue\n```\nShouldn't `args` be printed once because of caching?\n\nI noticed that\n```lua\nvim.api.nvim_create_autocmd('FileType', {\n  pattern = '*',\n  callback = vim.print\n})\n\nvim.filetype.get_option('php', 'lisp')\nvim.filetype.get_option('php', 'lisp')\n```\nshows only one message for me.\n\nThe mentioned attempt to call `vim.lsp.semantic_tokens.start()` was probably caused by attaching lua-ls to such dummy buffer. The real case was testing ultimate-autopair plugin on lua file. This plugin calls `vim.filetype.get_option` if available, but for this issue I selected its `vim.api` part as the example closer to minimal. \n\nI have no idea how to apply `vim.b[args.buf].undo_ftplugin` - tried `se ft=` without effect.",
            "created_at": "2024-11-03T13:48:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/30957#issuecomment-2453434490",
            "id": 2453434490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30957",
            "node_id": "IC_kwDOAPphoM6SPHB6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453434490/reactions"
            },
            "updated_at": "2024-11-03T13:48:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453434490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Minimized user case:\n```lua\nvim.api.nvim_create_autocmd('FileType', {\n  pattern = {'lua'},\n  callback = function ()\n    vim.lsp.start({\n      name = 'luals',\n      filetype = 'lua',\n      cmd = {'lua-language-server'},\n      root_dir = vim.uv.cwd(),\n      on_attach = function ()\n        vim.filetype.get_option('lua', 'lisp')\n      end\n    })\n  end,\n})\n```\n![Image](https://github.com/user-attachments/assets/9c88db4c-f4ed-4ee7-ad51-79a8d47bde5e)\n",
            "created_at": "2024-11-03T14:44:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/30957#issuecomment-2453452696",
            "id": 2453452696,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30957",
            "node_id": "IC_kwDOAPphoM6SPLeY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453452696/reactions"
            },
            "updated_at": "2024-11-03T14:44:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453452696",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The LSP spec AFAIK doesn't support attaching to documents that don't represent a physical file so this needs to be gated with a check with `vim.bo.buftype ~= 'nofile'`. \n\nSee #31031",
            "created_at": "2024-11-03T15:29:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/30957#issuecomment-2453467181",
            "id": 2453467181,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30957",
            "node_id": "IC_kwDOAPphoM6SPPAt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453467181/reactions"
            },
            "updated_at": "2024-11-03T15:29:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453467181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The LSP spec AFAIK doesn't support attaching to documents that don't represent a physical file so this needs to be gated with a check with `vim.bo.buftype ~= 'nofile'`.\n> \n> See [#31031](https://github.com/neovim/neovim/pull/31031)\n\nhttps://github.com/neovim/neovim/pull/31031/files#diff-c6a4160a416b22cd1fd833b8f852c4fbaf1f25adf75053e82a1025aa2c607ac9R265-R272 it would cover (I don't know whether precisely or excessively) probably most such cases if it were become the recommended way to configure LSP client. ",
            "created_at": "2024-11-03T16:30:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/30957#issuecomment-2453487028",
            "id": 2453487028,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30957",
            "node_id": "IC_kwDOAPphoM6SPT20",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453487028/reactions"
            },
            "updated_at": "2024-11-03T16:30:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453487028",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30957/comments",
    "created_at": "2024-10-27T11:38:30Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30957/events",
    "html_url": "https://github.com/neovim/neovim/issues/30957",
    "id": 2616534121,
    "labels": [
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30957/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6b9SRp",
    "number": 30957,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30957/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30957/timeline",
    "title": "Document how to defend against side effects of `nvim_get_option_value()` with `filetype` option",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:26Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30957",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
        "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
        "followers_url": "https://api.github.com/users/przepompownia/followers",
        "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
        "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/przepompownia",
        "id": 11404453,
        "login": "przepompownia",
        "node_id": "MDQ6VXNlcjExNDA0NDUz",
        "organizations_url": "https://api.github.com/users/przepompownia/orgs",
        "received_events_url": "https://api.github.com/users/przepompownia/received_events",
        "repos_url": "https://api.github.com/users/przepompownia/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/przepompownia",
        "user_view_type": "public"
    }
}