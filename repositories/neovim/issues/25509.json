{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "# Problem\n\n- There are various different ways of representing a position (e.g. `:help api-indexing`).\n    - https://github.com/neovim/neovim/issues/25272#issuecomment-1729294143\n- Comparing or reasoning about positions requires boilerplate / utility functions such as:\n    - [get_range_from_mark](https://github.com/neovim/neovim/pull/25301#discussion_r1334298996)\n    - [make_line_range_params](https://github.com/neovim/neovim/pull/25194#discussion_r1328985155)\n    - [compare_position](https://github.com/vscode-neovim/vscode-neovim/pull/1490/files#diff-356c71d28d1ad83654bec96ec39481938dd06e6589a05d781ed2ab028d9296b6R70-R84)\n    - `ui.lua:position_in_range()` https://github.com/neovim/neovim/pull/33500#discussion_r2049095231\n\nCopying @mfussenegger summary:\n\n> cursor/position related functions:\n> \n> * `vim.region(..., pos1, pos2, ...)`\n>   * pos1 & pos2: `integer[] (line, column)` `(0,0)` indexed byte positions\n> * `vim.inspect_pos(..., row, col, ...)` 0 based\n> * `vim.show_pos(..., row, col, ...)` 0 based\n> * `vim.highlight.range(... start, finish, ...)` - `{line, col}` tuple, doesn't mention if `(0, 0)` or something else?\n> * `vim.treesitter.get_node_text(node, ...)`\n> * `vim.fn.cursor(lnum, col, off)` `(1, 1)` - With `0` meaning stay in current line or column\n> * `vim.fn.getpos(expr)` - result is `[bufnr, lnum, col, off]` (1, 1) based;\n> * `vim.fn.getcurpos([{winid}])` like ^ but with an extra `curswant` in the result.\n> * `vim.fn.getline(lnum, end)` - 1 based\n> * `nvim_win_set_cursor(win, pos)` -  `pos` is `(row, col)` tuple  with `(1, 0)` indexing\n> * `nvim_win_get_cursor(win)` - Mirrors `nvim_win_set_cursor`\n> * `nvim_buf_get_lines(..., start, end, ...)` - 0 based, end-exclusive\n> * `nvim_buf_get_lines(..., start_row, start_col, end_row, end_col...)` - 0 based, row indices end-inclusive, column indices end-exclusive\n> \n> LSP structures:\n> \n> ```\n> Position\n>    line: integer 0 based\n>    character: integer 0 base  (but encoding dependent\n> ```\n> \n> ```\n> Range\n>     start: Position\n>     end: Position\n> ```\n\n# Proposal\n\nImplement `vim.pos` module for representing and working with normalized positions.\n\n- `vim.pos(row, col)` creates a `vim.pos.Pos` position using \"normalized\" indexing (TBD).\n    - `vim.pos(expr: string)` takes a [getpos()-like expression](https://neovim.io/doc/user/builtin.html#line()).\n- `vim.pos.Pos` structure is defined as:\n  ```\n  vim.pos.Pos: {\n    kind?: 'mark' | 'extmark' | 'cursor' | ...\n    col: number\n    row: number\n    buf?: number -- Buffer id.\n\n    -- TODO: do we need these fields?\n    -- row_offset?: number\n    -- col_offset?: number\n    -- vcol?: number  -- virtual column\n    -- vrow?: number  -- virtual row\n  }\n  ```\n- `vim.pos.cmp()` compares positions (analogous to `vim.version.cmp()`)\n- `vim.pos.relative(kind:'cursor'|'editor'|'laststatus'|'mouse'|'tabline'|'win')` gets raw positions (exposes internals of `nvim_open_win(…,{relative=…})`\n- For integration with legacy interfaces it can _accept_ and _produce_ any kind of position. Interface proposal:\n  ```\n  vim.pos.mark(row,col)       -- Creates a position from a mark-like row/col.\n  vim.pos.extmark(row,col)    -- Creates a position from a extmark-like row/col.\n  vim.pos.cursor(row,col)     -- Creates a position from a cursor-like row/col.\n  vim.pos.mark(pos)           -- Converts `pos` to a mark-like position.\n  vim.pos.extmark(pos)        -- Converts `pos` to a extmark-like position.\n  vim.pos.cursor(pos)         -- Converts `pos` to a cursor-like position.\n  ```",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Since the title but not the description mentions ranges, for the sake of completeness: Treesitter has a \r\n* `Range2`: `(start_row, end_row)`\r\n* `Range4`: `(start_row, start_col, end_row, end_col)`\r\n* `Range6`: `(start_row, start_col, start_byte, end_row, end_col, end_byte)`\r\n\r\nwhich should play nice with a `vim.range()` object -- possibly refactored into pairs of `vim.pos.Pos`. This (and probably other use cases) would require a `Pos2` and `Pos3`, though (both created via `vim.pos()` of course, depending on the arguments).\r\n\r\nThere's also `vim.region`, which is a table of ranges (necessary to represent block selections) that should similarly be folded into this API.",
            "created_at": "2023-10-05T09:40:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1748497296",
            "id": 1748497296,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oN_OQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748497296/reactions"
            },
            "updated_at": "2023-10-05T09:51:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748497296",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> would require a `Pos4` and `Pos6`\r\n\r\nWhat would those look like?",
            "created_at": "2023-10-05T09:47:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1748507553",
            "id": 1748507553,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oOBuh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748507553/reactions"
            },
            "updated_at": "2023-10-05T09:47:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748507553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sorry, division by two is hard... That should of course have been `Pos2` (row,col)  and `Pos3` (row,col,byte).",
            "created_at": "2023-10-05T09:52:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1748514136",
            "id": 1748514136,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oODVY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748514136/reactions"
            },
            "updated_at": "2023-10-05T09:52:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748514136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Would we actually need separate classes or could `Pos` have optional fields?",
            "created_at": "2023-10-05T14:49:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1749064223",
            "id": 1749064223,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oQJof",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749064223/reactions"
            },
            "updated_at": "2023-10-05T14:49:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749064223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think that should be an implementation detail and not exposed to `vim.pos()`. Separate classes are used (and useful) for type checking; I expect Lewis added them based on painful experience with the previous, untyped, treesitter code.",
            "created_at": "2023-10-05T14:54:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1749072826",
            "id": 1749072826,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oQLu6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749072826/reactions"
            },
            "updated_at": "2023-10-05T14:54:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749072826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> vim.pos(row, col) creates a vim.pos.Pos position using \"normalized\" indexing (TBD).\r\n\r\nMaybe optionally overload it to take an `expr` from `getpos()`\r\nI think I've copied a variant of:\r\n\r\n```lua\r\n    local start = vim.fn.getpos('v')\r\n    local end_ = vim.fn.getpos('.')\r\n\r\n    local start_row = start[2]\r\n    local start_col = start[3]\r\n\r\n    local end_row = end_[2]\r\n    local end_col = end_[3]\r\n\r\n    if start_row == end_row and end_col < start_col then\r\n      end_col, start_col = start_col, end_col\r\n    elseif end_row < start_row then\r\n      start_row, end_row = end_row, start_row\r\n      start_col, end_col = end_col, start_col\r\n    end\r\n    -- buf_get_text is 0-indexed; end-col is exclusive\r\n    local lines = api.nvim_buf_get_text(0, start_row - 1, start_col - 1, end_row - 1, end_col, {})\r\n    return table.concat(lines, '\\n')\r\n\r\n```\r\n\r\nAround in 3 plugins now, would be cool if that could be shortened to something like:\r\n\r\n\r\n```lua\r\nvim.range('v', '.'):normalize():text(bufnr)\r\n                    ^^^^^^^^^^^\r\n                    Ensures start is before end\r\n```\r\n\r\n> Would we actually need separate classes or could Pos have optional fields?\r\n\r\nMaybe something to keep in mind: If we went with different metatables to carry additional information, the raw table `{x, y}` could be passed without conversion as argument to functions that take a tuple as a parameter.\r\n\r\nAlthough it looks like that's currently only `nvim_win_set_cursor(win, pos)` and that uses (1, 0) indexing instead of (0, 0)\r\n\r\n---\r\n\r\nAlso highlighting one LSP use-case: Encoding specific column conversion.\r\nE.g. LSP uses utf-16 columns. But translating unfortunately depends on the line contents. I'm not sure how that would fit into a `vim.pos` (maybe we'll need a `lsp.to_pos(lsp.Position, buffer, encoding)`)",
            "created_at": "2023-10-05T16:10:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1749224055",
            "id": 1749224055,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oQwp3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749224055/reactions"
            },
            "updated_at": "2023-10-05T16:10:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749224055",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Maybe something to keep in mind: If we went with different metatables to carry additional information, the raw table {x, y} could be passed without conversion as argument to functions that take a tuple as a parameter.\r\n\r\n\r\nIt would allow to use `unpack` on a `Position`, which would enable composition with all (0, 0) based functions. An example:\r\n\r\n\r\n```lua\r\nlocal p1 = vim.pos({4, 1})\r\nvim.inspect_pos(0, unpack(p1))\r\nvim.show_pos(0, unpack(p1))\r\n```\r\n\r\nI know some here are not a fan of too much OO style or metatables, but I think for position and range it is very tempting to implement some. For example:\r\n\r\n```lua\r\n---@class vim.Position (0,0) indexed (line, column) tuple\r\nlocal Position = {}\r\n\r\nlocal position_mt = {\r\n  __index = Position,\r\n  __tostring = function(x)\r\n    return \"(\" .. x[1] .. \", \" .. x[2] .. \")\"\r\n  end,\r\n  __eq = function(a, b)\r\n    return a[1] == b[1] and a[2] == b[2]\r\n  end,\r\n  __lt = function(a, b)\r\n    return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\r\n  end,\r\n  __le = function(a, b)\r\n    return a[1] <= b[1] or (a[1] == b[1] and a[2] <= b[2])\r\n  end,\r\n}\r\n\r\n---@param position string|integer[]\r\n---@return vim.Position\r\nfunction M.pos(position)\r\n  local pos\r\n  if type(position) == \"string\" then\r\n    -- [bufnum, lnum, col, off]; 1-indexed\r\n    pos = vim.fn.getpos(position)\r\n    pos = { pos[2] - 1, pos[3] - 1}\r\n  else\r\n    pos = position\r\n  end\r\n  return setmetatable(pos, position_mt)\r\nend\r\n```\r\n\r\nWould make things like the `normalize` trivial:\r\n\r\n```lua\r\n---@class vim.Range\r\nlocal Range = {}\r\n\r\nlocal range_mt = {\r\n  __index = Range,\r\n  __tostring = function(range)\r\n    return tostring(range[1]) .. \", \" .. tostring(range[2])\r\n  end\r\n}\r\n\r\nfunction Range:normalize()\r\n  if self[1] > self[2] then\r\n    return setmetatable({self[2], self[1]}, range_mt)\r\n  else\r\n    return self\r\n  end\r\nend\r\n\r\nfunction Range:text(bufnr)\r\n  local lines = api.nvim_buf_get_text(bufnr, self[1][1], self[1][2], self[2][1], self[2][2] + 1, {})\r\n  return table.concat(lines, \"\\n\")\r\nend\r\n```\r\n\r\nWe could also enable conversion from `(0, 0)` to `(1, 1)` indexing with just `p1 + 1`, or to go from `(0, 0)` to `(1, 0)` it could support `p1 + {1, 0}`\r\n",
            "created_at": "2023-10-08T11:25:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1752003243",
            "id": 1752003243,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5obXKr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1752003243/reactions"
            },
            "updated_at": "2023-10-08T11:28:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1752003243",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We can start _without_ metamethods and add them later, it's not a one-way door. So that is mostly a phase-2 discussion.\r\n\r\n> It would allow to use unpack on a Position, which would enable composition with all (0, 0) based functions. An example:\r\n\r\n👍 \r\n\r\n> some here are not a fan of too much OO style or metatables, but I think for position and range it is very tempting to implement some.\r\n\r\nIt definitely seems natural to overload operators, because positions are often compared. But position is also an important fundamental structure that should be trivial to pass across RPC/serialization boundaries. Is there an ergnomic way to convert complex tables to simple tables?\r\n\r\n> We could also enable conversion from `(0, 0)` to `(1, 1)` indexing with just `p1 + 1`, or to go from `(0, 0)` to `(1, 0)` it could support `p1 + {1, 0}`\r\n\r\nFrom a readability standpoint, that would require the reader to know the indexing of `p1`, which is a burden.  Position algebra makes sense for translating positions, but using it to redefine the _indexing_ is too clever.\r\n\r\nAre the overloaded operators gaining anything if we also have named functions like `pos.mark()`? Compare e.g. `String.empty` which is popular even though `\"\"` is trivial and well-known. \r\n\r\n> Would make things like the normalize trivial:\r\n\r\nIsn't normalize also trivial without metamethods (but with functions like `pos.eq`/`pos.cmp`/etc)?",
            "created_at": "2023-10-09T09:02:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1752602361",
            "id": 1752602361,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5odpb5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1752602361/reactions"
            },
            "updated_at": "2023-10-09T09:16:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1752602361",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But position is also an important fundamental structure that should be trivial to pass across RPC/serialization boundaries. Is there an ergnomic way to convert complex tables to simple tables?\r\n\r\nmetatable methods are usually not picked up but depends on the serialization. E.g. `vim.json.encode(vim.pos({1, 2}))` would return `[1, 2]`\r\n\r\nAdvantages of the metamethods:\r\n\r\n- Reduced API surface, we re-use common comparison operators instead of adding `eq`, `gt`, `lt`, (`cmp`, `gte`, `lte`?)\r\n- People might be familiar with this from other languages that support it on tuples, like python, haskell or rust. (Which might bring up the point if we should have a more general `vim.tuple(...)` ?)\r\n- I think `x > y` is more readable than `vim.pos.gt(x, y)` (arguably this is subjective to some degree, but if it weren't more readable, why did pretty much every language bother adding infix operators instead of having normal functions for arithmetic and comparisons?)\r\n\r\nDisadvantages:\r\n- Maybe people get confused why it works on those special position tables, but not on others?\r\n- Others?\r\n\r\n> From a readability standpoint, that would require the reader to know the indexing of p1, which is a burden. Position algebra makes sense for translating positions, but using it to redefine the indexing is too clever.\r\n\r\n> Are the overloaded operators gaining anything if we also have named functions like pos.mark()?\r\n\r\nI think that's a general question of if we want to have a tagged position that knows how it is indexed, or if we're going with a free-form variant.\r\nI can see up and downsides for both, so no real preference.\r\n\r\n\r\nIn regards to `pos.mark()` etc: I guess that depends on if we can come up with good names for all variants?\r\n\r\n- (0,0)\r\n- (1, 1)\r\n- (1, 0)\r\n- (0, 1) -- I'm not sure if this is in use too\r\n\r\nE.g. `vim.fn.cursor()` uses (1,1) but `nvim_win_get_cursor()` uses (1, 0), which one is the cursor-like positioning?\r\n\r\nAnd what about positions with different encoding?\r\n\r\n> Isn't normalize also trivial without metamethods (but with functions like pos.eq/pos.cmp/etc)?\r\n\r\nFair point, with the functions it is the same.\r\n\r\n\r\n---\r\n\r\nA more drastic proposal: We add `xy2` (0, 0) indexing versions for _all_ functions which currently use a different indexing scheme\r\n",
            "created_at": "2023-10-09T15:13:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1753199302",
            "id": 1753199302,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5of7LG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1753199302/reactions"
            },
            "updated_at": "2023-10-09T15:25:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1753199302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">> would require the reader to know the indexing of p1, which is a burden.\n>\n> I think that's a general question of if we want to have a tagged position that knows how it is indexed, or if we're going with a free-form variant.\n\nIf the position object doesn't know its indexing that seems to lose half of the benefit...\n\n> A more drastic proposal: We add `xy2` (0, 0) indexing versions for _all_ functions which currently use a different indexing scheme\n\nMaybe, but shouldn't block the more tractable near-term solution. Even if we \"normalized\" all functions, we still need a Position abstraction (+conversions) for things at the edges (plugins, treesitter, LSP, ...).",
            "created_at": "2023-10-09T15:38:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1753243798",
            "id": 1753243798,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5ogGCW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1753243798/reactions"
            },
            "updated_at": "2024-10-24T12:26:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1753243798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I recently created my own abstractions for Position/Range before I knew of the existence of this issue, while on a journey to cull plugins from my config (I went the metatable approach, implementing `__eq`/`__lt`/etc. and I believe it really improved the ergonomics of dealing with all the different APIs [1]). The real win here is that when `Pos`/`Range` are constructed, I chose a normalized way to store the coordinates -- in my case, as 0-based indices. Then, several methods are provided on `Pos`/`Range` that interface with the lower-level APIs, and they perform the appropriate conversion at each particular call-site as necessary (in particular `Range:replace { 'lines', 'here' }` does a lot of the dirty work).\n\nHere are my implementations of Range/Pos:\n- [Range](https://github.com/jrop/u.nvim/blob/master/lua/u/range.lua)\n- [Pos](https://github.com/jrop/u.nvim/blob/master/lua/u/pos.lua)\n\nI've found these abstractions to be immensely helpful when developing for NeoVim, so I'd be incredibly excited to hear of something like this being included out-of-the-box.\n\n[1] I know flame wars can start on this topic, so I'm classifying the following under Personal Opinion: OO is an overloaded term, and when I think of \"bad\" OO, I think of things like factories, singletons, excessive inheritance, i.e., Java. \"Good\" OO, in my humble opinion is co-locating _behavior_ next to data (i.e., _methods_), e.g., Rust-like structs.",
            "created_at": "2024-11-11T17:49:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-2468727857",
            "id": 2468727857,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM6TJcwx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2468727857/reactions"
            },
            "updated_at": "2024-11-11T17:49:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2468727857",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1404053?v=4",
                "events_url": "https://api.github.com/users/jrop/events{/privacy}",
                "followers_url": "https://api.github.com/users/jrop/followers",
                "following_url": "https://api.github.com/users/jrop/following{/other_user}",
                "gists_url": "https://api.github.com/users/jrop/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jrop",
                "id": 1404053,
                "login": "jrop",
                "node_id": "MDQ6VXNlcjE0MDQwNTM=",
                "organizations_url": "https://api.github.com/users/jrop/orgs",
                "received_events_url": "https://api.github.com/users/jrop/received_events",
                "repos_url": "https://api.github.com/users/jrop/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jrop/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jrop/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jrop",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 11,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25509/comments",
    "created_at": "2023-10-05T09:24:33Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/25509/events",
    "html_url": "https://github.com/neovim/neovim/issues/25509",
    "id": 1927801948,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/25509/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5y5-xc",
    "number": 25509,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 10,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 10,
        "url": "https://api.github.com/repos/neovim/neovim/issues/25509/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/25509/timeline",
    "title": "Lua: Position / Range abstraction (vim.pos.Pos)",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:57:36Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/25509",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}