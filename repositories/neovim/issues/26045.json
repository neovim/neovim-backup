{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nThe nvim lsp client does not send `workspace/didCreateFiles` notifications back to the language server after performing a code action that create files (for example, the `marksman` language server supports such an action). Therefore, the language server does not receive that information and is unable to update its internal state to reflect the existence of the created files.\r\n\n\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\n\nMinimal config: \r\n```lua\r\nlocal pattern = \"markdown\"\r\nlocal cmd = { \"marksman\" }\r\n-- Add files/folders here that indicate the root of a project\r\nlocal root_markers = { \".git\", \".editorconfig\", \".marksman.toml\" }\r\n-- Change to table with settings if required\r\nlocal settings = vim.empty_dict()\r\n\r\nvim.api.nvim_create_autocmd(\"FileType\", {\r\n    pattern = pattern,\r\n    callback = function(args)\r\n\tlocal match = vim.fs.find(root_markers, { path = args.file, upward = true })[1]\r\n\tlocal root_dir = match and vim.fn.fnamemodify(match, \":p:h\") or nil\r\n\tvim.lsp.start({\r\n\t    name = \"bugged-ls\",\r\n\t    cmd = cmd,\r\n\t    root_dir = root_dir,\r\n\t    settings = settings,\r\n\t})\r\n    end,\r\n})\r\n```\r\nSteps to reproduce:\r\n1. Setup: \r\n    - Create a notebook directory `mkdir notebook-test`.\r\n    - Initialize the notebook root `touch notebook-test/.marksman.toml`.\r\n2. Open a markdown file: `nvim -u minimal_init.lua notebook-test/index.md`.\r\n3. Create a link to a new file by inserting something like test `[[test]]`.\r\n4. There should be a diagnostic warning you that the `test.md` file does not exist.\r\n5. Hover your cursor on `test`.\r\n6. Perform the code action:\r\n    - `:lua vim.lsp.buf.code_action()`\r\n    - Choose the `Create test.md` option.\r\n    - The diagnostic will still be there.\r\n7. Test that the language server does not know about the file \r\n    - `:lua vim.lsp.buf.definition()`\r\n    - You will not be taken to the `test.md` file.\r\n8. Exit the file and check that the `test.md` file was indeed created with `ls notebook-test`\n\n### Expected behavior\n\nA notification is sent to the language server to reflect that files have been created. It seems that `VsCode` sends a `workspace/didCreateFiles` notification in the same scenario, so that seems like a good candidate. Some more details regarding `emacs` are described [here](https://github.com/artempyanykh/marksman/pull/239#pullrequestreview-1542292940).\n\n### Neovim version (nvim -v)\n\nTested on 0.9.4 release and 0.10.0 Nightly\n\n### Language server name/version\n\nmarksman latest\n\n### Operating system/version\n\nTested on Arch Linux and MacOs\n\n### Log file\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "Happy to contribute a pr if needed, but I would need some help getting started with the codebase.",
            "created_at": "2023-11-14T17:48:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/26045#issuecomment-1810810047",
            "id": 1810810047,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26045",
            "node_id": "IC_kwDOAPphoM5r7sS_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1810810047/reactions"
            },
            "updated_at": "2023-11-14T17:48:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1810810047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/70120121?v=4",
                "events_url": "https://api.github.com/users/raph-rc/events{/privacy}",
                "followers_url": "https://api.github.com/users/raph-rc/followers",
                "following_url": "https://api.github.com/users/raph-rc/following{/other_user}",
                "gists_url": "https://api.github.com/users/raph-rc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/raph-rc",
                "id": 70120121,
                "login": "raph-rc",
                "node_id": "MDQ6VXNlcjcwMTIwMTIx",
                "organizations_url": "https://api.github.com/users/raph-rc/orgs",
                "received_events_url": "https://api.github.com/users/raph-rc/received_events",
                "repos_url": "https://api.github.com/users/raph-rc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/raph-rc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/raph-rc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/raph-rc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well that seems to be the expected behaviour. As far as I can see there's currently no \"file operations\" support (as announced in [the client's capabilities](https://github.com/neovim/neovim/blob/9e2248ab586c5e5854da68b5310755ea3557e6c9/runtime/lua/vim/lsp/protocol.lua#L842)).\r\n\r\nRelated issue about renaming files: https://github.com/neovim/neovim/issues/20784.",
            "created_at": "2023-11-14T21:48:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/26045#issuecomment-1811377840",
            "id": 1811377840,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26045",
            "node_id": "IC_kwDOAPphoM5r926w",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1811377840/reactions"
            },
            "updated_at": "2023-11-14T21:48:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1811377840",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thank you for taking the time to respond. I am confused as to the differences between `vscode`, which works out of the box, and `neovim`. Are the client capabilities `neovim` specific or are they related to the protocol? `vscode` sends the `workspace/didCreateFiles` notification in the same scenario, and the notification seems to be declared [here](https://github.com/neovim/neovim/blob/9e2248ab586c5e5854da68b5310755ea3557e6c9/runtime/lua/vim/lsp/protocol.lua#L1234). Is it used for something else within `neovim`? Is there a way to configure the capabilities separately for each server to achieve the behavior that `vscode` has from within `neovim`?",
            "created_at": "2023-11-14T22:11:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/26045#issuecomment-1811443299",
            "id": 1811443299,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26045",
            "node_id": "IC_kwDOAPphoM5r-G5j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1811443299/reactions"
            },
            "updated_at": "2023-11-14T22:14:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1811443299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/70120121?v=4",
                "events_url": "https://api.github.com/users/raph-rc/events{/privacy}",
                "followers_url": "https://api.github.com/users/raph-rc/followers",
                "following_url": "https://api.github.com/users/raph-rc/following{/other_user}",
                "gists_url": "https://api.github.com/users/raph-rc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/raph-rc",
                "id": 70120121,
                "login": "raph-rc",
                "node_id": "MDQ6VXNlcjcwMTIwMTIx",
                "organizations_url": "https://api.github.com/users/raph-rc/orgs",
                "received_events_url": "https://api.github.com/users/raph-rc/received_events",
                "repos_url": "https://api.github.com/users/raph-rc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/raph-rc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/raph-rc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/raph-rc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@raphaelchristin Client capabilities are [documented in the LSP](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#clientCapabilities). Both the server and client will announce the features they support during the `initialize` request. When the capability is absent or defined as unsupported, the other side must not send messages for such feature, or expect messages to be sent to them. In this case, because the Neovim client has no file operation capabilities, language servers won't receive file creation/modification notifications.\r\n\r\n> I am confused as to the differences between vscode, which works out of the box, and neovim\r\n\r\nLet me step back and explain what LSP is for. Imagine you have your `foo` language server and want it to be able to provide code actions to different editors. If each editor had its own extensibility API, you would need to have separate implementations for each editor you want to support. Since code actions are core to most language servers, we can abstract the UI/language specific details engrained in editor extensibility APIs and just use LSP as the common ground on how a language server can have nice features like code actions, completions, inlay hints etc in all editors that \"speak\" LSP.\r\n\r\nVS Code is by nature the prime LSP editor. Most of its extensibility drives (and is driven) by LSP, and so it is usually supporting all features. Neovim is not far behind though, and issues like these help close the gap.\r\n\r\nAnd so what's missing here? It's not as simple as adding the capability or sending a message. The core infrastructure (e.g. a file watcher that checks if a file has been created and belongs to the workspace that the language server cares about) needs to be added and tested. We would like such implementation to not be exclusive to file creation, but also the other file operations defined in the LSP (like renaming or deletion). ",
            "created_at": "2023-11-14T22:26:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/26045#issuecomment-1811489889",
            "id": 1811489889,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26045",
            "node_id": "IC_kwDOAPphoM5r-SRh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1811489889/reactions"
            },
            "updated_at": "2023-11-14T22:26:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1811489889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@MariaSolOs Thank you very much for your reply, it is very helpful. I think I understand now, and this seems to be more complex than I initially realized. If this is still desired functionality (and I assume it is, since supporting the full lsp protocol seems very desireable), I would be interested in working on it. I don't have much experience with the lsp protocol or with its implementation in `neovim`, so I would have a lot to learn and it might take some time though. Let me know if that is something that would be possible. ",
            "created_at": "2023-11-14T22:45:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/26045#issuecomment-1811511257",
            "id": 1811511257,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26045",
            "node_id": "IC_kwDOAPphoM5r-XfZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1811511257/reactions"
            },
            "updated_at": "2024-04-14T14:50:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1811511257",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/70120121?v=4",
                "events_url": "https://api.github.com/users/raph-rc/events{/privacy}",
                "followers_url": "https://api.github.com/users/raph-rc/followers",
                "following_url": "https://api.github.com/users/raph-rc/following{/other_user}",
                "gists_url": "https://api.github.com/users/raph-rc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/raph-rc",
                "id": 70120121,
                "login": "raph-rc",
                "node_id": "MDQ6VXNlcjcwMTIwMTIx",
                "organizations_url": "https://api.github.com/users/raph-rc/orgs",
                "received_events_url": "https://api.github.com/users/raph-rc/received_events",
                "repos_url": "https://api.github.com/users/raph-rc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/raph-rc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/raph-rc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/raph-rc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@raphaelchristin that would be very welcome! Supporting all LSP features is definitely the goal.\r\n\r\nFeel free to start a draft PR and just set the capability in the client. Then start getting familiar with the LSP implementation (I'm relatively new here too, but I normally just start by looking at the files inside `runtime/lua/vim/lsp`). PRs like https://github.com/neovim/neovim/pull/25512 are a good example of what working in LSP looks like in Neovim (and which parts of the codebase need to be changed).\r\n\r\nYou can also use VS Code as a reference implementation, but note that we don't want to copy-paste editor specific details. We stick to the protocol, and if something is ambiguous or unclear we should bring it up to the [LSP repo](https://github.com/microsoft/language-server-protocol).\r\n\r\nFeel free to ping me (or anyone really, I promise they're also friendly) if you have any questions or need some more hints. I know nothing about file IO APIs in Neovim, but some smart people here do and can help you as well.",
            "created_at": "2023-11-14T22:59:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/26045#issuecomment-1811526142",
            "id": 1811526142,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26045",
            "node_id": "IC_kwDOAPphoM5r-bH-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1811526142/reactions"
            },
            "updated_at": "2023-11-14T22:59:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1811526142",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Edit: This is outdated since Netrw will be removed from Nvim\n\nRelated: https://github.com/saccarosium/netrw.vim/issues/4\n\nIf it is supported, I think I can send a pull request that integrate Netrw (Neovim's builtin file explorer) with LSP ",
            "created_at": "2025-01-18T06:04:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/26045#issuecomment-2599570510",
            "id": 2599570510,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26045",
            "node_id": "IC_kwDOAPphoM6a8kxO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599570510/reactions"
            },
            "updated_at": "2025-05-07T04:42:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599570510",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26045/comments",
    "created_at": "2023-11-14T17:47:30Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/26045/events",
    "html_url": "https://github.com/neovim/neovim/issues/26045",
    "id": 1993248612,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/26045/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 285,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 339,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-07-04T21:53:41Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM52zo9k",
    "number": 26045,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/26045/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/26045/timeline",
    "title": "workspace/didCreateFiles notification not sent to language server after a code action creates a file",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T09:00:07Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/26045",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/70120121?v=4",
        "events_url": "https://api.github.com/users/raph-rc/events{/privacy}",
        "followers_url": "https://api.github.com/users/raph-rc/followers",
        "following_url": "https://api.github.com/users/raph-rc/following{/other_user}",
        "gists_url": "https://api.github.com/users/raph-rc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/raph-rc",
        "id": 70120121,
        "login": "raph-rc",
        "node_id": "MDQ6VXNlcjcwMTIwMTIx",
        "organizations_url": "https://api.github.com/users/raph-rc/orgs",
        "received_events_url": "https://api.github.com/users/raph-rc/received_events",
        "repos_url": "https://api.github.com/users/raph-rc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/raph-rc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/raph-rc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/raph-rc",
        "user_view_type": "public"
    }
}