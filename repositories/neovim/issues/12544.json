{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Actual behaviour\r\n\r\n```vim\r\nlet g:var = {}\r\nlua vim.g.x = 1\r\necho g:var\r\n\" Result: {}\r\n```\r\n\r\n### Expected behaviour\r\n\r\n```vim\r\nlet g:var = {}\r\nlua vim.g.x = 1\r\necho g:var\r\n\" Result: {'x': 1}\r\n```\r\n\r\nIt's confusing that it doesn't do this currently I think for people. Either we should do it automatically or find some way to make it \"easy\" to happen without completely setting/resetting the dict every time.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "@norcalli thoughts? We can use metatables to make this work just fine.",
            "created_at": "2020-06-26T13:04:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-650167749",
            "id": 650167749,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDE2Nzc0OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/650167749/reactions"
            },
            "updated_at": "2020-06-26T13:04:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/650167749",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "True, I do think it is confusing. My concerns would be:\r\n\r\n- Might be too magical. If you keep a reference to a magic dict around, but the variable is overrided to a non dict, then setting that previous reference does... what?\r\n- Dictionaries can contain vim function references, which we currently don't support. I'm actually not sure if g:variables can store functions right now without thinking of the dict case...\r\n\r\nThe possibilities are:\r\n- fully support vim/lua interop\r\n- support just for dictionaries and ignore incompatibility problems as user error\r\n- raise an error when trying to operate on these returned dicts via metamethods.\r\n\r\nIs there any other special type than dictionary and vim functions, btw?",
            "created_at": "2020-07-01T13:01:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-652404399",
            "id": 652404399,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjQwNDM5OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/652404399/reactions"
            },
            "updated_at": "2020-07-01T13:01:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/652404399",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/296363?v=4",
                "events_url": "https://api.github.com/users/norcalli/events{/privacy}",
                "followers_url": "https://api.github.com/users/norcalli/followers",
                "following_url": "https://api.github.com/users/norcalli/following{/other_user}",
                "gists_url": "https://api.github.com/users/norcalli/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/norcalli",
                "id": 296363,
                "login": "norcalli",
                "node_id": "MDQ6VXNlcjI5NjM2Mw==",
                "organizations_url": "https://api.github.com/users/norcalli/orgs",
                "received_events_url": "https://api.github.com/users/norcalli/received_events",
                "repos_url": "https://api.github.com/users/norcalli/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/norcalli/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/norcalli/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/norcalli",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tjdevries did you mean\r\n```vim\r\nlet g:var = {}\r\nlua vim.g.var.x = 1\r\necho g:var\r\n\" Result: {'x': 1}\r\n```\r\n\r\nAnyway, how can I set/change a nested value in a vim global (dictionary) variable from a lua script, currently? I couldn't find a way.",
            "created_at": "2020-07-11T20:13:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-657122718",
            "id": 657122718,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzEyMjcxOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/657122718/reactions"
            },
            "updated_at": "2021-09-15T09:29:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/657122718",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/26169924?v=4",
                "events_url": "https://api.github.com/users/mg979/events{/privacy}",
                "followers_url": "https://api.github.com/users/mg979/followers",
                "following_url": "https://api.github.com/users/mg979/following{/other_user}",
                "gists_url": "https://api.github.com/users/mg979/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mg979",
                "id": 26169924,
                "login": "mg979",
                "node_id": "MDQ6VXNlcjI2MTY5OTI0",
                "organizations_url": "https://api.github.com/users/mg979/orgs",
                "received_events_url": "https://api.github.com/users/mg979/received_events",
                "repos_url": "https://api.github.com/users/mg979/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mg979/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mg979/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mg979",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sorry, yeah, that's waht I meant to write @mg979 \r\n\r\nThe way you could do it now is:\r\n\r\n```lua\r\nlocal t = vim.g.var\r\nt.x = 1\r\nvim.g.var = t\r\n```\r\nthat should work, but it is not nice :'(",
            "created_at": "2020-07-12T18:42:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-657259890",
            "id": 657259890,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzI1OTg5MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/657259890/reactions"
            },
            "updated_at": "2021-09-15T09:29:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/657259890",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tjdevries  thanks",
            "created_at": "2020-07-12T22:07:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-657282442",
            "id": 657282442,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzI4MjQ0Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/657282442/reactions"
            },
            "updated_at": "2021-09-15T09:29:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/657282442",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/26169924?v=4",
                "events_url": "https://api.github.com/users/mg979/events{/privacy}",
                "followers_url": "https://api.github.com/users/mg979/followers",
                "following_url": "https://api.github.com/users/mg979/following{/other_user}",
                "gists_url": "https://api.github.com/users/mg979/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mg979",
                "id": 26169924,
                "login": "mg979",
                "node_id": "MDQ6VXNlcjI2MTY5OTI0",
                "organizations_url": "https://api.github.com/users/mg979/orgs",
                "received_events_url": "https://api.github.com/users/mg979/received_events",
                "repos_url": "https://api.github.com/users/mg979/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mg979/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mg979/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mg979",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Current model is simple. Simple is good. Vimscript-Lua bridge is an escape hatch, it is not something we should pour lots of engineering effort into unless it is blocking a long-term use-case. Vimscript <=> Lua is a short-term workaround, most logic should be in Lua.\r\n\r\nAlso even after expending a lot of effort we will still have strange edge cases. Whereas with the current simple approach, it is clear and easy to understand the limitations.\r\n\r\n> raise an error when trying to operate on these returned dicts via metamethods.\r\n\r\nThat might be helpful to plugin authors. ",
            "created_at": "2020-09-06T18:30:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-687863949",
            "id": 687863949,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4Nzg2Mzk0OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/687863949/reactions"
            },
            "updated_at": "2020-09-06T18:30:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/687863949",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I have a somewhat related question.\r\n\r\nI have a lua class `Buffer` (table with metatable) corresponding to vim buffer. I'd like to store a reference to a `Buffer` in a vim buffer:\r\n```lua\r\nlocal lua_buffer = Buffer()\r\nvim.api.nvim_buf_set_var(0, 'lua_buffer', lua_buffer)\r\n```\r\nThis way, I don't need to worry about memory leak after the vim buffer is wiped out. \r\nHowever, since `lua_buffer` contains meta table and `nvim_buf_set_var` does not seem to support translating meta table (I can see the complexity here), so what is stored into `vim.b.lua_buffer` is only non-meta stuff in `lua_buffer`.\r\n\r\nMy current workaround is by having a **global** table mapping from vim buffer id to lua `Buffer` and remove `Buffer` from the table on corresponding vim buffer wipeout autocmd.\r\n\r\n> Vimscript <=> Lua is a short-term workaround, most logic should be in Lua.\r\n\r\nSo my question is, is there a long term plan for having lua module replacing vim's scoped variables? For e.g., a table `lb` with same lifecycle as vim buffer.\r\n```lua\r\nvim.lb.var = 'only lives in lua'\r\nassert(vim.b.var==nil)\r\n```",
            "created_at": "2022-05-03T03:19:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-1115602754",
            "id": 1115602754,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM5Cfr9C",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1115602754/reactions"
            },
            "updated_at": "2022-05-03T03:19:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1115602754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1246394?v=4",
                "events_url": "https://api.github.com/users/ipod825/events{/privacy}",
                "followers_url": "https://api.github.com/users/ipod825/followers",
                "following_url": "https://api.github.com/users/ipod825/following{/other_user}",
                "gists_url": "https://api.github.com/users/ipod825/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ipod825",
                "id": 1246394,
                "login": "ipod825",
                "node_id": "MDQ6VXNlcjEyNDYzOTQ=",
                "organizations_url": "https://api.github.com/users/ipod825/orgs",
                "received_events_url": "https://api.github.com/users/ipod825/received_events",
                "repos_url": "https://api.github.com/users/ipod825/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ipod825/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ipod825/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ipod825",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> So my question is, is there a long term plan for having lua module replacing vim's scoped variables? For e.g., a table `lb` with same lifecycle as vim buffer.\r\n\r\n@ipod825 you're right that lifetimes (`b:`, `w:`, `t:`) are an important use-case. Lua _closures_ (`vim.b=function()…`) work nicely in the Vimscript-Lua bridge but you are asking specifically about metatable support. \r\n\r\nCurrently, bridging a Lua table erases the metatable:\r\n\r\n```lua\r\nlocal f = function()\r\n  local M = { 'mt1', 'mt2' }\r\n  local l = { a=1 }\r\n  local call = function(_, f)\r\n    if l[f] then\r\n      l[f] = l[f] + 1\r\n    else\r\n      l[f] = 1\r\n    end\r\n    print(vim.inspect(l))\r\n  end\r\n  setmetatable(M, {\r\n     __call = call,\r\n     __index = call,\r\n  })\r\n  vim.b.foo = M\r\n  GlobalM = M\r\n  -- vim.api.nvim_buf_set_var(0, 'foo', M)\r\n\r\n  print(vim.b.foo)  -- table: 0x0102605460\r\n  print(GlobalM)    -- table: 0x01026163e0\r\n  print(M)          -- table: 0x01026163e0\r\nend\r\nf()\r\n\r\n-- Test cases:\r\n--    :lua print(GlobalM['b'])\r\n--        => works\r\n--    :lua print(GlobalM('test'))\r\n--        => works\r\n--    :echo b:foo\r\n--        => [ 'mt1', 'mt2' ]\r\n--    :call b:foo()\r\n--        => E884\r\n```\r\n\r\n# Proposal\r\n\r\nWhat if the bridge worked like this for container types:\r\n\r\n1. ~~In Vimscript, it just returns an opaque id/handle~~\r\n    - ~~nothing \"bridged\" except the variable name~~\r\n1. In Vimscript, bridged Lua container types are _readonly_. In Lua, bridged Vimscript container types are _readonly_.\r\n    - We should have done this from the beginning. It's essentially the same as current behavior, but less confusing.\r\n1. In Lua, the ref continues to live entirely in Lua-land in Lua-managed `b:/w:/t:` tables.\r\n    - When a buffer/window/tab closes, Nvim removes the Lua ref from the Lua `b:/w:/t:` table.  Lua will garbage-collect it unless some other Lua stuff is still using it.\r\n    - Not supported for ~~g:~~ `l:` since there is no use-case?\r\n1. Rules to document:\r\n    - Lua tables are readonly from Vimscript.\r\n    - Vimscript containers are readonly from Lua.\r\n    - Lua _metatable behavior_ only works from Lua (not `v:lua`, nor `g:/l:/b:/w:/t:`).",
            "created_at": "2022-05-04T00:22:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-1116794687",
            "id": 1116794687,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM5CkO8_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116794687/reactions"
            },
            "updated_at": "2024-06-24T13:13:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116794687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "The proposal looks good to me.  As long as there are complete lua APIs for me to modify nvim internals, I don't really see any usecase to modify something on both sides of the worlds. Using vimscript in lua most of the times is due to lack of lua APIs like augroup/user command pre nvim 0.7.",
            "created_at": "2022-05-04T01:23:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-1116850524",
            "id": 1116850524,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM5Ckclc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116850524/reactions"
            },
            "updated_at": "2022-05-04T01:23:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116850524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1246394?v=4",
                "events_url": "https://api.github.com/users/ipod825/events{/privacy}",
                "followers_url": "https://api.github.com/users/ipod825/followers",
                "following_url": "https://api.github.com/users/ipod825/following{/other_user}",
                "gists_url": "https://api.github.com/users/ipod825/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ipod825",
                "id": 1246394,
                "login": "ipod825",
                "node_id": "MDQ6VXNlcjEyNDYzOTQ=",
                "organizations_url": "https://api.github.com/users/ipod825/orgs",
                "received_events_url": "https://api.github.com/users/ipod825/received_events",
                "repos_url": "https://api.github.com/users/ipod825/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ipod825/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ipod825/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ipod825",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> * Not supported for `g:`/`l:` since there is no use-case?\r\n\r\nAt least for Neovide there are use cases for `g:`. We would like to have a hierarchy of settings instead of the flat ones currently in use. Initially for more advanced font configuration, and better structure of settings. But there will probably be more use cases in the future. \r\n\r\nIt would  also allow us to get rid of the dictwatcher, at the cost of no longer being configurable from the vimscript side. We also publish a few variables that should be read-only by the user, and again a metatable would allow us to enforce that.\r\n\r\nThe alternative is a `setup` style configuration, like most plugins. But since everything can be configured at runtime, I think it's a poor fit. `vim.g.neovide.*`, would be much nicer. Of course something like `require(\"neovide\").config.value=1` is also possible, but that's not a very standard way of doing things.\r\n\r\nI have also seen various proposals for configuring plugins using `vim.g.pluginname.*`, and I think supporting, metatables, or even just updatable dictionaries is a requirement for that.\r\n",
            "created_at": "2024-06-24T12:29:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-2186466530",
            "id": 2186466530,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM6CUtTi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2186466530/reactions"
            },
            "updated_at": "2024-06-24T12:29:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2186466530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It would also allow us to get rid of the dictwatcher, at the cost of no longer being configurable from the vimscript side.\r\n\r\nYep. Good tradeoff imo.\r\n",
            "created_at": "2024-06-24T13:14:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-2186558503",
            "id": 2186558503,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM6CVDwn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2186558503/reactions"
            },
            "updated_at": "2024-06-24T13:14:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2186558503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Have you considered just using `_G` in Lua? I'm not sure what `vim.g` offers over `_G`. My guess is that it is a convention people are familiar with?",
            "created_at": "2024-06-24T21:11:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-2187410537",
            "id": 2187410537,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM6CYTxp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2187410537/reactions"
            },
            "updated_at": "2024-06-24T21:19:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2187410537",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "We do have some planned options that will be window specific, so then it would be more consistent to use `vim.g` and `vim.w`, unless we use some meta magic of course.\r\n\r\nIn the ideal world, it would also be nice to not have to give up the vimscript/commandline support.",
            "created_at": "2024-06-24T21:34:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-2187448415",
            "id": 2187448415,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM6CYdBf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2187448415/reactions"
            },
            "updated_at": "2024-06-24T21:34:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2187448415",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In the ideal world, it would also be nice to not have to give up the vimscript/commandline support.\n\nFor interactive configuration, the current convention is to do everything behind a user command as that'll allow you to process the request without having to watch any variables whilst also allowing you to provide bespoke completion.",
            "created_at": "2024-06-24T21:48:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-2187467488",
            "id": 2187467488,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM6CYhrg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2187467488/reactions"
            },
            "updated_at": "2024-06-24T21:48:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2187467488",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That would also work, perhaps not as nicely for the user as our current `let g:neovide_setting_name=value`, or with hierarchy, `let g:neovide.setting.name=value` which also has autocompletion and additionally lets you query the current value. And at least in lua could allow assignments of tables. But I guess querying the value could be implemented by using varargs, where no arguments means query.\r\n\r\nCommands do have the advantage of making it possible to groups settings that needs to be set at the same time together, so in some cases they are probably better.\r\n\r\nWe will definitely consider this as an alternative when refacoring our settings, especially since that likely will happen before the metatable support is added and a new Neovim release comes out.",
            "created_at": "2024-06-25T03:53:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-2187919496",
            "id": 2187919496,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM6CaQCI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2187919496/reactions"
            },
            "updated_at": "2024-06-25T03:53:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2187919496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Proposal\n\nSee https://github.com/neovim/neovim/issues/12544#issuecomment-1116794687 (since github loves to hide things).",
            "created_at": "2024-12-19T15:55:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-2554770194",
            "id": 2554770194,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM6YRrMS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554770194/reactions"
            },
            "updated_at": "2024-12-19T15:55:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554770194",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk Hi, I think the first comment is wrong, in both vim and neovim, we can use `g:` to get all values,  but we can not set `g:` directly.\n\nfor example `let g: = {}` cause `E475: Invalid argument: g: = {}`, but we can use `:echo g:` to get all global values.\n\nso the example should be:\n\n```vim\nlua vim.g.x = 1\n\necho g:\n\n\" Ruslt: {'x' : 1, 'other_var' : 2}\n```\n\nIt is https://github.com/neovim/neovim/issues/12544#issuecomment-657122718\n\n",
            "created_at": "2025-02-02T14:20:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/12544#issuecomment-2629416196",
            "id": 2629416196,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12544",
            "node_id": "IC_kwDOAPphoM6cubUE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629416196/reactions"
            },
            "updated_at": "2025-02-02T14:28:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629416196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13142418?v=4",
                "events_url": "https://api.github.com/users/wsdjeg/events{/privacy}",
                "followers_url": "https://api.github.com/users/wsdjeg/followers",
                "following_url": "https://api.github.com/users/wsdjeg/following{/other_user}",
                "gists_url": "https://api.github.com/users/wsdjeg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wsdjeg",
                "id": 13142418,
                "login": "wsdjeg",
                "node_id": "MDQ6VXNlcjEzMTQyNDE4",
                "organizations_url": "https://api.github.com/users/wsdjeg/orgs",
                "received_events_url": "https://api.github.com/users/wsdjeg/received_events",
                "repos_url": "https://api.github.com/users/wsdjeg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wsdjeg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wsdjeg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wsdjeg",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 17,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/12544/comments",
    "created_at": "2020-06-26T12:32:27Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/12544/events",
    "html_url": "https://github.com/neovim/neovim/issues/12544",
    "id": 646230903,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "",
            "id": 109899557,
            "name": "vimscript",
            "node_id": "MDU6TGFiZWwxMDk4OTk1NTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vimscript"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "",
            "id": 606691254,
            "name": "has:plan",
            "node_id": "MDU6TGFiZWw2MDY2OTEyNTQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:plan"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/12544/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 691,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 634,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-02-03T17:13:43Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWU2NDYyMzA5MDM=",
    "number": 12544,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 24,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 24,
        "url": "https://api.github.com/repos/neovim/neovim/issues/12544/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/12544/timeline",
    "title": "Lua: store metatables on vim.b/vim.w/vim.t/vim.v scopes",
    "updated_at": "2025-02-02T14:28:43Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/12544",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
        "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
        "followers_url": "https://api.github.com/users/tjdevries/followers",
        "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
        "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tjdevries",
        "id": 4466899,
        "login": "tjdevries",
        "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
        "organizations_url": "https://api.github.com/users/tjdevries/orgs",
        "received_events_url": "https://api.github.com/users/tjdevries/received_events",
        "repos_url": "https://api.github.com/users/tjdevries/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tjdevries",
        "user_view_type": "public"
    }
}