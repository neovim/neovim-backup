{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Followup of https://github.com/neovim/neovim/pull/978#issuecomment-49671122 . \n\nIn Neovim we are mostly using pipes instead of temp files for reliability and [performance](https://github.com/neovim/neovim/pull/978#issuecomment-50092527).\n\nBut there's an edge that mentioned in Vim `:help 'shelltemp'`:\n\n```\n    The advantage of using a temp file is that the file type and encoding\n    can be detected.\n```\n\nWe need to verify that this edge is not present in Neovim, or find a workaround, or update the documentation. [A vim-sensible issue](https://github.com/tpope/vim-sensible/issues/73) gives a couple examples of plugins that seem to be affected by this edge case.\n\nVim source and [unanswered question on vim_dev](https://groups.google.com/forum/#!msg/vim_dev/EHMfNBsdvrg/vVth0Wv90QcJ) do not give any more explanation about the edge case.\n\nHowever [this SO post](http://stackoverflow.com/a/17177904/152142) gives insight into the behavior of encodings on Windows.\n\n> if a string is not in the UTF-16LE encoding to begin with, a Win32 program must pass the correct codepage to MultiByteToWideChar. Also, WriteConsoleW will not work if the program’s output is redirected; more fiddling is needed in that case.\n\nThat post and the vim-sensible issue report suggest that this issue may be Windows-only, and possibly specific to cmd.exe. \n\nNext steps:\n- reproduce edge case in Vim, then try the same steps in Neovim\n- these plugins were [reported](https://github.com/tpope/vim-sensible/issues/73#issuecomment-49541650) to mess up with `set noshelltemp` and [`chcp 850`](https://github.com/tpope/vim-sensible/issues/73#issuecomment-50536097):\n  - https://github.com/mileszs/ack.vim\n  - https://github.com/dyng/ctrlsf.vim\n- is it Windows-only?\n  - if so, is it specific to cmd.exe?\n    - if so, perhaps we can avoid the issue entirely by using syscalls instead of building shell commands (@aktau's work achieves this [except for `do_filter`](https://github.com/neovim/neovim/pull/978#issuecomment-49699155)).\n\n---\n\nThe more I stare at the help text, the more I think this is related to Vim autocmds rather than some mysterious OS behavior. \n- Detecting the file type is _almost certainly_ a reference the `ftdetect` Vim mechanism.\n- Detecting the encoding _could_ refer to some feature of Vim that tries to infer the encoding based on the BOM or the presence of UTF8 sequences.\n\n---\n\nNotes on Windows:\n\nhttp://blogs.msdn.com/b/oldnewthing/archive/2005/03/08/389527.aspx\n- there are typically two 8-bit code pages active, the so-called \"ANSI\" code page and the so-called \"OEM\" code page\n- cmd.exe `/U` forces Unicode (UTF-16LE) for piped/redirected output\n    - can use `chcp 65001` to force the console codepage to utf8 for that session.\n- By default, PowerShell Core (`pwsh`) uses UTF-8 without BOM for redirected output.\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I just ran some manual tests with both nvim(master) and vim 7.3.429(version shipped with ubuntu 12.04) and both seem to have the same encoding detection capabilities. Here's what I did:\n\nFirst, create three files containing the same string encoded in utf{8,16,32)\n\n``` sh\nstr='エンコードされた文字列'\n\necho $str | iconv --to-code=utf-8 > test.utf8\necho $str | iconv --to-code=utf-16 > test.utf16\necho $str | iconv --to-code=utf-32 > test.utf32\n```\n\nNow open vim(or nvim) and read the files using `:r! cat test.utf{n}`. All files should be read normally into the buffer, the utf16/32 versions will have the [converted]  warning displayed at the command-line.\n\nThis happens because when shelltemp is 1 vim will construct a shell command string that redirects the output to a temporary file before passing it to `os_call_shell`, something like this: `cat test.utf{n} > tempfile`. Then it uses some method to detect the file encoding and reads the converted data into the buffer.\n\nWhen setting `noshelltemp`, the utf8 file is read correctly(since it's the encoding vim uses internally) and the other two will display special characters since it couldn't detect the encoding and consequently convert to utf8. Again, this also happens with vim.\n\nThen I tried reading the files using `system`, where we have complete control over the shell command:\n\n``` vim\nlet str = system('cat test.utf32')\n```\n\nObviously the string won't be converted, and nvim has the same behavior even though vim still uses temporary files to read the output of the command passed to `system`\n\nConclusion: The fact that we now use pipes for reading shell commands doesn't affect our encoding detection capabilities, since that is not handled by the functions that call the shell(It's the responsibility of another layer)\n\nWith that said, I see no technical reason for this limitation since algorithms used to detect encoding  can be just as easily applied to byte arrays stored in memory. Here's what can be done to improve this behavior and possibly make `shelltemp` a no-op in Neovim:\n- Find the code vim uses to detect encoding using temporary files\n- Refactor to enable usage of byte strings, and always apply it to the data read by filters\n",
            "created_at": "2014-07-30T11:18:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/1008#issuecomment-50602022",
            "id": 50602022,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1008",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjAyMDIy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/50602022/reactions"
            },
            "updated_at": "2014-07-30T11:34:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/50602022",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> With that said, I see no technical reason for this limitation since algorithms used to detect encoding can be just as easily applied to byte arrays stored in memory. Here's what can be done to improve this behavior and possibly make shelltemp a no-op in Neovim:\n\nI think so too.\n",
            "created_at": "2014-07-30T11:47:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/1008#issuecomment-50604346",
            "id": 50604346,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1008",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjA0MzQ2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/50604346/reactions"
            },
            "updated_at": "2014-07-30T11:47:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/50604346",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> - Find the code vim uses to detect encoding using temporary files\n\nI think I may have actually stumbled across this last night while examining the call graph of `:diffupdate`. It's nearly a thousand lines that seem to try and guess the encoding, then begin reading until it fails because it guessed wrong, `goto retry` with a slightly different configuration, until all possibilities have been used up. \n\nhttps://github.com/neovim/neovim/blob/master/src/nvim/fileio.c#L745-L1478\n\nI think \"detect\" is a misnomer.\n\nSince the encoding type for the Windows console is known and well documented, is this really all required in order to make piping work?\n",
            "created_at": "2014-07-30T18:10:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/1008#issuecomment-50656225",
            "id": 50656225,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1008",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjU2MjI1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/50656225/reactions"
            },
            "updated_at": "2014-07-30T18:20:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/50656225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I think I may have actually stumbled across this last night while examining the call graph of :diffupdate. It's nearly a thousand lines that seem to try and guess the encoding, then begin reading until it fails because it guessed wrong, goto retry with a slightly different configuration, until all possibilities have been used up.\n\nAs it turns out I went on a similar odyssey (#1374) and came to the same conclusion. This functionality should be abstracted into a separate function. For the sanity of all involved and for perhaps extra functionality such as being able to decode the output of shell commands.\n\nSo I hope I'm right by claiming that there is no encoding detection for \"temp\" files such as those generated by vanilla vim's `system()` with `shelltemp`, but there is an encoding detection for new buffers (in `readfile()`).\n\nIt's in cases like this that a Go features like interfaces would come in real handy, it would allow us to abstract it quite a bit easier (io.Reader/io.Seeker/...).\n",
            "created_at": "2014-11-02T22:47:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/1008#issuecomment-61427658",
            "id": 61427658,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1008",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDI3NjU4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/61427658/reactions"
            },
            "updated_at": "2014-11-02T22:48:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/61427658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This is probably common knowledge, but inspecting the call-sites of `readfile()` (which does the encoding \"detection\" @splinterofchaos spoke of), I see that `do_filter()` calls `readfile()` on the output (file) of its redirected stream. So perhaps this elusive encoding detection we were all afraid to remove by using pipes for `system()` was actually only in `do_filter() aka !`.\n\nTo me, this makes it even more imperative to rip out the encoding detection code from `readfile()` and make it work on a arbitrary (possibly rewindable) stream.\n\nI'm not sure if this relates to `ftdetect` as mentioned by @justinmk in the beginning. So I'm thinking it's the second suggestion:\n\n> Detecting the encoding could refer to some feature of Vim that tries to infer the encoding based on the BOM or the presence of UTF8 sequences.\n\nAlso as @tarruda said:\n\n> This happens because when shelltemp is 1 vim will construct a shell command string that redirects the output to a temporary file before passing it to os_call_shell, something like this: cat test.utf{n} > tempfile. **Then it uses some method to detect the file encoding and reads the converted data into the buffer.**\n\nThat would be the `readfile()` call in `do_filter()`. Which of course doesn't get executed in the `noshelltemp` case.\n\nActually, now that I look at the system docs (`:h system`), I don't see it referring to detecting encoding anywhere. So perhaps this was all in our minds as well and no documentation error.\n",
            "created_at": "2014-11-03T10:58:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/1008#issuecomment-61462967",
            "id": 61462967,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1008",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDYyOTY3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/61462967/reactions"
            },
            "updated_at": "2014-11-03T10:58:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/61462967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I assume this may be related to my findings at <https://vi.stackexchange.com/questions/34905/can-a-vim-filter-be-interactive>, where in vim the below works as expected to filter lines interactively with fzf but not in neovim:\r\n\r\n```\r\n:set noshelltemp\r\n:r ! echo -e 'foo\\nbar\\nbaz\\nqux' | fzf -m\r\n```\r\n\r\nMacOS 12.0.1\r\nNVIM v0.5.1\r\nVIM - Vi IMproved 8.2 (2019 Dec 12, compiled Oct 21 2021 10:39:53)\r\n\r\nArch 5.14.15-arch1-1\r\nNVIM v0.5.1\r\nVIM - Vi IMproved 8.2 (2019 Dec 12, compiled Sep 15 2021 21:48:21)",
            "created_at": "2021-11-04T18:29:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/1008#issuecomment-961308901",
            "id": 961308901,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1008",
            "node_id": "IC_kwDOAPphoM45TGjl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/961308901/reactions"
            },
            "updated_at": "2025-04-11T09:40:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/961308901",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1234956?v=4",
                "events_url": "https://api.github.com/users/n8henrie/events{/privacy}",
                "followers_url": "https://api.github.com/users/n8henrie/followers",
                "following_url": "https://api.github.com/users/n8henrie/following{/other_user}",
                "gists_url": "https://api.github.com/users/n8henrie/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/n8henrie",
                "id": 1234956,
                "login": "n8henrie",
                "node_id": "MDQ6VXNlcjEyMzQ5NTY=",
                "organizations_url": "https://api.github.com/users/n8henrie/orgs",
                "received_events_url": "https://api.github.com/users/n8henrie/received_events",
                "repos_url": "https://api.github.com/users/n8henrie/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/n8henrie/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/n8henrie/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/n8henrie",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "## Status\n\nhttps://github.com/neovim/neovim/pull/33012 takes the first step: default to 'noshelltemp'.\n\nThis will help narrow the surface area of potential problems on Windows.\n\n## Next steps\n\nEven if it regresses something, we can continue with [this next step](https://github.com/neovim/neovim/issues/1008#issuecomment-50602022):\n\n> Find the code vim uses to detect encoding using temporary files\n> Refactor to enable usage of byte strings, and always apply it to the data read by filters\n\nThis may just mean \"ensure `readfile()` is called by `do_filter()` where necessary\", or it may mean we need to explicitly detect encoding in `do_filter()` by some other means.\n\nIf 'shelltemp' becomes a no-op, then these events are also no-ops/deprecated:\n\n> The |FilterReadPre|, |FilterReadPost| and |FilterWritePre|, |FilterWritePost| autocommands event are not triggered when 'shelltemp' is off.",
            "created_at": "2025-04-12T15:21:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/1008#issuecomment-2798872917",
            "id": 2798872917,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1008",
            "node_id": "IC_kwDOAPphoM6m02lV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2798872917/reactions"
            },
            "updated_at": "2025-04-12T15:40:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2798872917",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/1008/comments",
    "created_at": "2014-07-29T22:44:11Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/1008/events",
    "html_url": "https://github.com/neovim/neovim/issues/1008",
    "id": 39044004,
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "compatibility with Vim or older Neovim",
            "id": 109899712,
            "name": "compatibility",
            "node_id": "MDU6TGFiZWwxMDk4OTk3MTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/compatibility"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 158930125,
            "name": "encoding",
            "node_id": "MDU6TGFiZWwxNTg5MzAxMjU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/encoding"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 197254545,
            "name": "tui",
            "node_id": "MDU6TGFiZWwxOTcyNTQ1NDU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/tui"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "OS resources, pipes, streams",
            "id": 713599092,
            "name": "system",
            "node_id": "MDU6TGFiZWw3MTM1OTkwOTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/system"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/1008/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 709,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 637,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-04-12T17:52:52Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWUzOTA0NDAwNA==",
    "number": 1008,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/1008/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/1008/timeline",
    "title": "remove 'shelltemp'",
    "type": null,
    "updated_at": "2025-04-12T15:40:58Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/1008",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}