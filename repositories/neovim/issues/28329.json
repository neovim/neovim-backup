{
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
        "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
        "followers_url": "https://api.github.com/users/MariaSolOs/followers",
        "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
        "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MariaSolOs",
        "id": 62502207,
        "login": "MariaSolOs",
        "node_id": "MDQ6VXNlcjYyNTAyMjA3",
        "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
        "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
        "repos_url": "https://api.github.com/users/MariaSolOs/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MariaSolOs",
        "user_view_type": "public"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs",
            "user_view_type": "public"
        }
    ],
    "author_association": "MEMBER",
    "body": "# Problem\n\nLSP servers have various custom capabilities and commands that are not part of the LSP spec, e.g.:\n\n- \"go to source definition\" (typescript) [#28328](https://github.com/neovim/neovim/issues/28328)\n- \"update imports\" [#20784](https://github.com/neovim/neovim/issues/20784)\n- \"open docs\" (rust) [#1921](https://github.com/neovim/nvim-lspconfig/pull/1921)\n\nThe current situation with nvim-lspconfig is that 10+ lines of code are needed to define each command or custom capability. That's unsustainable, we can't maintain that for 100s of LSP servers.\n\n\nSee also:\n\n- https://github.com/neovim/neovim/pull/30932\n- https://github.com/neovim/nvim-lspconfig/issues/1937\n- https://github.com/neovim/neovim/issues/26045#issuecomment-1811489889\n- https://github.com/neovim/neovim/pull/18506\n\n# Expected behavior\n\nReduce friction for users to use custom (off-spec) server capabilities/commands.\n\nSome sort of guidance, and possibly a micro-framework (`vim.lsp.commands` or similar), so that: \n\n1. users can do `:Lsp cmd <tab>`.\n2. config maintainers have a pattern they can follow.\n    - Guidance:\n        - Do NOT create aliases to code-actions/code-lenses (those are already auto-discoverable!)\n        - Create aliases to `\"workspace/executeCommand\"` (example: `:Lsp cmd organizeImports`) via [code example...]\n4. (?) convert all the [bespoke lspconfig commands](https://github.com/neovim/nvim-lspconfig/blob/ff6471d4f837354d8257dfa326b031dd8858b16e/lua/lspconfig/configs/eslint.lua#L155-L162) to `vim.lsp.commands` ([jdtls example](https://github.com/neovim/neovim/issues/28329#issuecomment-2056037862))\n\n## Closed questions\n\n- ✅ `vim.lsp.get_active_clients()[1].server_capabilities` and `vim.lsp.get_active_clients()[1].commands` already exist. What is the remaining friction? Why do we get requests like [this](https://github.com/neovim/nvim-lspconfig/pull/1921)? Do we simply need some hints in the documentation that guide users? Do we need a util function that makes it easy for users to define mappings around server commands/capabilities?\n    - Answer: see https://github.com/neovim/neovim/issues/28329#issuecomment-2054151019\n    - Answer: `vim.lsp.commands`\n\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> We need a general mechanism that makes it easy for users and scripts (such as nvim-lspconfig) to:\r\n\r\n> 1. iterate through discovered server capabilities / commands\r\n> 2. define aliases to customer server commands and capabilities, in a non-verbose way\r\n\r\nI think there's a bit of a misunderstanding here.\r\n\r\nLSP defines two types of commands:\r\n\r\n- _server_ commands. These are advertised within server_capabilities.executeCommandProvider.commands and they (usually) work without any special client logic. The workflow is usually something like:\r\n    - user triggers code actions\r\n    - user selects code action to execute\r\n    - client tells server to run the command\r\n    - server sends workspaceEdit to the client\r\n\r\n  We cannot provide a generic way for users to call these commands directly, because many of them require arguments or context (e.g given via the code actions). The arguments required are command specific\r\n\r\n- _client_ commands. The specification doesn't specify any concrete client commands, but it acknowledges that clients can implement custom client commands. These are _not_ advertised by the server in `server_capabilities`. Typically the client informs the server that it supports them via `settings` or `init_options` in the initialize request. These always require some sort of custom client logic, and there's no way to have a general mechanism to use them. \r\n\r\n\r\n> The current situation with nvim-lspconfig is that 10+ lines of code are needed to define each command or custom capability. That's unsustainable, we can't maintain that for 100s of LSP servers.\r\n\r\n\r\nSome of the client commands could become part of the specification. But for some of them there are issues with no clear path forward (E.g. https://github.com/microsoft/language-server-protocol/issues/1641)\r\n\r\nOther than that, I don't see what else neovim core could do. Other than delegating more of the work to language specific plugins.\r\n",
            "created_at": "2024-04-14T18:43:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2054151019",
            "id": 2054151019,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56b9tr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054151019/reactions"
            },
            "updated_at": "2024-04-14T18:56:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054151019",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think there's a bit of a misunderstanding here.\r\n\r\nYes, I'm just feeling around here. I updated the title + description.\r\n\r\n\r\n> LSP defines two types of commands ...\r\n> * server commands `server_capabilities.executeCommandProvider.commands` ... user triggers code actions.\r\n> We cannot provide a generic way for users to call these commands directly\r\n\r\n✅ Those are discovered and presented via \"code actions\" menu, correct? So that's already covered.\r\n\r\n> * _client_ commands. ... These are _not_ advertised by the server in `server_capabilities`. Typically the client informs the server that it supports them via `settings` or `init_options` in the initialize request.\r\n\r\nUsing `rust-analyzer` [experimental/externalDocs](https://github.com/neovim/nvim-lspconfig/pull/1921/files) as an example: is there any way to list all of its `experimental/xx` methods?\r\n\r\nAre these goals tractable:\r\n\r\n- reduce the amount of boilerplate needed to define commands, by at least 2x.\r\n- reduce the amount of documentation needed to explain how users can create custom commands\r\n    - provide concise (but fully-working) examples\r\n\r\n## Example\r\n\r\nCode required to add custom rust-analyzer commands:\r\n\r\n### Before\r\n\r\n<details>\r\n<summary>code</summary>\r\n\r\n```lua\r\nlocal function reload_workspace(bufnr)\r\n  bufnr = util.validate_bufnr(bufnr)\r\n  local clients = vim.lsp.get_active_clients { name = 'rust_analyzer', bufnr = bufnr }\r\n  for _, client in ipairs(clients) do\r\n    vim.notify 'Reloading Cargo Workspace'\r\n    client.request('rust-analyzer/reloadWorkspace', nil, function(err)\r\n      if err then\r\n        error(tostring(err))\r\n      end\r\n      vim.notify 'Cargo workspace reloaded'\r\n    end, 0)\r\n  end\r\nend\r\n\r\nlocal function open_docs(bufnr)\r\n  bufnr = util.validate_bufnr(bufnr)\r\n  vim.lsp.buf_request(bufnr, 'experimental/externalDocs', vim.lsp.util.make_position_params(), function(err, url)\r\n    if err then\r\n      error(tostring(err))\r\n    else\r\n      vim.fn['netrw#BrowseX'](url, 0)\r\n    end\r\n  end)\r\nend\r\n\r\nvim.lsp.start{\r\n  ...,\r\n  commands = {\r\n    CargoReload = {\r\n      function()\r\n        reload_workspace(0)\r\n      end,\r\n      description = 'Reload current cargo workspace',\r\n    },\r\n    RustOpenDocs = {\r\n      function()\r\n        open_docs(0)\r\n      end,\r\n      description = 'Open documentation for the symbol under the cursor in default browser',\r\n    },\r\n  },\r\n}\r\n```\r\n\r\n</details>\r\n\r\n### After\r\n\r\nAssuming we provide a util function like:\r\n\r\n```\r\nvim.lsp.command(name:string, on_done:function)\r\n-- Works like buf_request_all ?\r\nvim.lsp.command_all(name:string, on_done:function)\r\n```\r\n\r\nThe code would now look like:\r\n\r\n```lua\r\nTODO\r\n```",
            "created_at": "2024-04-14T23:34:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2054221653",
            "id": 2054221653,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56cO9V",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054221653/reactions"
            },
            "updated_at": "2024-04-14T23:38:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054221653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk other lsp clients, such as coc or vscode, use something similar to a command palette (other ides also have similar interfaces which group actions in an easily filterable/discoverable pick-list). What i suggest is we provide a way (e.g. an interface for attaching commands, and another interface on top of ui.select for the actual ui presentation) for other plugins (such as for example nvim-jdtls @mfussenegger, which has quite a few user commands exposing some of the internal offspec jdtls capabilities) to easily attach their own custom commands, instead of creating UserCommands as they do atm. It should look/feel similar, and it is pretty much an analogue to code_actions. \r\n\r\nHere is how coc nvim exposes all the commands that the different extensions register. For nvim those should maybe be filtered by filetype, currently active clients etc etc, but this is the general idea. If we provide this, it will be easy for plugin users to discover custom commands that the lsp extension plugins expose and they will not need to learn new user commands, if they can fuzzy search them or their description. \r\n\r\n![image](https://github.com/neovim/neovim/assets/15955811/d6e6a87d-3e48-4aa7-be3d-3c5fa1e53bb6)\r\n\r\nThere are others, which have a well defined behavior, which we can expose/add from nvim too, eventually, such as workspace related actions - displaying currently attached workspace folders, or inspecting workspace edits and so on.\r\n\r\n![image](https://github.com/neovim/neovim/assets/15955811/b2999430-f9f1-4795-9a7c-7f3fa24a3767)\r\n",
            "created_at": "2024-04-15T03:24:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2054697071",
            "id": 2054697071,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56eDBv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054697071/reactions"
            },
            "updated_at": "2024-04-15T10:02:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054697071",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Are these goals tractable:\r\n\r\n> reduce the amount of boilerplate needed to define commands, by at least 2x.\r\n> reduce the amount of documentation needed to explain how users can create custom commands\r\n> provide concise (but fully-working) examples\r\n\r\nWe could document some examples, but I don't think you can reduce the amount of boilerplate by 2x.\r\n\r\n> Using rust-analyzer experimental/externalDocs as an example: is there any way to list all of its experimental/xx methods?\r\n\r\nThis isn't a client command. It's just a extra LSP method. There is no discovery mechanism for these. Just the documentation of the language server - or in many cases not even that, but reverse engineering of vscode extensions.\r\n\r\nThe main problems here are:\r\n\r\n- You need to know the arguments required, and logic to create them.\r\n- You need to know the response type\r\n- You need custom logic to process the response. \r\n\r\nThis is all specific to the method.\r\n\r\nAnd the `open_docs` example is also kinda broken, it should use `client.request` like the `reload_workspace` example. `vim.lsp.buf_request` would make a request using all clients attached to a buffer, which means other servers not supporting it would receive the request too, and very likely fail.\r\n\r\nClient commands on the other hand can be used instead of server commands, and are part of some other operations like code-actions. The difference to server commands is that they usually have more round-trips.\r\n\r\nFor example nvim-jdtls defines a `java.action.generateToStringPrompt` command (using `vim.lsp.commands`, which is documented), and advertises it in the settings of the initiailize request. The workflow is then like this:\r\n\r\n- User triggers code action\r\n- Server responds with available code actions, including an additional \"Generate toString\" action\r\n- User selects \"Generate toString\", this triggers the client command\r\n- Client command sends custom request to server (`java/checkToStringStatus`), server responds with the properties that can be included in a `toString` implementation.\r\n- Client shows a prompt to the user to select the properties to use\r\n- Client sends another request to the server (`java/generateToString`), using the properties the user selected\r\n- Server responds with a `WorkspaceEdit`, that the client applies\r\n\r\nThis is all completely custom\r\n\r\n---\r\n\r\nAlso note that what lspconfig does (or did?) with `commands` was to provide sugar for neovim _user_ commands definitions. That's not really specific to the LSP module at all.\r\n",
            "created_at": "2024-04-15T08:01:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2056037862",
            "id": 2056037862,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56jKXm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056037862/reactions"
            },
            "updated_at": "2024-04-15T08:05:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056037862",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Here is how coc nvim exposes all the commands that the different extensions register\r\n\r\n@asmodeus812 but how are those commands discovered? Where is that info coming from?\r\n\r\n> > Using rust-analyzer experimental/externalDocs as an example: is there any way to list all of its experimental/xx methods?\r\n> \r\n> This isn't a client command. It's just a extra LSP method. There is no discovery mechanism for these. Just the documentation of the language server - or in many cases not even that, but reverse engineering of vscode extensions.\r\n\r\nThat isn't part of the \"capabilities\" response? It's strange that servers can't list their custom methods. \r\n \r\n> The main problems here are:\r\n> \r\n> * You need to know the arguments required, and logic to create them.\r\n> * You need to know the response type\r\n> * You need custom logic to process the response.\r\n\r\nUnderstood. But even just listing the names, and point to the upstream docs, would be very helpful, and avoids support requests. Some UX tweaks may be enough.\r\n\r\nnvim-lspconfig has a CI job that [pulls package.json files](https://github.com/neovim/nvim-lspconfig/blob/da0b236ef3c7fdac8aec758fa88b028cd9358495/scripts/docgen.lua#L162) to get various bits of info. But  custom methods aren't declared in package.json files, they are just loosely documented as you mentioned.",
            "created_at": "2024-04-15T10:00:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2056435496",
            "id": 2056435496,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56krco",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056435496/reactions"
            },
            "updated_at": "2024-04-15T10:02:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056435496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Here is how coc nvim exposes all the commands that the different extensions register.\r\n\r\n@justinmk they are registered through/using the coc-lsp client's api, by each extension, i think that was obvious from my reply. This is also what vs code does, the commands are registered by the extension, but the api to interact/add/register/use those commands is provided by the vs code lsp client as a library itself.\r\n\r\ne.g. https://github.com/neoclide/coc-java/blob/43921b1eceb450a25d62545f6f206fd827235752/src/sourceAction.ts#L12",
            "created_at": "2024-04-15T10:27:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2056486111",
            "id": 2056486111,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56k3zf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056486111/reactions"
            },
            "updated_at": "2024-04-15T10:29:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056486111",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This is also what vs code does, the commands are registered.\r\n\r\nWe're not VS Code, though, on purpose; neither do we plan on replacing coc.nvim. We implement the LSP specification _and nothing but the specification_. Anything beyond that is intentionally left for server-specific plugins (which correspond to VS Code extensions) built on top of the base LSP API (as well as other methods that compose nicely, which this may or may not be relevant to).\r\n\r\n",
            "created_at": "2024-04-15T10:30:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2056491318",
            "id": 2056491318,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56k5E2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056491318/reactions"
            },
            "updated_at": "2025-03-30T19:47:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056491318",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@clason in that case if nvim only adheres to the spec and only the spec then this issue can be closed as resolved / not planned.",
            "created_at": "2024-04-15T10:40:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2056510201",
            "id": 2056510201,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56k9r5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056510201/reactions"
            },
            "updated_at": "2025-03-30T19:46:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056510201",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Not quite; the last part about \"other methods that compose nicely\" may still be actionable here. (We _do_ want to add _general_ API methods that makes it easier to write such custom plugins -- given a positive, individual, cost-benefit analysis, of course.)",
            "created_at": "2024-04-15T10:42:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2056517774",
            "id": 2056517774,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56k_iO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056517774/reactions"
            },
            "updated_at": "2025-03-30T19:47:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056517774",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> That isn't part of the \"capabilities\" response? It's strange that servers can't list their custom methods.\r\n\r\nNo, the capabilities only contain the capabilities defined in the specification and there is also no OpenAPI style dynamic introspection of methods.\r\n\r\nWe could suggest to add that, but even if it were added, due to the BWC nature of the protocol, it would remain optional.\r\n\r\n> Understood. But even just listing the names, and point to the upstream docs, would be very helpful, and avoids support requests. Some UX tweaks may be enough.\r\n\r\nWe could add a `lsp-offspec-extensions` doc section, that lists the two common scenarios for plugin devs, including examples and some prose on how to best implement them:\r\n\r\n- Using off-spec methods\r\n- Creating custom client commands\r\n",
            "created_at": "2024-04-15T11:30:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2056604180",
            "id": 2056604180,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56lUoU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056604180/reactions"
            },
            "updated_at": "2024-04-15T11:30:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2056604180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> the commands are registered by the extension, but the api to interact/add/register/use those commands is provided by the client.\r\n\r\n> We do want to add general API methods that makes it easier to write such custom plugins \r\n\r\n@clason Well yes then i agree and it does match up with i said those clients do already at the moment as a solution to this very problem",
            "created_at": "2024-04-15T17:02:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2057405184",
            "id": 2057405184,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM56oYMA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2057405184/reactions"
            },
            "updated_at": "2024-04-15T17:54:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2057405184",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> For example nvim-jdtls defines a `java.action.generateToStringPrompt` command (using `vim.lsp.commands`,\n\nDoes this plan make sense?\n\n1. convert all the [bespoke lspconfig commands](https://github.com/neovim/nvim-lspconfig/blob/ff6471d4f837354d8257dfa326b031dd8858b16e/lua/lspconfig/configs/eslint.lua#L155-L162) to `vim.lsp.commands`\n2. allow discovery of `vim.lsp.commands` via `:Lsp cmd <tab>`.\n    - of course, that will only work for some kinds of commands.",
            "created_at": "2025-03-30T20:13:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2764726593",
            "id": 2764726593,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM6kymFB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764726593/reactions"
            },
            "updated_at": "2025-03-30T20:13:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764726593",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > For example nvim-jdtls defines a `java.action.generateToStringPrompt` command (using `vim.lsp.commands`,\n> \n> Does this plan make sense?\n> \n> 1. convert all the [bespoke lspconfig commands](https://github.com/neovim/nvim-lspconfig/blob/ff6471d4f837354d8257dfa326b031dd8858b16e/lua/lspconfig/configs/eslint.lua#L155-L162) to `vim.lsp.commands`\n\n\nThat particular example is not a LSP client command, but a user command to trigger a server command.\nNot sure why/if this should be in lspconfig at all - seems a bit like a specific `code_action{ apply = true, filter = ...}` case.\n\n\n> 2. allow discovery of `vim.lsp.commands` via `:Lsp cmd <tab>`.\n>    * of course, that will only work for some kinds of commands.\n\n\nMost client commands can't be invoked directly, and in many cases it doesn't make sense. Concrete example:\n\njdtls has a extension to generate tests, if you trigger that, the server calls the `_java.test.askClientForInput` client command. That command needs to prompt the user for some input and return it to the server.\nYou _cannot_ initiate the client command directly on the client because the server wouldn't expect it.\n\nMy take is that none of this belongs in core or anywhere near it. These are all off-spec extensions.\n\n\nOr a different case:\n\nvscode has a `editor.action.triggerSuggest` command, that some servers use for completion candidates to re-trigger completion after you've selected the current completion candidate.\n\nMapped to neovim that looks like:\n\n```\n  vim.lsp.commands[\"editor.action.triggerSuggest\"] = function()\n    local ok, result = pcall(vim.lsp.completion.get)\n    if ok then\n      return vim.NIL\n    else\n      return vim.lsp.rpc_response_error(vim.lsp.protocol.ErrorCodes.InternalError, result)\n    end\n  end\n```\n\nIt would be strange to make that accessible via `:Lsp cmd editor.action.triggerSuggest`\n",
            "created_at": "2025-03-30T20:40:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2764736321",
            "id": 2764736321,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM6kyodB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764736321/reactions"
            },
            "updated_at": "2025-03-30T20:47:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764736321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> seems a bit like a specific `code_action{ apply = true, filter = ...}` case.\n\nOk, we definitely don't want to duplicate code-actions as \"commands\", because code-actions are already discoverable.\n\n> My take is that none of this belongs in core or anywhere near it. These are all off-spec extensions.\n\nThe minimum thing I'm hoping for is that we have an answer for defining + discovering server-specific commands. The answer could be:\n\n- 80% covered by code-actions + code-lenses\n- The remaining 20% (supposedly) needs custom commands.\n    - The usual example is something like [\"organize imports\"](https://github.com/neovim/nvim-lspconfig/blob/ff6471d4f837354d8257dfa326b031dd8858b16e/lua/lspconfig/configs/pyright.lua#L13) (or, I suppose, any other `\"workspace/executeCommand\"`, since those aren't auto-discoverable.\n\nWe need some sort of guidance, and possibly a micro-framework (`vim.lsp.commands` or similar), so that:\n\n1. users can do `:Lsp cmd <tab>`\n2. config maintainers have a pattern they can follow",
            "created_at": "2025-03-30T20:52:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2764740619",
            "id": 2764740619,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM6kypgL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764740619/reactions"
            },
            "updated_at": "2025-03-30T20:53:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764740619",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We need some sort of guidance, and possibly a micro-framework (vim.lsp.commands or similar), so that:\n\n> 1. users can do :Lsp cmd <tab>\n> 2. config maintainers have a pattern they can follow\n\nI don't understand why we need 1)\n\nThe purpose of the lsp client commands is for the server to trigger actions on the client side. They're not intended as a _direct_ entry point for users. That's what code-actions, code-lens, inlay-hints, completions are for - those can all trigger the lsp client commands as a indirect side-effect.\n\nOrganize import is in 90% of the case a short-cut for code-action with a filter+apply. Only in a few cases does it even need a client command implementation for it - and even in those cases, the initial trigger is still the code-action. \n\nIf I misunderstood and you talk about `:Lsp cmd <tab>` as a way to trigger the _server_ commands: The problem with that is that most of them require some context, and what kind is also not discoverable. E.g. most organize import commands will require the uri - but the format of the payload is unknown/implementation specific (and provided by the code-actions, which is the proper entry point)\n",
            "created_at": "2025-03-31T17:56:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2766986446",
            "id": 2766986446,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM6k7NzO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2766986446/reactions"
            },
            "updated_at": "2025-03-31T17:56:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2766986446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I don't understand why we need 1) ... Organize import is in 90% of the case a short-cut for code-action with a filter+apply.\n\nAt minimum, looking for a way to replace [nvim-lspconfig `commands`](https://github.com/search?q=repo%3Aneovim%2Fnvim-lspconfig%20commands&type=code). Many examples there don't map to code-actions (AFAICT).\n\n- https://github.com/neovim/nvim-lspconfig/blob/3e873195f501b1e02d9fd7e5af5cbe74fc2f98c1/lua/lspconfig/configs/ds_pinyin_lsp.lua#L8-L12\n- https://github.com/neovim/nvim-lspconfig/blob/3e873195f501b1e02d9fd7e5af5cbe74fc2f98c1/lua/lspconfig/configs/ccls.lua#L3-L4\n- https://github.com/neovim/nvim-lspconfig/blob/3e873195f501b1e02d9fd7e5af5cbe74fc2f98c1/lua/lspconfig/configs/markdown_oxide.lua#L22-L25\n- https://github.com/neovim/nvim-lspconfig/blob/3e873195f501b1e02d9fd7e5af5cbe74fc2f98c1/lua/lspconfig/configs/denols.lua#L4-L9\n- https://github.com/neovim/nvim-lspconfig/blob/3e873195f501b1e02d9fd7e5af5cbe74fc2f98c1/lua/lspconfig/configs/svlangserver.lua#L33-L36\n\n\n\n> `:Lsp cmd <tab>` as a way to trigger the _server_ commands: The problem with that is that most of them require some context\n\nWell, I assume the `commands` defined in the various nvim-lspconfig configs are providing that context.\n\nMany of these custom commands are \"nice to have\". And I previously held the position that they should be third-party plugins. But I don't see why we can't provide a micro-framework to define those kinds of commands, which then become discoverable via `:Lsp ...`.",
            "created_at": "2025-04-04T14:26:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2778889764",
            "id": 2778889764,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM6lon4k",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2778889764/reactions"
            },
            "updated_at": "2025-04-04T14:27:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2778889764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> At minimum, looking for a way to replace [nvim-lspconfig commands](https://github.com/search?q=repo%3Aneovim%2Fnvim-lspconfig%20commands&type=code). Many examples there don't map to code-actions\n\n1) This is a user command sending a off-spec notification to the server. Unrelated to LSP commands\n2) This is also a user command sending a off-spec request to the server. Unrelated to LSP commands\n3) Also user commands - this time using a server command. Not clear to me if those would show up via code-action or not. In any case, the hardcoded arguments can't be discovered in any way other than reading docs or vscode-extension code\n4) Same as 3; On a side node, at least the `deno/virtualTextDocument` stuff is getting a proper replacement in the spec: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#workspace_textDocumentContent\n5) Same as 3\n\nI don't see how these could be discovered. All of them require knowing the method names for the notify/request call, or the payload format for the server commands as well as the response format and what to do with it.\n\n>  But I don't see why we can't provide a micro-framework to define those kinds of commands,\n\n`nvim_create_user_command` :)\n\n\nIf we wanted to create `:Lsp` namespaced user commands automatically for some of these, we'd need to lobby for a spec addition that allows servers to announce & describe server commands that can be invoked directly. Currently the command provider in the server capabilities only lists the server's commands, but doesn't describe the supported arguments - or the response format. (and it would still exclude example 1 and 2)\n\nAnd so far there's also a tendency to make additions to the spec more concrete to give editors more flexibility in regards to how something is exposed.\n\n---\n\nIf this is actually about allowing users to define `:Lsp` scoped user commands - wouldn't this relate to https://github.com/neovim/neovim/issues/32263?\n",
            "created_at": "2025-04-04T16:04:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2779184244",
            "id": 2779184244,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM6lpvx0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2779184244/reactions"
            },
            "updated_at": "2025-04-04T16:22:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2779184244",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > But I don't see why we can't provide a micro-framework to define those kinds of commands,\n> \n> `nvim_create_user_command` :)\n\nI guess so, but meanwhile we can start by documenting the expected pattern:\n\n1. always prefix commands with `Lsp<config_name>...`\n2. define the command via `config.on_attach` + `nvim_create_user_command`\n\nIt doesn't look like [lspconfig is doing](https://github.com/neovim/nvim-lspconfig/blob/d3ad666b7895f958d088cceb6f6c199672c404fe/lua/lspconfig/util.lua#L63-L72) much more than that.\n\n",
            "created_at": "2025-04-07T09:51:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/28329#issuecomment-2782749254",
            "id": 2782749254,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28329",
            "node_id": "IC_kwDOAPphoM6l3WJG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2782749254/reactions"
            },
            "updated_at": "2025-04-07T09:51:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2782749254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 19,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28329/comments",
    "created_at": "2024-04-14T14:11:41Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28329/events",
    "html_url": "https://github.com/neovim/neovim/issues/28329",
    "id": 2242187929,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4457150369,
            "name": "architecture",
            "node_id": "LA_kwDOAPphoM8AAAABCaq3oQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/architecture"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28329/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 708,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 636,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-04-07T10:13:12Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6FpRKZ",
    "number": 28329,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 13,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 13,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28329/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28329/timeline",
    "title": "LSP: user can easily discover, define client commands",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-07T15:44:00Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28329",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}