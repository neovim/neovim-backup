{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Neovim version (nvim -v)\r\n\r\nNVIM v0.6.1\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nnot applicable\r\n\r\n### Operating system/version\r\n\r\nLinux Debian 11\r\n\r\n### Terminal name/version\r\n\r\nxfce4-terminal-emulator\r\n\r\n### $TERM environment variable\r\n\r\nxterm-256color\r\n\r\n### Installation\r\n\r\nappimage\r\n\r\n### How to reproduce the issue\r\n\r\nExample of lua operator function (`.` repeat doesn't work here):\r\n```vim\r\nnnoremap  <silent> <expr> s  v:lua.require'rc.operators'.replace(v:count, v:register, v:false)\r\nnnoremap  <silent> <expr> sq v:lua.require'rc.operators'.replace(v:count, v:register, v:true)\r\n```\r\n```lua\r\n-------------------------------------------------------------------------------\r\n-- Replace operator\r\n-------------------------------------------------------------------------------\r\n\r\nlocal cu = vim.api.nvim_replace_termcodes('<c-u>', true, true, true)\r\nlocal cr = vim.api.nvim_replace_termcodes('<cr>', true, true, true)\r\n\r\nlocal repl_reg, repl_reindent\r\n\r\nfunction M.replace(count, reg, reindent)\r\n  repl_reg = reg == '_' and '\"' or reg\r\n  repl_reindent = reindent\r\n  vim.o.opfunc = 'v:lua.Vimrc.ops.replace_opfunc'\r\n  return ':' .. cu .. cr .. (count > 0 and count or '') .. 'g@'\r\nend\r\n\r\nfunction M.replace_opfunc(tp)\r\n  local oldreg = vim.fn.getreg('\"')\r\n  local oldvmode = vim.o.virtualedit\r\n  vim.o.virtualedit = 'onemore'\r\n  if tp == 'line' then\r\n    vim.cmd 'keepjumps normal! `[V`]'\r\n  else\r\n    vim.cmd 'keepjumps normal! `[v`]'\r\n  end\r\n  local r = repl_reindent and '`[=`]' or ''\r\n  vim.cmd ('normal! \"' .. repl_reg .. 'p`]' .. r)\r\n  vim.o.virtualedit = oldvmode\r\n  vim.fn.setreg('\"', oldreg)\r\nend\r\n```\r\n\r\nSame operator in vimscript (`.` repeat works):\r\n```vim\r\nnnoremap  <silent> <expr> s  Replace(v:count, v:register, v:false)\r\nnnoremap  <silent> <expr> sq Replace(v:count, v:register, v:true)\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Replace operator\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nfun! Replace(count, register, reindent)\r\n    let s:repl_reg = a:register == \"_\" ? '\"' : a:register\r\n    let s:repl_reindent = a:reindent\r\n    let n = a:count>1? string(a:count) : ''\r\n    set opfunc=ReplaceOpfunc\r\n    return \":\\<c-u>\\<cr>\" . n . \"g@\"\r\nendfun\r\n\r\nfun! ReplaceOpfunc(type)\r\n    let oldreg = [getreg('\"'), getregtype('\"')]\r\n    let oldvmode = &virtualedit\r\n    set virtualedit=onemore\r\n    if a:type == 'line' | keepjumps normal! `[V`]\r\n    else                | keepjumps normal! `[v`]\r\n    endif\r\n    let r = s:repl_reindent ? '`[=`]' : ''\r\n    execute \"normal! \\\"\" . s:repl_reg . \"p`]\".r\r\n    let &virtualedit = oldvmode\r\n    call setreg('\"', oldreg[0], oldreg[1])\r\nendfun\r\n```\r\n---\r\n\r\nLocally this patch seems to fix it, but I'm not sure it's the right way to do it.\r\n\r\n```diff\r\ndiff --git a/src/nvim/lua/executor.c b/src/nvim/lua/executor.c\r\nindex 029e7eb66..549b41a56 100644\r\n--- a/src/nvim/lua/executor.c\r\n+++ b/src/nvim/lua/executor.c\r\n@@ -15,6 +15,7 @@\r\n #include \"nvim/buffer_defs.h\"\r\n #include \"nvim/change.h\"\r\n #include \"nvim/cursor.h\"\r\n+#include \"nvim/edit.h\"\r\n #include \"nvim/eval/userfunc.h\"\r\n #include \"nvim/event/loop.h\"\r\n #include \"nvim/event/time.h\"\r\n@@ -36,6 +37,7 @@\r\n #include \"nvim/msgpack_rpc/channel.h\"\r\n #include \"nvim/os/os.h\"\r\n #include \"nvim/screen.h\"\r\n+#include \"nvim/search.h\"\r\n #include \"nvim/undo.h\"\r\n #include \"nvim/version.h\"\r\n #include \"nvim/vim.h\"\r\n@@ -904,6 +906,8 @@ void nlua_typval_call(const char *str, size_t len, typval_T *const args, int arg\r\n {\r\n #define CALLHEADER \"return \"\r\n #define CALLSUFFIX \"(...)\"\r\n+  bool did_save_redo = false;\r\n+  save_redo_T save_redo;\r\n   const size_t lcmd_len = sizeof(CALLHEADER) - 1 + len + sizeof(CALLSUFFIX) - 1;\r\n   char *lcmd;\r\n   if (lcmd_len < IOSIZE) {\r\n@@ -918,8 +922,21 @@ void nlua_typval_call(const char *str, size_t len, typval_T *const args, int arg\r\n #undef CALLHEADER\r\n #undef CALLSUFFIX\r\n \r\n+  // Save search patterns and redo buffer.\r\n+  save_search_patterns();\r\n+  if (!ins_compl_active()) {\r\n+    saveRedobuff(&save_redo);\r\n+    did_save_redo = true;\r\n+  }\r\n+\r\n   nlua_typval_exec(lcmd, lcmd_len, \"v:lua\", args, argcount, false, ret_tv);\r\n \r\n+  // restore search patterns and redo buffer\r\n+  if (did_save_redo) {\r\n+    restoreRedobuff(&save_redo);\r\n+  }\r\n+  restore_search_patterns();\r\n+\r\n   if (lcmd != (char *)IObuff) {\r\n     xfree(lcmd);\r\n   }\r\n```\r\n\r\n### Expected behavior\r\n\r\nCan repeat operators with `.` if `&opfunc` is a `v:lua` function.\r\n\r\n### Actual behavior\r\n\r\nThey're not repeatable.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I also just ran into this. It seems sufficient to just change the opfunc to a vim function. That vim function can then call into lua code with `v:lua`, and it works fine at least for me.\r\n\r\n```lua\r\nlocal M = {}\r\n\r\nfunction M.myfunction(motion)\r\n    if motion == nil then\r\n        vim.opt.opfunc = '__myfunction_opfunc'\r\n        return 'g@'\r\n    end\r\n\r\n    -- Do actual function logic.\r\nend\r\n\r\nvim.cmd [[\r\n    function! __myfunction_opfunc(motion) abort\r\n        return v:lua.require('mymodule').myfunction(a:motion)\r\n    endfunction\r\n]]\r\n\r\nmap('n', 'cy', [[v:lua.require('mymodule').myfunction()]], {expr = true})\r\n\r\nreturn M\r\n```",
            "created_at": "2022-03-19T23:20:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/17503#issuecomment-1073128889",
            "id": 1073128889,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/17503",
            "node_id": "IC_kwDOAPphoM4_9qW5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1073128889/reactions"
            },
            "updated_at": "2022-03-19T23:20:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1073128889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2928612?v=4",
                "events_url": "https://api.github.com/users/binyomen/events{/privacy}",
                "followers_url": "https://api.github.com/users/binyomen/followers",
                "following_url": "https://api.github.com/users/binyomen/following{/other_user}",
                "gists_url": "https://api.github.com/users/binyomen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/binyomen",
                "id": 2928612,
                "login": "binyomen",
                "node_id": "MDQ6VXNlcjI5Mjg2MTI=",
                "organizations_url": "https://api.github.com/users/binyomen/orgs",
                "received_events_url": "https://api.github.com/users/binyomen/received_events",
                "repos_url": "https://api.github.com/users/binyomen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/binyomen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/binyomen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/binyomen",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/17503/comments",
    "created_at": "2022-02-23T02:56:14Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/17503/events",
    "html_url": "https://github.com/neovim/neovim/issues/17503",
    "id": 1147575351,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/17503/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5EZpw3",
    "number": 17503,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/17503/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/17503/timeline",
    "title": "v:lua opfunc cannot be repeated",
    "updated_at": "2025-01-19T11:38:22Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/17503",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/26169924?v=4",
        "events_url": "https://api.github.com/users/mg979/events{/privacy}",
        "followers_url": "https://api.github.com/users/mg979/followers",
        "following_url": "https://api.github.com/users/mg979/following{/other_user}",
        "gists_url": "https://api.github.com/users/mg979/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mg979",
        "id": 26169924,
        "login": "mg979",
        "node_id": "MDQ6VXNlcjI2MTY5OTI0",
        "organizations_url": "https://api.github.com/users/mg979/orgs",
        "received_events_url": "https://api.github.com/users/mg979/received_events",
        "repos_url": "https://api.github.com/users/mg979/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mg979/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mg979/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mg979",
        "user_view_type": "public"
    }
}