{
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski",
            "user_view_type": "public"
        }
    ],
    "author_association": "MEMBER",
    "body": "Create user commands for `vim.pack` common actions (add, update, delete) for easier interactive usage.\n\nQuestions that need discussions:\n\n1. Should it be single command with second word as action (`:Pick add`, `:Pick update`, `:Pick delete`) or should it be separate user commands (`:PickAdd`, `:PickUpdate`, `:PickDelete`)?\n\n2. Should it provide completion suggestions? If yes, which ones?\n\n3. Where to put its definition: '_defaults.lua' or directly inside 'pack.lua'. There are examples of both.\n\nMy suggestions:\n\n1. I prefer separate commands more. Mostly because:\n    - Each one can have dedicated `desc` field. This makes it easier to use with fuzzy-pickers than a single all-in-one command.\n    - Using `!` version is more natural: `:PackUpdate! nvim-lspconfig` vs `:Pack! update nvim-lspconfig`.\n    - Providing completions is easier for separate commands: no need to parse second \"action word\" and provide completion for it.\n\n      The only benefit of all-in-one command is less pollution of user command namespace and as a result easier `<Tab>` completion in command line (which is questionable to me).\n\n2. I'd say yes for `:PackUpdate` and `:PackDelete` (based on all directories in `pack/core/opt`, i.e. plugins managed by `vim.pack`) and no for `:PackAdd` (at least if there is no centralized list of plugin links).\n\n3. Directly 'pack.lua' seems fine to me.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Very low priority (post Nvim 0.12, if ever). I have never needed this, and `:lua vim.pack.add('...')` is there when it's needed.\n\nAlso if we actually decide to do this it should probably be a builtin like `:pack ...`.\n\nThe more likely path is that we have a \"picker\" solution which allows users to filter plugins and install via `<Enter>`.",
            "created_at": "2025-07-04T15:04:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/34764#issuecomment-3036611620",
            "id": 3036611620,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34764",
            "node_id": "IC_kwDOAPphoM60_wQk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3036611620/reactions"
            },
            "updated_at": "2025-07-04T15:05:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3036611620",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Very low priority (post Nvim 0.12, if ever). I have never needed this, and `:lua vim.pack.add('...')` is there when it's needed.\n\nI kind of agree for `vim.pack.add`, but `:PackUpdate` and `:PackDelete` with completions for available plugins names are pretty useful in everyday usage.",
            "created_at": "2025-07-04T15:25:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/34764#issuecomment-3036692448",
            "id": 3036692448,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34764",
            "node_id": "IC_kwDOAPphoM61AD_g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 14,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 14,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3036692448/reactions"
            },
            "updated_at": "2025-07-04T15:25:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3036692448",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I firmly agree with making it 'built-in' lower-case `:pack`. I really value the distinction between lower-case (Nvim-owned) commands and upper-case User commands. Sadly, there are already some Nvim-owned commands that are defined as user commands (like `:Inspect` and `:EditQuery`). ",
            "created_at": "2025-07-06T16:43:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/34764#issuecomment-3042194034",
            "id": 3042194034,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34764",
            "node_id": "IC_kwDOAPphoM61VDJy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 9,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 9,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3042194034/reactions"
            },
            "updated_at": "2025-07-06T16:43:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3042194034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Could we have a `PackSync` command to checkout the revisions from the lockfile in the plugin clones?\n\nUse cases would be:\n\n* I want to roll back my configuration (including lockfile) to a known stable state\n* I want to synchronize my configuration between my various systems\n\nUnfortunately I'm not very skilled with lua, but here is a POC to show what I mean:\n\n```lua\nvim.api.nvim_create_user_command(\"PackSync\", function()\n    local pack_dir_path = vim.fn.stdpath(\"data\") .. \"/site/pack/core/opt\"\n    local lockfile_path = vim.fn.stdpath(\"config\") .. \"/nvim-pack-lock.json\"\n\n    local lockfile_fd = vim.uv.fs_open(lockfile_path, \"r\", 438)\n    if not lockfile_fd then\n        return\n    end\n    local stat = assert(vim.uv.fs_fstat(lockfile_fd))\n    local lockfile_content = assert(vim.uv.fs_read(lockfile_fd, stat.size, 0))\n    assert(vim.uv.fs_close(lockfile_fd))\n    local lockfile = vim.json.decode(lockfile_content)\n\n    for plugin_name, plugin_info in pairs(lockfile.plugins) do\n        local plugin_dir = pack_dir_path .. \"/\" .. plugin_name\n        if not vim.uv.fs_stat(plugin_dir) then\n            goto continue\n        end\n\n        local lockfile_commit = plugin_info.rev\n\n        local git_rev_parse = vim.system(\n            { \"git\", \"rev-parse\", \"HEAD\" },\n            { cwd = plugin_dir }\n        )\n            :wait()\n        local actual_commit =\n            string.sub(git_rev_parse.stdout, 1, string.len(lockfile_commit))\n\n        if lockfile_commit == actual_commit then\n            goto continue\n        end\n\n        vim.system({ \"git\", \"fetch\" }, { cwd = plugin_dir }):wait()\n        vim.system(\n            { \"git\", \"switch\", \"--detach\", lockfile_commit },\n            { cwd = plugin_dir }\n        )\n            :wait()\n\n        vim.api.nvim_exec_autocmds(\"PackChanged\", {\n            data = {\n                kind = \"update\",\n                spec = { name = plugin_name },\n            },\n        })\n\n        vim.notify(\"Synced \" .. plugin_name, vim.log.levels.INFO)\n\n        ::continue::\n    end\nend, {})\n```\n\nThe code obviously cuts all the corners in terms of safety, performance etc.",
            "created_at": "2025-10-10T19:20:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/34764#issuecomment-3391980113",
            "id": 3391980113,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34764",
            "node_id": "IC_kwDOAPphoM7KLYJR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3391980113/reactions"
            },
            "updated_at": "2025-10-10T19:29:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3391980113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/63847?v=4",
                "events_url": "https://api.github.com/users/ovidiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/ovidiu/followers",
                "following_url": "https://api.github.com/users/ovidiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/ovidiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ovidiu",
                "id": 63847,
                "login": "ovidiu",
                "node_id": "MDQ6VXNlcjYzODQ3",
                "organizations_url": "https://api.github.com/users/ovidiu/orgs",
                "received_events_url": "https://api.github.com/users/ovidiu/received_events",
                "repos_url": "https://api.github.com/users/ovidiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ovidiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ovidiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ovidiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ovidiu did you try the `gra` code-actions from the `confirm-update` buffer",
            "created_at": "2025-10-10T19:29:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/34764#issuecomment-3392023074",
            "id": 3392023074,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34764",
            "node_id": "IC_kwDOAPphoM7KLioi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3392023074/reactions"
            },
            "updated_at": "2025-10-10T19:29:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3392023074",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Use cases would be:\n> \n>     * I want to roll back my configuration (including lockfile) to a known stable state\n> \n>     * I want to synchronize my configuration between my various systems\n\nFrom the `:h vim.pack.update()`:\n\n> Every actual update is logged in \"nvim-pack.log\" file inside \"log\" |stdpath()|.\n\nSo the currently suggested approach is to get the revision of what you want your plugin(s) to have and then use it as `version` (see \"Switch plugin's version\" example workflow in `:h vim.pack`). After target revision is checked out (lockfile also updates), you can move back to previous `version` (which will mean that next `vim.pack.update()` will try to apply new changes; use `gra` code action to skip only the plugin's update if you don't want them).",
            "created_at": "2025-10-10T19:42:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/34764#issuecomment-3392083414",
            "id": 3392083414,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34764",
            "node_id": "IC_kwDOAPphoM7KLxXW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3392083414/reactions"
            },
            "updated_at": "2025-10-10T19:42:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3392083414",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "So if one Monday morning I do a casual `:lua vim.pack.update()`, accept everything without checking (as you do) and then my neovim blows up my recourse is to... check a log file? pin some plugins to some versions?\n\nI don't want to specify versions for plugins. Also, if I look at the update list I don't know which one is a landmine that I should skip. I just want to update everything without fear and be able to roll back if things go sour. I can then continue my work and deal with the breakage later if I have to.\n\nThe only option I see right now is to checkout my previous lockfile from git and nuke `~/.local/share/nvim/site/pack/core/opt` completely. Then after I do a `:restart` I get the old versions of the plugins.",
            "created_at": "2025-10-10T20:08:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/34764#issuecomment-3392175503",
            "id": 3392175503,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34764",
            "node_id": "IC_kwDOAPphoM7KMH2P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3392175503/reactions"
            },
            "updated_at": "2025-10-10T20:08:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3392175503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/63847?v=4",
                "events_url": "https://api.github.com/users/ovidiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/ovidiu/followers",
                "following_url": "https://api.github.com/users/ovidiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/ovidiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ovidiu",
                "id": 63847,
                "login": "ovidiu",
                "node_id": "MDQ6VXNlcjYzODQ3",
                "organizations_url": "https://api.github.com/users/ovidiu/orgs",
                "received_events_url": "https://api.github.com/users/ovidiu/received_events",
                "repos_url": "https://api.github.com/users/ovidiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ovidiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ovidiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ovidiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The only option I see right now is to checkout my previous lockfile from git and nuke `~/.local/share/nvim/site/pack/core/opt` completely.\n\noh I misunderstood what you mean by \"checkout the revisions from the lockfile\". Yes, we should make it easy to rollback to a lockfile. Otherwise lockfiles are almost useless. \n\nThat does not require a \"command\" though, so posting on this issue is confusing.",
            "created_at": "2025-10-10T20:20:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/34764#issuecomment-3392205541",
            "id": 3392205541,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34764",
            "node_id": "IC_kwDOAPphoM7KMPLl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3392205541/reactions"
            },
            "updated_at": "2025-10-10T20:21:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3392205541",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "There is prior art for implementing this functionality as a command. For example `lazy.nvim` has `:Lazy restore`. That's why I thought I'd post it here. Sorry about the confusion.",
            "created_at": "2025-10-10T20:27:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/34764#issuecomment-3392222829",
            "id": 3392222829,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34764",
            "node_id": "IC_kwDOAPphoM7KMTZt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3392222829/reactions"
            },
            "updated_at": "2025-10-10T20:27:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3392222829",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/63847?v=4",
                "events_url": "https://api.github.com/users/ovidiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/ovidiu/followers",
                "following_url": "https://api.github.com/users/ovidiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/ovidiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ovidiu",
                "id": 63847,
                "login": "ovidiu",
                "node_id": "MDQ6VXNlcjYzODQ3",
                "organizations_url": "https://api.github.com/users/ovidiu/orgs",
                "received_events_url": "https://api.github.com/users/ovidiu/received_events",
                "repos_url": "https://api.github.com/users/ovidiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ovidiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ovidiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ovidiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> So if one Monday morning I do a casual `:lua vim.pack.update()`, accept everything without checking (as you do) and then my neovim blows up my recourse is to... check a log file? pin some plugins to some versions?\n\nMy genuine personal advice to this kind of use cases is \"don't update if you don't have time to deal with its problems\". Any plugin update can lead to issues. Sometimes even to a degree that you won't be able to revert using potential `vim.pack` solution, as the config won't load fully. So deliberately leaving time to deal with potential outcome is worth it in the long run.\n\nSo, for example, instead of updating on Monday morning with work scheduled, update Monday or Friday evening with some time left to deal with issues.\n\n> The only option I see right now is to checkout my previous lockfile from git and nuke `~/.local/share/nvim/site/pack/core/opt` completely. Then after I do a `:restart` I get the old versions of the plugins.\n\nTo be honest, this doesn't sound *that* bad of a solution. The only issue here is that it requires internet connection to redownload all plugins.\n\n> Yes, we should make it easy to rollback to a lockfile. Otherwise lockfiles are almost useless.\n\nLockfiles as they are now are far from being \"almost useless\". d7db552394ead8ad9b365c60a650a425d50c5adf contains a list of problems it solves (now and/or in the future).\n\n---\n\nAnyway, I created #36131 to further discuss the \"better revert from update\" solutions.\n\n\n\n",
            "created_at": "2025-10-11T10:46:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/34764#issuecomment-3393196426",
            "id": 3393196426,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34764",
            "node_id": "IC_kwDOAPphoM7KQBGK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393196426/reactions"
            },
            "updated_at": "2025-10-11T10:46:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393196426",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34764/comments",
    "created_at": "2025-07-04T13:10:43Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34764/events",
    "html_url": "https://github.com/neovim/neovim/issues/34764",
    "id": 3202707331,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "bfd4f2",
            "default": false,
            "description": "vim.pack, start/opt packages, 'packpath'",
            "id": 8889050758,
            "name": "packages",
            "node_id": "LA_kwDOAPphoM8AAAACEdQmhg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/packages"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34764/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 297,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 353,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-10-12T17:29:29Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6-5W-D",
    "number": 34764,
    "parent_issue_url": "https://api.github.com/repos/neovim/neovim/issues/34763",
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 2,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 5,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34764/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34764/timeline",
    "title": "User commands for `vim.pack`",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-10-11T10:46:21Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34764",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}