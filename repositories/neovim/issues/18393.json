{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "\nTracking issue to collect the current status of Lua stdlib against Vimscript.\n\nAs all functions listed here are accessible in Lua via `vim.fn.*`, the goal is **not** to achieve 100% parity, however the typval conversion may have perf concerns and/or functional issues for specific functions so a Lua equivalent may be desirable. Also some vimscript functions aren't particularly relevant in the Lua domain.\n\nI've filled the table to the best of my current knowledge. I there are any mistakes/disagreements/omissions then please comment.\n\n| Status Symbol      | Description                                                                 |\n|--------------------|-----------------------------------------------------------------------------|\n| :white_check_mark: | Equivalent exists                                                           |\n| :heavy_minus_sign: | Not required                                                                |\n| :grey_exclamation: | Wanted                                                                      |\n| :hammer:           | Typeval problems, indicating potential performance concerns or functional issues |\n\n\n<details>\n  <summary>Functions</summary>\n\n<details>\n  <summary>Math functions (29/29 :white_check_mark:)</summary>\n\n| Vimscript function | Lua equivalent / Notes            | Equiv exists(:white_check_mark:)/wanted(:grey_exclamation:) /not required(:heavy_minus_sign:)     |\n|--------------------|-----------------------------------|------------------------|\n| `abs`              | `math.abs`                        | :white_check_mark:     |\n| `acos`             | `math.acos`                       | :white_check_mark:     |\n| `and`              | `bit.band`                        | :white_check_mark: *1  |\n| `asin`             | `math.asin`                       | :white_check_mark:     |\n| `atan2`            | `math.atan2`                      | :white_check_mark:     |\n| `atan`             | `math.atan`                       | :white_check_mark:     |\n| `ceil`             | `math.ceil`                       | :white_check_mark:     |\n| `cos`              | `math.cos`                        | :white_check_mark:     |\n| `cosh`             | `math.cosh`                       | :white_check_mark:     |\n| `exp`              | `math.exp`                        | :white_check_mark:     |\n| `float2nr`         | `math.floor(x+0.5)`               | :white_check_mark:     |\n| `floor`            | `math.floor`                      | :white_check_mark:     |\n| `fmod`             | `math.fmod`                       | :white_check_mark:     |\n| `invert`           | `bit.bnot`                        | :white_check_mark: *1  |\n| `log10`            | `math.log10`                      | :white_check_mark:     |\n| `log`              | `math.log`                        | :white_check_mark:     |\n| `max`              | `math.max`                        | :white_check_mark:     |\n| `min`              | `math.min`                        | :white_check_mark:     |\n| `or`               | `bit.bor`                         | :white_check_mark: *1  |\n| `pow`              | `math.pow`                        | :white_check_mark:     |\n| `rand`             | `math.random`, `vim.uv.random`    | :white_check_mark:     |\n| `round`            | `math.floor(x+0.5)`               | :white_check_mark:     |\n| `sin`              | `math.sin`                        | :white_check_mark:     |\n| `sinh`             | `math.sinh`                       | :white_check_mark:     |\n| `sqrt`             | `math.sqrt`                       | :white_check_mark:     |\n| `srand`            | `math.randomseed`                 | :white_check_mark:     |\n| `tan`              | `math.tan`                        | :white_check_mark:     |\n| `tanh`             | `math.tanh`                       | :white_check_mark:     |\n| `xor`              | `bit.bxor`                        | :white_check_mark: *1  |\n\n*1: Not yet available with PUC Lua (#21222)\n\n</details>\n\n| Vimscript function        | Lua equivalent / Notes                             | Equiv exists(:white_check_mark:)/wanted(:grey_exclamation:) /not required(:heavy_minus_sign:)     |\n|---------------------------|----------------------------------------------------|------------------------------|\n| `add`                     | `table.insert`                                     | :white_check_mark:           |\n| `api_info`                | `vim.api.nvim_get_api_info`                        | :white_check_mark:           |\n| `append`                  | `vim.api.nvim_buf_set_lines`                       | :white_check_mark:           |\n| `appendbufline`           | `vim.api.nvim_buf_set_lines`                       | :white_check_mark:           |\n| `bufadd` (to create bufs) | `vim.api.nvim_create_buf`                          | :white_check_mark:           |\n| `bufexists`               | `vim.api.nvim_buf_is_valid`                        | :white_check_mark:           |\n| `bufloaded`               | `vim.api.nvim_buf_is_loaded`                       | :white_check_mark:           |\n| `bufname`                 | `vim.api.nvim_buf_get_name`                        | :white_check_mark:           |\n| `bufnr()`                 | `vim.api.nvim_get_current_buf`                     | :white_check_mark:           |\n| `chansend`                | `vim.api.nvim_chan_send`                           | :white_check_mark:           |\n| `char2nr`                 | `string.byte` *only works with ASCII               | :white_check_mark:           |\n| `chdir`                   | `vim.api.nvim_set_current_dir`                     | :white_check_mark:           |\n| `confirm`                 | `vim.ui.select`                                    | :white_check_mark:           |\n| `copy`                    | `{table.unpack(obj)}`                              | :white_check_mark:           |\n| `ctxget(0)`               | `vim.api.nvim_get_context`                         | :white_check_mark:           |\n| `cursor`                  | `vim.api.nvim_win_set_cursor`                      | :white_check_mark:           |\n| `deepcopy`                | `vim.deepcopy`                                     | :white_check_mark:           |\n| `delete`                  | `vim.fs.rm()`                                      | :white_check_mark:           |\n| `deletebufline`           | `vim.api.nvim_buf_set_lines`                       | :white_check_mark:           |\n| `environ`                 | `vim.uv.os_environ`                                | :white_check_mark:           |\n| `eval`                    | `loadstring`                                       | :white_check_mark:           |\n| `execute`                 | `vim.api.nvim_exec,` `vim.cmd`                     | :white_check_mark:           |\n| `exepath`                 |                                                    | :white_check_mark:           |\n| `extend`                  | `vim.list_extend,` `vim.tbl_extend`                | :white_check_mark:           |\n| `feedkeys`                | `vim.api.nvim_feedkeys`                            | :white_check_mark:           |\n| `filter`                  | `vim.tbl_filter`                                   | :white_check_mark:           |\n| `finddir`                 | `vim.fs.find()`                                    | :white_check_mark:           |\n| `findfile`                | `vim.fs.find`                                      | :white_check_mark:           |\n| `flatten`                 | `vim.tbl_flatten`                                  | :white_check_mark:           |\n| `get`                     | lua `<table>.<key_or_idx> or <default>`            | :white_check_mark:           |\n| `getbufinfo`              | `vim.api.nvim_list_bufs` + `vim.api.nvim_buf_*`    | :white_check_mark:           |\n| `getbufvar`               | `vim.api.nvim_buf_get_var`, `vim.b[idx][name]`     | :white_check_mark:           |\n| `getfperm`                | `vim.uv.fs_stat(...).mode`                         | :white_check_mark:           |\n| `getfsize`                | `vim.uv.fs_stat(...).size`                         | :white_check_mark:           |\n| `getftime`                | `vim.uv.fs_stat(...).mtime`                        | :white_check_mark:           |\n| `getftype`                | `vim.uv.fs_stat(...).type`                         | :white_check_mark:           |\n| `getline`                 | `vim.api.nvim_buf_get_lines`                       | :white_check_mark:           |\n| `getmarklist`             | `vim.api.nvim_get_mark`                            | :white_check_mark:           |\n| `getpid`                  | `vim.uv.os_getpid`                                 | :white_check_mark:           |\n| `gettabvar`               | `vim.api.nvim_tab_get_var`, `vim.t[idx][name]`     | :white_check_mark:           |\n| `gettabwinvar`            | `vim.api.nvim_win_get_var`, `vim.w[idx][name]`     | :white_check_mark:           |\n| `getwinvar`               | `vim.api.nvim_win_get_var`, `vim.w[idx][name]`     | :white_check_mark:           |\n| `has_key`                 | `<table>[key] ~= nil`                              | :white_check_mark:           |\n| `hlID`                    | `vim.api.nvim_get_hl_id_by_name`                   | :white_check_mark:           |\n| `hlexists`                | `vim.api.nvim_get_hl_*`                            | :white_check_mark:           |\n| `hostname`                | `vim.uv.os_gethostname()`                          | :white_check_mark:           |\n| `iconv`                   | `vim.iconv`                                        | :white_check_mark:           |\n| `input`                   | `vim.ui.input`                                     | :white_check_mark:           |\n| `inputlist`               | `vim.ui.select`                                    | :white_check_mark:           |\n| `insert`                  | `table.insert()`                                   | :white_check_mark:           |\n| `isdirectory`             | `vim.uv.fs_stat(...).type == 'directory'`          | :white_check_mark:           |\n| `items`                   | `pairs`                                            | :white_check_mark:           |\n| `jobpid`                  | `vim.uv.process_get_pid`                           | :white_check_mark:           |\n| `jobstart`                | `vim.system`                                       | :white_check_mark:           |\n| `jobstop`                 | `vim.uv.shutdown` and `vim.uv.close`               | :white_check_mark:           |\n| `join`                    | `table.concat`                                     | :white_check_mark:           |\n| `json_decode`             | `vim.json.decode`                                  | :white_check_mark:           |\n| `json_encode`             | `vim.json.encode`                                  | :white_check_mark:           |\n| `keys`                    | `vim.tbl_keys`                                     | :white_check_mark:           |\n| `len`                     | Lua `#` operator, `#vim.tbl_keys()`                | :white_check_mark:           |\n| `libcall`, `libcallnr`    | package.loadlib, ffi.load                          | :white_check_mark:           |\n| `list2str`                | `vim.inspect,` table.concat                        | :white_check_mark:           |\n| `localtime`               | `vim.uv.gettimeofday`                              | :white_check_mark:           |\n| `luaeval`                 | loadstring                                         | :white_check_mark:           |\n| `map`                     | `vim.tbl_map`                                      | :white_check_mark:           |\n| `match`                   | `vim.regex` with `regex:match_str`                 | :white_check_mark:           |\n| `matchaddpos`             | Extmarks                                           | :white_check_mark:           |\n| `mode`                    | `vim.api.nvim_get_mode`                            | :white_check_mark:           |\n| `msgpackdump`             | `vim.mpack.encode`                                 | :white_check_mark:           |\n| `msgpackparse`            | `vim.mpack.decode`                                 | :white_check_mark:           |\n| `nr2char`                 | `string.char` *only works with ASCII               | :white_check_mark:           |\n| `printf`                  | `print(string.format(...))`                        | :white_check_mark:           |\n| `reduce`                  | `vim.iter.fold()`                                  | :white_check_mark:           |\n| `range`                   | Various ways depending on context                  | :white_check_mark:           |\n| `readdir`                 | `vim.fs.dir`                                       | :white_check_mark:           |\n| `reltime[,float,str]`     | `vim.uv.hrtime,` `vim.uv.gettimeofday`             | :white_check_mark:           |\n| `remove`                  | `os.remove`                                        | :white_check_mark:           |\n| `rename`                  | `vim.uv.fs_rename`, `os.rename`                    | :white_check_mark:           |\n| `repeat`                  | `string.rep`                                       | :white_check_mark:           |\n| `resolve`                 | `vim.uv.fs_readlink`                               | :white_check_mark:           |\n| `rpcnotify`               | `vim.rpcnotify`                                    | :white_check_mark:           |\n| `rpcrequest`              | `vim.rpcrequest`                                   | :white_check_mark:           |\n| `setbufline`              | `vim.api.nvim_buf_set_lines`                       | :white_check_mark:           |\n| `setbufvar`               | `vim.api.nvim_buf_set_var,` `vim.b[idx][name]`     | :white_check_mark:           |\n| `setenv`                  | `vim.uv.os_setenv`                                 | :white_check_mark:           |\n| `setfperm`                | `vim.uv.fs_chmod`                                  | :white_check_mark:           |\n| `setline`                 | `vim.api.nvim_buf_set_lines`                       | :white_check_mark:           |\n| `settabvar`               | `vim.api.nvim_tabpage_set_var,` `vim.t[idx][name]` | :white_check_mark:           |\n| `setwinvar`               | `vim.api.nvim_win_set_var,` `vim.w[idx][name]`     | :white_check_mark:           |\n| `sort`                    | `table.sort`                                       | :white_check_mark:           |\n| `spellbadword`            | `vim.spell.check`                                  | :white_check_mark:           |\n| `split`                   | `vim.split`                                        | :white_check_mark:           |\n| `str2float`               | `tonumber`                                         | :white_check_mark:           |\n| `str2list`                | `vim.inspect`, `table.concat`                      | :white_check_mark:           |\n| `str2nr`                  | `tonumber`                                         | :white_check_mark:           |\n| `strcharpart`             | `string.sub`                                       | :white_check_mark:           |\n| `strchars`                | `string.len`                                       | :white_check_mark:           |\n| `strftime`                | `date.format`                                      | :white_check_mark:           |\n| `strgetchar`              | `string.sub`                                       | :white_check_mark:           |\n| `string`                  | `tostring`                                         | :white_check_mark:           |\n| `strlen`                  | string.len or Lua # operator                       | :white_check_mark:           |\n| `strridx`                 | `string.find`                                      | :white_check_mark:           |\n| `strwidth`                | `vim.api.nvim_strwidth`                            | :white_check_mark:           |\n| `substitute`              | `vim.gsub` (Lua patterns instead of regex)         | :white_check_mark:           |\n| `system`                  | `vim.system`                                       | :white_check_mark:           |\n| `systemlist`              | `vim.system`                                       | :white_check_mark:           |\n| `tabpagenr`               | `vim.api.nvim_get_current_tabpage`                 | :white_check_mark:           |\n| `tempname`                | `vim.uv.fs_mktemp`, `os.tmpname`                   | :white_check_mark:           |\n| `timer_info`              | `vim.uv.timer_{get_repeat,get_due_in}`             | :white_check_mark:           |\n| `timer_start`             | `vim.uv.timer_start`                               | :white_check_mark:           |\n| `timer_stop`              | `vim.uv.timer_stop`                                | :white_check_mark:           |\n| `tolower`                 | `string.lower`                                     | :white_check_mark:           |\n| `toupper`                 | `string.upper`                                     | :white_check_mark:           |\n| `trim`                    | `vim.trim`                                         | :white_check_mark:           |\n| `values`                  | `vim.tbl_values`                                   | :white_check_mark:           |\n| `wait`                    | `vim.wait`                                         | :white_check_mark:           |\n| `win_execute`             | `vim.api.nvim_win_call`                            | :white_check_mark:           |\n| `win_getid()`             | `vim.api.nvim_get_current_win`                     | :white_check_mark:           |\n| `win_gotoid`              | `vim.api.nvim_set_current_win`                     | :white_check_mark:           |\n| `win_screenpos`           | `vim.api.nvim_win_get_position`                    | :white_check_mark:           |\n| `winbufnr`                | `vim.api.nvim_win_get_buf`                         | :white_check_mark:           |\n| `winheight`               | `vim.api.nvim_win_get_height`                      | :white_check_mark:           |\n| `winnr()`                 | `vim.api.nvim_win_get_number`                      | :white_check_mark:           |\n| `winwidth`                | `vim.api.nvim_win_get_width`                       | :white_check_mark:           |\n| `assert_beeps`            |                                                    | :heavy_minus_sign:           |\n| `assert_equal`            |                                                    | :heavy_minus_sign:           |\n| `assert_equalfile`        |                                                    | :heavy_minus_sign:           |\n| `assert_exception`        |                                                    | :heavy_minus_sign:           |\n| `assert_fails`            |                                                    | :heavy_minus_sign:           |\n| `assert_false`            | `assert(not value)`                                | :heavy_minus_sign:           |\n| `assert_inrange`          |                                                    | :heavy_minus_sign:           |\n| `assert_match`            |                                                    | :heavy_minus_sign:           |\n| `assert_nobeep`           |                                                    | :heavy_minus_sign:           |\n| `assert_notequal`         |                                                    | :heavy_minus_sign:           |\n| `assert_notmatch`         |                                                    | :heavy_minus_sign:           |\n| `assert_report`           |                                                    | :heavy_minus_sign:           |\n| `assert_true`             | `assert`                                           | :heavy_minus_sign:           |\n| `browse`                  |  Does nothing in Neovim                            | :heavy_minus_sign:           |\n| `browsedir`               |  Does nothing in Neovim                            | :heavy_minus_sign:           |\n| `bufwinid`                | Easy to implement (see below)                      | :heavy_minus_sign:           |\n| `call`                    | NA (typval)                                        | :heavy_minus_sign:           |\n| `cindent`                 |                                                    | :heavy_minus_sign:           |\n| `dictwatcheradd`          | `__index` metamethod + autocmd                     | :heavy_minus_sign:           |\n| `dictwatcherdel`          | `__index` metamethod + autocmd                     | :heavy_minus_sign:           |\n| `diff_hlID`               |  Obscure                                           | :heavy_minus_sign:           |\n| `empty`                   |                                                    | :heavy_minus_sign:           |\n| `eventhandler`            |                                                    | :heavy_minus_sign:?          |\n| `foreground`              | Not in `vim.fn.*`                                  | :heavy_minus_sign:           |\n| `funcref`                 | NA (typval)                                        | :heavy_minus_sign:           |\n| `function`                | NA (typval)                                        | :heavy_minus_sign:           |\n| `garbagecollect`          |                                                    | :heavy_minus_sign:           |\n| `interrupt`               | No args or return so no typval conversion          | :heavy_minus_sign:           |\n| `isinf`                   | Easy to implement, see below                       | :heavy_minus_sign:           |\n| `islocked`                |                                                    | :heavy_minus_sign:           |\n| `isnan`                   | Easy to implement, see below                       | :heavy_minus_sign:           |\n| `reverse`                 | `vim.iter.rev()`                                   | :heavy_minus_sign:           |\n| `serverlist`              | Covered by vim.uv.*?                               | :heavy_minus_sign:           |\n| `serverstart`             | Covered by vim.uv.*?                               | :heavy_minus_sign:           |\n| `serverstop`              | Covered by vim.uv.*?                               | :heavy_minus_sign:           |\n| `sign_define`             | extmarks                                           | :heavy_minus_sign:           |\n| `sign_getdefined`         | extmarks                                           | :heavy_minus_sign:           |\n| `sign_getplaced`          | extmarks                                           | :heavy_minus_sign:           |\n| `sign_jump`               | extmarks                                           | :heavy_minus_sign:           |\n| `sign_place`              | extmarks                                           | :heavy_minus_sign:           |\n| `sign_placelist`          | extmarks                                           | :heavy_minus_sign:           |\n| `sign_undefine`           | extmarks                                           | :heavy_minus_sign:           |\n| `sign_unplace`            | extmarks                                           | :heavy_minus_sign:           |\n| `sign_unplacelist`        | extmarks                                           | :heavy_minus_sign:           |\n| `sockconnect`             | Should be covered in `vim.uv.*`                    | :heavy_minus_sign:           |\n| `test_garbagecollect_now` |                                                    | :heavy_minus_sign:           |\n| `test_write_list_log`     |                                                    | :heavy_minus_sign:           |\n| `timer_stopall`           | No args or return so no typval conversion          | :heavy_minus_sign:           |\n| `type`                    | NA (typval)                                        | :heavy_minus_sign:           |\n| `wordcount`               | Typval conv is negligible                          | :heavy_minus_sign:           |\n| `getbufline`              | `vim.api.nvim_buf_get_lines()`                     | :heavy_minus_sign:           |\n| `executable`              | returns vimbool                                    | :grey_exclamation: :hammer:  |\n| `exists`                  | returns vimbool                                    | :grey_exclamation: :hammer:  |\n| `filereadable`            | returns vimbool                                    | :grey_exclamation: :hammer:  |\n| `filewritable`            | returns vimbool                                    | :grey_exclamation: :hammer:  |\n| `getcmdwintype`           | #10735                                             | :grey_exclamation:           |\n| `has`                     | returns vimbool                                    | :grey_exclamation: :hammer:  |\n| `hasmapto`                | returns vimbool                                    | :grey_exclamation: :hammer:  |\n| `mkdir`                   |                                                    | :grey_exclamation: :hammer:  |\n| `pumvisible`              | returns vimbool                                    | :grey_exclamation: :hammer:  |\n| `readfile`                |                                                    | :grey_exclamation:           |\n| `sha256`                  | Typval conversion is costly                        | :grey_exclamation:           |\n| `uniq`                    |                                                    | :grey_exclamation:           |\n| `buflisted`               | returns vimbool                                    | :grey_exclamation:           |\n| `complete_check`          | returns vimbool                                    | :grey_exclamation: :hammer:  |\n| `did_filetype`            | returns vimbool                                    | :grey_exclamation: :hammer:  |\n| `argc`                    |                                                    |                              |\n| `argidx`                  |                                                    |                              |\n| `arglistid`               |                                                    |                              |\n| `argv`                    |                                                    |                              |\n| `bufload`                 |                                                    |                              |\n| `bufnr`                   |                                                    |                              |\n| `bufwinnr`                |                                                    |                              |\n| `byte2line`               |                                                    |                              |\n| `byteidx`                 |                                                    |                              |\n| `byteidxcomp`             |                                                    |                              |\n| `chanclose`               |                                                    |                              |\n| `changenr`                |                                                    |                              |\n| `charcol`                 |                                                    |                              |\n| `charidx`                 |                                                    |                              |\n| `clearmatches`            |                                                    |                              |\n| `col`                     |                                                    |                              |\n| `complete_add`            |                                                    |                              |\n| `complete_info`           |                                                    |                              |\n| `complete`                |                                                    |                              |\n| `count`                   |                                                    |                              |\n| `ctxget`                  |                                                    |                              |\n| `ctxpop`                  |                                                    |                              |\n| `ctxpush`                 |                                                    |                              |\n| `ctxset`                  |                                                    |                              |\n| `ctxsize`                 |                                                    |                              |\n| `debugbreak`              |                                                    |                              |\n| `diff_filler`             |                                                    |                              |\n| `digraph_get{,list}`      |                                                    |                              |\n| `digraph_set{,list}`      |                                                    |                              |\n| `escape`                  |                                                    |                              |\n| `expand`                  |                                                    |                              |\n| `expandcmd`               |                                                    |                              |\n| `fnameescape`             |                                                    |                              |\n| `fnamemodify`             |                                                    |                              |\n| `foldclosed`              |                                                    |                              |\n| `foldclosedend`           |                                                    |                              |\n| `foldlevel`               |                                                    |                              |\n| `foldtext`                |                                                    |                              |\n| `foldtextresult`          |                                                    |                              |\n| `fullcommand`             |                                                    |                              |\n| `getchangelist`           |                                                    |                              |\n| `getchar`                 |                                                    |                              |\n| `getcharmod`              |                                                    |                              |\n| `getcharpos`              |                                                    |                              |\n| `getcharsearch`           |                                                    |                              |\n| `getcharstr`              |                                                    |                              |\n| `getcmdline`              |                                                    |                              |\n| `getcmdpos`               |                                                    |                              |\n| `getcmdtype`              |                                                    |                              |\n| `getcompletion`           |                                                    |                              |\n| `getcurpos`               | Includes curswant unlike `nvim_win_get_cursor()`   |                              |\n| `getcursorcharpos`        |                                                    |                              |\n| `getcwd`                  | `vim.uv.cwd` *does not work for window/tab local   |                              |\n| `getenv`                  |                                                    |                              |\n| `getfontname`             |                                                    |                              |\n| `getjumplist`             |                                                    |                              |\n| `getloclist`              |                                                    |                              |\n| `getmatches`              |                                                    |                              |\n| `getmousepos`             |                                                    |                              |\n| `getpos('.')`             | `vim.api.nvim_win_get_cursor`                      |                              |\n| `getpos`                  |                                                    |                              |\n| `getqflist`               |                                                    |                              |\n| `getreg`                  |                                                    |                              |\n| `getreginfo`              |                                                    |                              |\n| `getregtype`              |                                                    |                              |\n| `gettabinfo`              |                                                    |                              |\n| `gettagstack`             |                                                    |                              |\n| `getwininfo`              |                                                    |                              |\n| `getwinpos`               |                                                    |                              |\n| `getwinposx`              |                                                    |                              |\n| `getwinposy`              |                                                    |                              |\n| `glob2regpat`             |                                                    |                              |\n| `glob`                    |                                                    |                              |\n| `globpath`                |                                                    |                              |\n| `haslocaldir`             |                                                    |                              |\n| `histadd`                 |                                                    |                              |\n| `histdel`                 |                                                    |                              |\n| `histget`                 |                                                    |                              |\n| `histnr`                  |                                                    |                              |\n| `id`                      | NA (typval)                                        |                              |\n| `indent`                  |                                                    |                              |\n| `index`                   |                                                    |                              |\n| `inputrestore`            |                                                    |                              |\n| `inputsave`               |                                                    |                              |\n| `inputsecret`             |                                                    |                              |\n| `jobresize`               |                                                    |                              |\n| `jobwait`                 |                                                    |                              |\n| `line2byte`               |                                                    |                              |\n| `line`                    |                                                    |                              |\n| `lispindent`              |                                                    |                              |\n| `maparg`                  |                                                    |                              |\n| `mapcheck`                |                                                    |                              |\n| `matchadd`                |                                                    |                              |\n| `matcharg`                |                                                    |                              |\n| `matchdelete`             |                                                    |                              |\n| `matchend`                |                                                    |                              |\n| `matchfuzzy`              |                                                    |                              |\n| `matchfuzzypos`           |                                                    |                              |\n| `matchlist`               |                                                    |                              |\n| `matchstr`                |                                                    |                              |\n| `matchstrpos`             |                                                    |                              |\n| `menu_get`                |                                                    |                              |\n| `nextnonblank`            |                                                    |                              |\n| `pathshorten`             |                                                    |                              |\n| `perleval`                |                                                    |                              |\n| `prevnonblank`            |                                                    |                              |\n| `prompt_getprompt`        |                                                    |                              |\n| `prompt_setcallback`      |                                                    |                              |\n| `prompt_setinterrupt`     |                                                    |                              |\n| `prompt_setprompt`        |                                                    |                              |\n| `pum_getpos`              |                                                    |                              |\n| `py3eval`                 |                                                    |                              |\n| `pyeval`                  |                                                    |                              |\n| `pyxeval`                 |                                                    |                              |\n| `reg_executing`           |                                                    |                              |\n| `reg_recorded`            |                                                    |                              |\n| `reg_recording`           |                                                    |                              |\n| `rpcstart`                |                                                    |                              |\n| `rubyeval`                |                                                    |                              |\n| `screenattr`              |                                                    |                              |\n| `screenchar`              |                                                    |                              |\n| `screenchars`             |                                                    |                              |\n| `screencol`               |                                                    |                              |\n| `screenpos`               |                                                    |                              |\n| `screenrow`               |                                                    |                              |\n| `screenstring`            |                                                    |                              |\n| `search`                  |                                                    |                              |\n| `searchcount`             |                                                    |                              |\n| `searchdecl`              |                                                    |                              |\n| `searchpair`              |                                                    |                              |\n| `searchpairpos`           |                                                    |                              |\n| `searchpos`               |                                                    |                              |\n| `setcharpos`              |                                                    |                              |\n| `setcharsearch`           |                                                    |                              |\n| `setcmdpos`               |                                                    |                              |\n| `setcursorcharpos`        |                                                    |                              |\n| `setloclist`              |                                                    |                              |\n| `setmatches`              |                                                    |                              |\n| `setpos`                  |                                                    |                              |\n| `setqflist`               |                                                    |                              |\n| `setreg`                  |                                                    |                              |\n| `settabwinvar`            |                                                    |                              |\n| `settagstack`             |                                                    |                              |\n| `shellescape`             |                                                    |                              |\n| `shiftwidth`              |                                                    |                              |\n| `simplify`                |                                                    |                              |\n| `soundfold`               |                                                    |                              |\n| `spellsuggest`            |                                                    |                              |\n| `stdioopen`               |                                                    |                              |\n| `stdpath`                 |                                                    |                              |\n| `strdisplaywidth`         |                                                    |                              |\n| `stridx`                  |                                                    |                              |\n| `strpart`                 |                                                    |                              |\n| `strptime`                |                                                    |                              |\n| `strtrans`                |                                                    |                              |\n| `submatch`                |                                                    |                              |\n| `swapinfo`                |                                                    |                              |\n| `swapname`                |                                                    |                              |\n| `synID`                   |                                                    |                              |\n| `synIDattr`               |                                                    |                              |\n| `synIDtrans`              |                                                    |                              |\n| `synconcealed`            |                                                    |                              |\n| `synstack`                |                                                    |                              |\n| `tabpagebuflist`          |                                                    |                              |\n| `tabpagewinnr`            |                                                    |                              |\n| `tagfiles`                |                                                    |                              |\n| `taglist`                 |                                                    |                              |\n| `termopen`                |                                                    |                              |\n| `timer_pause`             |                                                    |                              |\n| `tr`                      |                                                    |                              |\n| `trunc`                   |                                                    |                              |\n| `undofile`                |                                                    |                              |\n| `undotree`                |                                                    |                              |\n| `virtcol`                 |                                                    |                              |\n| `visualmode`              |                                                    |                              |\n| `wildmenumode`            |                                                    |                              |\n| `win_findbuf`             |                                                    |                              |\n| `win_getid`               |                                                    |                              |\n| `win_gettype`             |                                                    |                              |\n| `win_id2tabwin`           |                                                    |                              |\n| `win_id2win`              |                                                    |                              |\n| `win_move_separator`      | `vim.api.nvim_win_set_width`                       |                              |\n| `win_move_statusline`     |                                                    |                              |\n| `win_splitmove`           |                                                    |                              |\n| `wincol`                  |                                                    |                              |\n| `windowsversion`          |                                                    |                              |\n| `winlayout`               |                                                    |                              |\n| `winline`                 |                                                    |                              |\n| `winnr('$') ('#')` ...    |                                                    |                              |\n| `winrestcmd`              |                                                    |                              |\n| `winrestview`             |                                                    |                              |\n| `winsaveview`             |                                                    |                              |\n\n\n</details>\n\n\n<details>\n<summary>Commands</summary>\n\n| Vimscript command           | Lua equivalent / Notes             | Equiv exists(:white_check_mark:)/wanted(:grey_exclamation:) /not required(:heavy_minus_sign:) |\n|-----------------------------|------------------------------------|--------------------|\n| `abbrev` (and variants)     |                                    | :grey_exclamation: |\n| `augroup`                   | `vim.api.nvim_create_augroup`      | :white_check_mark: |\n| `autocmd`                   | `vim.api.nvim_create_autocmd`      | :white_check_mark: |\n| `colorscheme`                   |      |  |\n| `highlight`                 | `vim.api.nvim_set_hl`              | :white_check_mark: |\n| `set` (and variants)        | `vim.api.nvim_set_option_value`    | :white_check_mark: |\n| `sign`                      | Extmarks API                       | :heavy_minus_sign: |\n| `map`                       | `vim.keymap`                       | :white_check_mark: |\n| `command`                   | `vim.api.nvim_create_user_command` | :white_check_mark: |\n\n</details>\n\n<details>\n<summary>Lua equivalent snippets</summary>\n\n### `bufwinid()`\n\n**_NOTE:_** This works for all tabpages, unlike `vim.fn.bufwinid()` which only works for the current tabpage.\n\n<details>\n<summary>Expand</summary>\n\n```lua\nlocal function bufwinid(buf)\n  for _, w in ipairs(vim.api.nvim_list_wins()) do\n    if vim.api.nvim_win_get_buf(w) == buf then\n      return w\n    end\n  end\n  return -1\nend\n```\n</details>\n\n### `isinf()`\n<details>\n<summary>Expand</summary>\n\n```lua\nlocal function isinf(value)\n  return value == math.huge and 1 or value == -math.huge and -1 or 0\nend\n```\n</details>\n\n### `isnan()`\n<details>\n<summary>Expand</summary>\n\n```lua\nlocal function isnan(value)\n  return value ~= value\nend\n```\n</details>\n\n</details>\n\n\n### Other Notes:\n- Does typconv conversion carry a heavy cost compared to the rest of the function execution?\n  It may if the function can input large objects for it arguments or return values, or if the function is expected to be run in hot loops.\n\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "qq on `bit.*`: is that available when running neovim with puc lua?",
            "created_at": "2022-05-03T15:16:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1116220612",
            "id": 1116220612,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5CiCzE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116220612/reactions"
            },
            "updated_at": "2023-01-31T10:16:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116220612",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/108725?v=4",
                "events_url": "https://api.github.com/users/fsouza/events{/privacy}",
                "followers_url": "https://api.github.com/users/fsouza/followers",
                "following_url": "https://api.github.com/users/fsouza/following{/other_user}",
                "gists_url": "https://api.github.com/users/fsouza/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fsouza",
                "id": 108725,
                "login": "fsouza",
                "node_id": "MDQ6VXNlcjEwODcyNQ==",
                "organizations_url": "https://api.github.com/users/fsouza/orgs",
                "received_events_url": "https://api.github.com/users/fsouza/received_events",
                "repos_url": "https://api.github.com/users/fsouza/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fsouza/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fsouza/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fsouza",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> qq on `bit.*`: is that available when running neovim with puc lua?\r\n\r\nhttps://github.com/neovim/neovim/issues/11352",
            "created_at": "2022-05-03T15:19:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1116222988",
            "id": 1116222988,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5CiDYM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116222988/reactions"
            },
            "updated_at": "2023-01-31T10:16:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116222988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Strictly speaking, `nvim_win_get_cursor()` cannot get `curswant`.",
            "created_at": "2022-05-03T15:36:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1116240954",
            "id": 1116240954,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5CiHw6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116240954/reactions"
            },
            "updated_at": "2023-01-31T10:15:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116240954",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Strictly speaking, `nvim_win_get_cursor()` cannot get `curswant`.\r\n\r\nFixed. Added `pos('.')` which maps to `nvim_win_get_cursor`",
            "created_at": "2022-05-03T15:44:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1116249233",
            "id": 1116249233,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5CiJyR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116249233/reactions"
            },
            "updated_at": "2023-01-31T10:15:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116249233",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`vim.loop.exepath` is not equivalent to Vim script's `exepath`. The former returns the full path to the current executable (i.e. nvim) while the latter takes an argument and returns the path to that, if it exists.\r\n\r\nAlso `vim.input` should be `vim.ui.input`.",
            "created_at": "2022-05-03T15:54:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1116260375",
            "id": 1116260375,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5CiMgX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116260375/reactions"
            },
            "updated_at": "2023-01-31T10:16:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116260375",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `vim.loop.exepath` is not equivalent to Vim script's `exepath`. The former returns the full path to the current executable (i.e. nvim) while the latter takes an argument and returns the path to that, if it exists.\r\n> \r\n> Also `vim.input` should be `vim.ui.input`.\r\n\r\nDone. Feel free to edit directly (I think you have permissions).",
            "created_at": "2022-05-03T15:57:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1116263202",
            "id": 1116263202,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5CiNMi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116263202/reactions"
            },
            "updated_at": "2022-05-03T15:57:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116263202",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Is the table in the OP missing `cnoreabbrev` that is available in vimscript? \r\n\r\nI have the following in my `init.lua` wrapped inside a `vim.cmd[[]]`.\r\n\r\n```vim\r\n\" Replace :w with :up\r\ncnoreabbrev <expr> w getcmdtype() == \":\" && getcmdline() == 'w' ? 'up' : 'w'\r\n\r\ncnoreabbrev <expr> h getcmdtype() == \":\" && getcmdline() == 'h' ? 'tab help' : 'h'\r\ncnoreabbrev <expr> help getcmdtype() == \":\" && getcmdline() == 'help' ? 'tab help' : 'help'\r\ncnoreabbrev <expr> helpgrep getcmdtype() == \":\" && getcmdline() == 'helpgrep' ? 'tab helpgrep' : 'helpgrep'\r\ncnoreabbrev <expr> Man getcmdtype() == \":\" && getcmdline() == 'Man' ? 'tab Man' : 'Man'\r\n```",
            "created_at": "2022-05-18T10:24:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1129837651",
            "id": 1129837651,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5DV_RT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1129837651/reactions"
            },
            "updated_at": "2023-01-31T10:14:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1129837651",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15239509?v=4",
                "events_url": "https://api.github.com/users/krishnakumarg1984/events{/privacy}",
                "followers_url": "https://api.github.com/users/krishnakumarg1984/followers",
                "following_url": "https://api.github.com/users/krishnakumarg1984/following{/other_user}",
                "gists_url": "https://api.github.com/users/krishnakumarg1984/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/krishnakumarg1984",
                "id": 15239509,
                "login": "krishnakumarg1984",
                "node_id": "MDQ6VXNlcjE1MjM5NTA5",
                "organizations_url": "https://api.github.com/users/krishnakumarg1984/orgs",
                "received_events_url": "https://api.github.com/users/krishnakumarg1984/received_events",
                "repos_url": "https://api.github.com/users/krishnakumarg1984/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/krishnakumarg1984/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/krishnakumarg1984/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/krishnakumarg1984",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`cnoreabbrev` is a command, not a function and isn't included in `vim.fn.*`.\r\n\r\nHowever, your point is valid that there is no Lua analogue for these kinds of Vimscript commands.",
            "created_at": "2022-05-18T10:34:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1129846173",
            "id": 1129846173,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5DWBWd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1129846173/reactions"
            },
            "updated_at": "2023-01-31T10:14:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1129846173",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`string.byte()` and `string.char()` only work with ASCII. `nvim_open_term` is completely different from `termopen()`.",
            "created_at": "2022-12-26T09:00:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1365012670",
            "id": 1365012670,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5RXHC-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1365012670/reactions"
            },
            "updated_at": "2023-01-31T10:14:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1365012670",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I don't think `stdpath` and `nvim_get_runtime_file` are really equivalents.\r\n`stdpath` is used to get the root of one of the standard paths (`cache`, `config`, etc.) while `nvim_get_runtime_file` is used to search for files under any of the runtime paths.\r\nFor example, it is impossible to get the path to `cache` with `nvim_get_runtime_file`.",
            "created_at": "2022-12-30T11:08:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1367861661",
            "id": 1367861661,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5Rh-md",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1367861661/reactions"
            },
            "updated_at": "2023-01-31T10:14:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1367861661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/72612857?v=4",
                "events_url": "https://api.github.com/users/musjj/events{/privacy}",
                "followers_url": "https://api.github.com/users/musjj/followers",
                "following_url": "https://api.github.com/users/musjj/following{/other_user}",
                "gists_url": "https://api.github.com/users/musjj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/musjj",
                "id": 72612857,
                "login": "musjj",
                "node_id": "MDQ6VXNlcjcyNjEyODU3",
                "organizations_url": "https://api.github.com/users/musjj/orgs",
                "received_events_url": "https://api.github.com/users/musjj/received_events",
                "repos_url": "https://api.github.com/users/musjj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/musjj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/musjj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/musjj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "`vim.loop.cwd()` cannot be used as a direct replacement for `vim.fn.getcwd()`, as it does not support arguments as `vim.fn.getcwd()` does, specifically being able to retrieve the cwd local to a window or tab.",
            "created_at": "2023-01-16T21:33:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1384577782",
            "id": 1384577782,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5Shvr2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1384577782/reactions"
            },
            "updated_at": "2023-01-31T10:14:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1384577782",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/107015?v=4",
                "events_url": "https://api.github.com/users/andrewferrier/events{/privacy}",
                "followers_url": "https://api.github.com/users/andrewferrier/followers",
                "following_url": "https://api.github.com/users/andrewferrier/following{/other_user}",
                "gists_url": "https://api.github.com/users/andrewferrier/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/andrewferrier",
                "id": 107015,
                "login": "andrewferrier",
                "node_id": "MDQ6VXNlcjEwNzAxNQ==",
                "organizations_url": "https://api.github.com/users/andrewferrier/orgs",
                "received_events_url": "https://api.github.com/users/andrewferrier/received_events",
                "repos_url": "https://api.github.com/users/andrewferrier/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/andrewferrier/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/andrewferrier/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/andrewferrier",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`bufadd` is not completely equivalent to `vim.api.nvim_create_buf` , `bufadd()` to  can be use to create a named buffers or get the bufnr of a named buffer (`let g:foo_nr = bufadd('./foo.lua')`) while `nvim_create_buf` can only create unnamed/scratch buffers, whats even  worse is that `:badd` and `bufadd()` don't even have the same behavior, `:badd` will list the unloaded buffer while `bufadd()` wont",
            "created_at": "2023-01-18T15:16:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1387237700",
            "id": 1387237700,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5Sr5FE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1387237700/reactions"
            },
            "updated_at": "2023-01-31T10:14:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1387237700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4576770?v=4",
                "events_url": "https://api.github.com/users/mike325/events{/privacy}",
                "followers_url": "https://api.github.com/users/mike325/followers",
                "following_url": "https://api.github.com/users/mike325/following{/other_user}",
                "gists_url": "https://api.github.com/users/mike325/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mike325",
                "id": 4576770,
                "login": "mike325",
                "node_id": "MDQ6VXNlcjQ1NzY3NzA=",
                "organizations_url": "https://api.github.com/users/mike325/orgs",
                "received_events_url": "https://api.github.com/users/mike325/received_events",
                "repos_url": "https://api.github.com/users/mike325/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mike325/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mike325/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mike325",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Please avoid comments about \"incomplete equivalence of A to B\". 100% fidelity is not the point of this tracking issue, we are trying to figure out API surface area.  The details of one-to-one equivalence will be a task to address per-function, after we have a general idea of the major gaps.",
            "created_at": "2023-01-23T11:08:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1400168503",
            "id": 1400168503,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5TdOA3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1400168503/reactions"
            },
            "updated_at": "2024-01-29T02:59:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1400168503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Do we have a Lua API to turn off `syntax` for a specific buffer?\r\n\r\n`vim.bo[bufnr].syntax = ''`\r\n\r\n\r\nPlease do not clutter the issue tracker with user questions. There are other forums for this.",
            "created_at": "2023-01-31T10:06:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1410081793",
            "id": 1410081793,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5UDCQB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1410081793/reactions"
            },
            "updated_at": "2023-01-31T10:06:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1410081793",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Please avoid comments about \"incomplete equivalence of A to B\". 100% fidelity is not the point of this tracking issue, we are trying to figure out API surface area. The details of one-to-one equivalence will be a task to address per-function, after we have a general idea of the major gaps.\r\n\r\nFWIW, I don't mind people reporting differences between the reported mappings above. Even though 100% fidelity isn't a goal, these differences are useful to know about (or some of them are). Not to mention some of the equivalents I listed were completely wrong.\r\n\r\nI've updated the OP and hidden all the comments.",
            "created_at": "2023-01-31T10:19:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1410100304",
            "id": 1410100304,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5UDGxQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1410100304/reactions"
            },
            "updated_at": "2023-01-31T10:19:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1410100304",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@lewis6991 Do we have the Lua equivalent of `:checktime {filename}`?",
            "created_at": "2023-04-08T20:10:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1500968981",
            "id": 1500968981,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5ZdvgV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1500968981/reactions"
            },
            "updated_at": "2023-04-09T21:18:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1500968981",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24765272?v=4",
                "events_url": "https://api.github.com/users/nyngwang/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyngwang/followers",
                "following_url": "https://api.github.com/users/nyngwang/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyngwang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyngwang",
                "id": 24765272,
                "login": "nyngwang",
                "node_id": "MDQ6VXNlcjI0NzY1Mjcy",
                "organizations_url": "https://api.github.com/users/nyngwang/orgs",
                "received_events_url": "https://api.github.com/users/nyngwang/received_events",
                "repos_url": "https://api.github.com/users/nyngwang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyngwang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyngwang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyngwang",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Do we have `tabdo` in Lua?",
            "created_at": "2023-05-04T18:37:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1535232502",
            "id": 1535232502,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5bgcn2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1535232502/reactions"
            },
            "updated_at": "2023-05-04T18:37:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1535232502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24765272?v=4",
                "events_url": "https://api.github.com/users/nyngwang/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyngwang/followers",
                "following_url": "https://api.github.com/users/nyngwang/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyngwang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyngwang",
                "id": 24765272,
                "login": "nyngwang",
                "node_id": "MDQ6VXNlcjI0NzY1Mjcy",
                "organizations_url": "https://api.github.com/users/nyngwang/orgs",
                "received_events_url": "https://api.github.com/users/nyngwang/received_events",
                "repos_url": "https://api.github.com/users/nyngwang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyngwang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyngwang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyngwang",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Do we have `tabdo` in Lua?\r\n\r\nThere's `nvim_buf_call()` and `nvim_win_call()` but no `nvim_tabpage_call()`, you can still use a for loop with `nvim_list_tabpages()` to iterate over tabs and then use `nvim_tabpage_list_wins()` to perform any action on the local windows",
            "created_at": "2023-05-05T07:45:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1535859960",
            "id": 1535859960,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5bi1z4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1535859960/reactions"
            },
            "updated_at": "2023-05-05T07:45:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1535859960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4576770?v=4",
                "events_url": "https://api.github.com/users/mike325/events{/privacy}",
                "followers_url": "https://api.github.com/users/mike325/followers",
                "following_url": "https://api.github.com/users/mike325/following{/other_user}",
                "gists_url": "https://api.github.com/users/mike325/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mike325",
                "id": 4576770,
                "login": "mike325",
                "node_id": "MDQ6VXNlcjQ1NzY3NzA=",
                "organizations_url": "https://api.github.com/users/mike325/orgs",
                "received_events_url": "https://api.github.com/users/mike325/received_events",
                "repos_url": "https://api.github.com/users/mike325/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mike325/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mike325/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mike325",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "There is not a complete feature parity with `printf` function. `string.format` does not support positional arguments, whereas `printf` does.\r\n\r\nAlso see [this](https://stackoverflow.com/questions/20318698/is-there-a-way-to-specify-the-argument-positions-in-the-format-string-for-strin/66653992) stackoverflow question.",
            "created_at": "2024-01-24T10:18:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-1907827221",
            "id": 1907827221,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM5xtyIV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1907827221/reactions"
            },
            "updated_at": "2024-01-24T10:24:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1907827221",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51371527?v=4",
                "events_url": "https://api.github.com/users/alexmozaidze/events{/privacy}",
                "followers_url": "https://api.github.com/users/alexmozaidze/followers",
                "following_url": "https://api.github.com/users/alexmozaidze/following{/other_user}",
                "gists_url": "https://api.github.com/users/alexmozaidze/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/alexmozaidze",
                "id": 51371527,
                "login": "alexmozaidze",
                "node_id": "MDQ6VXNlcjUxMzcxNTI3",
                "organizations_url": "https://api.github.com/users/alexmozaidze/orgs",
                "received_events_url": "https://api.github.com/users/alexmozaidze/received_events",
                "repos_url": "https://api.github.com/users/alexmozaidze/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/alexmozaidze/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/alexmozaidze/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/alexmozaidze",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> * Vimscript doesn't have proper booleans, so any vimscript function which should return boolean woud probably benefit from a Lua equivalent.\r\n\r\nThis fact is kinda annoying, but it would be even more annoying if this was changed in a backwards-incompatible way. Most Lua plugins and config have likely already long-since hard-coded checking directly against integers in conditionals. For example, changing a `vim.fn.*` function to return a Lua boolean instead of `0|1` would break everyone's code like `if vim.fn.*() == 1 then`.\r\n\r\n> **Edit:** Sorry, I think I misunderstood this the first time I read it. I agree with having new Lua equivalents for those type of vimscript functions.\r\n\r\n#### Some other things I've noticed:\r\n\r\n- There is no \"scroll window\" function. If I'm not mistaken, the only way to achieve scrolling a window in Lua is via a normal cmd (e.g. `normal! 1<C-D>`). It works, but having a `vim.api` function would be much better. I don't think there is a vimscript function for this either.\r\n\r\n- `vim.opt_{local,global}.*` should perhaps accept a win/buf id (index), like `vim.{bw}o` does. A workaround currently (without resorting to `nvim_set_option()`) is to wrap it with `vim.api.nvim_{win,buf}_call()`.\r\n\r\n- No Lua way to get register contents. It might be nice to have a dedicated `vim.api` function, or a special, indexable table akin to `vim.{o,g}.*` (e.g. `vim.reg.*`?) for quicker/easier access. There is a `vim.fn` function to achieve this however.",
            "created_at": "2024-08-29T02:51:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-2316614280",
            "id": 2316614280,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM6KFLqI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2316614280/reactions"
            },
            "updated_at": "2024-08-29T02:57:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2316614280",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45028928?v=4",
                "events_url": "https://api.github.com/users/tmillr/events{/privacy}",
                "followers_url": "https://api.github.com/users/tmillr/followers",
                "following_url": "https://api.github.com/users/tmillr/following{/other_user}",
                "gists_url": "https://api.github.com/users/tmillr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tmillr",
                "id": 45028928,
                "login": "tmillr",
                "node_id": "MDQ6VXNlcjQ1MDI4OTI4",
                "organizations_url": "https://api.github.com/users/tmillr/orgs",
                "received_events_url": "https://api.github.com/users/tmillr/received_events",
                "repos_url": "https://api.github.com/users/tmillr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tmillr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tmillr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tmillr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Feel free to hide if you don't want differences in the listed implementations here.\n\n`vim.uv.fs_stat(file).type == 'directory'` errors if the `file` does not exist on disk. It should be `(vim.uv.fs_stat(file) or {}).type == 'directory'`.",
            "created_at": "2025-06-02T12:18:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-2930406222",
            "id": 2930406222,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM6uqnNO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2930406222/reactions"
            },
            "updated_at": "2025-06-02T13:06:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2930406222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "This one is shorter `(vim.uv.fs_stat(file) or {}).type == 'xx'`",
            "created_at": "2025-06-02T12:24:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/18393#issuecomment-2930429889",
            "id": 2930429889,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18393",
            "node_id": "IC_kwDOAPphoM6uqs_B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2930429889/reactions"
            },
            "updated_at": "2025-06-02T13:06:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2930429889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/154880267?v=4",
                "events_url": "https://api.github.com/users/nenahp/events{/privacy}",
                "followers_url": "https://api.github.com/users/nenahp/followers",
                "following_url": "https://api.github.com/users/nenahp/following{/other_user}",
                "gists_url": "https://api.github.com/users/nenahp/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nenahp",
                "id": 154880267,
                "login": "nenahp",
                "node_id": "U_kgDOCTtJCw",
                "organizations_url": "https://api.github.com/users/nenahp/orgs",
                "received_events_url": "https://api.github.com/users/nenahp/received_events",
                "repos_url": "https://api.github.com/users/nenahp/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nenahp/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nenahp/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nenahp",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 22,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/18393/comments",
    "created_at": "2022-05-03T15:12:31Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/18393/events",
    "html_url": "https://github.com/neovim/neovim/issues/18393",
    "id": 1224233581,
    "labels": [
        {
            "color": "c7def8",
            "default": false,
            "description": "",
            "id": 109899557,
            "name": "vimscript",
            "node_id": "MDU6TGFiZWwxMDk4OTk1NTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vimscript"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/18393/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5I-FJt",
    "number": 18393,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 13,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 14,
        "url": "https://api.github.com/repos/neovim/neovim/issues/18393/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/18393/timeline",
    "title": "Lua stdlib feature parity against Vimscript",
    "type": null,
    "updated_at": "2025-06-02T13:06:13Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/18393",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    }
}