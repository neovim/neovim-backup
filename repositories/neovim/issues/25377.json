{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nI'm looking for a way to improve the startup experience of Neovide, to create the window with the correct size from the start and fix some other startup related sizing issue.\r\n\r\nBut the problem is that there does not seem to any way to ensure that all the GUI options (for example the font), all our options related to the window, (for example padding), the `lines`, `columns`, and the `colorscheme` are set. This is required in order to be able to correctly resize the window. \r\n\r\nIf the options are set directly in `init.vim/lua` then we receive several draw batches where each one sets a single option. So, this is not good.\r\n\r\nSetting all those options inside the `UIEnter` autocommand is a little bit better as long as none of the options are set elsewhere.\r\n\r\nBut this is totally out of the user control when using a plugin like `lazy.nvim`, which can potentially do a lot of stuff before `UIEnter`, making it basically useless for about anything. This happens for example when new plugins are installed at startup.\r\n\r\nThe workaround is to load a `ginit.vim/lua` file or similar before calling `nvim_ui_attach`. But the problem is that anyhing setup there is overwritten by what's passed to `nvim_ui_attach`. So, the only workaround I see is to get the option values manually, and then pass them on to `nvim_ui_attach`. \r\n\r\nI consider this a bug, and IMO `UIEnter` should always be called before anything is requested to be drawn on the screen. NOTE: the workaround of waiting for `UIEnter` before showing anything does not work, since then nothing is displayed when `lazy.nvim` installs the plugins.\n\n### Steps to reproduce\n\nLaunch a lazy.nvim configuration with some plugins not installed.\r\nObserve that multiple UI draw batches are received until UIEnter is called.\n\n### Expected behavior\n\n`UIEnter` should be called before anything is drawn.\n\n### Neovim version (nvim -v)\n\n0.9.2\n\n### Vim (not Nvim) behaves the same?\n\nN/A\n\n### Operating system/version\n\nWindows 11 / Arch Linux WSL\n\n### Terminal name/version\n\nNeovide 11.2\n\n### $TERM environment variable\n\nN/A\n\n### Installation\n\npacman",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I don't think it's possible to fix this without cause other breakages:\r\n- User config may check for attached UI\r\n- User config may cause redraw and UI flush\r\n- User config may even require UI interaction\r\n- UIEnter needs to be triggered after user config is sourced",
            "created_at": "2023-09-26T22:16:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-1736378345",
            "id": 1736378345,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM5nfwfp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1736378345/reactions"
            },
            "updated_at": "2023-09-26T22:21:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1736378345",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I was thinking that `UIEnter` could be called if it's setup when the first draw request is made, but I think you are right that there are potentially too many breakages.\r\n\r\nI wonder what the options could be, I imagine that we are not the only one that would like to setup our GUI options before anything is drawn. \r\n\r\nHere are a few alternatives:\r\n1. Do nothing, let the GUIs use their own setup files like `ginit.vim/lua` if they prefer.\r\n2. Make `ginit.vim/lua` more officially supported\r\n3. Don't send any flushes until an actual draw request needs to be done (just setting columns/lines is not considered as a such)\r\n4. Add another autocommand that can be used for this\r\n5. Have some kind of signal in the config that triggers the UI ready to be shown. And this is automatically set when an error is shown or when `UIEnter` happens, in case the user forgets, and would not deal with `lazy.nvim` for example.\r\n\r\nI think, I would prefer 3. But that also means that there's no good workarounds until it's implemented and a new release of Neovim is made. I could implement 1. now, and move on to 2. when it's supported.",
            "created_at": "2023-09-26T23:06:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-1736420927",
            "id": 1736420927,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM5nf64_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1736420927/reactions"
            },
            "updated_at": "2023-09-26T23:06:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1736420927",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "And it looks like @justinmk wasn't that enthusiastic about `ginit` here https://github.com/neovim/neovim/issues/3656#issuecomment-155856453",
            "created_at": "2023-09-26T23:12:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-1736424973",
            "id": 1736424973,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM5nf74N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1736424973/reactions"
            },
            "updated_at": "2023-09-26T23:12:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1736424973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think the real problems are these:\r\n> User config may cause redraw and UI flush\r\n> User config may even require UI interaction\r\n\r\nVim does not allow this https://vimhelp.org/gui.txt.html#GUI\r\n> But the [GUI](https://vimhelp.org/gui.txt.html#GUI) [window](https://vimhelp.org/windows.txt.html#window) [is](https://vimhelp.org/motion.txt.html#is) only opened after all the initializations have been\r\ncarried out.\r\n\r\nAllowing interaction and redrawing also does not go well with the possibility of starting Neovim without an UI with `--headless`. \r\n\r\nThe original design of calling `GUIEnter` before `VimEnter` also neatly solves a lot of the problems, since then we are guaranteed to have the correct grid size for example, when `VimEnter` is called. Furthermore `lazy.nvim` could start its installation process here, or preferably even after that, but before `VimEnter` is called.",
            "created_at": "2023-09-27T09:54:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-1737080563",
            "id": 1737080563,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM5nib7z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1737080563/reactions"
            },
            "updated_at": "2023-09-27T09:54:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1737080563",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> User config may check for attached UI\r\n\r\nIf you mean configs calling `nvim_list_uis()` during startup, that isn't really supported, because user configs should use UIEnter for that. Though `has('gui_running')` is decided by the list of attached UIs.\r\n\r\n> The original design of calling GUIEnter before VimEnter also neatly solves a lot of the problems, since then we are guaranteed to have the correct grid size for example, when VimEnter is called.\r\n\r\nInteresting. I don't think the UIEnter order of operations was [chosen deliberately](https://github.com/neovim/neovim/pull/6917). \r\n\r\nSo if there's a technical reason to change the order, we should just do it. I suspect UIEnter does not have a lot of use in the wild that would be sensitive to its relative order. The main potential consumers are probably users of [firenvim](https://github.com/glacambre/firenvim) and [vscode-neovim](https://github.com/vscode-neovim/vscode-neovim). We can deal with a transition there if necessary.",
            "created_at": "2023-09-28T05:15:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-1738442864",
            "id": 1738442864,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM5nnohw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738442864/reactions"
            },
            "updated_at": "2023-09-28T05:18:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738442864",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think I need to debug a bit more to see exactly what happens, becuase it looks like Neovim tries to disable the drawing here\r\nhttps://github.com/neovim/neovim/blob/19130415183763a572c50c8ae343dff8cc20526e/src/nvim/main.c#L355\r\n\r\nand enables it here just before `VimEnter` https://github.com/neovim/neovim/blob/19130415183763a572c50c8ae343dff8cc20526e/src/nvim/main.c#L584 \r\n\r\nIt does not quite match with what I remember that I saw in the logs with multiple flushes, with some of them even containing `win_viewport` But it's hard to determine what's actually happening based on the logs of Neovim alone, since the GUI messages and rpc notifications might not be ordered correctly with respect to each other. So I, will add some logging to Neovim as well to properly see what's happening.\r\n\r\nI also had problems with the Window not showing, when I tried to show it at `VimEnter` and there was a swap file message. But that might just be because it started blocking before the RPC notification to Neovide actually got sent. So, if that's the case it might still have actually happened after, or at the same time as `VimEnter`\r\n\r\nFor `lazy.nvim`, I'm not sure where the drawing happens, but hopefully that's also after `VimEnter`.\r\n\r\nIf the redrawing is supposed to be disabled between these points, then I think the fix would be to move `UIEnter` before `VimEnter` just before the redrawing is enabled again. And if the first UI flush message is sent after `UIEnter` then we can use that as a signal to show the actual operating system window.",
            "created_at": "2023-09-28T08:29:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-1738706133",
            "id": 1738706133,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM5noozV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738706133/reactions"
            },
            "updated_at": "2023-09-28T08:29:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738706133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It looks like `lazy.nvim` gets around the disabled drawing by manually calling `redraw` https://github.com/folke/lazy.nvim/blob/6b55e4695a5e85d862e517bf860bd913a4a45d86/lua/lazy/view/init.lua#L145\r\n\r\nSo I think these are the remaining options:\r\n1. Call `UIEnter` before the first `redraw` call if it's defined. And also, before any message like for example the `ATTENTION:` message. \r\n2. Don't do anything, but GUI implementors should suggest the users to add the gui configuration at the start of the init. It seems like the reception of a `grid_line` event can be a signal to the UI to show the window.  Note that `win_viewport` can't be used, since the message windows for example don't have a viewport. \r\n\r\n   The problem is that, since there's no event on the Neovim side for this, I can't use the workaround from here https://github.com/neovim/neovim/issues/25378 to detect if the columns or lines has changed or not. Any lua call will block if Neovim is blocking on a message prompt. I can however use my initial workaround for that of initializing with a low number of columns and rows, and then check if it's changed or not. **EDIT:** I can use the `VimResized` event for detecting this, so this will be the workaround in Neovide until something better is found. **EDIT2:** That does not work if the lines or column is set to the original value.\r\n\r\n   But otherwise, this is ideal since the GUI application could implement it right now without any additional support from Neovim.\r\n3. Ban any kind of drawing during and provide another more supported way for `lazy.nvim` for doing its things.\r\n\r\n",
            "created_at": "2023-09-29T14:00:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-1740943074",
            "id": 1740943074,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM5nxK7i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740943074/reactions"
            },
            "updated_at": "2023-09-29T22:33:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740943074",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Related #23122",
            "created_at": "2024-02-03T00:15:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-1924930327",
            "id": 1924930327,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM5yvBsX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1924930327/reactions"
            },
            "updated_at": "2024-02-03T00:15:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1924930327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\r\n> But the problem is that there does not seem to any way to ensure that all the GUI options (for example the font), all our options related to the window, (for example padding), the `lines`, `columns`, and the `colorscheme` are set.\r\n\r\n@fredizzimo can you give a code sample that shows how Neovide is using `UIEnter`? Is Neovide setting options in a `UIEnter` handler?\r\n\r\nWould it help if `nvim_ui_attach()` accepted an options list (or Vimscript commands) which was executed at a specific time?\r\n\r\n## Analysis\r\n\r\nI don't see what the big problem is with redefining UIEnter. Help me understand which part of this is wrong:\r\n\r\n> I don't think it's possible to fix this without cause other breakages:\r\n\r\n1. *User config may check for attached UI*\r\n    - `has('gui_running')` works without depending on UIEnter.\r\n1. *User config may cause redraw and UI flush*\r\n    - As mentioned, Vim's GUIEnter doesn't support this. What do we lose if we delay redraw?\r\n1. *User config may even require UI interaction*\r\n    - Then they should put such interactions in a VimEnter or UIEnter handler. It makes no sense for a config to do random UI interactions before a UI is connected.\r\n1. *UIEnter needs to be triggered after user config is sourced*\r\n    - configs can (and should) use VimEnter for that. why is UIEnter needed for that?\r\n\r\nwith the following patch,\r\n\r\n```diff\r\ndiff --git a/src/nvim/main.c b/src/nvim/main.c\r\nindex 0b49ea13d766..c6208c16f2bc 100644\r\n--- a/src/nvim/main.c\r\n+++ b/src/nvim/main.c\r\n@@ -596,6 +596,10 @@ int main(int argc, char **argv)\r\n   starting = 0;\r\n \r\n   RedrawingDisabled = 0;\r\n+  if (use_remote_ui) {\r\n+    do_autocmd_uienter_all();\r\n+    TIME_MSG(\"UIEnter autocommands\");\r\n+  }\r\n   redraw_all_later(UPD_NOT_VALID);\r\n   no_wait_return = false;\r\n \r\n@@ -605,10 +609,6 @@ int main(int argc, char **argv)\r\n   set_vim_var_nr(VV_VIM_DID_ENTER, 1);\r\n   apply_autocmds(EVENT_VIMENTER, NULL, NULL, false, curbuf);\r\n   TIME_MSG(\"VimEnter autocommands\");\r\n-  if (use_remote_ui) {\r\n-    do_autocmd_uienter_all();\r\n-    TIME_MSG(\"UIEnter autocommands\");\r\n-  }\r\n \r\n #ifdef MSWIN\r\n   if (use_remote_ui) {\r\n```\r\n\r\nthis still \"works\" in the sense that a prompt is visible (but the screen isn't drawn yet):\r\n\r\n    nvim --cmd 'echo input(\"foo\")'\r\n\r\nand actually, even without that patch I see the same behavior. Maybe the patch is missing some necessary changes.\r\n\r\n\r\n\r\n\r\n",
            "created_at": "2024-09-17T09:47:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2355084760",
            "id": 2355084760,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MX73Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355084760/reactions"
            },
            "updated_at": "2024-09-17T09:47:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355084760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @fredizzimo can you give a code sample that shows how Neovide is using `UIEnter`? Is Neovide setting options in a `UIEnter` handler?\r\n\r\nCurrently, we don't use it, but if we were to use it, it would be on the user side, something like this.\r\n```lua\r\nlocal augroup = vim.api.nvim_create_augroup(\"SetGUISettings\", { clear = true })\r\n\r\nvim.api.nvim_create_autocmd(\"UIEnter\", {\r\n  group = augroup,\r\n  callback = function(env)\r\n    if if vim.g.neovide then\r\n        -- Set neovide specific options\r\n    end\r\n    -- Possibly set options for other GUIs\r\n  end,\r\n})\r\n```\r\n\r\nInitially, we wanted to use to set the initial number of lines and columns based on the font size and other options. But we don't need that anymore, since we now make the assumption that everything is set when we receive the first UI flush message.\r\n\r\n> Would it help if nvim_ui_attach() accepted an options list (or Vimscript commands) which was executed at a specific time?\r\n\r\nI don't think that helps, we can already execute lua and Vimscript before calling `nvim_ui_attach()`. That's how we set the `vim.g.neovide` variable for example. \r\n\r\nSo, that part already works. The main problem is that `UIEnter` is called too late, and the screen has already been drawn with the wrong Neovide configuration, which can cause resizes, wrong fonts used and other artifacts.\r\n\r\n> User config may check for attached UI\r\n> * has('gui_running') works without depending on UIEnter.\r\n\r\nThis does not work when a remote server is started using `--headless --listen addr:port`. Since `gui_running` will be false when the init file is run\r\n\r\n> User config may cause redraw and UI flush\r\n> * As mentioned, Vim's GUIEnter doesn't support this. What do we lose if we delay redraw?\r\n\r\nThat causes huge problems with plugins like `lazy.nvim`, which not only draws before `UIEnter`, but also waits for user input. But, if I remember correctly, even regular nvim error messages due to configuration errors for example, are problematic. They can request a key press, which is not shown to the user, so it looks like it has hung without feedback.\r\n\r\n> User config may even require UI interaction\r\n> * Then they should put such interactions in a VimEnter or UIEnter handler. It makes no sense for a config to do random UI interactions before a UI is connected.\r\n\r\nI agree, but that's not how things work currently, see the reply to the previous point \r\n\r\n> UIEnter needs to be triggered after user config is sourced\r\n> * configs can (and should) use VimEnter for that. why is UIEnter needed for that?\r\n\r\nThis is no longer a requirement for us. But it was when we wanted to use it as a synchronization point, were everything was setup for rendering. \r\n\r\nIn practice, I think this is still a requirement though. if `UIEnter` is called before the user configs are completed then the user might add an autocommand handler after it's run, and therefore never triggered.\r\n\r\nI think the patch still calls `UIEnter` too late for this use case since `nvim__redraw` or `redraw` can be called almost at any point during the initialization.",
            "created_at": "2024-09-17T11:10:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2355369027",
            "id": 2355369027,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MZBRD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355369027/reactions"
            },
            "updated_at": "2024-09-17T11:10:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355369027",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > User config may check for attached UI\r\n> > \r\n> > * has('gui_running') works without depending on UIEnter.\r\n> \r\n> This does not work when a remote server is started using `--headless --listen addr:port`. Since `gui_running` will be false when the init file is run\r\n\r\nIt is a logical contradiction for a user to start a *headless* server with a config that requires UI *on startup* (however [here's an idea to support that special case](https://github.com/neovim/neovim/issues/29634#issuecomment-2355527810)). \r\n\r\nThat is entirely separate from the `--embed` use-case. Any \"remote server\" scenario is generalized as the scenario where an arbitrary UI connects at an arbitrary time. This isn't solved by \"waiting for the UI\", it is solved by [giving the incoming UI control over all options](https://github.com/neovim/neovim/issues/29634#issuecomment-2355465305) it wants/needs to set.\r\n\r\nSo to be clear: what is blocking us from changing the behavior of UIEnter to support the `--embed` use-case (where the UI starts the server)?",
            "created_at": "2024-09-17T11:55:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2355499976",
            "id": 2355499976,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MZhPI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355499976/reactions"
            },
            "updated_at": "2024-09-17T12:22:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355499976",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> So to be clear: what is blocking us from changing the behavior of UIEnter to support the --embed use-case (where the UI starts the server)?\r\n\r\nIf it only supports the `--embed` use case, then I don't see any need to change the behaviour.   \r\n\r\nBut the change I'm proposing would support both `--embed` and remote servers\r\n1. Neovim never attempts to draw anything before an UI is attached.\r\n2. Neovim never attempts to read any input and block before an UI is attached\r\n3. UIEnter is called when the UI attaches, after the UI has had a chance to set all the required variables and functions\r\n4. After that Neovim can proceed with drawing things and send draw command to the UI\r\n\r\nIt could also block in 1. and/or 2. But most importantly a flush should not be sent to the UI before `UIEnter` has been called, and the UI configured.\r\n\r\nThis change would allow the user to move UI configuration to `UIEnter`, which currently is not supported for either the `--embed` or remote server case.\r\n\r\n\r\n",
            "created_at": "2024-09-17T12:31:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2355610562",
            "id": 2355610562,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MZ8PC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355610562/reactions"
            },
            "updated_at": "2024-09-17T12:59:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355610562",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Proposal (revised)\r\n\r\n> > > User config may cause redraw and UI flush\r\n> > \r\n> > As mentioned, Vim's GUIEnter doesn't support this. What do we lose if we delay redraw?\r\n> \r\n> That causes huge problems with plugins like `lazy.nvim`, which not only draws before `UIEnter`, but also waits for user input.\r\n\r\n~~We can simply require such plugins to wait for `UIEnter` before showing prompts.~~\r\n\r\n- Edit: this restriction will only be for `--headless`, based on [feedback](https://github.com/neovim/neovim/issues/25377#issuecomment-2355878532):\r\n    - Nvim can throw an error if `input()` or other blocking UI are used before a UI is attached.\r\n    - Press-Enter messages can just be collected and shown after UIEnter.\r\n\r\n@folke do you see any fundamental issue with this?\r\n\r\n> 1. Neovim never attempts to draw anything before UI attach.\r\n> 2. Neovim never attempts to block for input before UI attach.\r\n\r\nThat seems like a reasonable goal, but orthogonal because...\r\n\r\n> But the change I'm proposing would support both `--embed` and remote servers\r\n\r\nThat doesn't support the scenario where a UI attaches arbitrarily after startup. If we focus on that scenario, all the other scenarios are automatically addressed.",
            "created_at": "2024-09-17T13:05:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2355722817",
            "id": 2355722817,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MaXpB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355722817/reactions"
            },
            "updated_at": "2024-09-17T14:27:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355722817",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @folke do you see any fundamental issue with this?\r\n\r\nYes I do, that would completely break lazy and other plugins.\r\n\r\nLazy installs plugins before loading any other plugin during startup. \r\nI do manual redraws so I can show the lazy ui before UIEnter for installation progress.\r\n\r\nDoing `input() / prompts` before `UIEnter` is also needed to be able to show issues with user's config. Multiple plugins of mine do this when something wrong is detected while loading the plugin. Like when a user tries to use one of my plugins for a Neovim version that is not supported.\r\n\r\nOther reasons why doing a redraw before `UIEnter` might be useful:\r\n- show some kind of dashboard initially before loading any other plugins\r\n- in LazyVim, when doing `nvim foo.lua`, I eagerly load treesitter and render the file immediately, before loading any other pugins. This makes a very noticeable difference in time to first render.",
            "created_at": "2024-09-17T13:50:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2355878532",
            "id": 2355878532,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6Ma9qE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355878532/reactions"
            },
            "updated_at": "2024-09-17T13:50:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355878532",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> So if there's a technical reason to change the order, we should just do it. I suspect UIEnter does not have a lot of use in the wild that would be sensitive to its relative order. The main potential consumers are probably users of [firenvim](https://github.com/glacambre/firenvim) and [vscode-neovim](https://github.com/vscode-neovim/vscode-neovim). We can deal with a transition there if necessary.\r\n\r\nI wouldn't be so sure about that. People **do** use that event a lot for loading stuff. I also use that in a lot of my plugins. If the order `BufRead` > `VimEnter` > `UIEnter` would change, then that **will** break (a lot) of things.\r\n\r\nEven in the case of emitting `UIEnter` early, what does that fix? The user's `init.lua` might still be loading and ui settings might still change, so I don't really see how this helps?",
            "created_at": "2024-09-17T13:54:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2355893773",
            "id": 2355893773,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MbBYN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355893773/reactions"
            },
            "updated_at": "2024-09-17T13:54:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355893773",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> local augroup = vim.api.nvim_create_augroup(\"SetGUISettings\", { clear = true })\r\n\r\n@fredizzimo why don't you just trigger a user event like `NeovideSettings` right before you want to display a window?\r\n\r\nThat way, the user can do any specific ui settings if they want that would be used in the initial window drawing.\r\n\r\n--- \r\n\r\nOr a user can just do settings before calling lazy (or any other plugin manager) as well. (which would probably already fix your issue without any additional changes?)\r\n\r\n```lua\r\nif vim.g.neovide then\r\n  vim.o.lines = 20\r\n  vim.g.neovide_scale_factor = 1.0\r\n    -- Put anything you want to happen only in Neovide here\r\nend\r\n\r\nrequire(\"lazy\").setup({\r\n```\r\n\r\n--- \r\n\r\n> If the options are set directly in init.vim/lua then we receive several draw batches where each one sets a single option. So, this is not good.\r\n\r\nIf you receive these batches during startup, you could debounce them?",
            "created_at": "2024-09-17T14:00:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2355913196",
            "id": 2355913196,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MbGHs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355913196/reactions"
            },
            "updated_at": "2024-09-17T14:08:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2355913196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@folke\r\n> Or a user can just do settings before calling lazy (or any other plugin manager) as well. (which would probably already fix your issue without any additional changes?)\r\n\r\nYes, that's how we work around the initial problem as described in the initial message. We currently assume that the user settings have been set before lazy, or any other plugin that draws something to the screen. And even if it isn't it just results in a glitch startup, so it's not the end of the world.\r\n\r\nIt works fine with `nvim --embed`, where we can set variables like `vim.g.neovide` before calling `nvim_ui_attach`, which then proceeds to load the user configuration. \r\n\r\nFor remote connections with `nvim --headless --listen` it doesn't, since the configuration is loaded immediately before we have a chance to set the variable or create user commands. \r\n\r\nSo, from my perspective, I see two alternative ways of fixing this:\r\n1. Ensure that `UIEnter` has been run before anything is drawn\r\n2. Add a way to start Neovim on a remote, and wait for the UI to attach, which is discussed in https://github.com/neovim/neovim/issues/29634\r\n\r\n\r\n",
            "created_at": "2024-09-17T14:23:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2356004341",
            "id": 2356004341,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MbcX1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356004341/reactions"
            },
            "updated_at": "2024-09-17T14:23:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356004341",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I can see another option. \r\n\r\nIf we can redefine `UIEnter`, we could define it as follows. But if not, we could introduce another event like `UIConfigure`.\r\n\r\nIf an UI is already attached when the autocommand is created, then call it immediately. Preferably once for each UI, with the UI name as a parameter. If the UI is not attached, call it as soon as it does, before any UI events is sent to it.\r\n\r\nThis way you can create it at the start of the config to ensure that it's called before anything is drawn in the embedded mode. In remote mode that's implied, since it's called immediately when the UI attaches, before doing anything else.\r\n\r\nWe also need a similar event, or maybe rpc call for the UI itself that is called in a blocking way, so that we can set `lines` and `columns` based on the font size for example. Neovim should then use this new geometry to layout everything before the it sends the UI events for the initial screen.\r\n\r\n\r\n",
            "created_at": "2024-09-17T14:55:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2356124598",
            "id": 2356124598,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6Mb5u2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356124598/reactions"
            },
            "updated_at": "2024-09-17T14:55:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356124598",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If we can redefine UIEnter, we could define it as follows. But if not, we could introduce another event like UIConfigure.\r\n\r\nWe could restore `GUIEnter`...\r\n\r\n> If the UI is not attached, call it as soon as it does, before any UI events is sent to it.\r\n\r\nThat makes sense to me, but it sounds like it would break Lazy...?\r\n\r\nThe current behavior (during *startup*) of `UIEnter` is just redundant with `VimEnter` (which can check `has('gui_running')` + `nvim_list_uis`). @folke why does Lazy listen to UIEnter instead of VimEnter?\r\n\r\n> We also need a similar event, or maybe rpc call for the UI itself that is called in a blocking way, so that we can set `lines` and `columns` based on the font size for example. Neovim should then use this new geometry to layout everything before the it sends the UI events for the initial screen.\r\n\r\nCan you show a concrete code sample of what this would look like? How is it different than my [suggestion](https://github.com/neovim/neovim/issues/25377#issuecomment-2355084760) (plus the existing `:help ui-override`)?:\r\n\r\n> Would it help if `nvim_ui_attach()` accepted an options list (or Vimscript commands) which was executed at a specific time?\r\n\r\n",
            "created_at": "2024-09-17T15:09:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2356179137",
            "id": 2356179137,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6McHDB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356179137/reactions"
            },
            "updated_at": "2024-09-17T15:10:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356179137",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think most people use the `UIEnter` event more as a way to execute code after all `VimEnter` event handlers have executed (and when a UI is available), since there's no way to specify you want a `VimEnter` callback to be executed last.\r\n\r\nSo basically a `VimEnterPost` :)\r\n\r\nFor lazy this isn't really an issue. I only use the event to calculate the startup time.\r\n\r\nThe same behavior can probably be achieved with a `VimEnter` autocmd that does a `vim.schedule()`.\r\n\r\nHowever, people do use this, so if the order of the event would change, this would be a breaking change.\r\n\r\nSee also https://github.com/search?q=UIEnter+lang%3Alua&type=code&p=2\r\n\r\nEdit: to be clear, lazy only requires `redraws/input/prompt` to work before `VimEnter`. `UIEnter` could possibly happen anytime and I'd just have to fix the startup time.\r\n",
            "created_at": "2024-09-17T15:18:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2356212532",
            "id": 2356212532,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6McPM0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356212532/reactions"
            },
            "updated_at": "2024-09-17T15:24:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356212532",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Can you show a concrete code sample of what this would look like? How is it different than my https://github.com/neovim/neovim/issues/25377#issuecomment-2355084760 (plus the existing :help ui-override)?:\r\n\r\nThe main difference is that `GUIEnter/UIEnter` would be called as soon as possible, as a response to the `nvim_ui_attach`, or `nvim_create_autocmd`. \r\n\r\nAnd on the GUI side, we have another event, also called from nvim to the ui before proceeding further. If you gave me free hands, I would change the signature of `nvim_ui_attach`   to `nvim_ui_attach({width}, {height}, {options}, {callback})`, where callback is a blocking RPC call to the UI.\r\n\r\nSo, on the Neovide side it would look like this\r\n```lua\r\n-- width and height are set to 0 here, since they will be changed anyway\r\nnvim_ui_attach(0, 0, {}, function()\r\n  -- Calculate the real width and height based on the options that were set during `GUIEnter`\r\n  -- This includes `guifont`, padding, line spacing, scaling and so on, and the actual physical window size reported by the OS\r\n  nvim_ui_try_resize(actual_width, actual_height)\r\nend)\r\n```\r\n\r\nCurrently, I think that only geometry is important, but some other use cases might come up in the future. But the important thing to keep in mind is that the UI has no way of knowing the geometry before the options are set. It also can't be done on the lua side, since the font for example needs to be loaded on the client machine before it can be done.\r\n\r\nIt might be possible to do this whole thing without blocking, as long as the UI events are not sent before both `GUIEnter` and the callback has been run. But in that case, the layout will probably be performed twice, even in the embedded case, once for the initial width and height passed to `nvim_ui_attach`, and another time as a result of the callback.\r\n\r\nAn approach without the callback might also be possible, providing that all the option setting inside `GUIEnter` is either blocking or the UI gets to know and respond to them before the drawing. But the callback approach would clean up the code in Neovide, the code dealing with setting the initial size is quite complex and have to avoid many types of race conditions. It would also most likely be much faster, since we don't need to resize multiple times. For example, first for the font, then for padding, then for scale and so on. ",
            "created_at": "2024-09-17T15:45:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2356303126",
            "id": 2356303126,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MclUW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356303126/reactions"
            },
            "updated_at": "2024-09-17T15:45:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356303126",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The main difference is that `GUIEnter/UIEnter` would be called as soon as possible, as a response to the `nvim_ui_attach`, or `nvim_create_autocmd`.\r\n\r\nYes, let's do that. If people are mis-using it as a \"VimEnterPost\", I don't care.\r\n\r\nEdit: except there is a [good reason](https://github.com/neovim/neovim/issues/25377#issuecomment-2357574938) for the current behavior, so we'd need to be clever about triggering UIEnter handlers that were defined *during startup* but *after UI attach*. \r\n\r\n\r\n> And on the GUI side, we have another event, also called from nvim to the ui before proceeding further. If you gave me free hands, I would change the signature of `nvim_ui_attach` to `nvim_ui_attach({width}, {height}, {options}, {callback})`,\r\n\r\nYes, that's basically what I [suggested](https://github.com/neovim/neovim/issues/25377#issuecomment-2355084760): \r\n\r\n> Would it help if `nvim_ui_attach()` accepted an options list (or Vimscript commands)\r\n\r\nnvim_ui_attach has an `{options}` param that we could extend. Though the \"callback\" would need to be stringified (Vimscript), since RPC currently doesn't support serialized Lua functions.\r\n\r\nSo that would work?",
            "created_at": "2024-09-17T19:31:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2356734327",
            "id": 2356734327,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MeOl3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356734327/reactions"
            },
            "updated_at": "2024-09-18T06:47:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2356734327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Just to clarify. `UIEnter` will possibly be called before `VimEnter`.\r\n\r\nWhat happens when a plugin defines an autocmd on `UIEnter` after it has already fired? \r\nWould its callback automatically get called right away, or is it up to the plugin to handle this case? Similar to `VimEnter` and `v:vim_did_enter`?\r\n\r\n@glepnir 's **dashboard.nvim** uses this for example. See here https://github.com/nvimdev/dashboard-nvim/blob/fabf5feec96185817c732d47d363f34034212685/plugin/dashboard.lua#L12-L23",
            "created_at": "2024-09-18T06:02:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2357574938",
            "id": 2357574938,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6Mhb0a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357574938/reactions"
            },
            "updated_at": "2024-09-18T06:47:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357574938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> What happens when a plugin defines an autocmd on UIEnter after it has already fired?\r\n\r\nAs a requirement in my proposal it has to be called right away. We need to start loading the user configuration so that the autocommand can be added, but it has to be fired and handled before the rest of the config has a chance to draw anything.",
            "created_at": "2024-09-18T07:28:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2357709186",
            "id": 2357709186,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6Mh8mC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357709186/reactions"
            },
            "updated_at": "2024-09-18T07:28:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357709186",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "~~It sounds like the `nvim_ui_attach` change plus [this](https://github.com/neovim/neovim/issues/29634#issuecomment-2355527810) will address 95% of the problem, so changing the UIEnter startup-order is lower priority.~~",
            "created_at": "2024-09-18T07:34:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2357721160",
            "id": 2357721160,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6Mh_hI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357721160/reactions"
            },
            "updated_at": "2024-09-18T07:58:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357721160",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "In our use case, the `nvim_ui_attach` change in itself is not very useful unless it can be guaranteed to happen after the user had a chance to apply a configuration, but before any drawing. Unless I'm missing something, that will need either a new event or changing of the startup order.\r\n\r\nEven in the remote case, we first connect to the server, then set our global variables and custom commands, then call `nvim_ui_attach`. So the startup argument change in https://github.com/neovim/neovim/issues/29634#issuecomment-2355527810 is the only thing needed. ",
            "created_at": "2024-09-18T07:53:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2357757948",
            "id": 2357757948,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MiIf8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357757948/reactions"
            },
            "updated_at": "2024-09-18T07:53:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357757948",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Feel free to close this issue if you decide to go with the other approach.",
            "created_at": "2024-09-18T08:06:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2357786130",
            "id": 2357786130,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MiPYS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357786130/reactions"
            },
            "updated_at": "2024-09-18T08:06:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357786130",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the `nvim_ui_attach` change in itself is not very useful unless it can be guaranteed to happen after the user had a chance to apply a configuration, but before any drawing\r\n\r\nWell, `nvim_ui_attach` happens before `RedrawingDisabled = 0`. Is that not enough? In https://github.com/neovim/neovim/issues/25377#issuecomment-1738706133 you mentioned some investigation is needed.",
            "created_at": "2024-09-18T08:15:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2357804322",
            "id": 2357804322,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MiT0i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357804322/reactions"
            },
            "updated_at": "2024-09-18T08:15:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357804322",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure what you mean, the wait happens here\r\nhttps://github.com/neovim/neovim/blob/22553e1f38addd867ad659b2944d00129141a499/src/nvim/main.c#L410-L415\r\n\r\nThat's after `RedrawingDisabled++`, but before `RedrawingDisabled = 0`\r\n\r\nThe user config is read after that here, still with `RedrawingDisabled > 0`\r\nhttps://github.com/neovim/neovim/blob/22553e1f38addd867ad659b2944d00129141a499/src/nvim/main.c#L463-L464\r\n\r\nSo a callback that happens at the time of `nvim_ui_attach`, it won't see the user config changes and can't update the screen size.\r\n\r\nIf your plan is to fire the callback, just before `RedrawingDisabled = 0`, then that might work as long as `RedrawingDisabled` really means it.\r\n\r\nBut my initial investigation indicates that's not the case, since that means that lazy somehow manages to do all it's drawing during this code block before `VimEnter`.\r\nhttps://github.com/neovim/neovim/blob/22553e1f38addd867ad659b2944d00129141a499/src/nvim/main.c#L598-L606\r\n\r\nOne approach that might work, is to fire it just before the screen is getting drawn the first time, but before the layout is done so that the new window size is taken into account. \r\n",
            "created_at": "2024-09-18T08:52:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2357880537",
            "id": 2357880537,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MimbZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357880537/reactions"
            },
            "updated_at": "2024-09-18T08:52:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357880537",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "At least `nvim__redraw` bypasses `RedrawDisabled` here:\r\nhttps://github.com/neovim/neovim/blob/22553e1f38addd867ad659b2944d00129141a499/src/nvim/api/vim.c#L2409",
            "created_at": "2024-09-18T09:10:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2357919694",
            "id": 2357919694,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6Miv_O",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357919694/reactions"
            },
            "updated_at": "2024-09-18T09:10:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357919694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`nvim__redraw` is marked internal, it's not supported and plugins shouldn't be calling it. We will definitely make it an error to call it during startup, or at least disable it.",
            "created_at": "2024-09-18T09:16:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2357931984",
            "id": 2357931984,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6Miy_Q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357931984/reactions"
            },
            "updated_at": "2024-09-18T09:16:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2357931984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ok, I ran it through the debugger, and it turns out that there's nothing that prevents `UIFlush` from being called directly when `RedrawingDisabled > 0`, here's a callstack when lazy is installing something.\r\n\r\n```\r\nui_flush() (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\ui.c:501)\r\ndo_os_system(char ** argv, const char * input, size_t len, char ** output, size_t * nread, _Bool silent, _Bool forward_output) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\os\\shell.c:929)\r\nos_system(char ** argv, const char * input, size_t len, char ** output, size_t * nread) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\os\\shell.c:854)\r\nget_system_output_as_rettv(typval_T * argvars, typval_T * rettv, _Bool retlist) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\eval.c:5941)\r\nf_systemlist(typval_T * argvars, typval_T * rettv, EvalFuncData fptr) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\eval\\funcs.c:8462)\r\ncall_internal_func(const char * const fname, const int argcount, typval_T * const argvars, typval_T * const rettv) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\eval\\funcs.c:270)\r\ncall_func(const char * funcname, int len, typval_T * rettv, int argcount_in, typval_T * argvars_in, funcexe_T * funcexe) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\eval\\userfunc.c:1707)\r\nnlua_call(lua_State * lstate) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\lua\\executor.c:1193)\r\nlj_BC_FUNCC (Unknown Source:0)\r\nlj_cf_package_require(lua_State * L) (\\home\\fredizzimo\\proj\\neovim\\.deps\\build\\src\\luajit\\src\\lib_package.c:453)\r\nlj_BC_FUNCC (Unknown Source:0)\r\nlj_cf_package_require(lua_State * L) (\\home\\fredizzimo\\proj\\neovim\\.deps\\build\\src\\luajit\\src\\lib_package.c:464)\r\nlj_BC_FUNCC (Unknown Source:0)\r\nlj_cf_package_require(lua_State * L) (\\home\\fredizzimo\\proj\\neovim\\.deps\\build\\src\\luajit\\src\\lib_package.c:464)\r\nlj_BC_FUNCC (Unknown Source:0)\r\nlua_pcall(lua_State * L, int nargs, int nresults, int errfunc) (\\home\\fredizzimo\\proj\\neovim\\.deps\\build\\src\\luajit\\src\\lj_api.c:1150)\r\nnlua_pcall(lua_State * lstate, int nargs, int nresults) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\lua\\executor.c:162)\r\nnlua_typval_exec(const char * lcmd, size_t lcmd_len, const char * name, typval_T * const args, int argcount, _Bool special, typval_T * ret_tv) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\lua\\executor.c:1466)\r\nex_lua(exarg_T * const eap) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\lua\\executor.c:1662)\r\nexecute_cmd0(int * retv, exarg_T * eap, const char ** errormsg, _Bool preview) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\ex_docmd.c:1635)\r\ndo_one_cmd(char ** cmdlinep, int flags, cstack_T * cstack, LineGetter fgetline, void * cookie) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\ex_docmd.c:2294)\r\ndo_cmdline(char * cmdline, LineGetter fgetline, void * cookie, int flags) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\ex_docmd.c:593)\r\ndo_source(char * fname, int check_other, int is_vimrc, int * ret_sid) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\runtime.c:2220)\r\ndo_user_initialization() (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\main.c:2003)\r\nsource_startup_scripts(const mparm_T * const parmp) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\main.c:2102)\r\nmain(int argc, char ** argv) (\\home\\fredizzimo\\proj\\neovim\\src\\nvim\\main.c:431)\r\n```",
            "created_at": "2024-09-18T10:38:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2358121764",
            "id": 2358121764,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MjhUk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2358121764/reactions"
            },
            "updated_at": "2024-09-18T10:38:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2358121764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `nvim__redraw` is marked internal, it's not supported and plugins shouldn't be calling it. We will definitely make it an error to call it during startup, or at least disable it.\r\n\r\nLazy doesn't use that API. It uses regular `:redraw`.\r\n\r\nIf you're really considering changing that behavior then that will completely break lazy.\r\n\r\nIf you're intending to have `RedrawingDisabled > 0` to always fully disable redraws, then that will also break **noice**, **which-key**, **flash** and a ton of other plugins.\r\n\r\nAnd for what reason?",
            "created_at": "2024-09-18T12:38:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2358358439",
            "id": 2358358439,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MkbGn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2358358439/reactions"
            },
            "updated_at": "2024-09-18T12:38:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2358358439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> And for what reason?\r\n\r\nTo be able to reason about things in a tractable manner.\r\n\r\nAnyways, nothing here is written in stone. I don't have a clear picture yet about what kind of boundaries we can put around redraws, and @bfredl will always have better ideas there.",
            "created_at": "2024-09-18T13:37:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2358498155",
            "id": 2358498155,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6Mk9Nr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2358498155/reactions"
            },
            "updated_at": "2024-09-18T13:37:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2358498155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My hunch is that we rather that we call UIEnter _too late_ \r\n\r\n> After a UI connects via |nvim_ui_attach()|, or\r\n> after builtin TUI is started, after |VimEnter|.\r\n\r\nNeeding to do UI stuff before VimEnter is explicitly supported, is the entire reason we wait very early during startup (looong before VimEnter) for the first `nvim_ui_attach()` so messages and prompts are properly handled. Forbidding UIEnter to happen before VimEnter thus seems like an outdated and arbitrary restriction. if changing this unconditionally breaks too much other things, then an ui like Neovide should at least be able to opt-in to it in `nvim_ui_attach()` some way. ",
            "created_at": "2024-09-18T17:34:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2359047607",
            "id": 2359047607,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MnDW3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2359047607/reactions"
            },
            "updated_at": "2024-09-18T17:34:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2359047607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The docs currently mention that `UIEnter` is always triggered **after** `VimEnter`, but I agree that it makes sense to trigger it earlier.\r\n\r\nI'd still consider this a breaking change, but it's something that can easily be fixed in affected plugins / user configs.\r\n\r\nAn alternative could be a `UIAttach` event that triggers early.\r\n\r\n```vimhelp\r\n\t\t\t\t\t\t\t*UIEnter*\r\nUIEnter\t\t\t\tAfter a UI connects via |nvim_ui_attach()|, or\r\n\t\t\t\tafter builtin TUI is started, after |VimEnter|.\r\n\t\t\t\tSets these |v:event| keys:\r\n\t\t\t\t    chan: |channel-id| of the UI\r\n```",
            "created_at": "2024-09-18T18:15:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/25377#issuecomment-2359121070",
            "id": 2359121070,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25377",
            "node_id": "IC_kwDOAPphoM6MnVSu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2359121070/reactions"
            },
            "updated_at": "2024-09-18T18:15:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2359121070",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 36,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25377/comments",
    "created_at": "2023-09-26T22:00:17Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/25377/events",
    "html_url": "https://github.com/neovim/neovim/issues/25377",
    "id": 1914362675,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "compatibility with Vim or older Neovim",
            "id": 109899712,
            "name": "compatibility",
            "node_id": "MDU6TGFiZWwxMDk4OTk3MTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/compatibility"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "",
            "id": 606691254,
            "name": "has:plan",
            "node_id": "MDU6TGFiZWw2MDY2OTEyNTQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:plan"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "UI extensibility, events, protocol, externalized UI",
            "id": 640132777,
            "name": "ui-extensibility",
            "node_id": "MDU6TGFiZWw2NDAxMzI3Nzc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui-extensibility"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim startup sequence (`:h startup`)",
            "id": 870629450,
            "name": "startup",
            "node_id": "MDU6TGFiZWw4NzA2Mjk0NTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/startup"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/25377/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 138,
        "created_at": "2023-12-07T23:09:35Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": "2025-03-15T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/41",
        "id": 10283236,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/41/labels",
        "node_id": "MI_kwDOAPphoM4AnOjk",
        "number": 41,
        "open_issues": 57,
        "state": "open",
        "title": "0.11",
        "updated_at": "2025-01-17T23:02:36Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/41"
    },
    "node_id": "I_kwDOAPphoM5yGtsz",
    "number": 25377,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/25377/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/25377/timeline",
    "title": "UI flush/redraw can happen before UI attach / UIEnter",
    "updated_at": "2025-01-19T11:16:10Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/25377",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
        "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
        "followers_url": "https://api.github.com/users/fredizzimo/followers",
        "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
        "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fredizzimo",
        "id": 9946255,
        "login": "fredizzimo",
        "node_id": "MDQ6VXNlcjk5NDYyNTU=",
        "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
        "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
        "repos_url": "https://api.github.com/users/fredizzimo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fredizzimo",
        "user_view_type": "public"
    }
}