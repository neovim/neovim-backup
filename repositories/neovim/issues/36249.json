{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "@justinmk's status comment on https://github.com/neovim/neovim/issues/329 seems to lay focus on selecting Markdown as potential candidate for a newly supported Nvim help file format. If Markdown is considered the right fit and the core team agrees with supporting Markdown as help file format, this issue tries to define what such a Markdown help file would look like, both the source and the visual representation (using conceal/anticonceal (virtual text). This would require extra queries for the Markdown TS parser. Do we want to support non-TS highlighting?\n\n**Steps**:\n- [ ] A \"Nvim Markdown spec\" which describes how Vimdoc elements should be\n  converted / represented in Markdown.\n- [ ] Vimdoc to Markdown converter. Should be fast enough to convert .txt format on-the-fly\n  for backwards compatibility probably.\n- [ ] `:help` but for Markdown help files. Might be a good candidate for an\n  in-process lsp #24338 and/or the start of a rewrite of the full :help system in Lua.\n\n\n## Markdown help format \"spec\"\n\n>[!IMPORTANT]\n>Ideas are very welcome! I'm no expert in the current Vimdoc file format nor have I read every help page included in Nvim's runtime. If there are cases not covered here, or better solutions to certain problems, do let me know.\n\nThis issue uses https://github.com/neovim/tree-sitter-vimdoc and https://github.com/nanotee/vimdoc-notes as reference to how Vimdoc is currently parsed and what features are recognized.\n\nGoals:\n- Try to use commonmark features.\n- If not possible with just commonmark features, use syntax already parsible by the TS parser for Markdown https://github.com/tree-sitter-grammars/tree-sitter-markdown.\n\n### First line of document\n\n[`:h help-writing`](https://neovim.io/doc/user/helphelp.html#_3.-writing-help-files) mentions that the first line should have the name of the help file and a short description. A level 1 heading can be used for the filename and the description can follow right after.\n\n**Vimdoc**:\n```vimdoc\n*helphelp.txt*\tNvim\n\nHelp on help files\t\t\t\t\t*helphelp*\n```\n\n**Markdown**:\n```md\n# helphelp.md\n\nHelp on help files.\n```\n\n### Sections / headline\n\nVimdoc has multiple formats for section headers or headlines. Markdown can just use ATX heading level 1 (or 2 if we want level 1 only for the first line of the document). For section tags, see the description on tag definitions below.\n\nA background color or virtual text can be used to make the section header visually more distinct.\n\n\n```vimdoc\n==============================================================================\nHeadline                                                             *headline*\n\n==================================headline====================================\nHeadline                                                             *headline*\n\n------------------------------------------------------------------------------\nHeadline                                                             *headline*\n\n----------------------------------headline------------------------------------\nHeadline                                                             *headline*\n```\n\n```markdown\n# Headline\n```\n\n### Column heading\n\nColumn headings are the \"lowest\" level of headings used in Vimdoc. The Vimdoc TS parser parses these as `h3` nodes. Markdown can possibly allow the full H3-H6 range of heading levels.\n\n```vimdoc\nColumn heading~\n\nCOLUMN HEADING\t\t\t\t\t\t*column-heading*\n\nCOLUMN HEADING\n```\n\n```markdown\n## Column heading\n\n## Column heading\n\n### Column heading\n```\n\n### Lists\n\nThe Vimdoc TS parser parses lines starting with `-` and `•` as unordered list items. In Markdown we can use `-` and `*` (conceal as `•`). Ordered list items are mentioned in the [vimdoc-notes](https://github.com/nanotee/vimdoc-notes) and supported in Markdown already. Markdown also supports nested lists.\n\n```vimdoc\n- Item 1\n- Item 2\n- Item 3\n\n• Item 1\n• Item 2\n• Item 3\n\n1) Item 1\n2) Item 2\n3) Item 3\n```\n\n```markdown\n- Item 1\n- Item 2\n- Item 3\n\n* Item 1\n* Item 2\n* Item 3\n\n1. Item 1\n2. Item 2\n3. Item 3\n```\n\n### Tables / alignment\n\nAlignment is probably the biggest issue with using markdown as help file format. A lot of the Vimdoc help files depend on arbitrary indentation for alignment. Take for example `:h helphelp`:\n\n```vimdoc\n\t\t\t\t\t\t*{subject}* *E149* *E661*\n:h[elp] {subject}\tLike \":help\", additionally jump to the tag {subject}.\n\t\t\tFor example:  >\n\t\t\t\t:help options\n\n<\t\t\t{subject} can include wildcards such as \"*\", \"?\" and\n\t\t\t\"[a-z]\":\n\t\t\t   :help z?\tjump to help for any \"z\" command\n\t\t\t   :help z.\tjump to the help for \"z.\"\n\t\t\tBut when a tag exists it is taken literally:\n\t\t\t   :help :?\tjump to help for \":?\"\n```\n\nAlthough this works in Markdown source files, it will not render well on e.g. GitHub. GFM tables could be used here, but GFM tables don't really allow multi-line blocks in table cells. [Markdoc](https://markdoc.dev) could be of use here, but (1) it doesn't have a TS grammar, (2) it doesn't have Lua bindings, and (3) it allows for way more functionality, similar to templating, which is probably not something we want to deal with. Can also be tackled using anticonceal / virtual text:\n\n````markdown\n#### `:h[elp] {subject}`\n\n\nLike \":help\", additionally jump to the tag {subject}.\nFor example:\n```\n:help options\n```\n{subject} can include wildcards such as \"*\", \"?\" and \"[a-z]\":\n- `:help z?`: jump to help for any \"z\" command\n- `:help z.`: jump to the help for \"z.\"\nBut when a tag exists it is taken literally:\n- `:help :?`: jump to help for \":?\"\n````\n\nWould look like this with a sufficiently level of `'conceallevel'`:\n\n````markdown\n#### `:h[elp] {subject}`\n                Like \":help\", additionally jump to the tag {subject}.\n                For example:\n\n                :help options\n\n                {subject} can include wildcards such as \"*\", \"?\" and \"[a-z]\":\n                - :help z? : jump to help for any \"z\" command\n                - :help z. : jump to the help for \"z.\"\n                But when a tag exists it is taken literally:\n                - :help :? : jump to help for \":?\"\n````\n\nOther suggestions welcome.\n\n### Code block\n\nThe Vimdoc TS parser recognizes indented code blocks starting with `>{lang}` and ending with a non-indented line (generally a single `<`). Code blocks in Markdown use triple backticks and don't have to be indented.\n\n```vimdoc\nEg: >\n    function! s:example_codeblock() abort\n        echo 'blah'\n    endfunction\n<\n\n>\n    function! s:example_codeblock() abort\n        echo 'blah'\n    endfunction\nblah\n```\n\n````markdown\n\nEg:\n```vim\nfunction! s:example_codeblock() abort\n    echo 'blah'\nendfunction\n```\n\n````\n\n### Function signature\n\nSee the section on alignment for the discussion on how to align function signatures and command specifications. Command specifications look like this in Vimdoc:\n\n```vimdoc\n\t\t\t\t\t\t\t*:viu* *:viusage*\n:viu[sage]\t\tShow help on Normal mode commands.  Added to simulate\n\t\t\tthe Nvi command.\n```\n\nA proposed Markdown format would be:\n\n```markdown\n#### `:viu[sage]` #:viu #:visusage\nShow help on Normal mode commands.  Added to simulate the Nvi command.\n```\n\nA concealed Markdown help file might look like this:\n\n```\n:viu[sage]                                              :viu :visusage\nShow help on Normal mode commands.  Added to simulate the Nvi command.\n```\n\n### Tag definitions\n\nTag definitions are any sequence of non-whitespace characters enclosed in asterisks. Most often right-aligned as pseudo-header. The [Markdown TS parser](https://github.com/tree-sitter-grammars/tree-sitter-markdown) can parse Obsidian-style tags (not enabled by default). We could use this still for defining tags. See [their docs](https://help.obsidian.md/Editing+and+formatting/Tags#Tag+format) for a quick primer.\n\n```vimdoc\nThis is *my-tag*. Here's a reference to |my-tag|.\n```\n\n```markdown\nThis is #my-tag. Here's a reference to [my-tag].\n```\n\n### Tag links\n\nTag links are either enclosed by bars (`|example|`) or by single quotes if it's a Nvim option (`'linenumber'`). Markdown help pages can use a [reference link](https://spec.commonmark.org/0.31.2/#full-reference-link), where the [link reference definition](https://spec.commonmark.org/0.31.2/#link-reference-definitions) is \"injected\" by Nvim and is similar to a `tags` file generated by `:helptags`.\n\n```vimdoc\nSee |tag-name| for more information.\n```\n\n```markdown\nSee [tag-name] for more information.\n```\n\nThe `tags.md` file generated by `:helptags`:\n```markdown\n[tag-name]: file:///usr/local/share/nvim/runtime/doc/help.md#tag-name\n```\n\n### Special\n\nVimdoc recognizes a couple of other inline elements that are special-cased, mostly for highlighting: keycode, chords, URLs, Notices, and highlight group names.\n\n#### Keycodes\n\nNo need for a special representation. Can wrap in backticks and have a query that highlights them differently. When a reference to a tag, wrap them like any other tag link.\n\n```vimdoc\n<Esc>\n<S-Right>\n```\n\n```markdown\n`<Esc>`\n`<S-Right>`\n```\n\n#### chords\n\nNo need for a special representation.\n\n```vimdoc\nCTRL-O\nCTRL-SHIFT-A\n```\n\n```markdown\n`CTRL-O`\n`CTRL-SHIFT-A`\n```\n\n#### URLs\n\nCommonmark supports raw link destinations like `<https://neovim.io>` and of course \"concealed\" links like `[my link](https://neovim.io)`.\n\n```vimdoc\nhttps://www.vim.org/\nhttps://neovim.io/\nmailto:user@host.com\nfile:///etc/os-release\n```\n\n```markdown\n<https://www.vim.org/>\n<https://neovim.io/>\n[Mail me](mailto:user@host.com)\n[OS Release file](file:///etc/os-release)\n```\n\n#### Notices\n\nCan be either handled via query matches or the GitHub WARNING etc. blocks.\n\n```vimdoc\nWARNING: info\nNote: XX\nDEPRECATED: XX\n```\n\n```markdown\n> [!WARNING]\n> info\n\nNote: XX\n\nDEPRECATED: XX\n```\n\n#### Highlight group names\n\nUse TS query match.\n\n```vimdoc\n\tTodo\tadd more stuff\n```\n\n```markdown\n\tTodo\tadd more stuff\n```\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Note that the format specification is not the biggest blocker; it's how to add taglinks (and especially how to hook this up to the help tag system -- which needs to be made format-agnostic since we cannot drop support for vimdoc due to existing upstream and plugin documentation).",
            "created_at": "2025-10-19T16:42:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/36249#issuecomment-3419795850",
            "id": 3419795850,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36249",
            "node_id": "IC_kwDOAPphoM7L1fGK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3419795850/reactions"
            },
            "updated_at": "2025-10-19T16:42:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3419795850",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Note that the format specification is not the biggest blocker; \n\nI agree, however, it can help with giving an idea what such a help file would look like.\n\n> it's how to add taglinks (and especially how to hook this up to the help tag system -- which needs to be made format-agnostic since we cannot drop support for vimdoc due to existing upstream and plugin documentation).\n\nKeep supporting Vimdoc is 100% the goal indeed. For upstream this might be solved by a build step that converts the Vimdoc files in runtime/doc to Markdown files. For plugins, these can be either generated on-the-fly, or we can keep all code (ftplugin and whatnot) to simply keep support for opening Vimdoc help files.",
            "created_at": "2025-10-19T17:05:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/36249#issuecomment-3419811144",
            "id": 3419811144,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36249",
            "node_id": "IC_kwDOAPphoM7L1i1I",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3419811144/reactions"
            },
            "updated_at": "2025-10-19T17:35:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3419811144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Vimdoc to Markdown converter.\n\n`gen_help_html.lua` gives an answer to that, but I would not suggest that we go around converting core help files.\n\nSupporting Markdown will be mostly helpful for third-party plugins which only have a readme, or half-baked readme-to-vimdoc conversion scripts.",
            "created_at": "2025-10-20T21:36:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/36249#issuecomment-3423813784",
            "id": 3423813784,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36249",
            "node_id": "IC_kwDOAPphoM7ME0CY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3423813784/reactions"
            },
            "updated_at": "2025-10-20T21:36:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3423813784",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/36249/comments",
    "created_at": "2025-10-19T16:36:21Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/36249/events",
    "html_url": "https://github.com/neovim/neovim/issues/36249",
    "id": 3530228193,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/36249/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM7SawHh",
    "number": 36249,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/36249/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/36249/timeline",
    "title": "Markdown help format tracking issue",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-10-20T21:36:46Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/36249",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
        "events_url": "https://api.github.com/users/yochem/events{/privacy}",
        "followers_url": "https://api.github.com/users/yochem/followers",
        "following_url": "https://api.github.com/users/yochem/following{/other_user}",
        "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/yochem",
        "id": 23235841,
        "login": "yochem",
        "node_id": "MDQ6VXNlcjIzMjM1ODQx",
        "organizations_url": "https://api.github.com/users/yochem/orgs",
        "received_events_url": "https://api.github.com/users/yochem/received_events",
        "repos_url": "https://api.github.com/users/yochem/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/yochem",
        "user_view_type": "public"
    }
}