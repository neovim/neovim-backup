{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nI think this is a problem with `vim.lsp.tagfunc`, so I put it this category.\n\n## Problem\n\nConsider this minimal typescript file:\n```ts\ninterface Iface {\n}\nconst iface = 1;\n\nconst thing = null;\nconst Thing = 2;\n\nconst Other = 3;\nfunction _() {\n    const other = null;\n}\n\nfunction main() {\n    const x = Thing;\n    const y: Iface = {};\n    const z = Other;\n}\nconst x = Thing;\nconst y: Iface = {};\nconst z = Other;\n```\nThe problem is basically that if you do `:tag` with one of the uppercase symbols, it goes to the lower case one no matter what. I have put multiple cases above to show that it happens in all kinds of situations, regardless of order of appearance, kind of symbol, etc. The most peculiar is `:tag Other` for which it goes to an out of scope variable `other` inside that other function!\n\nThis problem does not happen for these actions: `:lua vim.lsp.buf.definition()`, `C-]`, `C-w }` and `C-w ]`. So, I don't think its a language server problem. Weirdly, `:h C-]` (or any of the others) says it calls `:tag` internally.\n\nI haven't changed any of the `*case` options at all, but here are their defaults anyway: `noignorecase nosmartcase tagcase=followic`. Just in case, I checked that this happens with `tagcase=match` as well.\n\nAside, another issue I noticed but I'm not sure I should make a separate issue for, is that `vim.lsp.tagfunc` doesn't seem to support `i_CTRL-X_CTRL_]`\n\n## Reproduction\n\n - Checkout the latest stable(8b98642002d0506d20628683958cb5c97a0dad80) or the latest master(b34e137e43d359c8db4fb76028dea3b410842aff) (it happens on both)\n   - It also happens on 80e37aa533573ef1ad96bcccc006b8d45dc963b9 fwiw\n - Save the above typescript file as `one.ts` and the below lua file as `repro.lua` in the neovim directory itself\n - `make distclean && make clean && make -j$(nproc) CMAKE_BUILD_TYPE=Release`\n - Run `VIMRUNTIME=runtime build/bin/nvim -u repro.lua one.ts`\n - Try doing `:tag Other` (or any of the other uppercase ones). It will be wrong, try doing `<C-]>` with cursor on them and see that it is correct.\n\nBelow is the repro.lua for minimal reproduction.\n\n```lua\nlocal pattern = 'typescript'\nlocal cmd = {'typescript-language-server', '--stdio'}\nlocal root_markers = { 'package.json' }\nlocal settings = vim.empty_dict()\n\nvim.api.nvim_create_autocmd('FileType', {\n  pattern = pattern,\n  callback = function(args)\n    local match = vim.fs.find(root_markers, { path = args.file, upward = true })[1]\n    local root_dir = match and vim.fn.fnamemodify(match, ':p:h') or nil\n    vim.lsp.start({\n      name = 'bugged-ls',\n      cmd = cmd,\n      root_dir = root_dir,\n      settings = settings\n    })\n  end\n})\n\n-- remove effects of any user plugins in standard directories\nvim.opt.runtimepath = '/etc/xdg/nvim,/usr/local/share/nvim/site,/usr/share/nvim/site,runtime,/usr/local/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/etc/xdg/nvim/after'\n```\n\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\n\nall given above\n\n### Expected behavior\n\nall given above\n\n### Nvim version (nvim -v)\n\nmaster or stable\n\n### Language server name/version\n\ntypescript-language-server 4.3.3\n\n### Operating system/version\n\nLinux 6.11.3-arch1-1\n\n### Log file\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "The tagfunc has different modes of operations. If you're using `:tag` it uses `workspace/symbol` instead of `textDocument/definition`.\n\nPartly because the latter is depending on a cursor position, while the former takes a query.\nI don't see how we could change that.\n\nMaybe we could apply some additional matching on the result, but coming up with a reliable solution that works across languages might be tricky.\n\nWith `:tselect`  you'd see all results.",
            "created_at": "2024-11-01T08:55:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/31023#issuecomment-2451539576",
            "id": 2451539576,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31023",
            "node_id": "IC_kwDOAPphoM6SH4Z4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451539576/reactions"
            },
            "updated_at": "2024-11-01T08:55:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451539576",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The tagfunc has different modes of operations. If you're using `:tag` it uses `workspace/symbol` instead of `textDocument/definition`.\n\nAah, I see.\n\n> Partly because the latter is depending on a cursor position, while the former takes a query. I don't see how we could change that.\n>\n> Maybe we could apply some additional matching on the result, but coming up with a reliable solution that works across languages might be tricky.\n\nYeah, that makes sense\n\n> > Aside, another issue I noticed but I'm not sure I should make a separate issue for, is that vim.lsp.tagfunc doesn't seem to support i_CTRL-X_CTRL_]\n\nFrom what I read in `:h tag-function`, it seems like vim will pass the tagfunc the `i` flag? And from what I can see in `runtime/vim/lsp/_tagfunc.lua` it seems like we do `query_workspace_symbols` when flag is not `c`. Do you know why it throws a `E433: No tags file` though? I ran a request myself and checked that it does return data",
            "created_at": "2024-11-01T09:22:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/31023#issuecomment-2451576272",
            "id": 2451576272,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31023",
            "node_id": "IC_kwDOAPphoM6SIBXQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451576272/reactions"
            },
            "updated_at": "2024-11-01T09:23:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451576272",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/72668511?v=4",
                "events_url": "https://api.github.com/users/porridgewithraisins/events{/privacy}",
                "followers_url": "https://api.github.com/users/porridgewithraisins/followers",
                "following_url": "https://api.github.com/users/porridgewithraisins/following{/other_user}",
                "gists_url": "https://api.github.com/users/porridgewithraisins/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/porridgewithraisins",
                "id": 72668511,
                "login": "porridgewithraisins",
                "node_id": "MDQ6VXNlcjcyNjY4NTEx",
                "organizations_url": "https://api.github.com/users/porridgewithraisins/orgs",
                "received_events_url": "https://api.github.com/users/porridgewithraisins/received_events",
                "repos_url": "https://api.github.com/users/porridgewithraisins/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/porridgewithraisins/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/porridgewithraisins/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/porridgewithraisins",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I noticed this too.\n\nRelated, but more of an extended topic is `:tag x<tab>` completion with 'tagfunc': https://github.com/vim/vim/issues/12039",
            "created_at": "2024-11-04T14:17:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/31023#issuecomment-2454836777",
            "id": 2454836777,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31023",
            "node_id": "IC_kwDOAPphoM6SUdYp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454836777/reactions"
            },
            "updated_at": "2024-11-04T14:17:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454836777",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I was going to open an issue for this when I find there is already one. Glad I find an explanation of the behaviour at least.\n\nI get it's difficult to find a matching solution that works for everyone, but I have some suggestions to improve it:\n\n- Make `:tag` and related (`:ptag`) first look for exact matches. When I do `:ptag openPreview` (a function in an open buffer) it opens `--- @class vim.lsp.util.open_floating_preview.Opts` in the neovim source code. I like the fuzzy matching, but exact match should be the first option (I can see it is the second option if I do `:tselect`)\n- It should be looking in the cwd first before jumping to external files (like the neovim source code in my example, even if I added it in my lsp configuration).\n- The discrepancy should be noted in the docs/help. `:h <C-w>}` help says `Use identifier under cursor as a tag and perform a :ptag on it.`, which in view of this issue looks to be incorrect when using lsp and afaik there is no mention in `:h lsp-defaults` either (where the tagfunc behavior is exaplained).\n\nI guess option 3 is the easiest, but I would love to see option 1 implemented, as I think it makes the most sense.",
            "created_at": "2024-11-09T11:39:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/31023#issuecomment-2466183382",
            "id": 2466183382,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31023",
            "node_id": "IC_kwDOAPphoM6S_vjW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466183382/reactions"
            },
            "updated_at": "2024-11-09T11:39:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466183382",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33849340?v=4",
                "events_url": "https://api.github.com/users/SebasF1349/events{/privacy}",
                "followers_url": "https://api.github.com/users/SebasF1349/followers",
                "following_url": "https://api.github.com/users/SebasF1349/following{/other_user}",
                "gists_url": "https://api.github.com/users/SebasF1349/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/SebasF1349",
                "id": 33849340,
                "login": "SebasF1349",
                "node_id": "MDQ6VXNlcjMzODQ5MzQw",
                "organizations_url": "https://api.github.com/users/SebasF1349/orgs",
                "received_events_url": "https://api.github.com/users/SebasF1349/received_events",
                "repos_url": "https://api.github.com/users/SebasF1349/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/SebasF1349/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SebasF1349/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/SebasF1349",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31023/comments",
    "created_at": "2024-11-01T08:23:06Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31023/events",
    "html_url": "https://github.com/neovim/neovim/issues/31023",
    "id": 2628586667,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31023/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6crQyr",
    "number": 31023,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31023/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31023/timeline",
    "title": "LSP:  `:tag` behaving differently from `C-]`, `C-w ]`, `C-w }` etc with `vim.lsp.tagfunc`",
    "updated_at": "2025-01-17T15:39:42Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31023",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/72668511?v=4",
        "events_url": "https://api.github.com/users/porridgewithraisins/events{/privacy}",
        "followers_url": "https://api.github.com/users/porridgewithraisins/followers",
        "following_url": "https://api.github.com/users/porridgewithraisins/following{/other_user}",
        "gists_url": "https://api.github.com/users/porridgewithraisins/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/porridgewithraisins",
        "id": 72668511,
        "login": "porridgewithraisins",
        "node_id": "MDQ6VXNlcjcyNjY4NTEx",
        "organizations_url": "https://api.github.com/users/porridgewithraisins/orgs",
        "received_events_url": "https://api.github.com/users/porridgewithraisins/received_events",
        "repos_url": "https://api.github.com/users/porridgewithraisins/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/porridgewithraisins/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/porridgewithraisins/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/porridgewithraisins",
        "user_view_type": "public"
    }
}