{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\r\n\r\n(As usual, corrections/objections are welcome, I'm just writing things down...)\r\n\r\nCurrently we have lots of APIs to insert/replace text, but they all are slightly different:\r\n\r\n```\r\nnvim_buf_get_lines\r\nnvim_buf_set_lines\r\nnvim_buf_set_text\r\nnvim_buf_get_text\r\nnvim_buf_get_offset\r\nnvim_del_current_line\r\nnvim_put\r\n```\r\n\r\nAnd they are lacking features such as the ability to make the operation dot-repeatable. https://github.com/neovim/neovim/issues/19806#issuecomment-2365146298\r\n\r\n(Note `nvim_paste` is intentionally not included in this.)\r\n\r\nThe current interface for any script/client that wants to dot-repeat text input is to use `nvim_paste`. However, `nvim_paste` doesn't have a way to \"replace\" text (unlike `nvim_buf_set_text`).\r\n\r\nhttps://github.com/neovim/neovim/pull/30438 implements a reliable (internal) framework for setting up dot repeat. That opens the door for potentially enabling dot-repeat for things like `nvim_buf_set_text`.\r\n\r\n### Expected behavior\r\n\r\nReplace all of these functions with 2 APIs:\r\n\r\n```typescript\r\nnvim_buf_text_get(buf: int, opts: dict)\r\n\r\n// If end_col!=start_col, this behaves like \"put\".\r\nnvim_buf_text_set(buf: int, text: string, opts: dict)\r\n\r\n// (Obviously some of these don't apply to every function.)\r\nopts: {\r\n  repeat: bool     // make the operation dot-repeatable\r\n  start_row: int   // optional, use cursor position if not given\r\n  start_col: int   // \"\r\n  end_row: int     // \"\r\n  end_col: int     // \"\r\n  strict_indexing  // do we need this?\r\n  type: string     // \"b\"/\"c\"/\"l\". If linewise, then it can be\r\n                   // fast like nvim_buf_set_lines?\r\n  after: bool      // insert before/after cursor\r\n  follow: bool     // place cursor after result.\r\n  crlf: bool\r\n  meta: bool       // only return metadata, not text. To eliminate e.g.\r\n                   // nvim_buf_line_count, nvim_buf_get_offset\r\n}\r\n```\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> Replace all of these functions with 2 APIs:\r\n\r\n```\r\nnvim_text_get(buf: int, opts: dict)\r\nnvim_text_put(buf: int, text: string, opts: dict)\r\nnvim_text_set(buf: int, text: string, opts: dict)\r\n```\r\n\r\n... and a fanatical devotion to tpope!\r\n\r\n\r\nOn a more serious note: what is the difference between `put` and `set`? If it's replacing or not, couldn't that be handled via `opts` (e.g., specifying `end_col != start_col`)?",
            "created_at": "2024-09-21T11:30:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2365153813",
            "id": 2365153813,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6M-WIV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365153813/reactions"
            },
            "updated_at": "2024-09-21T11:43:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365153813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Why does `undo` mean dot-repeatable?",
            "created_at": "2024-09-21T11:32:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2365154340",
            "id": 2365154340,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6M-WQk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365154340/reactions"
            },
            "updated_at": "2024-09-22T09:45:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365154340",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Why does `undo` mean dot-repeatable?\r\n\r\nNo reason, we can name it `repeat` or open to better names.\r\n\r\n",
            "created_at": "2024-09-21T11:41:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2365156225",
            "id": 2365156225,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6M-WuB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365156225/reactions"
            },
            "updated_at": "2024-09-22T09:45:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365156225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'd like to share couple of observations based on experience of using most of them:\r\n- Getting/setting whole lines is used *far* more frequently than getting/setting text. Having `start_col` and `end_col` default to cursor column would imply supplying `start_col = 0, end_col = -1` (or similar) when working with whole lines. This introduces a lot of boiler plate. Similar to current `strict_indexing` requiring putting an extra `false/true`, although I don't remember actually needing to use it.\r\n\r\n    Maybe having `start_col = 0` and `end_col = -1` would make more sense? On a similar note maybe also having `start_row = 0` and `end_row = -1` be default would make sense (not so sure about this one, though)?\r\n\r\n- It is currently impossible to replace lines/text without completely affecting extmarks. If I understand correctly, it behaves as if lines/text are deleted -> extmarks adjusted -> lines/text is placed. This leads to etmarks being squished to either side of the replaced region. Whether preserving them is a good thing might depend on the use case.\r\n\r\n    For example, preserving extmarks that highlight full line (and/or place sign; and/or track certain position) might be a good idea if replaced text has the same number of lines/columns. Although this area looks like a lot of shades of grey instead of being black and white.\r\n\r\n------\r\n\r\nAlso, I am not sure what are the use cases for having both `after: bool      // insert before/after cursor` and `follow: bool     // place cursor after result`.\r\nThe `follow` I can see being used even if inserted text is far away from cursor (although also would probably be reasonable to allow setting cursor *before* inserted text).\r\nCan `after` be removed in favor of a proper `start_col` and `end_col` computation?",
            "created_at": "2024-09-21T13:27:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2365188176",
            "id": 2365188176,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6M-ehQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365188176/reactions"
            },
            "updated_at": "2024-09-21T13:27:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365188176",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Great suggestions.\r\n\r\n>  Maybe having [default] `start_col = 0` and `end_col = -1` would make more sense? On a similar note maybe also having `start_row = 0` and `end_row = -1` be default would make sense\r\n\r\nFine with me. But should we also have a way to say \"use cursor position\"?\r\n\r\n\r\n\r\n> extmarks ... a lot of shades of grey\r\n\r\nSo, do we need an enum-like `extmarks: 'preserve'|'destroy'|...` flag to control behavior?\r\n\r\n\r\n\r\n\r\n> Can `after` be removed in favor of a proper `start_col` and `end_col` computation?\r\n\r\nDo you mean, it would be the caller's responsibility? I suppose we could start with that; `after` could be added later if really needed.\r\n",
            "created_at": "2024-09-22T09:58:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2366480844",
            "id": 2366480844,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NDaHM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366480844/reactions"
            },
            "updated_at": "2024-09-22T09:58:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366480844",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Maybe having [default] `start_col = 0` and `end_col = -1` would make more sense? On a similar note maybe also having `start_row = 0` and `end_row = -1` be default would make sense\r\n> \r\n> Fine with me. But should we also have a way to say \"use cursor position\"?\r\n\r\nNot sure how common is using exact cursor position. The \"get cursor line\" is more common, I'd say.\r\n\r\nMaybe going the slightly extended route of [`vim.highlight.range()` approach](https://github.com/neovim/neovim/blob/e697c1b43dfbeab132fee4149157f7abd08c51a0/runtime/doc/lua.txt#L647-L650) is the way here? So having `start` / `finish` (or `from` / `to`) that:\r\n- Defaults to `{0, 0}` and `{-1, -1}`. For example:\r\n    - `nvim_buf_text_get(0, {})` returns all lines.\r\n    - `nvim_buf_text_set(0, { 'aaa' }, {})` replaces all lines.\r\n- If integer, transformed into `{n, 0}` and `{m, -1}`. For example:\r\n    - `nvim_buf_text_get(0, { from = 1 })` returns all but first line.\r\n    - `nvim_buf_text_set(0, { 'aaa' }, { to = -2 })` replaces all but last line.\r\n- If tuple, operates between those positions. For example:\r\n    - `nvim_buf_text_get(0, { from = { 0, 1 }, to = { 0, -2 } })` returns first line without first and last characters.\r\n    - `nvim_buf_text_set(0, { 'aaa' }, { from = { 1, 1 }, to = { 1, 1 } })` inserts text at position `{ 1, 1 }`.\r\n- If string, transformed based as input of `getpos()`. For example:\r\n    - `nvim_buf_text_get(0, { from = '.' })` returns all text from cursor until end of buffer.\r\n    - `nvim_buf_text_set(0, { 'aaa' }, { from = 'w0', to = 'w$' })` replaces all visible text.\r\n\r\nThe obvious downside is that it needs creating more tables/tuples which can impact performance on caller's side. Not sure how valid this concern is though.\r\n\r\n> So, do we need an enum-like `extmarks: 'preserve'|'destroy'|...` flag to control behavior?\r\n\r\nNot sure. Maybe a more higher level `mode: 'replace'|'update'|...` to indicate the intention behind setting text? Replacing will (maybe among other things) preserve extmarks as much as possible, while updating will remove them.",
            "created_at": "2024-09-22T11:10:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2366729706",
            "id": 2366729706,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NEW3q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366729706/reactions"
            },
            "updated_at": "2024-09-22T11:11:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366729706",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That all sounds good! Except: \"whole buffer\" is easy to specify (-1), but the \"insert\" case is a bit awkward (`from` and `to` must both be passed and identical). Can `from = { 1, 1 }` default to `to=from`, so the \"insert\" case is ergonomic?\r\n\r\nPerhaps it will help to rename from/to to `pos`/`pos_end`.",
            "created_at": "2024-09-22T12:30:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2366765915",
            "id": 2366765915,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NEftb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366765915/reactions"
            },
            "updated_at": "2024-09-22T12:32:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366765915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> That all sounds good! Except: \"whole buffer\" is easy to specify (-1), but the \"insert\" case is a bit awkward (`from` and `to` must both be passed and identical). Can `from = { 1, 1 }` default to `to=from`, so the \"insert\" case is ergonomic?\r\n> \r\n> Perhaps it will help to rename from/to to `pos`/`pos_end`.\r\n\r\nYeah, if named `pos` and `pos_end` then if one is not supplied then it defaults to the other sounds good. This would make `nvim_buf_text_set` more straightforward but at the expense of making `nvim_buf_text_get` more verbose. So I guess it depends on the design priorities.\r\n\r\nIt seems that `nvim_buf_get_lines()` is used more frequently than `nvim_buf_set_lines()`:\r\n- In Neovim 'runtime/lua' it is 29 against 15.\r\n- In 'mini.nvim' it is 34 against 19.\r\n\r\nSame tendency with `nvim_buf_get_text()` vs `nvim_buf_set_text()`:\r\n- In Neovim 'runtime/lua' it is 4 against 4.\r\n- In 'mini.nvim' it is 2 against 3.\r\n\r\nSo based on this impromptu frequency metric, it might be better to prefer `get` over `set` and \"lines\" over \"text\".",
            "created_at": "2024-09-22T13:01:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2366777253",
            "id": 2366777253,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NEiel",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366777253/reactions"
            },
            "updated_at": "2024-09-22T13:01:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366777253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It seems that `nvim_buf_get_lines()` is used more frequently than `nvim_buf_set_lines()`:\r\n\r\nThe existing usages specify `-1` whenever they want \"until EOB\". Continuing to require `-1` seems fine?\r\n\r\nOTOH, I'm actually not sure what the default for `nvim_buf_text_get(0, {from=…})` should be. What would `nvim_buf_text_get(0, {from=…,to=from})` mean?\r\n",
            "created_at": "2024-09-22T13:53:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2366800252",
            "id": 2366800252,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NEoF8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366800252/reactions"
            },
            "updated_at": "2024-09-22T13:53:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366800252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> OTOH, I'm actually not sure what the default for `nvim_buf_text_get(0, {from=…})` should be.\r\n\r\nWith EOB as default for `to` / `pos_end` it would mean \"text from `from` until the EOB\".\r\n\r\n> What would `nvim_buf_text_get(0, {from=…,to=from})` mean?\r\n\r\nThat would return empty list or `{ '' }` (as `vim.api.nvim_buf_get_text(0, x, y, x, y, {})` does now). So every call to `nvim_buf_text_get()` would require explicitly providing both `from` and `to`. Which is, of course, reasonable",
            "created_at": "2024-09-22T14:08:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2366806616",
            "id": 2366806616,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NEppY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366806616/reactions"
            },
            "updated_at": "2024-09-22T14:08:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366806616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It is currently impossible to replace lines/text without completely affecting extmarks. If I understand correctly, it behaves as if lines/text are deleted -> extmarks adjusted -> lines/text is placed. This leads to etmarks being squished to either side of the replaced region. \r\n\r\nWhen this is a problem, the problem is that you are applying a single, too coarse grained, update to start with. \r\n\r\nWe want to leave a new API open to instead to many smaller _detailed_ changes can be done in a single API call with not much overhead over one single bulky replacement (even if this is not implemented in the first PR for such a big overhaul). For instance if a formatting operation is adding/removing white space, it should supply a description of only changes to the indentation whitespace and leave the rest of the content intact, which will preserve all extmarks which begins/ends on the actual content of the lines.\r\n\r\nExtmarkes aren't meant to be \"shades or grey\", at all. They are **very** sharp and precise once you  \"say what you mean\" with your changes to the text instead of expecting nvim to figure out what you mean for you. ",
            "created_at": "2024-09-22T15:06:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2366829305",
            "id": 2366829305,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NEvL5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366829305/reactions"
            },
            "updated_at": "2024-09-22T15:06:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366829305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> leave a new API open to instead to many smaller _detailed_ changes can be done in a single API call with not much overhead over one single bulky replacement\r\n\r\nWould that be a separate \"batch\" API or else what kind of signature would you suggest for `nvim_buf_text_set` ?\r\n\r\n    ",
            "created_at": "2024-09-22T15:12:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2366831051",
            "id": 2366831051,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NEvnL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366831051/reactions"
            },
            "updated_at": "2024-09-22T15:12:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366831051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`nvim_buf_get_offset` returns an int as opposed to text so I think this one needs to remain as is, otherwise you end up with a function with polymorphic return types which I strongly think we should avoid in the API.",
            "created_at": "2024-09-23T09:07:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2367627760",
            "id": 2367627760,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NHyHw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2367627760/reactions"
            },
            "updated_at": "2024-09-23T09:07:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2367627760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `nvim_buf_get_offset` returns an int as opposed to text so I think this one needs to remain as is, otherwise you end up with a function with polymorphic return types\r\n\r\nWouldn't be polymorphic, we could always return a Dict (like `nvim_exec2`):\r\n\r\n```typescript\r\n{\r\n  text: string\r\n  // other fields\r\n}\r\n```",
            "created_at": "2024-09-23T09:16:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2367648046",
            "id": 2367648046,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NH3Eu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2367648046/reactions"
            },
            "updated_at": "2024-09-23T09:16:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2367648046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Then if a user just wants an offset, they've got to incur the huge cost of those string and table allocations.",
            "created_at": "2024-09-23T09:22:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2367661586",
            "id": 2367661586,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NH6YS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2367661586/reactions"
            },
            "updated_at": "2024-09-23T09:22:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2367661586",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Returning the `text` field would be optional, controlled by the `meta` flag. But maybe `nvim_buf_get_offset` doesn't fit here. Are there other \"offsets\" that consumers would want besides a \"line offset\"?",
            "created_at": "2024-09-23T11:09:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/30450#issuecomment-2367900887",
            "id": 2367900887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30450",
            "node_id": "IC_kwDOAPphoM6NI0zX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2367900887/reactions"
            },
            "updated_at": "2024-09-23T11:09:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2367900887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 16,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30450/comments",
    "created_at": "2024-09-21T11:26:44Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30450/events",
    "html_url": "https://github.com/neovim/neovim/issues/30450",
    "id": 2540197016,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "user experience",
            "id": 151718455,
            "name": "ux",
            "node_id": "MDU6TGFiZWwxNTE3MTg0NTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ux"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30450/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6XaFSY",
    "number": 30450,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 5,
        "-1": 0,
        "confused": 0,
        "eyes": 3,
        "heart": 5,
        "hooray": 0,
        "laugh": 0,
        "rocket": 3,
        "total_count": 16,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30450/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30450/timeline",
    "title": "API: one buffer text api to rule them all",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:59:01Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30450",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}