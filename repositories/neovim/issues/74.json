{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "In vim there is a problem with nul bytes: you cannot have them inside a string and they are replaced with `\\n`, `\\x01` or just truncate string. Wondering what are the plans on handling this in NeoVim. Lua allows zero bytes in strings and most of the plugin code does not care about NULs, so new VimL can rather safely allow zero bytes. Sucha change is certain to break some of my code though, but I can handle this.\n\n<bountysource-plugin>\n\n---\n\nWant to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/1428486-zero-byte-in-strings?utm_campaign=plugin&utm_content=tracker%2F461131&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F461131&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n",
    "closed_at": "2015-08-20T04:58:07Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I consider this a bug, and think it should be fixed in neovim.\n",
            "created_at": "2014-02-23T16:04:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-35834838",
            "id": 35834838,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODM0ODM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/35834838/reactions"
            },
            "updated_at": "2014-02-23T16:04:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/35834838",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/472266?v=4",
                "events_url": "https://api.github.com/users/ashleyh/events{/privacy}",
                "followers_url": "https://api.github.com/users/ashleyh/followers",
                "following_url": "https://api.github.com/users/ashleyh/following{/other_user}",
                "gists_url": "https://api.github.com/users/ashleyh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ashleyh",
                "id": 472266,
                "login": "ashleyh",
                "node_id": "MDQ6VXNlcjQ3MjI2Ng==",
                "organizations_url": "https://api.github.com/users/ashleyh/orgs",
                "received_events_url": "https://api.github.com/users/ashleyh/received_events",
                "repos_url": "https://api.github.com/users/ashleyh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ashleyh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ashleyh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ashleyh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@ashleyh It is not. Bram have once chosen to use C strings and thus these workarounds appeared. I would not say this is the only option though: as opposed to Python (and many other languages) which handles NUL transparently using usual length/data pair and not C strings, zsh uses C strings and still handles NUL inside them transparently: it just escapes some characters: 0x00 and 0x83 till 0xA0. Escaping scheme: 0x83 (character xor 32). Unescaping is trivial: when 0x83 character was found drop it and use (next_character xor 32).\n\nI am not sure which scheme will have less overhead: `struct string_T { size_t length; char a[1]; }` or zsh-style escaping. I guess here are two issues:\n1. What to use in protocol used for IPC. Amount of overhead depends specifically library that implements encoding/decoding: it seems that things like `system()` and `:!` will be handled on neovim plugin side since they are implementing all scripting engines and when doing I/O in the core I/O is the bottleneck, not unescaping.\n2. VimL scripting engine: since it is going to be translated to lua it will probably use whatever lua uses to handle strings.\n",
            "created_at": "2014-02-23T16:45:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-35835973",
            "id": 35835973,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODM1OTcz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/35835973/reactions"
            },
            "updated_at": "2014-02-23T16:45:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/35835973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I am not convinced that intentionality stops it being a bug :P\n\nPersonally I am in favour of length-prefixed strings.\n",
            "created_at": "2014-02-23T17:07:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-35836598",
            "id": 35836598,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODM2NTk4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/35836598/reactions"
            },
            "updated_at": "2014-02-23T17:07:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/35836598",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/472266?v=4",
                "events_url": "https://api.github.com/users/ashleyh/events{/privacy}",
                "followers_url": "https://api.github.com/users/ashleyh/followers",
                "following_url": "https://api.github.com/users/ashleyh/following{/other_user}",
                "gists_url": "https://api.github.com/users/ashleyh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ashleyh",
                "id": 472266,
                "login": "ashleyh",
                "node_id": "MDQ6VXNlcjQ3MjI2Ng==",
                "organizations_url": "https://api.github.com/users/ashleyh/orgs",
                "received_events_url": "https://api.github.com/users/ashleyh/received_events",
                "repos_url": "https://api.github.com/users/ashleyh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ashleyh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ashleyh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ashleyh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "issue #96 depends on this probably\n",
            "created_at": "2014-02-27T19:39:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-36282035",
            "id": 36282035,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjgyMDM1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/36282035/reactions"
            },
            "updated_at": "2014-02-27T19:39:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/36282035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
                "events_url": "https://api.github.com/users/ghost/events{/privacy}",
                "followers_url": "https://api.github.com/users/ghost/followers",
                "following_url": "https://api.github.com/users/ghost/following{/other_user}",
                "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ghost",
                "id": 10137,
                "login": "ghost",
                "node_id": "MDQ6VXNlcjEwMTM3",
                "organizations_url": "https://api.github.com/users/ghost/orgs",
                "received_events_url": "https://api.github.com/users/ghost/received_events",
                "repos_url": "https://api.github.com/users/ghost/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ghost",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Wont this be automatically fixed by reimplementing vimscript on top of lua?\n",
            "created_at": "2014-04-04T20:45:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-39609416",
            "id": 39609416,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjA5NDE2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39609416/reactions"
            },
            "updated_at": "2014-04-04T20:45:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39609416",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tarruda\n1. Lua does not have Unicode support.\n2. If it will get “fixed” I will have to make it unfixed back for the reasons explained in previous messages.\n",
            "created_at": "2014-04-04T21:26:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-39613372",
            "id": 39613372,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjEzMzcy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39613372/reactions"
            },
            "updated_at": "2014-04-04T21:27:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39613372",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Lua does not have Unicode support.\n\nWe can easily represent unicode with UTF-8  and walk the string when a certain index is accessed. Besides, aren't vimscript strings already stored as plain unsigned 8-bit integers? If so how can lua lack of unicode support be an issue? \n\n> What to use in protocol used for IPC. Amount of overhead depends specifically library that implements encoding/decoding: it seems that things like system() and :! will be handled on neovim plugin side since they are implementing all scripting engines and when doing I/O in the core I/O is the bottleneck, not unescaping.\n\nWe'll send strings using UTF-8 and system/! will be handled in the same way(though we'll be using pipes more than temporary files). `mch_call_shell` is being reimplemented in #444\n\n> VimL scripting engine: since it is going to be translated to lua it will probably use whatever lua uses to handle strings.\n\nYou said it yourself, so what is the issue exactly?\n",
            "created_at": "2014-04-04T21:42:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-39614625",
            "id": 39614625,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjE0NjI1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39614625/reactions"
            },
            "updated_at": "2014-04-04T21:42:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39614625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> We can easily represent unicode with UTF-8 and walk the string when a certain index is accessed. Besides, aren't vimscript strings already stored as plain unsigned 8-bit integers? If so how can lua lack of unicode support be an issue? \n\nI did not say it is an issue. But it means that translating VimL to lua will not fix anything regarding Unicode support.\n\n> You said it yourself, so what is the issue exactly?\n\nI must repeat this question to you. _I_ did not say there are any issues.\n",
            "created_at": "2014-04-04T21:46:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-39614963",
            "id": 39614963,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjE0OTYz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39614963/reactions"
            },
            "updated_at": "2014-04-04T21:46:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39614963",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> We can easily represent unicode with UTF-8 and walk the string when a certain index is accessed.\n\nThis must not be done for the reasons explained. Though I will have to use `vim.index` as indexing function and not lua `string.sub` (though `vim.index` will probably call `string.sub`) because I do not know the type at the translation stage.\n",
            "created_at": "2014-04-04T21:49:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-39615189",
            "id": 39615189,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjE1MTg5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39615189/reactions"
            },
            "updated_at": "2014-04-04T21:49:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39615189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Sorry, in the first comment (https://github.com/neovim/neovim/issues/74#issuecomment-39613372) I have mistaken this issue with #68. This means that complaint about absence of Unicode support in  lua is not valid, zero byte handling will get fixed, but for compatibility reasons it will have to be unfixed as well.\n",
            "created_at": "2014-04-04T22:19:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-39617273",
            "id": 39617273,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjE3Mjcz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39617273/reactions"
            },
            "updated_at": "2014-04-04T22:19:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39617273",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No problem, Since you already took the task for yourself I'm sure you will figure out whats the best approach. Closing for now but we can revisit this later.\n",
            "created_at": "2014-04-04T23:25:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-39621007",
            "id": 39621007,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjIxMDA3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39621007/reactions"
            },
            "updated_at": "2014-04-04T23:25:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39621007",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> As for the lack of multibyte support, it's only broken if you say that strings should only contain characters. I think it's useful to have 8-bit clean strings for working with arbitrary data(especially with the new job control feature). The fact that strings can't have 0 bytes(as explained by @ZyX-I in #74) is currently stopping us from working with binary data, but that will probably change after vimscript runs on top of lua.\n\n@tarruda Missed this reply. Replying here since that issue is irrelevant.\n\nStrings that are unable to hold zero bytes are stopping us from working with binary data no more then strings unable to have non-unicode data are stopping JavaScript developers from writing hacks to still work with it.\n\nAt the moment Vim has not nice but working NL-used-for-Nul, next-list-item-for-NL representation. There were major problems with _sources_ of binary data and _ways to pass_ it anywhere (and less (in comparison) major with the fact that this representation seems hacky, but not so as hacky as if we were accepting only valid UTF-8), but that got fixed:\n\n| Binary data source | Retrieved with | Set with | Works since |\n| --- | --- | --- | --- |\n| Buffer | getline() | setline() | Unknown |\n|  | :e | :w | Unknown |\n|  |  | :*!, :read! | No, this does not work |\n|  | submatch() | :s | 7.4.241 |\n|  | (interface) | (interface) | Unknown |\n| Register | getreg() | setreg() | 7.4.242 |\n|  | paste | yank | Unknown |\n| External command | systemlist() | system*() | 7.4.248, 7.4.247 |\n|  | :!, :read! | :*!, :?w ! | No, this does not work |\n| File | readfile() | writefile() | Unknown |\n| Non-VimL script | (interface) | (interface) | Unknown |\n\nAs you see easily scriptable ways were a major problem (basically you were left with `:e` variants with `getline()` and `readfile()`/`writefile()` or language-specific interfaces), but it was recently fixed. (Note about `:!`/`:read!`/etc: if you want to pass really binary data here you must somehow convince vim you do not want to be “smart” about newlines. I do not know any way to do this, except for some rare cases with `:w !` and `set binary noendofline` which work only for writing to external utility (while I was needing reading).)\n\nBasically you may work with binary data if you can retrieve it, modify it and send it exactly in a format you wanted: this part fully works now. The only concern left that was discussed here is whether representation should be different in neovim or not. This is far less major compared to a concern “how do we get/pass binary data without f*cking vim ever screwing it up”.\n",
            "created_at": "2014-06-10T19:51:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-45662846",
            "id": 45662846,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjYyODQ2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45662846/reactions"
            },
            "updated_at": "2014-06-10T19:51:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45662846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Whenever I go looking at the upstream patches, I always look at the oldest ones neovim lacks. Aside from adding Smack support, that would be 242, 243, 247, 248, all of which relate to NUL handling. From this discussion, I can't tell whether we need them or have some alternate solution in the works.\n",
            "created_at": "2014-09-02T20:27:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-54212388",
            "id": 54212388,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0MjEyMzg4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/54212388/reactions"
            },
            "updated_at": "2014-09-02T20:28:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/54212388",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@splinterofchaos We definitely need those patches, although eval.c changes will eventually get replaced by the VimL => Lua translator.\n",
            "created_at": "2014-09-02T20:43:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-54214688",
            "id": 54214688,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0MjE0Njg4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/54214688/reactions"
            },
            "updated_at": "2014-09-02T20:43:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/54214688",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ZyX-I @tarruda If binary data is sent over msgpack API, plugins can work with it without any intermediate `NUL` => `NL` hack, as long as vimscript and Nvim itself is not involved. Right?\n\nThis is another reason why non-autocmd API events would be valuable--plugins could bypass VimL \"typeval\" conversion.\n",
            "created_at": "2015-08-20T04:58:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-132890580",
            "id": 132890580,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjg5MDU4MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/132890580/reactions"
            },
            "updated_at": "2015-08-20T04:59:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/132890580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @ZyX-I @tarruda If binary data is sent over msgpack API, plugins can work with it without any intermediate NUL => NL hack, as long as vimscript and Nvim itself is not involved. Right?\n\nYes, msgpack can deal with binary data just fine\n\n> This is another reason why non-autocmd API events would be valuable--plugins could bypass VimL \"typeval\" conversion.\n\nI don't see how skipping the autocmd API would help. What could be done to skip the `NL` => `NUL` conversion by plugins is add a flag to `vim_to_object` that takes care of converting the \"line list format\" to binary strings before sending via msgpack-rpc. To make things a bit cleaner, this flag could also be added to `rpcnotify`/`rpcrequest` and used when a plugin explicitly needs to send binary data(since most times we will be dealing with plain text)\n",
            "created_at": "2015-08-20T10:40:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-132969193",
            "id": 132969193,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjk2OTE5Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/132969193/reactions"
            },
            "updated_at": "2015-08-20T10:40:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/132969193",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I implemented xdebug long time ago:\nhttps://github.com/MarcWeber/vim-addon-xdebug\nIt's based on vim-addon-async which encodes 'a\\0b' as  ['a','b'].\nBut I don't like it.\nNow if I want to upgrade my code I can't use jobstart beacuse stdout won't\nreturn 0 bytes or don't know what will happen but xdebug uses it as\nseparator.\nSo could rewrite parts or all using lua or vim.loop.spawn or libuv or\nsuch.\nBut honestly I'd love to see hacks to be gone also because Vims regex\nenginen is much nicer than lua's. So calling a vim function from lua\nactually sometimes makes sense :-) And PHP shows that if strings are\nbinary you at least can handle all types of data and be done.\nYes, maybe its time to switch to https://github.com/helix-editor/helix/discussions/7574 vscode-php-debug or such.",
            "created_at": "2025-05-23T21:17:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-2905841189",
            "id": 2905841189,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "IC_kwDOAPphoM6tM54l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2905841189/reactions"
            },
            "updated_at": "2025-05-23T21:18:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2905841189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/34086?v=4",
                "events_url": "https://api.github.com/users/MarcWeber/events{/privacy}",
                "followers_url": "https://api.github.com/users/MarcWeber/followers",
                "following_url": "https://api.github.com/users/MarcWeber/following{/other_user}",
                "gists_url": "https://api.github.com/users/MarcWeber/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MarcWeber",
                "id": 34086,
                "login": "MarcWeber",
                "node_id": "MDQ6VXNlcjM0MDg2",
                "organizations_url": "https://api.github.com/users/MarcWeber/orgs",
                "received_events_url": "https://api.github.com/users/MarcWeber/received_events",
                "repos_url": "https://api.github.com/users/MarcWeber/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MarcWeber/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MarcWeber/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MarcWeber",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@MarcWeber  Lua strings support NUL bytes, as does the Nvim RPC API. No hacks needed there. Also Vimscript has \"blob\" now.",
            "created_at": "2025-05-26T16:14:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/74#issuecomment-2910200692",
            "id": 2910200692,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/74",
            "node_id": "IC_kwDOAPphoM6tdiN0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2910200692/reactions"
            },
            "updated_at": "2025-05-26T16:14:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2910200692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 18,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/74/comments",
    "created_at": "2014-02-23T13:05:33Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/74/events",
    "html_url": "https://github.com/neovim/neovim/issues/74",
    "id": 28118210,
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "discussion has run its course, need decision how to proceed",
            "id": 83851236,
            "name": "needs:decision",
            "node_id": "MDU6TGFiZWw4Mzg1MTIzNg==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:decision"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 197254545,
            "name": "tui",
            "node_id": "MDU6TGFiZWwxOTcyNTQ1NDU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/tui"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/74/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUyODExODIxMA==",
    "number": 74,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/74/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/74/timeline",
    "title": "Zero byte in strings",
    "type": null,
    "updated_at": "2025-05-26T16:14:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/74",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
        "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
        "followers_url": "https://api.github.com/users/ZyX-I/followers",
        "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ZyX-I",
        "id": 322097,
        "login": "ZyX-I",
        "node_id": "MDQ6VXNlcjMyMjA5Nw==",
        "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
        "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
        "repos_url": "https://api.github.com/users/ZyX-I/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ZyX-I",
        "user_view_type": "public"
    }
}