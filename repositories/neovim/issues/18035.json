{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "\r\n\r\n### Feature description\r\n\r\nIt would be really helpful to allow getting actual Lua function from RPC call to another Neovim process. Currently, this gives an error `E5108: Error executing lua Cannot convert given lua type`. I don't think that it is possible to full extent, but it seems to be doable for some simple cases with `string.dump` and `loadstring`.\r\n\r\nDetails:\r\n- Create Neovim server: `nvim --clean --listen /tmp/nvim.pipe`.\r\n- Create Neovim client: `nvim`.\r\n- In Neovim client run:\r\n    - `:lua channel = vim.fn.sockconnect('pipe', '/tmp/nvim.pipe', { rpc = true })`\r\n    - Try running `:lua f = vim.rpcrequest(channel, 'nvim_exec_lua', 'return function() print(\"New function\") end', {})`. It gives `E5108` error.\r\n    - `:lua f_dump = vim.rpcrequest(channel, 'nvim_exec_lua', 'return string.dump(function() print(\"New function\") end)', {})`.\r\n    - `:lua f = loadstring(f_dump); f()`. Should print `New function`.",
    "closed_at": null,
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Would this be same thing as passing `callback = function(ev) .... end` to `nvim_create_autocmd` over rpc?",
            "created_at": "2024-04-19T19:18:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2067155877",
            "id": 2067155877,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM57Nkul",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2067155877/reactions"
            },
            "updated_at": "2024-04-19T19:18:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2067155877",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4594126?v=4",
                "events_url": "https://api.github.com/users/vhakulinen/events{/privacy}",
                "followers_url": "https://api.github.com/users/vhakulinen/followers",
                "following_url": "https://api.github.com/users/vhakulinen/following{/other_user}",
                "gists_url": "https://api.github.com/users/vhakulinen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vhakulinen",
                "id": 4594126,
                "login": "vhakulinen",
                "node_id": "MDQ6VXNlcjQ1OTQxMjY=",
                "organizations_url": "https://api.github.com/users/vhakulinen/orgs",
                "received_events_url": "https://api.github.com/users/vhakulinen/received_events",
                "repos_url": "https://api.github.com/users/vhakulinen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vhakulinen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vhakulinen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vhakulinen",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> it seems to be doable for some simple cases with `string.dump` and `loadstring`\r\n\r\nAnother way to frame this is \"I want to to serialize functions\". We could offer a `serialize()` util, or `vim.mpack.encode()` could accept functions, etc. That may be less surprising than trying to implicitly support this for any RPC parameter. And it's a required first step in any case.\r\n\r\nNote that the inverse of this request is \"I want to exchange Nvim state between Nvim peers\". Then the peer can operate on the state and return a result. This is what `:help context` was intended for, though it is not fully formed.",
            "created_at": "2024-04-19T22:35:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2067359361",
            "id": 2067359361,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM57OWaB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2067359361/reactions"
            },
            "updated_at": "2024-04-19T22:36:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2067359361",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Would be nice if that `serialize` could also accept directories, so a rpc client could provide complete set of runtime files (including docs).",
            "created_at": "2024-04-20T11:43:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2067648525",
            "id": 2067648525,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM57PdAN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2067648525/reactions"
            },
            "updated_at": "2024-04-20T11:43:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2067648525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4594126?v=4",
                "events_url": "https://api.github.com/users/vhakulinen/events{/privacy}",
                "followers_url": "https://api.github.com/users/vhakulinen/followers",
                "following_url": "https://api.github.com/users/vhakulinen/following{/other_user}",
                "gists_url": "https://api.github.com/users/vhakulinen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vhakulinen",
                "id": 4594126,
                "login": "vhakulinen",
                "node_id": "MDQ6VXNlcjQ1OTQxMjY=",
                "organizations_url": "https://api.github.com/users/vhakulinen/orgs",
                "received_events_url": "https://api.github.com/users/vhakulinen/received_events",
                "repos_url": "https://api.github.com/users/vhakulinen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vhakulinen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vhakulinen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vhakulinen",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Would be nice if that `serialize` could also accept directories, so a rpc client could provide complete set of runtime files (including docs).\r\n\r\n\r\n\r\nThat essentially is the `:help context` concept mentioned above.",
            "created_at": "2024-04-20T11:55:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2067650944",
            "id": 2067650944,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM57PdmA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2067650944/reactions"
            },
            "updated_at": "2024-04-20T11:55:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2067650944",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `:lua f = vim.rpcrequest(channel, 'nvim_exec_lua', 'return function() print(\"New function\") end', {})`\r\n\r\nThis is implemented now in our test runner thanks to @lewis6991 : https://github.com/neovim/neovim/blob/20251be15a4ad3f6e7016450ca3338d52b2f0951/test/functional/testnvim.lua#L918-L938\r\n\r\nI suppose we could add direct support for this to `nvim_exec_lua`. That would be a \"widening\" type change to its parameters, which is not technically allowed by `:help api-contract` but we could consider relaxing it, especially since this is only for non-remote calls to `nvim_exec_lua`.",
            "created_at": "2024-09-30T11:45:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2382960521",
            "id": 2382960521,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6OCReJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2382960521/reactions"
            },
            "updated_at": "2024-09-30T11:45:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2382960521",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think there are too many edge cases to consider for an API function. I don't see why users can't (de)serialize the objects themselves with `string.dump` and optionally paired with `vim.mpack` or `require('string.buffer')`.\r\n\r\nAlso note this all also applies to Lua threads spawned with `vim.uv.new_work()` which doesn't even support `table`.\r\n\r\nI think we should reject this ticket as solutions already exist that shouldn't be generalized.",
            "created_at": "2024-09-30T11:52:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2382974874",
            "id": 2382974874,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6OCU-a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2382974874/reactions"
            },
            "updated_at": "2024-09-30T11:58:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2382974874",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I don't see why users can't (de)serialize the objects themselves with `string.dump` and optionally paired with `vim.mpack` or `require('string.buffer')`.\r\n\r\nThe upvalues save/restore functionality that you did, seems tricky. Not possible/valuable to generalize that?",
            "created_at": "2024-09-30T14:05:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2383309857",
            "id": 2383309857,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6ODmwh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383309857/reactions"
            },
            "updated_at": "2024-09-30T14:05:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383309857",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think so, as it uses the `debug` module which should be used thoughtfully. For internal code use for testing, it's a good tool, but I don't think it should be relied on for anything in production code.\r\n\r\nFrom https://www.lua.org/pil/23.html:\r\n\r\n> Unlike the other libraries, you should use the debug library with parsimony. First, some of its functionality is not exactly famous for performance. Second, it breaks some sacred truths of the language, such as that you cannot access a local variable from outside the function that created it.\r\n\r\nThe complexity here is high, so there should be some concrete usecases. Even then I'd defer to users to implement this themselves as each usecase will have its own nuances/requirements and may have better alternative solutions.\r\n\r\nI don't know for certain, but I'm pretty sure the usecase for the OP is: https://github.com/echasnovski/mini.test",
            "created_at": "2024-09-30T14:28:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2383371132",
            "id": 2383371132,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6OD1t8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383371132/reactions"
            },
            "updated_at": "2024-09-30T14:28:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383371132",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I don't know for certain, but I'm pretty sure the usecase for the OP is: https://github.com/echasnovski/mini.test\r\n\r\nYes, 'mini.test' was the driver to create this issue. Not being able to pass any functions through RPC introduces some annoying hurdles there.\r\n\r\nFor example, passing a table which contains even a single function (however deep) is impossible and requires precise modification on the server (i.e. tested child process) each time.\r\n\r\nSo my main use case, in principle, is that presence of Lua function(s) in RPC response does not affect the status of response. Dumping and then reconstructing a function seems to be a low hanging approach of handling that.\r\n\r\nAre there any fundamental problems to implementing `string.dump` + `loadstring` *together with* adding \"If return value contains function, it is serialized via `string.dump` on the server side and reconstructed with `loadstring` on the client side. Rely on this with caution.\" [here](https://github.com/neovim/neovim/blob/2c88cfcac42d0a4e0b1a1396539b5add807c336c/runtime/doc/api.txt#L736)? ",
            "created_at": "2024-09-30T14:45:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2383414844",
            "id": 2383414844,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6OEAY8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383414844/reactions"
            },
            "updated_at": "2024-09-30T14:45:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383414844",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Are there any fundamental problems to implementing string.dump + loadstring together with adding \"If return value contains function, it is serialized via string.dump on the server side and reconstructed with loadstring on the client side. \r\n\r\nIt's _possible_, but something that can be done by the user. It's not apparent that the tradeoff in complexity is worth it.\r\n\r\n> Dumping and then reconstructing a function seems to be a low hanging approach of handling that.\r\n\r\nHow so?",
            "created_at": "2024-09-30T14:48:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2383423159",
            "id": 2383423159,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6OECa3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383423159/reactions"
            },
            "updated_at": "2025-02-03T00:05:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383423159",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Dumping and then reconstructing a function seems to be a low hanging approach of handling that.\r\n> \r\n> How so?\r\n\r\n\"How so?\" what? If having functions in the RPC request output is impossible to do in automated fashion to any degree, then this should have been closed two years ago. If it is possible, then \"low hanging approach of handling that\" was meant as opposed to \"fully preserve a function with all its upvalues as much as possible\".\r\n\r\nI assumed that this is possible to do automatically at least to some degree as most other types *can* be returned from the server and are properly reconstructed on the client side.\r\n\r\n------\r\n\r\n> I suppose we could add direct support for this to `nvim_exec_lua`. That would be a \"widening\" type change to its parameters, which is not technically allowed by `:help api-contract` but we could consider relaxing it, especially since this is only for non-remote calls to `nvim_exec_lua`.\r\n\r\n@justinmk, as far as I understand, the current Neovim's test runner allows function *input*. Although it would be nice to have, the core of the issue (and what example shows) is the opposite: allowing functions in the *output* of the RPC request. As it is the main pain point when working with child process.",
            "created_at": "2024-09-30T15:09:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2383481492",
            "id": 2383481492,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6OEQqU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383481492/reactions"
            },
            "updated_at": "2025-02-03T00:06:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383481492",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If it is possible, then \"low hanging approach of handling that\" was meant as opposed to \"fully preserve a function with all its upvalues as much as possible\".\r\n\r\nEven the former isn't \"low hanging fruit\" since it involves creating a new api-type and serializing it, and thus requires changes to low level C code, in addition to special-casing `nvim_exec_lua` just for this. Any form of this seems complicated to me. And then you are still left with a bunch of edge cases anyway.\r\n\r\nI think a much easier solution would be to use `require('string.buffer')` which comes with a fairly comprehensive (de-)serializer for Lua(JIT) (see http://luajit.org/ext_buffer.html) which supports much more than the api-types, including meta-tables I believe. It will be much more performant too since it re-uses references.",
            "created_at": "2024-09-30T15:55:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2383585940",
            "id": 2383585940,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6OEqKU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383585940/reactions"
            },
            "updated_at": "2024-09-30T15:55:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383585940",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> For example, passing a table which contains even a single function (however deep) is impossible and requires precise modification on the server (i.e. tested child process) each time.\r\n\r\nOh, this is more in the weeds. If you only want to avoid serialization bothering you about functions you don't care about, we can and should certainly enhance the stdlib to make it easy to \"clean\" a nested table easily.\r\n\r\nBut doing that implicitly in the RPC/serialiation layer isn't going to help much. Roundtripping would have its own surprises, which *then* still need to be handled explicitly (by the above-mentioned `vim.tbl_map` or other \"tree processing\" improvements).",
            "created_at": "2024-09-30T16:28:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2383661015",
            "id": 2383661015,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6OE8fX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383661015/reactions"
            },
            "updated_at": "2024-09-30T16:28:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383661015",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think a much easier solution would be to use `require('string.buffer')` which comes with a fairly comprehensive (de-)serializer for Lua(JIT) (see http://luajit.org/ext_buffer.html) which supports much more than the api-types, including meta-tables I believe. It will be much more performant too since it re-uses references.\r\n\r\nIt doesn't look like working: `require('string.buffer').encode(function() end)` throws an error `cannot serialize 'function'`.\r\n\r\nWhich is not surprising. According to the docs: \"Functions, thread objects, other FFI cdata and full userdata cannot be serialized (yet). \".",
            "created_at": "2024-09-30T17:10:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2383742955",
            "id": 2383742955,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6OFQfr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383742955/reactions"
            },
            "updated_at": "2024-09-30T17:11:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383742955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ah I misread this.\n\nWell if LuaJITs built in serializer doesn't support functions, I don't see how we have any business in trying in regards to a generalized interface.\n\n`string.dump` and `loadstring` are fine for targeted applications.",
            "created_at": "2024-09-30T18:00:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2383841562",
            "id": 2383841562,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6OFoka",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383841562/reactions"
            },
            "updated_at": "2024-09-30T18:00:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2383841562",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Interesting project ([discussion](https://news.ycombinator.com/item?id=42886079)): [ldump](https://github.com/girvel/ldump) can \"serialize any Lua data\".\n\n> function closures (bytecode, including upvalues[1]), complex graphs, sets with tables as keys and also fundamentally non-serializable data (coroutines and userdata), that require user-defined serialization/deserialization logic.\n\n> preserves debug metadata, so stack traces involving serialized/deserialized functions look right, and still show the original source file.\n\n[1] also edge cases such as \"_ENV\" and joined upvalues (multiple functions referencing one upvalue)\n",
            "created_at": "2025-02-03T00:05:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/18035#issuecomment-2629635804",
            "id": 2629635804,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18035",
            "node_id": "IC_kwDOAPphoM6cvQ7c",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629635804/reactions"
            },
            "updated_at": "2025-02-03T00:05:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629635804",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 16,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/18035/comments",
    "created_at": "2022-04-08T07:37:33Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/18035/events",
    "html_url": "https://github.com/neovim/neovim/issues/18035",
    "id": 1196955278,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "channels, RPC, msgpack",
            "id": 242522707,
            "name": "channels-rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/channels-rpc"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "",
            "id": 606691254,
            "name": "has:plan",
            "node_id": "MDU6TGFiZWw2MDY2OTEyNTQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:plan"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/18035/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 303,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-02-03T09:10:02Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM5HWBaO",
    "number": 18035,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/18035/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": "reopened",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/18035/timeline",
    "title": "pass Lua functions through RPC",
    "updated_at": "2025-02-03T00:06:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/18035",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}