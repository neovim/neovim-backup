{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\nThe current macro replay mechanism doesn’t work at all with events.\r\n\r\nFor a simple example see the plugin [better-escape.nvim](https://github.com/max397574/better-escape.nvim) that “maps” `jk` to `<esc>` using autocmds and [timers](https://github.com/max397574/better-escape.nvim/blob/7031dc734add47bb71c010e0551829fa5799375f/lua/better_escape.lua#L56) instead of classic mappings. \r\n \r\nWhen using `jk` in a macro, the replay kinda breaks and instead it inserts `jk` and the remaining commands into the buffer. max397574/better-escape.nvim#21\r\n\r\n\r\n### Expected behavior\r\n\r\nReplay should *truly* mirror the actions that have happened when recording.\r\nIf the final fix somehow breaks too much compatibility, then it could be added as a new bool option or new operator.\r\n# Proposed mechanism\r\n\r\n1. The event loop should run after each executed key read from the replayed sequence:\r\n    1. This should emulate how `state.c` loop iterates when keys are typed by the user. There is a small delay when the user types keys, and events are processed between each key stroke, this should also happen when replaying macros. We don’t need the time delay for replaying, the `state.c` loop just needs to alternate every other iteration between key and event processing.\r\n2. Keys should be fed one at a time to the typebuffer, instead of the current replay mechanism where the entire register to be replayed is stuffed into the typebuffer, which has the undesired effect that:\r\n    1. Events will be processed only after the macro sequence is replayed since (I believe) `K_EVENT` will be appended to the end of typebuffer.\r\n    2. Calls to `nvim_feedkeys` will not be processed correctly.\r\n    Take for example how better-escape.nvim works. It calls [`feed(”<bs><bs>”)`](https://github.com/max397574/better-escape.nvim/blob/7031dc734add47bb71c010e0551829fa5799375f/lua/better_escape.lua#L68) to delete the “mapped” chars (usually `jk`) and [`feed(”<esc>”)`](https://github.com/max397574/better-escape.nvim/blob/7031dc734add47bb71c010e0551829fa5799375f/lua/better_escape.lua#L69) to exit insert mode. These keys will be appended to the typebuffer.\r\n    For the input sequence `ijkijkhhh`, nvim enters and exists insert mode 2 times and moves the cursor left, the recording register looks the same: `ijkijkhhh`. \r\n    When the user types the keys in real time, the typebuffer will look like `ijk<bs><bs><esc>ijk<bs><bs><esc>hhh`. \r\n    When the keys are replayed using the current mechanism, the typebuffer will look like `ijkijkhhh<bs><bs><esc>`, with the letters `jkijkh` being written in the buffer.\r\n\r\n## Proof implementation\r\n\r\nHere is a [proof of concept implementation](https://github.com/BaraTudor2025/neovim/commit/ca71cf86621dcb87e47c7c64ba0cc56dec1ad69b) that seems to \"just work\" for the better-escape test case\r\n\r\n- The register to be replayed is stuffed into a replay buffer that is then read into the typebuffer one key at a time.\r\n- When the typebuffer is empty, schedule on the event-loop to add one key from the replay buffer (I tried different approaches, but only scheduling worked for me. Another idea would be to add an `K_EVENT` key to the typebuffer, but I didn’t manage to make it work)\r\n\r\nI used this when running manual tests\r\n\r\n```lua\r\nrequire(\"better_escape\").setup()\r\nvim.fn.setreg(\"q\", \"ijkijkhhh\")\r\nvim.keymap.set(\"n\", \"Q\", \"@q\")\r\n```\r\n\r\nThe C implementation is somewhat inspired from the following lua snippet that also seems to work with better-escape:\r\n\r\n```lua\r\nlocal plenary = require \"plenary.async\"\r\n \r\nfunction replay_macro_async(reg, delay_ms)\r\n  if reg == \"\" then\r\n    return\r\n  end\r\n  local keys = vim.fn.getreg(reg)\r\n  local delay = delay_ms or 50\r\n  local run = plenary.void(function()\r\n    local i = 1\r\n    while i <= #keys do\r\n      plenary.util.sleep(delay)\r\n      plenary.util.scheduler()\r\n      if keys:byte(i) == 0x80 then -- k_special bytes\r\n        local seq = keys:sub(i, i + 2)\r\n        vim.api.nvim_feedkeys(seq, \"\", false)\r\n        i = i + 3\r\n      else -- doesn't handle unicode, probably should\r\n        vim.api.nvim_feedkeys(keys:sub(i,i), \"\", false)\r\n        i = i + 1\r\n      end\r\n    end\r\n  end)\r\n  run()\r\nend\r\n\r\nvim.keymap.set(\"n\", \"Q\", function() replay_macro_async(vim.fn.reg_recorded(), 50) end)\r\n```\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Note: [this implementation](https://github.com/BaraTudor2025/neovim/commit/ca71cf86621dcb87e47c7c64ba0cc56dec1ad69b) appears to randomly break macro tests, including the ones in langmap.\r\n\r\nWhen running tests, the macro forgets the last two letters, event though the macro runs fine when I test it manually.\r\n\r\n```jsx\r\nFAILED   2 tests, listed below:\r\nFAILED   test/functional/editor/macro_spec.lua @ 17: macros can be recorded and replayed\r\ntest/functional/editor/macro_spec.lua:22: Expected objects to be the same.\r\nPassed in:\r\n(string) 'hellohel'\r\nExpected:\r\n(string) 'hellohello'\r\n\r\nstack traceback:\r\n        test/functional/editor/macro_spec.lua:22: in function <test/functional/editor/macro_spec.lua:17>\r\n\r\nFAILED   test/functional/editor/macro_spec.lua @ 36: macros can be replayed with Q\r\ntest/functional/editor/macro_spec.lua:46: Expected objects to be the same.\r\nPassed in:\r\n(table: 0x7ff0e6ee83f8) {\r\n *[1] = 'helloFOOF'\r\n  [2] = 'hello'\r\n  [3] = 'hello' }\r\nExpected:\r\n(table: 0x7ff0e6ee7db8) {\r\n *[1] = 'helloFOOFOO'\r\n  [2] = 'hello'\r\n  [3] = 'hello' }\r\n\r\nstack traceback:\r\n        test/functional/editor/macro_spec.lua:46: in function <test/functional/editor/macro_spec.lua:36>\r\n```",
            "created_at": "2023-12-11T20:54:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/26522#issuecomment-1850872335",
            "id": 1850872335,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26522",
            "node_id": "IC_kwDOAPphoM5uUhIP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1850872335/reactions"
            },
            "updated_at": "2023-12-11T20:55:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1850872335",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20646330?v=4",
                "events_url": "https://api.github.com/users/BaraTudor2025/events{/privacy}",
                "followers_url": "https://api.github.com/users/BaraTudor2025/followers",
                "following_url": "https://api.github.com/users/BaraTudor2025/following{/other_user}",
                "gists_url": "https://api.github.com/users/BaraTudor2025/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BaraTudor2025",
                "id": 20646330,
                "login": "BaraTudor2025",
                "node_id": "MDQ6VXNlcjIwNjQ2MzMw",
                "organizations_url": "https://api.github.com/users/BaraTudor2025/orgs",
                "received_events_url": "https://api.github.com/users/BaraTudor2025/received_events",
                "repos_url": "https://api.github.com/users/BaraTudor2025/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BaraTudor2025/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BaraTudor2025/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BaraTudor2025",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26522/comments",
    "created_at": "2023-12-11T20:52:57Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/26522/events",
    "html_url": "https://github.com/neovim/neovim/issues/26522",
    "id": 2036507626,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 520282574,
            "name": "event-loop",
            "node_id": "MDU6TGFiZWw1MjAyODI1NzQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/event-loop"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 6213616771,
            "name": "macros",
            "node_id": "LA_kwDOAPphoM8AAAABclxEgw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/macros"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/26522/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM55YqPq",
    "number": 26522,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/26522/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/26522/timeline",
    "title": "Async macros or make macros work with events",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:59:50Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/26522",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/20646330?v=4",
        "events_url": "https://api.github.com/users/BaraTudor2025/events{/privacy}",
        "followers_url": "https://api.github.com/users/BaraTudor2025/followers",
        "following_url": "https://api.github.com/users/BaraTudor2025/following{/other_user}",
        "gists_url": "https://api.github.com/users/BaraTudor2025/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/BaraTudor2025",
        "id": 20646330,
        "login": "BaraTudor2025",
        "node_id": "MDQ6VXNlcjIwNjQ2MzMw",
        "organizations_url": "https://api.github.com/users/BaraTudor2025/orgs",
        "received_events_url": "https://api.github.com/users/BaraTudor2025/received_events",
        "repos_url": "https://api.github.com/users/BaraTudor2025/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/BaraTudor2025/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BaraTudor2025/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/BaraTudor2025",
        "user_view_type": "public"
    }
}