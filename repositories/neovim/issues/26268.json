{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\nCurrently, there's no luv _meta file for LSP annotations, and the most used lua LSP is planning to [drop the builtin luv meta file](https://github.com/LuaLS/lua-language-server/discussions/1950), which would require users to download a separate luv meta library.\r\n\r\n### Expected behavior\r\n\r\nHave the luv meta-file library built in.\r\n### Downside\r\nAdding a large meta library such as luv to the meta files would increase LSP load times.",
    "closed_at": "2025-04-10T12:56:20Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/107814000?v=4",
        "events_url": "https://api.github.com/users/altermo/events{/privacy}",
        "followers_url": "https://api.github.com/users/altermo/followers",
        "following_url": "https://api.github.com/users/altermo/following{/other_user}",
        "gists_url": "https://api.github.com/users/altermo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/altermo",
        "id": 107814000,
        "login": "altermo",
        "node_id": "U_kgDOBm0ccA",
        "organizations_url": "https://api.github.com/users/altermo/orgs",
        "received_events_url": "https://api.github.com/users/altermo/received_events",
        "repos_url": "https://api.github.com/users/altermo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/altermo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/altermo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/altermo",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks for raising this.\r\n\r\n> With the VS Code addon manager releasing soon, we have decided to remove the built-in libraries that ship with the language server\r\n\r\nSigh.\r\n\r\n > I am currently investigating how we can make using and sharing definitions files even easier. Ideally, the language server will be able to install and manage addons defined in a setting by simply providing the git clone URLs. This would hopefully be cross-platform and super easy for all users.\r\n\r\nHopefully this will be implemented, then users (or nvim-lspconfig) can point to the metafile URL. Unless this requires vscode?",
            "created_at": "2023-11-28T09:53:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1829467895",
            "id": 1829467895,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5tC3b3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1829467895/reactions"
            },
            "updated_at": "2023-11-28T09:53:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1829467895",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Unless this requires vscode?\r\n\r\nYes.",
            "created_at": "2023-11-28T10:04:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1829488502",
            "id": 1829488502,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5tC8d2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1829488502/reactions"
            },
            "updated_at": "2023-11-28T10:04:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1829488502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm vaguely in favor of this, since `luv` is our main dependency and core infrastructure. It would also tie in to autogenerating `luvref.txt` -- maybe luvit themselves would be open to maintaining their own `_meta` file? I certainly don't think it's reasonable for us to maintain our own `_meta_` file.\r\n\r\n(Other directly exposed dependencies like `lpeg` and `msgpack` have diminishing returns.)",
            "created_at": "2023-11-28T10:06:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1829492383",
            "id": 1829492383,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5tC9af",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1829492383/reactions"
            },
            "updated_at": "2023-11-28T10:36:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1829492383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Even if the \"VS Code addon manager\" doesn't help us, it seems like the metafiles will be maintained by LuaLS and available via some URL, which we could then consume via `bump_deps.lua` (automated vendoring) or a user command (so we don't need to vendor).",
            "created_at": "2023-11-28T10:24:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1829524777",
            "id": 1829524777,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5tDFUp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1829524777/reactions"
            },
            "updated_at": "2023-11-28T10:25:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1829524777",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is still an unfinished thread in my lua type annotations crusade: https://github.com/luvit/luv/issues/632",
            "created_at": "2023-11-29T21:39:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1832741498",
            "id": 1832741498,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5tPWp6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1832741498/reactions"
            },
            "updated_at": "2023-11-29T21:39:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1832741498",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "https://github.com/Bilal2453/luvit-meta\r\n\r\n(in particular https://github.com/Bilal2453/luvit-meta/blob/main/library/uv.lua)",
            "created_at": "2023-12-17T11:22:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1859143303",
            "id": 1859143303,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5u0EaH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1859143303/reactions"
            },
            "updated_at": "2023-12-17T11:23:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1859143303",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "First of all, this has less thing to do with lsp but is all about documentation and automation, so the title could be changed as `docs:` instead of `LSP:`.\r\n\r\nI am investigating how we can include luv (`vim.uv`) meta files, and also generate or maintain vimdoc `luvref.txt`. As already discussed earlier in this issue, this is quite a complex one until luvit/luv#632 is resolved. I raise several discussion points as follows.\r\n\r\n## What would be the gold (upstream) \"source\" for libuv documentation that neovim can pull?\r\n\r\nWe have two choices.\r\n\r\n(1) https://github.com/luvit/luv/blob/master/docs.md is the docs maintained and kept up-to-date with the actual libuv implementation.\r\n  - Pros: This doc is supposed to be always up-to-date with the actual libuv implementation, so the docs and the library will remain synchronized and compatible with each other.\r\n  - Problem: it's not machine-readable (see luvit/luv#632).\r\n  - Possible solution: Manual processing/edit is needed. Essentially the same (duplicate) efforts as in (2) done on the neovim side.\r\n  - Possible solution: Or we can write a scripted generator, but this would be of too much work and maintenance burden (lots of corner cases will bother us).\r\n\r\n(2) https://github.com/Bilal2453/luvit-meta (maintained by @Bilal2453)\r\n  - Pros: Already working solution for Lua-LS. [@folke's neodev](https://github.com/folke/neodev.nvim/blob/main/types/nightly/uv.lua\r\n) also bundles exactly the same file `uv.lua` from this repository. If neovim pulls this, neovim doesn't need to own or maintain this.\r\n  - Problem (maintenance): This is maintained by \"manually editing\" the meta file, following the changes time to time.\r\n  - Problem (maintenance): It's not clearly tracked or mentioned that the current HEAD version is compatible with or catching up to which luv version. Therefore, we cannot guarantee that the meta file exactly matches the libuv version we include as the CMakeFile dependency. This could be improved in coordination/collaboration with @Bilal2453, but since this is basically a 3rd-party repository we don't have much control.\r\n  - Problem (technical): neovim's vimdoc generator (lua2dox + gen_vimdoc) does not like the format. This is mainly because of two problems (1) overload functions and (2) alias types, see below.\r\n\r\n\r\n~~(3) What lua-ls currently ships as meta/3rd~~\r\n\r\n- https://github.com/LuaLS/lua-language-server/tree/master/meta/3rd -> https://github.com/LuaCATS/luv/blob/3615eb12c94a7cfa7184b8488cf908abb5e94c9c/library/uv.lua \r\n- Pretty outdated, 2 years old; this is going to be removed from lua-ls as @altermo already pointed out, so we don't need to consider this one.\r\n\r\n\r\n## Technical Problems on doc generator on the `uv.lua` from `Bilal2453/luvit-meta`\r\n\r\nNote that the current meta file [`uv.lua`](https://github.com/Bilal2453/luvit-meta/blob/main/library/uv.lua) works just well for Lua LSP. But the problem is when neovim wants to *generate* vimdoc (`luvref.txt`) from this meta file.\r\n\r\n**(1) Overload functions** with different params/returns signature, e.g., [`uv.fs_open()`](https://github.com/Bilal2453/luvit-meta/blob/7e8b6b0/library/uv.lua#L2887-L2906). \r\n\r\nSOLUTION: This can be addressed on the neovim side without requiring the meta file to change its style: I managed to improve `gen_vimdoc` and `lua2dox` to handle overloaded functions.\r\n\r\n<details>\r\n<summary>Example of generated *uv.fs_open()* vimdoc</summary>\r\n\r\n```\r\nuv.fs_open({path}, {flags}, {mode}, {callback})                 *uv.fs_open()*\r\nuv.fs_open({path}, {flags}, {mode})                                           \r\n    Equivalent to `open(2)`. See below for available access `flags`.\r\n\r\n    Note: On Windows, libuv uses `CreateFileW` and thus the file is always\r\n    opened in binary mode. Because of this, the `O_BINARY` and `O_TEXT` flags\r\n    are not supported.\r\n\r\n    Parameters: ~\r\n      • {path}      (`string`)\r\n      • {flags}     (`uv.aliases.fs_access_flags|integer`)\r\n      • {mode}      (`integer`)\r\n      • {callback}  (`fun(err: string, fd: integer?)?`)\r\n\r\n    Return: ~\r\n        (`uv_fs_t`)\r\n\r\n    Parameters: ~\r\n      • {path}   (`string`)\r\n      • {flags}  (`uv.aliases.fs_access_flags|integer`)\r\n      • {mode}   (`integer`)\r\n\r\n    Return: ~\r\n        (`integer? fd, string? err_name, string? err_msg`)\r\n```\r\n\r\nAdmittedly it's a bit ugly to show [Parameters & Returns] twice. Merging them into one is non-trivial because parameter/return types are not necessarily the same.\r\n\r\n</details>\r\n\r\n**(2) Parameters for complex table options** are translated into *alias* lua types, e.g.\r\n   - [`uv.aliases.getaddrinfo_hint`](https://github.com/Bilal2453/luvit-meta/blob/7e8b6b0/library/uv.lua#L3477) for [`uv.getaddrinfo`](https://github.com/Bilal2453/luvit-meta/blob/7e8b6b0/library/uv.lua#L3485-L3499)\r\n   - and [their *human-readable* explanation on the parameters](https://github.com/luvit/luv/blob/master/docs.md#uvgetaddrinfohost-service-hints-callback) are *intentionally and manually* removed from the docstring.\r\n  \r\nWhile this might be useful for Lua_LS, this causes some problems when generating vimdocs (`luvref.txt`) because our doc generator does not unroll the alias types. Personally I think what is written in the markdown doc is more useful for vimdoc; but as we need to generate vimdoc automatically from this meta file, the docs included in the current version of the meta file won't be enough.\r\n\r\n- OPTION 1: Update the meta file `uv.lua` to include this back (the simplest solution, but requires a major re-work on the meta file).\r\n- OPTION 2: Just don't show them. This would be a regression in the `luvref.txt` (Example below)\r\n\r\n<details>\r\n<summary>Example for OPTION 2</summary>\r\n\r\n```diff\r\n-uv.getaddrinfo({host}, {service} [, {hints} [, {callback}]])  *uv.getaddrinfo()*\r\n-\r\n-                Parameters:\r\n-                - `host`: `string` or `nil`\r\n-                - `service`: `string` or `nil`\r\n-                - `hints`: `table` or `nil`\r\n-                  - `family`: `string` or `integer` or `nil`\r\n-                  - `socktype`: `string` or `integer` or `nil`\r\n-                  - `protocol`: `string` or `integer` or `nil`\r\n-                  - `addrconfig`: `boolean` or `nil`\r\n-                  - `v4mapped`: `boolean` or `nil`\r\n-                  - `all`: `boolean` or `nil`\r\n-                  - `numerichost`: `boolean` or `nil`\r\n-                  - `passive`: `boolean` or `nil`\r\n-                  - `numericserv`: `boolean` or `nil`\r\n-                  - `canonname`: `boolean` or `nil`\r\n-                - `callback`: `callable` (async version) or `nil` (sync\r\n-                  version)\r\n-                  - `err`: `nil` or `string`\r\n-                  - `addresses`: `table` or `nil` (see below)\r\n+\r\n+                                                           *uv.getaddrinfo()*\r\n+uv.getaddrinfo({host}, {service}, {hints}, {callback})\r\n+uv.getaddrinfo({host}, {service}, {hints})                                    \r\n\r\n     Equivalent to `getaddrinfo(3)`. Either `host` or `service` may be `nil`\r\n     but not both.\r\n\r\n-                Valid hint strings for the keys that take a string:\r\n-                - `family`: `\"unix\"`, `\"inet\"`, `\"inet6\"`, `\"ipx\"`,\r\n-                  `\"netlink\"`, `\"x25\"`, `\"ax25\"`, `\"atmpvc\"`, `\"appletalk\"`,\r\n-                  or `\"packet\"`\r\n-                - `socktype`: `\"stream\"`, `\"dgram\"`, `\"raw\"`, `\"rdm\"`, or\r\n-                  `\"seqpacket\"`\r\n-                - `protocol`: will be looked up using the `getprotobyname(3)`\r\n-                  function (examples: `\"ip\"`, `\"icmp\"`, `\"tcp\"`, `\"udp\"`, etc)-\r\n+\r\n+    Parameters: ~\r\n+      • {host}      (`string?`)\r\n+      • {service}   (`string?`)\r\n+      • {hints}     (`uv.aliases.getaddrinfo_hint?`)\r\n+      • {callback}  (`fun(err?: string, addresses?:\r\n+                    uv.aliases.getaddrinfo_rtn)`)\r\n\r\n-                Returns (sync version): `table` or `fail`\r\n-                - `[1, 2, 3, ..., n]` : `table`\r\n-                  - `addr` : `string`\r\n-                  - `family` : `string`\r\n-                  - `port` : `integer` or `nil`\r\n-                  - `socktype` : `string`\r\n-                  - `protocol` : `string`\r\n-                  - `canonname` : `string` or `nil`\r\n- \r\n-               Returns (async version): `uv_getaddrinfo_t userdata` or `fail`\r\n+   Return: ~\r\n+       (`uv_getaddrinfo_t`)\r\n```\r\n\r\nUsers will have no idea about `uv.aliases.getaddrinfo_hint`, `uv_getaddrinfo_t`, etc.\r\n</details>\r\n\r\n- OPTION 3: Auto-generate vimdoc from the meta file, but *resolve* the alias type (`uv.aliases.getaddrinfo_hint?`) to generate a sub-list (`family`, `socktype`, etc.). This will require a non-trivial work on our documentation generator.\r\n\r\n\r\nI can open a draft PR to show the preliminary work after some clean-up.\r\n\r\n**(3) Generating sections** for vimdoc is also difficult because of the different doc structure (`@section` v.s. `@defgroup`) being assumed.\r\n\r\n\r\n## Decision to make:\r\n\r\n- Should neovim \"own\" a meta file, or pull from `Bilal2453/luvit-meta` or directly from `docs.md`?\r\n- Do we generate `luvref.txt` or maintain them manually (in addition to `_meta/uv.lua`)? How much difference between `luvref.txt` and [docs.md](https://github.com/luvit/luv/blob/master/docs.md) we will allow?\r\n- Or should we wait until https://github.com/luvit/luv/issues/632 is done? (it seems that it won't be done in the very near future)\r\n\r\n- An alternative possible approach is the opposite way; to generate (manually maintained) the meta file for `vim.uv` from `luvref.txt`, instead of generating `luvref.txt` from the meta files. This is [the former approach used by @folke in neodev](https://github.com/folke/neodev.nvim/blob/main/lua/neodev/build/docs.lua#L233-L265), but currently it was superseded by just [fetching the `uv.lua` meta file](https://github.com/folke/neodev.nvim/blob/main/lua/neodev/build/init.lua#L95-L98). In neovim we don't generate meta files from doc files, so I don't think this is a very compelling approach.\r\n\r\n\r\nAlso, we should make sure that luv meta files and docs are up-to-date and properly synchronized (either manually or automatically) whenever libuv dependency is bumped. #22186\r\n\r\nIf we are fine with a \"minimal viable\" vimdoc that might be somewhat different from the current `luvref.txt or https://github.com/luvit/luv/blob/master/docs.md, we can choose the option to use @Bilal2453's one (with some patches contributed) and generate vimdoc from it.",
            "created_at": "2024-01-14T07:50:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1890875447",
            "id": 1890875447,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5wtHg3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890875447/reactions"
            },
            "updated_at": "2024-01-14T08:18:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890875447",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For the record, there's a variant of these options: **We** provide the upstream meta file (starting from one of the existing files, edited to suit us), in the hope that once it's there, upstream will maintain it and we can just pull it on any luv bump. ",
            "created_at": "2024-01-14T09:56:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1890903561",
            "id": 1890903561,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5wtOYJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890903561/reactions"
            },
            "updated_at": "2024-01-14T09:56:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890903561",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That might be the easiest thing tbh.",
            "created_at": "2024-01-14T11:09:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1890920353",
            "id": 1890920353,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5wtSeh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890920353/reactions"
            },
            "updated_at": "2024-01-14T11:09:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890920353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hey there, I am happy to help with this!\r\n\r\nFirst for the mentioned problems in the approach of using `luvit-meta/uv.lua`, I am working on a more robust annotation layout that is more friendly to a doc-gen (see the weird `@namespace` and `@section` annotations), namely this would solve the problem of tracking as it will include the luv commit hash (and release) it annotates as well as separates the luv annotations into sections similar to the current markdown layout. But I am afraid that might not be the case for the other remaining problems, I don't believe I can change the overload style used, if I recall correctly I was forced to use it due to LSP limitations (though not sure if that is solved now).\r\nI do happen to be maintaining a fair bit of the luv docs, and I make sure that whatever commit going to `doc.md` also goes to `uv.lua`, so far luvit-meta has an up to date coverage of it.\r\n\r\nThat being said, I probably wouldn't take either of the mentioned approaches, I had to manually add things in/out from annotations *because* the automatically generated ones from the markdown (which served as the base) were either inconsistent or incomplete for something like this, my real intention behind the luvit-meta project __was not__ to actually provide types or annotations for Luvit and Luv, but to compensate for the lack of documentation and to eventually replace the upstream docs by converting the annotations into something more usable and easy to maintain (something like JSON files / Lua tables).  \r\nWhile my approach might sound like adding more stages than it is actually needed (which it is) this was done because it was a big project for only a single person (Luvit API is hugely undocumented), it felt like I would waste my time writing JSON (for example) only to get burned out eventually and achieve nothing, so I decided to go with the more painful route of writing the annotations first (which comes with its own cons) so that in case I do get burned out (which I eventually did, only 50-60% of luvit-meta is complete) so I at least end up with some achievement.\r\n\r\nIn my opinion, the approach that should be taken is more inline with what @clason suggested, work on https://github.com/luvit/luv/issues/632 upstream, write a machine-readable luv docs, and use that to generate the annotations.\r\nI started working on a doc-gen converting the annotations I have into an Intermediate form a while ago but quickly faced some challenges (for example, I faced a similar issue with `@alias`es) and got busy with other things.",
            "created_at": "2024-01-14T18:47:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1891038427",
            "id": 1891038427,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5wtvTb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1891038427/reactions"
            },
            "updated_at": "2024-01-14T18:55:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1891038427",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38175840?v=4",
                "events_url": "https://api.github.com/users/Bilal2453/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bilal2453/followers",
                "following_url": "https://api.github.com/users/Bilal2453/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bilal2453/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bilal2453",
                "id": 38175840,
                "login": "Bilal2453",
                "node_id": "MDQ6VXNlcjM4MTc1ODQw",
                "organizations_url": "https://api.github.com/users/Bilal2453/orgs",
                "received_events_url": "https://api.github.com/users/Bilal2453/received_events",
                "repos_url": "https://api.github.com/users/Bilal2453/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bilal2453/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bilal2453/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bilal2453",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hi @Bilal2453, thanks for your feedback and help! I look forward to working with you together to have a improved meta file (either on your repo or potentially contribute to upstream `luvit`) that can serve Neovim's needs and your needs. I can feel and relate the huge efforts and manual processes you've already gone through.\r\n\r\nRegarding overload functions --- I think the current style of overload functions are fine; they follow standard LuaCATS annotation style and it's something that neovim's build process can adapt to.\r\n\r\nSince it seems that you have some preliminary works done towards luvit/luv#632, I'd be happy to involved if there's anything I can help you with. I will also keep you involved once I start to make any further steps (currently it's more like a planning/design phase for me).",
            "created_at": "2024-01-14T18:58:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1891041310",
            "id": 1891041310,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5wtwAe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1891041310/reactions"
            },
            "updated_at": "2024-01-14T18:58:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1891041310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "A tiny bit of progress, I will be working on getting something working over at [luv-docgen](https://github.com/Bilal2453/luv-docgen).\r\nCurrently I have a working lexer (which was 10 lines of LPeg grammar) and will be working on the parser next (described in the repo), at the end of it we should have a machine-readable structure that describes the docs well enough for both a markdown docgen and LuaCAT annotations.\r\n\r\nI am not currently sure if I need help with something coding wise. Will probably need more opinions about the potential problems will be facing, and the Lua table structure of the parser (both described in the repo). I will be posting further updates over at https://github.com/luvit/luv/issues/632, thanks for everyone's help!\r\n",
            "created_at": "2024-01-17T18:10:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1896342158",
            "id": 1896342158,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5xB-KO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1896342158/reactions"
            },
            "updated_at": "2024-01-17T18:10:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1896342158",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38175840?v=4",
                "events_url": "https://api.github.com/users/Bilal2453/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bilal2453/followers",
                "following_url": "https://api.github.com/users/Bilal2453/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bilal2453/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bilal2453",
                "id": 38175840,
                "login": "Bilal2453",
                "node_id": "MDQ6VXNlcjM4MTc1ODQw",
                "organizations_url": "https://api.github.com/users/Bilal2453/orgs",
                "received_events_url": "https://api.github.com/users/Bilal2453/received_events",
                "repos_url": "https://api.github.com/users/Bilal2453/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bilal2453/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bilal2453/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bilal2453",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@Bilal2453 Sounds great, I will have a look and give some suggestions.\r\n\r\nAlso take a look at the LPeg grammar neovim uses https://github.com/neovim/neovim/blob/master/src/nvim/generators/luacats_grammar.lua, written by @lewis6991 (#26967). This handles only `@params` and `@returns` at the moment for the purpose of vimdoc generation, but your work will be a more general solution; which we look forward to using once it becomes mature.",
            "created_at": "2024-01-17T18:29:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1896395380",
            "id": 1896395380,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5xCLJ0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1896395380/reactions"
            },
            "updated_at": "2024-01-17T18:32:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1896395380",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Judging by how it is going, I am slightly doubting if my parser would really be any better for a more general solution (at least outside of my luv definitions). Doing things right (like accounting for invalid inputs, etc) requires a fair bit of time and I am a bit in a rush as I want to finish this in a day or two (hopefully) before I am busy with work, so I am mostly using Lua's string matching with assumption about what the usage of an annotation looks like. \r\nOf course for generating the Luv vimdocs, the generated `data.lua` should do.\r\n\r\nFor a long term solution why not use the LuaLS parser itself? It will guarantee that your parser is always doing what it is supposed to do, and will be really easy to maintain it for any upstream changes (like adding new annotations, syntax etc), the only disadvantages of that is A) you have to depend on code outside of your repo and B) the parser is meant for LSP, its Lua structure output is very big and complicated (which is the only reason I didn't use it instead).",
            "created_at": "2024-01-20T00:47:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1901465174",
            "id": 1901465174,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5xVg5W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1901465174/reactions"
            },
            "updated_at": "2024-01-20T00:56:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1901465174",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38175840?v=4",
                "events_url": "https://api.github.com/users/Bilal2453/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bilal2453/followers",
                "following_url": "https://api.github.com/users/Bilal2453/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bilal2453/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bilal2453",
                "id": 38175840,
                "login": "Bilal2453",
                "node_id": "MDQ6VXNlcjM4MTc1ODQw",
                "organizations_url": "https://api.github.com/users/Bilal2453/orgs",
                "received_events_url": "https://api.github.com/users/Bilal2453/received_events",
                "repos_url": "https://api.github.com/users/Bilal2453/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bilal2453/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bilal2453/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bilal2453",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "LuaLS is not reliable as a dependency, and as a black box unsuitable.",
            "created_at": "2024-01-20T09:26:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1902035686",
            "id": 1902035686,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5xXsLm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902035686/reactions"
            },
            "updated_at": "2024-01-20T09:26:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902035686",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I meant using the LuaLS parser itself, not the binary of the language server, does that apply to it too?  From what I've seen it seems like it would be reliable, for instance, you need this [parser directory](https://github.com/LuaLS/lua-language-server/tree/master/script/parser) + [utility.lua](https://github.com/LuaLS/lua-language-server/blob/master/script/utility.lua), and lpeglabel, parsing definitions would then be like:\r\n\r\n```lua\r\nlocal parser = require('parser')\r\nlocal state = parser.compile(input, 'Lua', 'Lua 5.4') -- the version shouldn't really matter\r\n\r\nparser.luadoc(state) -- parse docs (definitions)\r\n\r\n-- now accessible with state.ast.docs/etc\r\n```\r\n\r\nThough you need then to convert this structure into something actually usable, accessing the state directly is painful.",
            "created_at": "2024-01-20T17:12:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1902179031",
            "id": 1902179031,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5xYPLX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902179031/reactions"
            },
            "updated_at": "2024-01-20T17:12:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902179031",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38175840?v=4",
                "events_url": "https://api.github.com/users/Bilal2453/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bilal2453/followers",
                "following_url": "https://api.github.com/users/Bilal2453/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bilal2453/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bilal2453",
                "id": 38175840,
                "login": "Bilal2453",
                "node_id": "MDQ6VXNlcjM4MTc1ODQw",
                "organizations_url": "https://api.github.com/users/Bilal2453/orgs",
                "received_events_url": "https://api.github.com/users/Bilal2453/received_events",
                "repos_url": "https://api.github.com/users/Bilal2453/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bilal2453/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bilal2453/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bilal2453",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yeah, the whole project is not reliable (for this purpose). Rolling our own with Lpeg is the right way in my view.",
            "created_at": "2024-01-20T17:13:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1902179213",
            "id": 1902179213,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5xYPON",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902179213/reactions"
            },
            "updated_at": "2024-01-20T17:14:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902179213",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Good point, it feels like we're kind of reinventing a wheel, but Neovim's LuaLS annotation use is not 100% strictly compliant with the LuaCATS (for historical reasons), which also changes gradually over time. We have some non-standard annotations that LuaLS may parse differently. Another unresolved issue that I know of is: https://github.com/LuaLS/lua-language-server/issues/2333 -- docs for `@param` are not parsed correctly and we don't have much control *inside* the black box.",
            "created_at": "2024-01-20T17:31:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1902185673",
            "id": 1902185673,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5xYQzJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902185673/reactions"
            },
            "updated_at": "2024-01-20T17:31:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902185673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Any annotation tag that isn't recognized by the parser is treated as a normal comment, so it should still be possible to handle it in a later step.\r\n\r\nFor that bug and any future ones, I think it would be neat if we fix those upstream (I might look into, doesn't sound terribly hard to support, famous last words), descriptions are *the* most complicated thing to parse (from my experience at least), especially ones that don't explicitly use `#`, because it requires full support to any possibly acceptable value, and you can only start actually parsing the description once you have fully finished parsing what is before it, which makes it prune to a lot of errors and any new syntax/feature can easily break it. I wish if the description syntax that didn't use `#` simply didn't exists!\r\n\r\nNonetheless, will see what happens with mine and you could decide from there.\r\n",
            "created_at": "2024-01-20T18:08:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-1902212381",
            "id": 1902212381,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM5xYXUd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902212381/reactions"
            },
            "updated_at": "2024-01-20T18:08:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902212381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38175840?v=4",
                "events_url": "https://api.github.com/users/Bilal2453/events{/privacy}",
                "followers_url": "https://api.github.com/users/Bilal2453/followers",
                "following_url": "https://api.github.com/users/Bilal2453/following{/other_user}",
                "gists_url": "https://api.github.com/users/Bilal2453/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Bilal2453",
                "id": 38175840,
                "login": "Bilal2453",
                "node_id": "MDQ6VXNlcjM4MTc1ODQw",
                "organizations_url": "https://api.github.com/users/Bilal2453/orgs",
                "received_events_url": "https://api.github.com/users/Bilal2453/received_events",
                "repos_url": "https://api.github.com/users/Bilal2453/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Bilal2453/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Bilal2453/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Bilal2453",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is completed with: https://github.com/neovim/neovim/commit/0ee5a4d481557e858983396e7ec93a03f3c357d9",
            "created_at": "2025-04-10T12:56:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-2792676295",
            "id": 2792676295,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM6mdNvH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2792676295/reactions"
            },
            "updated_at": "2025-04-10T12:56:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2792676295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/107814000?v=4",
                "events_url": "https://api.github.com/users/altermo/events{/privacy}",
                "followers_url": "https://api.github.com/users/altermo/followers",
                "following_url": "https://api.github.com/users/altermo/following{/other_user}",
                "gists_url": "https://api.github.com/users/altermo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/altermo",
                "id": 107814000,
                "login": "altermo",
                "node_id": "U_kgDOBm0ccA",
                "organizations_url": "https://api.github.com/users/altermo/orgs",
                "received_events_url": "https://api.github.com/users/altermo/received_events",
                "repos_url": "https://api.github.com/users/altermo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/altermo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/altermo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/altermo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> For the record, there's a variant of these options: **We** provide the upstream meta file (starting from one of the existing files, edited to suit us), in the hope that once it's there, upstream will maintain it and we can just pull it on any luv bump.\n\nAnd that is exactly the current plan :)",
            "created_at": "2025-04-10T13:49:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/26268#issuecomment-2793233102",
            "id": 2793233102,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26268",
            "node_id": "IC_kwDOAPphoM6mfVrO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2793233102/reactions"
            },
            "updated_at": "2025-04-10T13:49:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2793233102",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 21,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26268/comments",
    "created_at": "2023-11-28T09:43:10Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/26268/events",
    "html_url": "https://github.com/neovim/neovim/issues/26268",
    "id": 2014035300,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/26268/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM54C71k",
    "number": 26268,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/26268/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/26268/timeline",
    "title": "docs/automation: include luv meta definitions files",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-10T13:49:12Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/26268",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/107814000?v=4",
        "events_url": "https://api.github.com/users/altermo/events{/privacy}",
        "followers_url": "https://api.github.com/users/altermo/followers",
        "following_url": "https://api.github.com/users/altermo/following{/other_user}",
        "gists_url": "https://api.github.com/users/altermo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/altermo",
        "id": 107814000,
        "login": "altermo",
        "node_id": "U_kgDOBm0ccA",
        "organizations_url": "https://api.github.com/users/altermo/orgs",
        "received_events_url": "https://api.github.com/users/altermo/received_events",
        "repos_url": "https://api.github.com/users/altermo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/altermo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/altermo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/altermo",
        "user_view_type": "public"
    }
}