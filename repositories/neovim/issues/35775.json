{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\n### Summary\n\nAfter updating to Flutter **3.35.3** (Dart **3.9.2**), I started encountering persistent LSP errors from the Dart language server (`dartls`) when editing Dart files in Neovim using the built-in LSP client.\n\nThe errors appear when:\n- Creating a new Dart file and typing (triggering LSP snippet completions),\n- Editing an existing file near the end (triggering LSP snippet completions).\n\n```\nLSP[dartls] An error occurred while handling textDocument/didChange notification\n```\n\nThis happens even in a minimal Neovim setup using only `nvim-lspconfig`.\n\n[Original issue in dart sdk repo](https://github.com/dart-lang/sdk/issues/61488)\n\nCC: @DanTup (Dart LSP developer who helped analyze this)\n\n---\n\n### Steps to Reproduce\n\n1. `flutter create test_did_change`\n2. Open `test_did_change/lib/main.dart`\n3. Begin typing at the end of the file to trigger the LSP snippet completion\n4. Create a new file `named new_file.dart`\n5. Begin typing in `new_file.dart` to trigger the LSP snippet completion\n\n---\n\n### Observed Behavior\n\nThe Dart LSP server logs errors during the `textDocument/didChange` notification. Based on analysis from the Dart LSP developer, Neovim's LSP client is sending malformed `didChange` notifications with incorrect text ranges.\n\nExamples of invalid behavior:\n\n[dart-lsp-log.txt](https://github.com/user-attachments/files/22331971/dart-lsp-log.txt)\n\n#### Insertions Treated Sequentially (Snippet Completion)\n```json\n{\n  \"text\": \"C\",\n  \"range\": { \"start\": { \"line\": 123, \"character\": 6 }, \"end\": { \"line\": 123, \"character\": 6 } }\n},\n{\n  \"text\": \"l\",\n  \"range\": { \"start\": { \"line\": 123, \"character\": 7 }, \"end\": { \"line\": 123, \"character\": 7 } }\n},\n...\n```\nEach character is inserted at a new offset, as if earlier insertions had already modified the buffer. But LSP spec requires all edits in a single `didChange` to apply to the original state of the document.\n\n### Relevant LSP Specification\n\n> When a client sends a `textDocument/didChange` notification, the ranges in `contentChanges` must all reference the same version of the document (before any of the edits are applied). Applying the changes in any order should result in the same document state.\n\nSee: [microsoft/language-server-protocol#888](https://github.com/microsoft/language-server-protocol/issues/888)\n\n---\n\n### Test Environment\n\n- NVIM v0.11.4\n  - Build type: RelWithDebInfo\n  - LuaJIT 2.1.1753364724\n- Flutter SDK: 3.35.3 (Dart 3.9.2)\n- LSP Client: Built-in `vim.lsp`, configured via `nvim-lspconfig`\n```lua\n        dartls = {\n          cmd = { \"dart\", \"language-server\", \"--protocol=lsp\" },\n          filetypes = { \"dart\" },\n          root_markers = { 'pubspec.yaml' },\n          init_options = {\n            onlyAnalyzeProjectsWithOpenFiles = true,\n            suggestFromUnimportedLibraries = false,\n            closingLabels = true,\n            outline = true,\n            flutterOutline = true,\n          },\n          settings = {\n            dart = {\n              analysisExcludedFolders = {\n                vim.fn.expand(\"$PUB_CACHE\"),\n                vim.fn.expand(\"$FLUTTER_ROOT\"),\n                vim.fn.expand(\"$XDG_DATA_HOME/dart\"),\n                vim.fn.expand(\"$XDG_CACHE_HOME/dart\"),\n              },\n              updateImportsOnRename = true,\n              completeFunctionCalls = true,\n              showTodos = true,\n            },\n          },\n          capabilities = require(\"cmp_nvim_lsp\").default_capabilities()\n        },\n\n```\n\n### Code example\n\n<details>\n<summary>main.dart</summary>\n\n```dart\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text('You have pushed the button this many times:'),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.headlineMedium,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ), // This trailing comma makes auto-formatting nicer for build methods.\n    );\n  }\n}\n\nclass NewClassAtTheEndOfTheFile{\n  \n}\n```\n</details>\n\n<details>\n<summary>new_file.dart</summary>\n\n```dart\nclass NewClassInTheNewFile{\n  \n}\n``` \n</details>\n\n---\n\nPlease let me know if I can help provide logs, a reproducible config.\n\n\n\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\n\n```lua\nlocal pattern = 'dart'\nlocal cmd = { \"dart\", \"language-server\", \"--protocol=lsp\" }\n-- Add files/folders here that indicate the root of a project\nlocal root_markers = { 'pubspec.yaml' }\n-- Change to table with settings if required\nlocal settings = vim.empty_dict()\n\nvim.api.nvim_create_autocmd('FileType', {\n  pattern = pattern,\n  callback = function(args)\n    local match = vim.fs.find(root_markers, { path = args.file, upward = true })[1]\n    local root_dir = match and vim.fn.fnamemodify(match, ':p:h') or nil\n    vim.lsp.start({\n      name = 'bugged-ls',\n      cmd = cmd,\n      root_dir = root_dir,\n      settings = settings\n    })\n  end\n})\n```\n\n### Expected behavior\n\nThe client should:\n- Accumulate multiple text edits targeting the same document version,\n- Ensure all ranges are calculated based on the unmodified buffer,\n- Send a single `didChange` notification with all `contentChanges` referencing the original state.\n\n### Nvim version (nvim -v)\n\nv0.11.4\n\n### Language server name/version\n\nDart **3.9.2**\n\n### Operating system/version\n\nLinux arch 6.16.5-arch1-1\n\n### Log file\n\nhttps://github.com/user-attachments/files/22331971/dart-lsp-log.txt",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I apologise for the bad info. I had conflated `WorkspaceEdits` and `TextDocumentContentChangeEvent` which are handled differently (the former all describe locations in the original document, but the latter are applied sequentially).\n\nI've opened https://github.com/dart-lang/sdk/issues/61501 for the underlying issue, and don't believe there's anything wrong in Neovim here.",
            "created_at": "2025-09-15T12:38:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/35775#issuecomment-3291975796",
            "id": 3291975796,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35775",
            "node_id": "IC_kwDOAPphoM7EN5B0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3291975796/reactions"
            },
            "updated_at": "2025-09-15T12:38:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3291975796",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1078012?v=4",
                "events_url": "https://api.github.com/users/DanTup/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanTup/followers",
                "following_url": "https://api.github.com/users/DanTup/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanTup/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanTup",
                "id": 1078012,
                "login": "DanTup",
                "node_id": "MDQ6VXNlcjEwNzgwMTI=",
                "organizations_url": "https://api.github.com/users/DanTup/orgs",
                "received_events_url": "https://api.github.com/users/DanTup/received_events",
                "repos_url": "https://api.github.com/users/DanTup/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanTup/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanTup/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanTup",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "to be clear, I will close this issue when the upstream one will be closed with any outcome and reflect it here.",
            "created_at": "2025-09-15T14:37:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/35775#issuecomment-3292518508",
            "id": 3292518508,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35775",
            "node_id": "IC_kwDOAPphoM7EP9hs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3292518508/reactions"
            },
            "updated_at": "2025-09-15T14:37:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3292518508",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/79290581?v=4",
                "events_url": "https://api.github.com/users/lumpsoid/events{/privacy}",
                "followers_url": "https://api.github.com/users/lumpsoid/followers",
                "following_url": "https://api.github.com/users/lumpsoid/following{/other_user}",
                "gists_url": "https://api.github.com/users/lumpsoid/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lumpsoid",
                "id": 79290581,
                "login": "lumpsoid",
                "node_id": "MDQ6VXNlcjc5MjkwNTgx",
                "organizations_url": "https://api.github.com/users/lumpsoid/orgs",
                "received_events_url": "https://api.github.com/users/lumpsoid/received_events",
                "repos_url": "https://api.github.com/users/lumpsoid/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lumpsoid/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lumpsoid/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lumpsoid",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35775/comments",
    "created_at": "2025-09-15T11:23:32Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35775/events",
    "html_url": "https://github.com/neovim/neovim/issues/35775",
    "id": 3417522201,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "Needs a third-party / external change or fix",
            "id": 101945532,
            "name": "status:blocked-external",
            "node_id": "MDU6TGFiZWwxMDE5NDU1MzI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/status:blocked-external"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35775/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM7Ls0AZ",
    "number": 35775,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35775/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35775/timeline",
    "title": "LSP: dart `textDocument/didChange` Notifications Sent with Incorrect Ranges",
    "type": null,
    "updated_at": "2025-09-15T20:23:54Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35775",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/79290581?v=4",
        "events_url": "https://api.github.com/users/lumpsoid/events{/privacy}",
        "followers_url": "https://api.github.com/users/lumpsoid/followers",
        "following_url": "https://api.github.com/users/lumpsoid/following{/other_user}",
        "gists_url": "https://api.github.com/users/lumpsoid/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lumpsoid",
        "id": 79290581,
        "login": "lumpsoid",
        "node_id": "MDQ6VXNlcjc5MjkwNTgx",
        "organizations_url": "https://api.github.com/users/lumpsoid/orgs",
        "received_events_url": "https://api.github.com/users/lumpsoid/received_events",
        "repos_url": "https://api.github.com/users/lumpsoid/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lumpsoid/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lumpsoid/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lumpsoid",
        "user_view_type": "public"
    }
}