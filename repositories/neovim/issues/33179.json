{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nWhen listening to frequently triggered events such as `CursorHold`, and when the callback functions are time-consuming, using debounce/throttle can significantly improve the user experience.\n\nVim already provides an API `vim.defer_fn()` for deferring function execution, which essentially wraps the `vim.uv.timer` with a simple layer. However, delayed execution isn't exactly the same as debounce/throttle. Regarding this, the `lodash` documentation references a blog post that provides a detailed explanation of these concepts: [https://css-tricks.com/debouncing-throttling-explained-examples/](https://css-tricks.com/debouncing-throttling-explained-examples/)\n\nI'm wondering - since debounce and throttle are fundamental optimization techniques for user experience, would it be appropriate to include them in Neovim's API as basic utilities for users and plugins?\n\n### Expected behavior\n\nReferencing lodash, the Lua version of debounce/throttle could have the following signature:\n\n```lua\n---@class vim.debounce.Option\n---@field leading boolean Specify invoking on the leading edge of the timeout.\n---@field trailing boolean  Specify invoking on the trailing edge of the timeout.\n---@field maxWait number The maximum time func is allowed to be delayed before it's invoked.\n\n---@class vim.debounce.Debounce\n---@operator call(...):nil\n---@field cancel fun() Cancel delayed func invocations.\n---@field flush fun() Invoke func immediately.\n\n---@param fn any The function to debounce.\n---@param wait number The number of milliseconds to delay.\n---@param opts? vim.debounce.Option\n---@return vim.debounce.Debounce\nfunction vim.debounce(fn, wait, opts) end\nfunction vim.throttle(fn, wait, opts) end\n```\n\nI've implemented a Lua version based on libuv timer by referencing lodash, which I use in my own configuration. If this seems suitable, I'd be happy to submit a PR.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I would like to see a proposal for a clear, unified interface that eliminates most of these functions:\n\n```\nvim.defer_fn()\nvim.schedule()\nvim.schedule_wrap()\nvim.debounce()\nvim.throttle()\ntimer-related functions\n```\n\nWhich of these concepts can be parameters on 1 function, instead of separate functions for each minor variation? \n\nbtw, the difference between debounce and throttle is very easily confused, so switching that behavior with a parameter could be a real improvement vs the typical \"this is how javascript does it\".",
            "created_at": "2025-03-30T14:17:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2764583792",
            "id": 2764583792,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6kyDNw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764583792/reactions"
            },
            "updated_at": "2025-03-30T14:18:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764583792",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> the difference between debounce and throttle is very easily confused\n\nI couldn't agree more.\n\n> switching that behavior with a parameter could be a real improvement vs the typical \"this is how javascript does it\".\n\nThat makes sense. I just think JavaScript faces very similar scenarios as Neovim. As for whether we should replicate the same approach in Neovim, I believe it’s definitely worth discussing.\n\n## Context\n\nSome simple notes on the functions you referenced above for context.\n\n### vim.schedule, vim.schedule_warp\n\n`vim.schedule` wraps the function `fn` as an event and queues it into Neovim's main event loop.\n\nModifications to Neovim's core state, such as UI or window, can only occur within Neovim's main event-loop. If you need to read or modify Neovim's core state (e.g., calling `vim.api.*`) in callbacks triggered by user-registered `vim.uv` events, including those used in debounce/throttle logic (`vim.uv.timer`), you must wrap the operations with `vim.schedule()`. The `vim.schedule_wrap()` is a helper function for that.\n\npseudocode:\n\n```lua\nvim.schedule_wrap = function()\n  return function(...)\n    vim.schedule(function()\n      fn(...)\n    end)\n end\nend\n```\n\n### vim.defer_fn\n\n`vim.defer_fn` use `vim.uv.timer` sets up a timer, executes `fn` in timer callback, which is wrapped with `vim.schedule_wrap()`.\n\n```lua\n---@param fn function Callback to call once `timeout` expires\n---@param timeout integer Number of milliseconds to wait before calling `fn`\n---@return table timer luv timer object\nvim.defer_fn(fn, timeout)\n```\n\n## What we need in neovim?\n\n### Delay invoke\n\nA one-short delay invoke, that's exactly what `vim.defer_fn()` does.\n\n> `-` is a time window, `^` is function call or execution.\n\n```\ncall      --^-------------^---------\ndelay     ------^-------------^-----\ntimeout=3   |---|         |---|\n```\n\n### Debounce(fn, timeout)\n\nIf a series of calls happen within intervals shorter than the `timeout` milliseconds, they will be grouped as a single invocation, resulting in only one final execution.\n\n```\ncall      --^^^^^-------^^^^^^------\ndebounce  ----------^------------^--\ntimeout=3       |---|        |---|\n```\n\nThe function executes at: last_call + timeout\n\n### Throttle(fn, timeout)\n\n```\ncall      --^^^^^^^^^^^^^^^^--------\ndebounce  ---------------------^----\nthrottle  ------^---^---^---^-------\ntimeout=3   |---|\n```\n\nIf a function is called continuously within a short time (< timeout):\n\n- debounce: the function will never execute, or only execute after last call. (e.g., triggering search after input stops).\n- throttle: it guarantees the function executes exactly once per timeout-length time window, regardless of call frequency. (e.g., cursor move, scroll handling).\n\n### Execute at window boundaries\n\n#### leading\n\n```\ncall      --^^^^^^^^^^^^^^^---------\ndebounce  --^-----------------------\nthrottle  --^---^---^---^---^-------\ntimeout=3   |---|\n```\n\nA leading-edge debounce triggers immediately on the first invocation, then suppresses all following calls within the timeout period.\n\n### trailing\n\n```\ncall      --^^^^^^^^^^^^^^^---------\ndebounce  --------------------^-----\nthrottle  ------^---^---^---^-------\ntimeout=3   |---|\n```\n\nfunction will execute at the tail end of the timeout window.\n\n### Uncertain scenario\n\n#### Hook functions\n\n- `cancel()`: The delayed function can be manually removed from the timer callback. For example, this is useful when a feature needs to be disabled for certain filetypes.\n- `flush()`: Manually triggers the function callback immediately when specific conditions are met, ensuring real-time responsiveness.\n\nI'm not certain if we need to fully mirror JavaScript's approach by providing both `cancel` and `flush` methods. However, I believe it’s best to leave a convenient entry point for extensibility.\n\n#### Do we really need a function vim.throttle?\n\nProbablely No.\n\nThrottle's core functionality: ensuring execution at regular intervals, could be implemented as a special case of `debounce`.\n\n#### Can we extend vim.defer_fn?\n\nI think yes.\n\n`delay`, `debounce`, and `throttle` are all essentially wrappers around timers. However, since debounce and throttle need to maintain state and track call arguments, `vim.defer_fn()` should return a table instead of a raw timer. To maintain backward compatibility, we can encapsulate the original timer object within the returned table.\n\n#### Do we need vim.shedule() vim.schedule_wrap() in debounce/throttle?\n\nYes.\n\nThere is a data race between `vim.uv` callbacks and Neovim's main event loop. Since most Neovim operations require interaction with `vim.api.*` functions, wrapping callbacks with vim.schedule() by default is a good choice.\n\nHowever, in scenarios where no `vim.api.*` interaction is needed (e.g., Neovim <--> LSP communication), skipping `vim.schedule()` wrapping may be preferable. We can expose a parameter to control this behavior.\n\n## New vim.defer_fn()\n\n```lua\n---@class vim.defer_fn.Opts\n---@field debounce boolean Return a debounced callable table wrap of `fn`.\n---@field leading boolean Invoking on the leading edge of the timeout.\n---@field trailing boolean Invoking on the trailing edge of the timeout.\n---@field maxWiat number Invoking at lease once in every `maxWait` milliseconds.\n---@field schedule_wrap boolean Whether use `vim.schedule()` wrap fn, default is true.\n---\n---@class vim.defer_fn.Defer: vim.uv.uv_timer_t\n---@operator call(...) All params will be passed to `fn`.\n---@field flush fun() Cancel delayed func invocations.\n---@field cancel fun() Invoke func immediately.\n---\n---@param fn callable Function to be deferd.\n---@param timeout integer Number of milliseconds to wait.\n---@param opts vim.defer_fn.Opts? Optionally parameters.\n---@return vim.defer_fn.Defer\nfunction defer_fn(fn, timeout, opts) end\n\n--- Examples:\nlocal fn = function()\n  vim.api.nvim_command('echomsg \"hello\"')\nend\n\n--- one-short delay invoke\nvim.defer_fn(fn, 100)\n\n--- debounce\nlocal defer_fn = vim.defer_fn(fn, 100, {\n  debounce = true,\n  -- leading = true,\n  -- trailing = true,\n  -- schedule_wrap = true,\n})\nvim.api.nvim_create_autocmd(\"CursorHold\", {\n  callback = function()\n    defer_fn()\n  end,\n})\n\n--- throttle\nlocal defer_fn = vim.defer_fn(fn, 100, {\n  debounce = true,\n  maxWait = 100,\n  -- maxWait = 200, maxWait can be equal or not equal to timeout.\n  -- leading = true,\n  -- trailing = true,\n  -- schedule_wrap = true,\n})\nvim.api.nvim_create_autocmd(\"CursorHold\", {\n  callback = function()\n    defer_fn()\n  end,\n})\n```\n",
            "created_at": "2025-03-31T17:50:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2766957998",
            "id": 2766957998,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6k7G2u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2766957998/reactions"
            },
            "updated_at": "2025-04-01T12:12:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2766957998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
                "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
                "followers_url": "https://api.github.com/users/xieyonn/followers",
                "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
                "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xieyonn",
                "id": 7881849,
                "login": "xieyonn",
                "node_id": "MDQ6VXNlcjc4ODE4NDk=",
                "organizations_url": "https://api.github.com/users/xieyonn/orgs",
                "received_events_url": "https://api.github.com/users/xieyonn/received_events",
                "repos_url": "https://api.github.com/users/xieyonn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xieyonn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I have some concerns about extending the `vim.defer_fn()` function.\n\n1. The name could be misleading.\n\nThe suffix `_fn` might incorrectly imply that it's merely a wrapper around the parameter `fn`, requiring another call to execute it.\n\n```lua\nlocal defer_fn = vim.defer_fn(fn, timeout)\ndefer_fn()\n```\n\n2. `defer_fn` does not need to return the `vim.uv.timer` object.\n\nThe timer implementation details could be hidden, since callers typically don't need to interact with the timer, except when they want to cancel the deferred invocation, which could instead be encapsulated in a dedicated `cancel()` function. BTW, this design is not gc-friendly.\n\n```lua\nlocal timer = vim.defer_fn(fn, timeout)\n\n-- use timer to cancel\nif timer ~= nil and not timer:is_closing() then\n  timer:close()\nend\n\n-- encapsulated cancel logic into a function\nlocal cancel_fn = vim.defer_fn(fn, timeout)\ncancel_fn()\n```\n\n3. When implementing debounce/throttle, it's necessary to use a closure to store the timer state and call parameters. If we extend the existing `defer_fn`, eg:\n   a. Return a subclass of `vim.uv.uv_timer_t`, This approach is quite hacky.\n   b. Return a (timer, defer_fn) tuple This would conflict with defer_fn's current function signature, making it inconsistent, hard to comprehend. Introducing a new function would be cleaner.\n\nTherefore, I prefer to deprecate `vim.defer_fn` and introduce a new function to handle delay/debounce/throttle use cases, including potential future extensions.\n\n```lua\n-- Candidate names (for discussion):\nvim.defer_wrap()\nvim.defer()\nvim.defer_fn2()\nvim.defer_fn_wrap()\n-- and more...\n\n-- return a table, encapsulation all details for directly invocation and other operation.\nlocal defer = vim.defer_wrap(fn, wait, opts)\n\nvim.api.nvim_create_autocmd(\"CursorHold\", {\n  callback = defer,\n})\n\nif some condition then\n  defer.cancel()\n  -- defer.flush()\nend\n```\n",
            "created_at": "2025-03-31T23:00:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2767609038",
            "id": 2767609038,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6k9lzO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2767609038/reactions"
            },
            "updated_at": "2025-04-01T07:40:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2767609038",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
                "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
                "followers_url": "https://api.github.com/users/xieyonn/followers",
                "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
                "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xieyonn",
                "id": 7881849,
                "login": "xieyonn",
                "node_id": "MDQ6VXNlcjc4ODE4NDk=",
                "organizations_url": "https://api.github.com/users/xieyonn/orgs",
                "received_events_url": "https://api.github.com/users/xieyonn/received_events",
                "repos_url": "https://api.github.com/users/xieyonn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xieyonn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Of course we would create a new function (with a more appropriate name) and deprecate the other functions in favor of it.",
            "created_at": "2025-04-01T08:30:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2768592967",
            "id": 2768592967,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6lBWBH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2768592967/reactions"
            },
            "updated_at": "2025-04-01T08:30:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2768592967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I believe that throttle is a more advanced implementation, and that debounce can be achieved by canceling throttle calls every time. \n\n```lua\nlocal defer_fn = vim.defer(function()\n  -- do something\nend, {\n  throttle_ms = 200\n})\n\nvim.api.nvim_create_autocmd(\"TextChangedI\", {\n  callback = function()\n    defer_fn() -- act as `lodash.throttle`\n  end\n})\n\nvim.api.nvim_create_autocmd(\"TextChangedI\", {\n  callback = function()\n    defer_fn.reset()\n    defer_fn() -- act as `lodash.debounce`\n  end\n})\n```\n\nHowever, I'm not sure if it makes sense to integrate it when considering more complex options and future API stability.",
            "created_at": "2025-04-01T08:59:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2768671150",
            "id": 2768671150,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6lBpGu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2768671150/reactions"
            },
            "updated_at": "2025-04-01T09:00:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2768671150",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "If we consider `throttle` as a variant of `debounce`, the implementation becomes simpler. We can achieve this by using the `maxWait` parameter of `debounce`, because `maxWait` hit the core idea of throttle:\n\n**guarantees the function executes exactly once per timeout-length time window**\n\nCompared to `throttle_ms`, I prefer `maxWait`, we are not explicitly providing the `throttle` concept, but rather offering the capability.\n\nAccording to lodash, `throttle` is a simple call to `debounce`\n\n```javascript\nfunction throttle(func, wait, options) {\n    return debounce(func, wait, {\n        leading: options.leading,\n        trailing: options.trailing,\n        maxWait: wait,\n    });\n}\n```\n",
            "created_at": "2025-04-01T09:22:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2768734434",
            "id": 2768734434,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6lB4ji",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2768734434/reactions"
            },
            "updated_at": "2025-04-01T09:31:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2768734434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
                "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
                "followers_url": "https://api.github.com/users/xieyonn/followers",
                "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
                "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xieyonn",
                "id": 7881849,
                "login": "xieyonn",
                "node_id": "MDQ6VXNlcjc4ODE4NDk=",
                "organizations_url": "https://api.github.com/users/xieyonn/orgs",
                "received_events_url": "https://api.github.com/users/xieyonn/received_events",
                "repos_url": "https://api.github.com/users/xieyonn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xieyonn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It would be good to make debounce more advanced and unified.\n\n```lua\nlocal throttled = vim.defer(function()\n  --do something\nend, {\n  leading = true,\n  trailing = true,\n  maxWaitMs = 200\n})\nlocal debounced = vim.defer(function()\n  --do something\nend, {\n  leading = true,\n  trailing = true,\n  maxWaitMs = nil -- default: math.huge\n})\n```\n\nmaxWait seems to have a bit of a high cognitive load to me, but that may be because I'm a JavaScript programmer.\n",
            "created_at": "2025-04-01T10:00:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2768835736",
            "id": 2768835736,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6lCRSY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2768835736/reactions"
            },
            "updated_at": "2025-04-01T10:01:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2768835736",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "New func name `vim.defer`, it's short and clean. any recommendation?\n\n## proposal 1\n\n```lua\n---@class vim.defer.Opts\n---@field debounce? boolean Executes only after calls stop for timeout.\n---@field maxWiatMs? number Executes at most once per maxWaitMs interval.\n---@field schedule_wrap? boolean Whether use `vim.schedule()` wrap fn, default is true.\n---@field leading? boolean Invoking on the leading edge of the timeout.\n---@field trailing? boolean Invoking on the trailing edge of the timeout.\n---\n---@class vim.defer.Defer\n---@operator call(...) All params will be passed to `fn`.\n---@field cancel fun() Cancel func invocations.\n---@field flush fun() Invoke func immediately.\n---\n---Returns a callable object for defers execution of `fn` with configurable timing behavior.\n---@param fn callable Callback to defer execute.\n---@param timeout_ms integer Delay execute in abount timeout milliseconds.\n---@param opts vim.defer.Opts? Optionally parameters.\n---@return vim.defer.Defer\nfunction defer(fn, timeout_ms, opts) end\n\n-- one-short\nlocal defer = vim.defer(fn, 100)\n\n-- debounce\nlocal defer = vim.defer(fn, 100, {\n  debounce = true,\n  -- leading = true,\n  -- trailing = true,\n})\n\n-- throttled\nlocal defer = vim.defer(fn, 100, {\n  debounce = true,\n  maxWaitMs = 100,\n  -- leading = true,\n  -- trailing = true,\n})\n\n-- cancel and flush\ndefer.cancel()\ndefer.flush()\n```\n\n## proposal 2\n\nIt seems we can't avoid introducing the concept of `throttle`, we might as well address it directly.\n\n```lua\n---@class vim.defer.Opts\n---@field mode? \"one-short|debounce|throttle\" Timing behavior, default is one-short.\n---@field schedule_wrap? boolean Whether use `vim.schedule()` wrap fn, default is true.\n---@field leading? boolean Invoking on the leading edge of the timeout, used in debounce/throttle.\n---@field trailing? boolean Invoking on the trailing edge of the timeout, used in debounce/throttle.\n---\n---@class vim.defer.Defer\n---@operator call(...) All params will be passed to `fn`.\n---@field cancel fun() Cancel func invocations.\n---@field flush fun() Invoke func immediately.\n---\n---Returns a callable object for defers execution of `fn` with configurable timing behavior.\n---\n---One-shot: Defers calling fn until timeout ms passed.\n---Debounced: Executes only after calls stop for timeout.\n---Throttled: Executes at most once per timeout interval.\n---\n---Notes: Difference of debounced/throttled\n---call      --^^^^^^^^^^^^^^^^--------\n---debounce  ---------------------^----\n---throttle  ------^---^---^---^-------\n---@param fn callable Callback to defer execute.\n---@param timeout_ms integer Delay execute in abount timeout milliseconds.\n---@param opts vim.defer.Opts? Optionally parameters.\n---@return vim.defer.Defer\nfunction defer(fn, timeout_ms, opts) end\n\n-- one-short\nlocal defer = vim.defer(fn, 100)\n\n-- debounce\nlocal defer = vim.defer(fn, 100, {\n  mode = \"debounce\",\n  -- leading = true,\n  -- trailing = true,\n})\n\n-- throttled\nlocal defer = vim.defer(fn, 100, {\n  mode = \"throttle\",\n  -- leading = true,\n  -- trailing = true,\n})\n\n-- cancel and flush\ndefer.cancel()\ndefer.flush()\n```\n\n1. Use `mode` to change timing behavior.\n2. Throttled take param `timeout_ms`, rather than `maxWaitMs`.\n",
            "created_at": "2025-04-02T13:53:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2772641483",
            "id": 2772641483,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6lQybL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2772641483/reactions"
            },
            "updated_at": "2025-04-02T13:55:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2772641483",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
                "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
                "followers_url": "https://api.github.com/users/xieyonn/followers",
                "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
                "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xieyonn",
                "id": 7881849,
                "login": "xieyonn",
                "node_id": "MDQ6VXNlcjc4ODE4NDk=",
                "organizations_url": "https://api.github.com/users/xieyonn/orgs",
                "received_events_url": "https://api.github.com/users/xieyonn/received_events",
                "repos_url": "https://api.github.com/users/xieyonn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xieyonn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "With debounce and throttle, you manually roll the rest of the computation into a function and pass it to a higher-order function in the hope that it will be called some time later. Back in the day this was necessary because JS didn't have coroutines. In Lua, there is no need for this callback hell.\n\n# About debounce\n\nWith coroutines you express debounce directly, for [example](https://github.com/segfault-survivor/nvim-cpp-live/blob/aeb83539fb063260b9a64a88273ebc02c4cee629/lua/cpp-live.lua#L210-L223):\n\n```lua\n  while true do \n    wait_first_keystroke()\n    <do-things> \n    wait_last_keystroke() \n    <do-more-things> \n  end\n```\nNo need for leading/trailing.\n\n\n\n# About throttle\n\nThrottle as presented in blog post doesn't make sense - no need to invoke the function when there are no events. Ask your LLM, it will say:\n\n```lua\nfunction throttle(fn, delay)\n  local lastCall = 0  \n  return function (...)\n    local currentTime = os.clock()\n    if currentTime - lastCall >= delay then\n      lastCall = currentTime\n      return fn(...)\n    end\n  end\nend\n```\n\nNo timers. And this is what users expect it to be (in JS).\n\nWith coroutines you do:\n\n```lua\nwhile true do\n  local food = food_flying_by()\n  if hungry() then\n    eat(food)\n  end\nend\n```\nYou could eat all the food in the fridge, but you throttle.\n\nThrottle example (about scrolling) in the blog post is also invalid - you have to maintain N items preloaded and load new data ASAP if you have less than N. If your user is good at scrolling, you load, you don't wait.\n\n\n# About defer_fn\nI noticed calling defer_fn takes 1GB (and it does not go down) of RAM if you don't close the timer (people usually don't): \n\n`:=(function() for i=1,1000000 do vim.defer_fn(function() end, 0) end end)()`\n\nHaving similar function (or improving the old one) that does not return the timer would be fun.\n\n# In conclusion\n\nIf you still think the old-fashioned debounce/throttle design makes sense, I invite you to make a PR in [nvim-cpp-live](https://github.com/segfault-survivor/nvim-cpp-live/blob/main/lua/cpp-live.lua). But I doubt it will make it better.",
            "created_at": "2025-04-06T13:56:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2781436921",
            "id": 2781436921,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6lyVv5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2781436921/reactions"
            },
            "updated_at": "2025-04-07T14:46:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2781436921",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/188141363?v=4",
                "events_url": "https://api.github.com/users/segfault-survivor/events{/privacy}",
                "followers_url": "https://api.github.com/users/segfault-survivor/followers",
                "following_url": "https://api.github.com/users/segfault-survivor/following{/other_user}",
                "gists_url": "https://api.github.com/users/segfault-survivor/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/segfault-survivor",
                "id": 188141363,
                "login": "segfault-survivor",
                "node_id": "U_kgDOCzbPMw",
                "organizations_url": "https://api.github.com/users/segfault-survivor/orgs",
                "received_events_url": "https://api.github.com/users/segfault-survivor/received_events",
                "repos_url": "https://api.github.com/users/segfault-survivor/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/segfault-survivor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/segfault-survivor/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/segfault-survivor",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> With debounce and throttle, you manually roll the rest of the computation into a function and pass it to a higher-order function in the hope that it will be called some time later.\n\n`debounce/throttle` will wrap a new function. This new function executes after the event is triggered, and the higher-order function determines whether the original function body should be executed. The execution timing of the original function is determined by the **frequency of event triggering**, it's not simply triggered by the timer alone.\n\nThe purpose of using a timer isn't to execute the callback immediately, but rather to register a callback that will later check whether execution is actually needed.\n\nThis has nothing to do with `coroutines`.\n\n> Back in the day this was necessary because JS didn't have coroutines. In Lua, there is no need for this callback hell.\n\nSubscribing to Vim events and executing callbacks is a very common practice.\n\n```lua\nvim.api.nvim_create_autocmd(\"CursorHold\", {\n  callback = function()\n    -- do something\n  end,\n})\n```\n\nWhen the cursor keeps moving (with a shorter updatetime setting), the event will trigger continuously, executing the callback every single time.\n\n**What debounce/throttle solve?**\n\nReduce how often the callback fires during rapid, consecutive event triggers.\n\nBTW, in lua, each coroutine must voluntarily yield the CPU control, That implies it's better to have an external scheduler for unified coordination. The while loop in your code here acts as a scheduler.\n\n```lua\nwhile true do\n\nend\n```\n\nWe rarely need to do this because manually managing coroutines is cumbersome and error-prone.\n\nMoreover, in Neovim, we don't require such a scheduler since Neovim has a libuv-based global main event-loop, and `vim.uv` also provides an interface.\n\n**Wouldn’t it be more elegant to queue your own `coroutines` into Neovim’s event-loop instead?**\n\n> Throttle as presented in blog post doesn't make sense - no need to invoke the function when there are no events.\n\nThe concept of `throtte` focuses on limiting callback invocation frequency without causing excessive delays. Without an event, the callback simply won't fire.\n\n> Throttle example (about scrolling) in the blog post is also invalid - you have to maintain N items preloaded and load new data ASAP if you have less than N. If your user is good at scrolling, you load, you don't wait.\n\nCould you clarify your key concern?\n\nI'd implement debounce/throttle like this:\n\n1. Initialize a timer in the initial scroll event trigger.\n2. Upon each scroll callback or timer timeout, chech conditions:\n    - If conditions aren't met, persist the invocation args(if any). Reset the timer if needed.\n    - If conditions met, execute callback, with newest args(if any)\n\nWhat we need to store in higher-order function:\n\n- last called time. (by event trigger)\n- last execute time. (for throtte)\n- args(if any)\n\n@segfault-survivor ",
            "created_at": "2025-04-07T12:53:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2783240397",
            "id": 2783240397,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6l5ODN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2783240397/reactions"
            },
            "updated_at": "2025-04-07T14:46:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2783240397",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
                "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
                "followers_url": "https://api.github.com/users/xieyonn/followers",
                "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
                "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xieyonn",
                "id": 7881849,
                "login": "xieyonn",
                "node_id": "MDQ6VXNlcjc4ODE4NDk=",
                "organizations_url": "https://api.github.com/users/xieyonn/orgs",
                "received_events_url": "https://api.github.com/users/xieyonn/received_events",
                "repos_url": "https://api.github.com/users/xieyonn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xieyonn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "## timer vs coroutine\n\nI highly doubt the feasibility of using coroutines to implement `debounce/throttle`.\n\n1. Lua coroutines cannot achieve precise delay control.\n\n    Lua coroutines require manual yielding of CPU control. To determine when to yield, the coroutine would need to actively poll the current time and check execution conditions. This polling approach would:\n\n- Waste CPU cycles\n- Provide no guarantee of timing precision\n\n2. Coroutine usage would block Neovim.\n   Coroutines is **NOT** threads (no automatic context switching) While a coroutine executes, it would completely block Neovim's main thread.\n\nDebounce/throttle are about timing control of function execution. Using `vim.uv` timers to register events, let Neovim's main event-loop handle scheduling is a better choice.\n",
            "created_at": "2025-04-07T13:45:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2783398738",
            "id": 2783398738,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6l50tS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2783398738/reactions"
            },
            "updated_at": "2025-04-07T14:46:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2783398738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
                "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
                "followers_url": "https://api.github.com/users/xieyonn/followers",
                "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
                "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xieyonn",
                "id": 7881849,
                "login": "xieyonn",
                "node_id": "MDQ6VXNlcjc4ODE4NDk=",
                "organizations_url": "https://api.github.com/users/xieyonn/orgs",
                "received_events_url": "https://api.github.com/users/xieyonn/received_events",
                "repos_url": "https://api.github.com/users/xieyonn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xieyonn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@segfault-survivor \nHow would you suggest rewriting something like this using coroutines?\n\n\n<details>\n\n```lua\nvim.debounce = function(fn, ms)\n  local timer = assert(vim.uv.new_timer())\n  return function(...)\n    local args = { ... }\n    timer:stop()\n    timer:start(ms, 0, function()\n      fn(unpack(args))\n    end)\n  end\nend\n\nlocal function ActivateAutoHover()\n  local win = -1\n  local buf = vim.api.nvim_create_buf(false, true)\n  vim.api.nvim_buf_set_lines(buf, 0, -1, false, { \"some variable documentation\"})\n\n  local create_win = vim.debounce(vim.schedule_wrap(function()\n    win = vim.api.nvim_open_win(buf, false, {\n      relative = \"cursor\", row = 0, col = 0, height = 5, width = 20, border = \"rounded\"\n    })\n  end), 500)\n\n  vim.api.nvim_create_autocmd(\"CursorMoved\", {\n    callback = function(args)\n      if vim.api.nvim_win_is_valid(win) then\n        vim.api.nvim_win_close(win, true)\n      end\n      create_win()\n    end\n  })\nend\n\nActivateAutoHover()\n```\n\n</details>\n",
            "created_at": "2025-04-07T14:39:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2783572677",
            "id": 2783572677,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6l6fLF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2783572677/reactions"
            },
            "updated_at": "2025-04-07T14:46:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2783572677",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80050619?v=4",
                "events_url": "https://api.github.com/users/miroshQa/events{/privacy}",
                "followers_url": "https://api.github.com/users/miroshQa/followers",
                "following_url": "https://api.github.com/users/miroshQa/following{/other_user}",
                "gists_url": "https://api.github.com/users/miroshQa/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/miroshQa",
                "id": 80050619,
                "login": "miroshQa",
                "node_id": "MDQ6VXNlcjgwMDUwNjE5",
                "organizations_url": "https://api.github.com/users/miroshQa/orgs",
                "received_events_url": "https://api.github.com/users/miroshQa/received_events",
                "repos_url": "https://api.github.com/users/miroshQa/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/miroshQa/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/miroshQa/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/miroshQa",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I appreciate the in-depth explanations, but all this is **off-topic** here. What is [under discussion here](https://github.com/neovim/neovim/issues/33179#issuecomment-2764583792) is not the theoretical difference between implementations (especially comparisons to other languages, which we don't use!) but how **concretely** a unified(!) API for the currently used and necessary schedule, debounce, and throttle closures should look like. Please focus on that.\n\nRegarding the list in @justinmk's comment, we need to distinguish between low-level API (`schedule_wrap`) and high-level convenience functions. We may need to preserve this distinction (but possibly make low-level API private).",
            "created_at": "2025-04-07T14:46:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2783598997",
            "id": 2783598997,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6l6lmV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2783598997/reactions"
            },
            "updated_at": "2025-04-07T14:50:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2783598997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "`vim.schedule` and `vim.schedule_wrap` serve as bridges to communicate with Neovim's main event loop. When calling `vim.api.*` functions inside a `vim.uv` callback, we need to use `vim.schedule`. The delay/debounce/throttle implementations we're discussing here require callbacks from `vim.uv.timer`, so using `vim.schedule` as a low-level API is unavoidable.\n\nWhen using other `vim.uv` callbacks, such as file-related callbacks, the same issue arises where `vim.schedule` becomes necessary. Whether there is room for optimization in these two functions is beyond the scope of this issue's discussion.\n\nIn this [post](https://github.com/neovim/neovim/issues/33179#issuecomment-2772641483), i propose adding a new function: `vim.defer`, to provide delay/debounce/throttle capabilities.\n\n1. deprecated `vim.defer_fn`.\n2. use param `schedule_wrap` to control whether the callback should be wrapped with `vim.schedule`.\n3. provide hook function `cancel` and `flush`.",
            "created_at": "2025-04-07T17:50:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2784124248",
            "id": 2784124248,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6l8l1Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2784124248/reactions"
            },
            "updated_at": "2025-04-07T17:53:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2784124248",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
                "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
                "followers_url": "https://api.github.com/users/xieyonn/followers",
                "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
                "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xieyonn",
                "id": 7881849,
                "login": "xieyonn",
                "node_id": "MDQ6VXNlcjc4ODE4NDk=",
                "organizations_url": "https://api.github.com/users/xieyonn/orgs",
                "received_events_url": "https://api.github.com/users/xieyonn/received_events",
                "repos_url": "https://api.github.com/users/xieyonn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xieyonn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> [@segfault-survivor](https://github.com/segfault-survivor) How would you suggest rewriting something like this using coroutines?\n\nYour code (when converted to coroutines) matches 1:1 with the code I mentioned above (you want your window to be visible all the time before the cursor moves, I want my process to run before the text changes; you want your window to disappear immediately after the **first** cursor move, I want my process to stop after the first text change; you want your window to reappear after the **last** cursor move, I want my process to start again when the user dozes off). \n\nIn your code you subscribe to an event but never unsubscribe from it, essentially doing everything you do forever. Lua has forever doing construct:\n\n```lua\nwhile true do\nend\n```\n\nOf course, you can replace `true` with any condition to stop processing these events.\n\n\nNow I'm afraid to disappoint you, because you'll have to write exactly what is specified in your implementation plan (and that's good, because if something goes wrong, you'll have to blame them, not us):\n\n```lua\n wait_for_first_cursor_move()\n close_floating_window_if_any(win) \n local buf, file, id, match = wait_for_for_last_cursor_move(500)\n win = open_floating_window()\n```\n\nYou can start simple - create your own coroutine that calls `coroutine.yield`, say, 10 times (so you don't play with it all day) and call `coroutine.resume` until it's alive in the event handler. Then you need to deal with error handling, canceling, and waiting with timeout (spoiler: waiting with timeout is almost debounce). Or take a look at [these two](https://github.com/segfault-survivor/nvim-cpp-live/blob/main/lua/cpp-live.lua#L120-L128).\n\n@miroshQa ",
            "created_at": "2025-04-08T01:57:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2785033070",
            "id": 2785033070,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6mADtu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2785033070/reactions"
            },
            "updated_at": "2025-04-08T01:57:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2785033070",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/188141363?v=4",
                "events_url": "https://api.github.com/users/segfault-survivor/events{/privacy}",
                "followers_url": "https://api.github.com/users/segfault-survivor/followers",
                "following_url": "https://api.github.com/users/segfault-survivor/following{/other_user}",
                "gists_url": "https://api.github.com/users/segfault-survivor/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/segfault-survivor",
                "id": 188141363,
                "login": "segfault-survivor",
                "node_id": "U_kgDOCzbPMw",
                "organizations_url": "https://api.github.com/users/segfault-survivor/orgs",
                "received_events_url": "https://api.github.com/users/segfault-survivor/received_events",
                "repos_url": "https://api.github.com/users/segfault-survivor/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/segfault-survivor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/segfault-survivor/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/segfault-survivor",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It is possible to implement some functionality with coroutines, but keep in mind that trailing=true requires a timer.",
            "created_at": "2025-04-08T02:13:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2785053019",
            "id": 2785053019,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6mAIlb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2785053019/reactions"
            },
            "updated_at": "2025-04-08T02:13:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2785053019",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> `debounce/throttle` will wrap a new function\n\nSmearing logic between callbacks, that is bad.\n\n> determined by the frequency of event triggering, it's not simply triggered by the timer alone\n\nThis is incorrect, because frequency is 1 / time and nothing else.\n\n> execute the callback immediately\n\nI never said that.\n\n> later check\n\nI said \"some time later\". What are you arguing with?\n\n> This has nothing to do with coroutines.\n\nWhy?\n\n> Subscribing to Vim events and executing callbacks is a very common practice.\n\nI like how Andrei Alexandrescu put it: \"You can have a toilet in your house. You don't need it in your living room.\"\nMeaning it is good you can subscribe callbacks, but it is low level tool, not something you mix with your business logic.\n\n> That implies it's better to have an external scheduler for unified coordination.\n\nCitation needed.\n\n> The while loop in your code here acts as a scheduler.\n\nIt acts as (almost) never unsubscribing from the event, not as a scheduler. It states the intent clearly.\n\n> We rarely need to do this because manually managing coroutines is cumbersome and error-prone.\n\nI'm not quite sure what you mean by that. The code ends up being more readable than a hellish mess of spaghetti with callbacks.\n\n> Moreover, in Neovim, we don't require such a scheduler since Neovim has a libuv-based global main event-loop, and vim.uv also provides an interface.\n\nHow does that help the cause?\n\n> The concept of throtte focuses on limiting callback invocation frequency without causing excessive delays.\n\nFor scrolling example any delay throttle introduces is excessive.\n\n> Without an event, the callback simply won't fire.\n\nThis is not true according blog post and your pictures - throttle does fire long after last event. The throttle turns the wheel, nonsense. This is unexpected from the user's point of view and therefore should not be the default.\n\n> Could you clarify your key concern?\n\nJust what I said, your task is having N items preloaded. Nothing to do with time or throttle.\nAnd btw, throttling should be done on server, not on the client.\n\n> I'd implement debounce/throttle like this...\nDon't.\n\nI like that you don't disagree with my conclusion. And I still invite you or anyone else to demonstrate (on the existing code I mentioned) all the benefits of the callback hell that `debounce` introduces.\n\n@xieyonn ",
            "created_at": "2025-04-08T02:17:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2785058220",
            "id": 2785058220,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6mAJ2s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2785058220/reactions"
            },
            "updated_at": "2025-04-08T02:17:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2785058220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/188141363?v=4",
                "events_url": "https://api.github.com/users/segfault-survivor/events{/privacy}",
                "followers_url": "https://api.github.com/users/segfault-survivor/followers",
                "following_url": "https://api.github.com/users/segfault-survivor/following{/other_user}",
                "gists_url": "https://api.github.com/users/segfault-survivor/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/segfault-survivor",
                "id": 188141363,
                "login": "segfault-survivor",
                "node_id": "U_kgDOCzbPMw",
                "organizations_url": "https://api.github.com/users/segfault-survivor/orgs",
                "received_events_url": "https://api.github.com/users/segfault-survivor/received_events",
                "repos_url": "https://api.github.com/users/segfault-survivor/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/segfault-survivor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/segfault-survivor/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/segfault-survivor",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 17,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33179/comments",
    "created_at": "2025-03-30T05:56:26Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33179/events",
    "html_url": "https://github.com/neovim/neovim/issues/33179",
    "id": 2958683472,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33179/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6wWe1Q",
    "number": 33179,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33179/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33179/timeline",
    "title": "Lua: vim.debounce() and vim.throttle()",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-08T02:17:56Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33179",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
        "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
        "followers_url": "https://api.github.com/users/xieyonn/followers",
        "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
        "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/xieyonn",
        "id": 7881849,
        "login": "xieyonn",
        "node_id": "MDQ6VXNlcjc4ODE4NDk=",
        "organizations_url": "https://api.github.com/users/xieyonn/orgs",
        "received_events_url": "https://api.github.com/users/xieyonn/received_events",
        "repos_url": "https://api.github.com/users/xieyonn/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/xieyonn",
        "user_view_type": "public"
    }
}