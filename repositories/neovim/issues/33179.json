{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nWhen listening to frequently triggered events such as `CursorHold`, and when the callback functions are time-consuming, using debounce/throttle can significantly improve the user experience.\n\nVim already provides an API `vim.defer_fn()` for deferring function execution, which essentially wraps the `vim.uv.timer` with a simple layer. However, delayed execution isn't exactly the same as debounce/throttle. Regarding this, the `lodash` documentation references a blog post that provides a detailed explanation of these concepts: [https://css-tricks.com/debouncing-throttling-explained-examples/](https://css-tricks.com/debouncing-throttling-explained-examples/)\n\nI'm wondering - since debounce and throttle are fundamental optimization techniques for user experience, would it be appropriate to include them in Neovim's API as basic utilities for users and plugins?\n\n### Expected behavior\n\nReferencing lodash, the Lua version of debounce/throttle could have the following signature:\n\n```lua\n---@class vim.debounce.Option\n---@field leading boolean Specify invoking on the leading edge of the timeout.\n---@field trailing boolean  Specify invoking on the trailing edge of the timeout.\n---@field maxWait number The maximum time func is allowed to be delayed before it's invoked.\n\n---@class vim.debounce.Debounce\n---@operator call(...):nil\n---@field cancel fun() Cancel delayed func invocations.\n---@field flush fun() Invoke func immediately.\n\n---@param fn any The function to debounce.\n---@param wait number The number of milliseconds to delay.\n---@param opts? vim.debounce.Option\n---@return vim.debounce.Debounce\nfunction vim.debounce(fn, wait, opts) end\nfunction vim.throttle(fn, wait, opts) end\n```\n\nI've implemented a Lua version based on libuv timer by referencing lodash, which I use in my own configuration. If this seems suitable, I'd be happy to submit a PR.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I would like to see a proposal for a clear, unified interface that eliminates most of these functions:\n\n```\nvim.defer_fn()\nvim.schedule()\nvim.schedule_wrap()\nvim.debounce()\nvim.throttle()\ntimer-related functions\n```\n\nWhich of these concepts can be parameters on 1 function, instead of separate functions for each minor variation? \n\nbtw, the difference between debounce and throttle is very easily confused, so switching that behavior with a parameter could be a real improvement vs the typical \"this is how javascript does it\".",
            "created_at": "2025-03-30T14:17:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2764583792",
            "id": 2764583792,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6kyDNw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764583792/reactions"
            },
            "updated_at": "2025-03-30T14:18:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764583792",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> the difference between debounce and throttle is very easily confused\n\nI couldn't agree more.\n\n> switching that behavior with a parameter could be a real improvement vs the typical \"this is how javascript does it\".\n\nThat makes sense. I just think JavaScript faces very similar scenarios as Neovim. As for whether we should replicate the same approach in Neovim, I believe it’s definitely worth discussing.\n\n## Context\n\nSome simple notes on the functions you referenced above for context.\n\n### vim.schedule, vim.schedule_warp\n\n`vim.schedule` wraps the function `fn` as an event and queues it into Neovim's main event loop.\n\nModifications to Neovim's core state, such as UI or window, can only occur within Neovim's main event-loop. If you need to read or modify Neovim's core state (e.g., calling `vim.api.*`) in callbacks triggered by user-registered `vim.uv` events, including those used in debounce/throttle logic (`vim.uv.timer`), you must wrap the operations with `vim.schedule()`. The `vim.schedule_wrap()` is a helper function for that.\n\npseudocode:\n\n```lua\nvim.schedule_wrap = function()\n  return function(...)\n    vim.schedule(function()\n      fn(...)\n    end)\n end\nend\n```\n\n### vim.defer_fn\n\n`vim.defer_fn` use `vim.uv.timer` sets up a timer, executes `fn` in timer callback, which is wrapped with `vim.schedule_wrap()`.\n\n```lua\n---@param fn function Callback to call once `timeout` expires\n---@param timeout integer Number of milliseconds to wait before calling `fn`\n---@return table timer luv timer object\nvim.defer_fn(fn, timeout)\n```\n\n## What we need in neovim?\n\n### Delay invoke\n\nA one-short delay invoke, that's exactly what `vim.defer_fn()` does.\n\n```\ncall      --^-------------^---------\ndelay     ------^-------------^-----\ntimeout=3   |---|         |---|\n```\n\n### Debounce(fn, timeout)\n\nIf a series of calls happen within intervals shorter than the `timeout` milliseconds, they will be grouped as a single invocation, resulting in only one final execution.\n\n> `-` is a time window, `^` is function call or execution.\n\n```\ncall      --^^^^^-------^^^^^^------\ndebounce  ----------^------------^--\ntimeout=3       |---|        |---|\n```\n\nThe function executes at: last_call + timeout\n\n### Throttle(fn, timeout)\n\n```\ncall      --^^^^^^^^^^^^^^^^--------\ndebounce  ---------------------^----\nthrottle  ------^---^---^---^-------\ntimeout=3   |---|\n```\n\nIf a function is called continuously within a short time (< timeout):\n\n- debounce: the function will never execute, or only execute after last call. (e.g., triggering search after input stops).\n- throttle: it guarantees the function executes exactly once per timeout-length time window, regardless of call frequency. (e.g., cursor move, scroll handling).\n\n### Execute at window boundaries\n\n#### leading\n\n```\ncall      --^^^^^^^^^^^^^^^---------\ndebounce  --^-----------------------\nthrottle  --^---^---^---^---^-------\ntimeout=3   |---|\n```\n\nA leading-edge debounce triggers immediately on the first invocation, then suppresses all following calls within the timeout period.\n\n### trailing\n\n```\ncall      --^^^^^^^^^^^^^^^---------\ndebounce  --------------------^-----\nthrottle  ------^---^---^---^-------\ntimeout=3   |---|\n```\n\nfunction will execute at the tail end of the timeout window.\n\n### Uncertain scenario\n\n#### Hook functions\n\n- `cancel()`: The delayed function can be manually removed from the timer callback. For example, this is useful when a feature needs to be disabled for certain filetypes.\n- `flush()`: Manually triggers the function callback immediately when specific conditions are met, ensuring real-time responsiveness.\n\nI'm not certain if we need to fully mirror JavaScript's approach by providing both `cancel` and `flush` methods. However, I believe it’s best to leave a convenient entry point for extensibility.\n\n#### Do we really need a function vim.throttle?\n\nProbablely No.\n\nThrottle's core functionality: ensuring execution at regular intervals, could be implemented as a special case of `debounce`.\n\n#### Can we extend vim.defer_fn?\n\nI think yes.\n\n`delay`, `debounce`, and `throttle` are all essentially wrappers around timers. However, since debounce and throttle need to maintain state and track call arguments, `vim.defer_fn()` should return a table instead of a raw timer. To maintain backward compatibility, we can encapsulate the original timer object within the returned table.\n\n#### Do we need vim.shedule() vim.schedule_wrap() in debounce/throttle?\n\nYes.\n\nThere is a data race between `vim.uv` callbacks and Neovim's main event loop. Since most Neovim operations require interaction with `vim.api.*` functions, wrapping callbacks with vim.schedule() by default is a good choice.\n\nHowever, in scenarios where no `vim.api.*` interaction is needed (e.g., Neovim <--> LSP communication), skipping `vim.schedule()` wrapping may be preferable. We can expose a parameter to control this behavior.\n\n## New vim.defer_fn()\n\n```lua\n---@class vim.defer_fn.Opts\n---@field debounce boolean Return a debounced callable table wrap of `fn`.\n---@field leading boolean Invoking on the leading edge of the timeout.\n---@field trailing boolean Invoking on the trailing edge of the timeout.\n---@field maxWiat number Invoking at lease once in every `maxWait` milliseconds.\n---@field schedule_wrap boolean Whether use `vim.schedule()` wrap fn, default is true.\n---\n---@class vim.defer_fn.Defer: vim.uv.uv_timer_t\n---@operator call(...) All params will be passed to `fn`.\n---@field flush fun() Cancel delayed func invocations.\n---@field cancel fun() Invoke func immediately.\n---\n---@param fn callable Function to be deferd.\n---@param timeout integer Number of milliseconds to wait.\n---@param opts vim.defer_fn.Opts? Optionally parameters.\n---@return vim.defer_fn.Defer\nfunction defer_fn(fn, timeout, opts) end\n\n--- Examples:\nlocal fn = function()\n  vim.api.nvim_command('echomsg \"hello\"')\nend\n\n--- one-short delay invoke\nvim.defer_fn(fn, 100)\n\n--- debounce\nlocal defer_fn = vim.defer_fn(fn, 100, {\n  debounce = true,\n  -- leading = true,\n  -- trailing = true,\n  -- schedule_wrap = true,\n})\nvim.api.nvim_create_autocmd(\"CursorHold\", {\n  callback = function()\n    defer_fn()\n  end,\n})\n\n--- throttle\nlocal defer_fn = vim.defer_fn(fn, 100, {\n  debounce = true,\n  maxWait = 100,\n  -- maxWait = 200, maxWait can be equal or not equal to timeout.\n  -- leading = true,\n  -- trailing = true,\n  -- schedule_wrap = true,\n})\nvim.api.nvim_create_autocmd(\"CursorHold\", {\n  callback = function()\n    defer_fn()\n  end,\n})\n```\n",
            "created_at": "2025-03-31T17:50:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2766957998",
            "id": 2766957998,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6k7G2u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2766957998/reactions"
            },
            "updated_at": "2025-03-31T22:09:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2766957998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
                "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
                "followers_url": "https://api.github.com/users/xieyonn/followers",
                "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
                "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xieyonn",
                "id": 7881849,
                "login": "xieyonn",
                "node_id": "MDQ6VXNlcjc4ODE4NDk=",
                "organizations_url": "https://api.github.com/users/xieyonn/orgs",
                "received_events_url": "https://api.github.com/users/xieyonn/received_events",
                "repos_url": "https://api.github.com/users/xieyonn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xieyonn",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I have some concerns about extending the `vim.defer_fn()` function.\n\n1. The name could be misleading.\n\n`defer_fn` is essentially an **IIFE** (Immediately Invoked Function), the suffix `_fn` might incorrectly imply that it's merely a wrapper around the parameter `fn`, requiring another call to invoke it.\n\n```lua\nlocal defer_fn = vim.defer_fn(fn, timeout)\ndefer_fn()\n```\n\n2. `defer_fn` does not need to return the `vim.uv.timer` object.\n\nThe timer implementation details could be hidden, since callers typically don't need to interact with the timer, except when they want to cancel the deferred invocation, which could instead be encapsulated in a dedicated `cancel()` function.\n\n```lua\nlocal timer = vim.defer_fn(fn, timeout)\n\n-- use timer to cancel\nif timer ~= nil and not timer:is_closing() then\n  timer:close()\nend\n\n-- encapsulated cancel logic into a function\nlocal cancel_fn = vim.defer_fn(fn, timeout)\ncancel_fn()\n```\n\n3. When implementing debounce/throttle, it's necessary to use a closure to store the timer state and call parameters. If we extend the existing `defer_fn`, eg:\n   a. Return a subclass of `vim.uv.uv_timer_t`, This approach is quite hacky.\n   b. Return a (timer, defer_fn) tuple This would conflict with defer_fn's current function signature, making it inconsistent, hard to comprehend. Introducing a new function would be cleaner.\n\nTherefore, I prefer to deprecate `vim.defer_fn` and introduce a new function to handle delay/debounce/throttle use cases, including potential future extensions.\n\n```lua\n-- Candidate names (for discussion):\nvim.defer_fn2()\nvim.defer_fn_wrap()\nvim.defer()\n-- and more...\n\n-- just return a table which encapsulation all details for directly invocation and further operation.\nlocal defer = vim.defer_fn2(fn, wait, opts)\n```\n",
            "created_at": "2025-03-31T23:00:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/33179#issuecomment-2767609038",
            "id": 2767609038,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33179",
            "node_id": "IC_kwDOAPphoM6k9lzO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2767609038/reactions"
            },
            "updated_at": "2025-03-31T23:00:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2767609038",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
                "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
                "followers_url": "https://api.github.com/users/xieyonn/followers",
                "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
                "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xieyonn",
                "id": 7881849,
                "login": "xieyonn",
                "node_id": "MDQ6VXNlcjc4ODE4NDk=",
                "organizations_url": "https://api.github.com/users/xieyonn/orgs",
                "received_events_url": "https://api.github.com/users/xieyonn/received_events",
                "repos_url": "https://api.github.com/users/xieyonn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xieyonn",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33179/comments",
    "created_at": "2025-03-30T05:56:26Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33179/events",
    "html_url": "https://github.com/neovim/neovim/issues/33179",
    "id": 2958683472,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33179/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6wWe1Q",
    "number": 33179,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33179/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33179/timeline",
    "title": "Lua: vim.debounce() and vim.throttle()",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-03-31T23:00:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33179",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7881849?v=4",
        "events_url": "https://api.github.com/users/xieyonn/events{/privacy}",
        "followers_url": "https://api.github.com/users/xieyonn/followers",
        "following_url": "https://api.github.com/users/xieyonn/following{/other_user}",
        "gists_url": "https://api.github.com/users/xieyonn/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/xieyonn",
        "id": 7881849,
        "login": "xieyonn",
        "node_id": "MDQ6VXNlcjc4ODE4NDk=",
        "organizations_url": "https://api.github.com/users/xieyonn/orgs",
        "received_events_url": "https://api.github.com/users/xieyonn/received_events",
        "repos_url": "https://api.github.com/users/xieyonn/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/xieyonn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xieyonn/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/xieyonn",
        "user_view_type": "public"
    }
}