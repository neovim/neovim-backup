{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\n- Windows will truncate some long usernames into `6ch~N` names.\r\n- When calling `vim.fn.stdpath(\"cache\")` in these cases, we get a path containing these truncated names\r\n  - eg: `C:/User/RUNNER~1/AppData/Local/Temp/nvim`\r\n  - Quirk: `stdpath(\"config\")` does not truncate the username portion.\r\n  - This effect is **only** observed when running nvim under `cmd.exe`, not in `powershell.exe` and not in `cmd.exe` spawned from a powershell instance.\r\n- After adding these \"truncated paths\" to the RTP, `nvim_get_runtime_file` will fail to find the files under them.\r\n- Forcing `RUNNER~1` to be `runneradmin` (the true username) will let `nvim_get_runtime_file` find files, ~~but its not practical, except if its possible to force `stdpath(\"cache\")` to return \"full paths\".~~ \r\n  - Calling `uv.fs_realpath` will convert to the long name.\r\n- You can list \"short names\" via `dir /X` when running in `cmd.exe` **not powershell**.\r\n\r\nBelow is a walkthrough of the results of the reproduction script included in this post.\r\n\r\n*Setup, create dirs and files*\r\n\r\n```lua\r\n-- run.lua\r\nvim.cmd(\"version\")\r\n-- Script expects\r\nlocal cache = vim.fn.stdpath(\"cache\")\r\nlocal lua_dir = vim.fs.normalize(cache .. \"/some-dir/lua\")\r\nlocal lua_file = vim.fs.normalize(lua_dir .. \"/abc.lua\")\r\n\r\nvim.fn.mkdir(lua_dir, \"p\")\r\nlocal fd = assert(io.open(lua_file, \"w\"))\r\nfd:write(\"true\")\r\nfd:close()\r\n\r\n-- check file exists\r\nassert(vim.loop.fs_access(lua_file, \"R\"), \"Failed to create lua file\")\r\n```\r\n\r\n```lua\r\nprint(\"Cache:\", cache)\r\nprint(\"Lua file:\", lua_file)\r\nprint(\"RTP\", vim.go.rtp)\r\n```\r\n\r\n\r\nObserve the truncated cache path, note we have not yet attempted to add the\r\ncache path to the RTP\r\n\r\n```\r\nCache: C:\\Users\\RUNNER~1\\AppData\\Local\\Temp\\nvim\r\n\r\nLua file: C:/Users/RUNNER~1/AppData/Local/Temp/nvim/some-dir/lua/abc.lua\r\n\r\nRTP C:\\Users\\runneradmin\\AppData\\Local\\nvim,C:\\Users\\runneradmin\\AppData\\Local\\nvim-data\\site,D:\\a\\nvim-tilde-rtp\\nvim-tilde-rtp\\nvim-win64\\share\\nvim\\runtime,D:\\a\\nvim-tilde-rtp\\nvim-tilde-rtp\\nvim-win64\\lib\\nvim,C:\\Users\\runneradmin\\AppData\\Local\\nvim-data\\site\\after,C:\\Users\\runneradmin\\AppData\\Local\\nvim\\after\r\n```\r\n\r\n\r\nShow all RTP dir, look for lua/abc.lua file. Expected to fail as we have not\r\nadded it to the RTP yet.\r\n\r\n```lua\r\n-- Try to find file (should fail, we have not added it to rtp yet)\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"\", true)))\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"lua/abc.lua\", true)))\r\n```\r\n\r\n```\r\n{ \"D:\\\\a\\\\nvim-tilde-rtp\\\\nvim-tilde-rtp\\\\nvim-win64\\\\share\\\\nvim\\\\runtime\", \"D:\\\\a\\\\nvim-tilde-rtp\\\\nvim-tilde-rtp\\\\nvim-win64\\\\lib\\\\nvim\" }\r\n\r\n{}\r\n```\r\n\r\nNow add the truncated path to the RTP\r\n\r\n\r\n```lua\r\n-- Add cache to rtp\r\nvim.opt.runtimepath:prepend(cache..\"/*\")\r\n-- Now we have RUNNER~1/temp in the RTP\r\nprint(\"RTP\", vim.go.rtp)\r\n```\r\n\r\n```\r\nRTP C:\\Users\\RUNNER~1\\AppData\\Local\\Temp\\nvim/*,C:\\Users\\runneradmin\\AppData\\Local\\nvim,C:\\Users\\runneradmin\\AppData\\Local\\nvim-data\\site,D:\\a\\nvim-tilde-rtp\\nvim-tilde-rtp\\nvim-win64\\share\\nvim\\runtime,D:\\a\\nvim-tilde-rtp\\nvim-tilde-rtp\\nvim-win64\\lib\\nvim,C:\\Users\\runneradmin\\AppData\\Local\\nvim-data\\site\\after,C:\\Users\\runneradmin\\AppData\\Local\\nvim\\after\r\n```\r\n\r\nSearch for file, not we find nothing and the cache dir is not shown in the rtp dirs.\r\n\r\n```lua\r\n-- try to find files, should now work as we have added to rtp\r\n-- but it will fail because the dir contains ~ or possibly fails\r\n-- some \"does it exist?\" check.\r\n-- \r\n-- For ref, windows creates two entries, users/RUNNER~1 (invisible) and\r\n-- users/runneradmin, both pointing to the same dir.\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"\", true)))\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"lua/abc.lua\", true)))\r\n```\r\n\r\n```\r\n{ \"D:\\\\a\\\\nvim-tilde-rtp\\\\nvim-tilde-rtp\\\\nvim-win64\\\\share\\\\nvim\\\\runtime\", \"D:\\\\a\\\\nvim-tilde-rtp\\\\nvim-tilde-rtp\\\\nvim-win64\\\\lib\\\\nvim\" }\r\n\r\n{}\r\n```\r\n\r\nManually swap truncated RUNNER~1 to runneradmin,\r\n\r\n```lua\r\n-- convert `RUNNER~1` into runneradmin in RTP\r\nvim.go.rtp = vim.go.rtp:gsub(\"RUNNER~1\", \"runneradmin\", 1)\r\nprint(\"RTP\", vim.go.rtp)\r\n```\r\n\r\n```\r\nRTP C:\\Users\\runneradmin\\AppData\\Local\\Temp\\nvim/*,C:\\Users\\runneradmin\\AppData\\Local\\nvim,C:\\Users\\runneradmin\\AppData\\Local\\nvim-data\\site,D:\\a\\nvim-tilde-rtp\\nvim-tilde-rtp\\nvim-win64\\share\\nvim\\runtime,D:\\a\\nvim-tilde-rtp\\nvim-tilde-rtp\\nvim-win64\\lib\\nvim,C:\\Users\\runneradmin\\AppData\\Local\\nvim-data\\site\\after,C:\\Users\\runneradmin\\AppData\\Local\\nvim\\after\r\n```\r\n\r\nRepeat the previous search, we find the file now\r\n\r\n```lua\r\n-- Search now succeeds\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"\", true)))\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"lua/abc.lua\", true)))\r\n```\r\n\r\n```\r\n{ \"C:\\\\Users\\\\runneradmin\\\\AppData\\\\Local\\\\Temp\\\\nvim\\\\some-dir\", \"D:\\\\a\\\\nvim-tilde-rtp\\\\nvim-tilde-rtp\\\\nvim-win64\\\\share\\\\nvim\\\\runtime\", \"D:\\\\a\\\\nvim-tilde-rtp\\\\nvim-tilde-rtp\\\\nvim-win64\\\\lib\\\\nvim\" }\r\n\r\n{ \"C:\\\\Users\\\\runneradmin\\\\AppData\\\\Local\\\\Temp\\\\nvim\\\\some-dir\\\\lua\\\\abc.lua\" }\r\n```\r\n\r\n### Steps to reproduce\r\n\r\nSee:\r\n\r\n- https://github.com/rktjmp/nvim-tilde-rtp/actions/runs/6076103075\r\n- https://github.com/rktjmp/nvim-tilde-rtp\r\n\r\nNote: You must have a username long enough (over 8chars?) to invoke the `~1` truncation. By default the GH action \"runneradmin\" satisfies this.\r\n\r\nWorkflow and script reproduced below:\r\n\r\n**Github workflow**\r\n```yaml\r\nname: Run Test\r\n\r\non:\r\n  push:\r\n  workflow_dispatch:\r\n\r\njobs:\r\n  test_stable:\r\n    runs-on: windows-latest\r\n    steps:\r\n    - uses: actions/checkout@v2 # Checking out the repo\r\n    - name: Install Neovim stable\r\n      run: |\r\n        choco install neovim\r\n        Import-Module $env:ChocolateyInstall\\helpers\\chocolateyProfile.psm1\r\n        refreshenv\r\n    - name: Run stable test\r\n      run: |\r\n        c:\\tools\\neovim\\nvim-win64\\bin\\nvim +\"set columns=1000\" -l run.lua\r\n  test_latest:\r\n    runs-on: windows-latest\r\n    steps:\r\n    - uses: actions/checkout@v2 # Checking out the repo\r\n    - name: Install Neovim latest\r\n      run: |\r\n        Invoke-WebRequest -Uri \"https://github.com/neovim/neovim/releases/download/nightly/nvim-win64.zip\" -OutFile \"nvim-win64.zip\"\r\n        Expand-Archive -Path \"nvim-win64.zip\" -DestinationPath .\r\n    - name: Run latest test\r\n      run: |\r\n        .\\nvim-win64\\bin\\nvim +\"set columns=1000\" -l run.lua\r\n```\r\n\r\n**lua script**\r\n```lua\r\nvim.cmd(\"version\")\r\n-- Script expects\r\nlocal cache = vim.fn.stdpath(\"cache\")\r\nlocal lua_dir = vim.fs.normalize(cache .. \"/some-dir/lua\")\r\nlocal lua_file = vim.fs.normalize(lua_dir .. \"/abc.lua\")\r\n\r\nvim.fn.mkdir(lua_dir, \"p\")\r\nlocal fd = assert(io.open(lua_file, \"w\"))\r\nfd:write(\"true\")\r\nfd:close()\r\n\r\n-- check file exists\r\nassert(vim.loop.fs_access(lua_file, \"R\"), \"Failed to create lua file\")\r\n\r\nprint(\"Cache:\", cache)\r\nprint(\"Lua file:\", lua_file)\r\nprint(\"RTP\", vim.go.rtp)\r\n\r\n-- Try to find file (should fail, we have not added it to rtp yet)\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"\", true)))\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"lua/abc.lua\", true)))\r\n\r\n-- Add cache to rtp\r\nvim.opt.runtimepath:prepend(cache..\"/*\")\r\n-- Now we have RUNNER~1/temp in the RTP\r\nprint(\"RTP\", vim.go.rtp)\r\n\r\n-- try to find files, should now work as we have added to rtp\r\n-- but it will fail because the dir contains ~ or possibly fails\r\n-- some \"does it exist?\" check.\r\n-- \r\n-- For ref, windows creates two entries, users/RUNNER~1 (invisible) and\r\n-- users/runneradmin, both pointing to the same dir.\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"\", true)))\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"lua/abc.lua\", true)))\r\n\r\n-- convert `RUNNER~1` into runneradmin in RTP\r\nvim.go.rtp = vim.go.rtp:gsub(\"RUNNER~1\", \"runneradmin\", 1)\r\nprint(\"RTP\", vim.go.rtp)\r\n\r\n-- Search now succeeds\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"\", true)))\r\nprint(vim.inspect(vim.api.nvim_get_runtime_file(\"lua/abc.lua\", true)))\r\n```\r\n\r\n### Expected behavior\r\n\r\n`nvim_get_runtime_files` can search in `RUNNER~1` style paths.\r\n\r\n### Neovim version (nvim -v)\r\n\r\n0.9.1, 0.10.0-dev-1031+gc431d820e\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nNA\r\n\r\n### Operating system/version\r\n\r\nWindows 11\r\n\r\n### Terminal name/version\r\n\r\nNA\r\n\r\n### $TERM environment variable\r\n\r\nNA\r\n\r\n### Installation\r\n\r\nChocolatey, Repo latest release",
    "closed_at": null,
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "On Linux, manually creating\r\n\r\n```\r\n./RUNNER~1/tilde/lua/abc.lua\r\n```\r\n\r\nThen\r\n\r\n```\r\n:   4 lua= vim.opt.rtp:prepend(\"./RUNNER~1/*\")\r\n:   3 lua= vim.go.rtp\r\n:   2 lua= vim.api.nvim_get_runtime_file('', true)\r\n:   1 lua= vim.api.nvim_get_runtime_file('lua/abc.lua', true)\r\n```\r\n\r\nReturns\r\n\r\n```\r\n{ \"./RUNNER~1/tilde/lua/abc.lua\" }\r\n```\r\n\r\nSo it does not seem to be a general issue of `~` expansion in `nvim/path.c`.\r\n\r\n`path.c` includes `fix_fname(path)`, which documents \"expanding longna~1 on windows\", it delegates to `FullName_save(path, force = true)`. Calling these from FFI on a windows system did *not* return expanded paths.\r\n\r\nCalling `uv.fs_realpath` *does* return the correctly expanded path.",
            "created_at": "2023-09-04T17:54:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/25019#issuecomment-1705581153",
            "id": 1705581153,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25019",
            "node_id": "IC_kwDOAPphoM5lqRph",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1705581153/reactions"
            },
            "updated_at": "2023-09-04T18:42:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1705581153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/866010?v=4",
                "events_url": "https://api.github.com/users/rktjmp/events{/privacy}",
                "followers_url": "https://api.github.com/users/rktjmp/followers",
                "following_url": "https://api.github.com/users/rktjmp/following{/other_user}",
                "gists_url": "https://api.github.com/users/rktjmp/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rktjmp",
                "id": 866010,
                "login": "rktjmp",
                "node_id": "MDQ6VXNlcjg2NjAxMA==",
                "organizations_url": "https://api.github.com/users/rktjmp/orgs",
                "received_events_url": "https://api.github.com/users/rktjmp/received_events",
                "repos_url": "https://api.github.com/users/rktjmp/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rktjmp/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rktjmp/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rktjmp",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for the clear report!\r\n\r\nThese are DOS filenames. Vim calls them \"8.3 filenames\". https://github.com/vim/vim/blob/9fcde94176b9c1a3b85d054cc388c49cb17dfb18/src/filepath.c#L364-L367 , see also the Vim 'shortname' option.\r\n\r\nNvim doesn't support this.",
            "created_at": "2023-09-05T16:24:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/25019#issuecomment-1706948951",
            "id": 1706948951,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25019",
            "node_id": "IC_kwDOAPphoM5lvflX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1706948951/reactions"
            },
            "updated_at": "2023-09-05T16:25:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1706948951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Do you think `stdpath` values should be passed through `fs_realpath` to \"unshortname\" them?\r\n\r\nI can understand not supporting them broadly, but neovim itself is returning an unsupported value from a core function.\r\n\r\nThere is a speed bump there, you cant `realpath` a non-existent path, so you cant unshort `stdpath(\"cache\")` if it does not exist for example, so in that case it might be impossible to unshort it without writing new code, or ensuring the dirs always exist.",
            "created_at": "2023-09-05T16:52:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/25019#issuecomment-1706972020",
            "id": 1706972020,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25019",
            "node_id": "IC_kwDOAPphoM5lvlN0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1706972020/reactions"
            },
            "updated_at": "2023-09-05T16:52:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1706972020",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/866010?v=4",
                "events_url": "https://api.github.com/users/rktjmp/events{/privacy}",
                "followers_url": "https://api.github.com/users/rktjmp/followers",
                "following_url": "https://api.github.com/users/rktjmp/following{/other_user}",
                "gists_url": "https://api.github.com/users/rktjmp/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rktjmp",
                "id": 866010,
                "login": "rktjmp",
                "node_id": "MDQ6VXNlcjg2NjAxMA==",
                "organizations_url": "https://api.github.com/users/rktjmp/orgs",
                "received_events_url": "https://api.github.com/users/rktjmp/received_events",
                "repos_url": "https://api.github.com/users/rktjmp/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rktjmp/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rktjmp/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rktjmp",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "reopened with a clearer scope of the issue",
            "created_at": "2023-09-06T09:04:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/25019#issuecomment-1707956086",
            "id": 1707956086,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25019",
            "node_id": "IC_kwDOAPphoM5lzVd2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1707956086/reactions"
            },
            "updated_at": "2023-09-06T09:04:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1707956086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25019/comments",
    "created_at": "2023-09-04T17:16:26Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/25019/events",
    "html_url": "https://github.com/neovim/neovim/issues/25019",
    "id": 1880659250,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "d4c5f9",
            "default": false,
            "description": null,
            "id": 109461219,
            "name": "platform:windows",
            "node_id": "MDU6TGFiZWwxMDk0NjEyMTk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/platform:windows"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/25019/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5wGJUy",
    "number": 25019,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/25019/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": "reopened",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/25019/timeline",
    "title": "vim.fn.stdpath() can return unsupported 8.3 DOS filenames",
    "updated_at": "2025-01-19T11:31:39Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/25019",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/866010?v=4",
        "events_url": "https://api.github.com/users/rktjmp/events{/privacy}",
        "followers_url": "https://api.github.com/users/rktjmp/followers",
        "following_url": "https://api.github.com/users/rktjmp/following{/other_user}",
        "gists_url": "https://api.github.com/users/rktjmp/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rktjmp",
        "id": 866010,
        "login": "rktjmp",
        "node_id": "MDQ6VXNlcjg2NjAxMA==",
        "organizations_url": "https://api.github.com/users/rktjmp/orgs",
        "received_events_url": "https://api.github.com/users/rktjmp/received_events",
        "repos_url": "https://api.github.com/users/rktjmp/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rktjmp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rktjmp/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rktjmp",
        "user_view_type": "public"
    }
}