{
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu",
        "user_view_type": "public"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu",
            "user_view_type": "public"
        }
    ],
    "author_association": "NONE",
    "body": "### Problem\n\n\r\n\r\nWhen the character `%` is added to the Ex command-line, and the command in the prompt is defined with the options `preview` and `complete = \"file\"` (via `nvim_create_user_command`), Neovim crashes with a memory error.\r\n\r\nThe crash happens only if the current buffer has a file. If `expand(\"%\")` is empty it seems to work.\r\n\r\nSometimes it crashes with a `SIGSEGV` (with no error messages), and some other times it prints `E41: Out of memory!` and dies.\r\n\r\nI found the issue with `complete = \"file\"`, but it also fails with `\"dir\"`. Other completions (like, `\"help\"`, `\"syntax\"`, or `\"file_in_path\"`) have no problems.\r\n\r\nI tested multiple Neovim versions (Linux x86_64, from Nix and from the prebuilt packages in <https://github.com/neovim/neovim/releases>), and it seems that it is broken since 0.8 (when `preview` was added).\r\n\r\n\r\n\r\n\r\n\n\n### Steps to reproduce\n\n1. Create a user-command with `complete = \"file\"` and `preview`. The function for `preview` can be empty.\r\n\r\n    ```lua\r\n    local function callback()\r\n    end\r\n\r\n    local function preview()\r\n        return 0\r\n    end\r\n\r\n    vim.api.nvim_create_user_command(\"TestCommand\", callback, {\r\n        nargs = \"?\",        -- or \"*\"\r\n        complete = \"file\",  -- or \"dir\"\r\n        preview = preview,\r\n    })\r\n    ```\r\n\r\n1. Ensure that the current buffer has a file (so `expand(\"%\")` is not empty).\r\n\r\n    ```vim\r\n    :e /tmp/testfile\r\n    ```\r\n\r\n1. Open the command-line and type the command with any argument without a `%`.\r\n\r\n    The completion will work as expected.\r\n\r\n    ```vim\r\n    :TestCommand /tmp/<Tab>\r\n    ```\r\n\r\n1. Now, write a `%` in the command-line. Neovim crashes immediately.\r\n\r\n    ```vim\r\n    :TestCommand /tmp/%\r\n    ```\r\n\r\n\r\nThe steps can be automated:\r\n\r\n1. A Lua script to create the user-command, open a file, and simulate the `:TestCommand %` input:\r\n\r\n    ```lua\r\n    local function callback()\r\n    end\r\n\r\n    local function preview()\r\n        return 0\r\n    end\r\n\r\n    vim.api.nvim_create_user_command(\"TestCommand\", callback, {\r\n        nargs = \"?\",        -- or \"*\"\r\n        complete = \"file\",  -- or \"dir\"\r\n        preview = preview,\r\n    })\r\n\r\n\r\n\r\n    vim.defer_fn(\r\n        function()\r\n            -- Open any file.\r\n            vim.cmd.edit(\"/tmp/test\" .. os.time())\r\n\r\n            -- Type the command with a `%`.\r\n            vim.api.nvim_feedkeys(\":TestCommand %\", \"n\", false)\r\n        end,\r\n        200\r\n    )\r\n    ```\r\n\r\n2. Then, open Neovim with it:\r\n\r\n    ```console\r\n    $ nvim --clean -c 'so test-sigsegv.lua'\r\n    ```\r\n\r\n\r\n\n\n### Expected behavior\n\nNo crashes.\n\n### Neovim version (nvim -v)\n\n0.10.0\n\n### Vim (not Nvim) behaves the same?\n\nThis is exclusive to Neovim\n\n### Operating system/version\n\nDebian 12\n\n### Terminal name/version\n\nAlacritty\n\n### $TERM environment variable\n\nalacritty\n\n### Installation\n\nPrebuilt packages and nixpkgs",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I did some debugging against the commit 0f4f7d32ce5d6d3b751b0b01455770f3b72531b9.\r\n\r\nWhen a `%` is pressed the `SIGSEGV` is caught in GDB.\r\n\r\n<details>\r\n\r\n<summary>Full Backtrace</summary>\r\n\r\n```\r\nThread 1 \"nvim\" received signal SIGSEGV, Segmentation fault.\r\n0x00007f1c60a7fc01 in __memmove_avx_unaligned ()\r\n   from /nix/store/apab5i73dqa09wx0q27b6fbhd1r18ihl-glibc-2.39-31/lib/libc.so.6\r\n(gdb) bt\r\n#0  0x00007f1c60a7fc01 in __memmove_avx_unaligned ()\r\n   from /nix/store/apab5i73dqa09wx0q27b6fbhd1r18ihl-glibc-2.39-31/lib/libc.so.6\r\n#1  0x000000000052de2c in memmove (__len=<optimized out>, __src=<optimized out>, __dest=<optimized out>,\r\n    __dest=<optimized out>, __src=<optimized out>, __len=<optimized out>)\r\n    at /nix/store/s3pvsv4as7mc8i2nwnk2hnsyi2qdj4bq-glibc-2.39-31-dev/include/bits/string_fortified.h:36\r\n#2  repl_cmdline (eap=eap@entry=0x7ffea1c01120, src=<optimized out>, srclen=1,\r\n    repl=repl@entry=0x9f2a20 \"/tmp/test1716143731\", cmdlinep=cmdlinep@entry=0x7ffea1c01098)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_docmd.c:4025\r\n#3  0x0000000000536009 in expand_filename (eap=0x7ffea1c01120, cmdlinep=0x7ffea1c01098, errormsgp=0x7ffea1c00ab8)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_docmd.c:3943\r\n#4  0x00000000005289d3 in execute_cmd0 (retv=retv@entry=0x7ffea1c00ab4, eap=eap@entry=0x7ffea1c01120,\r\n    errormsg=errormsg@entry=0x7ffea1c00ab8, preview=preview@entry=true)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_docmd.c:1643\r\n#5  0x0000000000528ffe in execute_cmd (eap=0x7ffea1c01120, cmdinfo=<optimized out>, preview=<optimized out>)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_docmd.c:1791\r\n#6  0x000000000053da9e in cmdpreview_may_show (s=s@entry=0x7ffea1c01730)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_getln.c:2573\r\n#7  0x000000000053dd46 in command_line_changed (s=s@entry=0x7ffea1c01730)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_getln.c:2657\r\n#8  0x0000000000540671 in command_line_handle_key (s=s@entry=0x7ffea1c01730)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_getln.c:2171\r\n#9  0x0000000000540ddf in command_line_execute (state=0x7ffea1c01730, key=<optimized out>)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_getln.c:1390\r\n#10 0x0000000000683ebd in state_enter (s=0x7ffea1c01730) at /home/nix/binaries/neovim/src/nvim/state.c:101\r\n#11 0x000000000053e3dc in command_line_enter (firstc=firstc@entry=58, count=count@entry=1, indent=indent@entry=0,\r\n    clear_ccline=clear_ccline@entry=true) at /home/nix/binaries/neovim/src/nvim/ex_getln.c:842\r\n#12 0x000000000053e813 in getcmdline (firstc=firstc@entry=58, count=count@entry=1, indent=indent@entry=0,\r\n    do_concat=do_concat@entry=true) at /home/nix/binaries/neovim/src/nvim/ex_getln.c:2719\r\n#13 0x000000000053ec0f in getexline (c=58, cookie=<optimized out>, indent=0, do_concat=true)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_getln.c:2962\r\n#14 0x000000000052a79c in do_cmdline (cmdline=<optimized out>, fgetline=0x53ebe6 <getexline>, cookie=0x0, flags=0)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_docmd.c:578\r\n#15 0x00000000005e6cb5 in nv_colon (cap=0x7ffea1c020f0) at /home/nix/binaries/neovim/src/nvim/normal.c:3179\r\n#16 0x00000000005df741 in normal_execute (state=0x7ffea1c02080, key=<optimized out>)\r\n    at /home/nix/binaries/neovim/src/nvim/normal.c:1229\r\n#17 0x0000000000683ebd in state_enter (s=0x7ffea1c02080) at /home/nix/binaries/neovim/src/nvim/state.c:101\r\n#18 0x00000000005de16f in normal_enter (cmdwin=false, noexmode=false)\r\n    at /home/nix/binaries/neovim/src/nvim/normal.c:518\r\n#19 0x00000000005a0001 in main (argc=7, argv=<optimized out>) at /home/nix/binaries/neovim/src/nvim/main.c:664\r\n```\r\n\r\n</details>\r\n\r\n\r\nThe `SIGSEGV` is triggered in the `ex_docmd.c:4025`:\r\n\r\nhttps://github.com/neovim/neovim/blob/0f4f7d32ce5d6d3b751b0b01455770f3b72531b9/src/nvim/ex_docmd.c#L4025\r\n\r\nIt seems that `*cmdlinep` is `NULL`:\r\n\r\n```\r\n(gdb) frame 2\r\n#2  repl_cmdline (eap=eap@entry=0x7ffea1c01120, src=<optimized out>, srclen=1,\r\n    repl=repl@entry=0x9f2a20 \"/tmp/test1716143731\", cmdlinep=cmdlinep@entry=0x7ffea1c01098)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_docmd.c:4025\r\n4025\t  memmove(new_cmdline, *cmdlinep, i);\r\n\r\n(gdb) print new_cmdline\r\n$1 = 0x7f8979b64010 \"\"\r\n\r\n(gdb) print cmdlinep\r\n$2 = (char **) 0x7ffd18f88318\r\n\r\n(gdb) print *cmdlinep\r\n$3 = 0x0\r\n\r\n(gdb) print i\r\n$4 = 28152748\r\n```\r\n\r\nIn the function `cmdpreview_may_show()`, the expression `ea.cmdlinep` has the same value:\r\n\r\n```\r\n(gdb) frame 6\r\n#6  0x000000000053da9e in cmdpreview_may_show (s=s@entry=0x7ffd18f889b0)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_getln.c:2573\r\n2573\t  cmdpreview_type = execute_cmd(&ea, &cmdinfo, true);\r\n\r\n(gdb) print ea.cmdlinep\r\n$5 = (char **) 0x7ffd18f88318\r\n\r\n(gdb) print *ea.cmdlinep\r\n$6 = 0x0\r\n```\r\n\r\nThe field `cmdlinep` is initialized in `parse_cmdline()` (which is called by `cmdpreview_may_show()` before the crash), but it takes the address of a local variable:\r\n\r\nhttps://github.com/neovim/neovim/blob/0f4f7d32ce5d6d3b751b0b01455770f3b72531b9/src/nvim/ex_docmd.c#L1471-L1490\r\n\r\nMaybe there is something I'm missing, but the address stored in `cmdlinep` should not be used after `parse_cmdline()` returns.\r\n\r\nI put a breakpoint in `parse_cmdline()` right after initialing the `*eap` variable.\r\n\r\n```\r\n(gdb) break ex_docmd.c:1495\r\nBreakpoint 1 at 0x5285af: file /home/nix/binaries/neovim/src/nvim/ex_docmd.c, line 1496.\r\n\r\n(gdb) c\r\nContinuing.\r\n\r\nThread 1 \"nvim\" hit Breakpoint 1, parse_cmdline (cmdline=<optimized out>, eap=0x7ffef953f680, cmdinfo=0x7ffef953f740,\r\n    errormsg=0x7ffef953f658) at /home/nix/binaries/neovim/src/nvim/ex_docmd.c:1496\r\n1496\t  if (parse_command_modifiers(eap, errormsg, &cmdinfo->cmdmod, false) == FAIL) {\r\n\r\n(gdb) print eap.cmdlinep\r\n$1 = (char **) 0x7ffef953f5f8\r\n\r\n(gdb) print *eap.cmdlinep\r\n$2 = 0x1e7b740 \"TestCommand %\"\r\n```\r\n\r\nThe value in `cmdlinep` is an address in the stack, and the memory pointed by `*cmdlinep` is on the heap:\r\n\r\n```\r\n(gdb) info proc mappings\r\n\r\n          Start Addr           End Addr       Size     Offset  Perms  objfile\r\n[...]\r\n           0x1e6b000          0x1f6f000   0x104000        0x0  rw-p   [heap]\r\n[...]\r\n      0x7ffef9521000     0x7ffef9543000    0x22000        0x0  rw-p   [stack]\r\n```\r\n\r\nAfter returning from `parse_cmdline` the value in `ea.cmdlinep` is still valid until it calls to `cmdpreview_prepare`: \r\n\r\n```\r\n(gdb) finish\r\nRun till exit from #0  parse_cmdline (cmdline=<optimized out>, eap=0x7ffef953f680, cmdinfo=0x7ffef953f740,\r\n    errormsg=0x7ffef953f658) at /home/nix/binaries/neovim/src/nvim/ex_docmd.c:1496\r\n0x000000000053d9be in cmdpreview_may_show (s=s@entry=0x7ffef953fc90)\r\n    at /home/nix/binaries/neovim/src/nvim/ex_getln.c:2522\r\n2522\t  if (!parse_cmdline(cmdline, &ea, &cmdinfo, &errormsg)) {\r\nValue returned is $5 = true\r\n\r\n(gdb) display *ea.cmdlinep\r\n1: *ea.cmdlinep = 0x1e7b740 \"TestCommand %\"\r\n\r\n(gdb) next\r\n2526\t  emsg_off--;\r\n1: *ea.cmdlinep = 0x1e7b740 \"TestCommand %\"\r\n\r\n[...]\r\n\r\n(gdb)\r\n2549\t  block_autocmds();              // Block events\r\n1: *ea.cmdlinep = 0x1e7b740 \"TestCommand %\"\r\n\r\n(gdb)\r\n2552\t  cmdpreview_prepare(&cpinfo);\r\n1: *ea.cmdlinep = 0x1e7b740 \"TestCommand %\"\r\n\r\n(gdb)\r\n2555\t  if (icm_split && (cmdpreview_buf = cmdpreview_open_buf()) == NULL) {\r\n1: *ea.cmdlinep = 0x0\r\n```\r\n\r\n`block_autocmds()` has no local variables, so maybe it is just a coincidence that the value is not overwritten until the call to `cmdpreview_prepare()`.\r\n\r\n### Possible Fix\r\n\r\nIf I reinitialize the `cmdlinep` field after the call to `parse_cmdline()`, with the address of `cmdline` in `cmdpreview_may_show()` (the same action done by `parse_cmdline()`, but with a variable valid during the execution of `cmdpreview_may_show()`), then I can't reproduce the crash anymore.\r\n\r\n```diff\r\ndiff --git a/src/nvim/ex_getln.c b/src/nvim/ex_getln.c\r\nindex 8c9e6e45..a88e9651 100644\r\n--- a/src/nvim/ex_getln.c\r\n+++ b/src/nvim/ex_getln.c\r\n@@ -2525,6 +2525,8 @@ static bool cmdpreview_may_show(CommandLineState *s)\r\n   }\r\n   emsg_off--;\r\n\r\n+  ea.cmdlinep = &cmdline;\r\n+\r\n   // Check if command is previewable, if not, don't attempt to show preview\r\n   if (!(ea.argt & EX_PREVIEW)) {\r\n     undo_cmdmod(&cmdinfo.cmdmod);\r\n\r\n```\r\n\r\nI didn't sent a pull-request because I'm not sure if this is a valid solution.\r\n\r\n\r\n### Address Sanitizer\r\n\r\nAfter finding the issue, I realized that this problem should be visible by ASAN. I recompiled Neovim with `-DENABLE_ASAN_UBSAN=1` (without the possible fix), and it reports a `stack-use-after-return`.\r\n\r\n<details>\r\n\r\n<summary>ASAN Report</summary>\r\n\r\n```\r\n=================================================================\r\n==68834==ERROR: AddressSanitizer: stack-use-after-return on address 0x7f9eb095ada0 at pc 0x000000814d03 bp 0x7fffeaf113f0 sp 0x7fffeaf113e8\r\nREAD of size 8 at 0x7f9eb095ada0 thread T0\r\n    #0 0x814d02 in repl_cmdline /home/nix/binaries/neovim/src/nvim/ex_docmd.c:4013\r\n    #1 0x82305a in expand_filename /home/nix/binaries/neovim/src/nvim/ex_docmd.c:3943\r\n    #2 0x80635c in execute_cmd0 /home/nix/binaries/neovim/src/nvim/ex_docmd.c:1643\r\n    #3 0x8080a2 in execute_cmd /home/nix/binaries/neovim/src/nvim/ex_docmd.c:1791\r\n    #4 0x871216 in cmdpreview_may_show /home/nix/binaries/neovim/src/nvim/ex_getln.c:2575\r\n    #5 0x8776d4 in command_line_changed /home/nix/binaries/neovim/src/nvim/ex_getln.c:2659\r\n    #6 0x861ad6 in command_line_handle_key /home/nix/binaries/neovim/src/nvim/ex_getln.c:2171\r\n    #7 0x863dff in command_line_execute /home/nix/binaries/neovim/src/nvim/ex_getln.c:1390\r\n    #8 0xde824e in state_enter /home/nix/binaries/neovim/src/nvim/state.c:101\r\n    #9 0x8593c5 in command_line_enter /home/nix/binaries/neovim/src/nvim/ex_getln.c:842\r\n    #10 0x86723a in getcmdline /home/nix/binaries/neovim/src/nvim/ex_getln.c:2721\r\n    #11 0x86cafa in getexline /home/nix/binaries/neovim/src/nvim/ex_getln.c:2964\r\n    #12 0x80de96 in do_cmdline /home/nix/binaries/neovim/src/nvim/ex_docmd.c:578\r\n    #13 0xb2c5ee in nv_colon /home/nix/binaries/neovim/src/nvim/normal.c:3179\r\n    #14 0xb22a05 in normal_execute /home/nix/binaries/neovim/src/nvim/normal.c:1229\r\n    #15 0xde824e in state_enter /home/nix/binaries/neovim/src/nvim/state.c:101\r\n    #16 0xb12ac2 in normal_enter /home/nix/binaries/neovim/src/nvim/normal.c:518\r\n    #17 0x9e57df in main /home/nix/binaries/neovim/src/nvim/main.c:664\r\n    #18 0x7f9eb287410d in __libc_start_call_main (/nix/store/apab5i73dqa09wx0q27b6fbhd1r18ihl-glibc-2.39-31/lib/libc.so.6+0x2a10d) (BuildId: cfd0adeaaed7d46a379028cc9694fc95dd125976)\r\n    #19 0x7f9eb28741c8 in __libc_start_main_alias_1 (/nix/store/apab5i73dqa09wx0q27b6fbhd1r18ihl-glibc-2.39-31/lib/libc.so.6+0x2a1c8) (BuildId: cfd0adeaaed7d46a379028cc9694fc95dd125976)\r\n    #20 0x46dba4 in _start (/home/nix/binaries/install/bin/nvim+0x46dba4)\r\n\r\nAddress 0x7f9eb095ada0 is located in stack of thread T0 at offset 32 in frame\r\n    #0 0x804a42 in parse_cmdline /home/nix/binaries/neovim/src/nvim/ex_docmd.c:1472\r\n\r\n  This frame has 2 object(s):\r\n    [32, 40) 'cmdline' (line 1471) <== Memory access at offset 32 is inside this variable\r\n    [64, 76) 'save_cursor' (line 1478)\r\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\r\n      (longjmp and C++ exceptions *are* supported)\r\nSUMMARY: AddressSanitizer: stack-use-after-return /home/nix/binaries/neovim/src/nvim/ex_docmd.c:4013 in repl_cmdline\r\nShadow bytes around the buggy address:\r\n  0x7f9eb095ab00: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 00 00 00 00\r\n  0x7f9eb095ab80: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 00 00 00 00\r\n  0x7f9eb095ac00: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 00 00 00 00\r\n  0x7f9eb095ac80: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 00 00 00 00\r\n  0x7f9eb095ad00: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 00 00 00 00\r\n=>0x7f9eb095ad80: f5 f5 f5 f5[f5]f5 f5 f5 f5 f5 f5 f5 00 00 00 00\r\n  0x7f9eb095ae00: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 00 00 00 00\r\n  0x7f9eb095ae80: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 00 00 00 00\r\n  0x7f9eb095af00: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 00 00 00 00\r\n  0x7f9eb095af80: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5\r\n  0x7f9eb095b000: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07\r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==68834==ABORTING\r\n```\r\n\r\n</details>\r\n\r\nWith the possible fix, ASAN does not report any problem.\r\n",
            "created_at": "2024-05-19T20:15:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/28851#issuecomment-2119347892",
            "id": 2119347892,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28851",
            "node_id": "IC_kwDOAPphoM5-Uq60",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2119347892/reactions"
            },
            "updated_at": "2024-05-19T20:15:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2119347892",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/37484?v=4",
                "events_url": "https://api.github.com/users/ayosec/events{/privacy}",
                "followers_url": "https://api.github.com/users/ayosec/followers",
                "following_url": "https://api.github.com/users/ayosec/following{/other_user}",
                "gists_url": "https://api.github.com/users/ayosec/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ayosec",
                "id": 37484,
                "login": "ayosec",
                "node_id": "MDQ6VXNlcjM3NDg0",
                "organizations_url": "https://api.github.com/users/ayosec/orgs",
                "received_events_url": "https://api.github.com/users/ayosec/received_events",
                "repos_url": "https://api.github.com/users/ayosec/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ayosec/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ayosec/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ayosec",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28851/comments",
    "created_at": "2024-05-19T19:59:31Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28851/events",
    "html_url": "https://github.com/neovim/neovim/issues/28851",
    "id": 2304759796,
    "labels": [
        {
            "color": "0E8A16",
            "default": false,
            "description": "issue contains a stacktrace/ASAN log",
            "id": 435854079,
            "name": "has:backtrace",
            "node_id": "MDU6TGFiZWw0MzU4NTQwNzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:backtrace"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "issue reporting a crash or segfault",
            "id": 435854234,
            "name": "bug-crash",
            "node_id": "MDU6TGFiZWw0MzU4NTQyMzQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-crash"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "command line, also cmdwin",
            "id": 5826989442,
            "name": "cmdline-mode",
            "node_id": "LA_kwDOAPphoM8AAAABW1DNgg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/cmdline-mode"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28851/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6JX9f0",
    "number": 28851,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28851/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28851/timeline",
    "title": "SIGSEGV when adding a `%` to user-commands with `preview` and `complete = \"file\"` options.",
    "updated_at": "2025-01-19T11:43:08Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28851",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/37484?v=4",
        "events_url": "https://api.github.com/users/ayosec/events{/privacy}",
        "followers_url": "https://api.github.com/users/ayosec/followers",
        "following_url": "https://api.github.com/users/ayosec/following{/other_user}",
        "gists_url": "https://api.github.com/users/ayosec/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ayosec",
        "id": 37484,
        "login": "ayosec",
        "node_id": "MDQ6VXNlcjM3NDg0",
        "organizations_url": "https://api.github.com/users/ayosec/orgs",
        "received_events_url": "https://api.github.com/users/ayosec/received_events",
        "repos_url": "https://api.github.com/users/ayosec/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ayosec/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ayosec/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ayosec",
        "user_view_type": "public"
    }
}