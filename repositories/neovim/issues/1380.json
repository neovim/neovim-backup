{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "1. Libuv supports file notifications\n2. Working with files that are also changed by other editors in (n)vim is finnicky at best, unless of course I'm misconfiguring. In that case mea culpa.\n3. As mentioned by http://andre.arko.net/2013/09/11/vim-is-the-worst-editor/, if you have a lot of buffers open and some paranoid settings, things become quite wasteful.\n\nSince all our target OS'es support file notifications and even libuv does, perhaps we could use that?\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I didn't know Windows had an inotify-like feature. I'd love this!\n",
            "created_at": "2014-11-03T18:10:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-61521143",
            "id": 61521143,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTIxMTQz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/61521143/reactions"
            },
            "updated_at": "2014-11-03T18:10:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/61521143",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Please please please implement this feature. This issue has really hit me hard over the past 6 months or so. There are plugins that cause false alarms about the file changing. There's nothing worse than writing a whole bunch of stuff, then wanting to write, and being told that the file has changed. I need to remember what changed (or hope I can dig it out of undo), or gamble that it's a false positive. Eventually I condition myself to ignore the false positives, which inevitably causes issues with other file types that don't have false positives. \n",
            "created_at": "2014-11-07T19:23:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-62197846",
            "id": 62197846,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTk3ODQ2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62197846/reactions"
            },
            "updated_at": "2023-07-15T23:57:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62197846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87875?v=4",
                "events_url": "https://api.github.com/users/bluddy/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluddy/followers",
                "following_url": "https://api.github.com/users/bluddy/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluddy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluddy",
                "id": 87875,
                "login": "bluddy",
                "node_id": "MDQ6VXNlcjg3ODc1",
                "organizations_url": "https://api.github.com/users/bluddy/orgs",
                "received_events_url": "https://api.github.com/users/bluddy/received_events",
                "repos_url": "https://api.github.com/users/bluddy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluddy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluddy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluddy",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It would seem like I hit a sensitive point here :). Too bad I think this is too involved for an entry-level issue but it looks like a nice thing to get into for anyone with some experience in C and/or Neovim to get started with after they finish the feature they're currently working on (I'm not sure I'll get there first).\n",
            "created_at": "2014-11-08T09:26:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-62251554",
            "id": 62251554,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjUxNTU0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62251554/reactions"
            },
            "updated_at": "2014-11-08T09:26:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62251554",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hi, I might try to tackle this one. Unfortunately I have no experience with the (neo)vim codebase, where should I be looking precisely?\nEDIT: https://github.com/neovim/neovim/blob/205ac8d176f67514e3bc8fa069c8e7d92be69094/src/nvim/fileio.c#L4783 seems to be a good starting point. At least for copying the error messages, the code is otherwise pretty awful.\n",
            "created_at": "2014-11-18T18:00:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-63515227",
            "id": 63515227,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTE1MjI3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/63515227/reactions"
            },
            "updated_at": "2023-07-15T23:58:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/63515227",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491850?v=4",
                "events_url": "https://api.github.com/users/doppioandante/events{/privacy}",
                "followers_url": "https://api.github.com/users/doppioandante/followers",
                "following_url": "https://api.github.com/users/doppioandante/following{/other_user}",
                "gists_url": "https://api.github.com/users/doppioandante/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/doppioandante",
                "id": 491850,
                "login": "doppioandante",
                "node_id": "MDQ6VXNlcjQ5MTg1MA==",
                "organizations_url": "https://api.github.com/users/doppioandante/orgs",
                "received_events_url": "https://api.github.com/users/doppioandante/received_events",
                "repos_url": "https://api.github.com/users/doppioandante/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/doppioandante/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/doppioandante/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/doppioandante",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> At least for copying the error messages, the code is otherwise pretty awful.\n\nI'm sure this change is not trivial at all, but we won't know until we try. There are parts of the codebase that are still mostly uncharted territory. It usually takes separating a feature you think might use what you want to replace (autocommands might be a good start), and following the code up and down until you get a good picture. Stepping through it in a debugger sometimes helps a lot too :).\n",
            "created_at": "2014-11-18T20:17:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-63537334",
            "id": 63537334,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTM3MzM0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/63537334/reactions"
            },
            "updated_at": "2019-10-27T06:49:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/63537334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Some updates:\nI've been investigating the best way to do this and this is what I've come up so far:\n- vim checks whether writing is going to conflict in a lot of different ways. Sometimes the check is done in place(like in `buf_check_timestamp()`), sometimes it's delegated to helper functions like `check_overwrite()`.\n  Note that those two functions are not the same thing, but one could ask if all these checks scattered all over the place could be somehow simplified. I came to the conclusion that this is just too much work, and leaving them there for the time being would not conflict with a notification feature.\n- Libuv provides file system events; the specific function is `uv_fs_event_start()`, but there could be some problems with this function: <br>\n  1) On virtual filesystems, like virtualbox shared folders, `uv_fs_event_start()` doesn't work properly. There's an option to circumvent this and use stat informations instead of the OS notification system, but it's currently not implemented in libuv.<br>\n  2) `uv_fs_event_start()` accepts the path to be watched as an argument; it could be a file(ideal in our case, as we would attach a watcher to a buffer as soon as it's opened) or a directory. \n  Unfortunately, uv_fs_event_start doesn't work at all if the file being watched is edited by vim: see https://github.com/joyent/libuv/issues/1585<br>\n  I discussed the issue with indutny after he had closed it, and while this behaviour makes sense from an implementation POV, because the inode descriptor watched is invalid, the function signature leads one to think that libuv is going to watch the path, independently of what happens to the file.\n\nAnother sore point highlighted by the issue is that the vim mechanism to save a file is overly complicated. If I edit the file with nano I just get one edit notification as expected, with vim I get, besides the edit notification, three(!) rename notification.\nI wanted to figure out the reason for this before reopening the issue, but the code that saves a buffer is tremendously complicated:\nhttps://github.com/neovim/neovim/blob/master/src/nvim/fileio.c#L2247\n`buf_write` are 1551 lines of totally unreadable and unmantainable code. The backup mechanism badly needs a rewrite.\n\nIf the issue with libuv cannot be solved, there are two possible workarounds:\n- listens for events coming from the path where the file is located; this always works, but filtering all the events is not very elegant and could turn out to be problematic in performance if the dir contains files that are written very frequentely.\n- Use a code similar to that of `buf_check_timestamp()`, but run asynchronously in a loop. This is possibly even more inelegant than the previous solution, but would work on virtual filesystems as bonus.\n",
            "created_at": "2014-11-23T23:06:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-64139405",
            "id": 64139405,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTM5NDA1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64139405/reactions"
            },
            "updated_at": "2014-11-23T23:06:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64139405",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491850?v=4",
                "events_url": "https://api.github.com/users/doppioandante/events{/privacy}",
                "followers_url": "https://api.github.com/users/doppioandante/followers",
                "following_url": "https://api.github.com/users/doppioandante/following{/other_user}",
                "gists_url": "https://api.github.com/users/doppioandante/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/doppioandante",
                "id": 491850,
                "login": "doppioandante",
                "node_id": "MDQ6VXNlcjQ5MTg1MA==",
                "organizations_url": "https://api.github.com/users/doppioandante/orgs",
                "received_events_url": "https://api.github.com/users/doppioandante/received_events",
                "repos_url": "https://api.github.com/users/doppioandante/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/doppioandante/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/doppioandante/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/doppioandante",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Nice findings.\nI think we should try to understand why vim is doing the way it does to save a file. I mean, if it's really necessary. If not, I would go for refactoring file save so that it doesn't delete/rename and fs events can be  used without surprises.\nThat would take time, though.\n",
            "created_at": "2014-11-24T08:39:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-64164569",
            "id": 64164569,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTY0NTY5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64164569/reactions"
            },
            "updated_at": "2019-10-27T06:51:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64164569",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Agre with @elmart. Note changing the way Vim saves files would also have positive effects on other aspects of file system integration. As an example, take OS X file tags (which have superseded the old style labels and are stored as xattr): currently, these are lost on every file write when editing with Vim.\n",
            "created_at": "2014-11-24T09:10:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-64167161",
            "id": 64167161,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTY3MTYx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64167161/reactions"
            },
            "updated_at": "2019-10-27T06:51:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64167161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80906?v=4",
                "events_url": "https://api.github.com/users/kopischke/events{/privacy}",
                "followers_url": "https://api.github.com/users/kopischke/followers",
                "following_url": "https://api.github.com/users/kopischke/following{/other_user}",
                "gists_url": "https://api.github.com/users/kopischke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kopischke",
                "id": 80906,
                "login": "kopischke",
                "node_id": "MDQ6VXNlcjgwOTA2",
                "organizations_url": "https://api.github.com/users/kopischke/orgs",
                "received_events_url": "https://api.github.com/users/kopischke/received_events",
                "repos_url": "https://api.github.com/users/kopischke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kopischke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kopischke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kopischke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I agree as well: after all the main purpose of neovim is refactoring. I'll open a separate issue for it though.\n",
            "created_at": "2014-11-24T11:46:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-64182332",
            "id": 64182332,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTgyMzMy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64182332/reactions"
            },
            "updated_at": "2019-10-27T06:51:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64182332",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491850?v=4",
                "events_url": "https://api.github.com/users/doppioandante/events{/privacy}",
                "followers_url": "https://api.github.com/users/doppioandante/followers",
                "following_url": "https://api.github.com/users/doppioandante/following{/other_user}",
                "gists_url": "https://api.github.com/users/doppioandante/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/doppioandante",
                "id": 491850,
                "login": "doppioandante",
                "node_id": "MDQ6VXNlcjQ5MTg1MA==",
                "organizations_url": "https://api.github.com/users/doppioandante/orgs",
                "received_events_url": "https://api.github.com/users/doppioandante/received_events",
                "repos_url": "https://api.github.com/users/doppioandante/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/doppioandante/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/doppioandante/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/doppioandante",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "On November 24, 2014 2:06:51 AM EAT, Enrico Lumetti notifications@github.com wrote:\n\n> Some updates:\n> I've been investigating the best way to do this and this is what I've\n> come up so far:\n> - vim checks whether writing is going to conflict in a lot of different\n>   ways. Sometimes the check is done in place(like in\n>   `buf_check_timestamp()`), sometimes it's delegated to helper functions\n>   like `check_overwrite()`.\n>   Note that those two functions are not the same thing, but one could ask\n>   if all these checks scattered all over the place could be somehow\n>   simplified. I came to the conclusion that this is just too much work,\n>   and leaving them there for the time being would not conflict with a\n>   notification feature.\n> - Libuv provides file system events; the specific function is\n>   `uv_fs_event_start()`, but there could be some problems with this\n>   function: <br>\n>   1) On virtual filesystems, like virtualbox shared folders,\n>   `uv_fs_event_start()` doesn't work properly. There's an option to\n>   circumvent this and use stat informations instead of the OS\n>   notification system, but it's currently not implemented in libuv.<br>\n>   2) `uv_fs_event_start()` accepts the path to be watched as an argument;\n>   it could be a file(ideal in our case, as we would attach a watcher to a\n>   buffer as soon as it's opened) or a directory. \n>   Unfortunately, uv_fs_event_start doesn't work at all if the file being\n>   watched is edited by vim: see\n>   https://github.com/joyent/libuv/issues/1585<br>\n>   I discussed the issue with indutny after he had closed it, and while\n>   this behaviour makes sense from an implementation POV, because the\n>   inode descriptor watched is invalid, the function signature leads one\n>   to think that libuv is going to watch the path, independently of what\n>   happens to the file.\n\nIs not it solved by just creating a new event after notification about rename or remove and removing the old one?\n\n> Another sore point highlighted by the issue is that the vim mechanism\n> to save a file is overly complicated. If I edit the file with nano I\n> just get one edit notification as expected, with vim I get, besides the\n> edit notification, three(!) rename notification.\n> I wanted to figure out the reason for this before reopening the issue,\n> but the code that saves a buffer is tremendously complicated:\n> https://github.com/neovim/neovim/blob/master/src/nvim/fileio.c#L2247\n> `buf_write` are 1551 lines of totally unreadable and unmantainable\n> code. The backup mechanism badly needs a rewrite.\n> \n> If the issue with libuv cannot be solved, there are two possible\n> workarounds:\n> - listens for events coming from the path where the file is located;\n>   this always works, but filtering all the events is not very elegant and\n>   could turn out to be problematic in performance if the dir contains\n>   files that are written very frequentely.\n> - Use a code similar to that of `buf_check_timestamp()`, but run\n>   asynchronously in a loop. This is possibly even more inelegant than the\n>   previous solution, but would work on virtual filesystems as bonus.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/1380#issuecomment-64139405\n",
            "created_at": "2014-11-24T11:56:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-64184368",
            "id": 64184368,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTg0MzY4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64184368/reactions"
            },
            "updated_at": "2023-07-15T23:57:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64184368",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Oh yes, I forgot that solution :) yeah it works but the implementation gets a bit messy, I think I'll go that way for the first proof of concept impementation.\nStill I wanted to point out the funny behaviour of vim saving files.\n",
            "created_at": "2014-11-24T11:59:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-64184686",
            "id": 64184686,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTg0Njg2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64184686/reactions"
            },
            "updated_at": "2019-10-27T06:51:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64184686",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491850?v=4",
                "events_url": "https://api.github.com/users/doppioandante/events{/privacy}",
                "followers_url": "https://api.github.com/users/doppioandante/followers",
                "following_url": "https://api.github.com/users/doppioandante/following{/other_user}",
                "gists_url": "https://api.github.com/users/doppioandante/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/doppioandante",
                "id": 491850,
                "login": "doppioandante",
                "node_id": "MDQ6VXNlcjQ5MTg1MA==",
                "organizations_url": "https://api.github.com/users/doppioandante/orgs",
                "received_events_url": "https://api.github.com/users/doppioandante/received_events",
                "repos_url": "https://api.github.com/users/doppioandante/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/doppioandante/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/doppioandante/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/doppioandante",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Great. That lets you continue with your original task.\nThe other task (refactoring save) can then be addressed as a separated task at another moment.\nBut it's an interesting thing to refactor, so please file an issue about that, so that we don't forget.\n",
            "created_at": "2014-11-24T12:05:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-64185220",
            "id": 64185220,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTg1MjIw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64185220/reactions"
            },
            "updated_at": "2019-10-27T06:52:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/64185220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Is there a plan to implement events such that I can move files and directories around and have (n)vim still be able to save the file I have open, in its new location? I had a structure like this:\n\n`a/b/c.json`\n\nI moved `b/` into `a/new/`, so the new path was `a/new/b/c.json`, and when I attempt to write the file, (n)vim just breaks saying it can't write the file. I had to yank its contents, open the new location for the file, and paste the contents in there.\n\nI'd like my editor to be smart about all of these potential changes, but it was especially egregious that it broke considering I moved it _with NERDTree_, inside vim. CtrlP also failed to update in response to the move, trying to open path that no longer existed.\n\nI much prefer Atom's behavior, which is to always and immediately reflect the current state of the file system in the editor (except unsaved contents of files, but I use save-on-focus-lost).\n\nThanks all who are working on this. I'd like to contribute but I am fairly incompetent at C.\n",
            "created_at": "2015-03-05T00:40:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-77283133",
            "id": 77283133,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MjgzMTMz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/77283133/reactions"
            },
            "updated_at": "2023-07-15T23:58:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/77283133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491376?v=4",
                "events_url": "https://api.github.com/users/phoenixeliot/events{/privacy}",
                "followers_url": "https://api.github.com/users/phoenixeliot/followers",
                "following_url": "https://api.github.com/users/phoenixeliot/following{/other_user}",
                "gists_url": "https://api.github.com/users/phoenixeliot/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/phoenixeliot",
                "id": 491376,
                "login": "phoenixeliot",
                "node_id": "MDQ6VXNlcjQ5MTM3Ng==",
                "organizations_url": "https://api.github.com/users/phoenixeliot/orgs",
                "received_events_url": "https://api.github.com/users/phoenixeliot/received_events",
                "repos_url": "https://api.github.com/users/phoenixeliot/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/phoenixeliot/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/phoenixeliot/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/phoenixeliot",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Might be useful: https://github.com/johnae/spook\n",
            "created_at": "2015-12-27T03:51:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-167377691",
            "id": 167377691,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzM3NzY5MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/167377691/reactions"
            },
            "updated_at": "2015-12-27T03:51:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/167377691",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk I see you've mentioned my tool spook. If it is indeed useful I'm glad as I'm using neovim myself. However, I'm not sure it will help you all that much. It's quite limited to a few use cases and detecting file moves isn't one of them (yet at least). The file system events part of libuv isn't very comprehensive (I guess, to support all the platforms where it runs).\nI've been toying with some ideas since I'd like to support more use cases. So far I haven't come up with anything that isn't an ugly hack though.\n",
            "created_at": "2016-03-06T17:10:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-192937482",
            "id": 192937482,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MjkzNzQ4Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/192937482/reactions"
            },
            "updated_at": "2016-03-06T17:10:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/192937482",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/28332?v=4",
                "events_url": "https://api.github.com/users/johnae/events{/privacy}",
                "followers_url": "https://api.github.com/users/johnae/followers",
                "following_url": "https://api.github.com/users/johnae/following{/other_user}",
                "gists_url": "https://api.github.com/users/johnae/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/johnae",
                "id": 28332,
                "login": "johnae",
                "node_id": "MDQ6VXNlcjI4MzMy",
                "organizations_url": "https://api.github.com/users/johnae/orgs",
                "received_events_url": "https://api.github.com/users/johnae/received_events",
                "repos_url": "https://api.github.com/users/johnae/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/johnae/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/johnae/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/johnae",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@johnae Thanks for the heads up, that will save us some time and also supports keeping this in a later milestone. We might just keep an eye on how things mature in libuv. If you make progress let us know.\n",
            "created_at": "2016-03-06T19:46:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-192972907",
            "id": 192972907,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5Mjk3MjkwNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/192972907/reactions"
            },
            "updated_at": "2016-03-06T19:46:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/192972907",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I have a memory that part of the reason Vim's save jumps through a few hoops is that it tries to never leave the file data un-retrievable. So, for example, it writes to a different filename, so that if some disk error occurs and vim then crashes, the original file is left unmodified. After saving, it then renames the new file to overwrite the original. This is an atomic filesystem operation, so should either entirely succeed, or leave the original file unmodified again.\n\nI don't know how it ends up with _three_ move operations though.\n",
            "created_at": "2016-09-06T16:50:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-245014504",
            "id": 245014504,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0NTAxNDUwNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/245014504/reactions"
            },
            "updated_at": "2016-09-06T16:50:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/245014504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/137979?v=4",
                "events_url": "https://api.github.com/users/tartley/events{/privacy}",
                "followers_url": "https://api.github.com/users/tartley/followers",
                "following_url": "https://api.github.com/users/tartley/following{/other_user}",
                "gists_url": "https://api.github.com/users/tartley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tartley",
                "id": 137979,
                "login": "tartley",
                "node_id": "MDQ6VXNlcjEzNzk3OQ==",
                "organizations_url": "https://api.github.com/users/tartley/orgs",
                "received_events_url": "https://api.github.com/users/tartley/received_events",
                "repos_url": "https://api.github.com/users/tartley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tartley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tartley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tartley",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've started looking into this.\n\nSave that file to onchange.c\n\n```\n/*\n * Code taken from:\n * http://nikhilm.github.io/uvbook/filesystem.html#file-change-events\n * Relates to http://nikhilm.github.io/uvbook/filesystem.html#file-change-events\n * compile with gcc % -luv\n * \n */\n#include <uv.h>\n#include <stdlib.h>\n\n/* aezae */\nstatic char* command;\n\nvoid run_command(uv_fs_event_t *handle, const char *filename, int events, int status) {\n\n    char path[1024];\n    size_t size = 1023;\n    // Does not handle error if path is longer than 1023.\n    uv_fs_event_getpath(handle, path, &size);\n    path[size] = '\\0';\n\n    fprintf(stderr, \"Change detected in %s: \", path);\n    if (events & UV_RENAME)\n        fprintf(stderr, \"renamed\");\n    if (events & UV_CHANGE)\n        fprintf(stderr, \"changed\");\n\n    fprintf(stderr, \" %s\\n\", filename ? filename : \"\");\n    /* system(command); */\n}\n\nint main(int argc, char **argv) {\n    if (argc <= 2) {\n        fprintf(stderr, \"Usage: %s <command> <file1> [file2 ...]\\n\", argv[0]);\n        return 1;\n    }\n\n    uv_loop_t* loop = uv_default_loop();\n    command = argv[1];\n\n    while (argc-- > 2) {\n        fprintf(stderr, \"Adding watch on %s\\n\", argv[argc]);\n        uv_fs_event_t *fs_event_req = malloc(sizeof(uv_fs_event_t));\n        uv_fs_event_init(loop, fs_event_req);\n        // The recursive flag watches subdirectories too.\n        //   doc says only RECURSIVE does sthg but seems untrue\n        //   UV_FS_EVENT_WATCH_ENTRY = 1,\n  /* UV_FS_EVENT_STAT = 2, */\n  /* UV_FS_EVENT_RECURSIVE = 4 */\n        uv_fs_event_start(fs_event_req, run_command, argv[argc], UV_FS_EVENT_WATCH_ENTRY);\n\n    }\n\n    return uv_run(loop, UV_RUN_DEFAULT);\n}\n\n```\n\nYou call it ./a.out unusedCommand onchange.c\nThen do some change to onchange.c, here it prints:\n\n```\nChange detected in onchange.c: renamed onchange.c\nChange detected in onchange.c: changed onchange.c\nChange detected in onchange.c: renamed onchange.c\nChange detected in onchange.c: renamed onchange.c\n```\n",
            "created_at": "2016-11-06T22:55:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-258717816",
            "id": 258717816,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODcxNzgxNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/258717816/reactions"
            },
            "updated_at": "2023-07-15T23:56:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/258717816",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@teto It is much easier to determine what is going on with `strace`: after\n\n```\nstrace -f -o nvim.strace bin/nvim -u NONE -i NONE --cmd 'edit ../README.md' --cmd 'write' --cmd 'qa'\n```\n\nI got a rather lengthy strace which shows that Neovim\n1. Does some stats and reads `README.md`. I am not going into details because it is clear that this is not related to writing, but related to reading.\n2. Unlinks `README.md~`.\n3. Renames `README.md` to `README.md~`.\n4. Opens `README.md` for writing (O_WRONLY|O_CREAT|O_TRUNC|O_CLOEXEC).\n5. Writes to `README.md`.\n6. `fsync()`s `README.md`.\n7. Two stats on `README.md` (not sure why).\n8. `close()`s `README.md`.\n9. Changes `README.md`’s permissions.\n10. Writes message that `README.md` was written to stderr.\n11. Gets user ID, then opens and does something with `/etc/passwd`.\n12. Stats `README.md` again, but now using full path (all previous operations used relative path, like supplied on the command line).\n13. Finally unlinks `README.md~`, then closes and unlinks the swap file.\n\nOne of the problems is that exact behaviour is controlled by some options; and AFAIR there are some different code paths depending on the results of `stat()`ting the file.\n",
            "created_at": "2016-11-06T23:11:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-258718813",
            "id": 258718813,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODcxODgxMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/258718813/reactions"
            },
            "updated_at": "2016-11-06T23:11:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/258718813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ZyX-I that's great insight.\nIn fact I was looking at https://github.com/neovim/neovim/pull/1791 as this is my most missed (n)vim feature. I was trying to check for libuv's file event feature along with learning about the related nvim parts. Btw do you know what's the entry function that loads a file into an nvim buffer ?\n",
            "created_at": "2016-11-06T23:16:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-258719109",
            "id": 258719109,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODcxOTEwOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/258719109/reactions"
            },
            "updated_at": "2016-11-06T23:16:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/258719109",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@teto You need something in `fileio.c`. `memfile.c` contains in-memory representation.\n",
            "created_at": "2016-11-06T23:39:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-258720486",
            "id": 258720486,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODcyMDQ4Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/258720486/reactions"
            },
            "updated_at": "2016-11-06T23:39:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/258720486",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "[moved to a later comment below]",
            "created_at": "2017-09-01T07:40:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-326512623",
            "id": 326512623,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjUxMjYyMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/326512623/reactions"
            },
            "updated_at": "2023-07-15T23:56:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/326512623",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I am thinking to implement git’s file comparing technique to check whether the file is changed or not. Then ask the user that  he/she want to check the changes between two file. If yes it will show changes else it will ask for override the file. What's your opinion? :) ",
            "created_at": "2019-03-20T16:27:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-474914350",
            "id": 474914350,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDkxNDM1MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/474914350/reactions"
            },
            "updated_at": "2019-03-21T13:00:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/474914350",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17456593?v=4",
                "events_url": "https://api.github.com/users/mmkumr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mmkumr/followers",
                "following_url": "https://api.github.com/users/mmkumr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mmkumr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mmkumr",
                "id": 17456593,
                "login": "mmkumr",
                "node_id": "MDQ6VXNlcjE3NDU2NTkz",
                "organizations_url": "https://api.github.com/users/mmkumr/orgs",
                "received_events_url": "https://api.github.com/users/mmkumr/received_events",
                "repos_url": "https://api.github.com/users/mmkumr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mmkumr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mmkumr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mmkumr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@mmkumr what git technique do you mean, specifically? git does not have built-in passive file-change notifications, it depends on e.g. https://facebook.github.io/watchman/ for that.",
            "created_at": "2019-03-20T19:03:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-474985654",
            "id": 474985654,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDk4NTY1NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/474985654/reactions"
            },
            "updated_at": "2019-03-21T13:00:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/474985654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk We can check the sha256sum of both the files.  And if there's is some difference then we can show notification to the user. If user want to see the changes then we can use vimdiff. ",
            "created_at": "2019-03-21T07:51:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-475137742",
            "id": 475137742,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTEzNzc0Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/475137742/reactions"
            },
            "updated_at": "2019-03-21T13:00:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/475137742",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17456593?v=4",
                "events_url": "https://api.github.com/users/mmkumr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mmkumr/followers",
                "following_url": "https://api.github.com/users/mmkumr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mmkumr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mmkumr",
                "id": 17456593,
                "login": "mmkumr",
                "node_id": "MDQ6VXNlcjE3NDU2NTkz",
                "organizations_url": "https://api.github.com/users/mmkumr/orgs",
                "received_events_url": "https://api.github.com/users/mmkumr/received_events",
                "repos_url": "https://api.github.com/users/mmkumr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mmkumr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mmkumr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mmkumr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@mmkumr one of the challenge is how to do it without naively polling. If you are going to compare sha256sum, you need to do it regularly which wastes resources whereas the OS can notify you instead of a file change (and the notification can be too late if you set a high time interval).\r\n\r\nHence relying on tools like watchman should be better.\r\n\r\nOne difficulty with vim is that it moves files around before saving them as described in https://github.com/neovim/neovim/issues/1380#issuecomment-258718813 so working with a plugin first to prototype and get a feel for the required changes and tools (watchman vs entr etc) sounds good.\r\n",
            "created_at": "2019-03-21T07:58:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-475139057",
            "id": 475139057,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTEzOTA1Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/475139057/reactions"
            },
            "updated_at": "2019-03-21T13:00:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/475139057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Is this why neovim doesn't tell me when an open file has been updated when I return from suspend?  I'm trying to figure out how to recover traditional vi/vim behavior.",
            "created_at": "2019-04-11T16:14:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-482180885",
            "id": 482180885,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MjE4MDg4NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/482180885/reactions"
            },
            "updated_at": "2019-04-21T20:01:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/482180885",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/159714?v=4",
                "events_url": "https://api.github.com/users/PorcelainMouse/events{/privacy}",
                "followers_url": "https://api.github.com/users/PorcelainMouse/followers",
                "following_url": "https://api.github.com/users/PorcelainMouse/following{/other_user}",
                "gists_url": "https://api.github.com/users/PorcelainMouse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/PorcelainMouse",
                "id": 159714,
                "login": "PorcelainMouse",
                "node_id": "MDQ6VXNlcjE1OTcxNA==",
                "organizations_url": "https://api.github.com/users/PorcelainMouse/orgs",
                "received_events_url": "https://api.github.com/users/PorcelainMouse/received_events",
                "repos_url": "https://api.github.com/users/PorcelainMouse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/PorcelainMouse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/PorcelainMouse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/PorcelainMouse",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@teto Problem with watchman is that  it will increase the installation time of neovim. I am not going to use shachecksum. I am trying to compare files using C program it may increase the speed and efficiency or I am planning to use diff tool of linux. Yes, I am trying to implement this as a plugin if plugin works fine then we can merge it with nvim.",
            "created_at": "2019-05-03T09:08:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-489021851",
            "id": 489021851,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTAyMTg1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/489021851/reactions"
            },
            "updated_at": "2019-10-27T04:42:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/489021851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17456593?v=4",
                "events_url": "https://api.github.com/users/mmkumr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mmkumr/followers",
                "following_url": "https://api.github.com/users/mmkumr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mmkumr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mmkumr",
                "id": 17456593,
                "login": "mmkumr",
                "node_id": "MDQ6VXNlcjE3NDU2NTkz",
                "organizations_url": "https://api.github.com/users/mmkumr/orgs",
                "received_events_url": "https://api.github.com/users/mmkumr/received_events",
                "repos_url": "https://api.github.com/users/mmkumr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mmkumr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mmkumr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mmkumr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk ok. ",
            "created_at": "2019-05-03T09:10:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-489022846",
            "id": 489022846,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTAyMjg0Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/489022846/reactions"
            },
            "updated_at": "2019-10-27T04:42:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/489022846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17456593?v=4",
                "events_url": "https://api.github.com/users/mmkumr/events{/privacy}",
                "followers_url": "https://api.github.com/users/mmkumr/followers",
                "following_url": "https://api.github.com/users/mmkumr/following{/other_user}",
                "gists_url": "https://api.github.com/users/mmkumr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mmkumr",
                "id": 17456593,
                "login": "mmkumr",
                "node_id": "MDQ6VXNlcjE3NDU2NTkz",
                "organizations_url": "https://api.github.com/users/mmkumr/orgs",
                "received_events_url": "https://api.github.com/users/mmkumr/received_events",
                "repos_url": "https://api.github.com/users/mmkumr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mmkumr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mmkumr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mmkumr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Status\r\nMoved to https://github.com/neovim/neovim/issues/1380#issuecomment-1946115753",
            "created_at": "2019-10-27T06:54:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-546667155",
            "id": 546667155,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjY2NzE1NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/546667155/reactions"
            },
            "updated_at": "2024-02-15T13:39:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/546667155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I have been interested in this issue and after reading the discussion, I read the code in `buf_write`and skimmed through the code in`readfile`, and I agree with @doppioandante, the code does need a huge refactor. (In fact I even found a (very minor) dead if condition check in `buf_write`.) I'd be more than willing to help in fixing it.\r\n\r\nCurrently nvim tries to check only for timestamp changes while writing a file, which is done through `check_mtime` which explains #7959. Calling `buf_check_timestamp` in place of `check_mtime` fixes the issue. (Although I don't know if it would be a \"neat\" solution.)\r\n\r\nThe other checks are done through `buf_check_timestamp` , which is called via `check_timestamps` in `ex_checktime` (when `:checktime` is executed), and some helper functions like `buf_contents_changed`, `bufIsChanged` and so on. \r\n\r\nI think `check_overwrite`, as the name suggests, checks for if it is okay to overwrite the current file. (eg. if the swapfile already exists.)\r\n\r\nI was looking into tools like [fswatch](https://emcrisostomo.github.io/fswatch/), [entr](http://eradman.com/entrproject/) and [watchman](https://facebook.github.io/watchman/) and I thought of giving fswatch a try.\r\n\r\n@teto, @justinmk Any updates on if `vim.loop.new_fs_event()` works on windows? Also why was the idea of using fswatch or some other tool dropped? Upon reading about the limitations of fswatch, I don't think the problem of virtual file systems appears there, but I do not know how efficient it would be, especially if multiple files are open. (Which generally is true for me.)\r\n\r\nHow should I progress further with this? Should I try implementing a plugin using fswatch? Or should I look into  `vim.loop.new_fs_event()`?",
            "created_at": "2020-03-19T10:50:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-601113151",
            "id": 601113151,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTExMzE1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 4,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/601113151/reactions"
            },
            "updated_at": "2020-07-01T20:49:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/601113151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure how `new_fs_event` works under the hood, but I find that it not reliable on mac osx.  In some cases if I modify the file it will trigger and in other cases it will not.  In many cases I can verify that the file modification time changes but it is not triggered.   So for my purposes, I'm planning on polling the file modification time over a time interval as a workaround",
            "created_at": "2020-06-28T00:46:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-650658304",
            "id": 650658304,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDY1ODMwNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/650658304/reactions"
            },
            "updated_at": "2020-06-28T00:46:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/650658304",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/810762?v=4",
                "events_url": "https://api.github.com/users/svermeulen/events{/privacy}",
                "followers_url": "https://api.github.com/users/svermeulen/followers",
                "following_url": "https://api.github.com/users/svermeulen/following{/other_user}",
                "gists_url": "https://api.github.com/users/svermeulen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/svermeulen",
                "id": 810762,
                "login": "svermeulen",
                "node_id": "MDQ6VXNlcjgxMDc2Mg==",
                "organizations_url": "https://api.github.com/users/svermeulen/orgs",
                "received_events_url": "https://api.github.com/users/svermeulen/received_events",
                "repos_url": "https://api.github.com/users/svermeulen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/svermeulen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/svermeulen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/svermeulen",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I ended up doing it this way:\r\n\r\n```lua\r\nlocal w = vim.loop.new_fs_poll()\r\nlocal function on_change(bufNr, filePath)\r\n  vim.api.nvim_command('checktime ' .. bufNr)\r\n  w:stop()\r\n  watch_file(bufNr, filePath)\r\nend\r\nfunction watch_file(bufNr, filePath)\r\n  w:start(filePath, 1000, vim.schedule_wrap(function(...)\r\n    on_change(bufNr, filePath) end))\r\nend\r\nvim.api.nvim_command(\r\n  \"command! -nargs=0 Watch call luaeval('watch_file(_A[1], _A[2])', [bufnr('%'), expand('%:p')])\")\r\n```",
            "created_at": "2020-06-28T01:29:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-650664507",
            "id": 650664507,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDY2NDUwNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/650664507/reactions"
            },
            "updated_at": "2020-06-28T01:29:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/650664507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/810762?v=4",
                "events_url": "https://api.github.com/users/svermeulen/events{/privacy}",
                "followers_url": "https://api.github.com/users/svermeulen/followers",
                "following_url": "https://api.github.com/users/svermeulen/following{/other_user}",
                "gists_url": "https://api.github.com/users/svermeulen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/svermeulen",
                "id": 810762,
                "login": "svermeulen",
                "node_id": "MDQ6VXNlcjgxMDc2Mg==",
                "organizations_url": "https://api.github.com/users/svermeulen/orgs",
                "received_events_url": "https://api.github.com/users/svermeulen/received_events",
                "repos_url": "https://api.github.com/users/svermeulen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/svermeulen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/svermeulen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/svermeulen",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "It looks like the consensus is to use file watching, but to expand on the sha-sum idea, just for completeness:\r\n\r\n- When loading or saving a file store a digest of its contents.\r\n- If the mtime has changed, recompute the digest to see if it was really a change.\r\n- If not, suppress the \"file changed\" notification.\r\n\r\nThis could be simpler to implement since it requires no additional OS features, but should still eliminate most bogus \"file changed\" prompts.",
            "created_at": "2021-07-03T09:07:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-873374249",
            "id": 873374249,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzM3NDI0OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/873374249/reactions"
            },
            "updated_at": "2021-07-03T09:07:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/873374249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1077360?v=4",
                "events_url": "https://api.github.com/users/elaforge/events{/privacy}",
                "followers_url": "https://api.github.com/users/elaforge/followers",
                "following_url": "https://api.github.com/users/elaforge/following{/other_user}",
                "gists_url": "https://api.github.com/users/elaforge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elaforge",
                "id": 1077360,
                "login": "elaforge",
                "node_id": "MDQ6VXNlcjEwNzczNjA=",
                "organizations_url": "https://api.github.com/users/elaforge/orgs",
                "received_events_url": "https://api.github.com/users/elaforge/received_events",
                "repos_url": "https://api.github.com/users/elaforge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elaforge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elaforge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elaforge",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@elaforge zig has an implemented solution, which is very close to what you suggest: https://github.com/ziglang/zig/issues/330\r\n\r\nThis blog post also elaborates on the OS-specific problems during implementation: https://ziglang.org/download/0.4.0/release-notes.html#Build-Artifact-Caching\r\n",
            "created_at": "2021-07-21T20:16:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-884470686",
            "id": 884470686,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "IC_kwDOAPphoM40t_Oe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/884470686/reactions"
            },
            "updated_at": "2021-07-21T20:16:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/884470686",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13089667?v=4",
                "events_url": "https://api.github.com/users/matu3ba/events{/privacy}",
                "followers_url": "https://api.github.com/users/matu3ba/followers",
                "following_url": "https://api.github.com/users/matu3ba/following{/other_user}",
                "gists_url": "https://api.github.com/users/matu3ba/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/matu3ba",
                "id": 13089667,
                "login": "matu3ba",
                "node_id": "MDQ6VXNlcjEzMDg5NjY3",
                "organizations_url": "https://api.github.com/users/matu3ba/orgs",
                "received_events_url": "https://api.github.com/users/matu3ba/received_events",
                "repos_url": "https://api.github.com/users/matu3ba/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/matu3ba/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matu3ba/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/matu3ba",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Status\r\n\r\n- Related:\r\n    - #1785\r\n- We have `_watchfiles.lua` for LSP.\r\n- `vim.loop.new_fs_event()` works well on macOS/Windows.\r\n    - But it's slow on Linux. So we fallback to ~~`fswatch` [#27347](https://github.com/neovim/neovim/pull/27347)~~ `inotify-tools` [#29374](https://github.com/neovim/neovim/pull/29374) on Linux\r\n    - [Documented](https://neovim.io/doc/user/lua.html#watch-file) at `:help watch-file`\r\n- [question (resolved)](https://github.com/neovim/neovim/issues/1380#issuecomment-64139405):\r\n  > If I edit the file with nano I just get one notification as expected, with vim I get, besides the edit notification, three(!) rename notifications.\r\n    - To address that [ZyX suggests](https://github.com/neovim/neovim/issues/1380#issuecomment-64184368):\r\n    > just created a new event after notification about rename or remove and removing the old one?\r\n    - That seems to work, and is mentioned at `:help watch-file` (essentially `watcher:stop()` followed by `watcher:start()`)\r\n- [open question](https://github.com/neovim/neovim/issues/1380#issuecomment-64139405): \r\n  > On virtual filesystems, like virtualbox shared folders, uv_fs_event_start() doesn't work properly. There's an option to circumvent this and use stat informations instead of the OS notification system, but it's currently not implemented in libuv.\r\n\r\n# TODO\r\n\r\n- Lift our LSP module `_watchfiles.lua` [#22405](https://github.com/neovim/neovim/pull/22405) [#27347](https://github.com/neovim/neovim/pull/27347) into a generic \"file-watcher\" interface.\r\n- Use it for 'autoread'.\r\n    - That would address https://github.com/neovim/neovim/issues/7959\r\n    - Previous: See also https://github.com/neovim/neovim/pull/5599\r\n- Alternative (simpler) 'autoread' implementation: [compare file hashes](https://github.com/neovim/neovim/issues/1380#issuecomment-873374249)\r\n    1. On file-load, store a digest/hash of the contents.\r\n    1. If the mtime has changed, recompute the digest to see if it changed.\r\n    1. If not, suppress the \"file changed\" notification.\r\n- 'autoread' UX improvements:\r\n    - [ ] Show a diff when we prompt the user for an update?\r\n    - [ ] Logging/visibility: https://github.com/neovim/neovim/pull/12503\r\n    - ~~New option to enable or disable filewatching itself.~~\r\n\r\n# Notes\r\n\r\n## File watching is tricky and expensive\r\n\r\n#23291 , #23500 are reminders that the edge-cases (recursive directory watching) of inotify and friends need to be wrapped in a higher layer. We probably should use (\"vend or depend\") a proven tool to deal with file-watcher edge cases.\r\n\r\n## Third-party tools\r\n\r\n- sunjon ([and lewis6991](https://github.com/neovim/neovim/issues/23291#issuecomment-1632855972)) mentioned https://github.com/emcrisostomo/fswatch which also works on Windows.\r\n- [entr](https://github.com/eradman/entr) (no Windows support)\r\n- https://facebook.github.io/watchman/\r\n- https://github.com/watchexec/watchexec\r\n\r\n## Edge cases (from the \"entr\" readme)\r\n\r\n<details>\r\n<summary>Scripting with inotify-tools is difficult because of many edge cases:</summary>\r\n\r\n> 1. Many applications attempt to make the file save operation atomic by writing a new file and then removing the original. entr deals with this by closing the old file descriptor and reopening it using the same pathname. Since there is a small delay while the new file is renamed, we must wait for the new file to appear before running the supplied command and attempting to watch the new file.\r\n> 2. File change events that occur while the utility is running need to be processed so as to ensure that files that have been replaced are monitored, but these events should not trigger an execution when the child process ends. entr allows you to safely edit files while tests are running without a repeated invocation of the utility.\r\n> 3. Typically version control software will often update a series of files in rapid succession. Ideally the build is launched when then entire operation is complete. To cope with this behavior entr repeatedly probes for subsequent events, and only executes the utility when the kernel returns with no results after a short timeout.\r\n> 4. The events reported when saving files on an NFS mount are different than those of a local file system. On Linux an inotify may report IN_MOVE_SELF|IN_DELETE_SELF instead of IN_MODIFY|IN_CLOSE_WRITE and on BSD kqueue may report NOTE_RENAME|NOTE_DELETE instead of NOTE_WRITE|NOTE_EXTEND.\r\n> 5. A race condition exists when executing a script that is also under watch since a script cannot be executed while another process has it open for write. Rather than allowing the enigmatic error “Text file busy”, entr retries the execution.\r\n> 6. On Linux editors that use the Gnome's GIO may write to a file and then subsequently delete it. To deal with this entr consolidates events over 50ms before responding.\r\n> 7. In some cases an editor will rename a file without removing it. This occurs the first time a file is saved in Vim if the backup option is set. To deal with this events must be explicitly unregistered to prevent the kernel from tracking changes to backup files.\r\n</details>\r\n",
            "created_at": "2024-02-15T13:39:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/1380#issuecomment-1946115753",
            "id": 1946115753,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1380",
            "node_id": "IC_kwDOAPphoM5z_16p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 10,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 10,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1946115753/reactions"
            },
            "updated_at": "2024-06-17T22:24:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1946115753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 36,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/1380/comments",
    "created_at": "2014-11-03T10:35:25Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/1380/events",
    "html_url": "https://github.com/neovim/neovim/issues/1380",
    "id": 47580495,
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "file metadata/attributes, filenames, path manipulation",
            "id": 3386070083,
            "name": "filesystem",
            "node_id": "LA_kwDOAPphoM7J01RD",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filesystem"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "configuration, settings",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/1380/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWU0NzU4MDQ5NQ==",
    "number": 1380,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 38,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 39,
        "url": "https://api.github.com/repos/neovim/neovim/issues/1380/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/1380/timeline",
    "title": "better 'autoread' (file-change detection)",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:59:54Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/1380",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
        "events_url": "https://api.github.com/users/aktau/events{/privacy}",
        "followers_url": "https://api.github.com/users/aktau/followers",
        "following_url": "https://api.github.com/users/aktau/following{/other_user}",
        "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/aktau",
        "id": 189413,
        "login": "aktau",
        "node_id": "MDQ6VXNlcjE4OTQxMw==",
        "organizations_url": "https://api.github.com/users/aktau/orgs",
        "received_events_url": "https://api.github.com/users/aktau/received_events",
        "repos_url": "https://api.github.com/users/aktau/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/aktau",
        "user_view_type": "public"
    }
}