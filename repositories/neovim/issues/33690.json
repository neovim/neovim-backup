{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nNoticed that the rendering of the glyphs makes it different sizes.\n\nThought it would be [blink.cmp](https://github.com/Saghen/blink.cmp/issues/1476) but filed a bug report and it seems like it isn't.\n\nInterestingly enough, when I move my arrow keys down to select the item, it becomes normal sized again.\n\n[image before select](https://i.imgur.com/bbNNUDX.png)\n\n[image after select](https://i.imgur.com/GCxqv3a.png)\n\nI checked with ghostty + kitty and it happens in both places.\n\n\n\n### Steps to reproduce\n\nnvim $FILE.go\n\n`~/.config/nvim/lua/plugins/blink-cmp/init.lua`\n\n```\nreturn {\n    'saghen/blink.cmp',\n    dependencies = {\n        -- 'rafamadriz/friendly-snippets',\n    },\n    lazy = false,\n    -- use a release tag to download pre-built binaries\n    version = 'v0.*',\n    ---@module 'blink.cmp'\n    ---@type blink.cmp.Config\n    opts = {\n        keymap = { preset = 'enter' },\n        completion = {\n            keyword = {\n                range = 'full',\n            },\n            trigger = {\n                show_in_snippet = true,\n                show_on_keyword = true,\n                show_on_trigger_character = true,\n                show_on_blocked_trigger_characters = { ' ', '\\n', '\\t' },\n                show_on_accept_on_trigger_character = true,\n                show_on_insert_on_trigger_character = true,\n                show_on_x_blocked_trigger_characters = { \"'\", '\"', '(' },\n            },\n\n            list = {\n                max_items = 200,\n                selection = {\n                    -- preselect = function(ctx)\n                    --     return ctx.mode == 'cmdline' and 'auto_insert' or 'preselect'\n                    -- end,\n                    preselect = function(ctx)\n                        return ctx.mode ~= 'cmdline' and not require('blink.cmp').snippet_active({ direction = 1 })\n                    end,\n                },\n                cycle = {\n                    from_bottom = true,\n                    from_top = true,\n                },\n            },\n\n            accept = {\n                create_undo_point = true,\n                auto_brackets = {\n                    enabled = true,\n                    default_brackets = { '(', ')' },\n                    override_brackets_for_filetypes = {},\n                    kind_resolution = {\n                        enabled = true,\n                        blocked_filetypes = { 'typescriptreact', 'javascriptreact', 'vue' },\n                    },\n                    semantic_token_resolution = {\n                        enabled = true,\n                        blocked_filetypes = {},\n                        timeout_ms = 400,\n                    },\n                },\n            },\n\n            menu = {\n                enabled = true,\n                min_width = 15,\n                max_height = 10,\n                border = 'rounded',\n                winblend = vim.o.pumblend,\n                -- winhighlight = 'Normal:BlinkCmpMenu,FloatBorder:BlinkCmpMenuBorder,CursorLine:BlinkCmpMenuSelection,Search:None',\n                -- Keep the cursor X lines away from the top/bottom of the window\n                scrolloff = 2,\n                scrollbar = true,\n                -- Which directions to show the window,\n                -- falling back to the next direction when there's not enough space\n                direction_priority = { 's', 'n' },\n                -- Controls how the completion items are rendered on the popup window\n                draw = {\n                    -- Aligns the keyword you've typed to a component in the menu\n                    align_to = 'label', -- or 'none' to disable\n                    -- Left and right padding, optionally { left, right } for different padding on each side\n                    padding = 1,\n                    -- Gap between columns\n                    gap = 1,\n                    treesitter = { 'lsp' },\n\n                    -- Components to render, grouped by column\n                    columns = { { 'kind_icon' }, { 'label', 'label_description', gap = 1 } },\n                    components = {\n                        kind_icon = {\n                            ellipsis = false,\n                            text = function(ctx)\n                                return ctx.kind_icon .. ctx.icon_gap\n                            end,\n                            highlight = function(ctx)\n                                return ctx.kind_hl\n                            end,\n                        },\n\n                        kind = {\n                            ellipsis = false,\n                            width = { fill = true },\n                            text = function(ctx)\n                                return ctx.kind\n                            end,\n                            highlight = function(ctx)\n                                return ctx.kind_hl\n                            end,\n                        },\n                        label = {\n                            width = { fill = true, max = 60 },\n                            text = function(ctx)\n                                return ctx.label .. ctx.label_detail\n                            end,\n                            highlight = function(ctx)\n                                -- label and label details\n                                local highlights = {\n                                    {\n                                        0,\n                                        #ctx.label,\n                                        group = ctx.deprecated and 'BlinkCmpLabelDeprecated' or 'BlinkCmpLabel',\n                                    },\n                                }\n                                if ctx.label_detail then\n                                    table.insert(\n                                        highlights,\n                                        { #ctx.label, #ctx.label + #ctx.label_detail, group = 'BlinkCmpLabelDetail' }\n                                    )\n                                end\n\n                                -- characters matched on the label by the fuzzy matcher\n                                for _, idx in ipairs(ctx.label_matched_indices) do\n                                    table.insert(highlights, { idx, idx + 1, group = 'BlinkCmpLabelMatch' })\n                                end\n\n                                return highlights\n                            end,\n                        },\n                        label_description = {\n                            width = { max = 30 },\n                            text = function(ctx)\n                                return ctx.label_description\n                            end,\n                            highlight = 'BlinkCmpLabelDescription',\n                        },\n\n                        source_name = {\n                            width = { max = 30 },\n                            text = function(ctx)\n                                return ctx.source_name\n                            end,\n                            highlight = 'BlinkCmpSource',\n                        },\n                        source_id = {\n                            width = { max = 30 },\n                            text = function(ctx)\n                                return ctx.source_id\n                            end,\n                            highlight = 'BlinkCmpSource',\n                        },\n                    },\n                },\n            },\n\n            documentation = {\n                -- Controls whether the documentation window will automatically show when selecting a completion item\n                auto_show = true,\n                -- Delay before showing the documentation window\n                auto_show_delay_ms = 500,\n                -- Delay before updating the documentation window when selecting a new item,\n                -- while an existing item is still visible\n                update_delay_ms = 50,\n                -- Whether to use treesitter highlighting, disable if you run into performance issues\n                treesitter_highlighting = true,\n                window = {\n                    min_width = 10,\n                    max_width = 60,\n                    max_height = 20,\n                    border = 'rounded',\n                    winblend = vim.o.pumblend,\n                    -- winhighlight = 'Normal:BlinkCmpDoc,FloatBorder:BlinkCmpDocBorder,CursorLine:BlinkCmpDocCursorLine,Search:None',\n                    -- Note that the gutter will be disabled when border ~= 'none'\n                    scrollbar = true,\n                    -- Which directions to show the documentation window,\n                    -- for each of the possible menu window directions,\n                    -- falling back to the next direction when there's not enough space\n                    direction_priority = {\n                        menu_north = { 'e', 'w', 'n', 's' },\n                        menu_south = { 'e', 'w', 's', 'n' },\n                    },\n                },\n            },\n            -- Displays a preview of the selected item on the current line\n            ghost_text = {\n                enabled = true,\n                show_with_menu = true,\n            },\n        },\n\n        -- Experimental signature help support\n        signature = {\n            enabled = true,\n            trigger = {\n                blocked_trigger_characters = {},\n                blocked_retrigger_characters = {},\n                -- When true, will show the signature help window when the cursor comes after a trigger character when entering insert mode\n                show_on_insert_on_trigger_character = true,\n            },\n            window = {\n                min_width = 1,\n                max_width = 100,\n                max_height = 10,\n                border = 'rounded',\n                winblend = vim.o.pumblend,\n                -- winhighlight = 'Normal:BlinkCmpSignatureHelp,FloatBorder:BlinkCmpSignatureHelpBorder',\n                scrollbar = false, -- Note that the gutter will be disabled when border ~= 'none'\n                -- Which directions to show the window,\n                -- falling back to the next direction when there's not enough space,\n                -- or another window is in the way\n                direction_priority = { 'n', 's' },\n                -- Disable if you run into performance issues\n                treesitter_highlighting = true,\n            },\n        },\n\n        fuzzy = {\n            -- when enabled, allows for a number of typos relative to the length of the query\n            -- disabling this matches the behavior of fzf\n            max_typos = function(keyword)\n                return math.floor(#keyword / 4)\n            end,\n            -- frencency tracks the most recently/frequently used items and boosts the score of the item\n            use_frecency = true,\n            -- proximity bonus boosts the score of items matching nearby words\n            use_proximity = true,\n            -- max_items = 200,\n            -- controls which sorts to use and in which order, these three are currently the only allowed options\n            -- sorts = { 'label', 'kind', 'score' },\n            sorts = { 'score', 'sort_text' },\n\n            prebuilt_binaries = {\n                download = true,\n                force_version = nil,\n                force_system_triple = nil,\n                extra_curl_args = { '--insecure' },\n            },\n        },\n\n        sources = {\n            -- Static list of providers to enable, or a function to dynamically enable/disable providers based on the context\n            default = { 'lsp', 'path', 'buffer' },\n            -- Example dynamically picking providers based on the filetype and treesitter node:\n            -- providers = function(ctx)\n            --   local node = vim.treesitter.get_node()\n            --   if vim.bo.filetype == 'lua' then\n            --     return { 'lsp', 'path' }\n            --   elseif node and vim.tbl_contains({ 'comment', 'line_comment', 'block_comment' }, node:type()) then\n            --     return { 'buffer' }\n            --   else\n            --     return { 'lsp', 'path', 'snippets', 'buffer' }\n            --   end\n            -- end\n\n            -- You may also define providers per filetype\n            per_filetype = {\n                -- lua = { 'lsp', 'path' },\n            },\n\n            -- Function to use when transforming the items before they're returned for all providers\n            -- The default will lower the score for snippets to sort them lower in the list\n            transform_items = function(_, items)\n                return items\n            end,\n            -- Minimum number of characters in the keyword to trigger all providers\n            -- May also be `function(ctx: blink.cmp.Context): number`\n            min_keyword_length = 0,\n            -- Example for setting a minimum keyword length for markdown files\n            -- min_keyword_length = function()\n            --   return vim.bo.filetype == 'markdown' and 2 or 0\n            -- end,\n\n            -- Please see https://github.com/Saghen/blink.compat for using `nvim-cmp` sources\n            providers = {\n                lsp = {\n                    name = 'LSP',\n                    module = 'blink.cmp.sources.lsp',\n                    fallbacks = { 'buffer' },\n                    transform_items = function(_, items)\n                        -- demote snippets\n                        for _, item in ipairs(items) do\n                            if item.kind == require('blink.cmp.types').CompletionItemKind.Snippet then\n                                item.score_offset = item.score_offset - 3\n                            end\n                        end\n\n                        -- filter out text items, since we have the buffer source\n                        return vim.tbl_filter(function(item)\n                            return item.kind ~= require('blink.cmp.types').CompletionItemKind.Text\n                        end, items)\n                    end,\n\n                    --- *All* providers have the following options available\n                    --- NOTE: All of these options may be functions to get dynamic behavior\n                    --- See the type definitions for more information.\n                    enabled = true, -- Whether or not to enable the provider\n                    async = false, -- Whether we should wait for the provider to return before showing the completions\n                    timeout_ms = 2000, -- How long to wait for the provider to return before showing completions and treating it as asynchronous\n                    -- transform_items = nil, -- Function to transform the items before they're returned\n                    should_show_items = true, -- Whether or not to show the items\n                    max_items = nil, -- Maximum number of items to display in the menu\n                    min_keyword_length = 0, -- Minimum number of characters in the keyword to trigger the provider\n                    -- If this provider returns 0 items, it will fallback to these providers.\n                    -- If multiple providers falback to the same provider, all of the providers must return 0 items for it to fallback\n                    score_offset = 0, -- Boost/penalize the score of the items\n                    override = nil, -- Override the source's functions\n                },\n                path = {\n                    name = 'Path',\n                    module = 'blink.cmp.sources.path',\n                    score_offset = 3,\n                    fallbacks = { 'buffer' },\n                    opts = {\n                        trailing_slash = false,\n                        label_trailing_slash = true,\n                        get_cwd = function(context)\n                            return vim.fn.expand(('#%d:p:h'):format(context.bufnr))\n                        end,\n                        show_hidden_files_by_default = false,\n                    },\n                },\n                buffer = {\n                    name = 'Buffer',\n                    module = 'blink.cmp.sources.buffer',\n                    score_offset = -3,\n                    opts = {\n                        -- default to all visible buffers\n                        get_bufnrs = function()\n                            return vim.iter(vim.api.nvim_list_wins())\n                                :map(function(win)\n                                    return vim.api.nvim_win_get_buf(win)\n                                end)\n                                :filter(function(buf)\n                                    return vim.bo[buf].buftype ~= 'nofile'\n                                end)\n                                :totable()\n                        end,\n                    },\n                },\n            },\n        },\n        appearance = {\n            highlight_ns = vim.api.nvim_create_namespace('blink_cmp'),\n            use_nvim_cmp_as_default = false,\n            nerd_font_variant = 'mono',\n            kind_icons = {\n                Text = '  ',\n                Method = '  ',\n                Function = '  ',\n                Constructor = '  ',\n\n                Field = ' ',\n                Variable = '  ',\n                Property = '  ',\n\n                Class = '  ',\n                Interface = '  ',\n                Struct = '  ',\n                Module = '  ',\n\n                Unit = ' ',\n                Value = '  ',\n                Enum = '  ',\n                EnumMember = '  ',\n\n                Keyword = '  ',\n                Constant = '  ',\n\n                Snippet = '  ',\n                Color = '  ',\n                File = '  ',\n                Reference = '  ',\n                Folder = '  ',\n                Event = ' ',\n                Operator = '  ',\n                TypeParameter = '  ',\n            },\n        },\n        cmdline = {\n            enabled = true,\n            keymap = nil, -- Inherits from top level `keymap` config when not set\n            sources = function()\n                local type = vim.fn.getcmdtype()\n                -- Search forward and backward\n                if type == '/' or type == '?' then\n                    return { 'buffer' }\n                end\n                -- Commands\n                if type == ':' or type == '@' then\n                    return { 'cmdline' }\n                end\n                return {}\n            end,\n            completion = {\n                trigger = {\n                    show_on_blocked_trigger_characters = {},\n                    show_on_x_blocked_trigger_characters = nil, -- Inherits from top level `completion.trigger.show_on_blocked_trigger_characters` config when not set\n                },\n                menu = {\n                    auto_show = nil, -- Inherits from top level `completion.menu.auto_show` config when not set\n                    draw = {\n                        columns = { { 'label', 'label_description', gap = 1 } },\n                    },\n                },\n            },\n        },\n    },\n}\n```\n\n\n`~/.config/nvim/init.lua`\n\n```\n-- For lazy.nvim\nlocal lazypath = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n    vim.fn.system({\n        'git',\n        'clone',\n        '--filter=blob:none',\n        'https://github.com/folke/lazy.nvim.git',\n        '--branch=stable', -- latest stable release\n        lazypath,\n    })\nend\nvim.opt.rtp:prepend(lazypath)\n\nlocal fmt = string.format\n-- Load neovim settings\nlocal success, _ = pcall(require, 'settings')\nif not success then\n    vim.notify(fmt('Error loading settings: %s', vim.inspect(success)), vim.log.levels.WARN)\nend\n\nrequire('lazy').setup('plugins', {\n\n    defaults = {\n        lazy = false,\n    },\n    concurrency = 5,\n    install = {\n        colorscheme = { 'gruvbox-material' },\n    },\n    ui = {\n        -- a number <1 is a percentage., >1 is a fixed size\n        size = { width = 0.8, height = 0.8 },\n        wrap = true, -- wrap the lines in the ui\n        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.\n        border = 'rounded',\n        backdrop = 60,\n        title = ' Plugin Overview ',\n        title_pos = 'left',\n        pills = true,\n        icons = {\n            cmd = ' ',\n            config = '',\n            event = ' ',\n            ft = ' ',\n            init = ' ',\n            import = ' ',\n            keys = ' ',\n            lazy = '󰒲 ',\n            loaded = '●',\n            not_loaded = '○',\n            plugin = ' ',\n            runtime = ' ',\n            require = '󰢱 ',\n            source = ' ',\n            start = ' ',\n            task = '✔ ',\n            list = {\n                '●',\n                '➜',\n                '★',\n                '‒',\n            },\n        },\n    },\n})\n\n\n-- \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\"\nvim.lsp.set_log_level('OFF')\n-- You will likely want to reduce updatetime which affects CursorHold\n-- note: this setting is global and should be set only once\nvim.o.updatetime = 250\n-- show source such as basedpyright, or flake8, etc\nvim.diagnostic.config({\n    float = {\n        source = 'if_many',\n        border = 'rounded',\n    },\n    virtual_text = {\n        severity = {\n            max = vim.diagnostic.severity.WARN,\n        },\n    },\n    virtual_lines = {\n        -- current_line = true,\n        severity = {\n            min = vim.diagnostic.severity.ERROR,\n        },\n    },\n    underline = true,\n    severity_sort = false,\n    signs = {\n        text = {\n            [vim.diagnostic.severity.ERROR] = ' ',\n            [vim.diagnostic.severity.WARN] = ' ',\n            [vim.diagnostic.severity.HINT] = ' ',\n            [vim.diagnostic.severity.INFO] = ' ',\n        },\n    },\n    update_in_insert = false, -- enabling this is incredibly annoying\n})\n\n-- helm filetype settings\nvim.filetype.add({\n    extension = {\n        gotmpl = 'gotmpl',\n    },\n    pattern = {\n        ['.*/templates/.*%.tpl'] = 'helm',\n        ['.*/templates/.*%.ya?ml'] = 'helm',\n        ['helmfile.*%.ya?ml'] = 'helm',\n    },\n})\n\n-- python filetype settings\nvim.api.nvim_create_autocmd('Filetype', {\n    pattern = 'helm',\n    callback = function()\n        vim.opt_local.ts = 2\n        vim.opt_local.sts = 2\n        vim.opt_local.sw = 2\n        vim.opt_local.expandtab = true\n    end,\n})\n\nvim.api.nvim_create_autocmd('FileType', {\n    pattern = 'lua',\n    callback = function()\n        vim.opt_local.shiftwidth = 4\n        vim.opt_local.tabstop = 4\n        vim.opt_local.ts = 4\n        vim.opt_local.sw = 4\n        vim.opt_local.smarttab = true\n        vim.opt_local.smartindent = true\n    end,\n})\n\nvim.api.nvim_create_autocmd('FileType', {\n    pattern = 'fish',\n    callback = function()\n        vim.opt_local.shiftwidth = 4\n        vim.opt_local.tabstop = 4\n        vim.opt_local.softtabstop = 4\n        vim.opt_local.smarttab = true\n        vim.opt_local.smartindent = true\n    end,\n})\n\n-- For terraform-ls:\nvim.api.nvim_create_autocmd({ 'BufWritePre' }, {\n    pattern = { '*.hcl', '*.tf', '*.tfvars' },\n    callback = function()\n        -- vim.lsp.buf.format()\n        vim.lsp.buf.format()\n        vim.lsp.codelens.refresh()\n    end,\n})\n```\n\n### Expected behavior\n\nThat all the icons/glyphs would be the same size, selected or not.\n\n### Nvim version (nvim -v)\n\nNVIM v0.11.0 Build type: Release LuaJIT 2.1.1736781742 Run \"nvim -V1 -v\" for more info\n\n### Vim (not Nvim) behaves the same?\n\nIt isn't installed \n\n### Operating system/version\n\nmacOS 15.4.1\n\n### Terminal name/version\n\nghostty 1.1.3\n\n### $TERM environment variable\n\nxterm-ghostty\n\n### Installation\n\nSystem package manager",
    "closed_at": "2025-04-28T22:35:43Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
        "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
        "followers_url": "https://api.github.com/users/zeertzjq/followers",
        "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
        "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zeertzjq",
        "id": 35768171,
        "login": "zeertzjq",
        "node_id": "MDQ6VXNlcjM1NzY4MTcx",
        "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
        "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
        "repos_url": "https://api.github.com/users/zeertzjq/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zeertzjq",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Cannot reproduce. Completion isn't even triggered in Go files with the provided steps.",
            "created_at": "2025-04-28T04:50:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/33690#issuecomment-2833975089",
            "id": 2833975089,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33690",
            "node_id": "IC_kwDOAPphoM6o6wcx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2833975089/reactions"
            },
            "updated_at": "2025-04-28T05:17:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2833975089",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Your code is too big to be considered \"minimal repro\". Make sure your code is a single file that you can reproduce the error with `nvim --clean -u minimal_repro.lua`.\n ",
            "created_at": "2025-04-28T11:51:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/33690#issuecomment-2834994095",
            "id": 2834994095,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33690",
            "node_id": "IC_kwDOAPphoM6o-pOv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2834994095/reactions"
            },
            "updated_at": "2025-04-28T11:51:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2834994095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Alright, give me some time this week I will get that going for you all.",
            "created_at": "2025-04-28T16:55:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/33690#issuecomment-2835891360",
            "id": 2835891360,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33690",
            "node_id": "IC_kwDOAPphoM6pCESg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835891360/reactions"
            },
            "updated_at": "2025-04-28T16:55:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835891360",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1475220?v=4",
                "events_url": "https://api.github.com/users/esn89/events{/privacy}",
                "followers_url": "https://api.github.com/users/esn89/followers",
                "following_url": "https://api.github.com/users/esn89/following{/other_user}",
                "gists_url": "https://api.github.com/users/esn89/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/esn89",
                "id": 1475220,
                "login": "esn89",
                "node_id": "MDQ6VXNlcjE0NzUyMjA=",
                "organizations_url": "https://api.github.com/users/esn89/orgs",
                "received_events_url": "https://api.github.com/users/esn89/received_events",
                "repos_url": "https://api.github.com/users/esn89/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/esn89/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/esn89/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/esn89",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I actually managed to find the root cause and it's corroborated by:\nhttps://github.com/kovidgoyal/kitty/discussions/7533\n\nTL;DR winblend is messing things up. ",
            "created_at": "2025-04-28T22:17:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/33690#issuecomment-2836856096",
            "id": 2836856096,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33690",
            "node_id": "IC_kwDOAPphoM6pFv0g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2836856096/reactions"
            },
            "updated_at": "2025-04-28T22:17:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2836856096",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1475220?v=4",
                "events_url": "https://api.github.com/users/esn89/events{/privacy}",
                "followers_url": "https://api.github.com/users/esn89/followers",
                "following_url": "https://api.github.com/users/esn89/following{/other_user}",
                "gists_url": "https://api.github.com/users/esn89/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/esn89",
                "id": 1475220,
                "login": "esn89",
                "node_id": "MDQ6VXNlcjE0NzUyMjA=",
                "organizations_url": "https://api.github.com/users/esn89/orgs",
                "received_events_url": "https://api.github.com/users/esn89/received_events",
                "repos_url": "https://api.github.com/users/esn89/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/esn89/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/esn89/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/esn89",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Oh, right. There is no bug then.",
            "created_at": "2025-04-28T22:35:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/33690#issuecomment-2836903931",
            "id": 2836903931,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33690",
            "node_id": "IC_kwDOAPphoM6pF7f7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2836903931/reactions"
            },
            "updated_at": "2025-04-28T22:35:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2836903931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33690/comments",
    "created_at": "2025-04-28T04:01:15Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33690/events",
    "html_url": "https://github.com/neovim/neovim/issues/33690",
    "id": 3023635723,
    "labels": [
        {
            "color": "e6e6e6",
            "default": false,
            "description": "issues that are closed as usage questions",
            "id": 77997478,
            "name": "closed:question",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3OA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/closed:question"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33690/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM60OQUL",
    "number": 33690,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33690/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33690/timeline",
    "title": "Glyph icon different sizes",
    "type": null,
    "updated_at": "2025-04-28T22:35:54Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33690",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1475220?v=4",
        "events_url": "https://api.github.com/users/esn89/events{/privacy}",
        "followers_url": "https://api.github.com/users/esn89/followers",
        "following_url": "https://api.github.com/users/esn89/following{/other_user}",
        "gists_url": "https://api.github.com/users/esn89/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/esn89",
        "id": 1475220,
        "login": "esn89",
        "node_id": "MDQ6VXNlcjE0NzUyMjA=",
        "organizations_url": "https://api.github.com/users/esn89/orgs",
        "received_events_url": "https://api.github.com/users/esn89/received_events",
        "repos_url": "https://api.github.com/users/esn89/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/esn89/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/esn89/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/esn89",
        "user_view_type": "public"
    }
}