{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "When a program which uses a line editor (e.g. bash, which is readline-based) is running inside of neovim's :terminal mode, neovim should take over the line editor's responsabilities.\nI believe this would greatly increase the convenience of combining neovim, terminal mode, and any program that uses a line editor, including pretty much all shells.\n\nAs an example, let's say you're in a terminal window. You've typed a command, but want to prefix it with e.g. `time` or `sudo` or something. With this proposal, you would just go to neovim's normal mode (either by `<c-\\><c-n>` or some other mapped key), and press `I` and you'd be at the beginning of the line. No need for all the hassle with a \"neovim normal\" mode and a \"bash vi-mode normal mode\" and all possible confusion resulting from that.\nAnother example : you've entered part of a command, but you need to paste a few extra arguments in the middle somewhere. You go to another screen to copy whatever you want, switch to the terminal-screen again and, still in normal mode, move the cursor to the correct position of the command line, and press `p`. Whatever you copied is put right where Vim's cursor is (as opposed to the current situation, where it is inserted where the cursor was when you were last in terminal-mode, regardless of how you moved the vim-cursor in the mean time).\n\nWe will have to make sure that we can still communicate with whatever program is on the other side of the terminal, for stuff like tab-completion. In fact, possible completions should be fed into neovim's completion system, so they can be handled by whatever setting the user wants (e.g. if the the user uses autocomplpop/youcompleteme, he can also get that functionality for bash-commands, or for python variables when running IPython).\n\nNote that this will involve modifications of the line editors as well as neovim.\nLine editors we need to take into account :\n- readline (for a.o. bash)\n- zsh line editor (zsh)\n- ? (feel free to suggest additions)\n###### Side Notes\n\nRelated work and issues, though I believe they are different : \n- https://github.com/ardagnir/athame\n- #1777\n\nThey are different because they do it the other way around. With these, the idea is that e.g. bash (or python or whatever) has more (neo)vim capabilities. A `set -o vi` on steroids if you like. \nMy proposal is having a full nvim, which has a terminal buffer, and operating directly on the line that's normaly handled by the line editor.\n\nAlso note the discussion at #2676 regarding what should be the default way to go from terminal-mode to normal mode. I am a strong advocate of a single `<Esc>`, but others want a single `<Esc>` to get passed straight to the terminal. The main reason that's been given for this, is vi-style line editor applications. If the line editor accessed the full power of neovim when running in a terminal, the need for sending `<Esc>` directly to the terminal would be far smaller, possibly giving us more sensible defaults.\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "@frederikvs Readline is rather limited. There are many terminal applications which do not use readline for this reason (though amount of applications using readline is larger): zsh, fish, bpython, ipython+ptpython, tcsh. Also many that do not use readline for other reasons: dash, posh, busybox. Some of them also have vi bindings. Among them zsh and fish are rather popular shells. Everything else can be statically linked, though unlikely (except for busybox obviously).\n\n---\n\nI think though that regardless of replacing readline (LD_PRELOAD or LD_LIBRARY_PATH hack?) it makes sense to make `<Esc>` escape to normal mode by default: if user needs this he can always use mappings to alter behaviour. But if choosing a single shortcut it must be `<C-\\><C-n>` because it is the only one that is said to work in almost all modes (exception is an Ex mode for whatever reason).\n\n---\n\nAbout completions: usual Vim popup for shells is too limited. Even bash performs better when there are many choices, not to mention wonderful zsh completion. I would not want such a thing by default thus.\n\n---\n\nOne thing that will be needed in any case: _standardtized_ protocol for this feature. As I said you will not touch zsh or fish by replacing readline. But zle (zsh line editor) is _very_ scriptable, much more then any other line editor used by any other shell I know, so it would be possible to do the same thing by replacing necessary zsh widgets.\n",
            "created_at": "2015-06-03T18:56:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-108574938",
            "id": 108574938,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwODU3NDkzOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108574938/reactions"
            },
            "updated_at": "2015-06-03T18:56:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108574938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@frederikvs my intent was to turn #1777 \"inside out\" now that terminal emulation is available in neovim. In the orginal hack in #1777 I had much issue with keyboard \"focus\", but this will be simpler now when neovim can have full control over input. I believe this could be at least prototyped without changing much or any of neovim itself: Basically when the REPL enters \"normal mode\" focus should change from the terminal buffer to a separate window in which nvim operates in normal mode as usual, except that buffer updates are sent over msgpack to the REPL and redrawn in-place. When the line is committed focus is shifted back in case the program needs it itself. Now we could imagine this window, while focused, being made invisible so the edits are only visible in place in the terminal window. (I have not had time to work on it though...). \nAlso, while requiring deeper changes in nvim, we could imagine neovim implementing this logic itself, effectively giving a readonly buffer (the terminal) with a editable sub-buffer at the end. neovim could use this mode whenever the PTY is in line-wise input mode, but direct integration with readline and other line editors is of course necessary to get proper completion, history etc.\n",
            "created_at": "2015-06-03T19:10:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-108583252",
            "id": 108583252,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwODU4MzI1Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108583252/reactions"
            },
            "updated_at": "2015-06-03T19:10:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108583252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "(Btw, IPython at its core already is a protocol for rich REPL-like interfaces, in that case it is simpler to just use this protocol directly, as is done in [vim-ipython](https://github.com/ivanov/vim-ipython) and my [neovim fork](https://github.com/bfredl/nvim-ipy) )\n",
            "created_at": "2015-06-03T19:25:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-108587659",
            "id": 108587659,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwODU4NzY1OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108587659/reactions"
            },
            "updated_at": "2015-06-03T19:25:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108587659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the input!\n\n> Readline is rather limited.\n\nPoint taken. I've updated the initial post to reflect that this idea is not limited to readline, but to all readline-like programs. Is `line editor` the correct term?\n\n> About completions: usual Vim popup for shells is too limited. Even bash performs better when there are many choices, not to mention wonderful zsh completion. I would not want such a thing by default thus.\n\nI don't fully understand what you mean - or maybe my idea wasn't clear enough : the idea would be that we use bash or zsh or whatever's knowledge about possible completions, but that neovim is aware of the completions, and gets to handle them.\nSo : if you have a dumb bash, you'll only get dumb completion suggestions. If you have zsh, you'll get much smarter predictions. \nBut : if you've configured your vim to show popups, you'll get a popup, even though bash doesn't know anything of this. If you have another method for choosing a completion, you'll get that. \n\n> But zle (zsh line editor) is very scriptable, much more then any other line editor used by any other shell I know, so it would be possible to do the same thing by replacing necessary zsh widgets.\n\nThen maybe we should try this thing on zsh first. I haven't used it yet, but from what I've heard, there's hardly any penalty for transitioning from bash. It also seems to solve certain issues I have in bash, so I'm considering switching anyway.\n\n> (Btw, IPython at its core already is a protocol for rich REPL-like interfaces, in that case it is simpler to just use this protocol directly, as is done in vim-ipython and my neovim fork )\n\nPerhaps I don't fully understand, I've worked with IPython a while back, but to me it was just a python shell, a slightly more advanced version of the regular python interactive interpreter. Could you elaborate on what you mean with \"IPython at its core already is a protocol for rich REPL-like interfaces\"?\n\nIf I find the time, I'll take a look at https://github.com/bfredl/nvim-ipy, see if that clarifies things a bit :-)\n",
            "created_at": "2015-06-04T16:20:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-108955860",
            "id": 108955860,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwODk1NTg2MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108955860/reactions"
            },
            "updated_at": "2015-06-04T16:20:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108955860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3795966?v=4",
                "events_url": "https://api.github.com/users/frederikvs/events{/privacy}",
                "followers_url": "https://api.github.com/users/frederikvs/followers",
                "following_url": "https://api.github.com/users/frederikvs/following{/other_user}",
                "gists_url": "https://api.github.com/users/frederikvs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frederikvs",
                "id": 3795966,
                "login": "frederikvs",
                "node_id": "MDQ6VXNlcjM3OTU5NjY=",
                "organizations_url": "https://api.github.com/users/frederikvs/orgs",
                "received_events_url": "https://api.github.com/users/frederikvs/received_events",
                "repos_url": "https://api.github.com/users/frederikvs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frederikvs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frederikvs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frederikvs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I don't fully understand what you mean - or maybe my idea wasn't clear enough : the idea would be that we use bash or zsh or whatever's knowledge about possible completions, but that neovim is aware of the completions, and gets to handle them.\n> \n> But : if you've configured your vim to show popups, you'll get a popup, even though bash doesn't know anything of this. If you have another method for choosing a completion, you'll get that.\n\nAnd this is exactly what I don’t like. Vim _popup menu_ is worse then bash equivalent. There is a reason for this: bash always knows that there is nothing to display below, NeoVim knows that there is some code below almost always. Space which zsh or bash can occupy for their completion needs is naturally bigger, they also don’t have to highlight completions as something very different from text.\n\n> Perhaps I don't fully understand, I've worked with IPython a while back, but to me it was just a python shell, a slightly more advanced version of the regular python interactive interpreter. Could you elaborate on what you mean with \"IPython at its core already is a protocol for rich REPL-like interfaces\"?\n\nCheck out [ptpython](https://github.com/jonathanslenders/ptpython/), specifically `ptipython`. Also [IPython notebook](http://ipython.org/notebook.html): when launched from terminal IPython usually uses readline and most users are fine with this, but there are projects which replace readline with something different. This is what that protocol exists for.\n",
            "created_at": "2015-06-04T16:47:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-108965976",
            "id": 108965976,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwODk2NTk3Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108965976/reactions"
            },
            "updated_at": "2015-06-04T16:47:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108965976",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "By the way, part of the line editor functionality is highlighting. Do you think that NeoVim should take over this? For all readline-based applications this is a great improvement: readline does not support highlighting. IPython has things like ptpython that add highlighting among other things, zsh has zsh-syntax-highlighting (Vim highlighting of zsh files is much better) and zsh-pygments-highlighting (would be the best choice if pygments had highlighting for zsh, but unfortunately it only has it for bash; even though it is officially technical preview, it works fine).\n\nPosh/dash/busybox will not have it because these are minimalistic shells, but they are so minimalistic that you can force integration (only push lines to shell when it is fully constructed and needs to be launched) without drawbacks.\n\nFish has its own highlighting and, knowing its official policy about configurability, you will never get full integration with NeoVim here. Since fish has good interactive features, but its scripting capabilities suck much greater then its configurability forced integration makes no sense here I think.\n",
            "created_at": "2015-06-04T16:59:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-108971417",
            "id": 108971417,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwODk3MTQxNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108971417/reactions"
            },
            "updated_at": "2015-06-04T16:59:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/108971417",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> And this is exactly what I don’t like. Vim popup menu is worse then bash equivalent. There is a reason for this: bash always knows that there is nothing to display below, NeoVim knows that there is some code below almost always. Space which zsh or bash can occupy for their completion needs is naturally bigger, they also don’t have to highlight completions as something very different from text.\n\nI don't see why this couldn't be made configurable. Right now, when you're using bash, you're tied to whatever bash supports. If we could pull completion info into neovim, you could use all neovim's options. Then neovim could also start using more space to show the options, when in terminal-mode, like you want.\nAnyway, that's not really a make-or-break point for me. The main thing I want is the possibility of editing my command line straight from neovim.\n\n> Check out ptpython, specifically ptipython. Also IPython notebook: when launched from terminal IPython usually uses readline and most users are fine with this, but there are projects which replace readline with something different. This is what that protocol exists for.\n\nAm I correct that the documentation for the IPython protocol is located [here](https://ipython.org/ipython-doc/dev/development/messaging.html)? \nIs that protocol python-specific, or could we reuse it? E.g. modify the zsh line editor to support that protocol? It would be a nice way to prevent us from reinventing the wheel :-)\nI'll have a look at that documentation and try to figure it out myself as well, but the more opinions the merrier.\n\n> By the way, part of the line editor functionality is highlighting. Do you think that NeoVim should take over this?\n\nI haven't really given this much thought yet, and am open to a discussion. I have to admit I haven't worked with shells that highlight in the line you're entering (mostly used bash up till now), so I don't think I'm qualified to have a strong opinion.\n",
            "created_at": "2015-06-06T14:34:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-109585520",
            "id": 109585520,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTU4NTUyMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/109585520/reactions"
            },
            "updated_at": "2015-06-06T14:34:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/109585520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3795966?v=4",
                "events_url": "https://api.github.com/users/frederikvs/events{/privacy}",
                "followers_url": "https://api.github.com/users/frederikvs/followers",
                "following_url": "https://api.github.com/users/frederikvs/following{/other_user}",
                "gists_url": "https://api.github.com/users/frederikvs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frederikvs",
                "id": 3795966,
                "login": "frederikvs",
                "node_id": "MDQ6VXNlcjM3OTU5NjY=",
                "organizations_url": "https://api.github.com/users/frederikvs/orgs",
                "received_events_url": "https://api.github.com/users/frederikvs/received_events",
                "repos_url": "https://api.github.com/users/frederikvs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frederikvs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frederikvs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frederikvs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "OK, so I did some web searching, looked at some videos, read some documentation, and learned a whole lot :-)\nTurns out that the IPython protocol has gotten the name Jupyter, and that this is specifically meant to be language agnostic.\n\nNow the full meaning of nvim-ipy's comment is beginning to become clear to me\n\n> This is a IPython/Jupyter front-end for Neovim\n\nThe more I learn about it, the more I get the impression that Jupyter is probably the way to go if we want to get the initial ideas in this thread. Now I'm beginning to doubt whether this should be run over neovim's terminal-functionality, or be another mechanism entirely, and whether it should be a plugin (we already have bfredl/nvim-ipy, i'm not sure how fully-featured and ready-to-use that is), or be implemented straight up in C...\n\nAnyone happen to know about a zsh jupyter implementation?\n",
            "created_at": "2015-06-06T17:34:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-109621961",
            "id": 109621961,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTYyMTk2MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/109621961/reactions"
            },
            "updated_at": "2024-04-14T22:26:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/109621961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3795966?v=4",
                "events_url": "https://api.github.com/users/frederikvs/events{/privacy}",
                "followers_url": "https://api.github.com/users/frederikvs/followers",
                "following_url": "https://api.github.com/users/frederikvs/following{/other_user}",
                "gists_url": "https://api.github.com/users/frederikvs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frederikvs",
                "id": 3795966,
                "login": "frederikvs",
                "node_id": "MDQ6VXNlcjM3OTU5NjY=",
                "organizations_url": "https://api.github.com/users/frederikvs/orgs",
                "received_events_url": "https://api.github.com/users/frederikvs/received_events",
                "repos_url": "https://api.github.com/users/frederikvs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frederikvs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frederikvs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frederikvs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well, nvim-ipy does all the basics (completion and object inpection), but it lacks documentation and I mostly added features in the order needed for my own workflow, for instance it lack history recall (because I instead keep around a \"scratch file\" to each project keeping sequences of commands I want to reuse). \n\nThe problem with using Jupyter for a unix shell I could see is handling of input to subcommands. Yes you could use stdin request for simple prompts, but a subcommand could likely have its own lineeditor with completions etc (or a fullscreen TUI interface). I still think using the terminal emulator would be better for this case, because you can always just fallback to \"ordinary\" terminal mode.\n",
            "created_at": "2015-06-06T20:42:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-109646981",
            "id": 109646981,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEwOTY0Njk4MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/109646981/reactions"
            },
            "updated_at": "2015-06-06T20:45:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/109646981",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Been thinking about this for a while, and as bfredl says, if we want to go \"full jupyter\" there are a bunch of problems with subcommands. We'd need something at the other end to capture all non-jupyter output and encapsulate it in jupyter messages and stuff. That's a whole separate project, and I think it'll bring a bunch of headaches. \n\nA second option would be a \"half-jupyter\". We keep the regular terminal as we have it now, but add a richer experience by setting up a jupyter connection to the shell as well. This connection will only serve for stuff like completions and the like. Basic communication still goes over terminal.\nHowever, this still means that when you have a subprocess that also does half-jupyter, you have a bunch of problems to solve. For instance, if you want to ssh to another \"half-jupyter\" shell. You'd need to set up a jupyter connection to the other end as well (getting various problems with firewalls and stuff like that).\n\nNow how about this : we do \"in-band jupyter signalling\". We keep our current terminal emulator, but we start sending jupyter messages over escape codes.\nWhen we're talking to \"dumb terminal applications\" it's not a problem, though we probably shouldn't send any. But when the thing on the other side of the terminal understands that protocol, it can signal us, and we can signal it. This will keep working over (multiple hops of) ssh, reverse tunnels, and pretty much anything you can currently pull highlighted grep output over.\n\nIt may be dirty, since it's not an implementation of the jupyter protocol (our modified shell won't be compatible with jupyter clients, neovim's client won't be able to handle standard jupyter servers) - but still we can steal some of the goods ideas.\nI name thee : \"jupyter lite\" ;-)\n",
            "created_at": "2015-06-10T16:23:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-110821170",
            "id": 110821170,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMDgyMTE3MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/110821170/reactions"
            },
            "updated_at": "2015-06-10T16:23:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/110821170",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3795966?v=4",
                "events_url": "https://api.github.com/users/frederikvs/events{/privacy}",
                "followers_url": "https://api.github.com/users/frederikvs/followers",
                "following_url": "https://api.github.com/users/frederikvs/following{/other_user}",
                "gists_url": "https://api.github.com/users/frederikvs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frederikvs",
                "id": 3795966,
                "login": "frederikvs",
                "node_id": "MDQ6VXNlcjM3OTU5NjY=",
                "organizations_url": "https://api.github.com/users/frederikvs/orgs",
                "received_events_url": "https://api.github.com/users/frederikvs/received_events",
                "repos_url": "https://api.github.com/users/frederikvs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frederikvs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frederikvs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frederikvs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Now we could imagine this window, while focused, being made invisible so the edits are only visible in place in the terminal window. (I have not had time to work on it though...). \n\nNote that this is mostly a UI issue, one that could be solved by giving neovim the capacity to have multiple screens(or simply windows of arbitrary sizes detached from the main screen): A program embedding Neovim could simply place the line editing buffer above the shell prompt.\n",
            "created_at": "2015-06-11T02:59:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-110982353",
            "id": 110982353,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDExMDk4MjM1Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/110982353/reactions"
            },
            "updated_at": "2015-06-11T02:59:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/110982353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Technical points aside, having this feature would be awesome. I don't mean to be negative but this was mostly why the idea of Neovim appealed to me to begin with. Whenever I discussed limitations of terminal emulator like plugins for Vim people pointed to the fact that they were hacks and a terminal emulator needed to built into Vim for it to work well. When I finally tried the terminal emulator in Neovim, I was disappointed to find it had most of the same limitations. It is much faster and feels much more like a real terminal than the other options do though. Just an FYI, but vim-shell actually does support this. To be fair, I do like Neovim's terminal emulator much better than vim-shell and I get much use out of it.\n",
            "created_at": "2016-04-30T03:00:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-215927799",
            "id": 215927799,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTkyNzc5OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/215927799/reactions"
            },
            "updated_at": "2024-04-14T22:25:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/215927799",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/354296?v=4",
                "events_url": "https://api.github.com/users/still-dreaming-1/events{/privacy}",
                "followers_url": "https://api.github.com/users/still-dreaming-1/followers",
                "following_url": "https://api.github.com/users/still-dreaming-1/following{/other_user}",
                "gists_url": "https://api.github.com/users/still-dreaming-1/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/still-dreaming-1",
                "id": 354296,
                "login": "still-dreaming-1",
                "node_id": "MDQ6VXNlcjM1NDI5Ng==",
                "organizations_url": "https://api.github.com/users/still-dreaming-1/orgs",
                "received_events_url": "https://api.github.com/users/still-dreaming-1/received_events",
                "repos_url": "https://api.github.com/users/still-dreaming-1/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/still-dreaming-1/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/still-dreaming-1/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/still-dreaming-1",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "well, you can send input from vimscript and monitor terminal output in vimscript event handler, so as it stands now it is a vimscript programmable terminal emulator.\nYou can send input from an ordinary window where editing is possible but of course you get no \"semantic\" completion for REPLs that support it. The most simple hack I could imagine to improve the situation is to modify libreadline/your-favorite-line-editor-library to when in line input state listen to requests from neovim for completions. (This must be done using async notifications so neovim does not hang when  the program is not in input state) From then on one could continue with the window focus hack I mentioned above to get the feeling one is editing the REPL in place.\n\nThe main reason I havn't looked into this myself yet is that the existing Jupyter integration solves 99% of the cases for me (the list of languages supporting Jupyter is [long](https://github.com/ipython/ipython/wiki/IPython-kernels-for-other-languages) )\n",
            "created_at": "2016-04-30T11:59:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-215959275",
            "id": 215959275,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTk1OTI3NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/215959275/reactions"
            },
            "updated_at": "2016-04-30T11:59:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/215959275",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Depending on how it's implemented, having NeoVim handle line editing in the terminal would make it fantastic for working with slow SSH connections.",
            "created_at": "2017-02-08T21:47:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-278471978",
            "id": 278471978,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODQ3MTk3OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278471978/reactions"
            },
            "updated_at": "2017-02-08T21:47:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278471978",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/134805?v=4",
                "events_url": "https://api.github.com/users/jacobstanley/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacobstanley/followers",
                "following_url": "https://api.github.com/users/jacobstanley/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacobstanley/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacobstanley",
                "id": 134805,
                "login": "jacobstanley",
                "node_id": "MDQ6VXNlcjEzNDgwNQ==",
                "organizations_url": "https://api.github.com/users/jacobstanley/orgs",
                "received_events_url": "https://api.github.com/users/jacobstanley/received_events",
                "repos_url": "https://api.github.com/users/jacobstanley/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacobstanley/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacobstanley/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacobstanley",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well, there's CTRL-X CTRL-E (a bash feature) in the meantime.",
            "created_at": "2017-02-08T22:49:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-278488309",
            "id": 278488309,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODQ4ODMwOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278488309/reactions"
            },
            "updated_at": "2017-02-08T22:49:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278488309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm another interested user late to the party.\r\n\r\nI think a good approach is similar to https://github.com/hanslub42/rlwrap  \r\nThat is, I'm suggesting neovim buffers input for command-line editing when the guest application is listening for input lines (`dash`, `bash --noediting`, `zsh --no-zle`, `cat`, ...) and ceases doing so whenever the application is listening for individual keypresses (`bash`, `top`, ...).\r\n\r\nThis is unobtrusive enough to be turned on by default, and further it allows Esc to normal during editing lines, since it is known the guest application is not listening for it.",
            "created_at": "2018-01-31T23:38:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-362107994",
            "id": 362107994,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjEwNzk5NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/362107994/reactions"
            },
            "updated_at": "2018-01-31T23:46:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/362107994",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3303296?v=4",
                "events_url": "https://api.github.com/users/steinkec/events{/privacy}",
                "followers_url": "https://api.github.com/users/steinkec/followers",
                "following_url": "https://api.github.com/users/steinkec/following{/other_user}",
                "gists_url": "https://api.github.com/users/steinkec/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/steinkec",
                "id": 3303296,
                "login": "steinkec",
                "node_id": "MDQ6VXNlcjMzMDMyOTY=",
                "organizations_url": "https://api.github.com/users/steinkec/orgs",
                "received_events_url": "https://api.github.com/users/steinkec/received_events",
                "repos_url": "https://api.github.com/users/steinkec/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/steinkec/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/steinkec/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/steinkec",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "i today came here on similar lines...\r\n\r\nthe `set -o vi` uses `vi` i guess (anyhow, it is `vi` like), which is tooo limited. but `v` on it opens it in editor specified in `export EDITOR=neovim`\r\nbut the issue with that is that, the `neovim` opens in full TUI with pager etc, and that messes up with the existing history output of the various terminals.\r\n\r\nso, i was thinking of a neovim, but which doesn't lauch a full blown TUI... rather, just operates on CLI right there and then...\r\n\r\ni am really feeling tired of being limited by this readline stuff, the terminal/CLI is tedious and laborious for me to use due to this very reason. i don't want to give up `bash` though.",
            "created_at": "2024-04-08T18:04:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/2787#issuecomment-2043365630",
            "id": 2043365630,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/2787",
            "node_id": "IC_kwDOAPphoM55y0j-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2043365630/reactions"
            },
            "updated_at": "2024-04-08T18:07:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2043365630",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19423063?v=4",
                "events_url": "https://api.github.com/users/goyalyashpal/events{/privacy}",
                "followers_url": "https://api.github.com/users/goyalyashpal/followers",
                "following_url": "https://api.github.com/users/goyalyashpal/following{/other_user}",
                "gists_url": "https://api.github.com/users/goyalyashpal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/goyalyashpal",
                "id": 19423063,
                "login": "goyalyashpal",
                "node_id": "MDQ6VXNlcjE5NDIzMDYz",
                "organizations_url": "https://api.github.com/users/goyalyashpal/orgs",
                "received_events_url": "https://api.github.com/users/goyalyashpal/received_events",
                "repos_url": "https://api.github.com/users/goyalyashpal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/goyalyashpal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/goyalyashpal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/goyalyashpal",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 17,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/2787/comments",
    "created_at": "2015-06-03T18:29:30Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/2787/events",
    "html_url": "https://github.com/neovim/neovim/issues/2787",
    "id": 84706129,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 197254545,
            "name": "tui",
            "node_id": "MDU6TGFiZWwxOTcyNTQ1NDU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/tui"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/2787/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWU4NDcwNjEyOQ==",
    "number": 2787,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 26,
        "-1": 1,
        "confused": 0,
        "eyes": 2,
        "heart": 10,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 39,
        "url": "https://api.github.com/repos/neovim/neovim/issues/2787/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/2787/timeline",
    "title": "line editor (readline) functionality",
    "updated_at": "2025-01-17T16:19:02Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/2787",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3795966?v=4",
        "events_url": "https://api.github.com/users/frederikvs/events{/privacy}",
        "followers_url": "https://api.github.com/users/frederikvs/followers",
        "following_url": "https://api.github.com/users/frederikvs/following{/other_user}",
        "gists_url": "https://api.github.com/users/frederikvs/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/frederikvs",
        "id": 3795966,
        "login": "frederikvs",
        "node_id": "MDQ6VXNlcjM3OTU5NjY=",
        "organizations_url": "https://api.github.com/users/frederikvs/orgs",
        "received_events_url": "https://api.github.com/users/frederikvs/received_events",
        "repos_url": "https://api.github.com/users/frederikvs/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/frederikvs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/frederikvs/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/frederikvs",
        "user_view_type": "public"
    }
}