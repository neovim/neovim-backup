{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "This ticket specifically tracks enhancements and modifications to `vim.ui` proposed in #25272 and related issues.\r\n\r\n# Problem\r\n\r\nCreating floating windows with all of the visual goodies that most users expect and want requires a lot of boilerplate. This boilerplate has coalesced into `vim.lsp.util.open_floating_preview`, but such functionality should be both (1) pruned down and curated into a more thoughtful and coherent interface, and (2) moved out of `vim.lsp.util` and into `vim.ui`.\r\n\r\n# Solution\r\n\r\nCreate `vim.ui.open_win` that handles the use case of creating windows of all kinds in an ergonomic way.\r\n\r\n## Requirements\r\n\r\n* `vim.ui.open_win` should be able to open floating windows as well as splits (horizontal and vertical) and tabs.\r\n* `vim.ui.open_win` should substantially reduce boilerplate for creating and opening floating windows.\r\n\r\n## Proposed interface\r\n\r\n```lua\r\n--- @param contents string[]|int An array of strings containing the lines\r\n---                              of text to display in the window OR an\r\n---                              integer representing a buffer number to\r\n---                              display in the window\r\n--- @param opts table Options table (see details below)\r\n--- @return number |winid| of new window\r\nvim.ui.open_win(contents, {\r\n  -- Opts table is a \"sum type\" / \"union\", the type of window it\r\n  -- creates is based on the top-level key provided. It as an error\r\n  -- to provide more than one top-level key\r\n  float = {\r\n    -- Create a floating window. All keys from |nvim_open_win()| are valid in this table.\r\n    -- Omitted keys use default values from |vim.ui.config()|.\r\n    height = 100,\r\n    width = 50,\r\n  },\r\n\r\n  split = {\r\n    -- Create a split\r\n    vertical = true | false, -- defaults to false\r\n  },\r\n\r\n  tab = {\r\n    -- Create a new tab\r\n  }\r\n})\r\n```\r\n\r\nIn addition, create `vim.ui.config()` that sets default values for some options. This should work similarly to `vim.diagnostic.config()`. Plugin authors can use `vim.ui.open_win()` and omit values to use the defaults supplied by the user in `vim.ui.config()`:\r\n\r\n```lua\r\nvim.ui.config({\r\n  float = {\r\n    border = \"rounded\",\r\n  },\r\n  split = {\r\n    -- Prefer vertical splits by default\r\n    vertical = true,\r\n  },\r\n})\r\n```\r\n\r\n`vim.ui.config()` is not limited to configuring options for `vim.ui.open_win()`, but covers any user-definable default/preference for anything under `vim.ui`.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Note that `open_floating_preview` is currently taking care of:\r\n\r\n- focus/close handling (e.g. close on CursorMoved, etc) (this is likely not always desired)\r\n- Uniqueness handling (only 1 float) (this is likely not always desired)\r\n- window positioning (See util.make_floating_popup_options, some/all of this might make sense in `nvim_open_win` itself)\r\n- markdown styling (shouldn't be part of ui.open_win)\r\n- setting various buf options (conceal, folding, softwrap, bufhidden=wipe)\r\n- keymap q -> bdelete (not always desired(?), if it is, could go into nvim_open_win)\r\n\r\nWhat's the motivation for putting split/tab handling in the same API? (What's wrong with `vim.cmd.split()`?)\r\n\r\n+1 for having a config for some defaults, would be nice if plugins didn't need to expose border settings. Any reason for a vim.ui.config table instead of going with new regular vim options?\r\n\r\n",
            "created_at": "2023-10-05T14:02:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1748966178",
            "id": 1748966178,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5oPxsi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748966178/reactions"
            },
            "updated_at": "2023-10-05T14:02:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748966178",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Any reason for a vim.ui.config table instead of going with new regular vim options?\r\n> \r\n> Because we try to keep things in Lua if possible (and do you really want to touch Vim options? especially window options? especially global-local window options?)\r\n> \r\n> I believe the question of Lua config table vs. Vim option is a more general (and much thornier) issue and should be handled separately (and apply to `vim.diagnostic` config as well).\r\n\r\n\r\nThis is exactly why I bring it up:\r\n\r\n- I think we should have this more general discussion :)\r\n- diagnostic configuration has global and \"namespace\" options (opposed to buffer options or window options). 1 diagnostic provider=1 namespace. Often a language server or linter. Buffer or window bound options wouldn't have been a good fit because of the different granularity. The options for a floating window would fit more into the existing window/buffer option model. Because a floating window is a window and it displays a buffer.\r\n",
            "created_at": "2023-10-05T14:15:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1748993437",
            "id": 1748993437,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5oP4Wd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748993437/reactions"
            },
            "updated_at": "2023-10-05T14:16:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748993437",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Because we try to keep things in Lua if possible\r\n\r\nThat is not a guideline nor a goal (with respect to options).\r\n\r\n>  (and do you really want to touch Vim options? especially window options? especially global-local window options?)\r\n\r\nWe are investing in the options subsystem: https://github.com/neovim/neovim/pull/25394 \r\nIf options make sense as editor options then \"because Lua\" can't be the reason for avoiding the options subsystem.\r\n\r\n`vim.foo.config` (`vim.diagnostic.config`) is a convention for cases that don't make sense as \"editor options\" (at least until we gain dict options and perhaps eventually namespace options).",
            "created_at": "2023-10-05T14:28:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1749023982",
            "id": 1749023982,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5oP_zu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749023982/reactions"
            },
            "updated_at": "2023-10-05T14:29:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749023982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "From https://github.com/neovim/neovim/issues/25272 : \r\n\r\n> > Should the open_float features be owned by nvim_open_win instead of adding vim.ui.open_float ?\r\n> \r\n> I've no objection, though having more of this done in Lua rather than in C might be nice.\r\n\r\nAPI logic can be implemented in Lua (and we should try to make that more ergonomic). [Example](https://github.com/neovim/neovim/blob/29fe883aa9166bdbcae3f935523c75a8aa56fe45/runtime/lua/vim/_editor.lua#L169).\r\n\r\nSo it sounds like this could be an enhancement to `nvim_open_win` instead of a new `vim.ui` function.",
            "created_at": "2023-10-05T14:32:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1749032402",
            "id": 1749032402,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5oQB3S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749032402/reactions"
            },
            "updated_at": "2023-10-05T14:55:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749032402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What's the motivation for putting split/tab handling in the same API? (What's wrong with `vim.cmd.split()`?)\r\n\r\nErgonomics. There's nothing \"wrong\" with `vim.cmd.split`, just as there's nothing \"wrong\" with `vim.api.nvim_open_win`.\r\n\r\nCreating both floating windows and splits require a similar series of steps:\r\n\r\n1. create a scratch buffer\r\n2. create the window. This is the only part that really differs between floats and splits (`nvim_open_win` vs `vim.cmd.split`)\r\n3. retrieve the window ID (you get this is as the return value of `nvim_open_win`, but requires a separate API call with a split)\r\n4. set the window's buffer to the scratch buffer\r\n\r\nIf we provide some \"sugar\" around creating floats (which we already do with `open_floating_preview`) that abstracts most of this boilerplate, why would we not also do the same for other kinds of windows?\r\n\r\n> +1 for having a config for some defaults, would be nice if plugins didn't need to expose border settings. Any reason for a vim.ui.config table instead of going with new regular vim options?\r\n\r\nNo, I don't particularly care either way. If regular Vim options can support the level of flexibility we need then I'd actually prefer that.",
            "created_at": "2023-10-05T14:44:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1749054790",
            "id": 1749054790,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5oQHVG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749054790/reactions"
            },
            "updated_at": "2023-10-05T14:46:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749054790",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Creating both floating windows and splits require a similar series of steps:\r\n\r\nOk with those steps outlined, I can see how this wouldn't fit into `nvim_open_win`.",
            "created_at": "2023-10-05T14:55:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1749075904",
            "id": 1749075904,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5oQMfA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749075904/reactions"
            },
            "updated_at": "2023-10-05T14:55:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749075904",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Ergonomics. There's nothing \"wrong\" with vim.cmd.split, just as there's nothing \"wrong\" with vim.api.nvim_open_win.\r\n\r\nFair point, but also slightly derailing from the given problem statement. But I guess it makes sense to look at the whole picture.\r\n\r\nLooks like there are two separate points:\r\n\r\n- See what additional options `nvim_open_win` could support to get rid of the floating window positioning logic in `open_floating_preview` and `make_floating_popup_options`. This is kinda independent from the proposed `open_win` but would compose (due to the `float = {}` opts)\r\n\r\n- The ergonomics for general window creation. I think the uniqueness handling that `open_floating_preview` currently takes care of could also go into this. E.g. `open_win` could create an object where you can call `:toggle()`, `:open()`, `:close()` on. It would move some of the logic for the uniqueness handling to the consumers, but I think this separation of concerns makes sense, after all the consumer needs to decide _which_ window should have what kind of uniqueness semantics.\r\n\r\n\r\n> retrieve the window ID (you get this is as the return value of nvim_open_win, but requires a separate API call with a split)\r\n> set the window's buffer to the scratch buffer\r\n\r\nJust to complete the picture: `nvim_open_win` takes the buffer as argument. For floating window it is currently just step 1 (create buffer) and step 2 (call `nvim_open_win(buf, ...)`)\r\n\r\nMost of the logic around opening floating windows seems to be around calculating the position, and configuring the buffer.\r\n",
            "created_at": "2023-10-05T15:14:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1749110358",
            "id": 1749110358,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5oQU5W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749110358/reactions"
            },
            "updated_at": "2023-10-05T15:47:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749110358",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> E.g. `open_win` could create an object where you can call `:toggle()`, `:open()`, `:close()` on.\r\n\r\nLet's avoid OOP for win/buf/tab objects (at least), it raises many questions for little gain. \"Toggle\" could apply to any window (including non-floats) so we could add `nvim_win_toggle`. It's trivial to fake object methods with [UFCS](https://en.wikipedia.org/wiki/Uniform_Function_Call_Syntax) which is what API clients already do.",
            "created_at": "2023-10-05T20:49:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1749621023",
            "id": 1749621023,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5oSRkf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749621023/reactions"
            },
            "updated_at": "2023-10-05T20:50:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749621023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": " https://github.com/neovim/neovim/pull/25550 addresses the split window part",
            "created_at": "2023-10-09T15:29:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1753229024",
            "id": 1753229024,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5ogCbg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 3,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1753229024/reactions"
            },
            "updated_at": "2023-10-09T15:29:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1753229024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">  \"Toggle\" could apply to any window (including non-floats) so we could add `nvim_win_toggle`\r\n\r\n+1 to `nvim_win_toggle`, I'd be interested in working on that. I do think it could get tricky with edge cases though, as we'd probably have to handle windows being toggled once (closed) but never reopened to avoid leaking memory when saving window states. There's also the case where there's a split window that is closed by toggle, then its previous parent frame is removed by closing its \"sibling\" windows. Working out where to re-insert the window into the layout would be tough. Sorry if that's outside the scope of this issue, just my initial thoughts on the idea :)\r\n\r\n",
            "created_at": "2023-10-09T18:16:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1753450663",
            "id": 1753450663,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5og4in",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1753450663/reactions"
            },
            "updated_at": "2023-10-09T18:16:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1753450663",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> There's also the case where there's a split window that is closed by toggle, then its previous parent frame is removed by closing its \"sibling\" windows.\r\n\r\nCould avoid that by keeping the window but set its width/height to zero. Of course that means other things need to be handled, e.g. `CTRL-w-...` should skip over such windows. But it has nice(?) properties like maintaining the \"tree\", `winlayout()` structure, etc.",
            "created_at": "2023-10-09T22:47:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1754011092",
            "id": 1754011092,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5ojBXU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1754011092/reactions"
            },
            "updated_at": "2023-10-09T22:50:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1754011092",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Could avoid that by keeping the window but set its width/height to zero. \r\n\r\nTrue! I think that takes care of both cases. Will look into this after `nvim_open_win` updates are done :)\r\n",
            "created_at": "2023-10-09T23:05:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-1754035981",
            "id": 1754035981,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM5ojHcN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1754035981/reactions"
            },
            "updated_at": "2023-10-09T23:05:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1754035981",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Just my 2 cents, but I think it would be nice to have a `floating` option for `vim.ui.select()`, similar to Vim 8's `popup_menu()`",
            "created_at": "2024-12-29T15:53:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-2564765434",
            "id": 2564765434,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM6Y3zb6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564765434/reactions"
            },
            "updated_at": "2025-05-06T04:04:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564765434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Renamed this, to focus on the \"open a window/popup easily\" topic. The discussion already seems focused on that.\n\nEven just centering a window is a pain, so this is definitely needed.",
            "created_at": "2025-02-21T00:47:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/25514#issuecomment-2673071111",
            "id": 2673071111,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25514",
            "node_id": "IC_kwDOAPphoM6fU9QH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2673071111/reactions"
            },
            "updated_at": "2025-02-21T00:51:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2673071111",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25514/comments",
    "created_at": "2023-10-05T13:26:41Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/25514/events",
    "html_url": "https://github.com/neovim/neovim/issues/25514",
    "id": 1928294869,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 144672485,
            "name": "provider",
            "node_id": "MDU6TGFiZWwxNDQ2NzI0ODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/provider"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "configuration, settings",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/25514/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 719,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-05-13T00:50:38Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5y73HV",
    "number": 25514,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 15,
        "-1": 0,
        "confused": 0,
        "eyes": 3,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 3,
        "total_count": 21,
        "url": "https://api.github.com/repos/neovim/neovim/issues/25514/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/25514/timeline",
    "title": "vim.ui.open_win (easily create a window/popup)",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-05-06T04:04:14Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/25514",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
        "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gpanders/followers",
        "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gpanders",
        "id": 8965202,
        "login": "gpanders",
        "node_id": "MDQ6VXNlcjg5NjUyMDI=",
        "organizations_url": "https://api.github.com/users/gpanders/orgs",
        "received_events_url": "https://api.github.com/users/gpanders/received_events",
        "repos_url": "https://api.github.com/users/gpanders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gpanders",
        "user_view_type": "public"
    }
}