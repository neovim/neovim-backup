{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "\nPart of https://github.com/neovim/neovim/issues/25670\n\nUpdate (June 2025): https://github.com/neovim/neovim/pull/34247 may address this (partially)?\n\n## Problem\n\ncompletion plugins like https://github.com/saghen/blink.cmp and https://github.com/hrsh7th/nvim-cmp must be manually configured, there's no way for plugins to passively provide a \"completion source\".\n\n## Expected behavior\n\n- Plugins can declare a completion source.\n- The default/builtin omnicomplete merges all such sources.\n    - Update: since [#34247](https://github.com/neovim/neovim/pull/34247), the \"F\" flag of the 'complete' option merges multiple completion sources.\n- Third-party autocomplete plugins can also choose to discover and merge these sources.\n    - Nvim provides a stdlib function which does a \"default\" merge of the sources.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Current solution would be to implement the completion source as lsp server. Relates to https://github.com/neovim/neovim/pull/24338\n\nThere are even plugins that re-expose other completion plugins via lsp. See https://github.com/benlubas/cmp2lsp \n\nWhat advantage would a separate API offer?\n",
            "created_at": "2025-01-20T17:28:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2602954756",
            "id": 2602954756,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6bJfAE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2602954756/reactions"
            },
            "updated_at": "2025-01-20T17:28:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2602954756",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "https://github.com/neovim/neovim/pull/24338 would definitely get 80% of the goal here[1], though I would still keep this issue open to track this concept:\n\n> The default/builtin omnicomplete merges all such sources.\n\n[1] In my particular case, I have a proprietary LSP server that has non-standard completion-like features, and I want to hook that into Nvim completion / autocompletion plugins without having modify the LSP server.",
            "created_at": "2025-01-20T17:35:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2602964731",
            "id": 2602964731,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6bJhb7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2602964731/reactions"
            },
            "updated_at": "2025-01-31T16:43:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2602964731",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> implement the completion source as lsp server.\n\nI feel if `vim.diagnostics` is a standalone API not `vim.lsp.diagnostics`, then `vim.completion` should also be a standalone API, since there were already so many exisiting  completion sources (tags, files, lines, dict, so many) before LSP was implemented.",
            "created_at": "2025-01-30T19:18:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2625370703",
            "id": 2625370703,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6ce_pP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2625370703/reactions"
            },
            "updated_at": "2025-02-01T17:25:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2625370703",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45728125?v=4",
                "events_url": "https://api.github.com/users/milanglacier/events{/privacy}",
                "followers_url": "https://api.github.com/users/milanglacier/followers",
                "following_url": "https://api.github.com/users/milanglacier/following{/other_user}",
                "gists_url": "https://api.github.com/users/milanglacier/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/milanglacier",
                "id": 45728125,
                "login": "milanglacier",
                "node_id": "MDQ6VXNlcjQ1NzI4MTI1",
                "organizations_url": "https://api.github.com/users/milanglacier/orgs",
                "received_events_url": "https://api.github.com/users/milanglacier/received_events",
                "repos_url": "https://api.github.com/users/milanglacier/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/milanglacier/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/milanglacier/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/milanglacier",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > implement the completion source as lsp server.\n> \n> I feel if `vim.diagnostics` is a standalone API not `vim.lsp.diagnostics`, then `vim.completion` should also be a standalone API, since there were already so many exisiting completion sources (tags, files, lines, dict, so many) before LSP was implemented.\n\nThere still needs to be a compelling reason to add additional sub-systems or we'd eventually end up with vim.inlay_hints, vim.codelens, vim.code_actions, etc. with each having 95% overlapping functionality with the lsp variant.\n\nMain question here is still: \n\n> What advantage would a separate API offer?\n\nIf it saves 3 lines of boilerplate that's not good enough. \n\nNote that having a vim.completion module would not automatically imply that there's a re-implementation of the existing built-in competitions based on it. Nor is clear what advantage that would have because many of those can't be merged easily by default without ending up with duplicates. Tags, keyword and dict in particular have strong overlap with what language servers commonly provide.\n\n",
            "created_at": "2025-01-30T22:11:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2625704147",
            "id": 2625704147,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6cgRDT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2625704147/reactions"
            },
            "updated_at": "2025-02-01T17:25:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2625704147",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Tags, keyword and dict in particular have strong overlap with what language servers commonly provide.\n\nTags are irreplaceable by LSP. It is the only reliable completion source for cross-language completion. And for C/C++, if your build system does not work nicely with Clangd, LSP would be broken.\n\nDict also serves its unique features. Why would dict overlap with LSP?\n\n> not automatically imply that there's a re-implementation of the existing built-in completions sources\n\nIt is not saying that we need to reimplement those completion sources again. The idea is that they are useful sources not served as a lsp completion source. And blink-cmp, nvim-cmp has separated completion sources for them.\n\n> There still needs to be a compelling reason to add additional sub-systems \n\nStandalone `vim.diagnostics` exists independently because diagnostic functionality predated LSP integration. Similarly, completion systems were well-established before LSP's introduction, which explains it should be a standalone API.\n\n> Nor is clear that advantage that would have because many of those can't be merged easily by default without ending up with duplicates.\n\n`nvim-cmp` and `blink-cmp` can merge multiple sources and they just worked. If the goal is to provide a unified completion source,  treating all completions uniformly as \"LSP\" sources is problematic, how would those third party completion plugin do the sorting / filtering if all those are \"LSP\" sources?. It makes no sense to categorize completions from tags, buffers, or dictionaries as LSP items, as they originate from fundamentally different sources.\n",
            "created_at": "2025-01-30T22:35:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2625740164",
            "id": 2625740164,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6cgZ2E",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2625740164/reactions"
            },
            "updated_at": "2025-01-31T10:32:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2625740164",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45728125?v=4",
                "events_url": "https://api.github.com/users/milanglacier/events{/privacy}",
                "followers_url": "https://api.github.com/users/milanglacier/followers",
                "following_url": "https://api.github.com/users/milanglacier/following{/other_user}",
                "gists_url": "https://api.github.com/users/milanglacier/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/milanglacier",
                "id": 45728125,
                "login": "milanglacier",
                "node_id": "MDQ6VXNlcjQ1NzI4MTI1",
                "organizations_url": "https://api.github.com/users/milanglacier/orgs",
                "received_events_url": "https://api.github.com/users/milanglacier/received_events",
                "repos_url": "https://api.github.com/users/milanglacier/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/milanglacier/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/milanglacier/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/milanglacier",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Preface: I am not shilling for each of these to be a standalone module. I see completion a much higher priority than the other potential modules mentioned here.\n\n> There still needs to be a compelling reason to add additional sub-systems or we'd eventually end up with vim.inlay_hints, vim.codelens, vim.code_actions, etc. with each having 95% overlapping functionality with the lsp variant.\n\nI think the main win here would be to be able to extend existing functionality without having to leave the neovim land be it user config or, less important, a neovim plugin. Currently adding most of these is only possible either by writing your own language server or via a plugin like null.ls or now none.ls. Being able to add your own inlay hints / codelens / code_actions etc yourself using a higher level API than LSP is a notable win for lowering the entry barrier.\n\nOnce good example of this is VS Code plugin API. While adding all of those is not possible in a user config, the plugin API mostly resembles the LSP spec, yet provides a higher level abstraction which makes it possible for less experienced developers to be productive.",
            "created_at": "2025-01-31T00:13:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2625996118",
            "id": 2625996118,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6chYVW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2625996118/reactions"
            },
            "updated_at": "2025-01-31T10:32:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2625996118",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think the main win here would be to be able to extend existing functionality without having to leave the neovim land be it user config or, less important, a neovim plugin\n\nThat's why my [first comment](https://github.com/neovim/neovim/issues/32123#issuecomment-2602954756) links to the [vim.lsp.server PR](https://github.com/neovim/neovim/pull/24338) which would let users stay in neovim land.\n\nSo let me repeat my main question one more time:\n\n> **what advantage would a separate API offer?**\n\n\nThanks for the inputs so far, but these aren't driving this forward. What we need to know are concrete and technical arguments against the lsp.server solution that highlight concrete advantages of a `vim.completion` - and these would need to include some outline of what a `vim.completion` API would even look like to be able to compare them.",
            "created_at": "2025-01-31T08:49:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2626672360",
            "id": 2626672360,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6cj9bo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626672360/reactions"
            },
            "updated_at": "2025-02-01T17:25:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626672360",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I feel if `vim.diagnostics` is a standalone API not `vim.lsp.diagnostics`, then `vim.completion` should also be a standalone API,\n\nIt's a two-way door. The first, extremely high-leverage step, is to unlock all the existing functionality provided by the LSP interface, for in-process plugins.\n\nLater steps that involve lifting out parts of LSP to non-LSP Nvim interfaces are just something that doesn't matter right now. So it's off topic here, and out of scope for now. \n\nNote: even after we get `vim.lsp.server()`, I'll keep this issue open to track:\n\n> The default/builtin omnicomplete merges all such sources.",
            "created_at": "2025-01-31T10:34:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2626880177",
            "id": 2626880177,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6ckwKx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626880177/reactions"
            },
            "updated_at": "2025-01-31T16:44:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626880177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> What advantage would a separate API offer?\n\nI spent a month trying out the current option of using custom LSPs for completion where I wrote an LSP to act as an adaptor for luasnip (based on a reddit post a while back). It worked well enough but the biggest limitation was it \"felt\" unstable in non-file buffers and most of the time I do want snippets to work in non-file buffers. I have seen discussions in other issues  (I don't remember which one) here claiming that the LSP spec does not explicitly allow attaching to non-file buffers. I have doubts on that claim but at the time I attributed some of my instability to it. Although, personally I do think the LSP protocal does allow non-file buffers because of the the statement \"There is also a tagging interface for normal non document URIs. It maps to a string as well\" at https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#uri.\n\nIf neovim doesn't/won't support attaching LSP's to non-file buffers, then I think having a seperate API that is seperate from the LSP client for adding completion sources would be very benificial. \n\nHowever, if neovim's lsp client does support non-file buffers (and my instability was due to something else), I still think a seperate API for completion sources can be benificial since it will probably be easier for new plugin authors than trying to write an LSP. Learning to write a plugin using neovims API is always going to be easier than having to also on top of that learn both the LSP spec and how to write an LSP. Following the [vim.lsp.server PR](https://github.com/neovim/neovim/pull/24338) does keep you in neovim land but you still need to understand enough of LSP spec to do so. Whether reducing that learning curve is enough to justify the added maintanence burden I'm not sure, but I think it is worth considering.",
            "created_at": "2025-01-31T14:07:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2627439751",
            "id": 2627439751,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6cm4yH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627439751/reactions"
            },
            "updated_at": "2025-01-31T14:39:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627439751",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51029315?v=4",
                "events_url": "https://api.github.com/users/crwebb85/events{/privacy}",
                "followers_url": "https://api.github.com/users/crwebb85/followers",
                "following_url": "https://api.github.com/users/crwebb85/following{/other_user}",
                "gists_url": "https://api.github.com/users/crwebb85/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/crwebb85",
                "id": 51029315,
                "login": "crwebb85",
                "node_id": "MDQ6VXNlcjUxMDI5MzE1",
                "organizations_url": "https://api.github.com/users/crwebb85/orgs",
                "received_events_url": "https://api.github.com/users/crwebb85/received_events",
                "repos_url": "https://api.github.com/users/crwebb85/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/crwebb85/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/crwebb85/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/crwebb85",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I apologize for starting the `vim.completion` standalone discussions. I think I expressed my idea in a wrong direction. And I do agree that starting the `vim.completion` conversation in this issue is off-topic now.\n\nBelow is what I really want to say:\n\nThis issue is \"plugins to define completion sources\". While mfuseenger suggested implementing new completion sources as a LSP, I believe this approach is not the best way for plugin authors even #24338 merged, and my reasons were stated in this [thread](https://github.com/neovim/neovim/issues/32123#issuecomment-2625740164).\n\nBut I agree as justinmk said, these are not the top priority for neovim now and can be on hold.",
            "created_at": "2025-01-31T14:12:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2627450866",
            "id": 2627450866,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6cm7fy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627450866/reactions"
            },
            "updated_at": "2025-01-31T14:34:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627450866",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45728125?v=4",
                "events_url": "https://api.github.com/users/milanglacier/events{/privacy}",
                "followers_url": "https://api.github.com/users/milanglacier/followers",
                "following_url": "https://api.github.com/users/milanglacier/following{/other_user}",
                "gists_url": "https://api.github.com/users/milanglacier/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/milanglacier",
                "id": 45728125,
                "login": "milanglacier",
                "node_id": "MDQ6VXNlcjQ1NzI4MTI1",
                "organizations_url": "https://api.github.com/users/milanglacier/orgs",
                "received_events_url": "https://api.github.com/users/milanglacier/received_events",
                "repos_url": "https://api.github.com/users/milanglacier/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/milanglacier/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/milanglacier/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/milanglacier",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  I have seen discussions in other issues (I don't remember which one) here claiming that the LSP spec does not explicitly allow attaching to non-file buffers.\n\nThere are some language servers that access files directly on the filesystem but the language server protocol doesn't have this as an inherent limitation and there are servers that work fine in scratch buffers - luals is an example.\n\nI'm going to lock this thread for now. We're not a flea market where we haggle based on feelings and I've now asked two times for concrete, informed and technical reasons. Not repeating myself a third time.",
            "created_at": "2025-01-31T14:44:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2627520330",
            "id": 2627520330,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6cnMdK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627520330/reactions"
            },
            "updated_at": "2025-02-01T12:45:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627520330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Unlocking this - hoping that we can now continue the conversation on a technical level. Not fuzzy anecdotes or vague feelings.\n\n\nTo recap the current state (as of master/0.11)\n\n- We've got `vim.lsp.completion` that provides aggregated (per concat) completion candidates from multiple language servers/clients. This supports auto completion via trigger characters, plus snippet expansion and other side effects.\n- There's also lsp omnifunc (set by default if a buffer has a lsp client attached) based on `lsp.completion` for users who prefer manual triggers (`c-x c-o`)\n- A language server is a separate process (stdio), service (tcp) or a lua table with some functions (currently requires some boilerplate, `lsp.server` will reduce this)\n- Language servers can work on all kind of buffers (exception might be `prompt` buftype, which if I remember right has some issues if the server wants incremental text document synchronization, but this isn't a blocker; or necessity for the lua-in-proc variant)\n\n- Plugins could register additional completion sources via lsp.config\n\n- There are plugins using this approach (https://github.com/nvimdev/phoenix.nvim, https://github.com/benlubas/cmp2lsp)\n\n\n\nAlso, a rough outline what kind of functionality a `vim.completion` would need:\n\n- A way for plugins to register the source (overlaps with `lsp.config`)\n- A way for users to enable the source (could be plugin.setup() or `vim.completion` specific, overlaps with `lsp.enable`)\n- A way for users to setup and configure `vim.completion` (which sources to use, what kind of triggers, etc.) (overlaps with `lsp.completion.enable`)\n- An extension to `complete-items` or an alternative to be able to able to support use-cases like snippets. (Strong overlap with the language server specification for the completion results.)\n\nSo far it is clear that this subsystem would be quite big, have large overlaps with `lsp.completion` and it remains unclear what the advantages would be.\n\nNote that both of these exclude re-implementing existing completion functions like filename completion as source for these interfaces. That could be done in both scenarios.\n\n\n---\n\n**Please only comment on this thread if you have a concrete technical limitation of `lsp.completion`** or points to add to the above.\n",
            "created_at": "2025-02-01T12:10:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/32123#issuecomment-2628927794",
            "id": 2628927794,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32123",
            "node_id": "IC_kwDOAPphoM6cskEy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 12,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 12,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628927794/reactions"
            },
            "updated_at": "2025-02-01T12:18:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628927794",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 12,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32123/comments",
    "created_at": "2025-01-20T13:59:24Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32123/events",
    "html_url": "https://github.com/neovim/neovim/issues/32123",
    "id": 2799346764,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "Nvim built-in (omni)completion",
            "id": 3214348835,
            "name": "completion",
            "node_id": "MDU6TGFiZWwzMjE0MzQ4ODM1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/completion"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32123/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 107,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 72,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-08-13T23:18:07Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "I_kwDOAPphoM6m2qRM",
    "number": 32123,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 5,
        "-1": 0,
        "confused": 0,
        "eyes": 11,
        "heart": 0,
        "hooray": 16,
        "laugh": 0,
        "rocket": 22,
        "total_count": 54,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32123/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32123/timeline",
    "title": "completion: plugins can define completion sources",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-08-16T19:39:21Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32123",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}