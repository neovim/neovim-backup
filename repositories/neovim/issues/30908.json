{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nFollowing 0083e03d, `vim.lsp.buf.definition` can throw an error:\n```\nError executing vim.schedule lua callback: /usr/local/share/nvim/runtime/lua/vim/lsp/buf.lua:102: Cursor position outside buffer\nstack traceback:\n        [C]: in function 'nvim_win_set_cursor'\n        /usr/local/share/nvim/runtime/lua/vim/lsp/buf.lua:102: in function 'on_response'\n        /usr/local/share/nvim/runtime/lua/vim/lsp/buf.lua:121: in function 'handler'\n        /usr/local/share/nvim/runtime/lua/vim/lsp/client.lua:681: in function ''\n        vim/_editor.lua: in function <vim/_editor.lua:0>\n```\n\nThis is reproducible with denols and the custom handler for it in nvim-lspconfig. I think this is a neovim core bug considering it was working prior to 0083e03d.\n\n\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\n\nHandlers are ripped from nvim-lspconfig.\n`minimal_init.lua`:\n```lua\n--- CHANGE THESE\nlocal pattern = {\n  \"javascript\",\n  \"javascriptreact\",\n  \"javascript.jsx\",\n  \"typescript\",\n  \"typescriptreact\",\n  \"typescript.tsx\",\n}\nlocal cmd = { \"deno\", \"lsp\" }\n-- Add files/folders here that indicate the root of a project\nlocal root_markers = { \"deno.json\" }\n-- Change to table with settings if required\nlocal settings = {\n  deno = {\n    enable = true,\n    suggest = {\n      imports = {\n        hosts = {\n          [\"https://deno.land\"] = true,\n        },\n      },\n    },\n  },\n}\n\nlocal function virtual_text_document_handler(uri, res, client)\n  if not res then\n    return nil\n  end\n\n  local lines = vim.split(res.result, \"\\n\")\n  local bufnr = vim.uri_to_bufnr(uri)\n\n  local current_buf = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)\n  if #current_buf ~= 0 then\n    return nil\n  end\n\n  vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, lines)\n  vim.api.nvim_set_option_value(\"readonly\", true, { buf = bufnr })\n  vim.api.nvim_set_option_value(\"modified\", false, { buf = bufnr })\n  vim.api.nvim_set_option_value(\"modifiable\", false, { buf = bufnr })\n  vim.lsp.buf_attach_client(bufnr, client.id)\nend\n\nlocal function virtual_text_document(uri, client)\n  local params = {\n    textDocument = {\n      uri = uri,\n    },\n  }\n  local result = client.request_sync(\"deno/virtualTextDocument\", params)\n  virtual_text_document_handler(uri, result, client)\nend\n\nlocal function denols_handler(err, result, ctx, config)\n  if not result or vim.tbl_isempty(result) then\n    return nil\n  end\n\n  local client = vim.lsp.get_client_by_id(ctx.client_id)\n  for _, res in pairs(result) do\n    local uri = res.uri or res.targetUri\n    if uri:match(\"^deno:\") then\n      virtual_text_document(uri, client)\n      res[\"uri\"] = uri\n      res[\"targetUri\"] = uri\n    end\n  end\n\n  vim.lsp.handlers[ctx.method](err, result, ctx, config)\nend\n\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = pattern,\n  callback = function(args)\n    local match = vim.fs.find(root_markers, { path = args.file, upward = true })[1]\n    local root_dir = match and vim.fn.fnamemodify(match, \":p:h\") or nil\n    vim.lsp.start({\n      name = \"bugged-ls\",\n      cmd = cmd,\n      root_dir = root_dir,\n      settings = settings,\n      handlers = {\n        [\"textDocument/definition\"] = denols_handler,\n        [\"textDocument/typeDefinition\"] = denols_handler,\n        [\"textDocument/references\"] = denols_handler,\n      },\n    })\n  end,\n})\n\nif false then\n  vim.lsp.set_log_level(\"debug\")\nend\n```\n\n### Steps\n1. `mkdir /tmp/testing && cd /tmp/testing`\n2. `touch deno.json && echo '{}' > deno.json`\n3. `touch test.ts && echo 'console.log('hello world')' > test.ts`\n4. `nvim -u minimal_init.lua test.ts`\n5. put cursor over the `log` of `console.log` and run `:lua vim.lsp.buf.definition()`\n6. observe error\n\n### Expected behavior\n\nShould open the buffer/window at the URI and cursor position returned by denols.\nThis is observable prior to 0083e03d\n\n### Nvim version (nvim -v)\n\nNVIM v0.11.0-dev-1028+g6dad1f9f19\n\n### Language server name/version\n\ndenols 2.0.2\n\n### Operating system/version\n\nLinux archlinux 6.11.3-arch1-1\n\n### Log file\n\nhttps://gist.github.com/jamestrew/d9ad40083357a41308f2075bff962623",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Client handlers or global handlers are no longer called by buf.definition. That's a intended breaking change because it's the only way for us to fix handling of multiple clients.\n\nTo support `deno:/` documents via `deno/virtualTextDocument` you'd have to register a BufReadCmd instead. \n\nThere's also an addition to the protocol that's similar to the custom off-spec `deno/virtualTextDocument` which we can add to core. No idea if deno would support that already\n\nhttps://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#workspace_textDocumentContent",
            "created_at": "2024-10-23T15:13:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/30908#issuecomment-2432578080",
            "id": 2432578080,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30908",
            "node_id": "IC_kwDOAPphoM6Q_jIg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2432578080/reactions"
            },
            "updated_at": "2024-10-23T15:18:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2432578080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Same issue when using `vim.lsp.buf.definition` on a c# method with [omnisharp-extended](https://github.com/Hoffs/omnisharp-extended-lsp.nvim?tab=readme-ov-file#custom-handler-suboptimal) that registers its custom `textDocument/definition` handler.\n\nThis worked in neovim 0.10.2 (released in Oct 2024), but most likely due to an other issue people found out about this earlier (in Jan 2024) and fixed in https://github.com/Hoffs/omnisharp-extended-lsp.nvim/issues/28. Mostly writing this comment for discoverability, [this](https://github.com/Hoffs/omnisharp-extended-lsp.nvim?tab=readme-ov-file#custom-command-optimal) is the solution.\n\n",
            "created_at": "2024-11-21T22:53:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/30908#issuecomment-2492519893",
            "id": 2492519893,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30908",
            "node_id": "IC_kwDOAPphoM6UkNXV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2492519893/reactions"
            },
            "updated_at": "2024-11-21T22:53:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2492519893",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29818440?v=4",
                "events_url": "https://api.github.com/users/gepbird/events{/privacy}",
                "followers_url": "https://api.github.com/users/gepbird/followers",
                "following_url": "https://api.github.com/users/gepbird/following{/other_user}",
                "gists_url": "https://api.github.com/users/gepbird/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gepbird",
                "id": 29818440,
                "login": "gepbird",
                "node_id": "MDQ6VXNlcjI5ODE4NDQw",
                "organizations_url": "https://api.github.com/users/gepbird/orgs",
                "received_events_url": "https://api.github.com/users/gepbird/received_events",
                "repos_url": "https://api.github.com/users/gepbird/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gepbird/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gepbird/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gepbird",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> , [this](https://github.com/Hoffs/omnisharp-extended-lsp.nvim?tab=readme-ov-file#custom-command-optimal) is the solution.\n\nThat's more of a workaround.\n\nThe proper solution is to register a `BufReadCmd` for whatever custom scheme the server is using. E.g. for deno it would be `deno:*` \nThe `BufReadCmd` implementation needs to make a synchronous request to whatever off-spec method the server provides to fetch the content.  (Example: https://github.com/mfussenegger/nvim-jdtls/blob/2c84b72ded8789ff3d78f5ad11710e3b45bec6d6/lua/jdtls.lua#L1186-L1237)\n\nWith that all the lsp.buf methods will continue working.\n\nOnce the server's have migrated from the off-spec implementation to https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#workspace_textDocumentContent we can implement that in core.",
            "created_at": "2024-11-22T15:20:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/30908#issuecomment-2494002047",
            "id": 2494002047,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30908",
            "node_id": "IC_kwDOAPphoM6Up3N_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2494002047/reactions"
            },
            "updated_at": "2024-11-22T15:21:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2494002047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@gepbird The workaround doesn't work. I have it installed via lazy, but am still getting the same error. Do I have to do the remapping myself? Or is it sufficient to download this plugin via lazy?",
            "created_at": "2024-11-26T21:22:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/30908#issuecomment-2501958815",
            "id": 2501958815,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30908",
            "node_id": "IC_kwDOAPphoM6VINyf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2501958815/reactions"
            },
            "updated_at": "2024-11-26T21:22:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2501958815",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/21282801?v=4",
                "events_url": "https://api.github.com/users/sonderistic/events{/privacy}",
                "followers_url": "https://api.github.com/users/sonderistic/followers",
                "following_url": "https://api.github.com/users/sonderistic/following{/other_user}",
                "gists_url": "https://api.github.com/users/sonderistic/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sonderistic",
                "id": 21282801,
                "login": "sonderistic",
                "node_id": "MDQ6VXNlcjIxMjgyODAx",
                "organizations_url": "https://api.github.com/users/sonderistic/orgs",
                "received_events_url": "https://api.github.com/users/sonderistic/received_events",
                "repos_url": "https://api.github.com/users/sonderistic/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sonderistic/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sonderistic/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sonderistic",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I implemented \"BufReadCmd\" approach, improvements can be made(filetype detection) but works fine by me right now.\nNVIM v0.11.0-dev-6028+gb06f42b502-Homebrew\nBuild type: Release\nLuaJIT 2.1.1734355927\n\n```lua\nlocal function virtual_text_document(params)\n  local bufnr = params.buf\n  -- Path somehow has a leading slash, which broke things\n  local actual_path = params.match:sub(2)\n\n  local method = \"deno/virtualTextDocument\"\n  local req_params = { textDocument = { uri = actual_path } }\n  local client = vim.lsp.get_clients({ name = \"denols\" })[1]\n  local response = client.request_sync(method, req_params, 2000, 0)\n  if not response or type(response.result) ~= \"string\" then\n    return\n  end\n\n  local lines = vim.split(response.result, \"\\n\")\n  vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, lines)\n  vim.api.nvim_set_option_value(\"readonly\", true, { buf = bufnr })\n  vim.api.nvim_set_option_value(\"modified\", false, { buf = bufnr })\n  vim.api.nvim_set_option_value(\"modifiable\", false, { buf = bufnr })\n  vim.api.nvim_buf_set_name(bufnr, actual_path)\n  vim.lsp.buf_attach_client(bufnr, client.id)\n  vim.api.nvim_set_option_value(\"filetype\", \"typescript\", { buf = bufnr })\nend\n\nvim.api.nvim_create_autocmd({ \"BufReadCmd\" }, {\n  pattern = { \"/deno:*\" },\n  callback = virtual_text_document,\n})\n```",
            "created_at": "2025-01-10T17:18:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/30908#issuecomment-2583300661",
            "id": 2583300661,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30908",
            "node_id": "IC_kwDOAPphoM6Z-go1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2583300661/reactions"
            },
            "updated_at": "2025-02-13T17:45:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2583300661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23419619?v=4",
                "events_url": "https://api.github.com/users/HOnatToprak/events{/privacy}",
                "followers_url": "https://api.github.com/users/HOnatToprak/followers",
                "following_url": "https://api.github.com/users/HOnatToprak/following{/other_user}",
                "gists_url": "https://api.github.com/users/HOnatToprak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HOnatToprak",
                "id": 23419619,
                "login": "HOnatToprak",
                "node_id": "MDQ6VXNlcjIzNDE5NjE5",
                "organizations_url": "https://api.github.com/users/HOnatToprak/orgs",
                "received_events_url": "https://api.github.com/users/HOnatToprak/received_events",
                "repos_url": "https://api.github.com/users/HOnatToprak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HOnatToprak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HOnatToprak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HOnatToprak",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "This didn't work for me, but it worked with a few adjustments - mostly around `/deno:*` vs `deno:/*` pattern.\n\nNVIM v0.11.0-dev\nBuild type: Release\nLuaJIT 2.1.1713773202\n\n\n```lua\nlocal function virtual_text_document(params)\n  local bufnr = params.buf\n  local actual_path = params.match:sub(1)\n\n  local clients = vim.lsp.get_clients({ name = \"denols\" })\n  if #clients == 0 then\n    return\n  end\n\n  local client = clients[1]\n  local method = \"deno/virtualTextDocument\"\n  local req_params = { textDocument = { uri = actual_path } }\n  local response = client.request_sync(method, req_params, 2000, 0)\n  if not response or type(response.result) ~= \"string\" then\n    return\n  end\n\n  local lines = vim.split(response.result, \"\\n\")\n  vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, lines)\n  vim.api.nvim_set_option_value(\"readonly\", true, { buf = bufnr })\n  vim.api.nvim_set_option_value(\"modified\", false, { buf = bufnr })\n  vim.api.nvim_set_option_value(\"modifiable\", false, { buf = bufnr })\n  vim.api.nvim_buf_set_name(bufnr, actual_path)\n  vim.lsp.buf_attach_client(bufnr, client.id)\n\n  local filetype = \"typescript\"\n  if actual_path:sub(-3) == \".md\" then\n    filetype = \"markdown\"\n  end\n  vim.api.nvim_set_option_value(\"filetype\", filetype, { buf = bufnr })\nend\n\nvim.api.nvim_create_autocmd({ \"BufReadCmd\" }, {\n  pattern = { \"deno:/*\" },\n  callback = virtual_text_document,\n})\n\n```",
            "created_at": "2025-02-13T17:00:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/30908#issuecomment-2657220629",
            "id": 2657220629,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30908",
            "node_id": "IC_kwDOAPphoM6eYfgV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2657220629/reactions"
            },
            "updated_at": "2025-02-13T17:46:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2657220629",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13242052?v=4",
                "events_url": "https://api.github.com/users/qti3e/events{/privacy}",
                "followers_url": "https://api.github.com/users/qti3e/followers",
                "following_url": "https://api.github.com/users/qti3e/following{/other_user}",
                "gists_url": "https://api.github.com/users/qti3e/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/qti3e",
                "id": 13242052,
                "login": "qti3e",
                "node_id": "MDQ6VXNlcjEzMjQyMDUy",
                "organizations_url": "https://api.github.com/users/qti3e/orgs",
                "received_events_url": "https://api.github.com/users/qti3e/received_events",
                "repos_url": "https://api.github.com/users/qti3e/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/qti3e/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/qti3e/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/qti3e",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The didn't work for me, but it worked with a few adjustments - mostly around /deno:* vs deno:/* pattern.\n\nYou are a legend. THANK YOU.",
            "created_at": "2025-02-13T17:13:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/30908#issuecomment-2657252517",
            "id": 2657252517,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30908",
            "node_id": "IC_kwDOAPphoM6eYnSl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2657252517/reactions"
            },
            "updated_at": "2025-02-13T17:13:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2657252517",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24403730?v=4",
                "events_url": "https://api.github.com/users/manzt/events{/privacy}",
                "followers_url": "https://api.github.com/users/manzt/followers",
                "following_url": "https://api.github.com/users/manzt/following{/other_user}",
                "gists_url": "https://api.github.com/users/manzt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/manzt",
                "id": 24403730,
                "login": "manzt",
                "node_id": "MDQ6VXNlcjI0NDAzNzMw",
                "organizations_url": "https://api.github.com/users/manzt/orgs",
                "received_events_url": "https://api.github.com/users/manzt/received_events",
                "repos_url": "https://api.github.com/users/manzt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/manzt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/manzt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/manzt",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30908/comments",
    "created_at": "2024-10-23T02:09:10Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30908/events",
    "html_url": "https://github.com/neovim/neovim/issues/30908",
    "id": 2606950065,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "",
            "id": 606691254,
            "name": "has:plan",
            "node_id": "MDU6TGFiZWw2MDY2OTEyNTQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:plan"
        },
        {
            "color": "f9d0c4",
            "default": false,
            "description": "wrong behavior that was introduced in a previous commit (please bisect)",
            "id": 619474658,
            "name": "bug-regression",
            "node_id": "MDU6TGFiZWw2MTk0NzQ2NTg=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-regression"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "issue has been tracked to a specific commit",
            "id": 1481421490,
            "name": "has:bisected",
            "node_id": "MDU6TGFiZWwxNDgxNDIxNDkw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:bisected"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30908/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 696,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-02-17T18:55:16Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6bYuax",
    "number": 30908,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30908/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30908/timeline",
    "title": "LSP: `definition` \"Cursor position outside of buffer\" error",
    "updated_at": "2025-02-13T17:46:52Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30908",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/66286082?v=4",
        "events_url": "https://api.github.com/users/jamestrew/events{/privacy}",
        "followers_url": "https://api.github.com/users/jamestrew/followers",
        "following_url": "https://api.github.com/users/jamestrew/following{/other_user}",
        "gists_url": "https://api.github.com/users/jamestrew/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jamestrew",
        "id": 66286082,
        "login": "jamestrew",
        "node_id": "MDQ6VXNlcjY2Mjg2MDgy",
        "organizations_url": "https://api.github.com/users/jamestrew/orgs",
        "received_events_url": "https://api.github.com/users/jamestrew/received_events",
        "repos_url": "https://api.github.com/users/jamestrew/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jamestrew/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jamestrew/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jamestrew",
        "user_view_type": "public"
    }
}