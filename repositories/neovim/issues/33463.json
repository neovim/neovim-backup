{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nHey all — I have an idea for a new Neovim feature to generalize and extend\nregister behavior.\n\n# Proposal: User-Defined Registers\n\nI’m proposing support for **user-defined registers** — allowing users to define\ncustom behavior for `yank`/`put` operations on **arbitrary register names**,\nincluding nontraditional or multibyte characters.\n\nNeovim currently supports a fixed set of registers we all know and love (`\"`,\n`a–z`, `0–9`, `+`, `*`, `=`, `%`, `#`, etc.). Some of these have special\nsemantics, like `'%'` for the current filename or `'='` for expression\nevaluation. While powerful, the current system is not very extensible — there’s\nno way to define custom behavior for new register names.\n\nThere is limited support for defining clipboard behavior, but that is restricted\nto just the `+` and `*` registers.\n\nThis proposal introduces a mechanism for users to define `put` and `yank`\nsemantics for arbitrary registers via Lua or VimL. There’s plenty of unused\nspace left in the ASCII set (e.g. `'$', '&', '~', '(', ')'`, control characters, etc), and we could\noptionally support multibyte register names as well (e.g. `'α'`, `'☃'`, etc.).\n\n# Design\n\nThe design hinges on a new option, `userregfunc` (or `urf` for short). This\nfunction is called whenever a non-standard register is invoked. It must have the\nfollowing signature:\n\n```vim\nfunction! UserregFunction(action, register_name, content)\n...\nendfunction\n\nset userregfunc=UserregFunction\n```\n\n- `action` is either `'yank'` or `'put'`\n- `register_name` is the name of the register being accessed\n- `content` is a structured register value (similar to `yankreg_T`) when `action\n  == 'yank'`\n- The function should return a `yankreg_T`-like structure when `action == 'put'`\n\nIn practice, this function would likely be implemented in Lua, using a flexible\ninterface like:\n\n```lua\nvim.user_registers[\"$\"] = {\n  get = function()\n    return {\n      type = \"v\", -- characterwise\n      contents = { vim.fn.fnamemodify(vim.fn.expand(\"%\"), \":t\") },\n    }\n  end\n}\n```\n\n# Status\n\nI've been daily-driving a working [patch](https://github.com/jrahm/neovim/tree/user_registers) in my private Neovim fork for some\nyears, and it's been surprisingly useful. Some of the user-defined registers I\ncurrently use:\n\n- `$` — returns the *basename* of the current file (like `'%'`, but just the\n  filename)\n- `&` — reads/writes yanked data from/to a file on disk, allowing registers to\n  persist across Neovim instances (great for headless setups). I can even edit\n  the file manually and immediately access the new value.\n- `~` — Puts/retrieves pastes from Pastebin\n- `|` — Holds the contents of the current buffer. Writing to it changes the buffer.\n- Multibyte registers (like `'α'` or `'☃'`) work like any other register\n\nAll standard registers continue to behave exactly as they do today — this is\npurely an extension, not a replacement.\n\n# Known Issues\n\n- ShaDa support for user-defined registers would be difficult or impractical due\n  to their dynamic nature\n- Append semantics (`\"A` to append to `\"a`) would be ill-defined for\n  non-standard registers — e.g., `\"θ` and `\"Θ` would be treated as distinct\n  registers\n- Some sharp edges remain with multibyte support. My patch covers most of them,\n  but I still occasionally encounter places where multibyte handling breaks\n- Some Ex-commands like :registers don't play nicely with the user-defined registers.\n\n---\n\nLet me know your thoughts! If this is something the community would be\ninterested in, I’d be happy to polish and submit my patch for consideration.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33463/comments",
    "created_at": "2025-04-14T06:36:46Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33463/events",
    "html_url": "https://github.com/neovim/neovim/issues/33463",
    "id": 2992039686,
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "save/restore editor state: shada, context, ctx, sessions, mksession",
            "id": 4449264023,
            "name": "editor-state",
            "node_id": "LA_kwDOAPphoM8AAAABCTJhlw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor-state"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 7421978602,
            "name": "editor",
            "node_id": "LA_kwDOAPphoM8AAAABumJn6g",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33463/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6yVucG",
    "number": 33463,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 4,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33463/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33463/timeline",
    "title": "RFC: User-Defined Registers",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-14T11:19:47Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33463",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3434593?v=4",
        "events_url": "https://api.github.com/users/jrahm/events{/privacy}",
        "followers_url": "https://api.github.com/users/jrahm/followers",
        "following_url": "https://api.github.com/users/jrahm/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrahm/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jrahm",
        "id": 3434593,
        "login": "jrahm",
        "node_id": "MDQ6VXNlcjM0MzQ1OTM=",
        "organizations_url": "https://api.github.com/users/jrahm/orgs",
        "received_events_url": "https://api.github.com/users/jrahm/received_events",
        "repos_url": "https://api.github.com/users/jrahm/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jrahm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrahm/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jrahm",
        "user_view_type": "public"
    }
}