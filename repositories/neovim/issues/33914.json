{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "A generic tree-view component has come up several times, particularly as a potential replacement for the netrw directory listing. This issue is intended to track and discuss the design and implementation of a generic `vim.ui.tree` element. It is **not** meant to focus on netrw or file browsing specifically. See #32280 and #32430 for that.\n\n@mfussenegger suggested a useful direction [here](https://github.com/neovim/neovim/pull/32430#issuecomment-2657379029):\n\n> Something more like textual [Tree](https://textual.textualize.io/widget_gallery/#tree) that can be used to display arbitrary data in tree shape with collapse/expand functionality and ideally also a way to retrieve the underlying data (lua table) from a given line.\n\nThus it should:\n\n1. Be generic and not tied to file structures\n2. Be constructed from a Lua table\n3. Support retrieving data, e.g. as:\n  - A dot-separated path (`a.b.c`)?\n  - A Lua-style table path (`{ a = { b = { c } } }`)?\n4. Open in a buffer? Or should it only return text, like vim.inspect?\n5. Folds (preferably with Nvim's builtin fold mechanism\n6. ...\n\nI've experimented with a `vim.ui.tree` prototype that renders arbitrary Lua tables as trees, including folding and virtual text for fold indicators:\n\n<img width=\"671\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0599846d-ec6f-4d85-a597-362c57d2f3c3\" />\n\n<sub>(Yes, itâ€™s a file listing for now ðŸ™ˆ)</sub>\n\nI'm happy to continue working on this, but as @clason [pointed out](https://github.com/neovim/neovim/issues/32280#issuecomment-2862245146), we'll likely need to work through some bikeshedding first. I'd prefer to start implementation once there's general agreement on the requirements and direction of the tree UI component. I hope this issue can be used to discuss the requirements and implementation details.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Implementation-wise, the easiest approach seems to me to use `vim.inspect` to print the Lua table and add some conceal or remove the syntax (`{`, `}`, `\"`). Conceal can possibly help with folding (Heck, even the TS parser for lua can be leveraged).\n\nPros:\n- Reuses the `vim.inspect` code for recursively printing tables\n- Probably easy to support retrieving data\n\nCons:\n- Feels a bit like a hack\n- Have to change it a bit to print elements of an array-like table on separate lines\n- `vim.inspect` handles more than just strings? Not sure if that's a con?",
            "created_at": "2025-05-08T17:05:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/33914#issuecomment-2863727766",
            "id": 2863727766,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33914",
            "node_id": "IC_kwDOAPphoM6qsQSW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863727766/reactions"
            },
            "updated_at": "2025-10-14T22:33:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2863727766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm currently working on the implementation and would like some feedback on the interface. Not the full opts, only the important parts:\n\n```lua\n---@class vim.ui.tree.Opts\n---@inlinedoc\n---\n---Function that receives the node of which the subtree will be opened. It\n---should return a new tree, which will be the children of `node`.\n---@field on_expand? fun(node: TreeNode): Tree\n---\n---Function receiving the selected node. The default keymap is `<CR>` in normal\n---mode to select a node.\n---@field on_select? fun(node: TreeNode)\n\n---@param items Tree\n---@param opts? vim.ui.tree.Opts\n---@return integer buf\n---@return fun(): table\nfunction M.tree(items, opts)\nend\n```\n\n- `on_expand` is a function that expands the closed tree node under the cursor. See below for an example of a file listing. This behavior covers one of the requirements stated by @mfussenegger: \"(...) fetching children ad-hoc on expand instead of up-front\"\n\n- `on_select` is a provided as convenience since it's probably used often and a bit easier then setting other custom keymaps and actions (more on that in the following point). It is run on `<CR>` and receives the node under the cursor.\n\n- Of course the tree should support all kinds of keymaps specific to that tree (@mfussenegger: \"an action menu with arbitrary actions on the item under the cursor like set-variable, copy to register, etc.\"). I came up with an approach that I haven't really seen anywhere else in the code base, but works pretty well. The function returns both the tree bufnr and a function that gets the element under the cursor. Here are some examples of it's usage:\n\n```lua\nlocal buf, current_tree_node = vim.ui.tree({ 'a', 'b', c = { 'd', 'e' } })\n\n-- copy current path to system clipboard\n-- Example: cursor on `e` copies \"c.e\" to clipboard\nvim.keymap.set('n', 'yy', function()\n  local node = current_tree_node()\n  vim.fn.setreg('+', table.concat(node.path, '.'))\nend, { buffer = buf })\n\n\nvim.keymap.set('n', 'dd', function()\n  local node = current_tree_node()\n  if node.kind == 'leaf' then\n    local path = vim.fs.joinpath(unpack(node.path))\n    print('would remove file ' .. path)\n  end\nend, { buffer = buf })\n```\n\nBut I might be in a bit of a tunnel vision here. Does anyone have a proposal for a cleaner approach?\n\n---\n\nFurthermore, since Lua tables are don't have an intrinsic order, the order in the tree is always different. This behavior is probably unwanted, but I'm not really sure how to proceed. The only way I currently can think of is to have three ways to sort the tree: `@field order? 'alphabet'|'leafsfirst'|'leafslast'` and just sort before constructing the tree.\n\n--- \n\nLast point to discuss for the design: I currently use `{ vim.NIL }` to mark a subtree as \"this subtree should be ad-hoc fetched when opened\". So constructing an ad-hoc expandable tree from a directory listing looks like this:\n\n```lua\nlocal function lsdir(dir)\n  local items = {}\n  for name, ftype in vim.fs.dir(dir) do\n    if ftype == 'directory' then\n      items[name .. '/'] = { vim.NIL }\n    else\n      table.insert(items, name)\n    end\n  end\n  return items\nend\n\nlocal start = '.'\nvim.print(lsdir(start))\n-- {\n--   dir1 = { vim.NIL },\n--   dir2 = { vim.NIL },\n--   dir3 = { vim.NIL },\n--   'file1',\n--   'file2',\n-- }\n\nvim.ui.tree(lsdir(start), {\n  on_expand = function(current)\n    local path = vim.fs.joinpath(start, vim.fs.joinpath(unpack(current.path)))\n    local items = lsdir(path)\n    return items\n  end,\n})\n```\n\nLet me know what you think. Development happens in my [ui-tree branch](https://github.com/yochem/neovim/tree/ui-tree). Described in this comment is the state as in https://github.com/yochem/neovim/commit/85f0765dd5b8df6b5cdc7709df267a28ab811d79.\n\n**Bonus**: Recreating the Netrw directory listing view in 50 SLOC using `vim.ui.tree`:\n<details><summary>Code here</summary>\n\n```lua\n-- Warning: Rough code. I'm using it for testing/developing mainly.\nlocal tree_buf = nil\n\nlocal function lsdir(dir)\n  local items = {}\n  for name, ftype in vim.fs.dir(dir) do\n    if ftype == 'directory' then\n      items[name .. '/'] = { vim.NIL }\n    else\n      table.insert(items, name)\n    end\n  end\n  return items\nend\n\nlocal function next_dir(current)\n  local path = vim.fs.joinpath(unpack(current.path))\n  local parent = vim.fn.bufname(tree_buf)\n  local new = vim.fs.joinpath(parent, path)\n  local items = lsdir(new)\n  return items\nend\n\nlocal function select(item)\n  local currdir = vim.fn.bufname(tree_buf)\n  if item.name == '..' then\n    local parent = vim.iter(vim.fs.parents(currdir)):next()\n    local files = lsdir(parent)\n    table.insert(files, 1, '..')\n    vim.ui.tree(files, {\n      title = parent,\n      on_expand = next_dir,\n      on_select = select,\n      buf = tree_buf,\n    })\n  elseif item.kind == 'leaf' then\n    local path = vim.fs.joinpath(currdir, vim.fs.joinpath(unpack(item.path)))\n    vim.cmd.edit(path)\n  elseif item.kind == 'tree' then\n    vim.cmd('norm za')\n  end\nend\n\n\nlocal dir = vim.fs.abspath('.')\nlocal files = lsdir(dir)\ntable.insert(files, 1, '..')\nlocal buf, _ = vim.ui.tree(files, {\n  title = dir,\n  on_expand = next_dir,\n  on_select = select,\n  buf = tree_buf,\n})\ntree_buf = buf\n```\n\n</details> ",
            "created_at": "2025-10-14T23:13:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/33914#issuecomment-3403939675",
            "id": 3403939675,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33914",
            "node_id": "IC_kwDOAPphoM7K4_9b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 2,
                "laugh": 0,
                "rocket": 1,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3403939675/reactions"
            },
            "updated_at": "2025-10-14T23:22:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3403939675",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That interface LGTM, try to keep it minimal to unblock the initial PR (helps a lot to avoid phase-2 discussions in the phase-1 PR).\n\n- Something to think about: a typical pitfall is when the tree ui starts to store data and then plugins have lots of spaghetti trying to reason about the current \"cached\" state of the UI.\n    - How can we provided a path for plugins to \"provide\" data in a one-way fashion so that the tree is just a view?\n    - Plugins will want to *refresh* the tree, or subtrees, and they will want to get called to re-fetch data for the subtree.\n- Not sure about `current_tree_node`, though it looks interesting. Usually callbacks are used though they can get cumbersome.\n\n> since Lua tables are don't have an intrinsic order, the order in the tree is always different. \n\nDoes `OrderedDict` help? https://github.com/neovim/neovim/pull/35464\n\n> currently use `{ vim.NIL }` to mark a subtree as \"this subtree should be ad-hoc fetched when opened\"\n\nseems fine but is there a reason not to use a string (pseudo-enum)?",
            "created_at": "2025-10-14T23:37:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/33914#issuecomment-3403982726",
            "id": 3403982726,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33914",
            "node_id": "IC_kwDOAPphoM7K5KeG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3403982726/reactions"
            },
            "updated_at": "2025-10-14T23:38:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3403982726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> try to keep it minimal to unblock the initial PR\n\nYes I also thought about doing this in multiple PR if needed. Just currently investigating if the base is solid enough to easily extend to meet complexer requirements. \n\nThanks for the pitfalls mentioned. I indeed try to make it as stateless as possible. \n\n> Usually callbacks are used though they can get cumbersome.\n\nLike a `set_keymaps`/`init` callback that is called when setting up the tree buffer? Or do you mean something else? \n\n> Does OrderedDict help?\n\n~Yes! That would mean less hand-crafted sorting and giving the user more flexibility on _how_ it's sorted.~ Hm not really, as I don't think insertion-order is of interest here but rather how it's sorted (I.e. alphabetically or something weird like on filesize). Need some sort of `sorteddict`.\n\n> seems fine but is there a reason not to use a string (pseudo-enum)?\n\nTable is needed so the foldexpr can find a fold (indent-based). String can potentially conflict with just a normal element: `{ \"<Placeholder>\" }` could just be an element named `\"<Placeholder>\"`. ",
            "created_at": "2025-10-15T00:00:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/33914#issuecomment-3404021050",
            "id": 3404021050,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33914",
            "node_id": "IC_kwDOAPphoM7K5T06",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3404021050/reactions"
            },
            "updated_at": "2025-10-15T11:52:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3404021050",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> String can potentially conflict with just a normal element: `{ \"<Placeholder>\" }` could just be an element named \"\".\n\nI would suggest defining a constant table like `vim.ui.tree.empty`",
            "created_at": "2025-10-15T00:18:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/33914#issuecomment-3404067553",
            "id": 3404067553,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33914",
            "node_id": "IC_kwDOAPphoM7K5fLh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3404067553/reactions"
            },
            "updated_at": "2025-10-15T00:18:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3404067553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Furthermore, since Lua tables are don't have an intrinsic order, the order in the tree is always different. This behavior is probably unwanted, but I'm not really sure how to proceed.\n\nCan't the nodes of the tree be a list to deal with that?\n\n---\n\nInterface looks good on a first glance. In some ways similar to what I use in nvim-dap - where I have a few differences/additions:\n\nIn general the node/item of a tree are arbitrary there, because of that there are:\n\n- get_key: Gets a hashable key for the item\n- render: to turn a node/item into a string that is displayed in the buffer)\n- has_children:  maybe dap specific, but there you can tell if a node can be expanded before fetching the data)\n- get_children: synchronous - gets already fetched children)\n- fetch_children: async with callback. For vim.ui.tree probably one of these two is sufficient)\n- compute_actions: This is a bit different a different approach to your keymap example. Instead of the keymap getting the current node and the keymap logic specifying what can be done, the tree implementation can return a list of actions for a given node. A action is a `{ label: string, fn: function }`. This is a bit like a code-action menu. Not sure if something like this is needed in the first version. Could be added latter.\n- is_lazy and load_value: these are also very dap specific where it is possible for entries to first show as `...` and then you need to expand them to show the value. Opposed to regular expansion the value is replaced inline. I don't think anything like this is needed in vim.ui.tree\n\n(This is just as for your information - don't mean to imply that this should be done in a similar way)\n\n\nAnother aspect that might be interesting: In nvim-dap the whole thing is based on extmarks and built on something similar to what is described in https://github.com/neovim/neovim/issues/34683\n\nThis has the advantage that tree's flow with the context and expansion works if something is inserted above/below\n\n\n> Plugins will want to refresh the tree, or subtrees, and they will want to get called to re-fetch data for the subtree.\n\nThe way nvim-dap deals with this is by decoupling:\n\n- The data (a list of items with children)\n- A interface with the functions mentioned above, with implementations for each type of items. (Variables, Threads, etc.)\n- The tree widget, which contains the expansion state, and a `render` plus `toggle` function to collapse/expand. The `render` function takes the tree root. To draw out the tree. If you render with new data but it will keep the expansion state based on the keys. \n",
            "created_at": "2025-10-15T18:18:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/33914#issuecomment-3407715512",
            "id": 3407715512,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33914",
            "node_id": "IC_kwDOAPphoM7LHZy4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3407715512/reactions"
            },
            "updated_at": "2025-10-15T18:20:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3407715512",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33914/comments",
    "created_at": "2025-05-08T16:58:54Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33914/events",
    "html_url": "https://github.com/neovim/neovim/issues/33914",
    "id": 3049591992,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33914/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM61xRS4",
    "number": 33914,
    "parent_issue_url": "https://api.github.com/repos/neovim/neovim/issues/32280",
    "performed_via_github_app": null,
    "reactions": {
        "+1": 11,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 11,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33914/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33914/timeline",
    "title": "vim.ui.tree",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-10-15T18:20:53Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33914",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
        "events_url": "https://api.github.com/users/yochem/events{/privacy}",
        "followers_url": "https://api.github.com/users/yochem/followers",
        "following_url": "https://api.github.com/users/yochem/following{/other_user}",
        "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/yochem",
        "id": 23235841,
        "login": "yochem",
        "node_id": "MDQ6VXNlcjIzMjM1ODQx",
        "organizations_url": "https://api.github.com/users/yochem/orgs",
        "received_events_url": "https://api.github.com/users/yochem/received_events",
        "repos_url": "https://api.github.com/users/yochem/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/yochem",
        "user_view_type": "public"
    }
}