{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Say you `ino` re-mapped `hh` to `<Esc>` like some people do to be able to escape insert mode faster.\r\n\r\nWhen you type text and end with `h`, like `mouth`, and want to escape insert mode right after, you end up having to wait for the timeout to occur.\r\n\r\nI believe that being able to set the `timeoutlen` on a per-mapping setting would be a good customisation of neovim's behaviour.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "@tgy Maybe you can change `timeoutlen` when you enter insert mode and update it when you leave insert mode. This way, you won't have to wait so long in insert mode when you press `h`. I think a valid workaround for this issue.\r\n\r\nAnother way is to map h and check if the previous character entered is also `h` and erase that character and leave insert mode. The issue is that when you want to insert literal `hh`, you need to enter `h`, then press `Ctrl-V` followed by `h`. Since `hh` is rarely used in English, I think it may be worth a try.",
            "created_at": "2020-11-23T15:54:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/12093#issuecomment-732248891",
            "id": 732248891,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12093",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczMjI0ODg5MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/732248891/reactions"
            },
            "updated_at": "2020-11-23T15:54:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/732248891",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/16662357?v=4",
                "events_url": "https://api.github.com/users/jdhao/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdhao/followers",
                "following_url": "https://api.github.com/users/jdhao/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdhao/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdhao",
                "id": 16662357,
                "login": "jdhao",
                "node_id": "MDQ6VXNlcjE2NjYyMzU3",
                "organizations_url": "https://api.github.com/users/jdhao/orgs",
                "received_events_url": "https://api.github.com/users/jdhao/received_events",
                "repos_url": "https://api.github.com/users/jdhao/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdhao/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdhao/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdhao",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@jdhao I like your solution! However I have no idea how to implement that. Any pointer?",
            "created_at": "2020-11-24T08:19:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/12093#issuecomment-732733746",
            "id": 732733746,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12093",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczMjczMzc0Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/732733746/reactions"
            },
            "updated_at": "2020-11-24T08:19:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/732733746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/694873?v=4",
                "events_url": "https://api.github.com/users/choucavalier/events{/privacy}",
                "followers_url": "https://api.github.com/users/choucavalier/followers",
                "following_url": "https://api.github.com/users/choucavalier/following{/other_user}",
                "gists_url": "https://api.github.com/users/choucavalier/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/choucavalier",
                "id": 694873,
                "login": "choucavalier",
                "node_id": "MDQ6VXNlcjY5NDg3Mw==",
                "organizations_url": "https://api.github.com/users/choucavalier/orgs",
                "received_events_url": "https://api.github.com/users/choucavalier/received_events",
                "repos_url": "https://api.github.com/users/choucavalier/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/choucavalier/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/choucavalier/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/choucavalier",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@tgy  I have written [a post](https://jdhao.github.io/2020/11/23/neovim_better_mapping_for_leaving_insert_mode/) on the second way. When I type `k`, I will check if it is preceded by `j`. If that is the case, erase `j` and go back to insert mode.\r\n\r\nHere is the code:\r\n\r\n```vim\r\ninoremap <expr> k EscapeInsertOrNot()\r\n\r\n\" some test text\r\nfunction! EscapeInsertOrNot() abort\r\n  \" If k is preceded by j, then remove j and go to normal mode.\r\n  let line_text = getline('.')\r\n  let cur_ch_idx = GetCursorCharIdx()\r\n  let pre_char = strcharpart(line_text, cur_ch_idx-1, 1)\r\n  echom 'pre_char is:' pre_char\r\n  if pre_char ==# 'j'\r\n    return \"\\<BS>\\<ESC>\"\r\n  else\r\n    return 'k'\r\n  endif\r\nendfunction\r\n\r\n\r\n\" split(line_text, '\\zs') can split string into separate char\r\n\"汉字测试这是一些汉字 some char\r\n\" byte index of 这 is 14 (using col('.'))\r\n\r\n\" let my_str = '你好吗'\r\n\" strcharpart(my_str, 0, 1) is the first char in my_str (it is like my_str[0] in Python)\r\n\" strcharpart(my_str, 1, 1) is the second char in my_str\r\n\r\n\" let ch = '你'\r\n\" byteidx(ch, 1) is the number of byte in UTF-8 encoding for ch (suppose\r\n\" that the character encoding is UTF-8)\r\n\r\nfunction! GetCursorCharIdx() abort\r\n  \" This function returns the character-based index for character under\r\n  \" cursor.\r\n\r\n  \" Get the character under cursor\r\n  let line_text = getline('.')\r\n  let cur_byte_idx = col('.')\r\n  echo 'cur_byte_idx:' cur_byte_idx\r\n\r\n  if cur_byte_idx == 1\r\n    echomsg 'cursor char idx:' 0\r\n    return 0\r\n  endif\r\n\r\n  \" character index starts from zero\r\n  let [ch_idx, byte_idx] = [-1, 0]\r\n\r\n  for c in split(line_text, '\\zs')\r\n    let ch_idx += 1\r\n    let byte_idx += byteidx(c, 1)\r\n    echomsg ch_idx c byte_idx\r\n\r\n    if byte_idx+1 == cur_byte_idx\r\n      let pre_char = strcharpart(line_text, ch_idx, 1)\r\n      echomsg 'pre char is:' pre_char 'pre char index:' ch_idx\r\n\r\n      let cursor_char = strcharpart(line_text, ch_idx+1, 1)\r\n      echomsg 'cursor char' cursor_char 'index:' ch_idx+1\r\n\r\n      return ch_idx + 1\r\n    endif\r\n  endfor\r\nendfunction\r\n```\r\n\r\nI just copied it from my post. It is a bit of mess, but it works as expected.\r\n\r\nIf you want to use `hh` to escape, you need to change the left hand side of insert mode mapping:\r\n\r\n```\r\ninoremap <expr> h EscapeInsertOrNot()\r\n```\r\n\r\nThe related return logic in function ` EscapeInsertOrNot()` should be changed to\r\n\r\n```\r\n  if pre_char ==# 'h'\r\n    return \"\\<BS>\\<ESC>\"\r\n  else\r\n    return 'h'\r\n  endif\r\n```",
            "created_at": "2020-11-24T08:30:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/12093#issuecomment-732739722",
            "id": 732739722,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12093",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczMjczOTcyMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/732739722/reactions"
            },
            "updated_at": "2020-11-24T08:32:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/732739722",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/16662357?v=4",
                "events_url": "https://api.github.com/users/jdhao/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdhao/followers",
                "following_url": "https://api.github.com/users/jdhao/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdhao/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdhao",
                "id": 16662357,
                "login": "jdhao",
                "node_id": "MDQ6VXNlcjE2NjYyMzU3",
                "organizations_url": "https://api.github.com/users/jdhao/orgs",
                "received_events_url": "https://api.github.com/users/jdhao/received_events",
                "repos_url": "https://api.github.com/users/jdhao/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdhao/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdhao/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdhao",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/12093/comments",
    "created_at": "2020-04-08T15:53:03Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/12093/events",
    "html_url": "https://github.com/neovim/neovim/issues/12093",
    "id": 596683052,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "key bindings",
            "id": 3304938718,
            "name": "mappings",
            "node_id": "MDU6TGFiZWwzMzA0OTM4NzE4",
            "url": "https://api.github.com/repos/neovim/neovim/labels/mappings"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/12093/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1OTY2ODMwNTI=",
    "number": 12093,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/12093/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/12093/timeline",
    "title": "Setting the timeoutlen on a per-mapping basis",
    "updated_at": "2025-01-17T16:01:51Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/12093",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/694873?v=4",
        "events_url": "https://api.github.com/users/choucavalier/events{/privacy}",
        "followers_url": "https://api.github.com/users/choucavalier/followers",
        "following_url": "https://api.github.com/users/choucavalier/following{/other_user}",
        "gists_url": "https://api.github.com/users/choucavalier/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/choucavalier",
        "id": 694873,
        "login": "choucavalier",
        "node_id": "MDQ6VXNlcjY5NDg3Mw==",
        "organizations_url": "https://api.github.com/users/choucavalier/orgs",
        "received_events_url": "https://api.github.com/users/choucavalier/received_events",
        "repos_url": "https://api.github.com/users/choucavalier/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/choucavalier/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/choucavalier/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/choucavalier",
        "user_view_type": "public"
    }
}