{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nI spent some time this morning working to identify why 2 functional tests were unexpectedly failing on latest master when running them locally. I went through the typical debugging steps, did a make distclean, ran the functional tests in an ubuntu 20.04 docker container, then finally tried running the tests under xterm without tmux which ended up fixing the issue and everything succeeded.\n\nI then tried a few other terminals with and without tmux. Kitty passes all functional tests without tmux, then with tmux the same two tests fail, I did the same with xterm with and without and got the same result, and finally I tried attaching to the same docker container under tmux and then not under tmux and had the same result even though the `$TERM` variable was xterm regardless of where I attached from.\n\nI also tried changing setting `$TERM` to `xterm`, and erasing `$TERM_PROGRAM` and `$TERM_PROGRAM_VERSION` and the issue still occurred under tmux.\n\nMy guess for the cause is that during the tests nvim tries querying the terminal for support of a certain feature via an escape code through stdout, and nvim doesn't support it? I'm unsure if that is possible though since the nvim session isn't really attached to stdout and stdin during functional tests.\n\nThis also occurs when running tmux without my config via:\n\n```\ntmux -L test -f /dev/null\n```\n\nNot a huge deal but it might save other newcomers to nvim development some headache to skip these tests under tmux if thats possible, I'm happy to do that unless this is an actual issue that should be fixed.\n\nThe test results summary when running under tmux is below:\n```\n-------- Global test environment teardown.\n======== 328 tests from 15 test files ran. (26538.00 ms total)\nPASSED   325 tests.\nSKIPPED  1 test, listed below:\nSKIPPED  test/functional/terminal/tui_spec.lua @ 3105: TUI 't_Co' (terminal colors) TERM=interix uses 8 colors\nFAILED   2 tests, listed below:\nFAILED   test/functional/terminal/tui_spec.lua @ 1762: TUI forwards :term palette colors with termguicolors\ntest/functional/terminal/tui_spec.lua:1824: Row 5 did not match.\nExpected:\n  |^tty ready                                         |\n  |{4:text}colortext                                     |\n  |                                                  |\n  |                                                  |\n  |*{6:^^^^^^^}{7:                                           }|\n  |:set notermguicolors                              |\n  |{3:-- TERMINAL --}                                    |\nActual:\n  |^tty ready                                         |\n  |{4:text}colortext                                     |\n  |                                                  |\n  |                                                  |\n  |*{6:^^^^^^^                                           }|\n  |:set notermguicolors                              |\n  |{3:-- TERMINAL --}                                    |\n\nTo print the expect() call that would assert the current screen state, use\nscreen:snapshot_util(). In case of non-deterministic failures, use\nscreen:redraw_debug() to show all intermediate screen states.\n\nSnapshot:\nscreen:expect([[\n  ^tty ready                                         |\n  {4:text}colortext                                     |\n                                                    |*2\n  {6:^^^^^^^                                           }|\n  :set notermguicolors                              |\n  {3:-- TERMINAL --}                                    |\n]])\n\nstack traceback:\n        test/functional/ui/screen.lua:852: in function '_wait'\n        test/functional/ui/screen.lua:517: in function 'expect'\n        test/functional/terminal/tui_spec.lua:1824: in function <test/functional/terminal/tui_spec.lua:1762>\n\nFAILED   test/functional/terminal/tui_spec.lua @ 1837: TUI supports undercurl and underdouble when run in :terminal\ntest/functional/terminal/tui_spec.lua:1848: Row 1 did not match.\nExpected:\n  |*{5:fooba}^r                                            |\n  |{4:~                                                 }|\n  |{4:~                                                 }|\n  |{4:~                                                 }|\n  |{2:[No Name] [+]                                     }|\n  |{3:-- VISUAL LINE --}                                 |\n  |{3:-- TERMINAL --}                                    |\nActual:\n  |*{UNEXPECTED underline = true:fooba}^r                                            |\n  |{4:~                                                 }|\n  |{4:~                                                 }|\n  |{4:~                                                 }|\n  |{2:[No Name] [+]                                     }|\n  |{3:-- VISUAL LINE --}                                 |\n  |{3:-- TERMINAL --}                                    |\n\nTo print the expect() call that would assert the current screen state, use\nscreen:snapshot_util(). In case of non-deterministic failures, use\nscreen:redraw_debug() to show all intermediate screen states.\n\nSnapshot:\nscreen:set_default_attr_ids({\n  [1] = { reverse = true },\n  [2] = { reverse = true, bold = true },\n  [3] = { bold = true },\n  [4] = { foreground = 12 },\n  [5] = { undercurl = true },\n  [6] = { underdouble = true },\n  [7] = { underline = true },\n})\n\nscreen:expect([[\n  {7:fooba}^r                                            |\n  {4:~                                                 }|*3\n  {2:[No Name] [+]                                     }|\n  {3:-- VISUAL LINE --}                                 |\n  {3:-- TERMINAL --}                                    |\n]])\n\nstack traceback:\n        test/functional/ui/screen.lua:852: in function '_wait'\n        test/functional/ui/screen.lua:517: in function 'expect'\n        test/functional/terminal/tui_spec.lua:1848: in function <test/functional/terminal/tui_spec.lua:1837>\n\n\n 1 SKIPPED TEST\n 2 FAILED TESTS\n------------------------------------------------------------------------------\n$NVIM_LOG_FILE: /home/gabe/Code/neovim/build/.nvimlog\n(last 10 lines)\nDBG 2025-05-25T14:58:36.165 T327.1574556.0 inbuf_poll:516: blocking... events=false\nDBG 2025-05-25T14:58:36.165 T327.1574556.0 inbuf_poll:516: blocking... events=true\nDBG 2025-05-25T14:58:36.165 T327.1574556.0 receive_msgpack:210: ch 1: parsing 22 bytes from msgpack Stream: 0x618122071860\nDBG 2025-05-25T14:58:36.165 T327.1574556.0 RPC: <- 1: [request]   id=22: nvim_eval\nDBG 2025-05-25T14:58:36.166 T327.1574556.0 handle_request:347: RPC: scheduled nvim_eval\nDBG 2025-05-25T14:58:36.166 T327.1574556.0 state_enter:99: input: K_EVENT\nDBG 2025-05-25T14:58:36.166 T327.1574556.0 handle_nvim_eval:9690: RPC: ch 1: invoke nvim_eval\nDBG 2025-05-25T14:58:36.166 T327.1574556.0 RPC: -> 1: [response]  id=22\nDBG 2025-05-25T14:58:36.166 T327.1574556.0 inbuf_poll:516: blocking... events=false\nDBG 2025-05-25T14:58:36.166 T327.1574556.0 inbuf_poll:516: blocking... events=true\n------------------------------------------------------------------------------\nE5113: Lua chunk:\n-- Tests exited non-zero: 1\nCMake Error at /home/gabe/Code/neovim/cmake/RunTests.cmake:98 (message):\n  functional tests failed with error: 1\n\n\nFAILED: test/CMakeFiles/functionaltest /home/gabe/Code/neovim/build/test/CMakeFiles/functionaltest\ncd /home/gabe/Code/neovim/build/test && /usr/bin/cmake -D TEST_TYPE=functional -D BUILD_DIR=/home/gabe/Code/neovim/build -D CIRRUS_CI= -D CI_BUILD=OFF -D DEPS_INSTALL_DIR=/home/gabe/Code/neovim/build/usr -D NVIM_PRG=/home/gabe/Code/neovim/build/bin/nvim -D TEST_DIR=/home/gabe/Code/neovim/test -D WORKING_DIR=/home/gabe/Code/neovim -P /home/gabe/Code/neovim/cmake/RunTests.cmake\nninja: build stopped: subcommand failed.\nmake: *** [Makefile:142: functionaltest] Error 1\n\n```\n\n### Steps to reproduce\n\n```\ntmux -L /tmp/clean_tmux_server -f /dev/null\nTEST_FILE=\"test/functional/terminal/\" make functionaltest \n```\n\n### Expected behavior\n\nI would expect these tests to skip or pass under tmux.\n\n### Nvim version (nvim -v)\n\nNVIM v0.12.0-dev-434+g8b9500c886 -- Build type: Debug -- LuaJIT 2.1.1744317938\n\n### Vim (not Nvim) behaves the same?\n\nThese tests don't exist in vim.\n\n### Operating system/version\n\nOS: Arch Linux x86_64 -- Kernel: 6.14.6-arch1-1\n\n### Terminal name/version\n\nkitty 0.42.0\n\n### $TERM environment variable\n\ntmux-256color\n\n### Installation\n\nlatest master -- build from repo",
    "closed_at": "2025-05-26T23:47:29Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
        "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
        "followers_url": "https://api.github.com/users/zeertzjq/followers",
        "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
        "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zeertzjq",
        "id": 35768171,
        "login": "zeertzjq",
        "node_id": "MDQ6VXNlcjM1NzY4MTcx",
        "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
        "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
        "repos_url": "https://api.github.com/users/zeertzjq/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zeertzjq",
        "user_view_type": "public"
    },
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34173/comments",
    "created_at": "2025-05-25T19:07:31Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34173/events",
    "html_url": "https://github.com/neovim/neovim/issues/34173",
    "id": 3089509820,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 110418643,
            "name": "test",
            "node_id": "MDU6TGFiZWwxMTA0MTg2NDM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/test"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "built-in :terminal or :shell",
            "id": 212696822,
            "name": "terminal",
            "node_id": "MDU6TGFiZWwyMTI2OTY4MjI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/terminal"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34173/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM64Ji28",
    "number": 34173,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34173/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34173/timeline",
    "title": "`terminal/tui_spec.lua` functional tests fail under tmux.",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-05-26T23:47:29Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34173",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/86860060?v=4",
        "events_url": "https://api.github.com/users/The-Briel-Deal/events{/privacy}",
        "followers_url": "https://api.github.com/users/The-Briel-Deal/followers",
        "following_url": "https://api.github.com/users/The-Briel-Deal/following{/other_user}",
        "gists_url": "https://api.github.com/users/The-Briel-Deal/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/The-Briel-Deal",
        "id": 86860060,
        "login": "The-Briel-Deal",
        "node_id": "MDQ6VXNlcjg2ODYwMDYw",
        "organizations_url": "https://api.github.com/users/The-Briel-Deal/orgs",
        "received_events_url": "https://api.github.com/users/The-Briel-Deal/received_events",
        "repos_url": "https://api.github.com/users/The-Briel-Deal/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/The-Briel-Deal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/The-Briel-Deal/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/The-Briel-Deal",
        "user_view_type": "public"
    }
}