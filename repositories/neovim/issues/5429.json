{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "This came up in https://github.com/Shougo/deoplete.nvim/issues/322\n\nAs it stands now, there doesn't seem to be any way for a rplugin to resume operation without restarting Neovim altogether if the plugin host disappears for any reason.\n\nSo far, I was able to get the host to restart with:\n\n``` diff\ndiff --git a/runtime/autoload/remote/host.vim b/runtime/autoload/remote/host.vim\nindex 110f802..03f5652 100644\n--- a/runtime/autoload/remote/host.vim\n+++ b/runtime/autoload/remote/host.vim\n@@ -41,13 +41,36 @@ function! remote#host#Require(name) abort\n     throw 'No host named \"'.a:name.'\" is registered'\n   endif\n   let host = s:hosts[a:name]\n-  if !host.channel && !host.initialized\n+  let restart = 0\n+  if host.channel && host.initialized\n+    try\n+      if rpcrequest(host.channel, 'poll') ==# 'ok'\n+        return host.channel\n+      endif\n+    catch /Invalid channel/\n+      let restart = 1\n+      let host.channel = 0\n+      let host.initialized = 0\n+    endtry\n+  endif\n+\n+  if !host.initialized\n+    if restart\n+      call remove(s:hosts, a:name)\n+      let plugins = copy(remote#host#PluginsForHost(a:name))\n+      let s:plugins_for_host[a:name] = []\n+      for plugin in plugins\n+        call remote#host#RegisterPlugin(a:name, plugin.path, plugin.specs)\n+      endfor\n+    endif\n+\n     let host_info = {\n           \\ 'name': a:name,\n           \\ 'orig_name': get(host, 'orig_name', a:name)\n           \\ }\n     let host.channel = call(host.factory, [host_info])\n     let host.initialized = 1\n+    let s:hosts[a:name] = host\n   endif\n   return host.channel\n endfunction\n```\n\nBut, there's a bit of side stepping happening there because there's a few guards that prevent straight-forward restarting.  The plugin needs to detect the dead channel and call for a reload, as well:\n\n```\nfunction! s:rpc(func, args, attempts) abort\n  try\n    return call(a:func, [g:deoplete#_channel_id] + a:args)\n  catch /E475:\\|Invalid channel/\n    if a:attempts < 3\n      delfunction _deoplete\n      call remote#host#Require('python3')\n      call _deoplete()\n      return s:rpc(a:func, a:args, a:attempts + 1)\n    endif\n  catch\n  endtry\n\n  echohl ErrorMsg\n  echo \"[deoplete] Lost RPC channel\"\n  echohl None\nendfunction\n\nfunction! deoplete#rpc#request(...) abort\n  return s:rpc('rpcrequest', a:000, 0)\nendfunction\n\nfunction! deoplete#rpc#notify(...) abort\n  return s:rpc('rpcnotify', a:000, 0)\nendfunction\n```\n\nNote: Any functions defined in the rplugin needs to be deleted for the above to work correctly.\n\nI wanted to see if there are any thoughts about rewriting how remote plugins are loaded.\n\nPing @blueyed @Shougo \n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Just thinking out loud: \n- If a tab dies in a multi-process web browser, user gets error message and may re-visit the page. \n  - It doesn't poll the page and retry. \n    - One important reason for not retrying is that it may \"cascade\"/DDOS the site. A similar situation could happen on a local machine if many plugins die and many nvim instances try to be too clever. (E.g., maybe after waking from hibernate, a bunch of nvim instances go crazy trying to restart things, or in low-resource situations...)\n    - Another reason (for us at least): Scheduling is hard. We probably want to avoid this if possible.\n- If a remote plugin (deoplete), there's currently no way to restart that plugin?\n  - UI: How to restart a plugin? Idea: make it part of `:CheckHealth`. \n- If a host dies, that's a pretty bad situation, more like a core bug. Do we care about restarting in that case?\n",
            "created_at": "2016-10-04T21:39:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/5429#issuecomment-251521785",
            "id": 251521785,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5429",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTUyMTc4NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/251521785/reactions"
            },
            "updated_at": "2016-10-04T21:40:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/251521785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It doesn't poll the page and retry.\n\nIf it's 503 or a non-server generated error, it does retry periodically ðŸ˜‰   It gives up after some time, but resumes when the tab gets some activity from you.  But, I'm mainly interested in the user activity part of it in our case.\n\n> E.g., maybe after waking from hibernate, a bunch of nvim instances go crazy trying to restart things, or in low-resource situations...\n> Another reason (for us at least): Scheduling is hard. We probably want to avoid this if possible.\n\nI'd expect that restarting is reactive and not involve process polling/monitoring.  If a plugin is doing the polling, that's an issue to bring up with the plugin.\n\nI actually put in the retry attempt counter above just to be thorough in making sure that it does restart.  It always succeeded on the first attempt.  In reality, I'd expect the first attempt to stop as a hard failure if it the next request isn't successful.\n\n> UI: How to restart a plugin? Idea: make it part of :CheckHealth.\n\nA command to list provider processes and a way to restart them might be a decent way to manage it, too.  A supervisor plugin could even be created with it.  Right now, the fastest way for me to deal with a misbehaving rplugin is to `pkill -f deoplete`, but that kills it for all nvim instances.\n\n> If a host dies, that's a pretty bad situation, more like a core bug. Do we care about restarting in that case?\n\nOr could be a situation where I goofed and created an infinite loop blocking subsequent requests, I kill it and want resume work to fix it without restarting nvim.  Plugin developer problems, amirite?\n\nThinking out loud, myself:\n- My main issue is that I can't stop and start a host provider at will.\n  - This is because `host.vim` is too protective.\n- A command to restart hosts and reload rplugins makes this a user decision.\n  - Won't need to touch the C source or do any detection.\n  - User is the process manager.\n    - User plays tiny violin if they don't like the outcome.\n      - We can provide one free of charge: ðŸŽ»\n- There should be an API to return a dict with `notify()` and `request()` functions.\n  - Maybe `let host = neovim#rplugin('deoplete')`\n  - Plugins that rely on providers should use this API.\n    - Plugins won't need to know the channel ID or worry about restarting.\n      - Restarting a host is the user's job.\n      - Legacy providers could use this so there's consistency between them.\n  - If a host is restarted, all those dicts are updated with the new channel ID.\n  - Can be backported as a separate plugin for older nvim versions so plugins won't need to do version management.\n",
            "created_at": "2016-10-04T23:53:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/5429#issuecomment-251546510",
            "id": 251546510,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/5429",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTU0NjUxMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/251546510/reactions"
            },
            "updated_at": "2016-10-04T23:53:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/251546510",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111942?v=4",
                "events_url": "https://api.github.com/users/tweekmonster/events{/privacy}",
                "followers_url": "https://api.github.com/users/tweekmonster/followers",
                "following_url": "https://api.github.com/users/tweekmonster/following{/other_user}",
                "gists_url": "https://api.github.com/users/tweekmonster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tweekmonster",
                "id": 111942,
                "login": "tweekmonster",
                "node_id": "MDQ6VXNlcjExMTk0Mg==",
                "organizations_url": "https://api.github.com/users/tweekmonster/orgs",
                "received_events_url": "https://api.github.com/users/tweekmonster/received_events",
                "repos_url": "https://api.github.com/users/tweekmonster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tweekmonster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tweekmonster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tweekmonster",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/5429/comments",
    "created_at": "2016-10-04T21:09:15Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/5429/events",
    "html_url": "https://github.com/neovim/neovim/issues/5429",
    "id": 181005527,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "OS processes, spawn",
            "id": 182884815,
            "name": "job-control",
            "node_id": "MDU6TGFiZWwxODI4ODQ4MTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/job-control"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "channels, RPC, msgpack",
            "id": 242522707,
            "name": "channels-rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/channels-rpc"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/5429/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWUxODEwMDU1Mjc=",
    "number": 5429,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/5429/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/5429/timeline",
    "title": "RPC host should auto-restart if the process dies unexpectedly",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/5429",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/111942?v=4",
        "events_url": "https://api.github.com/users/tweekmonster/events{/privacy}",
        "followers_url": "https://api.github.com/users/tweekmonster/followers",
        "following_url": "https://api.github.com/users/tweekmonster/following{/other_user}",
        "gists_url": "https://api.github.com/users/tweekmonster/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tweekmonster",
        "id": 111942,
        "login": "tweekmonster",
        "node_id": "MDQ6VXNlcjExMTk0Mg==",
        "organizations_url": "https://api.github.com/users/tweekmonster/orgs",
        "received_events_url": "https://api.github.com/users/tweekmonster/received_events",
        "repos_url": "https://api.github.com/users/tweekmonster/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tweekmonster/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tweekmonster/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tweekmonster",
        "user_view_type": "public"
    }
}