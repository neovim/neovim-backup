{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nNeovim's `vim._defaults.lua` executes a call to `executable()` to check for the presence of `rg` and sets it as `'grepprg'`. When `rg` is not found, this process is slow and introduces unnecessary overhead during startup. Users do not expect such a heavy check in the default configuration.\n\nThis `executable()` check can cause a delay of 50â€“200 milli seconds, further exacerbating the performance issue. \n\n### Steps to reproduce\n\nUninstall ripgrep.\nInstall Neovim.\nStart Neovim with nvim --clean --startuptime foo.txt.\n\nObserve the execution delay caused by the executable check in `vim._defaults.lua`.\nFor example, try to delete below lines.\n\n```\n--- Default options\ndo\n  --- Default 'grepprg' to ripgrep if available.\n  if vim.fn.executable('rg') == 1 then\n    -- Use -uu to make ripgrep not check ignore files/skip dot-files\n    vim.o.grepprg = 'rg --vimgrep -uu '\n    vim.o.grepformat = '%f:%l:%c:%m'\n  end\nend\n```\n\n### Expected behavior\n\nNeovim should avoid calling executable to check for the presence of `rg` during startup. When `rg` is not found, the `executable()` check triggers an exhaustive path search, which significantly increases the startup time. Removing this check entirely would lead to improved performance, as users can configure `'grepprg'` manually if needed.\n\nThe performance cost of `executable()` is a well-known problem, and calling it during startup should be avoided unless absolutely necessary.\n\n### Nvim version (nvim -v)\n\nv0.11.0-dev-b1c907f\n\n### Vim (not Nvim) behaves the same?\n\nno\n\n### Operating system/version\n\nUbuntu 24.04.1 LTS\n\n### Terminal name/version\n\nWezTerm\n\n### $TERM environment variable\n\nxterm-256color\n\n### Installation\n\nbuild from repo",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "cc @LunarLambda",
            "created_at": "2024-12-08T01:43:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2525374209",
            "id": 2525374209,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WhicB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525374209/reactions"
            },
            "updated_at": "2024-12-08T01:43:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525374209",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm surprised to hear that an executable check can take 50 to 200 ms unless something is severely wrong with either the user's environment or the implementation of the function. In my testing it didn't make any meaningful dent in startup time in either the positive or negative case, and during the review process of the original PR nothing suggested there being any issue with the check.\n\nCan the check be made asynchronous or deferred somehow so it doesn't block startup? I could put up a fix in that case, it would be unfortunate to have to remove the feature entirely.",
            "created_at": "2024-12-08T04:22:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2525411715",
            "id": 2525411715,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WhrmD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525411715/reactions"
            },
            "updated_at": "2024-12-08T04:22:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525411715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4",
                "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}",
                "followers_url": "https://api.github.com/users/LunarLambda/followers",
                "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}",
                "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/LunarLambda",
                "id": 38919842,
                "login": "LunarLambda",
                "node_id": "MDQ6VXNlcjM4OTE5ODQy",
                "organizations_url": "https://api.github.com/users/LunarLambda/orgs",
                "received_events_url": "https://api.github.com/users/LunarLambda/received_events",
                "repos_url": "https://api.github.com/users/LunarLambda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/LunarLambda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Unfortunately, `executable()` is extremely slow in Windows environment or WSL environment.\n(I think it is from Security check process issue)\nI think `grepprg` should be set manually by users.\n\n> In my testing it didn't make any meaningful dent in startup time in either the positive or negative case, and during the review process of the original PR nothing suggested there being any issue with the check.\n\nBecause many users and developers uses Linux environment or very faster computer.\n\n> Can the check be made asynchronous or deferred somehow so it doesn't block startup? I could put up a fix in that case, it would be unfortunate to have to remove the feature entirely.\n\nI think Neovim should not set it by async.  Because it may overwrite users set value.",
            "created_at": "2024-12-08T05:09:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2525421515",
            "id": 2525421515,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6Wht_L",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525421515/reactions"
            },
            "updated_at": "2024-12-08T05:09:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525421515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@LunarLambda Those who have `ripgrep` can configure it as their `'grepprg'`, and that should be sufficient.\nThe `'grepprg'` setting itself exists precisely for this purpose. I don't see much value in setting a completely third-party, independent external toolâ€”one that has no inherent connection to Neovimâ€” **as the default** with high performance cost.\nEven if this feature is removed, we can still configure `ripgrep` as `'grepprg'` and use it just as we always have.",
            "created_at": "2024-12-08T05:27:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2525425298",
            "id": 2525425298,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6Whu6S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525425298/reactions"
            },
            "updated_at": "2024-12-08T05:27:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525425298",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5582459?v=4",
                "events_url": "https://api.github.com/users/kyoh86/events{/privacy}",
                "followers_url": "https://api.github.com/users/kyoh86/followers",
                "following_url": "https://api.github.com/users/kyoh86/following{/other_user}",
                "gists_url": "https://api.github.com/users/kyoh86/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kyoh86",
                "id": 5582459,
                "login": "kyoh86",
                "node_id": "MDQ6VXNlcjU1ODI0NTk=",
                "organizations_url": "https://api.github.com/users/kyoh86/orgs",
                "received_events_url": "https://api.github.com/users/kyoh86/received_events",
                "repos_url": "https://api.github.com/users/kyoh86/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kyoh86/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kyoh86/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kyoh86",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Can the check be made asynchronous or deferred somehow so it doesn't block startup?\n\n`vim.fn` is only available on the main thread, so deferring the check will still block Nvim.",
            "created_at": "2024-12-08T05:32:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2525426661",
            "id": 2525426661,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WhvPl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525426661/reactions"
            },
            "updated_at": "2024-12-08T05:32:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525426661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I can change the check to look in a smaller set of places, and/or gate it behind a `g:` variable or similar (treating it like/turning it into a tiny built-in plugin, assuming source order allows it)\n\nOtherwise, I don't believe my input or approval is needed for the maintainers to remove the feature should they so wish.",
            "created_at": "2024-12-08T06:35:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2525446880",
            "id": 2525446880,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6Wh0Lg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525446880/reactions"
            },
            "updated_at": "2024-12-08T06:35:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525446880",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4",
                "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}",
                "followers_url": "https://api.github.com/users/LunarLambda/followers",
                "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}",
                "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/LunarLambda",
                "id": 38919842,
                "login": "LunarLambda",
                "node_id": "MDQ6VXNlcjM4OTE5ODQy",
                "organizations_url": "https://api.github.com/users/LunarLambda/orgs",
                "received_events_url": "https://api.github.com/users/LunarLambda/received_events",
                "repos_url": "https://api.github.com/users/LunarLambda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/LunarLambda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`_defaults.lua` is sourced before user config",
            "created_at": "2024-12-08T07:15:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2525459791",
            "id": 2525459791,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6Wh3VP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525459791/reactions"
            },
            "updated_at": "2024-12-08T07:15:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525459791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Any solution should probably only be specific for Windows. `vim.fn.executable` is fine on even slow Linux/MacOS hosts.",
            "created_at": "2024-12-08T07:46:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2525477932",
            "id": 2525477932,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6Wh7ws",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525477932/reactions"
            },
            "updated_at": "2024-12-08T07:46:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525477932",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is it Windows as a whole or just WSL specifically? Do we have any means of detecting WSL consistently?",
            "created_at": "2024-12-08T08:10:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2525533477",
            "id": 2525533477,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WiJUl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525533477/reactions"
            },
            "updated_at": "2024-12-08T08:10:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525533477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4",
                "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}",
                "followers_url": "https://api.github.com/users/LunarLambda/followers",
                "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}",
                "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/LunarLambda",
                "id": 38919842,
                "login": "LunarLambda",
                "node_id": "MDQ6VXNlcjM4OTE5ODQy",
                "organizations_url": "https://api.github.com/users/LunarLambda/orgs",
                "received_events_url": "https://api.github.com/users/LunarLambda/received_events",
                "repos_url": "https://api.github.com/users/LunarLambda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/LunarLambda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I didn't even notice, but it's similar to me.\n\nThis is the output of `nvim --clean --startuptime log` with ripgrep installed:\n\n```\n--- Startup times for process: Primary (or UI client) ---\n\ntimes in msec\n clock   self+sourced   self:  sourced script\n clock   elapsed:              other lines\n\n000.000  000.000: --- NVIM STARTING ---\n000.100  000.100: event init\n000.167  000.067: early init\n000.296  000.129: locale set\n000.330  000.034: init first window\n000.597  000.267: inits 1\n000.602  000.005: window checked\n000.606  000.003: parsing arguments\n000.908  000.026  000.026: require('vim.shared')\n000.974  000.024  000.024: require('vim.inspect')\n001.002  000.023  000.023: require('vim._options')\n001.003  000.093  000.046: require('vim._editor')\n001.004  000.139  000.019: require('vim._init_packages')\n001.006  000.261: init lua interpreter\n003.986  002.980: nvim_ui_attach\n004.217  000.232: nvim_set_client_info\n004.218  000.001: --- NVIM STARTED ---\n\n--- Startup times for process: Embedded ---\n\ntimes in msec\n clock   self+sourced   self:  sourced script\n clock   elapsed:              other lines\n\n000.000  000.000: --- NVIM STARTING ---\n000.063  000.063: event init\n000.112  000.049: early init\n000.266  000.154: locale set\n000.293  000.027: init first window\n000.512  000.218: inits 1\n000.520  000.008: window checked\n000.523  000.003: parsing arguments\n000.804  000.025  000.025: require('vim.shared')\n000.862  000.024  000.024: require('vim.inspect')\n000.891  000.025  000.025: require('vim._options')\n000.893  000.087  000.039: require('vim._editor')\n000.894  000.129  000.017: require('vim._init_packages')\n000.895  000.244: init lua interpreter\n000.924  000.029: expanding arguments\n000.936  000.012: inits 2\n001.116  000.181: init highlight\n001.117  000.001: waiting for UI\n002.290  001.173: done waiting for UI\n002.299  000.009: clear screen\n002.397  000.009  000.009: require('vim.keymap')\n002.933  000.632  000.623: require('vim._defaults')\n002.935  000.004: init default mappings & autocommands\n004.427  000.775  000.775: sourcing /usr/local/share/nvim/runtime/ftplugin.vim\n004.647  000.197  000.197: sourcing /usr/local/share/nvim/runtime/indent.vim\n004.654  000.748: sourcing vimrc file(s)\n004.933  000.261  000.261: sourcing /usr/local/share/nvim/runtime/filetype.lua\n005.397  000.222  000.222: sourcing /usr/local/share/nvim/runtime/syntax/synload.vim\n005.470  000.511  000.289: sourcing /usr/local/share/nvim/runtime/syntax/syntax.vim\n006.275  000.337  000.337: sourcing /usr/local/share/nvim/runtime/plugin/gzip.vim\n007.153  000.322  000.322: sourcing /usr/local/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim\n007.184  000.892  000.570: sourcing /usr/local/share/nvim/runtime/plugin/matchit.vim\n007.540  000.333  000.333: sourcing /usr/local/share/nvim/runtime/plugin/matchparen.vim\n007.988  000.430  000.430: sourcing /usr/local/share/nvim/runtime/plugin/netrwPlugin.vim\n008.219  000.205  000.205: sourcing /usr/local/share/nvim/runtime/plugin/rplugin.vim\n008.440  000.198  000.198: sourcing /usr/local/share/nvim/runtime/plugin/shada.vim\n008.650  000.185  000.185: sourcing /usr/local/share/nvim/runtime/plugin/spellfile.vim\n008.899  000.228  000.228: sourcing /usr/local/share/nvim/runtime/plugin/tarPlugin.vim\n009.104  000.178  000.178: sourcing /usr/local/share/nvim/runtime/plugin/tutor.vim\n009.383  000.254  000.254: sourcing /usr/local/share/nvim/runtime/plugin/zipPlugin.vim\n009.601  000.193  000.193: sourcing /usr/local/share/nvim/runtime/plugin/editorconfig.lua\n009.836  000.213  000.213: sourcing /usr/local/share/nvim/runtime/plugin/man.lua\n010.065  000.208  000.208: sourcing /usr/local/share/nvim/runtime/plugin/osc52.lua\n010.291  000.206  000.206: sourcing /usr/local/share/nvim/runtime/plugin/tohtml.lua\n010.305  000.818: loading rtp plugins\n010.372  000.067: loading packages\n010.515  000.143: loading after plugins\n010.522  000.006: inits 3\n010.523  000.001: reading ShaDa\n010.589  000.066: opening buffers\n010.602  000.014: BufEnter autocommands\n010.604  000.002: editing files in windows\n010.670  000.066: VimEnter autocommands\n010.672  000.002: UIEnter autocommands\n010.673  000.001: before starting main loop\n010.841  000.168: first screen update\n010.842  000.002: --- NVIM STARTED ---\n\n```\n\nWithout ripgrep installed:\n\n```\n--- Startup times for process: Primary (or UI client) ---\n\ntimes in msec\n clock   self+sourced   self:  sourced script\n clock   elapsed:              other lines\n\n000.000  000.000: --- NVIM STARTING ---\n000.095  000.094: event init\n000.163  000.068: early init\n000.294  000.131: locale set\n000.330  000.036: init first window\n000.613  000.283: inits 1\n000.618  000.006: window checked\n--- Startup times for process: Primary (or UI client) ---\n\ntimes in msec\n clock   self+sourced   self:  sourced script\n clock   elapsed:              other lines\n\n000.000  000.000: --- NVIM STARTING ---\n000.112  000.112: event init\n000.207  000.095: early init\n000.336  000.129: locale set\n000.374  000.038: init first window\n000.646  000.272: inits 1\n000.651  000.005: window checked\n000.654  000.003: parsing arguments\n000.974  000.025  000.025: require('vim.shared')\n001.037  000.024  000.024: require('vim.inspect')\n001.076  000.034  000.034: require('vim._options')\n001.078  000.103  000.044: require('vim._editor')\n001.079  000.144  000.017: require('vim._init_packages')\n001.080  000.281: init lua interpreter\n002.518  001.438: nvim_ui_attach\n002.764  000.247: nvim_set_client_info\n002.766  000.001: --- NVIM STARTED ---\n\n--- Startup times for process: Embedded ---\n\ntimes in msec\n clock   self+sourced   self:  sourced script\n clock   elapsed:              other lines\n\n000.000  000.000: --- NVIM STARTING ---\n000.078  000.077: event init\n000.146  000.068: early init\n000.302  000.156: locale set\n000.334  000.032: init first window\n000.619  000.285: inits 1\n000.627  000.008: window checked\n000.630  000.004: parsing arguments\n000.927  000.025  000.025: require('vim.shared')\n000.989  000.023  000.023: require('vim.inspect')\n001.019  000.025  000.025: require('vim._options')\n001.021  000.091  000.043: require('vim._editor')\n001.021  000.147  000.030: require('vim._init_packages')\n001.022  000.246: init lua interpreter\n001.057  000.034: expanding arguments\n001.068  000.012: inits 2\n001.276  000.207: init highlight\n001.278  000.002: waiting for UI\n001.367  000.089: done waiting for UI\n001.375  000.008: clear screen\n001.464  000.009  000.009: require('vim.keymap')\n042.800  041.423  041.413: require('vim._defaults')\n042.807  000.009: init default mappings & autocommands\n043.129  000.072  000.072: sourcing /usr/local/share/nvim/runtime/ftplugin.vim\n043.166  000.017  000.017: sourcing /usr/local/share/nvim/runtime/indent.vim\n043.189  000.292: sourcing vimrc file(s)\n043.357  000.149  000.149: sourcing /usr/local/share/nvim/runtime/filetype.lua\n043.477  000.056  000.056: sourcing /usr/local/share/nvim/runtime/syntax/synload.vim\n043.553  000.164  000.108: sourcing /usr/local/share/nvim/runtime/syntax/syntax.vim\n044.316  000.475  000.475: sourcing /usr/local/share/nvim/runtime/plugin/gzip.vim\n045.083  000.366  000.366: sourcing /usr/local/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim\n045.122  000.788  000.422: sourcing /usr/local/share/nvim/runtime/plugin/matchit.vim\n045.263  000.123  000.123: sourcing /usr/local/share/nvim/runtime/plugin/matchparen.vim\n045.734  000.453  000.453: sourcing /usr/local/share/nvim/runtime/plugin/netrwPlugin.vim\n045.974  000.213  000.213: sourcing /usr/local/share/nvim/runtime/plugin/rplugin.vim\n046.032  000.038  000.038: sourcing /usr/local/share/nvim/runtime/plugin/shada.vim\n046.066  000.012  000.012: sourcing /usr/local/share/nvim/runtime/plugin/spellfile.vim\n046.332  000.248  000.248: sourcing /usr/local/share/nvim/runtime/plugin/tarPlugin.vim\n046.546  000.184  000.184: sourcing /usr/local/share/nvim/runtime/plugin/tutor.vim\n046.846  000.276  000.276: sourcing /usr/local/share/nvim/runtime/plugin/zipPlugin.vim\n046.981  000.094  000.094: sourcing /usr/local/share/nvim/runtime/plugin/editorconfig.lua\n047.137  000.136  000.136: sourcing /usr/local/share/nvim/runtime/plugin/man.lua\n047.300  000.144  000.144: sourcing /usr/local/share/nvim/runtime/plugin/osc52.lua\n047.389  000.061  000.061: sourcing /usr/local/share/nvim/runtime/plugin/tohtml.lua\n047.406  000.658: loading rtp plugins\n047.488  000.083: loading packages\n047.671  000.183: loading after plugins\n047.680  000.009: inits 3\n047.686  000.006: reading ShaDa\n047.785  000.099: opening buffers\n047.804  000.019: BufEnter autocommands\n047.805  000.002: editing files in windows\n047.896  000.091: VimEnter autocommands\n047.899  000.002: UIEnter autocommands\n047.900  000.001: before starting main loop\n048.146  000.247: first screen update\n048.148  000.002: --- NVIM STARTED ---\n```\n\nSo it's 40ms extra from `_defaults` in my PC. This only happens on WSL, not in native windows.\n\nMy guess is that if WSL doesn't find the binary in WSL it starts looking at Windows (there are many `/mnt/c/...` directories in WSL path), and it's widely known that using/executing windows files in WSL is slow (that's why using `vim.ui.open()` is also slow on WSL if it has to use explorer.exe or the Windows browser).",
            "created_at": "2024-12-08T13:43:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2525935086",
            "id": 2525935086,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WjrXu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525935086/reactions"
            },
            "updated_at": "2024-12-18T11:19:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2525935086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33849340?v=4",
                "events_url": "https://api.github.com/users/SebasF1349/events{/privacy}",
                "followers_url": "https://api.github.com/users/SebasF1349/followers",
                "following_url": "https://api.github.com/users/SebasF1349/following{/other_user}",
                "gists_url": "https://api.github.com/users/SebasF1349/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/SebasF1349",
                "id": 33849340,
                "login": "SebasF1349",
                "node_id": "MDQ6VXNlcjMzODQ5MzQw",
                "organizations_url": "https://api.github.com/users/SebasF1349/orgs",
                "received_events_url": "https://api.github.com/users/SebasF1349/received_events",
                "repos_url": "https://api.github.com/users/SebasF1349/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/SebasF1349/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SebasF1349/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/SebasF1349",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is there any way to make wsl not do that?",
            "created_at": "2024-12-08T15:43:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2526188494",
            "id": 2526188494,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WkpPO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526188494/reactions"
            },
            "updated_at": "2024-12-08T15:43:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526188494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If we have a means to check for `if wsl` we could just restrict the search to `$CARGO_HOME/bin`, `/usr/bin` and `/usr/local/bin`? We probably don't want to touch WSL's `$PATH`, so I'm not sure how much we can do to avoid this. But admittedly I'm not an expert on WSL matters.",
            "created_at": "2024-12-08T15:47:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2526189890",
            "id": 2526189890,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WkplC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526189890/reactions"
            },
            "updated_at": "2024-12-08T15:47:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526189890",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4",
                "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}",
                "followers_url": "https://api.github.com/users/LunarLambda/followers",
                "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}",
                "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/LunarLambda",
                "id": 38919842,
                "login": "LunarLambda",
                "node_id": "MDQ6VXNlcjM4OTE5ODQy",
                "organizations_url": "https://api.github.com/users/LunarLambda/orgs",
                "received_events_url": "https://api.github.com/users/LunarLambda/received_events",
                "repos_url": "https://api.github.com/users/LunarLambda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/LunarLambda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Gotta ask: Is simply installing ripgrep not an option? You'll get (much) faster grep _and_ startup -- what's not to like?",
            "created_at": "2024-12-08T15:51:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2526191057",
            "id": 2526191057,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6Wkp3R",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526191057/reactions"
            },
            "updated_at": "2024-12-08T15:51:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526191057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is a general problem with `executable()` which we use in other places so this issue works well to track that.",
            "created_at": "2024-12-08T16:04:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2526196574",
            "id": 2526196574,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WkrNe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526196574/reactions"
            },
            "updated_at": "2024-12-08T16:04:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526196574",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "If you want to identify a WSL, you can do so by the presence of several environment variables.\n\n- `WSL_DISTRO_NAME`\n- `WSLENV`\n- etc.\n\nPerhaps `WSL_DISTRO_NAME` is appropriate to detect that is in WSL.",
            "created_at": "2024-12-08T16:08:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2526200774",
            "id": 2526200774,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WksPG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526200774/reactions"
            },
            "updated_at": "2024-12-08T16:08:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526200774",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5582459?v=4",
                "events_url": "https://api.github.com/users/kyoh86/events{/privacy}",
                "followers_url": "https://api.github.com/users/kyoh86/followers",
                "following_url": "https://api.github.com/users/kyoh86/following{/other_user}",
                "gists_url": "https://api.github.com/users/kyoh86/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kyoh86",
                "id": 5582459,
                "login": "kyoh86",
                "node_id": "MDQ6VXNlcjU1ODI0NTk=",
                "organizations_url": "https://api.github.com/users/kyoh86/orgs",
                "received_events_url": "https://api.github.com/users/kyoh86/received_events",
                "repos_url": "https://api.github.com/users/kyoh86/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kyoh86/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kyoh86/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kyoh86",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Idk what the solution should be, but I'm not sure the best solution is to make `executable()` only look for executables on WSL and not on Windows. Yes, it would make it faster, but it will mean WSL users to lose features. For example, now users can use `gx` to open a directory in explorer.exe. Or, even better, to open a link in my browser. If neovim restricts where `executable()` looks for, those features will be lost and users will have to install a new browser on WSL just for that (which in my own case it doesn't mean just install a new browser, but also maintain configuration - like extensions, keymaps, open tabs - between both).",
            "created_at": "2024-12-08T16:40:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2526212204",
            "id": 2526212204,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WkvBs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526212204/reactions"
            },
            "updated_at": "2024-12-08T16:40:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526212204",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33849340?v=4",
                "events_url": "https://api.github.com/users/SebasF1349/events{/privacy}",
                "followers_url": "https://api.github.com/users/SebasF1349/followers",
                "following_url": "https://api.github.com/users/SebasF1349/following{/other_user}",
                "gists_url": "https://api.github.com/users/SebasF1349/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/SebasF1349",
                "id": 33849340,
                "login": "SebasF1349",
                "node_id": "MDQ6VXNlcjMzODQ5MzQw",
                "organizations_url": "https://api.github.com/users/SebasF1349/orgs",
                "received_events_url": "https://api.github.com/users/SebasF1349/received_events",
                "repos_url": "https://api.github.com/users/SebasF1349/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/SebasF1349/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SebasF1349/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/SebasF1349",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "A valid solution here is to do nothing if it's deemed that not searching in PATH is not acceptable.",
            "created_at": "2024-12-08T17:24:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2526272441",
            "id": 2526272441,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6Wk9u5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526272441/reactions"
            },
            "updated_at": "2024-12-08T17:24:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2526272441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Out of curiousity, this only applies to a Linux build of Neovim being run inside of WSL, right?\nIs there a strong argument against using a Windows build of Neovim in WSL instead? You can mount/access WSL's filesystem via Windows filesystem APIs, and tools like `git`, `curl`, and various LSPs should be available natively too.\n\nWhile not the same thing as WSL obviously, I used to run Neovim for Windows inside of an MSYS2 install, and it worked pretty well for the most part.",
            "created_at": "2024-12-09T07:36:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2527155311",
            "id": 2527155311,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WoVRv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2527155311/reactions"
            },
            "updated_at": "2024-12-09T07:36:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2527155311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4",
                "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}",
                "followers_url": "https://api.github.com/users/LunarLambda/followers",
                "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}",
                "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/LunarLambda",
                "id": 38919842,
                "login": "LunarLambda",
                "node_id": "MDQ6VXNlcjM4OTE5ODQy",
                "organizations_url": "https://api.github.com/users/LunarLambda/orgs",
                "received_events_url": "https://api.github.com/users/LunarLambda/received_events",
                "repos_url": "https://api.github.com/users/LunarLambda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/LunarLambda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "If the problem is accessing programs (like rg) in windows, idk how it will be better accessing another program (neovim) in windows. WSL is just slow when having to do stuff outside of WSL.",
            "created_at": "2024-12-09T08:13:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2527223754",
            "id": 2527223754,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6Wol_K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2527223754/reactions"
            },
            "updated_at": "2024-12-09T08:13:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2527223754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33849340?v=4",
                "events_url": "https://api.github.com/users/SebasF1349/events{/privacy}",
                "followers_url": "https://api.github.com/users/SebasF1349/followers",
                "following_url": "https://api.github.com/users/SebasF1349/following{/other_user}",
                "gists_url": "https://api.github.com/users/SebasF1349/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/SebasF1349",
                "id": 33849340,
                "login": "SebasF1349",
                "node_id": "MDQ6VXNlcjMzODQ5MzQw",
                "organizations_url": "https://api.github.com/users/SebasF1349/orgs",
                "received_events_url": "https://api.github.com/users/SebasF1349/received_events",
                "repos_url": "https://api.github.com/users/SebasF1349/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/SebasF1349/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SebasF1349/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/SebasF1349",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> For example, now users can use gx to open a directory in explorer.exe. Or, even better, to open a link in my browser.\n\nBut that is a special case, because browsers are more useful outside of wsl. For any other program like git or ripgrep this isn't really true.",
            "created_at": "2024-12-09T08:33:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2527262109",
            "id": 2527262109,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WovWd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2527262109/reactions"
            },
            "updated_at": "2024-12-09T08:33:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2527262109",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think fundamentally problem is not way to disable this behavior in user configuration.\nCurrently defaults lua is loaded before init.vim or init.lua.",
            "created_at": "2024-12-10T00:57:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2529942255",
            "id": 2529942255,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6Wy9rv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2529942255/reactions"
            },
            "updated_at": "2024-12-10T00:57:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2529942255",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36663503?v=4",
                "events_url": "https://api.github.com/users/kuuote/events{/privacy}",
                "followers_url": "https://api.github.com/users/kuuote/followers",
                "following_url": "https://api.github.com/users/kuuote/following{/other_user}",
                "gists_url": "https://api.github.com/users/kuuote/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kuuote",
                "id": 36663503,
                "login": "kuuote",
                "node_id": "MDQ6VXNlcjM2NjYzNTAz",
                "organizations_url": "https://api.github.com/users/kuuote/orgs",
                "received_events_url": "https://api.github.com/users/kuuote/received_events",
                "repos_url": "https://api.github.com/users/kuuote/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kuuote/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kuuote/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kuuote",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The performance problem exists even in Linux environment.\nIt is about some millisecond, but it is not acceptable overhead for me.\n\nNOTE: My neovim startup time is 9ms.\n\nBut I think the real problem is that `defaults.lua` is executed before `init.vim` or `init.lua` and users cannot disable it.\nI even know users who are patching defaults.lua to disable it. Isn't this counterproductive?\n\nIf defaults.lua checks `grepprg` value and it is not set by user, the set is OK.",
            "created_at": "2024-12-10T01:34:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2530000818",
            "id": 2530000818,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6WzL-y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2530000818/reactions"
            },
            "updated_at": "2024-12-10T01:34:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2530000818",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Also cc @gpanders",
            "created_at": "2024-12-10T02:58:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2530131253",
            "id": 2530131253,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6Wzr01",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2530131253/reactions"
            },
            "updated_at": "2024-12-10T02:58:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2530131253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "One possible short term course of action would be to move the default grepprg setting out of _defaults.lua and into a plugin file, which can be opted out of somehow. ",
            "created_at": "2024-12-10T13:25:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2531631682",
            "id": 2531631682,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6W5aJC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2531631682/reactions"
            },
            "updated_at": "2024-12-10T13:25:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2531631682",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Note that we'll run into similar problems with other (harder) external requirements like `curl` and `tar`, so the bigger issue worth tracking here is not limited to `_defaults.lua`.",
            "created_at": "2024-12-10T13:27:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2531638414",
            "id": 2531638414,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6W5byO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2531638414/reactions"
            },
            "updated_at": "2024-12-10T13:27:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2531638414",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Another potential solution could be to resolve the default lazy on first use. No idea what the current representation looks like but could do something like in https://github.com/neovim/neovim/pull/25123 if we currently don't know if the user changed the default.\n\nBesides the effort, downside is that if plugins query the value it could be wrong until the first `:grep`",
            "created_at": "2024-12-10T17:39:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2532383173",
            "id": 2532383173,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6W8RnF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2532383173/reactions"
            },
            "updated_at": "2024-12-10T17:41:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2532383173",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'll just say I would be happy to implement any solution deemed acceptable as far as _defaults.lua is concerned ^^",
            "created_at": "2024-12-10T17:41:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2532394574",
            "id": 2532394574,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6W8UZO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2532394574/reactions"
            },
            "updated_at": "2024-12-10T17:41:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2532394574",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4",
                "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}",
                "followers_url": "https://api.github.com/users/LunarLambda/followers",
                "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}",
                "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/LunarLambda",
                "id": 38919842,
                "login": "LunarLambda",
                "node_id": "MDQ6VXNlcjM4OTE5ODQy",
                "organizations_url": "https://api.github.com/users/LunarLambda/orgs",
                "received_events_url": "https://api.github.com/users/LunarLambda/received_events",
                "repos_url": "https://api.github.com/users/LunarLambda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/LunarLambda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Not limited to this option, performing a high-cost operation like `executable()` in `_defaults.lua`, which is always executed before user settings, should be avoided.\n\nRegarding this process, I think the only option is to simply remove the check. However, if such a process becomes necessary in other functions, I believe the only solution is to delay it.",
            "created_at": "2024-12-11T00:19:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2533330775",
            "id": 2533330775,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6W_49X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2533330775/reactions"
            },
            "updated_at": "2024-12-11T00:19:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2533330775",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Unsure why this discussion is so defaults.lua-centric, this problem already existed before it and is infinitely worse if user doesn't have a clipboard provider as a bunch of random providers will be searched with executable() calls, one for each provider.",
            "created_at": "2024-12-11T00:34:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2533351222",
            "id": 2533351222,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6W_982",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2533351222/reactions"
            },
            "updated_at": "2024-12-11T00:34:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2533351222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Unsure why this discussion is so defaults.lua-centric, this problem already existed before it and is infinitely worse if user doesn't have a clipboard provider as a bunch of random providers will be searched with `executable()` calls, one for each provider.\n\nOh, it is another problem.\n\nI disable clipboard support.  Because it is slow.\n\n```vim\n\" Disable clipboard support\nset clipboard=\n```\n\nBut this search only executed when clipboard is used?  It seems executed lazily.",
            "created_at": "2024-12-11T00:49:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2533365587",
            "id": 2533365587,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6XABdT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 2,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2533365587/reactions"
            },
            "updated_at": "2024-12-11T00:49:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2533365587",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> move the default grepprg setting out of _defaults.lua and into a plugin file, which can be opted out of somehow.\n\nThat doesn't really solve the problem though, it just avoids the loud voices. Everyone else would still be affected by the potentially \"slow\" startup.\n\nAs a short-term fix, can we cache stuff in shada? And beyond that, lazy-evaluate as mentioned in https://github.com/neovim/neovim/issues/31506#issuecomment-2532383173 . And beyond that, make `executable()` faster if possible.",
            "created_at": "2024-12-11T11:36:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2535666208",
            "id": 2535666208,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6XIzIg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2535666208/reactions"
            },
            "updated_at": "2024-12-11T11:36:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2535666208",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Let's add a parameter to `executable()` which makes it fast. https://github.com/fish-shell/fish-shell/commit/3374692b9113e85c690059ac3def5f4aa190294f shows a strategy:\n\n> If the cmd we are executing does\nnot contain a period (i.e. has no extension) it by definition cannot be a\nWindows executable. In this case, we skip searching for it in any of the\nauto-mounted, auto-PATH-appended directories like `/mnt/c/Windows/` or\n`/mnt/c/Program Files`, but we *do* include those directories if what we're\nsearching for could be a Windows executable.\n\nThat might not even require a flag, just improving the `executable()` logic.",
            "created_at": "2024-12-18T10:59:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2551016396",
            "id": 2551016396,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6YDWvM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2551016396/reactions"
            },
            "updated_at": "2024-12-18T10:59:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2551016396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "How does this interact with the PATHEXT variable on Windows (a list of file extensions the system tries when looking for a command `foo`, e.g. it tries `foo.bat`, `foo.cmd`, `foo.exe`, etc..)\n\nDoes WSL not do this? Or would windows/wsl user code need to explicitly specify an extension going forward?\n\nEDIT: I'm not sure whether PATHEXT is a cmd.exe/powershell concept, or whether APIs like CreateProcess also use it.\n\nEDIT 2: It seems like Windows APIs such as `CreateProcessW` do append `.exe` to the command name if it lacks an extension in certain circumstances.",
            "created_at": "2024-12-18T11:03:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2551024741",
            "id": 2551024741,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6YDYxl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2551024741/reactions"
            },
            "updated_at": "2024-12-18T11:09:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2551024741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4",
                "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}",
                "followers_url": "https://api.github.com/users/LunarLambda/followers",
                "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}",
                "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/LunarLambda",
                "id": 38919842,
                "login": "LunarLambda",
                "node_id": "MDQ6VXNlcjM4OTE5ODQy",
                "organizations_url": "https://api.github.com/users/LunarLambda/orgs",
                "received_events_url": "https://api.github.com/users/LunarLambda/received_events",
                "repos_url": "https://api.github.com/users/LunarLambda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/LunarLambda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I understand that the essence of the problem is the slowness of executable(), but the starting point of this Issue is that the decision process in defaults.lua is taking a long time.\nIf it is difficult to resolve the essence of the issue, could you please take measures to work around the problem that started it in the first place?\nIf you understand that the process is too heavy to be forced to call in defaults.lua, it is not unreasonable to conclude that it should not be in defaults.lua.",
            "created_at": "2025-03-07T03:04:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2705412961",
            "id": 2705412961,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6hQVNh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2705412961/reactions"
            },
            "updated_at": "2025-03-07T10:57:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2705412961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5582459?v=4",
                "events_url": "https://api.github.com/users/kyoh86/events{/privacy}",
                "followers_url": "https://api.github.com/users/kyoh86/followers",
                "following_url": "https://api.github.com/users/kyoh86/following{/other_user}",
                "gists_url": "https://api.github.com/users/kyoh86/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kyoh86",
                "id": 5582459,
                "login": "kyoh86",
                "node_id": "MDQ6VXNlcjU1ODI0NTk=",
                "organizations_url": "https://api.github.com/users/kyoh86/orgs",
                "received_events_url": "https://api.github.com/users/kyoh86/received_events",
                "repos_url": "https://api.github.com/users/kyoh86/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kyoh86/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kyoh86/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kyoh86",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I already suggested an approach, above.",
            "created_at": "2025-03-07T10:57:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2706151430",
            "id": 2706151430,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6hTJgG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2706151430/reactions"
            },
            "updated_at": "2025-03-07T10:57:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2706151430",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes.  I know.  It seems the right approach.  But it is not implemented yet.\nAnd it is for WSL environment fix.  It is not for Windows environment.\n\nI think workaround fix is needed for the problem.",
            "created_at": "2025-03-08T03:10:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2707971327",
            "id": 2707971327,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6haFz_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2707971327/reactions"
            },
            "updated_at": "2025-03-08T03:10:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2707971327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Here's an idea: Can we make `grepprg` have the ability to be set to an expression? Similar to `statusline`, etc?\n\nThen lua code could lazily evaluate which program to use based on availability on the first `:grep` invocation, and cache the result. Zero cost to startuptime and zero cost to the user if they don't use the command.\n\nWon't solve the underlying issue of `executable()` being slow on WSL, of course. But it solves the consequence (people experiencing slower startup times), and eating the milliseconds is much more acceptable on a program invocation that's going to be slow-ish anyway (possibly significantly, if lots of files are searched)",
            "created_at": "2025-03-23T15:33:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2746276181",
            "id": 2746276181,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6jsNlV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2746276181/reactions"
            },
            "updated_at": "2025-03-23T15:36:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2746276181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4",
                "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}",
                "followers_url": "https://api.github.com/users/LunarLambda/followers",
                "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}",
                "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/LunarLambda",
                "id": 38919842,
                "login": "LunarLambda",
                "node_id": "MDQ6VXNlcjM4OTE5ODQy",
                "organizations_url": "https://api.github.com/users/LunarLambda/orgs",
                "received_events_url": "https://api.github.com/users/LunarLambda/received_events",
                "repos_url": "https://api.github.com/users/LunarLambda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/LunarLambda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`keywordprg` can be prefixed with `:` to be interpreted as an ex command. We could do the same with `grepprg` as a short term solution.\n\nSee the changes in https://github.com/neovim/neovim/pull/31280 for a rough summary of all options that can be set to some form of expression:\n\n```lua\nlocal func_opts = { \n   -- Options that can be set as a function \n   func = { \n     completefunc = true, \n     findfunc = true, \n     omnifunc = true, \n     operatorfunc = true, \n     quickfixtextfunc = true, \n     tagfunc = true, \n     thesaurusfunc = true, \n   }, \n  \n   -- Options that can be set as an expression \n   expr = { \n     diffexpr = true, \n     foldexpr = true, \n     formatexpr = true, \n     includeexpr = true, \n     indentexpr = true, \n     modelineexpr = true, \n     patchexpr = true, \n   }, \n  \n   -- Options that can be set as an expression with a prefix of '%!' \n   pct_bang_expr = { \n     statuscolumn = true, \n     statusline = true, \n     tabline = true, \n     winbar = true, \n   }, \n  \n   -- Options that can be set as an ex command if prefixed with ':' \n   ex_cmd_expr = { \n     keywordprg = true, \n   }, \n }\n```",
            "created_at": "2025-03-23T16:51:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/31506#issuecomment-2746309326",
            "id": 2746309326,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31506",
            "node_id": "IC_kwDOAPphoM6jsVrO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2746309326/reactions"
            },
            "updated_at": "2025-03-23T16:54:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2746309326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 38,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31506/comments",
    "created_at": "2024-12-08T01:24:44Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31506/events",
    "html_url": "https://github.com/neovim/neovim/issues/31506",
    "id": 2724888505,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim defaults for options, colorscheme/theme, autocmds/events, etc.",
            "id": 103777064,
            "name": "defaults",
            "node_id": "MDU6TGFiZWwxMDM3NzcwNjQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/defaults"
        },
        {
            "color": "D4C5F9",
            "default": false,
            "description": "",
            "id": 5697445672,
            "name": "platform:wsl",
            "node_id": "LA_kwDOAPphoM8AAAABU5gfKA",
            "url": "https://api.github.com/repos/neovim/neovim/labels/platform:wsl"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31506/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 266,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 311,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-03-24T15:11:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6ian-5",
    "number": 31506,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 9,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 9,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31506/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31506/timeline",
    "title": "`executable()` is slow on WSL",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-03-23T16:54:16Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31506",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5582459?v=4",
        "events_url": "https://api.github.com/users/kyoh86/events{/privacy}",
        "followers_url": "https://api.github.com/users/kyoh86/followers",
        "following_url": "https://api.github.com/users/kyoh86/following{/other_user}",
        "gists_url": "https://api.github.com/users/kyoh86/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/kyoh86",
        "id": 5582459,
        "login": "kyoh86",
        "node_id": "MDQ6VXNlcjU1ODI0NTk=",
        "organizations_url": "https://api.github.com/users/kyoh86/orgs",
        "received_events_url": "https://api.github.com/users/kyoh86/received_events",
        "repos_url": "https://api.github.com/users/kyoh86/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/kyoh86/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kyoh86/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/kyoh86",
        "user_view_type": "public"
    }
}