{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\nSome users have a hard time figuring out how to use the \"Neovim runtime\" (e.g. vim.fs.find() and vim.fs.dir() have been described as hard to use by just reading the documentation).\n\n### Expected behavior\n\nProviding examples for all documented functions might help users understand how to use them.\r\n\r\nI'll list all documented functions that do not have at least one example in a comment below.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "## Requirements:\r\n\r\n- Only for non-trivial functions\r\n- Strongly prefer to show _one_ characteristic example, not numerous examples.\r\n    - Capture the \"common case\"\r\n    - Example shows usage of the most common parameters, not every little flag. \r\n    - The idea is to give users a basic template for the \"shape\" of the usage, which can be copied to get started quickly.\r\n- Prefer Lua instead of Vimscript. Don't show both except in rare circumstances where important differences need to be called out.",
            "created_at": "2023-02-23T12:13:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/22367#issuecomment-1441658078",
            "id": 1441658078,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22367",
            "node_id": "IC_kwDOAPphoM5V7fTe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1441658078/reactions"
            },
            "updated_at": "2023-03-17T11:01:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1441658078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Nit: there might be multiple \"common cases\", which should all be illustrated if sufficiently distinct (as in, e.g., `nvim_create_autocmd`). But in general the policy \"as many as needed, as few as possible\" is sound.",
            "created_at": "2023-02-23T12:15:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/22367#issuecomment-1441660906",
            "id": 1441660906,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22367",
            "node_id": "IC_kwDOAPphoM5V7f_q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1441660906/reactions"
            },
            "updated_at": "2023-02-23T12:16:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1441660906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think that part of the problem/confusion with `vim.fs.dir()` is that in `help` is mention that it returns an iterator but that's not entirely true for `not depth or depth == 1` since it returns a function and an iterator, which is weird from the user stand point if they are not using a loop to traverse the filesystem\r\n\r\n```lua\r\nlocal fun, it = vim.fs.dir('.')\r\nfun(it) -- yields the next item \r\n\r\nlocal it = vim.fs.dir('.', {depth = 2})\r\nit() -- same as fun(it)\r\n```\r\n",
            "created_at": "2023-02-23T15:15:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/22367#issuecomment-1441960257",
            "id": 1441960257,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22367",
            "node_id": "IC_kwDOAPphoM5V8pFB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1441960257/reactions"
            },
            "updated_at": "2023-02-23T15:15:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1441960257",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4576770?v=4",
                "events_url": "https://api.github.com/users/mike325/events{/privacy}",
                "followers_url": "https://api.github.com/users/mike325/followers",
                "following_url": "https://api.github.com/users/mike325/following{/other_user}",
                "gists_url": "https://api.github.com/users/mike325/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mike325",
                "id": 4576770,
                "login": "mike325",
                "node_id": "MDQ6VXNlcjQ1NzY3NzA=",
                "organizations_url": "https://api.github.com/users/mike325/orgs",
                "received_events_url": "https://api.github.com/users/mike325/received_events",
                "repos_url": "https://api.github.com/users/mike325/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mike325/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mike325/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mike325",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">but that's not entirely true for not depth or depth == 1 since it returns a function and an iterator, which is weird from the user stand point if they are not using a loop to traverse the filesystem\r\n\r\nThis _is_ an iterator as far as Lua is concerned. See this section in the Lua reference manual: https://www.lua.org/manual/5.1/manual.html#2.4.5\r\n\r\n`vim.fs.dir()` is intended to be used as an iterator, like this:\r\n\r\n```lua\r\nfor name, type in vim.fs.dir(...) do\r\n  print(string.format(\"%s is a %s\", name, type))\r\nend\r\n```\r\n\r\nAny other usage is unsupported.",
            "created_at": "2023-02-23T15:31:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/22367#issuecomment-1441984785",
            "id": 1441984785,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22367",
            "node_id": "IC_kwDOAPphoM5V8vER",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1441984785/reactions"
            },
            "updated_at": "2023-02-23T15:31:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1441984785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That's the thing, not supporting other usages is also not specified in the docs, I really don't have a problem with `vim.fs.dir()` only supporting being used in `for`  loops, I just wanted to point it out, also having an \"unique\" return type would make the function feel more \"consistent\"\r\n\r\n```lua\r\nfunction M.dir(path, opts)\r\n  opts = opts or {}\r\n\r\n  vim.validate({\r\n    path = { path, { 'string' } },\r\n    depth = { opts.depth, { 'number' }, true },\r\n    skip = { opts.skip, { 'function' }, true },\r\n  })\r\n\r\n  if not opts.depth or opts.depth == 1 then\r\n    return coroutine.wrap(function()\r\n      local fs = vim.loop.fs_scandir(M.normalize(path))\r\n      while true do\r\n        local name, t = vim.loop.fs_scandir_next(fs)\r\n        if not name then\r\n          break\r\n        end\r\n        coroutine.yield(name, t)\r\n      end\r\n    end)\r\n  end\r\n\r\n  -- depth >= 2\r\n  -- ...\r\nend\r\n\r\n-- iterator can be used outside of the for loop, which is the same behaivor as vim.fs.dir('.', {depth = 2})\r\nlocal it = vim.fs.dir('.')\r\nprint(it())\r\nprint(it())\r\nfor fname, ftype in it do\r\n  print(fname, ftype)\r\nend\r\n```\r\n",
            "created_at": "2023-02-23T17:28:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/22367#issuecomment-1442163861",
            "id": 1442163861,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22367",
            "node_id": "IC_kwDOAPphoM5V9ayV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1442163861/reactions"
            },
            "updated_at": "2023-02-23T20:55:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1442163861",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4576770?v=4",
                "events_url": "https://api.github.com/users/mike325/events{/privacy}",
                "followers_url": "https://api.github.com/users/mike325/followers",
                "following_url": "https://api.github.com/users/mike325/following{/other_user}",
                "gists_url": "https://api.github.com/users/mike325/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mike325",
                "id": 4576770,
                "login": "mike325",
                "node_id": "MDQ6VXNlcjQ1NzY3NzA=",
                "organizations_url": "https://api.github.com/users/mike325/orgs",
                "received_events_url": "https://api.github.com/users/mike325/received_events",
                "repos_url": "https://api.github.com/users/mike325/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mike325/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mike325/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mike325",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">That's the thing, not supporting other usages is also not specified in the docs\r\n\r\nA usage example in the docs would be good to demonstrate that this is how it's meant to be used. I would happily accept such a PR.\r\n\r\n>having an \"unique\" return type would make the function feel more \"consistent\"\r\n\r\nDoes this really matter? In either case, a user types `for name, type in vim.fs.dir(...)`. As far as I can tell, using a coroutine when `depth` is nil or 1 doesn't buy us anything except more code and more indirection.",
            "created_at": "2023-02-23T17:38:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/22367#issuecomment-1442176690",
            "id": 1442176690,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22367",
            "node_id": "IC_kwDOAPphoM5V9d6y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1442176690/reactions"
            },
            "updated_at": "2023-02-23T17:38:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1442176690",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think this should work?\r\n```diff\r\ndiff --git a/runtime/lua/vim/fs.lua b/runtime/lua/vim/fs.lua\r\nindex a0d2c4c33..05daa61de 100644\r\n--- a/runtime/lua/vim/fs.lua\r\n+++ b/runtime/lua/vim/fs.lua\r\n@@ -100,10 +100,13 @@ function M.dir(path, opts)\r\n   })\r\n \r\n   if not opts.depth or opts.depth == 1 then\r\n-    return function(fs)\r\n-      return vim.loop.fs_scandir_next(fs)\r\n-    end,\r\n-      vim.loop.fs_scandir(M.normalize(path))\r\n+    local fs = vim.loop.fs_scandir(M.normalize(path))\r\n+    return function()\r\n+      local name, t = vim.loop.fs_scandir_next(fs)\r\n+      if name then\r\n+        return name, t\r\n+      end\r\n+    end\r\n   end\r\n \r\n   --- @async\r\n```",
            "created_at": "2023-02-23T18:30:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/22367#issuecomment-1442242668",
            "id": 1442242668,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22367",
            "node_id": "IC_kwDOAPphoM5V9uBs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1442242668/reactions"
            },
            "updated_at": "2023-02-23T18:30:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1442242668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">I think this should work?\r\n\r\nIt already works, and is consistent with the pattern in the [user manual](https://www.lua.org/manual/5.1/manual.html#2.4.5):\r\n\r\n> A for statement like\r\n> \r\n> ```lua\r\n>      for var_1, ···, var_n in explist do block end\r\n> ```\r\n> \r\n> is equivalent to the code:\r\n> \r\n> ```lua\r\n>      do\r\n>        local f, s, var = explist\r\n>        while true do\r\n>          local var_1, ···, var_n = f(s, var)\r\n>          var = var_1\r\n>          if var == nil then break end\r\n>          block\r\n>        end\r\n>      end\r\n> ```\r\n\r\nLet's not change things that work perfectly fine without a good reason.",
            "created_at": "2023-02-23T21:22:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/22367#issuecomment-1442449329",
            "id": 1442449329,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22367",
            "node_id": "IC_kwDOAPphoM5V-gex",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1442449329/reactions"
            },
            "updated_at": "2023-02-23T21:22:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1442449329",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Ok. I've decided enough is enough. I'll be working on this in the next few weeks. We need to make the quality of neovim docs as good as vim's.\r\n\r\nI'll greatly appreciate it if this is assigned to me.",
            "created_at": "2023-03-17T07:17:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/22367#issuecomment-1473283557",
            "id": 1473283557,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22367",
            "node_id": "IC_kwDOAPphoM5X0IXl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1473283557/reactions"
            },
            "updated_at": "2023-03-17T07:19:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1473283557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31679231?v=4",
                "events_url": "https://api.github.com/users/SeniorMars/events{/privacy}",
                "followers_url": "https://api.github.com/users/SeniorMars/followers",
                "following_url": "https://api.github.com/users/SeniorMars/following{/other_user}",
                "gists_url": "https://api.github.com/users/SeniorMars/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/SeniorMars",
                "id": 31679231,
                "login": "SeniorMars",
                "node_id": "MDQ6VXNlcjMxNjc5MjMx",
                "organizations_url": "https://api.github.com/users/SeniorMars/orgs",
                "received_events_url": "https://api.github.com/users/SeniorMars/received_events",
                "repos_url": "https://api.github.com/users/SeniorMars/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/SeniorMars/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SeniorMars/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/SeniorMars",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Contributions are welcome (from anyone; we won't assign such a broad issue to a single person), but\r\n\r\n1. start small (focus on one module, max. 5 to 10 per PR)\r\n2. keep in mind https://github.com/neovim/neovim/issues/22367#issuecomment-1441658078, which is a hard policy\r\n3. respect feedback",
            "created_at": "2023-03-17T09:35:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/22367#issuecomment-1473524542",
            "id": 1473524542,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22367",
            "node_id": "IC_kwDOAPphoM5X1DM-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1473524542/reactions"
            },
            "updated_at": "2023-03-17T09:35:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1473524542",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/22367/comments",
    "created_at": "2023-02-22T19:13:36Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/22367/events",
    "html_url": "https://github.com/neovim/neovim/issues/22367",
    "id": 1595679279,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/22367/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5fHCIv",
    "number": 22367,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/22367/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/22367/timeline",
    "title": "docs: provide examples for all functions",
    "updated_at": "2025-01-17T15:32:24Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/22367",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4",
        "events_url": "https://api.github.com/users/glacambre/events{/privacy}",
        "followers_url": "https://api.github.com/users/glacambre/followers",
        "following_url": "https://api.github.com/users/glacambre/following{/other_user}",
        "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/glacambre",
        "id": 11534587,
        "login": "glacambre",
        "node_id": "MDQ6VXNlcjExNTM0NTg3",
        "organizations_url": "https://api.github.com/users/glacambre/orgs",
        "received_events_url": "https://api.github.com/users/glacambre/received_events",
        "repos_url": "https://api.github.com/users/glacambre/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/glacambre",
        "user_view_type": "public"
    }
}