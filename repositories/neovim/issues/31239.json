{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nWhat the title suggests\n\nI'm trying to achieve two things:\n\n- Pass data between `nvim_exec_autocmds` and `nvim_create_autocmd`. For example, I want to implement a cancellation token that allows the user to set `object.cancel = true` in the callback of `nvim_create_autocmd` to skip executing some code.\n- Call a method, as the metatable is not copied, Neovim throws an error.\n\n### Steps to reproduce\n\n1. Save as `minimal.lua`\n\n```lua\n-- Plugin code\n\nlocal Class = {}\n\nClass.__index = Class\n\nfunction Class:new()\n    return setmetatable({}, self)\nend\n\nfunction Class:hi()\n    vim.print(\"hi\")\nend\n\nfunction Class:exec()\n    vim.print(self)\n    vim.api.nvim_exec_autocmds(\"User\", { pattern = \"UserPattern\", data = self })\nend\n\n-- User code\n\nvim.api.nvim_create_autocmd(\"User\", {\n    pattern = \"UserPattern\",\n    callback = function(ev)\n        local object = ev.data\n        vim.print(object)\n        object:hi()\n    end,\n})\n\n-- Plugin code\n\nClass:new():exec()\n```\n\n2. `nvim --clean -u minimal.lua`\n\n```\n{                                                                                                                                                                                                                                               \n  <metatable> = <1>{                                                                                                                                                                                                                            \n    __index = <table 1>,                                                                                                                                                                                                                        \n    exec = <function 1>,                                                                                                                                                                                                                        \n    hi = <function 2>,                                                                                                                                                                                                                          \n    new = <function 3>                                                                                                                                                                                                                          \n  }                                                                                                                                                                                                                                             \n}                                                                                                                                                                                                                                               \n{}                                                                                                                                                                                                                                              \nError detected while processing /tmp/minimal.lua..User Autocommands for \"UserPattern\":                                                                                                                                                          \nError executing lua callback: /tmp/minimal.lua:27: attempt to call method 'hi' (a nil value)                                                                                                                                                    \nstack traceback:                                                                                                                                                                                                                                \n        /tmp/minimal.lua:27: in function </tmp/minimal.lua:24>                                                                                                                                                                                  \n        [C]: in function 'nvim_exec_autocmds'                                                                                                                                                                                                   \n        /tmp/minimal.lua:17: in function 'exec'                                                                                                                                                                                                 \n        /tmp/minimal.lua:33: in main chunk  \n```\n\nAlso, since `vim.print()` shows that `ev.data` and `self` are different, `object.cancel = true` will do nothing to `self` (more below).\n\n### Expected behavior\n\n`object:hi()` runs without error. \n\nThis is a solution that solves both my problems but it's inconvenient at best:\n\n1. Save as `minimal_fixed.lua`\n\n```lua\n-- Plugin code\n\nlocal Class = {}\n\nClass.__index = Class\n\nlocal tbl = {}\n\nfunction Class:new()\n    local address = (\"%p\"):format(self)\n    tbl[address] = self\n    return setmetatable({ key = address }, self)\nend\n\nfunction Class:hi()\n    vim.print(\"hi\")\nend\n\nfunction Class:exec()\n    vim.api.nvim_exec_autocmds(\"User\", { pattern = \"UserPattern\", data = self.key })\n    if self.cancel then\n        vim.print(\"operation cancelled\")\n    end\nend\n\nfunction get_object(key)\n    return tbl[key]\nend\n\n-- User code\n\nvim.api.nvim_create_autocmd(\"User\", {\n    pattern = \"UserPattern\",\n    callback = function(ev)\n        local object = get_object(ev.data)\n        object:hi()\n        object.cancel = true\n    end,\n})\n\n-- Plugin code\n\nClass:new():exec()\n```\n\n2. `nvim --clean -u minimal_fixed.lua`\n\n```\nhi                                                                                                                                                                                                                                              \noperation cancelled\n```\n\n### Nvim version (nvim -v)\n\nNVIM v0.10.2\n\n### Vim (not Nvim) behaves the same?\n\n-\n\n### Operating system/version\n\narchlinux\n\n### Terminal name/version\n\nkitty\n\n### $TERM environment variable\n\nxterm-kitty\n\n### Installation\n\nsystem package manager - pacman",
    "closed_at": "2024-11-17T11:35:02Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "`nvim_exec_autocmds` works over RPC, so copying metatables won't be possible.",
            "created_at": "2024-11-17T11:34:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/31239#issuecomment-2481196234",
            "id": 2481196234,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31239",
            "node_id": "IC_kwDOAPphoM6T5AzK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2481196234/reactions"
            },
            "updated_at": "2024-11-17T11:34:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2481196234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31239/comments",
    "created_at": "2024-11-17T09:38:55Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31239/events",
    "html_url": "https://github.com/neovim/neovim/issues/31239",
    "id": 2665610570,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31239/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6e4f1K",
    "number": 31239,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31239/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31239/timeline",
    "title": "nvim_exec_autocmds passes by copy instead of reference and ignores metatables",
    "updated_at": "2025-01-17T15:33:29Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31239",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/176803464?v=4",
        "events_url": "https://api.github.com/users/qtyra/events{/privacy}",
        "followers_url": "https://api.github.com/users/qtyra/followers",
        "following_url": "https://api.github.com/users/qtyra/following{/other_user}",
        "gists_url": "https://api.github.com/users/qtyra/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/qtyra",
        "id": 176803464,
        "login": "qtyra",
        "node_id": "U_kgDOConOiA",
        "organizations_url": "https://api.github.com/users/qtyra/orgs",
        "received_events_url": "https://api.github.com/users/qtyra/received_events",
        "repos_url": "https://api.github.com/users/qtyra/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/qtyra/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/qtyra/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/qtyra",
        "user_view_type": "public"
    }
}