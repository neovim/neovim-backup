{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "\r\n\r\n### Problem\r\n\r\nCurrently, both `nvim_buf_set_lines` and `nvim_buf_set_text` destroys marks (`:h mark-motions`) between the `{starting}` and `{ending}` index. Fortunately, there is a `lockmarks` command but not having a callback signature makes it difficult to use from Lua script.\r\n\r\nRef: https://github.com/numToStr/Comment.nvim/issues/24 https://github.com/numToStr/Comment.nvim/issues/76\r\n\r\n### Proposal\r\n\r\nIntroduce lua API (`nvim_lock_marks`) equivalent to `lockmarks` with lua callback support\r\n\r\n```\r\napi.nvim_lock_marks({command})                         *vim.api.nvim_lock_marks*\r\n    Execute {command} without adjusting marks\r\n\r\n    Parameters: ~\r\n        {command}  (string|function)  Command/Callback to be executed\r\n\r\n    See: ~\r\n        |lockmarks|\r\n\r\n    Usage: ~\r\n        >\r\n            vim.api.nvim_lock_marks(function()\r\n                vim.api.nvim_buf_set_lines(0, 0, 1, true, { \"hello\" })\r\n            end)\r\n        <\r\n```\r\n\r\nFollowing is an example of workaround that is needed in the absence of aforementioned lua API.\r\n\r\n- Current\r\n\r\n```lua\r\n-- my-module.lua\r\n\r\nlocal mod = {}\r\n\r\nfunction mod.run(motion, cfg)\r\n    print(motion, cfg)\r\n    local line = string.gsub(vim.api.nvim_get_current_line(), '^(%s*)', '%1-- ')\r\n    vim.api.nvim_buf_set_lines(0, 0, 1, true, { line })\r\nend\r\n\r\n---@param motion string See |g@|\r\n---@param cfg table Plugin config\r\nfunction mod.locked(motion, cfg) -- I can't use this {cfg} table without converting it string or something\r\n    vim.cmd(string.format(\"lockmarks lua require'my-module'.run'%s'\", motion))\r\nend\r\n\r\nfunction mod.op()\r\n    vim.o.operatorfunc = \"v:lua.require'my-module'.locked\"\r\n    return 'g@'\r\nend\r\n\r\nvim.keymap.set('n', 'gc', mod.op, { expr = true })\r\n\r\nreturn mod\r\n```\r\n\r\n- With Lua API (`nvim_lock_marks`)\r\n\r\n```lua\r\n-- my-module.lua\r\n\r\nlocal mod = {}\r\n\r\n---@param motion string See |g@|\r\n---@param cfg table Plugin config\r\nfunction mod.run(motion, cfg)\r\n    -- I can then wrap plugin's API function and expose them directly to user\r\n    vim.api.nvim_lock_marks(function()\r\n        print(motion, cfg)\r\n        local line = string.gsub(vim.api.nvim_get_current_line(), '^(%s*)', '%1-- ')\r\n        vim.api.nvim_buf_set_lines(0, 0, 1, true, { line })\r\n    end)\r\nend\r\n\r\nfunction mod.op()\r\n    vim.o.operatorfunc = \"v:lua.require'my-module'.run\"\r\n    return 'g@'\r\nend\r\n\r\nvim.keymap.set('n', 'gc', mod.op, { expr = true })\r\n\r\nreturn mod\r\n``` ",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "should be part of the Nvim API (`nvim_lock_marks`) as followup to https://github.com/neovim/neovim/pull/15346?",
            "created_at": "2022-08-18T14:59:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/19832#issuecomment-1219601385",
            "id": 1219601385,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19832",
            "node_id": "IC_kwDOAPphoM5IsaPp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1219601385/reactions"
            },
            "updated_at": "2022-08-18T14:59:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1219601385",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@clason Yes, that sounds reasonable.",
            "created_at": "2022-08-18T15:03:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/19832#issuecomment-1219604848",
            "id": 1219604848,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19832",
            "node_id": "IC_kwDOAPphoM5IsbFw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1219604848/reactions"
            },
            "updated_at": "2022-08-18T15:03:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1219604848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24727447?v=4",
                "events_url": "https://api.github.com/users/numToStr/events{/privacy}",
                "followers_url": "https://api.github.com/users/numToStr/followers",
                "following_url": "https://api.github.com/users/numToStr/following{/other_user}",
                "gists_url": "https://api.github.com/users/numToStr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/numToStr",
                "id": 24727447,
                "login": "numToStr",
                "node_id": "MDQ6VXNlcjI0NzI3NDQ3",
                "organizations_url": "https://api.github.com/users/numToStr/orgs",
                "received_events_url": "https://api.github.com/users/numToStr/received_events",
                "repos_url": "https://api.github.com/users/numToStr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/numToStr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/numToStr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/numToStr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I was thinking about this the other day, If we go this route of one API function per \"context setting\" we end up with too many functions.\r\n\r\nThere is:\r\n1. lockmarks\r\n2. keepjumps\r\n3. lockvar\r\n4. keepalt\r\n5. keeppatterns\r\n\r\nI think this two also count in this list:\r\n\r\n6. noautocmd\r\n7. silent\r\n\r\nAn alternative extensible approach would be having some sort of context\r\n\r\n```lua\r\nvim.context({ lockmarks = true, keeppatterns = true}, function()\r\n  vim.api.nvim_buf_set_lines(...)\r\nend)\r\n```\r\n\r\nThis also resolves the issue where some code locks the marks (this is global) and never unlocks it because it crashed.\r\n\r\nAnother nice thing is it uses closures, like the rest of our new api, and by keeping it in Lua we can test and then later on move it to the API if we got the interface right.\r\n\r\nA search of vim-fugitive for this command \"modifiers/context\" results [in 224 matches](https://sourcegraph.com/search?q=context:global+repo:tpope/vim-fugitive+lockmarks%7Ckeepjumps%7Clockvar%7Ckeepalt%7Ckeeppatterns%7Cnoautocmd%7Csilent&patternType=regexp), without `silent` [44 matches](https://sourcegraph.com/search?q=context:global+repo:tpope/vim-fugitive+lockmarks%7Ckeepjumps%7Clockvar%7Ckeepalt%7Ckeeppatterns%7Cnoautocmd&patternType=regexp). Picking fugitive because is a plugin that does it \"right\" meaning is a good citizen related to editor state.",
            "created_at": "2022-08-18T15:46:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/19832#issuecomment-1219653224",
            "id": 1219653224,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19832",
            "node_id": "IC_kwDOAPphoM5Ism5o",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 11,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 6,
                "total_count": 17,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1219653224/reactions"
            },
            "updated_at": "2022-08-18T15:46:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1219653224",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9699804?v=4",
                "events_url": "https://api.github.com/users/muniter/events{/privacy}",
                "followers_url": "https://api.github.com/users/muniter/followers",
                "following_url": "https://api.github.com/users/muniter/following{/other_user}",
                "gists_url": "https://api.github.com/users/muniter/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/muniter",
                "id": 9699804,
                "login": "muniter",
                "node_id": "MDQ6VXNlcjk2OTk4MDQ=",
                "organizations_url": "https://api.github.com/users/muniter/orgs",
                "received_events_url": "https://api.github.com/users/muniter/received_events",
                "repos_url": "https://api.github.com/users/muniter/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/muniter/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/muniter/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/muniter",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I was thinking about this the other day, If we go this route of one API function per \"context setting\" we end up with too many functions.\r\n\r\n💯  exactly this.\r\n\r\n> An alternative extensible approach would be having some sort of context\r\n>\r\n> ```\r\n> vim.context({ lockmarks = true, keeppatterns = true}, function()\r\n>   vim.api.nvim_buf_set_lines(...)\r\n> end)\r\n> ```\r\n\r\nYes! Also for temporarily setting **options**, syntax, etc.\r\n\r\n> Another nice thing is it uses closures\r\n\r\nYes. This was one of the missing pieces back in 2014 when this was discussed :) Also could be an enhancement to `nvim_call_atomic`.\r\n\r\n# Related\r\n\r\n- `context.c` is intended to support \"save and restore\" of most editor state.\r\n    - https://github.com/neovim/neovim/issues/19856#issuecomment-1221635471\r\n- https://github.com/neovim/neovim/issues/1285\r\n- https://github.com/neovim/neovim/issues/1065#issuecomment-454528131\r\n- Explorations:\r\n    - https://github.com/neovim/neovim/pull/28209\r\n    - https://github.com/neovim/neovim/pull/20669#issuecomment-1279862492",
            "created_at": "2022-08-22T00:41:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/19832#issuecomment-1221661689",
            "id": 1221661689,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19832",
            "node_id": "IC_kwDOAPphoM5I0RP5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1221661689/reactions"
            },
            "updated_at": "2024-05-23T13:51:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1221661689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Might as well add nvim_buf_call and nvim_win_call to it. What about `vim.with`, it's a little bit shorter? I think python uses `with` for something like this too.",
            "created_at": "2022-08-22T01:23:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/19832#issuecomment-1221680939",
            "id": 1221680939,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19832",
            "node_id": "IC_kwDOAPphoM5I0V8r",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1221680939/reactions"
            },
            "updated_at": "2022-08-22T01:23:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1221680939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/19832/comments",
    "created_at": "2022-08-18T14:56:51Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/19832/events",
    "html_url": "https://github.com/neovim/neovim/issues/19832",
    "id": 1343230567,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim core functionality or code",
            "id": 858327504,
            "name": "core",
            "node_id": "MDU6TGFiZWw4NTgzMjc1MDQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/core"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "save/restore editor state: shada, context, ctx, sessions, mksession",
            "id": 4449264023,
            "name": "editor-state",
            "node_id": "LA_kwDOAPphoM8AAAABCTJhlw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor-state"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/19832/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5QEBJn",
    "number": 19832,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/19832/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/19832/timeline",
    "title": "API: save/restore context (options, lockmarks, keepjumps, ...): vim.with()/vim.context()",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-03-29T14:43:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/19832",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24727447?v=4",
        "events_url": "https://api.github.com/users/numToStr/events{/privacy}",
        "followers_url": "https://api.github.com/users/numToStr/followers",
        "following_url": "https://api.github.com/users/numToStr/following{/other_user}",
        "gists_url": "https://api.github.com/users/numToStr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/numToStr",
        "id": 24727447,
        "login": "numToStr",
        "node_id": "MDQ6VXNlcjI0NzI3NDQ3",
        "organizations_url": "https://api.github.com/users/numToStr/orgs",
        "received_events_url": "https://api.github.com/users/numToStr/received_events",
        "repos_url": "https://api.github.com/users/numToStr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/numToStr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/numToStr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/numToStr",
        "user_view_type": "public"
    }
}