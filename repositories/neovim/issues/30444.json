{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\nThis is sort of a re-post of <https://github.com/neovim/nvim-lspconfig/issues/1788>, but hopefully in a place where it will get some traction. That issue is locked, so I don't know if @bavalpey or @baltitenger got answers somewhere else. CC-ing them here in case they did.\r\n\r\nI've read through this awfully long thread on Pyright: <https://github.com/microsoft/pyright/issues/1118>. If you haven't read this before, don't. @baltitenger summarized it well [in their issue to nvim-lspconfig](https://github.com/neovim/nvim-lspconfig/issues/1788).\r\n\r\nIn short: the Pyright author says that it's a bug if a IDE displays \"hint diagnostics\" ([VS Code doesn't seem to show them anywhere](https://github.com/microsoft/language-server-protocol/issues/1696#issuecomment-1482487245)). Here's some discussion on the spec about this: <https://github.com/microsoft/language-server-protocol/issues/1696>.\r\n\r\nHowever, Neovim does not behave this way out of the box (I just checked with <https://github.com/neovim/neovim/commit/100bb15d186ce855d064e86ff4630d9ad8d43a5e>, the latest `main` when I started writing this issue):\r\n\r\n- `vim.diagnostic.handlers`\r\n  - `sign`: Arguably wrong: displays diagnostic hints in signcolumn\r\n  - `underline`: This handler does the right thing with `DiagnosticTag.Unnecessary`. @lewis6991 did this in <https://github.com/neovim/neovim/pull/22747>. Thanks!\r\n  - `virtual_text`: Arguably wrong: displays diagnostic hints at the end of lines\r\n- `vim.diagnostic.goto_next` and `vim.diagnostic.goto_prev`: Arguably wrong: these navigate to non-actionable hint diagnostics\r\n\r\n### Expected behavior\r\n\r\nI am not the first person to think neovim should have more nuanced handling of \"hint diagnostics\".\r\n\r\n- The aforementioned nvim-lspconfig issue: <https://github.com/neovim/nvim-lspconfig/issues/1788>\r\n- @gpanders mentions it in <https://github.com/neovim/neovim/pull/22747#issuecomment-1478040364>\r\n  > We could modify the default settings for virtual text, signs, and underline to not display hint messages, but still display them in open_float. That seems like a reasonable middle ground to me.\r\n- I checked, and some of the early iterations of <https://github.com/neovim/neovim/pull/22747> had this filtering, but it looks like it was backed out for a couple of reasons:\r\n  - <https://github.com/neovim/neovim/pull/22747#issuecomment-1478093281>\r\n    > There's a good chance that another language sever assumes that the message stays accessible for users.\r\n  - <https://github.com/neovim/neovim/pull/22747#issuecomment-1478124774>\r\n    > However, up till now vim.diagnostic has remained completely decoupled from any \"LSP\"-isms. Having goto_next and friends check for an LSP tag would introduce a coupling. Not sure that's a good idea.\r\n- [Here's some lua code from the prolific @lewis6991](https://github.com/neovim/neovim/issues/17757#issuecomment-1401652935) demonstrating monkeypatching the existing `vim.diagnostic.handlers` to ignore `DiagnosticTag.Unnecessary` and adding a new `vim.diagnostic.handlers.unnecessary` that uses `vim.highlight` to annotate the relevant text as \"unnecessary\".\r\n  - I believe this is the Lua code that @lewis6991 alluded to here: <https://github.com/neovim/neovim/pull/22747#issuecomment-1478074555>\r\n    > I've had a bunch of custom lua code to handle this for a good while\r\n  - However, that filtering logic never landed in `main`. I do see that @lewis6991 [eventually removed that logic from their dotfiles](https://github.com/lewis6991/dotfiles/commit/63f7474ab6862658eaf2371ba09a0832ce599b2f), I don't know why.\r\n- Here's an even older (now closed, never merged) PR that also implements that filter logic: <https://github.com/neovim/neovim/pull/15333/>.\r\n\r\n@lewis6991, is there interest in getting some of this filter logic merged into neovim core? I understand from the past discussions that differences between LSP server implementations may mean that there's currently no sane default behavior here, and perhaps whatever we do here needs to be configurable. I don't know if that means this shouldn't be part of core, and is instead something that should be handled by a plugin.",
    "closed_at": "2024-09-20T21:46:33Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
        "events_url": "https://api.github.com/users/clason/events{/privacy}",
        "followers_url": "https://api.github.com/users/clason/followers",
        "following_url": "https://api.github.com/users/clason/following{/other_user}",
        "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/clason",
        "id": 2361214,
        "login": "clason",
        "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
        "organizations_url": "https://api.github.com/users/clason/orgs",
        "received_events_url": "https://api.github.com/users/clason/received_events",
        "repos_url": "https://api.github.com/users/clason/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/clason",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> In short: the Pyright author says that it's a bug if a IDE displays \"hint diagnostics\"\n\nThe pyright maintainer is wrong. This is why I removed the filtering logic from my dotfiles. These hints are still full diagnostics and the issue with pyright was that there was no way to suppress them.",
            "created_at": "2024-09-20T20:49:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364597958",
            "id": 2364597958,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8ObG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364597958/reactions"
            },
            "updated_at": "2024-09-20T20:49:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364597958",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "To tack on to that:\r\n\r\n> I am not the first person to think neovim should have more nuanced handling of \"hint diagnostics\".\r\n\r\nWe frankly don't care. We implement the LSP specification _and nothing but the LSP specification_. If you are not satisfied with that, lobby Microsoft to extend the protocol.\r\n\r\nAnything beyond that, you can implement yourself (in your config or in a plugin); the core implementation is fully hackable for this reason.",
            "created_at": "2024-09-20T20:52:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364601546",
            "id": 2364601546,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8PTK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364601546/reactions"
            },
            "updated_at": "2024-09-20T20:55:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364601546",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Note that I already reposted that issue in this repo, see #17757 for the answers and a couple workarounds.",
            "created_at": "2024-09-20T20:54:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364603707",
            "id": 2364603707,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8P07",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364603707/reactions"
            },
            "updated_at": "2024-09-20T20:54:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364603707",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/21960678?v=4",
                "events_url": "https://api.github.com/users/baltitenger/events{/privacy}",
                "followers_url": "https://api.github.com/users/baltitenger/followers",
                "following_url": "https://api.github.com/users/baltitenger/following{/other_user}",
                "gists_url": "https://api.github.com/users/baltitenger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/baltitenger",
                "id": 21960678,
                "login": "baltitenger",
                "node_id": "MDQ6VXNlcjIxOTYwNjc4",
                "organizations_url": "https://api.github.com/users/baltitenger/orgs",
                "received_events_url": "https://api.github.com/users/baltitenger/received_events",
                "repos_url": "https://api.github.com/users/baltitenger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/baltitenger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/baltitenger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/baltitenger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Note that I already reposted that issue in this repo, see https://github.com/neovim/neovim/issues/17757 for the answers and a couple workarounds.\r\n\r\n@baltitenger, I did see that issue, and actually did link to it in my OP.\r\n\r\nI should have clicked on a few more links, though. I see that neodim seems to be implementing exactly the `vim.diagnostics.handlers` monkeypatching + filtering that @lewis6991 used to have in their dotfiles: https://github.com/zbirenbaum/neodim/blob/d87470828690342d0139efc2fd56ea0b29e9ecb3/lua/neodim/init.lua#L23. Awesome!\r\n\r\n> The pyright maintainer is wrong\r\n\r\n>  We implement the LSP specification and nothing but the LSP specification. If you are not satisfied with that, lobby Microsoft to extend the protocol.\r\n\r\nI can hear the frustration in both your voices. I spent the last 5+ hours reading through issues and PRs and I've seen the herculean effort @lewis6991 went through to try to get this all sorted. Please bear with me, I only started going deep on this topic yesterday afternoon. You are literally years ahead of me. I'm just trying to understand the state of the world, and Neovim's opinions on this stuff.\r\n\r\nOne last question:\r\n\r\nIn Neovim's opinion, does the Language Server Protocol provide a mechanism for a LSP server to annotate some code as unused, *but not actually actionable*? I think this is (would be) a useful feature: I personally like having my unused variables grayed out even when I have to leave them there to satisfy the arity of some Python function.\r\n\r\nAs you know, the Pyright maintainer says \"yes\": it's by sending \"hint diagnostics\" with `DiagnosticTag.Unnecessary`. @zbirenbaum (maintainer of https://github.com/zbirenbaum/neodim) seems to agree ([relevant code here](https://github.com/zbirenbaum/neodim/blob/d87470828690342d0139efc2fd56ea0b29e9ecb3/lua/neodim/init.lua#L23-L31)).\r\n\r\nAre you saying that the LSP spec doesn't have a way to do this? Or are you saying there's a different mechanism for this (semantic tokens? something else?)?\r\n\r\nFor the record, I have filed 2 issues with Microsoft to try to understand things better. It might be useful context for this discussion:\r\n\r\n- https://github.com/microsoft/language-server-protocol/issues/2024\r\n- https://github.com/microsoft/language-server-protocol/issues/2025",
            "created_at": "2024-09-20T21:19:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364632441",
            "id": 2364632441,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8W15",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364632441/reactions"
            },
            "updated_at": "2024-09-20T21:19:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364632441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In Neovim's opinion, does the Language Server Protocol provide a mechanism for a LSP server to annotate some code as unused, but not actually actionable? I think this is (would be) a useful feature: I personally like having my unused variables grayed out even when I have to leave them there to satisfy the arity of some Python function.\r\n\r\nYou can read the specification as well as us; if you can point to a part we're not implementing correctly, feel free to open an issue. \r\n\r\nBut the pyright maintainer's opinion (and it is just that, to the best of our knowledge) is irrelevant here.",
            "created_at": "2024-09-20T21:22:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364635120",
            "id": 2364635120,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8Xfw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364635120/reactions"
            },
            "updated_at": "2024-09-20T21:22:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364635120",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Or are you saying there's a different mechanism for this (semantic tokens)?\n\nMy interpretation is that semantics tokens supercede tagged hints. I haven't checked, but my guess is that tagged hints were introduced before semantic tokens.",
            "created_at": "2024-09-20T21:27:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364640757",
            "id": 2364640757,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8Y31",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364640757/reactions"
            },
            "updated_at": "2024-09-20T21:27:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364640757",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Diagnostic tags were added in 3.15.0, semantic tokens in 3.16.0.\r\n",
            "created_at": "2024-09-20T21:30:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364643344",
            "id": 2364643344,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8ZgQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364643344/reactions"
            },
            "updated_at": "2024-09-20T21:30:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364643344",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "But let's not forget that the central issue here is the pyright's maintainer's refusal to respect common convention about unused values, which is completely unrelated to the LSP specification. \r\n\r\n> As you know, the Pyright maintainer says \"yes\": it's by sending \"hint diagnostics\" with DiagnosticTag.Unnecessary.\r\n\r\nAnd we handle them in [conformance to the spec](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnostic).",
            "created_at": "2024-09-20T21:32:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364645238",
            "id": 2364645238,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8Z92",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364645238/reactions"
            },
            "updated_at": "2024-09-20T21:33:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364645238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> if you can point to a part we're not implementing correctly, feel free to open an issue.\r\n\r\nIIUC, I don't think that defining UI behavior is actually in scope for the Language Server Protocol. From https://github.com/microsoft/language-server-protocol/issues/1696#issuecomment-1480983199:\r\n\r\n> I will close the issue since I really don't want to enforce UI rendering in the LSP specification.\r\n\r\nI really do think that Neovim is completely following the spec by choosing to always display these \"hint diagnostics\".\r\n\r\nI also think Neovim would be following the spec if it chose to do something different (like mostly ignore them, [IIUC, that is what VS Code does](https://github.com/microsoft/language-server-protocol/issues/1696#issuecomment-1482487245)).\r\n\r\nI think I understand why y'all have chosen to have the current core-Neovim behavior, and y'all have done an admirable job of providing the Lua hooks necessary for people to do their own thing here (as @zbirenbaum has done in neodim).\r\n\r\n> My interpretation is that semantics tokens supercede tagged hints. I haven't checked, but my guess is that tagged hints were introduced before semantic tokens.\r\n\r\nYou're correct about the history (tagged hints predate semantic tokens).\r\n\r\nI don't think you're correct that semantic tokens supersede tagged hints. I wrote up my findings on this over in https://github.com/microsoft/language-server-protocol/issues/2024.\r\n\r\n> But let's not forget that the central issue here is the pyright's maintainer's refusal to respect common convention about unused values, which is completely unrelated to the LSP specification\r\n\r\nI won't deny that's how I got here. But I would not say that's the central issue. I'd instead phrase this as a feature request: I like having my editor dim out unused variables without telling me it's actionable. I want the Neovim + LSP ecosystem to support this \"out of the box\" without a plugin (meaning no disrespect to @zbirenbaum for his work on neodim, I will probably use it!).\r\n\r\nWhat I'm hearing from you is that tagged hints are not how Neovim wants to be told about this. I get it, and I get why. But I don't yet understand what the \"missing piece\" is in the ecosystem to make this work. I'll follow up with y'all if I get some answers over on https://github.com/microsoft/language-server-protocol/issues/2024.\r\n\r\nI hope this conversation has not been too triggering for anyone!",
            "created_at": "2024-09-20T21:41:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364654621",
            "id": 2364654621,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8cQd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364654621/reactions"
            },
            "updated_at": "2024-09-21T03:35:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364654621",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I like having my editor dim out unused variables without telling me it's actionable.\r\n\r\nAnd you can do that. But working around a single server's idiosyncratic behavior is _not_ what we want to bake into core.\r\n\r\n(Keep in mind that other servers are using this diagnostic for _actionable_ diagnostics.)",
            "created_at": "2024-09-20T21:46:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364660558",
            "id": 2364660558,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8dtO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364660558/reactions"
            },
            "updated_at": "2024-09-20T21:47:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364660558",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> But working around a single server's idiosyncratic behavior is not what we want to bake into core.\r\n\r\nI hear you. I will report back if I learn anything over on ~https://github.com/microsoft/language-server-protocol/issues/2024~ (EDIT: I closed that issue in favor of this one: https://github.com/microsoft/language-server-protocol/issues/2026)",
            "created_at": "2024-09-20T21:47:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364661292",
            "id": 2364661292,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8d4s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364661292/reactions"
            },
            "updated_at": "2024-09-20T22:56:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364661292",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">want the Neovim + LSP ecosystem to support this \"out of the box\" without a plugin\r\n\r\nCould you elaborate a bit on what you’re wanting here? If your requirements are “I want this behavior with no configuration required” then indeed that is not likely to happen unless the LSP specification implements some mechanism for this (as already discussed). But Neovim core *should* already provide the tools (with `vim.diagnostic.config()`) to allow you to implement the behavior you want. If there is something lacking in our core APIs that prevents you from (easily) implementing that behavior then that is something we could fix.",
            "created_at": "2024-09-21T01:18:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364799311",
            "id": 2364799311,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M8_lP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364799311/reactions"
            },
            "updated_at": "2024-09-21T01:18:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364799311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Could you elaborate a bit on what you’re wanting here?\r\n\r\nConcretely, I want a world where a LSP server communicates information that causes an otherwise unconfirmed Neovim to behave in the following ways:\r\n\r\n- `vim.diagnostic.handlers`\r\n  - `sign`: Doesn't show anything about non-actionable unused code.\r\n  - `underline`: Continues to do the highlight work that @lewis6991 implemented in  https://github.com/neovim/neovim/pull/22747\r\n  - `virtual_text`: Doesn't show anything about non-actionable unused code.\r\n- `vim.lsp.buf.hover`: I honestly am not sure what I want here. Pretty sure I'd rather it not tell me about non-actionable unused code.\r\n- `vim.diagnostic.goto_next` and `vim.diagnostic.goto_prev`: These skip past non-actionable unused code.\r\n- (there may be other parts of the core Neovim experience I'm unfamiliar with that should also be tweaked)\r\n\r\n> that is not likely to happen unless the LSP specification implements some mechanism for this\r\n\r\nThat is now crystal clear to me =) I'll follow up with y'all if I get any traction on https://github.com/microsoft/language-server-protocol/issues/2026.\r\n\r\n>  If there is something lacking in our core APIs that prevents you from (easily) implementing that behavior then that is something we could fix.\r\n\r\nNope! To repeat myself from earlier: I think y'all have done an admirable job of providing the Lua hooks necessary for people to do their own thing here. I can definitely make Neovim behave the way I want it to here.",
            "created_at": "2024-09-21T02:11:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2364932711",
            "id": 2364932711,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M9gJn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364932711/reactions"
            },
            "updated_at": "2024-09-21T03:32:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2364932711",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "It's interesting that I was mentioned here.\r\n\r\nIt's actually ironic. I begrudgingly stopped using Neovim in favor of VsCode simply because the ecosystem around it is way more stable and feature-complete.\r\n\r\nThis thread is ridiculous.\r\n\r\nQuite frankly, I don't have the time to dive down into the rabbit holes to learn how to tweak my editor, the configuration for the editor's lsp config, and the configuration for the language server itself.\r\nBut I did so anyway, or at least tried. And I got nowhere, and no help was offered by any of the interested parties.\r\n\r\nBalancing all of these things is difficult enough, and when the maintainers of these different components are all pointing fingers at each other saying \"not my problem\" it leads to a really bad user experience.\r\n\r\nWhile I am sympathetic to the perspectives of the Neovim team here, it is indeed your problem. Sure, Eric Traut has his own opinions, and sure they may be wrong. But there's a relationship. You are expected, as a provider of an interface with the language server, to work with the maintainer such that it provides a workable and good user experience.\r\n\r\nThat is not happening.\r\n\r\nInstead, we have Nvim- core maintainers saying they've implemented the LSP spec to the tee and this issue isn't their problem (this one is fair). Then we have an Lsp-Config maintainer saying the issue was filed in the \"wrong repo\" (which is so unhelpful, and they never answered my question about what _is_ the right repo).\r\nThen, we have the LSP maintainer doubling down and saying that the editor is doing something wrong.\r\n\r\nAs a user, I don't care about any of this. I just want to know what settings or configuration I need to do/have to get the behavior I want. But after 2 years I still have no idea how to actually do this.\r\nIn not one of these issues has someone offered up a configuration solution that will allow us to have our desired behavior.\r\n\r\n> But let's not forget that the central issue here is the pyright's maintainer's refusal to respect common convention about unused values\r\n\r\nWhat is the common convention? (Genuine question).\r\n\r\n> But Neovim core should already provide the tools (with vim.diagnostic.config()) to allow you to implement the behavior you want.\r\n\r\nGreat. Mind pointing out exactly how / where?\r\n\r\n\r\n\r\nFrom a user, I don't want to have my diagnostic list littered with unused variable hints. Hints are not problems. They shouldn't be reported as such.\r\n\r\n> (Keep in mind that other servers are using this diagnostic for actionable diagnostics.)\r\n\r\nAn unused variable *is* an actionable diagnostic. You can remove it, replace it with a bucket, etc...\r\nThe issue is the context.\r\n\r\n\r\nThe UX for hint diagnostics in Neovim is abysmal. It's also not just a pyright thing. I don't know whose responsibility this is, but showing error/warning squiggles for hints, and also having them appear in the main diagnostic list should be revisited.\r\n",
            "created_at": "2024-09-21T06:01:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2365017643",
            "id": 2365017643,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M904r",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365017643/reactions"
            },
            "updated_at": "2024-09-22T04:37:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365017643",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36710691?v=4",
                "events_url": "https://api.github.com/users/bavalpey/events{/privacy}",
                "followers_url": "https://api.github.com/users/bavalpey/followers",
                "following_url": "https://api.github.com/users/bavalpey/following{/other_user}",
                "gists_url": "https://api.github.com/users/bavalpey/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bavalpey",
                "id": 36710691,
                "login": "bavalpey",
                "node_id": "MDQ6VXNlcjM2NzEwNjkx",
                "organizations_url": "https://api.github.com/users/bavalpey/orgs",
                "received_events_url": "https://api.github.com/users/bavalpey/received_events",
                "repos_url": "https://api.github.com/users/bavalpey/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bavalpey/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bavalpey/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bavalpey",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What is the common convention? (Genuine question).\r\n\r\nThat underscore arguments are intentionally unused, and thus should not be reported as a diagnostic. (Which I think is what you mean by \"bucket\"?) This is how many other servers and tooling behave.\r\n\r\n> In not one of these issues has someone offered up a configuration solution that will allow us to have our desired behavior.\r\n\r\nDid you read `:h vim.diagnostic`? \r\n\r\n>> But Neovim core should already provide the tools (with vim.diagnostic.config()) to allow you to implement the behavior you want.\r\n> Great. Mind pointing out exactly how / where?\r\n\r\nHe just did. Neovim has a very extensive internal help system (obviously with room for improvement), and you won't get far without making frequent use of it.\r\n\r\n> You are expected, as a provider of an interface with the language server, to work with the maintainer such that it provides a workable and good user experience.\r\n\r\nNo. That is exactly what we should _not_ have to do; otherwise what's the point of having a protocol in the first place, whose selling point was that it solves the \"N*M problem\" of every editor having to worry about every language server?\r\n",
            "created_at": "2024-09-21T07:47:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2365048119",
            "id": 2365048119,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M98U3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365048119/reactions"
            },
            "updated_at": "2024-09-21T07:50:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365048119",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> As a user, I don't care about any of this. I just want to know what settings or configuration I need to do have to get the behavior I want\r\n\r\nThis is a fair point, and we're working on it but it will take time since it requires someone to really \"own\" the project of upstreaming [parts](https://github.com/neovim/neovim/issues/28329) of https://github.com/neovim/nvim-lspconfig and reorienting nvim-lspconfig to be \"data only\".\r\n\r\nThe general strategy is that the default behavior should be reasonable, while `:help lsp` provides concrete examples of how to tweak things if you just can't live with, for example, \"hints showing up in diagnostics\". Note that special-casing things like pyright actually complicates the story there, in the long term, so that's why we avoid it.\r\n\r\n> Did you read `:h vim.diagnostic`?\r\n\r\nFor posterity, I agree it would be useful to provide a code sample in this thread. E.g., a Lua handler that discards hints based on whether the symbol starts with an underscore, or by checking some other flag in the pyright response.\r\n\r\n",
            "created_at": "2024-09-21T08:34:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2365061291",
            "id": 2365061291,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M9_ir",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365061291/reactions"
            },
            "updated_at": "2024-09-21T08:35:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365061291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> No. That is exactly what we should not have to do; otherwise what's the point of having a protocol in the first place, whose selling point was that it solves the \"N*M problem\" of every editor having to worry about every language server?\r\n\r\nI'm going to push back on this. Yes, some part of the neovim maintainers definitely do have to do this. As soon as Pyright support was added to the Neovim ecosystem, (as in, supported by an official extension that is part of the neovim organization), it became your responsibility.\r\n\r\nI don't know if the \"you\"/\"your\" here should be the maintainers of neovim core, the maintaners of nvim-lspconfig, or some other maintainer.\r\n\r\nWhat makes this worse is Pyright is literally the hello world example for the README in nvim-lspconfig.",
            "created_at": "2024-09-22T02:23:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2365422705",
            "id": 2365422705,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M_Xxx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365422705/reactions"
            },
            "updated_at": "2024-09-22T08:59:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365422705",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36710691?v=4",
                "events_url": "https://api.github.com/users/bavalpey/events{/privacy}",
                "followers_url": "https://api.github.com/users/bavalpey/followers",
                "following_url": "https://api.github.com/users/bavalpey/following{/other_user}",
                "gists_url": "https://api.github.com/users/bavalpey/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bavalpey",
                "id": 36710691,
                "login": "bavalpey",
                "node_id": "MDQ6VXNlcjM2NzEwNjkx",
                "organizations_url": "https://api.github.com/users/bavalpey/orgs",
                "received_events_url": "https://api.github.com/users/bavalpey/received_events",
                "repos_url": "https://api.github.com/users/bavalpey/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bavalpey/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bavalpey/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bavalpey",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Since you are reading the README of nvim-lspconfig, you should have noticed this sentence at the very top of the file:\r\n> These configs are best-effort and supported by the community.",
            "created_at": "2024-09-22T03:19:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2365440105",
            "id": 2365440105,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M_cBp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365440105/reactions"
            },
            "updated_at": "2024-09-22T08:59:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365440105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Since you are reading the README of nvim-lspconfig, you should have noticed this sentence at the very top of the file:\r\n> \r\n> > These configs are best-effort and supported by the community.\r\n\r\nYeah, best effort and by the community. So when we post an issue to see if a fix would be welcome / possible / how to, and a maintainer tells us it's the wrong repo and doesn't answer questions asking which would be the right repo..\r\n\r\nMakes for a great community doesn't it.",
            "created_at": "2024-09-22T04:28:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2365458328",
            "id": 2365458328,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6M_geY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365458328/reactions"
            },
            "updated_at": "2024-09-22T08:59:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2365458328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36710691?v=4",
                "events_url": "https://api.github.com/users/bavalpey/events{/privacy}",
                "followers_url": "https://api.github.com/users/bavalpey/followers",
                "following_url": "https://api.github.com/users/bavalpey/following{/other_user}",
                "gists_url": "https://api.github.com/users/bavalpey/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bavalpey",
                "id": 36710691,
                "login": "bavalpey",
                "node_id": "MDQ6VXNlcjM2NzEwNjkx",
                "organizations_url": "https://api.github.com/users/bavalpey/orgs",
                "received_events_url": "https://api.github.com/users/bavalpey/received_events",
                "repos_url": "https://api.github.com/users/bavalpey/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bavalpey/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bavalpey/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bavalpey",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> a maintainer tells us it's the wrong repo and doesn't answer questions asking which would be the right repo..\r\n\r\nThat particular user is no longer a maintainer. We are responding here, meanwhile.",
            "created_at": "2024-09-22T08:57:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2366183505",
            "id": 2366183505,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6NCRhR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366183505/reactions"
            },
            "updated_at": "2024-09-22T08:57:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366183505",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Regarding pyright, @mfussenegger makes a very clear point [here](https://github.com/microsoft/language-server-protocol/issues/2026#issuecomment-2366328648):\r\n\r\n> Afaik eclipse.jdt.ls and luals also use `DiagnosticTag.Unnecessary` for actionable diagnostic. There are probably others too. Seems to me that pyright is the odd duck here.\r\n> \r\n> I'd also question a bit why there'd need to be a diagnostic at all if something is legitimately/intentionally unused. What'd be the point over a `DiagnosticTag.Unused` over just not emitting any diagnostic? If it isn't actionable it would require lots of special handling on the client side - for what?\r\n> \r\n> > there are scenarios where you end up with unused variables that are still very much necessary. For example, if you're implementing a method signature, you can end up defining parameters that are unused, but still must be be there in order to preserve the arity of the function.\r\n> \r\n> This sounds a bit as a more general ambiguity problem. How is a server supposed to know if something is intentionally unused or not, without some additional hint from the person who wrote the code?\r\n> \r\n> E.g. some languages allow to prefix intentionally unused variables with `_`.\r\n\r\n",
            "created_at": "2024-09-22T09:38:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2366381349",
            "id": 2366381349,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6NDB0l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366381349/reactions"
            },
            "updated_at": "2024-09-22T09:38:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366381349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> E.g. some languages allow to prefix intentionally unused variables with _.\r\n\r\nwhich was brought up with the pyright maintainer in the linked thread, who refused to consider this (for frankly no apparent reason).\r\n\r\nBut no point in dragging all this history up since a while after things cooled down, he relented and added [a setting to disable it](https://github.com/microsoft/pyright/issues/1118#issuecomment-1893295993):\r\n\r\n> Pyright 1.1.347 includes a new language server setting called \"pyright.disableTaggedHints\". If you set this to true, pyright will not emit any \"hint\" diagnostics with tags.\r\n\r\n> If you disable these hints but are still interested in seeing diagnostics for unreferenced symbols, you can enable reportUnusedImport, reportUnusedClass, reportUnusedFunction or reportUnusedVariable. And if you'd like to see diagnostics for deprecated classes or functions, you can enable reportDeprecated.\r\n\r\nSo, ironically, this has now in fact become an issue for nvim-lspconfig, where this setting could be added or at least documented.",
            "created_at": "2024-09-22T09:48:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2366431442",
            "id": 2366431442,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6NDODS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366431442/reactions"
            },
            "updated_at": "2024-09-22T09:49:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366431442",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> nvim-lspconfig, where this setting could be added or at least documented.\r\n\r\nWe certainly should do that. Would have saved a lot of time here to mention that initially.  I'm not going to read 53 different discussions. \r\n\r\nhttps://github.com/neovim/nvim-lspconfig/issues/3314",
            "created_at": "2024-09-22T10:02:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2366507193",
            "id": 2366507193,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6NDgi5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366507193/reactions"
            },
            "updated_at": "2024-09-22T10:08:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366507193",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Instead of configuring anything I just do:\n\n```python\n\ndef foo(arg):\n    del arg # unused # removes diagnostic \n\n    ...\n```\n\nIn python argument names have semantic meaning, so this seems like a good solution to me.",
            "created_at": "2024-09-22T10:04:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2366513295",
            "id": 2366513295,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6NDiCP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366513295/reactions"
            },
            "updated_at": "2024-09-22T10:04:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366513295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Would have saved a lot of time here to mention that initially. I'm not going to read 53 different discussions.\r\n\r\nExcuse me for not subscribing to and memorizing 100+ comment chains on language server repositories; I have a hard enough time keeping up with my main responsibility here (treesitter). I only noticed this now when looking back over the thread to quote the maintainer's original refusal to add support for underscored arguments.",
            "created_at": "2024-09-22T10:17:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2366583886",
            "id": 2366583886,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6NDzRO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366583886/reactions"
            },
            "updated_at": "2024-09-22T10:29:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366583886",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Excuse me for not subscribing to and memorizing 100+ comment chains\r\n\r\nExcuse me for \"dragging all this history\" by linking to a succinct summary.",
            "created_at": "2024-09-22T10:24:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2366621597",
            "id": 2366621597,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6ND8ed",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366621597/reactions"
            },
            "updated_at": "2024-09-22T10:29:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366621597",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Instead of configuring anything I just do:\r\n> \r\n> ```python\r\n> def foo(arg):\r\n>     del arg # unused # removes diagnostic \r\n> \r\n>     ...\r\n> ```\r\n> \r\n> In python argument names have semantic meaning, so this seems like a good solution to me.\r\n\r\nThis doesn't work for lambdas, which is actually where I ran into this issue the most frequently.",
            "created_at": "2024-09-22T14:49:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/30444#issuecomment-2366824262",
            "id": 2366824262,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30444",
            "node_id": "IC_kwDOAPphoM6NEt9G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366824262/reactions"
            },
            "updated_at": "2024-09-22T14:49:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2366824262",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36710691?v=4",
                "events_url": "https://api.github.com/users/bavalpey/events{/privacy}",
                "followers_url": "https://api.github.com/users/bavalpey/followers",
                "following_url": "https://api.github.com/users/bavalpey/following{/other_user}",
                "gists_url": "https://api.github.com/users/bavalpey/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bavalpey",
                "id": 36710691,
                "login": "bavalpey",
                "node_id": "MDQ6VXNlcjM2NzEwNjkx",
                "organizations_url": "https://api.github.com/users/bavalpey/orgs",
                "received_events_url": "https://api.github.com/users/bavalpey/received_events",
                "repos_url": "https://api.github.com/users/bavalpey/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bavalpey/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bavalpey/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bavalpey",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 27,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30444/comments",
    "created_at": "2024-09-20T20:44:52Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30444/events",
    "html_url": "https://github.com/neovim/neovim/issues/30444",
    "id": 2539648497,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30444/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6XX_Xx",
    "number": 30444,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30444/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30444/timeline",
    "title": "LSP: improved core support for \"hint diagnostics\"",
    "updated_at": "2025-01-17T15:34:10Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30444",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
        "events_url": "https://api.github.com/users/jfly/events{/privacy}",
        "followers_url": "https://api.github.com/users/jfly/followers",
        "following_url": "https://api.github.com/users/jfly/following{/other_user}",
        "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jfly",
        "id": 277474,
        "login": "jfly",
        "node_id": "MDQ6VXNlcjI3NzQ3NA==",
        "organizations_url": "https://api.github.com/users/jfly/orgs",
        "received_events_url": "https://api.github.com/users/jfly/received_events",
        "repos_url": "https://api.github.com/users/jfly/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jfly",
        "user_view_type": "public"
    }
}