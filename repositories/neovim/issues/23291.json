{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nNoticed this because I have some huge directories in one of my repos for testing, which probably isn't very common. Excluding files not in the patterns sent by the LSP server could possibly help. Rust-analyzer sends `root_dir/**/*.rs`, `root_dir/**/Cargo.toml`, `root_dir/**/Cargo.lock`.\n\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\n\nsteps:\r\n```sh\r\ncargo new repro --bin && cd repro\r\nmkdir test && printf '%s\\n' test/{0..60000} | xargs touch\r\nnvim -u init.lua src/main.rs\r\n```\r\n\r\ninit.lua:\r\n```lua\r\nlocal pattern = 'rust'\r\nlocal cmd = {'rust-analyzer'}\r\nlocal root_markers = {'Cargo.toml'}\r\nlocal settings = vim.empty_dict()\r\nlocal capabilities = vim.lsp.protocol.make_client_capabilities()\r\n-- uncommenting this solves the stutter\r\n--capabilities.workspace.didChangeWatchedFiles.dynamicRegistration = false\r\nvim.api.nvim_create_autocmd('FileType', {\r\n\tpattern = pattern,\r\n\tcallback = function(args)\r\n\t\tlocal match = vim.fs.find(root_markers, { path = args.file, upward = true })[1]\r\n\t\tlocal root_dir = match and vim.fn.fnamemodify(match, ':p:h') or nil\r\n\t\tvim.lsp.start({\r\n\t\t\tname = 'rust-analyzer',\r\n\t\t\tcmd = cmd,\r\n\t\t\troot_dir = root_dir,\r\n\t\t\tsettings = settings,\r\n\t\t\tcapabilities = capabilities,\r\n\t\t})\r\n\tend\r\n})\r\n```\r\n\n\n### Expected behavior\n\n_No response_\n\n### Neovim version (nvim -v)\n\nNVIM v0.10.0-dev-169+ge3f36377c\n\n### Language server name/version\n\nrust-analyzer 1.69.0 (84c898d 2023-04-16)\n\n### Operating system/version\n\narch linux\n\n### Log file\n\n_No response_",
    "closed_at": null,
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
        "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
        "followers_url": "https://api.github.com/users/mfussenegger/followers",
        "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
        "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mfussenegger",
        "id": 38700,
        "login": "mfussenegger",
        "node_id": "MDQ6VXNlcjM4NzAw",
        "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
        "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
        "repos_url": "https://api.github.com/users/mfussenegger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mfussenegger",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I am also seeing the same issue with ccls server. The code base I work with huge and neovim is stuck for ever. \r\n\r\nAssigning capabilities.workspace.didChangeWatchedFiles.dynamicRegistration to false helped.",
            "created_at": "2023-04-26T09:23:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1523081719",
            "id": 1523081719,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5ayGH3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1523081719/reactions"
            },
            "updated_at": "2023-04-26T13:32:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1523081719",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/22386546?v=4",
                "events_url": "https://api.github.com/users/jbarik/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbarik/followers",
                "following_url": "https://api.github.com/users/jbarik/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbarik/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbarik",
                "id": 22386546,
                "login": "jbarik",
                "node_id": "MDQ6VXNlcjIyMzg2NTQ2",
                "organizations_url": "https://api.github.com/users/jbarik/orgs",
                "received_events_url": "https://api.github.com/users/jbarik/received_events",
                "repos_url": "https://api.github.com/users/jbarik/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbarik/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbarik/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbarik",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I am currently observing similar issues. I was able to track it down to pyright freezing up on startup and afterwards in a somewhat large codebase.\r\nI bisected the issue down to this change https://github.com/neovim/neovim/pull/23190\r\n\r\nThe fix for me was in the LSP setups to do the following:\r\n```lua\r\nlocal lsp = require \"lspconfig\"\r\nlocal coq = require \"coq\"\r\n\r\nlocal coq_capabilities = coq.lsp_ensure_capabilities(vim.lsp.protocol.make_client_capabilities())\r\ncoq_capabilities.capabilities.workspace.didChangeWatchedFiles.dynamicRegistration = false\r\nlsp.pyright.setup(coq_capabilities)\r\n```\r\n\r\nIf you are not using `coq_nvim` then this might work for you:\r\n```lua\r\nlocal lsp = require \"lspconfig\"\r\nlocal coq = require \"coq\"\r\n\r\n\r\nlocal capabilities = vim.lsp.protocol.make_client_capabilities()\r\ncapabilities.workspace.didChangeWatchedFiles.dynamicRegistration = false\r\nlsp.pyright.setup(coq_capabilities)\r\n\r\n```",
            "created_at": "2023-04-26T11:13:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1523243069",
            "id": 1523243069,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5aytg9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1523243069/reactions"
            },
            "updated_at": "2023-04-26T13:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1523243069",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2808092?v=4",
                "events_url": "https://api.github.com/users/vkaracic/events{/privacy}",
                "followers_url": "https://api.github.com/users/vkaracic/followers",
                "following_url": "https://api.github.com/users/vkaracic/following{/other_user}",
                "gists_url": "https://api.github.com/users/vkaracic/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vkaracic",
                "id": 2808092,
                "login": "vkaracic",
                "node_id": "MDQ6VXNlcjI4MDgwOTI=",
                "organizations_url": "https://api.github.com/users/vkaracic/orgs",
                "received_events_url": "https://api.github.com/users/vkaracic/received_events",
                "repos_url": "https://api.github.com/users/vkaracic/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vkaracic/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vkaracic/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vkaracic",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "This seems to be caused by Neovim using polling instead of inotify to monitor requested directories.",
            "created_at": "2023-05-03T13:56:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1533075584",
            "id": 1533075584,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5bYOCA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1533075584/reactions"
            },
            "updated_at": "2023-11-19T10:37:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1533075584",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13090277?v=4",
                "events_url": "https://api.github.com/users/vlada-dudr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vlada-dudr/followers",
                "following_url": "https://api.github.com/users/vlada-dudr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vlada-dudr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vlada-dudr",
                "id": 13090277,
                "login": "vlada-dudr",
                "node_id": "MDQ6VXNlcjEzMDkwMjc3",
                "organizations_url": "https://api.github.com/users/vlada-dudr/orgs",
                "received_events_url": "https://api.github.com/users/vlada-dudr/received_events",
                "repos_url": "https://api.github.com/users/vlada-dudr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vlada-dudr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vlada-dudr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vlada-dudr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think there's always going to be some upper bound on project size where the file watcher will slow things down to the point it's worth disabling entirely. But of course we should make that upper bound as high as we can.\r\n\r\nFor context, the polling mechanism is used for Linux because inotify doesn't watch recursively, and libuv doesn't set up the inotify handles in a way that makes it practical (that I've found) to structure those recursively ourselves. Node.js `fs.watch` also uses libuv polling on Linux for recursive watches. I think the ideal scenario here would involve leveraging a yet-to-exist kernel-level recursive file watcher for Linux like libuv does already for macOS and Windows.\r\n\r\n@lucy You're right that filtering these files out would probably help. Right now all of that filtering is done in the LSP client after the poller is already set up, but some of that could be done earlier and lighten the load on libuv. For your example with a huge directory of files not watched by the LSP it would probably make a decent difference. I'll try that to see.\r\n\r\ncc @mfussenegger ",
            "created_at": "2023-05-06T01:38:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1536968751",
            "id": 1536968751,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5bnEgv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1536968751/reactions"
            },
            "updated_at": "2023-05-06T01:38:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1536968751",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/16093815?v=4",
                "events_url": "https://api.github.com/users/nojnhuh/events{/privacy}",
                "followers_url": "https://api.github.com/users/nojnhuh/followers",
                "following_url": "https://api.github.com/users/nojnhuh/following{/other_user}",
                "gists_url": "https://api.github.com/users/nojnhuh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nojnhuh",
                "id": 16093815,
                "login": "nojnhuh",
                "node_id": "MDQ6VXNlcjE2MDkzODE1",
                "organizations_url": "https://api.github.com/users/nojnhuh/orgs",
                "received_events_url": "https://api.github.com/users/nojnhuh/received_events",
                "repos_url": "https://api.github.com/users/nojnhuh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nojnhuh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nojnhuh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nojnhuh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I can repro with that example and see the same high CPU and stuttering. I threw in a dirty hack to skip creating a poller for all those files the LSP client should ignore anyway and that made things way better. I'll work on a proper fix.",
            "created_at": "2023-05-06T03:22:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1537031285",
            "id": 1537031285,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5bnTx1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537031285/reactions"
            },
            "updated_at": "2023-11-19T10:37:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1537031285",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/16093815?v=4",
                "events_url": "https://api.github.com/users/nojnhuh/events{/privacy}",
                "followers_url": "https://api.github.com/users/nojnhuh/followers",
                "following_url": "https://api.github.com/users/nojnhuh/following{/other_user}",
                "gists_url": "https://api.github.com/users/nojnhuh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nojnhuh",
                "id": 16093815,
                "login": "nojnhuh",
                "node_id": "MDQ6VXNlcjE2MDkzODE1",
                "organizations_url": "https://api.github.com/users/nojnhuh/orgs",
                "received_events_url": "https://api.github.com/users/nojnhuh/received_events",
                "repos_url": "https://api.github.com/users/nojnhuh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nojnhuh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nojnhuh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nojnhuh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> would involve leveraging a yet-to-exist kernel-level recursive file watcher for Linux\r\n\r\nThere is a `fanotify` in recent kernels (most features in 5.1, but some only in 5.9). It can watch for events from the entire filesystem. libuv probably doesn't support it, so it doesn't help here. Maybe it will in the future.",
            "created_at": "2023-05-11T11:38:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1543837963",
            "id": 1543837963,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5cBRkL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543837963/reactions"
            },
            "updated_at": "2023-05-11T11:38:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543837963",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1353637?v=4",
                "events_url": "https://api.github.com/users/stasjok/events{/privacy}",
                "followers_url": "https://api.github.com/users/stasjok/followers",
                "following_url": "https://api.github.com/users/stasjok/following{/other_user}",
                "gists_url": "https://api.github.com/users/stasjok/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stasjok",
                "id": 1353637,
                "login": "stasjok",
                "node_id": "MDQ6VXNlcjEzNTM2Mzc=",
                "organizations_url": "https://api.github.com/users/stasjok/orgs",
                "received_events_url": "https://api.github.com/users/stasjok/received_events",
                "repos_url": "https://api.github.com/users/stasjok/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stasjok/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stasjok/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stasjok",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "It won't help either. You need CAP_SYS_ADMIN to watch filesystem or mountpoint. As regular user you can at most get functionality equivalent to inotify - you still have to recurse all directories and set marks on them manually.",
            "created_at": "2023-05-11T12:40:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1543926029",
            "id": 1543926029,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5cBnEN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 1,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543926029/reactions"
            },
            "updated_at": "2023-11-19T10:37:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1543926029",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13090277?v=4",
                "events_url": "https://api.github.com/users/vlada-dudr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vlada-dudr/followers",
                "following_url": "https://api.github.com/users/vlada-dudr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vlada-dudr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vlada-dudr",
                "id": 13090277,
                "login": "vlada-dudr",
                "node_id": "MDQ6VXNlcjEzMDkwMjc3",
                "organizations_url": "https://api.github.com/users/vlada-dudr/orgs",
                "received_events_url": "https://api.github.com/users/vlada-dudr/received_events",
                "repos_url": "https://api.github.com/users/vlada-dudr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vlada-dudr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vlada-dudr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vlada-dudr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I just spent a few hours trying to figure out why my Neovim was taking up 30-40% of CPU while idle. I ended up finding out that it was caused by this poll watcher.\r\n\r\nFor now I have disabled it in my `init.lua` with:\r\n````lua\r\nrequire('vim.lsp._watchfiles')._watchfunc = function(_, _, _) return true end\r\n````\r\n\r\nHowever,  I'm wondering what I will miss without the watcher. As I understand it, it sends `changed` event to LS when a file is changed. Is this only for changes that happen outside of Neovim, or does it serve another purpose as well?",
            "created_at": "2023-05-24T09:13:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1560742827",
            "id": 1560742827,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5dBwur",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 5,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1560742827/reactions"
            },
            "updated_at": "2023-11-19T10:37:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1560742827",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1702152?v=4",
                "events_url": "https://api.github.com/users/pbogut/events{/privacy}",
                "followers_url": "https://api.github.com/users/pbogut/followers",
                "following_url": "https://api.github.com/users/pbogut/following{/other_user}",
                "gists_url": "https://api.github.com/users/pbogut/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pbogut",
                "id": 1702152,
                "login": "pbogut",
                "node_id": "MDQ6VXNlcjE3MDIxNTI=",
                "organizations_url": "https://api.github.com/users/pbogut/orgs",
                "received_events_url": "https://api.github.com/users/pbogut/received_events",
                "repos_url": "https://api.github.com/users/pbogut/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pbogut/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pbogut/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pbogut",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "You should rather disable the functionality all together. This functionality should basically reduce need for language servers to implement their own means to watch filesystem for changes and instead use editor implementation. So the way you did it your LS will miss any changes made outside of nvim.\n\nMay 24, 2023 11:13:43 Paweł Bogut ***@***.***>:\n\n> \n> I just spent few hours trying to figure out why my Neovim takes 30-40% of CPU while idle and ended up finding out that it is caused by this poll watcher.\n> \n> For now I disabled it in my *init.lua* with a:\n> \n> require('vim.lsp._watchfiles')._watchfunc = function(_, _, _) return true end\n> \n> But I'm wondering, what will I miss without watcher? As I understand it is sending *changed* event to LS when file is changed. Is it only for changes that happen outside Neovim? Or it serves other purpose as well?\n> \n> —\n> Reply to this email directly, view it on GitHub[https://github.com/neovim/neovim/issues/23291#issuecomment-1560742827], or unsubscribe[https://github.com/notifications/unsubscribe-auth/ADD33ZLJAESWSWSPMJ4AQ7DXHXGMNANCNFSM6AAAAAAXISZHDE].\n> You are receiving this because you commented.[Tracking image][https://github.com/notifications/beacon/ADD33ZIJUUZ6CWZ4OSDCK3LXHXGMNA5CNFSM6AAAAAAXISZHDGWGG33NNVSW45C7OR4XAZNMJFZXG5LFINXW23LFNZ2KUY3PNVWWK3TUL5UWJTS5A4F2W.gif]\n> \n",
            "created_at": "2023-05-24T09:58:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1560816223",
            "id": 1560816223,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5dCCpf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1560816223/reactions"
            },
            "updated_at": "2023-11-19T10:37:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1560816223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13090277?v=4",
                "events_url": "https://api.github.com/users/vlada-dudr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vlada-dudr/followers",
                "following_url": "https://api.github.com/users/vlada-dudr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vlada-dudr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vlada-dudr",
                "id": 13090277,
                "login": "vlada-dudr",
                "node_id": "MDQ6VXNlcjEzMDkwMjc3",
                "organizations_url": "https://api.github.com/users/vlada-dudr/orgs",
                "received_events_url": "https://api.github.com/users/vlada-dudr/received_events",
                "repos_url": "https://api.github.com/users/vlada-dudr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vlada-dudr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vlada-dudr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vlada-dudr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Reopening this as we still want to do more performance improvements",
            "created_at": "2023-06-14T13:10:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1591180309",
            "id": 1591180309,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5e13wV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 9,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 9,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1591180309/reactions"
            },
            "updated_at": "2023-06-14T13:10:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1591180309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm having this problem on a large codebase using latest neovim from git, neovim it at 100% CPU. Disabling the watcher gives me back my 0-1% CPU.\r\n\r\nCould this be fixed/improved/workaround with a slower refresh frequency of the pool? Look like it is `2s` now:\r\n\r\n```\r\nlocal default_poll_interval_ms = 2000\r\n```\r\n\r\nCould this be set as a parameter?\r\n\r\nMost of the time, external changes is something I manually trigger by doing a `git checkout` and I usually have some other task to do before going back to the editor. And by the way, my LSP usually take something like a minute or more to react to these file change (the time to validate / index everything again). So I have no problem with a few seconds delay.",
            "created_at": "2023-06-21T07:50:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1600357105",
            "id": 1600357105,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5fY4Lx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1600357105/reactions"
            },
            "updated_at": "2023-06-21T07:58:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1600357105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9705357?v=4",
                "events_url": "https://api.github.com/users/guibou/events{/privacy}",
                "followers_url": "https://api.github.com/users/guibou/followers",
                "following_url": "https://api.github.com/users/guibou/following{/other_user}",
                "gists_url": "https://api.github.com/users/guibou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/guibou",
                "id": 9705357,
                "login": "guibou",
                "node_id": "MDQ6VXNlcjk3MDUzNTc=",
                "organizations_url": "https://api.github.com/users/guibou/orgs",
                "received_events_url": "https://api.github.com/users/guibou/received_events",
                "repos_url": "https://api.github.com/users/guibou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/guibou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/guibou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/guibou",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `local default_poll_interval_ms = 2000` Could this be set as a parameter?\r\n\r\nBefore adding random options we still have [other approaches](https://github.com/neovim/neovim/pull/23500#issuecomment-1586960386) to try.",
            "created_at": "2023-06-21T07:57:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1600369418",
            "id": 1600369418,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5fY7MK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1600369418/reactions"
            },
            "updated_at": "2023-11-19T10:36:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1600369418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Copying comment from https://github.com/neovim/neovim/pull/23500#issuecomment-1632846953:\r\n\r\n---\r\n\r\n[emcrisostomo/fswatch](https://github.com/emcrisostomo/fswatch) might be our best bet. It's a LibUV like library for file watching and uses:\r\n\r\n- inotify on linux\r\n- FSEvents on MacOS\r\n- kqueue on BSD\r\n- Windows' monitor\r\n- Polling on anything else\r\n\r\nWe can either add it as a build dep or make it an optional runtime dep and fallback to our current implementation when it is not available.",
            "created_at": "2023-07-12T16:29:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1632855972",
            "id": 1632855972,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5hU2ek",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1632855972/reactions"
            },
            "updated_at": "2023-07-12T16:30:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1632855972",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> [emcrisostomo/fswatch](https://github.com/emcrisostomo/fswatch) might be our best bet. It's a LibUV like library for file watching and uses:\r\n\r\nAdded to the list at https://github.com/neovim/neovim/issues/1380#issuecomment-546667155 . Facebook's [watchman](https://github.com/facebook/watchman) still seems promising, it's used heavily in production there.",
            "created_at": "2023-07-16T00:08:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1636923114",
            "id": 1636923114,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5hkXbq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636923114/reactions"
            },
            "updated_at": "2023-07-16T00:14:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636923114",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmm, this seems like it's turning into a `g:clipboard` situation, where there could be a choice of backend.\r\n\r\nSo unless we add something like fswatch as a build dep, we may need to add a couple of implementations which are automatically selected at runtime; which is still probably simpler than the lpeg implementation we've already merged.",
            "created_at": "2023-07-19T11:39:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1641924828",
            "id": 1641924828,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5h3cjc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1641924828/reactions"
            },
            "updated_at": "2023-11-19T10:33:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1641924828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yeah. The OS APIs are insufficient, and libuv hasn't yet provided a robust abstraction. But there are decent CLI tools. \r\n\r\nWe could start with a file-watcher abstraction that wraps CLI tools. And eventually we may implement a full-Lua clone of the best CLI tool, then users don't need to install anything. ",
            "created_at": "2023-07-19T13:23:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1642076327",
            "id": 1642076327,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5h4Bin",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1642076327/reactions"
            },
            "updated_at": "2023-11-19T10:34:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1642076327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We should be able to experiment with this without touching core by just overriding `require('vim.lsp._watchfiles')._watchfunc`, and in theory, a prototype plugin could do all this.",
            "created_at": "2023-07-19T13:35:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1642098608",
            "id": 1642098608,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5h4G-w",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1642098608/reactions"
            },
            "updated_at": "2023-11-19T10:36:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1642098608",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've been bitten by this also.\r\n\r\nConfirmed by disabling the watcher as detailed [here](https://github.com/neovim/neovim/issues/23291#issuecomment-1560742827).\r\n\r\nIn earlier debugging I straced one of the spinning `nvim --embed` PIDS and it ws doing a load of futex/epoll all the time...",
            "created_at": "2023-08-16T11:19:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1680419522",
            "id": 1680419522,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5kKSrC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680419522/reactions"
            },
            "updated_at": "2023-11-19T10:31:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1680419522",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4",
                "events_url": "https://api.github.com/users/vext01/events{/privacy}",
                "followers_url": "https://api.github.com/users/vext01/followers",
                "following_url": "https://api.github.com/users/vext01/following{/other_user}",
                "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vext01",
                "id": 604955,
                "login": "vext01",
                "node_id": "MDQ6VXNlcjYwNDk1NQ==",
                "organizations_url": "https://api.github.com/users/vext01/orgs",
                "received_events_url": "https://api.github.com/users/vext01/received_events",
                "repos_url": "https://api.github.com/users/vext01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vext01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vext01",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmmm I seem to be encountering the same issue in a large Rust project. I don't seem to have this issue with TSServer, which makes sense because it implements its own file watcher.\r\n\r\nIs the best workaround still overriding `_watchfunc`?",
            "created_at": "2023-08-21T17:01:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1686707324",
            "id": 1686707324,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5kiRx8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686707324/reactions"
            },
            "updated_at": "2023-11-19T10:31:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686707324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "```\nworkspace = {\n        didChangeWatchedFiles = {\n          dynamicRegistration = false\n        }\n      }\n```\n\nIs the best workaround ",
            "created_at": "2023-08-21T17:03:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1686709265",
            "id": 1686709265,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5kiSQR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686709265/reactions"
            },
            "updated_at": "2024-02-15T19:24:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686709265",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> ```\r\n> workspace = {\r\n>         didChangeWatchedFiles = {\r\n>           dynamicRegistration = false\r\n>         }\r\n>       }\r\n> ```\r\n> \r\n> Is the best workaround\r\n\r\nAnd just to be sure: This should be added to the client's capabilities in my LSP configuration right (together where I set `on_attach` etc)?",
            "created_at": "2023-08-21T17:07:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1686715353",
            "id": 1686715353,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5kiTvZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686715353/reactions"
            },
            "updated_at": "2023-11-19T10:32:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686715353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "See my edit.",
            "created_at": "2023-08-21T17:08:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1686716767",
            "id": 1686716767,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5kiUFf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686716767/reactions"
            },
            "updated_at": "2023-11-19T10:32:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686716767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@lewis6991 thanks a lot! <3",
            "created_at": "2023-08-21T17:25:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1686738520",
            "id": 1686738520,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5kiZZY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686738520/reactions"
            },
            "updated_at": "2023-11-19T10:32:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1686738520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've worked on a crude implementation of `_watchfunc` that uses [fswatch](https://github.com/emcrisostomo/fswatch). Seems to work pretty well from what I can tell:\r\n\r\n```lua\r\nlocal FSWATCH_EVENTS = {\r\n  Created = 1,\r\n  Updated = 2,\r\n  Removed = 3,\r\n  -- Renamed\r\n  OwnerModified = 2,\r\n  AttributeModified = 2,\r\n  MovedFrom = 1,\r\n  MovedTo = 3\r\n  -- IsFile\r\n  -- IsDir\r\n  -- IsSymLink\r\n  -- Link\r\n  -- Overflow\r\n}\r\n\r\n--- @param data string\r\n--- @param opts table\r\n--- @param callback fun(path: string, event: integer)\r\nlocal function fswatch_output_handler(data, opts, callback)\r\n  local d = vim.split(data, '%s+')\r\n  local cpath = d[1]\r\n\r\n  for i = 2, #d do\r\n    if d[i] == 'IsDir' or d[i] == 'IsSymLink' or d[i] == 'PlatformSpecific' then\r\n      return\r\n    end\r\n  end\r\n\r\n  if opts.include_pattern and opts.include_pattern:match(cpath) == nil then\r\n    return\r\n  end\r\n\r\n  if opts.exclude_pattern and opts.exclude_pattern:match(cpath) ~= nil then\r\n    return\r\n  end\r\n\r\n  for i = 2, #d do\r\n    local e = FSWATCH_EVENTS[d[i]]\r\n    if e then\r\n      callback(cpath, e)\r\n    end\r\n  end\r\nend\r\n\r\nlocal function fswatch(path, opts, callback)\r\n  local obj = vim.system({\r\n    'fswatch',\r\n    '--recursive',\r\n    '--event-flags',\r\n    '--exclude', '/.git/',\r\n    path\r\n  }, {\r\n    stdout = function(_, data)\r\n      for line in vim.gsplit(data, '\\n', { plain = true, trimempty = true }) do\r\n        fswatch_output_handler(line, opts, callback)\r\n      end\r\n    end\r\n  })\r\n\r\n  return function()\r\n    obj:kill(2)\r\n  end\r\nend\r\n\r\nif vim.fn.executable('fswatch') == 1 then\r\n  require('vim.lsp._watchfiles')._watchfunc = fswatch\r\nend\r\n```\r\n\r\nI'll use it a while and maybe raise a PR to use it as an optional backend.",
            "created_at": "2023-08-21T21:45:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1687088266",
            "id": 1687088266,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5kjuyK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 7,
                "total_count": 9,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1687088266/reactions"
            },
            "updated_at": "2023-08-22T09:22:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1687088266",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@lewis6991 I'm curious to hear how your experiment with `fswatch` is going :)",
            "created_at": "2023-09-02T01:29:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1703630497",
            "id": 1703630497,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5li1ah",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1703630497/reactions"
            },
            "updated_at": "2023-11-19T10:32:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1703630497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I added it to my config and forgot about it. So it's going well I think. ",
            "created_at": "2023-09-02T06:27:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1703727529",
            "id": 1703727529,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5ljNGp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 9,
                "rocket": 0,
                "total_count": 9,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1703727529/reactions"
            },
            "updated_at": "2023-11-19T10:32:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1703727529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@lewis6991 I tried your snippet and had a lot of exception on `  local d = vim.split(data, '%s+')` about `data` being `null`.\r\n\r\nI added a test and now I have no problem anymore, but `fswatch` does not seem to run for my project (using haskell-language-server), but it runs perfectly for another project (using nil LSP), so that's a huge progress.\r\n\r\nAnd it does not eat my CPU anymore.",
            "created_at": "2023-09-02T11:03:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1703802550",
            "id": 1703802550,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5ljfa2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1703802550/reactions"
            },
            "updated_at": "2023-11-19T10:32:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1703802550",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9705357?v=4",
                "events_url": "https://api.github.com/users/guibou/events{/privacy}",
                "followers_url": "https://api.github.com/users/guibou/followers",
                "following_url": "https://api.github.com/users/guibou/following{/other_user}",
                "gists_url": "https://api.github.com/users/guibou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/guibou",
                "id": 9705357,
                "login": "guibou",
                "node_id": "MDQ6VXNlcjk3MDUzNTc=",
                "organizations_url": "https://api.github.com/users/guibou/orgs",
                "received_events_url": "https://api.github.com/users/guibou/received_events",
                "repos_url": "https://api.github.com/users/guibou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/guibou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/guibou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/guibou",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Side comment: Maybe an option is to add a setting for the max CPU usage the LSP should use, it keeps spiking to 100% and the fan keeps turning on when I type.",
            "created_at": "2023-09-08T09:58:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1711404147",
            "id": 1711404147,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5mAfRz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1711404147/reactions"
            },
            "updated_at": "2023-09-08T10:12:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1711404147",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19764314?v=4",
                "events_url": "https://api.github.com/users/mangelozzi/events{/privacy}",
                "followers_url": "https://api.github.com/users/mangelozzi/followers",
                "following_url": "https://api.github.com/users/mangelozzi/following{/other_user}",
                "gists_url": "https://api.github.com/users/mangelozzi/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mangelozzi",
                "id": 19764314,
                "login": "mangelozzi",
                "node_id": "MDQ6VXNlcjE5NzY0MzE0",
                "organizations_url": "https://api.github.com/users/mangelozzi/orgs",
                "received_events_url": "https://api.github.com/users/mangelozzi/received_events",
                "repos_url": "https://api.github.com/users/mangelozzi/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mangelozzi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mangelozzi/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mangelozzi",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think that is relevant to this ticket which is specifically about Nvim's implementation of `workspace/didChangeWatchedFiles`.\r\n\r\nAnd secondly, this isn't something we could implement. The LSP server will use whatever CPU it wants. We can't influence that.",
            "created_at": "2023-09-08T10:12:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1711422490",
            "id": 1711422490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5mAjwa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1711422490/reactions"
            },
            "updated_at": "2023-09-08T10:12:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1711422490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Likewise, here's a [`watchman`](https://facebook.github.io/watchman/) implementation that seems to be working well for me the past few days:\r\n```lua\r\nlocal watch_type = require(\"vim._watch\").FileChangeType\r\n\r\nlocal function handler(res, callback)\r\n  if not res.files or res.is_fresh_instance then\r\n    return\r\n  end\r\n\r\n  for _, file in ipairs(res.files) do\r\n    local path = res.root .. \"/\" .. file.name\r\n    local change = watch_type.Changed\r\n    if file.new then\r\n      change = watch_type.Created\r\n    end\r\n    if not file.exists then\r\n      change = watch_type.Deleted\r\n    end\r\n    callback(path, change)\r\n  end\r\nend\r\n\r\nfunction watchman(path, opts, callback)\r\n  vim.system({ \"watchman\", \"watch\", path }):wait()\r\n\r\n  local buf = {}\r\n  local sub = vim.system({\r\n    \"watchman\",\r\n    \"-j\",\r\n    \"--server-encoding=json\",\r\n    \"-p\",\r\n  }, {\r\n    stdin = vim.json.encode({\r\n      \"subscribe\",\r\n      path,\r\n      \"nvim:\" .. path,\r\n      {\r\n        expression = { \"anyof\", { \"type\", \"f\" }, { \"type\", \"d\" } },\r\n        fields = { \"name\", \"exists\", \"new\" },\r\n      },\r\n    }),\r\n    stdout = function(_, data)\r\n      if not data then\r\n        return\r\n      end\r\n      for line in vim.gsplit(data, \"\\n\", { plain = true, trimempty = true }) do\r\n        table.insert(buf, line)\r\n        if line == \"}\" then\r\n          local res = vim.json.decode(table.concat(buf))\r\n          handler(res, callback)\r\n          buf = {}\r\n        end\r\n      end\r\n    end,\r\n    text = true,\r\n  })\r\n\r\n  return function()\r\n    sub:kill(\"sigint\")\r\n  end\r\nend\r\n\r\nif vim.fn.executable(\"watchman\") == 1 then\r\n  require(\"vim.lsp._watchfiles\")._watchfunc = watchman\r\nend\r\n```",
            "created_at": "2023-09-09T05:35:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1712422887",
            "id": 1712422887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5mEX_n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 15,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 15,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712422887/reactions"
            },
            "updated_at": "2023-09-09T05:35:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712422887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/16093815?v=4",
                "events_url": "https://api.github.com/users/nojnhuh/events{/privacy}",
                "followers_url": "https://api.github.com/users/nojnhuh/followers",
                "following_url": "https://api.github.com/users/nojnhuh/following{/other_user}",
                "gists_url": "https://api.github.com/users/nojnhuh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nojnhuh",
                "id": 16093815,
                "login": "nojnhuh",
                "node_id": "MDQ6VXNlcjE2MDkzODE1",
                "organizations_url": "https://api.github.com/users/nojnhuh/orgs",
                "received_events_url": "https://api.github.com/users/nojnhuh/received_events",
                "repos_url": "https://api.github.com/users/nojnhuh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nojnhuh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nojnhuh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nojnhuh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Not sure how easy would this be, but perhaps the polling could be done in another thread, such that it doesn't block UI input? The profile I took in #25704 shows this blocking keypresses, which is quite sad/annoying :/",
            "created_at": "2023-10-18T14:14:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1768556752",
            "id": 1768556752,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5pagjQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1768556752/reactions"
            },
            "updated_at": "2023-11-19T10:33:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1768556752",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4",
                "events_url": "https://api.github.com/users/emilio/events{/privacy}",
                "followers_url": "https://api.github.com/users/emilio/followers",
                "following_url": "https://api.github.com/users/emilio/following{/other_user}",
                "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/emilio",
                "id": 1323194,
                "login": "emilio",
                "node_id": "MDQ6VXNlcjEzMjMxOTQ=",
                "organizations_url": "https://api.github.com/users/emilio/orgs",
                "received_events_url": "https://api.github.com/users/emilio/received_events",
                "repos_url": "https://api.github.com/users/emilio/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/emilio/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/emilio",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Another thread won't solve the issue. The watchers are already asynchronous.\n\nThe issue is the sheer amount of file watchers being created. An extra thread will just complicate things even further.",
            "created_at": "2023-10-18T14:16:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1768560242",
            "id": 1768560242,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5pahZy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1768560242/reactions"
            },
            "updated_at": "2023-11-19T10:33:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1768560242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Could some of the people who had performance problems try with https://github.com/neovim/neovim/pull/26108 ?",
            "created_at": "2023-11-19T10:45:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1817816570",
            "id": 1817816570,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5sWa36",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1817816570/reactions"
            },
            "updated_at": "2023-11-19T10:45:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1817816570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Some things we could further improve on:\r\n\r\n- De-duplicate debounce (`_watchfiles` has it's own mechanism)\r\n- Global file-path based watcher de-duplication. (I think currently using two clients would end up having each client register their own watchers)\r\n- Deal with watcher limits (`proc/sys/fs/inotify/max_user_watches`)\r\n- Configuration for excludes? From my testing it looks like there are a lot of folders watched that wouldn't need to be. See https://github.com/search?q=watcherExclude&type=code\r\n\r\n- The `parse` function that converts a glob pattern to a lpeg pattern could probably get moved to some other location. It uses standard glob syntax, nothing specific to LSP:\r\n\r\n```\r\nThe glob pattern to watch relative to the base path. Glob patterns can have the following syntax:\r\n- `*` to match one or more characters in a path segment\r\n- `?` to match on one character in a path segment\r\n- `**` to match any number of path segments, including none\r\n- `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)\r\n- `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\r\n- `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\r\n```\r\n\r\nMaybe it fits into `vim.fs`, or a `vim.glob`?\r\n",
            "created_at": "2023-11-19T14:33:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1817873088",
            "id": 1817873088,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5sWorA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1817873088/reactions"
            },
            "updated_at": "2023-11-19T14:33:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1817873088",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Maybe it fits into `vim.fs`, or a `vim.glob`?\r\n\r\n💯 ",
            "created_at": "2023-11-21T15:53:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1821192278",
            "id": 1821192278,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5sjTBW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1821192278/reactions"
            },
            "updated_at": "2023-11-21T15:53:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1821192278",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Could some of the people who had performance problems try with #26108 ?\r\n\r\nAfter updating to latest neovim nightly (by using ppa http://ppa.launchpad.net/neovim-ppa/unstable/ubuntu - `0.10.0~ubuntu1+git202312032103-988b472d9-c60402a16-d6245ab7f~ubuntu22.04.1`) this still seems to be an issue. Using Ubuntu Jammy with tons of files (In total 90k files ` find -type f | wc -l` Why so many? ~40k git-ignored assets, ~40k build/tmp cache files/log files, node_modules etc.) blocks down the editor completely during first LSP initialization - `workspace/didChangeWatchedFiles` accord. to debug log:\r\n\r\n```\r\n[TRACE][2023-12-04 14:00:40] ...lsp/handlers.lua:636    \"default_handler\"       \"client/registerCapability\"     {  ctx = '{\r\n  client_id = 2,\r\n  method = \"client/registerCapability\"\r\n}',\r\nresult = {\r\n  registrations = { {       \r\n     id = \"7fb42980-7e09-4f60-920e-ecfa867acce6\",        \r\n     method = \"workspace/didChangeWatchedFiles\",        \r\n     registerOptions = {          \r\n        watchers = { {              \r\n           globPattern = \"**/*.{js,cjs,mjs,ts,cts,mts,jsx,tsx,json,vue}\"            \r\n} } } } } } }\r\n[DEBUG][2023-12-04 14:00:50] .../vim/lsp/rpc.lua:380    \"server_request: callback result\"       \r\n  {  result = vim.NIL,  status = true}\r\n``` \r\n\r\n-> takes 10 seconds for us.\r\n\r\nThe ppa version seems to include the git commit from the MR, so that seemed not to solve the problem.\r\n\r\nApplying the workaround of disabling watchfiles removes the 10 second delay after the first file open.\r\nEspecially noticeable with Volar (Vue) and Tailwind LSPs for us.\r\n",
            "created_at": "2023-12-04T13:41:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1838667566",
            "id": 1838667566,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5tl9cu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1838667566/reactions"
            },
            "updated_at": "2023-12-04T13:41:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1838667566",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/147175?v=4",
                "events_url": "https://api.github.com/users/zealot128/events{/privacy}",
                "followers_url": "https://api.github.com/users/zealot128/followers",
                "following_url": "https://api.github.com/users/zealot128/following{/other_user}",
                "gists_url": "https://api.github.com/users/zealot128/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zealot128",
                "id": 147175,
                "login": "zealot128",
                "node_id": "MDQ6VXNlcjE0NzE3NQ==",
                "organizations_url": "https://api.github.com/users/zealot128/orgs",
                "received_events_url": "https://api.github.com/users/zealot128/received_events",
                "repos_url": "https://api.github.com/users/zealot128/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zealot128/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zealot128/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zealot128",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is there a repository somewhere I can check out that is structured like that?",
            "created_at": "2023-12-05T16:34:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1841160753",
            "id": 1841160753,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5tveIx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1841160753/reactions"
            },
            "updated_at": "2023-12-05T16:34:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1841160753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Just for your information, I'm still having painful performances / crashs / \"too many open files\" when using the above watchfile function with haskell-language-server.\r\n\r\nInstead, I wrote this dummy/stupid implementation:\r\n\r\n```lua\r\n-- Completly dummy watchfile\r\nrequire('vim.lsp._watchfiles')._watchfunc = function(path, opts, callback)\r\n  vim.api.nvim_echo({{\"watch_file: \".. path}}, true, {})\r\n  return function()\r\n    vim.api.nvim_echo({{\"watch_file_end:\"..path}}, true, {})\r\n  end\r\nend\r\n```\r\n\r\nThis is actually stupid because it does not watch at all, but it is fast. Note that some LSP (such as haskell-language-server) do have a fallsback mecanism (slow in the case of HLS) when the `didChangeWatchedFiles` is not enabled. So my implementation can be useful when:\r\n\r\n- Having `didChangeWatchedFiles` disabled is painfully slow\r\n- Turning it on kills neovim\r\n\r\nThe drawbacks is that if a file change by an external process (e.g. `git checkout`), the editor will be completely lost. I'm now used to this (I was used to patch HLS in order to make it think that `didChangeWatchedFiles` was supported by neovim, see https://github.com/haskell/haskell-language-server/issues/3458#issuecomment-1400903415",
            "created_at": "2023-12-17T09:23:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1859084129",
            "id": 1859084129,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5uz19h",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1859084129/reactions"
            },
            "updated_at": "2023-12-17T09:45:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1859084129",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9705357?v=4",
                "events_url": "https://api.github.com/users/guibou/events{/privacy}",
                "followers_url": "https://api.github.com/users/guibou/followers",
                "following_url": "https://api.github.com/users/guibou/following{/other_user}",
                "gists_url": "https://api.github.com/users/guibou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/guibou",
                "id": 9705357,
                "login": "guibou",
                "node_id": "MDQ6VXNlcjk3MDUzNTc=",
                "organizations_url": "https://api.github.com/users/guibou/orgs",
                "received_events_url": "https://api.github.com/users/guibou/received_events",
                "repos_url": "https://api.github.com/users/guibou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/guibou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/guibou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/guibou",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Regarding my previous dummy watchfiles implementation, I'm surprised, because in `:messages`, I can see multiples lines (hundreds) such as `/home/guillaume` (which is my home, obviously ;).\r\n\r\nAnd actually, when I'm looking at the root directory reported in `LspInfo`, that' actually my `/home/guillaume`, not the subdirectory `/home/guillaume/foo/bar/baz` in which neovim is started AND which is supposed to be the root of my LSP server.\r\n\r\nSo maybe the problem is somewhere else in my config (or in neovim) and that it tries to watch my home directory (which will indeed be painful...)\r\n\r\n*edit*:\r\n\r\nI removed:\r\n\r\n```lua\r\n    -- root_dir = lspconfig.util.root_pattern(\r\n    --     \"*.cabal\",\r\n    --     \"stack.yaml\",\r\n    --     \"cabal.project\",\r\n    --     -- , \"package.yaml\"\r\n    --     \"hie.yaml\"\r\n    -- ),\r\n```\r\n\r\nfrom my configuration (which is actually close to the default setting for HLS, and my repo is set by a root `hie.yaml`) and now the correct root directory is detected by neovim and it looks like that I don't have any performance issue anymore with the default `watchfunc`.\r\n\r\nSo maybe the problem was actually in my `root_dir` setting. (and yes, watching my home directory for chance was a bit too much.\r\n\r\n*edit*\r\n\r\nOk, that's understood, the behavior of `root_pattern` changed, see https://github.com/neovim/nvim-lspconfig/pull/2885, and now it will prefer a root directory higher in the hierarchy if it matchs a pattern sooner in the list.\r\n\r\nSorry for the noise (but my dummy implementation may still be useful, for example, I'm now checking that the root is not my home and fallsback to dummy if it is my home)\r\n",
            "created_at": "2023-12-17T09:30:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1859085890",
            "id": 1859085890,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5uz2ZC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1859085890/reactions"
            },
            "updated_at": "2023-12-17T09:50:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1859085890",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9705357?v=4",
                "events_url": "https://api.github.com/users/guibou/events{/privacy}",
                "followers_url": "https://api.github.com/users/guibou/followers",
                "following_url": "https://api.github.com/users/guibou/following{/other_user}",
                "gists_url": "https://api.github.com/users/guibou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/guibou",
                "id": 9705357,
                "login": "guibou",
                "node_id": "MDQ6VXNlcjk3MDUzNTc=",
                "organizations_url": "https://api.github.com/users/guibou/orgs",
                "received_events_url": "https://api.github.com/users/guibou/received_events",
                "repos_url": "https://api.github.com/users/guibou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/guibou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/guibou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/guibou",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I finally tried this with #26108 (I was using my own watchfunc before) and the performance on a normal python project with pyright is still pretty awful as startup takes 20-30 seconds, though it is a little better than before.\r\n\r\nSo in the meantime, I'll continue to use my own watchfunc that uses `fswatch` where startup is < 1 second.",
            "created_at": "2024-01-24T10:25:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1907840398",
            "id": 1907840398,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5xt1WO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1907840398/reactions"
            },
            "updated_at": "2024-01-24T14:23:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1907840398",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@lewis6991 Can we just switch over to `fswatch` by now? lua implementation seems to be a deadblock and there's no other way to improve it",
            "created_at": "2024-02-04T15:52:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1925802392",
            "id": 1925802392,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5yyWmY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925802392/reactions"
            },
            "updated_at": "2024-02-04T15:52:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1925802392",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/27911493?v=4",
                "events_url": "https://api.github.com/users/mortezadadgar/events{/privacy}",
                "followers_url": "https://api.github.com/users/mortezadadgar/followers",
                "following_url": "https://api.github.com/users/mortezadadgar/following{/other_user}",
                "gists_url": "https://api.github.com/users/mortezadadgar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mortezadadgar",
                "id": 27911493,
                "login": "mortezadadgar",
                "node_id": "MDQ6VXNlcjI3OTExNDkz",
                "organizations_url": "https://api.github.com/users/mortezadadgar/orgs",
                "received_events_url": "https://api.github.com/users/mortezadadgar/received_events",
                "repos_url": "https://api.github.com/users/mortezadadgar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mortezadadgar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mortezadadgar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mortezadadgar",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the performance on a normal python project with pyright is still pretty awful as startup takes 20-30 seconds, though it is a little better than before.\r\n\r\nIs the performance after the startup okay? How many directories are there in the project? Is it public?\r\nIt would really help if somebody who experiences performance issues could come up with a reproduction. So far the ones mentioned here worked fine for me - no noticable difference between fs-watching on/off\r\n\r\n>  lua implementation seems to be a deadblock and there's no other way to improve it\r\n\r\nThere are still ways to improve it. My last comment even lists some further options: https://github.com/neovim/neovim/issues/23291#issuecomment-1817873088 and that's still incomplete.",
            "created_at": "2024-02-05T18:17:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1927695039",
            "id": 1927695039,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5y5kq_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1927695039/reactions"
            },
            "updated_at": "2024-02-05T18:17:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1927695039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is the performance after the startup okay? How many directories are there in the project? Is it public?\r\nIt would really help if somebody who experiences performance issues could come up with a reproduction. So far the ones mentioned here worked fine for me - no noticable difference between fs-watching on/off\r\n\r\nI didn't look into it much. It was so awful that I didn't think it was worth spending much time debugging it in when I knew the `fswatch` handler I was using was worked very well.\r\n\r\nIf you still want to chase this unicorn then I can try and create a test project, but it's pretty obvious to me that this is a non-trivial problem to solve and LibUV have said themselves they don't intend to solve this. The only reason it works well on Windows and MacOS is because the OS provides these capabilities built-in.",
            "created_at": "2024-02-05T18:48:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1927796687",
            "id": 1927796687,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5y59fP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1927796687/reactions"
            },
            "updated_at": "2024-02-05T18:48:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1927796687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> but it's pretty obvious to me that this is a non-trivial problem to solve and LibUV have said themselves they don't intend to solve this. The only reason it works well on Windows and MacOS is because the OS provides these capabilities built-in.\r\n\r\nFor libuv the problem is a bit different. Based on their stated goal they'd have to abstract away the implementation details and provide a coherent interface across all systems. Our use-case is a bit narrower. That contains makes it not as hard to solve.\r\n\r\n`fswatch` also needs to deal with the system limitations. Either they use https://man7.org/linux/man-pages/man7/fanotify.7.html, or it's not noticable that they do a comparable amount of work because it runs in a background progress. Or we're still doing some extra work we wouldn't have to.\r\n\r\nI'd at least like to know which is the case, and depending on which it is - try to address it.",
            "created_at": "2024-02-05T21:29:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1928127766",
            "id": 1928127766,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5y7OUW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1928127766/reactions"
            },
            "updated_at": "2024-02-05T21:29:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1928127766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Here's a testcase. This even choked up my M1 Pro with `EMFILE` errors. Before it errors out, it looks like upwards of 3000 fs_event objects are being created.\r\n\r\n[changedfilespy.tar.gz](https://github.com/neovim/neovim/files/14177604/changedfilespy.tar.gz)\r\n\r\n- Extract\r\n- `cd changedfilespy`\r\n- `./build_venv.sh`\r\n- `nvim --clean -u init.lua test.py`\r\n\r\n> fswatch also needs to deal with the system limitations. Either they use [man7.org/linux/man-pages/man7/fanotify.7.html](https://man7.org/linux/man-pages/man7/fanotify.7.html), \r\n\r\nThey use `inotify` . They are very upfront about their limitations: https://github.com/emcrisostomo/fswatch?tab=readme-ov-file#limitations\r\n\r\n> or it's not noticable that they do a comparable amount of work because it runs in a background progress. Or we're still doing some extra work we wouldn't have to.\r\n\r\nI checked and this is not the case. After startup it launches a few threads idling at around 4%CPU:\r\n\r\n```\r\n   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\r\n117306 lewrus01  20   0   12312   2856   1912 D   3.7  0.0   0:00.70 fswatch\r\n117308 lewrus01  20   0   12312   2856   1912 D   3.7  0.0   0:00.38 fswatch\r\n117307 lewrus01  20   0   12312   2860   1912 D   3.3  0.0   0:00.38 fswatch\r\n```\r\n\r\nSoon after, they idle at ~0%. And this was running on a VM on an NFS mount (very slow).",
            "created_at": "2024-02-06T09:44:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-1929134544",
            "id": 1929134544,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5y_EHQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1929134544/reactions"
            },
            "updated_at": "2024-02-06T09:54:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1929134544",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This even choked up my M1 Pro with EMFILE errors. Before it errors out, it looks like upwards of 3000 fs_event objects are being created.\r\n\r\nFinally got around to try and reproduce this. \r\nThe loop here:\r\n\r\nhttps://github.com/neovim/neovim/blob/4e5c633ed4871a948aff7338b793ac5f93484153/runtime/lua/vim/_watch.lua#L202-L209\r\n\r\nTakes ~110ms, creating 2677 watchers.  `new_fs_event` is for some reason amplified and called ~5000 times.\r\n\r\nIn another medium sized java project it takes ~243ms to setup 1118 watchers. There the globPatterns are more complex and the additional time spent is due to more expensive include/exclude patterns.\r\n\r\nGranted, this is with a Samsung 980 Pro NVMe disk - so likely more of a best case scenario.\r\nBut these numbers also make me think this isn't that bad, and maybe we could use the coroutine yield/resume pattern used in semantic_tokens `tokens_to_ranges`, to make it less noticable. ",
            "created_at": "2024-05-12T12:58:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2106239003",
            "id": 2106239003,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM59iqgb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106239003/reactions"
            },
            "updated_at": "2024-05-12T12:58:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106239003",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "When I said it choked my M1 Pro, I really meant it brought it to a stop and made Nvim completely unresponsive; much much longer than 100ms.\n\nI don't think smoothing this out over the event loop is going to help at all.\n\nAlso keep in mind this isn't even for a large project. It's barely a medium sized project.\n\nI can get you more precise numbers if you want, on Linux and MacOS.",
            "created_at": "2024-05-12T15:58:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2106299033",
            "id": 2106299033,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM59i5KZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106299033/reactions"
            },
            "updated_at": "2024-05-12T15:58:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106299033",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Just tested on a Raspberry PI 5 with a SD Card:\r\n\r\n```\r\nTook 175.463502ms to setup 1519 watchers for: /path/to/changedfilespy/changedfilespy\r\nTook 262.90266ms to setup 1519 watchers for: /path/to/changedfilespy/changedfilespy\r\nTook 43.547496ms to setup 262 watchers for: /usr/lib/python3.11\r\n```\r\n\r\nNot sure why I'm seeing less watchers here, but what's interesting is that we're setting them up twice due to the payload from the server.\r\nWe can probably de-duplicate that.\r\n\r\n```\r\n registerOptions = {\r\n              watchers = { {\r\n                  globPattern = \"**/pyrightconfig.json\",\r\n                  kind = 7\r\n                }, {\r\n                  globPattern = \"**\",\r\n                  kind = 7\r\n                }, {\r\n                  globPattern = {\r\n                    baseUri = \"file:///usr/lib/python3.11\",\r\n                    pattern = \"**\"\r\n                  },\r\n                  kind = 7\r\n                } }\r\n```\r\n\r\n\r\n> I don't think smoothing this out over the event loop is going to help at all.\r\n\r\nWhy not? It's a one time cost after the server starts up.\r\n\r\nThe only alternative I can think off is offloading it to a thread, but I'm not sure how we can get that to work. I saw there's support for `uv.new_thread`, but afaik it cannot return a table with events handles.\r\nSo we'd have to off-load the entire watcher functionality, and communicate similarly to how the `fswatch` integration works.\r\n\r\n\r\n> When I said it choked my M1 Pro, I really meant it brought it to a stop and made Nvim completely unresponsive; much much longer than 100ms.\r\n\r\nYou mention an NFS mount before, was that with the project being on the NFS mount?\r\n",
            "created_at": "2024-05-12T17:09:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2106317212",
            "id": 2106317212,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM59i9mc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106317212/reactions"
            },
            "updated_at": "2024-05-12T17:09:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106317212",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Why not? It's a one time cost after the server starts up.\n\nBecause from my basic estimations, It can take up to 30 seconds to set up all these watchers....on a small/medium sized project! We've not even considered large projects yet.\n\n> You mention an NFS mount before, was that with the project being on the NFS mount?\n\nNo this was local. Obviously this same project on an NFS mount will be even worse.\n\n> The only alternative I can think off is offloading it to a thread, but I'm not sure how we can get that to work. \n\nI'm not sure there is much we can do. This just seems like a fundamental constraint with Linux. I've even taken a look at how vscode handles it, and they have similar issues, but also have a fully financed team who've been able to implement a more bespoke implementation that makes heavy use of excluding directories and is more graceful when errors occur.\n\nWe could enable it by default, but then disable it as soon as it hits some threshold? Dynamic registration allows for that right? In the fswatch case, this threshold could be as soon as it hits the first error?\n\n> So we'd have to off-load the entire watcher functionality, and communicate similarly to how the fswatch integration works.\n\nYes I agree. I think this is probably worth doing. As we've found, file watching is non-trivial so longer term we shouldn't keep this on the main thread.",
            "created_at": "2024-05-12T17:25:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2106320594",
            "id": 2106320594,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM59i-bS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106320594/reactions"
            },
            "updated_at": "2024-05-12T17:25:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106320594",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Because from my basic estimations, It can take up to 30 seconds to set up all these watchers....\r\n\r\nI'm not sure I see the problem with it taking up to 30 seconds - assuming it is the worst case and as long as it's not noticable?\r\n\r\n> on a small/medium sized project! We've not even considered large projects yet.\r\n\r\nWhat do you consider as large?\r\n\r\nRunning `:lua vim._watch.watchdirs(vim.fn.getcwd(), { include_pattern = vim.glob.to_lpeg(\"**\") }, function() end)` on the torvalds/linux repo I get:\r\n\r\n\r\n```\r\nWalking+filtering took: 141.424901ms. num_files=89893\r\nHandles Took: 23.092436ms. num_dirs=5506\r\n```\r\n\r\nWith the following diff applied:\r\n\r\n```diff\r\ndiff --git a/runtime/lua/vim/_watch.lua b/runtime/lua/vim/_watch.lua\r\nindex 23c810099..c2ee76688 100644\r\n--- a/runtime/lua/vim/_watch.lua\r\n+++ b/runtime/lua/vim/_watch.lua\r\n@@ -197,18 +197,34 @@ function M.watchdirs(path, opts, callback)\r\n \r\n   --- \"640K ought to be enough for anyone\"\r\n   --- Who has folders this deep?\r\n   local max_depth = 100\r\n \r\n+  ---@type string[]\r\n+  local dirs = {}\r\n+  local start = uv.hrtime()\r\n+  local num_files = 0\r\n   for name, type in vim.fs.dir(path, { depth = max_depth }) do\r\n-    local filepath = vim.fs.joinpath(path, name)\r\n-    if type == 'directory' and not skip(filepath, opts) then\r\n-      local handle = assert(uv.new_fs_event())\r\n-      handles[filepath] = handle\r\n-      handle:start(filepath, {}, create_on_change(filepath))\r\n+    num_files = num_files + 1\r\n+    if type == \"directory\" then\r\n+      local filepath = vim.fs.joinpath(path, name)\r\n+      if not skip(filepath, opts) then\r\n+        table.insert(dirs, filepath)\r\n+      end\r\n     end\r\n   end\r\n+  local duration = uv.hrtime() - start\r\n+  vim.print(\"Walking+filtering took: \" .. (duration * 0.000001) .. \"ms. num_files=\" .. tostring(num_files))\r\n+\r\n+  start = uv.hrtime()\r\n+  for _, filepath in ipairs(dirs) do\r\n+    local handle = assert(uv.new_fs_event())\r\n+    handles[filepath] = handle\r\n+    handle:start(filepath, {}, create_on_change(filepath))\r\n+  end\r\n+  duration = uv.hrtime() - start\r\n+  vim.print(\"Handles Took: \" .. (duration * 0.000001) .. \"ms. num_dirs=\" .. tostring(#dirs))\r\n \r\n   local function cancel()\r\n     for fullpath, handle in pairs(handles) do\r\n       if not handle:is_closing() then\r\n         handle:close()\r\n```\r\n\r\n\r\n(And both https://github.com/neovim/neovim/pull/28734 & https://github.com/neovim/neovim/pull/28723)\r\n\r\n> We could enable it by default, but then disable it as soon as it hits some threshold? Dynamic registration allows for that right? In the fswatch case, this threshold could be as soon as it hits the first error?\r\n\r\ndynamic registration allows servers to add or remove capabilities after initialization, but afaik it doesn't allow clients to do that.\r\nThe best we can do is abort and emit a warning.\r\n",
            "created_at": "2024-05-13T16:27:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2108149817",
            "id": 2108149817,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM59p9A5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 1,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2108149817/reactions"
            },
            "updated_at": "2024-05-13T16:27:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2108149817",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "On MacOS local with an M1 Pro, with the above patch and `M._watchfunc = watch.watchdirs` I get:\r\n\r\n```\r\nWalking+filtering took: 976.522708ms. num_files=12380\r\nHandles Took: 274.813083ms. num_dirs=1530\r\nWalking+filtering took: 263.564167ms. num_files=12380\r\nHandles Took: 193.340084ms. num_dirs=1530\r\n```\r\n\r\nHowever, after these messages have printed, Nvim becomes completely non-responsive. After the final print and typing `:qa<cr>`, it takes ~45 seconds for Nvim to finally close. My guess is half of that time is Nvim waiting to process the keypresses, and the other half is what it takes to close out the watchers.\r\n\r\nAnother data point is that Nvim appears to be using 200mb of memory when normally it only takes 30mb-60mb. Not a big deal, but just noting.\r\n\r\nSo setting up the watchers doesn't seem to take a lot of time (as they are non-blocking calls), but it is clearly putting a lot of strain on the event loop.\r\n\r\nI'll run this on the remote Linux VM I use (RHEL + NFS) and report back.",
            "created_at": "2024-05-14T09:09:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2109680943",
            "id": 2109680943,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM59vy0v",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2109680943/reactions"
            },
            "updated_at": "2024-05-14T09:09:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2109680943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> On MacOS local with an M1 Pro\r\n\r\nAm I missing something, but why are you testing it on MacOS where it's not relevant? I also don't see anything like\r\n\r\n> However, after these messages have printed, Nvim becomes completely non-responsive. After the final print and typing `:qa<cr>`, it takes ~45 seconds for Nvim to finally close. My guess is half of that time is Nvim waiting to process the keypresses, and the other half is what it takes to close out the watchers.\r\n\r\nMaybe it's the problem only on MacOS where a different watcher mechanism is used? I don't know watcher code enough, but the only place I see with uvflags is here:\r\n\r\nhttps://github.com/neovim/neovim/blob/2f4792943aa92223fadd472f20449cd13707ff7a/runtime/lua/vim/lsp/_watchfiles.lua#L140-L143\r\n\r\nCan it be that when you are using `M._watchfunc = watch.watchdirs` on MacOS you essentially is setting up recursive watchers of recursive watchers? It can cause troubles if setting up watcher in a child directory is triggering some event on parent. Can it be that your 30 second freeze is caused by that?\r\n\r\nMy stat for nixpkgs repository after drop_caches:\r\n\r\n```\r\nWalking+filtering took: 2594.646696ms. num_files=69195\r\nHandles Took: 124.555428ms. num_dirs=28269\r\n```\r\n`inotify-stat` shows:\r\n\r\n```\r\n       Pid Uid        App                    Watches  Instances\r\n   3652386 1000       nvim                    28,272          1\r\n```\r\n\r\nStill anything blocking for more than 100 ms is not good, so something still has to be done for it to not block for seconds.\r\n\r\nAlso stat for entire nix store:\r\n\r\n```\r\nWalking+filtering took: 123761.444584ms. num_files=3409472                                                   \r\nHandles Took: 4646.437448ms. num_dirs=607223\r\n```\r\n\r\nThat indeed was long. nvim is using 1 GB RAM after that.",
            "created_at": "2024-05-14T11:19:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2109943284",
            "id": 2109943284,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM59wy30",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2109943284/reactions"
            },
            "updated_at": "2024-05-14T11:27:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2109943284",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1353637?v=4",
                "events_url": "https://api.github.com/users/stasjok/events{/privacy}",
                "followers_url": "https://api.github.com/users/stasjok/followers",
                "following_url": "https://api.github.com/users/stasjok/following{/other_user}",
                "gists_url": "https://api.github.com/users/stasjok/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stasjok",
                "id": 1353637,
                "login": "stasjok",
                "node_id": "MDQ6VXNlcjEzNTM2Mzc=",
                "organizations_url": "https://api.github.com/users/stasjok/orgs",
                "received_events_url": "https://api.github.com/users/stasjok/received_events",
                "repos_url": "https://api.github.com/users/stasjok/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stasjok/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stasjok/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stasjok",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Some things we could further improve on:\r\n> \r\n>     * De-duplicate debounce (`_watchfiles` has it's own mechanism)\r\n> \r\n>     * Global file-path based watcher de-duplication. (I think currently using two clients would end up having each client register their own watchers)\r\n> \r\n>     * Deal with watcher limits (`proc/sys/fs/inotify/max_user_watches`)\r\n> \r\n>     * Configuration for excludes? From my testing it looks like there are a lot of folders watched that wouldn't need to be. See https://github.com/search?q=watcherExclude&type=code\r\n\r\nAnother optimization can be for static file paths (no special symbols in pattern). For example nil_ls wants to watch only two files, but neovim is scanning the entire nixpkgs repository (1-2 seconds on my PC), in the end only one watch is set.\r\n\r\n```lua\r\n    capabilities = {\r\n      [\"workspace/didChangeWatchedFiles\"] = { {\r\n          id = \"workspace/didChangeWatchedFiles\",\r\n          method = \"workspace/didChangeWatchedFiles\",\r\n          registerOptions = {\r\n            watchers = { {\r\n                globPattern = \"/nix/store/zyzhqfys86byv201frlpiyipzzw38p02-source/flake.lock\"\r\n              }, {\r\n                globPattern = \"/nix/store/zyzhqfys86byv201frlpiyipzzw38p02-source/flake.nix\"\r\n              } }\r\n          }\r\n        } }\r\n    }\r\n```\r\n\r\nAlso maybe some patterns, like `**` and `**/filename`, can be treated specially, like checking only for excludes during directory walking (need to setup watches on all directories, except excluded like .git). De-duplication is needed for single language server too. For example pyright wants to watch `**/pyrightconfig.json` and `**`. It results in double directory walking.",
            "created_at": "2024-05-15T11:49:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2112320907",
            "id": 2112320907,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM5953WL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2112320907/reactions"
            },
            "updated_at": "2024-05-15T11:52:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2112320907",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1353637?v=4",
                "events_url": "https://api.github.com/users/stasjok/events{/privacy}",
                "followers_url": "https://api.github.com/users/stasjok/followers",
                "following_url": "https://api.github.com/users/stasjok/following{/other_user}",
                "gists_url": "https://api.github.com/users/stasjok/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stasjok",
                "id": 1353637,
                "login": "stasjok",
                "node_id": "MDQ6VXNlcjEzNTM2Mzc=",
                "organizations_url": "https://api.github.com/users/stasjok/orgs",
                "received_events_url": "https://api.github.com/users/stasjok/received_events",
                "repos_url": "https://api.github.com/users/stasjok/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stasjok/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stasjok/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stasjok",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Has anyone else seen a regression on this issue recently?\nMy rust repo has 202 files and I am waiting 5+ minutes for fseventsd on the latest macos, `NVIM v0.10.3`.\nvscode loads the same repo pretty fast, with the same rust-analyzer config.",
            "created_at": "2025-01-10T05:05:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2581772034",
            "id": 2581772034,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM6Z4rcC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581772034/reactions"
            },
            "updated_at": "2025-01-10T20:12:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581772034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29133776?v=4",
                "events_url": "https://api.github.com/users/Avi-D-coder/events{/privacy}",
                "followers_url": "https://api.github.com/users/Avi-D-coder/followers",
                "following_url": "https://api.github.com/users/Avi-D-coder/following{/other_user}",
                "gists_url": "https://api.github.com/users/Avi-D-coder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Avi-D-coder",
                "id": 29133776,
                "login": "Avi-D-coder",
                "node_id": "MDQ6VXNlcjI5MTMzNzc2",
                "organizations_url": "https://api.github.com/users/Avi-D-coder/orgs",
                "received_events_url": "https://api.github.com/users/Avi-D-coder/received_events",
                "repos_url": "https://api.github.com/users/Avi-D-coder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Avi-D-coder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Avi-D-coder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Avi-D-coder",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Has anyone else seen a regression on this issue recently? My rust repo has 202 files and I am waiting 5+ minutes for fseventsd on the latest macos, `NVIM v0.10.3`. vscode loads the same repo pretty fast, with the same rust-analyzer config.\n\ni am having the same issue on an m4 max , nvim 0.10.3, rust-analyzer is stuck on roots scanned and looking the activity monitors shows `fseventsd` on 99.9 % cpu usage`",
            "created_at": "2025-01-10T19:49:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2583842483",
            "id": 2583842483,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM6aAk6z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2583842483/reactions"
            },
            "updated_at": "2025-01-10T20:12:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2583842483",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15184831?v=4",
                "events_url": "https://api.github.com/users/nabeel99/events{/privacy}",
                "followers_url": "https://api.github.com/users/nabeel99/followers",
                "following_url": "https://api.github.com/users/nabeel99/following{/other_user}",
                "gists_url": "https://api.github.com/users/nabeel99/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nabeel99",
                "id": 15184831,
                "login": "nabeel99",
                "node_id": "MDQ6VXNlcjE1MTg0ODMx",
                "organizations_url": "https://api.github.com/users/nabeel99/orgs",
                "received_events_url": "https://api.github.com/users/nabeel99/received_events",
                "repos_url": "https://api.github.com/users/nabeel99/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nabeel99/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nabeel99/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nabeel99",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Do not add comments unless you testing the latest development version. ",
            "created_at": "2025-01-10T20:12:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2583955792",
            "id": 2583955792,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM6aBAlQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2583955792/reactions"
            },
            "updated_at": "2025-01-10T20:12:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2583955792",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Do not add comments unless you testing the latest development version.\n\nI have now switched to neovim nightly the issue remains unchanged fseventsd takes forever on a ~200 file repo using neovim's builtin lsp, but is fast in in vscode.\n\nWorth noting I went though this thread prior to my last comment and tried the suggested workarounds, with minimal improvements observed.  \n\n```\nNVIM v0.11.0-dev-1537+gf4cff3077b\nBuild type: RelWithDebInfo\nLuaJIT 2.1.1734355927\nRun \"nvim -V1 -v\" for more info\n```\n\nEDIT:\n\nI have now tried neovim 0.10.1, I am getting the same behavior.\n```\n❯ ./nvim-macos-arm64/bin/nvim --version \nNVIM v0.10.1\nBuild type: Release\nLuaJIT 2.1.1713484068\nRun \"nvim -V1 -v\" for more info\n```",
            "created_at": "2025-01-13T21:38:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/23291#issuecomment-2588272974",
            "id": 2588272974,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23291",
            "node_id": "IC_kwDOAPphoM6aRelO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2588272974/reactions"
            },
            "updated_at": "2025-01-14T23:28:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2588272974",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29133776?v=4",
                "events_url": "https://api.github.com/users/Avi-D-coder/events{/privacy}",
                "followers_url": "https://api.github.com/users/Avi-D-coder/followers",
                "following_url": "https://api.github.com/users/Avi-D-coder/following{/other_user}",
                "gists_url": "https://api.github.com/users/Avi-D-coder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Avi-D-coder",
                "id": 29133776,
                "login": "Avi-D-coder",
                "node_id": "MDQ6VXNlcjI5MTMzNzc2",
                "organizations_url": "https://api.github.com/users/Avi-D-coder/orgs",
                "received_events_url": "https://api.github.com/users/Avi-D-coder/received_events",
                "repos_url": "https://api.github.com/users/Avi-D-coder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Avi-D-coder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Avi-D-coder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Avi-D-coder",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 57,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23291/comments",
    "created_at": "2023-04-23T15:08:34Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/23291/events",
    "html_url": "https://github.com/neovim/neovim/issues/23291",
    "id": 1680059789,
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/23291/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5kI62N",
    "number": 23291,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 30,
        "-1": 0,
        "confused": 0,
        "eyes": 8,
        "heart": 2,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 40,
        "url": "https://api.github.com/repos/neovim/neovim/issues/23291/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": "reopened",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/23291/timeline",
    "title": "LSP: high cpu usage with huge number of files with `workspace/didChangeWatchedFiles` enabled",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:37:49Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/23291",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1666345?v=4",
        "events_url": "https://api.github.com/users/lucy/events{/privacy}",
        "followers_url": "https://api.github.com/users/lucy/followers",
        "following_url": "https://api.github.com/users/lucy/following{/other_user}",
        "gists_url": "https://api.github.com/users/lucy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lucy",
        "id": 1666345,
        "login": "lucy",
        "node_id": "MDQ6VXNlcjE2NjYzNDU=",
        "organizations_url": "https://api.github.com/users/lucy/orgs",
        "received_events_url": "https://api.github.com/users/lucy/received_events",
        "repos_url": "https://api.github.com/users/lucy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lucy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lucy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lucy",
        "user_view_type": "public"
    }
}