{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nGiven that readfile is marked as \"Wanted\" (❕) in https://github.com/neovim/neovim/issues/18393. I would like to tackle it after some pending clarifications about the intended implementation.\n\n### Questions\n\n- Is vim.fs the appropriate namespace for this? Should it go under vim.file, vim.io, or something else?\n- Is `max = k` lines intended to mirror or something like a maximum bytes feature to replace it?\n\nBinary output: Should the binary = true case return:\n- A single raw Lua string?\n- Or a list of raw byte strings, mirroring the Vimscript function?\n\n\n\n### Expected behavior\n\n`local lines = vim.fs.readfile(\"init.lua\", { max = 10 }) `\n`local blob  = vim.fs.readfile(\"image.png\", { binary = true }) `\n\nMirrors the Vimscript function:\n`readfile({fname} [, {binary}] [, {max}])`\n\nReturns either a list of strings (lines) or a binary string (blob) depending on the options.\n\n",
    "closed_at": "2025-05-07T17:20:56Z",
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Isn't that just\n```lua\nfunction readfile(filename)\n  local file = assert(io.open(filename, 'r'))\n  local r = file:read('*a')\n  file:close()\n  return vim.split(r, '\\n')\nend\n```\nwith some options sprinkled on? (But if we do add it, we also need its `writefile` twin.)",
            "created_at": "2025-05-07T17:06:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/33893#issuecomment-2859381887",
            "id": 2859381887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33893",
            "node_id": "IC_kwDOAPphoM6qbrR_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2859381887/reactions"
            },
            "updated_at": "2025-05-07T17:06:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2859381887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes, both readfile() and writefile() are fairly straightforward to implement in Lua, also for users to define themselves. I opened this because they were still listed as \"Wanted\" in #18393 , but if this kind of utility isn't considered essential for the Lua stdlib, I’m happy to close the issue. Is there any related feature that would be more impactful to implement instead?",
            "created_at": "2025-05-07T17:19:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/33893#issuecomment-2859435416",
            "id": 2859435416,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33893",
            "node_id": "IC_kwDOAPphoM6qb4WY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2859435416/reactions"
            },
            "updated_at": "2025-05-07T17:19:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2859435416",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/160026298?v=4",
                "events_url": "https://api.github.com/users/JTBett/events{/privacy}",
                "followers_url": "https://api.github.com/users/JTBett/followers",
                "following_url": "https://api.github.com/users/JTBett/following{/other_user}",
                "gists_url": "https://api.github.com/users/JTBett/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JTBett",
                "id": 160026298,
                "login": "JTBett",
                "node_id": "U_kgDOCYnOug",
                "organizations_url": "https://api.github.com/users/JTBett/orgs",
                "received_events_url": "https://api.github.com/users/JTBett/received_events",
                "repos_url": "https://api.github.com/users/JTBett/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JTBett/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JTBett/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JTBett",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33893/comments",
    "created_at": "2025-05-07T17:01:41Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33893/events",
    "html_url": "https://github.com/neovim/neovim/issues/33893",
    "id": 3046621875,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33893/labels{/name}",
    "locked": true,
    "milestone": null,
    "node_id": "I_kwDOAPphoM61l8Kz",
    "number": 33893,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33893/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33893/timeline",
    "title": "Lua-native readfile() equivalent",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-05-07T17:20:56Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33893",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/160026298?v=4",
        "events_url": "https://api.github.com/users/JTBett/events{/privacy}",
        "followers_url": "https://api.github.com/users/JTBett/followers",
        "following_url": "https://api.github.com/users/JTBett/following{/other_user}",
        "gists_url": "https://api.github.com/users/JTBett/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/JTBett",
        "id": 160026298,
        "login": "JTBett",
        "node_id": "U_kgDOCYnOug",
        "organizations_url": "https://api.github.com/users/JTBett/orgs",
        "received_events_url": "https://api.github.com/users/JTBett/received_events",
        "repos_url": "https://api.github.com/users/JTBett/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/JTBett/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JTBett/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/JTBett",
        "user_view_type": "public"
    }
}