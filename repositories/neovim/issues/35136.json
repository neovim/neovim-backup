{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\nAfter starting to use extmarks for diagnostic tracking (#34014), there are certain issues:\n- The output of `vim.diagnostic.get()` can return the outdated data about positions. In particular, it returns the original data. This can become even more confusing when combined with the output of `get_next()` / `get_prev()` which use data from extmarks.\n- Setting lines (like with `nvim_buf_set_lines()` virtually acts as if removing diagnostics. Although this *might* be reasonable, this is a breaking behavior / regression which should be documented somehow.\n\nThis indeed started to happen after #34014 (I did bisect to 0a113013fb85).\n\n### Steps to reproduce\n\n1. Create the following 'init-diagnostic-extmarks.lua' file:\n\n    ```lua\n    _G.show = function()\n      local lines = { 'Line 1', 'Line 2' }\n      local ns_id = vim.api.nvim_create_namespace('test-diagnostics')\n      local sev_err = vim.diagnostic.severity.ERROR\n      local diagnostic_arr = {\n        { lnum = 0, col = 0, end_lnum = 0, end_col = 4, message = 'Error 1', severity = sev_err },\n        { lnum = 1, col = 0, end_lnum = 1, end_col = 4, message = 'Error 2', severity = sev_err },\n      }\n\n      vim.api.nvim_buf_set_lines(0, 0, -1, false, lines)\n      vim.diagnostic.set(ns_id, 0, diagnostic_arr)\n\n      -- Setting all lines gets extmarks \"squashed\" in one place\n      vim.api.nvim_buf_set_lines(0, 0, -1, false, lines)\n\n      return { all = vim.diagnostic.get(), next = vim.diagnostic.get_next() }\n    end\n    ```\n2. `nvim --clean -u init-diagnostic-extmarks.lua`.\n3. `:=show()`. This shows the following table (`next` is missing as it is `nil`):\n\n    ```lua\n    {\n      all = { {\n          _extmark_id = 1,\n          bufnr = 1,\n          col = 0,\n          end_col = 4,\n          end_lnum = 0,\n          lnum = 0,\n          message = \"Error 1\",\n          namespace = 2,\n          severity = 1\n        }, {\n          _extmark_id = 2,\n          bufnr = 1,\n          col = 0,\n          end_col = 4,\n          end_lnum = 1,\n          lnum = 1,\n          message = \"Error 2\",\n          namespace = 2,\n          severity = 1\n        } }\n    }\n    ```\n\n### Expected behavior\n\nAll `vim.diagnostic` methods return coherent information (i.e. from the same source).\n\n### Nvim version (nvim -v)\n\nNVIM v0.12.0-dev-918+g1240d29f8f\n\n### Vim (not Nvim) behaves the same?\n\nNo, doesn't have same functionality\n\n### Operating system/version\n\nEndeavourOS 6.15.8-arch1-1\n\n### Terminal name/version\n\nGhostty 1.1.3-arch1\n\n### $TERM environment variable\n\nxterm-ghostty\n\n### Installation\n\nFrom source",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "@faergeek ",
            "created_at": "2025-08-02T20:10:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/35136#issuecomment-3146702093",
            "id": 3146702093,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35136",
            "node_id": "IC_kwDOAPphoM67jt0N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3146702093/reactions"
            },
            "updated_at": "2025-08-02T20:10:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3146702093",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Just to clarify the issue a bit.\n\n>The output of `vim.diagnostic.get()` can return the outdated data about positions. In particular, it returns the original data.\n\nThis was the original behavior prior to #34014 \n\n>This can become even more confusing when combined with the output of `get_next()` / `get_prev()` which use data from extmarks.\n\nThis is changed by #34014. Which is why it's inconsistent with `vim.diagnostic.get` now.\n\n>Setting lines (like with `nvim_buf_set_lines()` virtually acts as if removing diagnostics.\n\nThis is only about `get_next` and `get_prev`.\n\nSorry for the wall of text, but I have 2 options in mind, depending on which way we want to go for consistency and I'm not sure what is the right choice here.\n\nEither way, I'm not sure if position inside a diagnostic item should stay as it was set as it can be [sent back to a language server for code actions](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionContext) or it should be changed to a logical position and a language server is expected to adjust based on document edits done prior to that. I didn't check how that works yet.\n\n#### Option 1\n\nFilter `vim.diagnostic.get()` (and `vim.diagnostic.count()`?) results based on extmark validity. It's `lnum` option should also probably be based on logical positions instead of original.\n\nIt's worth exploring whether we want to keep original positions anywhere at all. And if we don't, maybe getting positions should always be done via extmark and indirectly via a metatable?\n\nThis seems to be a good choice from UI point of view because it will make diagnostic data exactly match what can be seen in UI. Not sure how that will be bad for some use cases.\n\n#### Option 2\n\nTake into account logical (extmark) positions only for `jump` and keep the previous behavior for `get_prev` and `get_next`.\n\nThis will result in inconsistencies between `jump({ count = 1 })` / `get_next` and `jump({ count = -1 })` / `get_prev` respectively. This could be documented as a breaking change, together with adding a flag to `get_prev` and `get_next` to use logical positions instead of original. Though their documentation currently states \"Get the next/previous diagnostic closest to the **cursor position**\" and this might not be true by default then, which is weird.\n\nThis will draw a line between what's seen by API (all original diagnostics with positions as they were set) and what's seen by a user in UI (all diagnostics at their logical positions except those in ranges that were completely removed via `nvim_buf_set_lines` call or just `dd` in normal mode or similar, which is what end user expects to see and be able to interact with).\n\nThis might be good from API point of view if diagnostics are expected to always stay as they are set, which in my opinion is a bit weird expectation if buffer is modifiable.",
            "created_at": "2025-08-03T05:08:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/35136#issuecomment-3146987628",
            "id": 3146987628,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35136",
            "node_id": "IC_kwDOAPphoM67kzhs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3146987628/reactions"
            },
            "updated_at": "2025-08-03T05:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3146987628",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">maybe getting positions should always be done via extmark and indirectly via a metatable?\n\nA correction. This will only work if buffer has been loaded at some point before trying to get a diagnostic position since extmarks can't be set on unloaded buffers, so fallback to original positions would still be necessary.",
            "created_at": "2025-08-03T09:23:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/35136#issuecomment-3148288339",
            "id": 3148288339,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35136",
            "node_id": "IC_kwDOAPphoM67pxFT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148288339/reactions"
            },
            "updated_at": "2025-08-03T09:23:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148288339",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Setting lines (like with `nvim_buf_set_lines()` virtually acts as if removing diagnostics.\n> \n> This is only about `get_next` and `get_prev`.\n\nUnfortunately (or fortunately), there are other side effects. Like removing signs and inline visualization of diagnostics. Which is reasonable if they are intended to disappear, but otherwise - not.\n\nI personally noticed the following problems:\n- From the side of diagnostic source/setter (as not only LSP servers can set diagnostics) it previously was that diagnostics stayed where they were until the next update *from the source*. After #34014 it is not the case anymore as they can change position or be virtually removed completely. This might matter for some internal optimizations when done inside Lua code/plugin.\n \n    So it is at least a breaking change in the overall diagnostic behavior and not a simple `fix()`, which should be documented in at least 'news.txt' and maybe in `vim.diagnostic` somewhere.\n- From the user's side it is *very* confusing that it is possible for `vim.diagnostic.get()` to return non-empty array while there are no visible or navigate-able diagnostics. These should be in sync.\n- From plugin author side, it is extra burden to have to worry about not affecting diagnostics when setting buffer text. But I guess it is the same for any present extmarks and should already be done carefully. It was just that I didn't see this new behavior documented anywhere that caused small issues.",
            "created_at": "2025-08-03T11:37:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/35136#issuecomment-3148363018",
            "id": 3148363018,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35136",
            "node_id": "IC_kwDOAPphoM67qDUK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148363018/reactions"
            },
            "updated_at": "2025-08-03T11:37:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148363018",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">Like removing signs and inline visualization of diagnostics\n\nIf by that you mean diagnostic handlers like signs and underlines, this was happening before #34014 since they were using extmarks long before that. The idea to use extmarks for positions came mostly from that fact. Raw diagnostic positions fall out of sync with extmarks positions from handlers after edits, affecting how `jump` and `open_float` behave, which were using only raw positions previously. Now that `jump` (indirectly) and `open_float` (directly) use extmarks to locate diagnostics they are supposed to behave consistently.\n\n>From the side of diagnostic source/setter (as not only LSP servers can set diagnostics) it previously was that diagnostics stayed where they were until the next update *from the source*.\n\nI implemented that change mainly because I started setting diagnostics from a quickfix list and then I realized that now I need to set them again after every text edit for `jump` and `open_float` to continue to work in a sensible way. Same is going to happen if a language server can't produce diagnostics fast enough.\n\nI think having diagnostics follow a piece of text/range they were attached to is a better default behavior for a user. But if an original position absolutely needs to be preserved for plugins then Option 2 from above should be implemented, keeping in mind that `get_next` and `jump({ count = 1 })` will fall out of sync as a result. Or Option 1 could be implemented with an extra option for `vim.diagnostic.set` to keep the old behavior.\n\n>From the user's side it is *very* confusing that it is possible for `vim.diagnostic.get()` to return non-empty array while there are no visible or navigate-able diagnostics. These should be in sync.\n\nI fully agree, this must be fixed. The main question is which way it must be fixed.\n\n>From plugin author side, it is extra burden to have to worry about not affecting diagnostics when setting buffer text. But I guess it is the same for any present extmarks and should already be done carefully. It was just that I didn't see this new behavior documented anywhere that caused small issues.\n\nFor extmarks `:help nvim_buf_set_text()` already mentions this:\n\n>This is recommended over |nvim_buf_set_lines()| when only modifying parts of\na line, as extmarks will be preserved on non-modified parts of the touched\nlines.\n\nMentioning diagnostics here as well could be a solution probably. And mentioning something similar in `vim.diagnostic.set`.",
            "created_at": "2025-08-03T12:21:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/35136#issuecomment-3148385865",
            "id": 3148385865,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35136",
            "node_id": "IC_kwDOAPphoM67qI5J",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148385865/reactions"
            },
            "updated_at": "2025-08-03T12:21:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148385865",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk what do you think?\n\nShould we break a potential API users' expectation that diagnostics always stay positioned where they were originally set (Option 1)?\n\nOr should `get_prev` and `get_next` fall out of sync with `jump` (Option 2), so `jump` will use logical positions and `get_prev` / `get_next` will not?\n\nOne more possible solution is to add an option to `vim.diagnostic.set` to keep diagnostics either at original positions or at logical positions for all purposes. And depending on a default value it will either be a breaking change (logical) or not (original).",
            "created_at": "2025-08-05T02:27:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/35136#issuecomment-3153056551",
            "id": 3153056551,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35136",
            "node_id": "IC_kwDOAPphoM6779Mn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3153056551/reactions"
            },
            "updated_at": "2025-08-05T02:27:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3153056551",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35136/comments",
    "created_at": "2025-08-02T15:20:46Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35136/events",
    "html_url": "https://github.com/neovim/neovim/issues/35136",
    "id": 3286008817,
    "labels": [
        {
            "color": "f9d0c4",
            "default": false,
            "description": "wrong behavior that was introduced in a previous commit (please bisect)",
            "id": 619474658,
            "name": "bug-regression",
            "node_id": "MDU6TGFiZWw2MTk0NzQ2NTg=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-regression"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "issue has been tracked to a specific commit",
            "id": 1481421490,
            "name": "has:bisected",
            "node_id": "MDU6TGFiZWwxNDgxNDIxNDkw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:bisected"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35136/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM7D3IPx",
    "number": 35136,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35136/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35136/timeline",
    "title": "`vim.diagnostic` methods can return not coherent data after text change",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-08-05T02:27:09Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35136",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}