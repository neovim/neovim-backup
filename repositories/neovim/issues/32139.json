{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "## Background: Evolving Plans for Array/Dict Options\n\nOne of the primary goals of #25672 was to provide a clear path to Array and Dictionary option types. Much of the initial plan has changed. At first, the plan was to add multi-type options, options that would support multiple types, and then add Array/Dict typing to array-like or dict-like string options. A discussion in Matrix chat, where the conclusion was that options should have a single, canonical type, ruled out this approach.\n\nThis decision meant that array-like or dict-like string options have to be converted into Array/Dict options internally. They would be translated to and from strings in interfaces where backwards compatibility is needed. While this approach might work, it introduces a new issues: a lack of sentinel values.\n\n## Challenges with Backwards Compatibility and Sentinel Values\n\nTypically, global-local options have some sort of sentinel value to indicate an unset local value, which indicates to Neovim that the global value should be used instead.\n\nFor number options (like `undolevels`), we use arbitrary values like `123456`, for boolean options (currently only `autoread`), we use `-1`, for string options we use an empty string (`\"\"`).\n\nIt is worth noting that using empty string as a sentinel value for global-local string options leads to its own problem where we can't use a literal empty string as option value for global-local string options such as `winbar`. This manifests itself in issues such as #18660.\n\nIf we add Array/Dict options, this would mean we need a sentinel value for those options as well. An empty array or empty dict may not make much sense in that regard, because it'd mean a literal empty array or empty dict would not be usable as an option value, much like what is currently the case for string options.\n\n## Proposed solution: Redesigning option scopes\n\nWith the option scope redesign proposed in #29314, this would change. Because redesigning option scopes would allow us to instead use a boolean flag for each scope of an option, which would simply indicate if the option value is set at that scope or not. This forgoes the need for sentinel values entirely and solves the issue for both string and future Array/Dict options. However, such a refactor is quite expensive and time-consuming to do, and introduces the risk for some breaking changes.\n\n## Choosing a path forward\n\nThis dilemma brings us to an important crossroads, we could either:\n\n(a) Ignore the scope refactors and just implement Array/Dict options without them while setting some arbitrary sentinel value. This is the fastest way to achieve Array/Dict options but has the highest probability of introducing future baggage in terms of backwards compatibility, as well as a host of other issues relating to not being able to set an Array/Dict option to specific values.\n\n(b) Do the scope refactors (which, once again, is very time-consuming and has the potential for breaking changes) before adding new option types. This ensures that sentinel values are unnecessary and has the best future prospects, but requires a substantial amount of work to be done beforehand.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> If we add Array/Dict options, this would mean we need a sentinel value for those options as well. An empty array or empty dict may not make much sense in that regard, because it'd mean a literal empty array or empty dict would not be usable as an option value, much like what is currently the case for string options.\n\nWhy can't we use `v:null` / `nil`? \n\nIn any case, based on the outline here, the answer is obvious: use sentinel values. ",
            "created_at": "2025-02-05T12:05:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/32139#issuecomment-2636546617",
            "id": 2636546617,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32139",
            "node_id": "IC_kwDOAPphoM6dJoI5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2636546617/reactions"
            },
            "updated_at": "2025-02-05T12:05:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2636546617",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > If we add Array/Dict options, this would mean we need a sentinel value for those options as well. An empty array or empty dict may not make much sense in that regard, because it'd mean a literal empty array or empty dict would not be usable as an option value, much like what is currently the case for string options.\n> \n> Why can't we use `v:null` / `nil`?\n\nBecause those are not `Array` / `Dict` values, and we need an actual value to use for the underlying option variables in C.\n\n> In any case, based on the outline here, the answer is obvious: use sentinel values.\n\nUnderstood\n",
            "created_at": "2025-02-05T12:08:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/32139#issuecomment-2636551761",
            "id": 2636551761,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32139",
            "node_id": "IC_kwDOAPphoM6dJpZR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2636551761/reactions"
            },
            "updated_at": "2025-02-05T12:08:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2636551761",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32139/comments",
    "created_at": "2025-01-21T06:39:27Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32139/events",
    "html_url": "https://github.com/neovim/neovim/issues/32139",
    "id": 2800837437,
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "issue needs attention from an expert, or PR proposes significant changes to architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        },
        {
            "color": "BFDADC",
            "default": false,
            "description": "High-risk, potential for delicate/cascading effects",
            "id": 407247013,
            "name": "complexity:high",
            "node_id": "MDU6TGFiZWw0MDcyNDcwMTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/complexity:high"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "configuration, settings",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32139/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6m8WM9",
    "number": 32139,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32139/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32139/timeline",
    "title": "Roadmap to Array/Dict options",
    "updated_at": "2025-02-05T12:08:05Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32139",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu",
        "user_view_type": "public"
    }
}