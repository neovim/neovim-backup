{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I'm trying to create a Qt Creator plugin that uses Neovim as backend. So far so good, it was super easy thanks to the great api you guys designed. But I have a problem with shortcuts:\r\n\r\nQt Creator has a lot of shortcuts (seriously a lot) so some basic vim keys are overlapped by Qt Creator's shortcut. I can capture a key that's going to activate a Qt Creator shortcut and avoid the bound action to happen and send the keys to Neovim but it'd disable lots of useful shortcuts in Qt Creator like `Cmd+b` for build and lots of others. Currently I'm trying to create mappings in neovim in vim file that runs only for the plugin, these mappings map for example `Cmd+b` to an `rpcnotify` which calls the desired action in Qt Creator, something like this:\r\n\r\n```\r\nnnoremap <c-]> :call rpcnotify(0, 'Gui', 'triggerCommand', 'TextEditor.FollowSymbolUnderCursor')<bar>call rpcnotify(0, 'Gui', 'triggerCommand', 'TextEditor.JumpToFileUnderCursor')<cr>\r\ninoremap <expr> <c-space> rpcnotify(0, 'Gui', 'triggerCommand', 'TextEditor.CompleteThis') ? '' : ''\r\n```\r\n\r\nBut the problem is the list is growing so fast and it's not a good idea at all, not just cause the list is long, but also because this way users of the plugin need to update this file with changes they make in Qt Creator settings. Notice that this list can't be generated automatically cause then again some vim useful maps would get overridden.\r\n\r\nSo I thought it'd be helpful if there were a function in vim like `ismapped(\"<D-B>\")`, then by checking it when a shortcut is pressed I can decide to pass it to Neovim or handle it in Qt Creator. This way I can implement the \"default is Neovim, if Neovim doesn't map it to something then lets see if QtCreator can handle it\" for keys.\r\n\r\nSo I'm suggesting the implementation of this `ismapped` function and I think it'll be useful not just for me for this plugin but many others who are trying to use neovim as a backend for another editor.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "if you can retrieve programmatically QtCreator mappings, you could check them against `:echo nvim_get_keymap(\"a\")`",
            "created_at": "2018-02-20T06:52:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-366883272",
            "id": 366883272,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njg4MzI3Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366883272/reactions"
            },
            "updated_at": "2018-02-20T06:52:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366883272",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Seems like `nvim_get_keymap` doesn't contain internal mappings like `<c-u>` or `gj` or am I missing something?",
            "created_at": "2018-02-20T06:57:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-366884051",
            "id": 366884051,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njg4NDA1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366884051/reactions"
            },
            "updated_at": "2018-02-20T06:57:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366884051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1270688?v=4",
                "events_url": "https://api.github.com/users/sassanh/events{/privacy}",
                "followers_url": "https://api.github.com/users/sassanh/followers",
                "following_url": "https://api.github.com/users/sassanh/following{/other_user}",
                "gists_url": "https://api.github.com/users/sassanh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sassanh",
                "id": 1270688,
                "login": "sassanh",
                "node_id": "MDQ6VXNlcjEyNzA2ODg=",
                "organizations_url": "https://api.github.com/users/sassanh/orgs",
                "received_events_url": "https://api.github.com/users/sassanh/received_events",
                "repos_url": "https://api.github.com/users/sassanh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sassanh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sassanh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sassanh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "some are hardcoded iirc (maybe :h mapping can confirm this) but you can overwrite them with another useless mapping. nvim_get_keymap should help you deal with the bulk of them and you can add some exceptions manually.\r\nCan you  retrieve programmatically QtCreator mapping ?",
            "created_at": "2018-02-20T07:31:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-366889505",
            "id": 366889505,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njg4OTUwNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366889505/reactions"
            },
            "updated_at": "2018-02-20T07:31:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366889505",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I don't like the manual exception list, what if I don't know about a mapping in vim and I don't use it so I don't create an exception for it, but some other user uses it. I want the vim mappings tp be the default and Qt Creator only fill the gaps.\r\nBut if that `ismapped` function doesn't exist yet seems like your suggestion is the best that I can do now.\r\n\r\n> Can you retrieve programmatically QtCreator mapping ?\r\n\r\nYes",
            "created_at": "2018-02-20T07:39:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-366890947",
            "id": 366890947,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njg5MDk0Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366890947/reactions"
            },
            "updated_at": "2023-08-02T19:27:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366890947",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1270688?v=4",
                "events_url": "https://api.github.com/users/sassanh/events{/privacy}",
                "followers_url": "https://api.github.com/users/sassanh/followers",
                "following_url": "https://api.github.com/users/sassanh/following{/other_user}",
                "gists_url": "https://api.github.com/users/sassanh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sassanh",
                "id": 1270688,
                "login": "sassanh",
                "node_id": "MDQ6VXNlcjEyNzA2ODg=",
                "organizations_url": "https://api.github.com/users/sassanh/orgs",
                "received_events_url": "https://api.github.com/users/sassanh/received_events",
                "repos_url": "https://api.github.com/users/sassanh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sassanh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sassanh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sassanh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Seems like nvim_get_keymap doesn't contain internal mappings like `<c-u>` or gj or am I missing something?\r\n\r\nctrl-u and gj are not mappings, they are commands. Future versions of Vim/Nvim can and will implement new commands, so all permutations are reserved for future use.  If you don't care about overriding future built-in commands, then you also shouldn't worry about overriding existing built-in commands.\r\n\r\nIt is good practice to avoid overriding user mappings, but other than that it's a matter of taste.\r\n\r\nMaybe this could be part of the result returned by `nvim_get_commands()` https://github.com/neovim/neovim/issues/7833",
            "created_at": "2018-02-20T09:52:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-366924721",
            "id": 366924721,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjkyNDcyMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366924721/reactions"
            },
            "updated_at": "2018-02-20T10:36:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366924721",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Neovim has something like 100% coverage of shortcuts in normal mode and uses lots of them in insert mode as well, but this coverage applies only to `<C-` shortcuts, `<C-S-`, `<A-` and `<D-` are absent or almost absent by default. If you can list QtCreator shortcuts I would just suggest to create prefixed mapping for all of them and let user decide (by creating another map) if he needs them without prefix. And additionally for specifically `<C-S-`, `<A-` and `<D-` shortcuts just create them if they are not mapped already, *in addition* to prefixed mappings.\r\n\r\nWhat I mean by “prefixed mappings” is for each mapping like `<C-a>` create a mapping `<Leader>q<C-a>` where `<Leader>q` prefix is configurable by user. Additionally since QtCreator probably is not going to have single-character shortcuts (correct me if I am wrong) it may make sense to transform them a bit: change `<C-a>` to `\\qa`, `<C-S-a>` to `\\qA`, `<D-a>` to `\\Qa`.\r\n\r\nNote about prefixed shortcuts: non-prefixed ones are to be created *if* they are not occupied (BTW, when do you want to check this?), prefixed are to be created *always* regardless of whether they are occupied or not. Possible problems are supposed to be resolved by ability to configure prefix of your prefixed shortcuts and ability to configure plugins that took shortcut (if there are any and they have this ability).",
            "created_at": "2018-02-20T09:53:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-366924863",
            "id": 366924863,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjkyNDg2Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366924863/reactions"
            },
            "updated_at": "2018-02-20T09:56:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366924863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk \r\n\r\n> ctrl-u and gj are not mappings, they are commands.\r\n\r\nOK, what I'm suggesting here is it needs to be listed somewhere. Neovim needs to have a build step that extracts all \"commands\" from source code, collects them in a cpp file and provides them in its api.\r\nA Qt Creator plugin can access all Qt Creator's \"commands\"/mappings/actions/shortcuts by calling `Core::ActionManager::commands()`, neovim needs something similar in its api.\r\n\r\n> Future versions of Vim/Nvim can and will implement new commands, so all permutations are reserved for future use. If you don't care about overriding future built-in commands, then you also shouldn't worry about overriding existing built-in commands.\r\n\r\nMy intention (personal preference as a user who uses Neovim as default editor, someone who uses an IDE as default editor may have different preferences) is to always keep Vim's \"commands\" the defaults and whatever IDE is using Neovim as backend just fill the gaps with its own shortcuts. User decides about conflicts in its vimscript configuration file but by default conflicts should resolve to Vim's defaults.\r\n\r\nThe reason is when user switches from his terminal Neovim instance to Qt Creator backed by Neovim to some other IDE he wants a consistent experience (as much as possible) and it ruins the experience if he finds that the plugin that provides vim experience on top of some IDE resolves `j` for example to something other than `move cursor one line down`. To fill the gaps, gaps should be detected, and to do so something like `ismapped` mentioned above is required.\r\n\r\nIf user updates his Neovim in \"future\" and in the new version some new \"commands\" are introduced, I prefer those \"commands\" be treated as defaults and if there's a conflict I'd take the time and handle it.\r\n\r\n> What I mean by “prefixed mappings” is for each mapping like <C-a> create a mapping <Leader>q<C-a> where <Leader>q prefix is configurable by user.\r\n\r\n@ZyX-I I like the idea of prefixed mappings, I'll go with it.\r\n",
            "created_at": "2018-02-20T10:24:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-366933179",
            "id": 366933179,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjkzMzE3OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366933179/reactions"
            },
            "updated_at": "2023-08-02T19:27:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/366933179",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1270688?v=4",
                "events_url": "https://api.github.com/users/sassanh/events{/privacy}",
                "followers_url": "https://api.github.com/users/sassanh/followers",
                "following_url": "https://api.github.com/users/sassanh/following{/other_user}",
                "gists_url": "https://api.github.com/users/sassanh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sassanh",
                "id": 1270688,
                "login": "sassanh",
                "node_id": "MDQ6VXNlcjEyNzA2ODg=",
                "organizations_url": "https://api.github.com/users/sassanh/orgs",
                "received_events_url": "https://api.github.com/users/sassanh/received_events",
                "repos_url": "https://api.github.com/users/sassanh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sassanh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sassanh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sassanh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Based on what I know current code simply does not allow collecting “commands” by anything. It may be a good idea to refactor current state into something like you suggesting (minus *c++*, **that** is not going to happen ever and is very bad idea from the beginning), but currently there is an easy way to add API to list built-in functions, or list built-in commands, or list options, and there is an existing API that lists API functions; typed commands simply need even larger refactoring: while there is an array of normal-mode keys that may start a command there are no lists for characters after `g` or e.g. command-mode commands which are still handled by a huge switch.\r\n\r\nThis also leads to some differences like infinite waiting after user typed `g`, hopefully gone in case of refactoring as I do not really see why that should not be a subject to &timeout* options.",
            "created_at": "2018-02-20T21:24:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-367124575",
            "id": 367124575,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzEyNDU3NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367124575/reactions"
            },
            "updated_at": "2023-08-02T19:26:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367124575",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I Thanks for info. This is a long term plan to refactor code for this purpose. Maybe we can add inline documentation for commands as comments in code too. I wonder why you're against generating C++ code, that's a common pattern in Qt development, it generates cpp from ui files (moc files) qrc files, etc and it did so since Qt 3 as far as I remember. I'm curious to know your reasons.\r\n\r\nMeanwhile till we achieve that, there are 2 ways to provide list of internal commands in api that I can think of:\r\n1. Prepare a custom build of Neovim for a somehow test environment. In this build Neovim signals the test program if it accepts a key sequence. Then the test program runs Neovim, and tries all the 2064639 (127**3 + 127**2 + 127) valid key sequences (I guess there are less than 127 ascii codes used for internal commands, but I assumed 127) and finds out which one is accepted by Neovim, but it should try it in all the different modes (I guess it even needs to try it in different sub mode) so it may be around 20646390 tries. I guess it can be done in few hours to generate the list.\r\n\r\nIn this scenario all is required in Neovim side is to provide a signal whenever it accepts a key sequence as an internal command. I think generally it's good idea to show even the user if Neovim accepts a key sequence. If Neovim just provides the signal, then a client developer can generate his own version list of internal commands for a specific version of Neovim and use it in its code and regularly update it (maybe every 2 months) till the code is refactored in coming years and he can get the list from api.\r\n\r\n2. Second solution is to ask volunteers who are willing to help to extract a list of internal commands based on source and keep it up to date. I think it doesn't work :D",
            "created_at": "2018-02-21T06:16:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-367224975",
            "id": 367224975,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzIyNDk3NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367224975/reactions"
            },
            "updated_at": "2023-08-02T19:25:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367224975",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1270688?v=4",
                "events_url": "https://api.github.com/users/sassanh/events{/privacy}",
                "followers_url": "https://api.github.com/users/sassanh/followers",
                "following_url": "https://api.github.com/users/sassanh/following{/other_user}",
                "gists_url": "https://api.github.com/users/sassanh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sassanh",
                "id": 1270688,
                "login": "sassanh",
                "node_id": "MDQ6VXNlcjEyNzA2ODg=",
                "organizations_url": "https://api.github.com/users/sassanh/orgs",
                "received_events_url": "https://api.github.com/users/sassanh/received_events",
                "repos_url": "https://api.github.com/users/sassanh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sassanh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sassanh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sassanh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@sassanh Because generating C++ code may only help C++ developers and nobody else, in addition to the fact that it is compile-time variant for the possible users. If you want to do something strange like this *yourself in your project* - sure, why not, otherwise it is only logical to create a msgpack blob exposed via API function like it is currently done for API functions list and expect Neovim users to fetch this blob at runtime.\r\n\r\nAbout bruteforcing acceptance: a bunch of select modes and various flavours of insert mode accept *any* sequence: if there is built-in command or mapping it will be run, if there is no typed combination will be inserted, in Neovim normally in `<notation>`. Also it is completely possible that plugins just use `getchar()` and “accept” just any input as well (though by just discarding some characters): if I am not mistaking, plugins like CtrlP use this variant to get user input.",
            "created_at": "2018-02-21T06:33:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-367227654",
            "id": 367227654,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzIyNzY1NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367227654/reactions"
            },
            "updated_at": "2018-02-21T06:33:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367227654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I This is a misunderstanding I guess. I didn't meant a c++ file to be used by client developers, I meant a C++ file that compiles with neovim and feeds its api code. So that Neovim can use it to provide list of commands in its api.\r\n\r\n> About bruteforcing\r\n\r\nIt's a temporary solutions for some clients (not neovim plugins like CtrlP) but brute-force doesn't work because `dtk` is accepted in a lien that has `k` but not accepted in a line that doesn't have `k`.\r\n\r\nI wanna advance the idea one level, if Neovim can signal in its api if it accepted a key sequence or not client can use this feedback and there's no need to brute-force at all. Consider this:\r\n\r\nFirst column is user input, provided to neovim via `api2()->nvim_input`, second column is neovim response to `api2()->nvim_input`, it's on a line like this `Lets m<cursor>ake it work`\r\n\r\n```\r\nd       Wait                    client waits\r\nt       Wait                    client waits\r\nv       Not Accepted            client feeds \"dtv\" to Qt Creator for example so that it maybe consumes it\r\nd       Wait                    client waits\r\nt       Wait                    client waits\r\nk       Accepted                client ignores \"dtk\" as Neovim consumed it\r\nd       Wait                    client waits\r\nt       Wait                    client waits\r\n-       Timed out               client doesn't provide a key but \"dt\" times out and Neovim sends a notification of \"sequence-timed-out\"\r\n```",
            "created_at": "2018-02-21T06:51:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-367230393",
            "id": 367230393,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzIzMDM5Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367230393/reactions"
            },
            "updated_at": "2018-02-21T06:51:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367230393",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1270688?v=4",
                "events_url": "https://api.github.com/users/sassanh/events{/privacy}",
                "followers_url": "https://api.github.com/users/sassanh/followers",
                "following_url": "https://api.github.com/users/sassanh/following{/other_user}",
                "gists_url": "https://api.github.com/users/sassanh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sassanh",
                "id": 1270688,
                "login": "sassanh",
                "node_id": "MDQ6VXNlcjEyNzA2ODg=",
                "organizations_url": "https://api.github.com/users/sassanh/orgs",
                "received_events_url": "https://api.github.com/users/sassanh/received_events",
                "repos_url": "https://api.github.com/users/sassanh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sassanh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sassanh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sassanh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@sassanh There is an issue regarding why Neovim is not going to use C++: #153.\r\n\r\nThe idea of reporting back states is not feasible without refactoring as well: first, mappings, feedkeys(), `:normal` all use the same facility, but you need responses only to characters coming from certain sources; second, there are no facilities to report back whether character was “consumed” (though Neovim beeps if it was not).",
            "created_at": "2018-02-21T07:09:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-367233290",
            "id": 367233290,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzIzMzI5MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367233290/reactions"
            },
            "updated_at": "2018-02-21T07:09:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367233290",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> There is an issue regarding why Neovim is not going to use C++\r\n\r\nI always thought Neovim is written in C++! Please replace `C++` with `C` in my comments.\r\n\r\n> The idea of reporting back states is not feasible without refactoring as well\r\n\r\nI see, so lets keep it for future. Thanks.",
            "created_at": "2018-02-21T07:26:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-367236326",
            "id": 367236326,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzIzNjMyNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367236326/reactions"
            },
            "updated_at": "2018-07-01T13:08:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/367236326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1270688?v=4",
                "events_url": "https://api.github.com/users/sassanh/events{/privacy}",
                "followers_url": "https://api.github.com/users/sassanh/followers",
                "following_url": "https://api.github.com/users/sassanh/following{/other_user}",
                "gists_url": "https://api.github.com/users/sassanh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sassanh",
                "id": 1270688,
                "login": "sassanh",
                "node_id": "MDQ6VXNlcjEyNzA2ODg=",
                "organizations_url": "https://api.github.com/users/sassanh/orgs",
                "received_events_url": "https://api.github.com/users/sassanh/received_events",
                "repos_url": "https://api.github.com/users/sassanh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sassanh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sassanh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sassanh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Plan\n\nApproach discussed in https://github.com/neovim/neovim/pull/19235#issuecomment-1175117406 : \n\n- ~~`nvim_get_commands({builtin=true})` can read `$VIMRUNTIME/.../ex_cmds.lua` to discover builtin commands~~\n- ~~move `ex_cmds.lua` to the runtime~~ \n- move `nv_cmd` C structure to `normal.lua`: https://github.com/neovim/neovim/pull/26914\n- Generate docstring annotations: https://github.com/neovim/neovim/issues/19918\n    - `_meta/vimcmd.lua`\n    - `_meta/vimnormal.lua` \n",
            "created_at": "2022-07-05T14:44:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/8029#issuecomment-1175146743",
            "id": 1175146743,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8029",
            "node_id": "IC_kwDOAPphoM5GC1D3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1175146743/reactions"
            },
            "updated_at": "2024-10-11T10:01:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1175146743",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/8029/comments",
    "created_at": "2018-02-20T06:44:54Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/8029/events",
    "html_url": "https://github.com/neovim/neovim/issues/8029",
    "id": 298487561,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "BFDADC",
            "default": false,
            "description": "High-risk, potential for delicate/cascading effects",
            "id": 407247013,
            "name": "complexity:high",
            "node_id": "MDU6TGFiZWw0MDcyNDcwMTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/complexity:high"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4457150369,
            "name": "architecture",
            "node_id": "LA_kwDOAPphoM8AAAABCaq3oQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/architecture"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/8029/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWUyOTg0ODc1NjE=",
    "number": 8029,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/8029/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/8029/timeline",
    "title": "API: list builtin (normal-mode) commands",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:57:36Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/8029",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1270688?v=4",
        "events_url": "https://api.github.com/users/sassanh/events{/privacy}",
        "followers_url": "https://api.github.com/users/sassanh/followers",
        "following_url": "https://api.github.com/users/sassanh/following{/other_user}",
        "gists_url": "https://api.github.com/users/sassanh/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/sassanh",
        "id": 1270688,
        "login": "sassanh",
        "node_id": "MDQ6VXNlcjEyNzA2ODg=",
        "organizations_url": "https://api.github.com/users/sassanh/orgs",
        "received_events_url": "https://api.github.com/users/sassanh/received_events",
        "repos_url": "https://api.github.com/users/sassanh/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/sassanh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sassanh/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/sassanh",
        "user_view_type": "public"
    }
}