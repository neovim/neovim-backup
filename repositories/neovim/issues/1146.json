{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "The use of `x` functions inhibits compiler optimizations by hiding the implementation in isolated compilation units. For example, the compiler can theoretically turn\r\n\r\n``` c\r\nstrcpy(dst, a);\r\nstrcat(dst, b);\r\nstrcat(dst, c);\r\n```\r\n\r\ninto\r\n\r\n``` c\r\nstrcpy(stpcpy(stpcpy(dest, a), b) c);\r\n```\r\n\r\nbut not if `xstpcpy` (as we use) has external linkage. The result is that `strlen` must be called on `dst` for every `cat`. Attributes help, but not in this specific instance.\r\n\r\nThere has been some prior discussion on this:\r\n\r\n@aktau said (https://github.com/neovim/neovim/pull/1134#issuecomment-54714027)\r\n\r\n> we should try to define stpcpy on platforms where it doesn't exist, and use the platfrom-supplied stpcpy if possible. It's faster and the compiler knows what these functions do (same for mempcpy, for example).\r\n> \r\n> One \"way\" of doing that would be:\r\n> \r\n> ``` c\r\n> #ifndef HAVE_STPCPY\r\n> char *stpcpy(...)\r\n> {\r\n>   // ...\r\n> }\r\n> #endif\r\n> ```\r\n\r\n@ZyX-I said (https://github.com/neovim/neovim/pull/1134#issuecomment-54724403)\r\n\r\n> > But I'm not sure how this would interact with the automatic declarations generator, if at all. Any reason to believe changes are necessary, @ZyX-I?\r\n> \r\n> For a number of reasons (one of them is that I use lots of macros for defining functions) declarations generator is run on a preprocessed file, so it is fine as long as HAVE_STPCPY is defined either with -D argument known by cmake at the makefile generation stage or in some included file.\r\n> \r\n> AFAIR we already have some config.h file generated by cmake, that includes some similar things. Just listing the possibilities: generated Makefile will embed all globally enabled -D definitions known to CMake (except for INCLUDE_GENERATED_DECLARATIONS), as well as -I arguments so that preprocessor works, thus both locations are fine; even though I have strong opinion about where it will actually land without my advice.\r\n\r\nObviously this does not apply to the `xmalloc` family, nor `xmemdup(z)`, but it does to `stp(n)cpy`, `strlcpy`, `strlcat`, and at least one function I'd like to add to `memory.c`, `strchrnul` (https://github.com/splinterofchaos/neovim/commit/9a2cd2e4a417c2f52023d31eba792ceab656d2bd). In some cases, when `BACKSLASH_IN_FILENAME` is not defined, we could use [`strcasecmp`](http://linux.die.net/man/3/strcasecmp). \r\n\r\nGlibc actually ships with BSD functions, even on linux. For example, to get access to `strchrnul` requires this:\r\n\r\n``` c\r\n#define __USE_GNU\r\n#include <string.h>\r\n#undef __USE_GNU\r\n```\r\n\r\nSo, the question is: How could we modify the build system to detect these functions and how do we modify the source to take advantage of them, and is it worth the trouble?\r\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "@splinterofchaos FWIW, you can do something like this in `config/CMakeLists.txt` to create a `HAVE_STPCPY` define:\n\n``` diff\ndiff --git a/config/CMakeLists.txt b/config/CMakeLists.txt\nindex c488875..f0afcd6 100644\n--- a/config/CMakeLists.txt\n+++ b/config/CMakeLists.txt\n@@ -67,6 +67,17 @@ check_function_exists(setpgid HAVE_SETPGID)\n check_function_exists(setsid HAVE_SETSID)\n check_function_exists(sigaction HAVE_SIGACTION)\n check_function_exists(sigvec HAVE_SIGVEC)\n+\n+check_c_source_compiles(\"\n+#include <string.h>\n+\n+int main(int argc, char** argv) {\n+  char src[10] = \\\"hello\\\";\n+  char dst[10];\n+\n+  stpcpy(dst, src);\n+}\" HAVE_STPCPY)\n+\n check_function_exists(strcasecmp HAVE_STRCASECMP)\n check_function_exists(strncasecmp HAVE_STRNCASECMP)\n check_function_exists(utime HAVE_UTIME)\ndiff --git a/config/config.h.in b/config/config.h.in\nindex 7a04837..57a242d 100644\n--- a/config/config.h.in\n+++ b/config/config.h.in\n@@ -49,6 +49,7 @@\n #cmakedefine HAVE_SETSID\n #cmakedefine HAVE_SIGACTION\n #cmakedefine HAVE_SIGVEC\n+#cmakedefine HAVE_STPCPY\n #cmakedefine HAVE_STRCASECMP\n #cmakedefine HAVE_STRINGS_H\n #cmakedefine HAVE_STRNCASECMP\n```\n\nIf it gets too onerous, we might want to define the checks in a separate file and include it.  But, for just a few, I think something like the above would be fine.  We could then define `xstpcpy` as `stpcpy` in `memory.h` and skip the declaration, and then conditionalize the definition in `memory.c`.  It's a bit of work though, and I'm not sure about the real gain you're going to get from it.\n\nFor the second part, it's not actually `__USE_GNU` that you want, it's `_GNU_SOURCE` (see `man 3 strchrnul`).  My only concern is that somehow _GNU_SOURCE is getting defined project-wide and we start introducing Linux or _GNU_SOURCE-only mechanisms without properly providing alternate support on other platforms.  Since Travis CI can only really help us with Linux testing right now, we don't have a way of verifying that we haven't introduced a problem before merging.  I'd hate to define `_GNU_SOURCE` just before the include and undo it right after, because when folks start using Neovim as a library it could really mess their build up.  I'm sure there's a way to work around it, but again, I'm not sure it's worth the gain.\n",
            "created_at": "2014-11-09T10:56:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/1146#issuecomment-62299210",
            "id": 62299210,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1146",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjk5MjEw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62299210/reactions"
            },
            "updated_at": "2014-11-09T10:56:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62299210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/448087?v=4",
                "events_url": "https://api.github.com/users/jszakmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/jszakmeister/followers",
                "following_url": "https://api.github.com/users/jszakmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/jszakmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jszakmeister",
                "id": 448087,
                "login": "jszakmeister",
                "node_id": "MDQ6VXNlcjQ0ODA4Nw==",
                "organizations_url": "https://api.github.com/users/jszakmeister/orgs",
                "received_events_url": "https://api.github.com/users/jszakmeister/received_events",
                "repos_url": "https://api.github.com/users/jszakmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jszakmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jszakmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jszakmeister",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/1146/comments",
    "created_at": "2014-09-07T16:14:37Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/1146/events",
    "html_url": "https://github.com/neovim/neovim/issues/1146",
    "id": 42145523,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "building and installing Neovim using the provided scripts",
            "id": 84723321,
            "name": "build",
            "node_id": "MDU6TGFiZWw4NDcyMzMyMQ==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/build"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/1146/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0MjE0NTUyMw==",
    "number": 1146,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/1146/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/1146/timeline",
    "title": "Use standard `x` functions on platforms that support them. (strlcpy/stpcpy/etc)",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T09:00:01Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/1146",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
        "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
        "followers_url": "https://api.github.com/users/splinterofchaos/followers",
        "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
        "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/splinterofchaos",
        "id": 38515,
        "login": "splinterofchaos",
        "node_id": "MDQ6VXNlcjM4NTE1",
        "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
        "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
        "repos_url": "https://api.github.com/users/splinterofchaos/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/splinterofchaos",
        "user_view_type": "public"
    }
}