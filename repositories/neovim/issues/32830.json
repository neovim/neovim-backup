{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "# \"Failed to parse snippet\"\n\n**Version System:**\n\n```bash\n❯ lua -v\nLua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio\n```\n\n```bash\n❯ nvim -v\nNVIM v0.10.4\nBuild type: Release\nLuaJIT 2.1.1736781742\nRun \"nvim -V1 -v\" for more info\n```\n\nError Description:\n\nWhen attempting to use a foreach snippet in PHP within Neovim with LazyVim, the error “Failed to parse snippet” appears. The error message references vim/lsp/_snippet_grammar.lua, suggesting a problem with the snippet syntax.\n\n![Image](https://github.com/user-attachments/assets/331959b6-bef0-4e68-aa18-9a7997d6b0ad)\n\n![Image](https://github.com/user-attachments/assets/ebd120c8-d053-4923-ab6b-cc4098e9deaf)\n\n* Possible causes: Escaping problem in the snippet variables.\n\n* Steps to reproduce the error: Attempting to expand a foreach snippet in a PHP file.\n\nThe error seems to be related to the snippet grammar and refers to the file: `/home/linuxbrew/.linuxbrew/Cellar/neovim/0.10.4_1/share/nvim/runtime/lua/vim/lsp/_snippet_grammar.lua`\n\n```bash\ncat /home/linuxbrew/.linuxbrew/Cellar/neovim/0.10.4_1/share/nvim/runtime/lua/vim/lsp/_snippet_grammar.lua\n```\n```lua\n--- Grammar for LSP snippets, based on https://microsoft.github.io/language-server-protocol/specification/#snippet_syntax\n\nlocal lpeg = vim.lpeg\nlocal P, S, R, V = lpeg.P, lpeg.S, lpeg.R, lpeg.V\nlocal C, Cg, Ct = lpeg.C, lpeg.Cg, lpeg.Ct\n\nlocal M = {}\n\nlocal alpha = R('az', 'AZ')\nlocal backslash = P('\\\\')\nlocal colon = P(':')\nlocal dollar = P('$')\nlocal int = R('09') ^ 1\nlocal l_brace, r_brace = P('{'), P('}')\nlocal pipe = P('|')\nlocal slash = P('/')\nlocal underscore = P('_')\nlocal var = Cg((underscore + alpha) * ((underscore + alpha + int) ^ 0), 'name')\nlocal format_capture = Cg(int / tonumber, 'capture')\nlocal format_modifier = Cg(P('upcase') + P('downcase') + P('capitalize'), 'modifier')\nlocal tabstop = Cg(int / tonumber, 'tabstop')\n\n-- These characters are always escapable in text nodes no matter the context.\nlocal escapable = '$}\\\\'\n\n--- Returns a function that unescapes occurrences of \"special\" characters.\n---\n--- @param special? string\n--- @return fun(match: string): string\nlocal function escape_text(special)\n  special = special or escapable\n  return function(match)\n    local escaped = match:gsub('\\\\(.)', function(c)\n      return special:find(c) and c or '\\\\' .. c\n    end)\n    return escaped\n  end\nend\n\n--- Returns a pattern for text nodes. Will match characters in `escape` when preceded by a backslash,\n--- and will stop with characters in `stop_with`.\n---\n--- @param escape string\n--- @param stop_with? string\n--- @return vim.lpeg.Pattern\nlocal function text(escape, stop_with)\n  stop_with = stop_with or escape\n  return (backslash * S(escape)) + (P(1) - S(stop_with))\nend\n\n-- For text nodes inside curly braces. It stops parsing when reaching an escapable character.\nlocal braced_text = (text(escapable) ^ 0) / escape_text()\n\n-- Within choice nodes, \\ also escapes comma and pipe characters.\nlocal choice_text = C(text(escapable .. ',|') ^ 1) / escape_text(escapable .. ',|')\n\n-- Within format nodes, make sure we stop at /\nlocal format_text = C(text(escapable, escapable .. '/') ^ 1) / escape_text()\n\nlocal if_text, else_text = Cg(braced_text, 'if_text'), Cg(braced_text, 'else_text')\n\n-- Within ternary condition format nodes, make sure we stop at :\nlocal if_till_colon_text = Cg(C(text(escapable, escapable .. ':') ^ 1) / escape_text(), 'if_text')\n\n-- Matches the string inside //, allowing escaping of the closing slash.\nlocal regex = Cg(text('/') ^ 1, 'regex')\n\n-- Regex constructor flags (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp#parameters).\nlocal options = Cg(S('dgimsuvy') ^ 0, 'options')\n\n--- @enum vim.snippet.Type\nlocal Type = {\n  Tabstop = 1,\n  Placeholder = 2,\n  Choice = 3,\n  Variable = 4,\n  Format = 5,\n  Text = 6,\n  Snippet = 7,\n}\nM.NodeType = Type\n\n--- @class vim.snippet.Node<T>: { type: vim.snippet.Type, data: T }\n--- @class vim.snippet.TabstopData: { tabstop: integer }\n--- @class vim.snippet.TextData: { text: string }\n--- @class vim.snippet.PlaceholderData: { tabstop: integer, value: vim.snippet.Node<any> }\n--- @class vim.snippet.ChoiceData: { tabstop: integer, values: string[] }\n--- @class vim.snippet.VariableData: { name: string, default?: vim.snippet.Node<any>, regex?: string, format?: vim.snippet.Node<vim.snippet.FormatData|vim.snippet.TextData>[], options?: string }\n--- @class vim.snippet.FormatData: { capture: number, modifier?: string, if_text?: string, else_text?: string }\n--- @class vim.snippet.SnippetData: { children: vim.snippet.Node<any>[] }\n\n--- @type vim.snippet.Node<any>\nlocal Node = {}\n\n--- @return string\n--- @diagnostic disable-next-line: inject-field\nfunction Node:__tostring()\n  local node_text = {}\n  local type, data = self.type, self.data\n  if type == Type.Snippet then\n    --- @cast data vim.snippet.SnippetData\n    for _, child in ipairs(data.children) do\n      table.insert(node_text, tostring(child))\n    end\n  elseif type == Type.Choice then\n    --- @cast data vim.snippet.ChoiceData\n    table.insert(node_text, data.values[1])\n  elseif type == Type.Placeholder then\n    --- @cast data vim.snippet.PlaceholderData\n    table.insert(node_text, tostring(data.value))\n  elseif type == Type.Text then\n    --- @cast data vim.snippet.TextData\n    table.insert(node_text, data.text)\n  end\n  return table.concat(node_text)\nend\n\n--- Returns a function that constructs a snippet node of the given type.\n---\n--- @generic T\n--- @param type vim.snippet.Type\n--- @return fun(data: T): vim.snippet.Node<T>\nlocal function node(type)\n  return function(data)\n    return setmetatable({ type = type, data = data }, Node)\n  end\nend\n\n-- stylua: ignore\nlocal G = P({\n  'snippet';\n  snippet = Ct(Cg(\n    Ct((\n      V('any') +\n      (Ct(Cg((text(escapable, '$') ^ 1) / escape_text(), 'text')) / node(Type.Text))\n    ) ^ 1), 'children'\n  ) * -P(1)) / node(Type.Snippet),\n  any = V('placeholder') + V('tabstop') + V('choice') + V('variable'),\n  any_or_text = V('any') + (Ct(Cg(braced_text, 'text')) / node(Type.Text)),\n  tabstop = Ct(dollar * (tabstop + (l_brace * tabstop * r_brace))) / node(Type.Tabstop),\n  placeholder = Ct(dollar * l_brace * tabstop * colon * Cg(V('any_or_text'), 'value') * r_brace) / node(Type.Placeholder),\n  choice = Ct(dollar *\n    l_brace *\n    tabstop *\n    pipe *\n    Cg(Ct(choice_text * (P(',') * choice_text) ^ 0), 'values') *\n    pipe *\n    r_brace) / node(Type.Choice),\n  variable = Ct(dollar * (\n    var + (\n    l_brace * var * (\n      r_brace +\n      (colon * Cg(V('any_or_text'), 'default') * r_brace) +\n      (slash * regex * slash * Cg(Ct((V('format') + (C(format_text) / node(Type.Text))) ^ 1), 'format') * slash * options * r_brace)\n    ))\n  )) / node(Type.Variable),\n  format = Ct(dollar * (\n    format_capture + (\n    l_brace * format_capture * (\n      r_brace +\n      (colon * (\n        (slash * format_modifier * r_brace) +\n        (P('+') * if_text * r_brace) +\n        (P('?') * if_till_colon_text * colon * else_text * r_brace) +\n        (P('-') * else_text * r_brace) +\n        (else_text * r_brace)\n      ))\n    ))\n  )) / node(Type.Format),\n})\n\n--- Parses the given input into a snippet tree.\n--- @param input string\n--- @return vim.snippet.Node<vim.snippet.SnippetData>\nfunction M.parse(input)\n  local snippet = G:match(input)\n  assert(snippet, 'snippet parsing failed')\n  return snippet --- @type vim.snippet.Node<vim.snippet.SnippetData>\nend\n\nreturn M\n```\n",
    "closed_at": null,
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Has nothing to do with nvim-lspconfig. Transferred to neovim core repo.\n\nAlso, try Nvim nightly.",
            "created_at": "2025-03-11T00:41:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/32830#issuecomment-2712169003",
            "id": 2712169003,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32830",
            "node_id": "IC_kwDOAPphoM6hqGor",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2712169003/reactions"
            },
            "updated_at": "2025-03-11T00:43:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2712169003",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32830/comments",
    "created_at": "2025-03-11T00:08:01Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32830/events",
    "html_url": "https://github.com/neovim/neovim/issues/32830",
    "id": 2908737371,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 6207355257,
            "name": "snippet",
            "node_id": "LA_kwDOAPphoM8AAAABcfy5eQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/snippet"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32830/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6tX89b",
    "number": 32830,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32830/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": "reopened",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32830/timeline",
    "title": "Error parsing snippet in Neovim: “Error parsing the fragment” when using foreach in PHP.",
    "updated_at": "2025-03-11T00:44:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32830",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/195322774?v=4",
        "events_url": "https://api.github.com/users/DanielBenjaminPerezMoralesDev13/events{/privacy}",
        "followers_url": "https://api.github.com/users/DanielBenjaminPerezMoralesDev13/followers",
        "following_url": "https://api.github.com/users/DanielBenjaminPerezMoralesDev13/following{/other_user}",
        "gists_url": "https://api.github.com/users/DanielBenjaminPerezMoralesDev13/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/DanielBenjaminPerezMoralesDev13",
        "id": 195322774,
        "login": "DanielBenjaminPerezMoralesDev13",
        "node_id": "U_kgDOC6Rjlg",
        "organizations_url": "https://api.github.com/users/DanielBenjaminPerezMoralesDev13/orgs",
        "received_events_url": "https://api.github.com/users/DanielBenjaminPerezMoralesDev13/received_events",
        "repos_url": "https://api.github.com/users/DanielBenjaminPerezMoralesDev13/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/DanielBenjaminPerezMoralesDev13/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DanielBenjaminPerezMoralesDev13/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/DanielBenjaminPerezMoralesDev13",
        "user_view_type": "public"
    }
}