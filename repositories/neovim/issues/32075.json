{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\nThe highlighter runs an async parse in `on_win`, which redraws in the callback to update once parsing finishes. This redraw is *not* run when the parsing was able to complete synchronously, because we can just call `on_line` after so it is not necessary. Reparses will *usually* run synchronously because they are much quicker, so we don't need an async parse all the time.\n\n*However*, some files are so large that even reparsing will get broken up over multiple event loop iterations. In this case, a reparse triggers a redraw, which triggers `on_win`, which triggers a reparse, which triggers a redraw, etc. The result is that large files (like the big linux one) will have CPU usage at 100% when idling in a buffer, and high amounts of flickering when scrolling.\n\n### Steps to reproduce\n\nDownload https://raw.githubusercontent.com/torvalds/linux/master/drivers/gpu/drm/amd/include/asic_reg/dcn/dcn_3_2_0_sh_mask.h\n\n```lua\n-- minimal.lua\nfor name, url in pairs {\n  nvim_treesitter = 'https://github.com/nvim-treesitter/nvim-treesitter.git',\n} do\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\n  if vim.fn.isdirectory(install_path) == 0 then\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\n  end\n  vim.opt.runtimepath:append(install_path)\nend\n\n-- Increase if needed\nvim.o.rdt = 6000\n\nrequire('nvim-treesitter.configs').setup {\n  ensure_installed = { 'lua', 'cpp', 'c', 'comment' },\n  highlight = { enable = true },\n}\n```\n\nrun\n\n`nvim --clean -u minimal.lua dcn_3_2_0_sh_mask.h`\n\nNote that CPU usage is consistently at 100% due to the above reasons\n\n### Expected behavior\n\nReparsing should not be run in the first place; rather the `LanguageTree` should recognize that the region is valid and should return the trees immediately.\n\nA proper solution (in my opinion) is to let `is_valid()` accept a range, which will allow it to tell if a languagetree is valid over that range. The downside is it will no longer be able to flatten `_valid` to `true` (since we won't know if it is valid for all possible ranges). IMO this is still overall an optimization\n\n### Nvim version (nvim -v)\n\nv0.11.0-nightly+e8a6c1b\n\n### Vim (not Nvim) behaves the same?\n\nNA\n\n### Operating system/version\n\nNixOS 25.05\n\n### Terminal name/version\n\nGhostty 1.0.1\n\n### $TERM environment variable\n\nxterm-ghostty\n\n### Installation\n\nNixpkgs nightly overlay",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "note: the provided minimal.lua is missing the part that enables treesitter. \n\n\n> The result is that large files (like the big linux one) will have CPU usage at 100% when idling in a buffer, and high amounts of flickering when scrolling.\n\nI can't reproduce this. When I open that big file (with the fixed minimal.lua; nvim e8a6c1b), the buffer doesn't have syntax highlighting, but `:Inspect` lits extmarks for treesitter.\n\n![Image](https://github.com/user-attachments/assets/dfd460ea-46a8-46fc-99e8-3e2c957d46f5)\n\n\n<details>\n<summary>\nOutput of `=vim.treesitter.get_parser()`:\n</summary>\n\n```\n<1>{\n  _callbacks = {\n    bytes = {},\n    changedtree = {},\n    child_added = {},\n    child_removed = {},\n    detach = { <function 1> }\n  },\n  _callbacks_rec = {\n    bytes = {},\n    changedtree = { <function 2> },\n    child_added = {},\n    child_removed = { <function 3> },\n    detach = {}\n  },\n  _cb_queues = {\n    [\"0,37\"] = {}\n  },\n  _children = {\n    comment = {\n      _callbacks = {\n        bytes = {},\n        changedtree = {},\n        child_added = {},\n        child_removed = {},\n        detach = {}\n      },\n      _callbacks_rec = {\n        bytes = {},\n        changedtree = { <function 2> },\n        child_added = {},\n        child_removed = { <function 3> },\n        detach = {}\n      },\n      _cb_queues = {},\n      _children = {},\n      _has_regions = true,\n      _injections_processed = false,\n      _lang = \"comment\",\n      _opts = <2>{\n        error = false\n      },\n      _parent = <table 1>,\n      _parser = <userdata 1>,\n      _ranges_being_parsed = {},\n      _regions = {...} // huge list of regions\n      _source = 1,\n      _trees = {},\n      _valid = false,\n      <metatable> = <3>{} // omitted\n    },\n    cpp = {\n      _callbacks = {\n        bytes = {},\n        changedtree = {},\n        child_added = {},\n        child_removed = {},\n        detach = {}\n      },\n      _callbacks_rec = {\n        bytes = {},\n        changedtree = { <function 2> },\n        child_added = {},\n        child_removed = { <function 3> },\n        detach = {}\n      },\n      _cb_queues = {},\n      _children = {},\n      _has_regions = true,\n      _injection_query = <4>{\n        _processed_patterns = { {\n            directives = { <5>{ \"set!\", \"injection.language\", \"cpp\" } },\n            predicates = {}\n          }, {\n            directives = { <6>{ \"set!\", \"injection.language\", \"comment\" } },\n            predicates = {}\n          }, {\n            directives = { <7>{ \"set!\", \"injection.language\", \"doxygen\" } },\n            predicates = { { \"lua-match?\", true, <8>{ \"lua-match?\", 1, \"/[*/][!*/]<?[^a-zA-Z]\" } } }\n          } },\n        captures = <9>{ \"injection.content\", \"injection.language\" },\n        info = {\n          captures = <table 9>,\n          patterns = { { <table 5> }, { <table 6> }, { <table 8>, <table 7> } }\n        },\n        lang = \"cpp\",\n        query = <userdata 2>,\n        <metatable> = <10>{ } // omitted\n      },\n      _injections_processed = true,\n      _lang = \"cpp\",\n      _opts = <table 2>,\n      _parent = <table 1>,\n      _parser = <userdata 3>,\n      _ranges_being_parsed = {},\n      _regions = {...} // huge list of regions\n      _source = 1,\n      _trees = { <userdata 4>, <userdata 5>, <userdata 6>, <userdata 7>, <userdata 8>, <userdata 9>, <userdata 10>, <userdata 11>, <userdata 12>, <userdata 13> },\n      _valid = { true, true, true, true, true, true, true, true, true, true },\n      <metatable> = <table 3>\n    }\n  },\n  _has_regions = false,\n  _injection_query = <table 4>,\n  _injections_processed = true,\n  _lang = \"cpp\",\n  _opts = <table 2>,\n  _parser = <userdata 14>,\n  _ranges_being_parsed = {\n    [\"0,37\"] = false\n  },\n  _source = 1,\n  _trees = { <userdata 15> },\n  _valid = true,\n  <metatable> = <table 3>\n}\n```\n\n</details>\n\n\n\n",
            "created_at": "2025-01-18T14:55:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/32075#issuecomment-2599749780",
            "id": 2599749780,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32075",
            "node_id": "IC_kwDOAPphoM6a9QiU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599749780/reactions"
            },
            "updated_at": "2025-01-18T14:55:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599749780",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> note: the provided minimal.lua is missing the part that enables treesitter.\n\nOops, thanks üëç  I've updated the script\n\nAs for reproducing, it is flaky due to the issue described in #32050 sadly, but it might also help to increase the `redrawtime`. I have also updated the script to bump `rdt` up to 6000, but for me it also takes several runs to reproduce this. If I pull in #32082 I can reproduce it more consistently",
            "created_at": "2025-01-18T15:47:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/32075#issuecomment-2599765120",
            "id": 2599765120,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32075",
            "node_id": "IC_kwDOAPphoM6a9USA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599765120/reactions"
            },
            "updated_at": "2025-01-18T15:47:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599765120",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32075/comments",
    "created_at": "2025-01-17T16:20:12Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32075/events",
    "html_url": "https://github.com/neovim/neovim/issues/32075",
    "id": 2795841407,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1786207367,
            "name": "highlight",
            "node_id": "MDU6TGFiZWwxNzg2MjA3MzY3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/highlight"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32075/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6mpSd_",
    "number": 32075,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 4,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32075/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32075/timeline",
    "title": "Too many redraws when reparsing becomes async",
    "updated_at": "2025-01-18T15:47:41Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32075",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
        "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
        "followers_url": "https://api.github.com/users/ribru17/followers",
        "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
        "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ribru17",
        "id": 55766287,
        "login": "ribru17",
        "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
        "organizations_url": "https://api.github.com/users/ribru17/orgs",
        "received_events_url": "https://api.github.com/users/ribru17/received_events",
        "repos_url": "https://api.github.com/users/ribru17/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ribru17",
        "user_view_type": "public"
    }
}