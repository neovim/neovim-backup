{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "This is with recent nvim HEAD, and also manifested with a version some month back. I did not investigate if there are older versions which behave correctly here. The RPC plugin in question is [here](https://github.com/KillTheMule/nvimpam/tree/impro) (take care to take the `impro` branch), so it's not minimal in any way. I might get around to produce something more minimal in python or so.\r\n\r\nIf you cloned the repo, then in the master directory first you need to compile the plugin (`cargo build`, needs a rust installation), and then you can produce the error from running `nvim -u init.vim files/example.pc` as follows:\r\n\r\n1. Start the plugin with `:NvimPamAttach`\r\n1. move to line 50, which reads\r\n\r\n```\r\n NODE  /       22      20.20000076            50.5             30.\r\n```\r\n\r\n3. Run `3f2`, and then `i<Space><Esc>` to insert a space. \r\n  * What happens: The space is inserted, no highlighting applied.\r\n  * What should happen: Space inserted, highlighting applied\r\n4. Run `x` to remove the Space inserted in 1.)\r\n  * What happens: Space is removed, the highlighting from 1.) is applied\r\n  * What should happen: Space is removed, a different highlighting should be applied\r\n\r\n Note that the status line involes a function that runs a request to the plugin, namely `CellHint`,\r\nwhich interweaves with all other communication of course. This seems to cause trouble.\r\n\r\nWhen I keep doing edits, it very much looks like the highlighting applied is always lagging 1 action behind. A filtered neovim log is at https://gist.github.com/KillTheMule/12378fae90419f539be2d44b48bc0547 which only includes steps 3.) and 4.). These can be seen from line 37 (the update event from inserting a space) to line 51, where the plugin answers the \"CellHint\" request from neovim (which is a consequence of the statusline being updated). Just to be clear, the log looks perfectly fine to me, it's just that the highlights are not applied at the right time, but \"one action later\".\r\n\r\n@justinmk already looked at it in gitter, and I could provide the following additional answers:\r\n* When using `<C-l>` inbetween, the correct highlighting will be applied\r\n* Using `:redraw` inbetween does not change anything\r\n* Setting `lazyredraw` does not change anything\r\n\r\nHe also suggested  `as a workaround setting a  \"dummy\" highlight e.g. nvim_add_buf_hl(..., 'Normal', 1,1) i.e. highilight line 1, column 1 with \"Normal\" highlight every time you add a real highlight` which I will try tonight (or so...)",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've reproduced the problem with a small python example [here](https://github.com/KillTheMule/hlup). There's a tad of fluff in the `.vim` files, but you can probably manage (and it gets one stderr and a log output). Adding a \"dummy\" hl call did not change anything.\r\n\r\n(e) One thing to note, maybe it helps diagnose. I'm saving the current buffer and [reuse it](https://github.com/KillTheMule/hlup/blob/master/womp.py#L23) to not \"pollute\" the communication. If I replace that line by `buf = nvim.current.buffer`, the behavior gets somewhat weird. The Highlight would appear, but directly disappear again. Still with the wrong \"rhythm\", but I found that odd.",
            "created_at": "2019-05-09T20:02:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/9981#issuecomment-491045658",
            "id": 491045658,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9981",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTA0NTY1OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491045658/reactions"
            },
            "updated_at": "2019-05-09T20:08:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491045658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "So, not only `<C-l>` helps, but running `:mode` as well. When putting `nvim.command(\"mode\")` after the highlight call in the python repro, that fixes it (I changed the python code to use `call_atomic` to be close to my rust code), even though it produces some flicker. But, doing the same from my rust plugin does _not_ fix the issue.\r\n\r\nHere's a difference I noticed from nvim's log. The order of events for the python plugin is\r\n\r\n|ms|Direction| what|\r\n|------|-------|-------|\r\n|491 |RPC ->ch 3:| [notify]   [2, \"nvim_buf_lines_event\"|\r\n|492 |RPC <-ch 3:| [request]  [0, 5, \"nvim_call_atomic\",|\r\n|493 |RPC ->ch 3:| [request]  [0, 4, \"REQUEST\", []]|\r\n|493 |RPC <-ch 3:| [response] [1, 4, nil, \"XYZ\"]|\r\n|493 |RPC ->ch 3: |[request]  [0, 5, \"REQUEST\", []]|\r\n|494 |RPC <-ch 3:| [request]  [0, 6, \"nvim_command\", [\"mode\"]]|\r\n|494 |RPC <-ch 3: |[response] [1, 5, nil, \"XYZ\"]|\r\n\r\nwhile for the rust plugin it is\r\n\r\n|ms|Direction| what|\r\n|------|-------|-------|\r\n|316 |RPC ->ch 3: |[notify]   [2, \"nvim_buf_lines_event\",|\r\n|317 |RPC ->ch 3:| [request]  [0, 4, \"REQUEST\", [49, 45]]|\r\n|317 |RPC <-ch 3: |[request]  [0, 3, \"nvim_call_atomic\",|\r\n|318 |RPC <-ch 3:| [request]  [0, 4, \"nvim_command\", [\"mode\"]]|\r\n|319 |RPC <-ch 3: |[response] [1, 4, nil, \"Y\"]|\r\n|320 |RPC ->ch 3: |[request]  [0, 5, \"REQUEST\", [49, 45]]|\r\n|321 |RPC <-ch 3:| [response] [1, 5, nil, \"Y\"]|\r\n\r\n\r\nThe timings are of course different, the plugins aren't doing the same things.  I have no idea why the request for the rust plugin comes faster than for the python plugin, even though the first one goes through luaeval, the latter through viml code.\r\n\r\nDoes that give anyone any idea? Or what else should I start investigating?",
            "created_at": "2019-05-10T19:27:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/9981#issuecomment-491404267",
            "id": 491404267,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9981",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTQwNDI2Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491404267/reactions"
            },
            "updated_at": "2019-05-10T19:29:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491404267",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Note that the status line involes a function that runs a request to the plugin, namely CellHint,\r\nwhich interweaves with all other communication of course. This seems to cause trouble.\r\n\r\nThere seems to be two issues here:\r\n\r\n- An unfortunate event order that causes the requests (to nvim) from the `nvim_buf_lines_event` async handler to be interpreted as nested request from the sync `CellHint` request. This is more or less guaranteed after an edit if the statusline depend on cursor position.\r\n- an issue where screen invalidations inside a statusline expression are lost. The idea here was that no one should want to change buffer/window state inside a statusline expression. But unfortunately with the rpc issue we have `nvim_buf_add_highlight` calls being _de facto_ invoked by the statusline expression.\r\n\r\nLikewise there would be two potential solutions:\r\n\r\n- somehow allow to _synchronously_ process the nvim_buf_lines_event before redrawing even begins. In case the rpc plugin is relatively quick this is what we want anyway, to only redraw the screen once (and not once with old highlights and once for the `call_atomic` highlight update)\r\n- fix so that `redrawWinline` inside statusline eval will properly schedule another round of redraws. Though this has the potential of feedback loops etc.",
            "created_at": "2019-05-11T09:06:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/9981#issuecomment-491494024",
            "id": 491494024,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9981",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTQ5NDAyNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491494024/reactions"
            },
            "updated_at": "2019-05-11T09:06:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491494024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">   An unfortunate event order that causes the requests (to nvim) from the `nvim_buf_lines_event` async handler to be interpreted as nested request from the sync `CellHint` request.\r\n\r\nI'm not sure I understand all of this, but I modified my rust plugin's lua code to wait 100ms before sending the request to the plugin, so the order of events was definitely changed, but the problem was still there (even with calling `:mode`). Of course, the waiting happened inside the function called from the statusline, so the editor still was blocked during that.\r\n",
            "created_at": "2019-05-11T09:48:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/9981#issuecomment-491496627",
            "id": 491496627,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9981",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTQ5NjYyNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491496627/reactions"
            },
            "updated_at": "2019-05-11T09:48:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491496627",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Of course, the waiting happened inside the function called from the statusline, so the editor still was blocked during that.\r\n\r\nWhich means the relevant property of the event ordering is unchanged: the highlight requests still occur in the context of the status-line eval.",
            "created_at": "2019-05-11T11:41:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/9981#issuecomment-491503834",
            "id": 491503834,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9981",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTUwMzgzNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491503834/reactions"
            },
            "updated_at": "2019-05-11T11:41:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491503834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I guess what we want to try was not to completely block the rust plugin for 100ms. Rather, use whatever event loop of the rust cilent library to schedule an internal callback 100ms later, and from there invoke the highlight. This will have highlight flickering, but no missing highlights or prolonged blocking.",
            "created_at": "2019-05-11T11:45:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/9981#issuecomment-491504052",
            "id": 491504052,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9981",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTUwNDA1Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491504052/reactions"
            },
            "updated_at": "2019-05-11T11:45:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491504052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hmm, 100ms later than what? The request? I could do that, but the highlight is invoked from the `lines_event` handler, which isn't generally involved in the request, they just happen to interweave. Did you see the python reproduction I made? Where would you put the 100ms in that?",
            "created_at": "2019-05-11T12:40:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/9981#issuecomment-491507789",
            "id": 491507789,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9981",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTUwNzc4OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491507789/reactions"
            },
            "updated_at": "2019-05-11T12:40:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491507789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It was meant as an example how to make the highlight come after blocking statusline request. With https://github.com/neovim/pynvim/pull/393 one could use `nvim.run_coroutine(asyncio.sleep(0.1))`  before the `call_atomic` with all the hlighlight. Though it will have the flicker issue, so I wouldn't recommend it as a general solution (unless the autocmd thing turned out not to work).",
            "created_at": "2019-05-11T12:52:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/9981#issuecomment-491508609",
            "id": 491508609,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9981",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTUwODYwOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491508609/reactions"
            },
            "updated_at": "2019-05-11T12:52:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491508609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In the meanwhile, using some autocmd that is invoked just before the relevant redraw, such as CursorMoved, is a stand-in solution\r\n\r\n@KillTheMule The `++once` feature may be useful for this. `:help autocmd-once`\r\n\r\n      :autocmd CursorMoved * ++once call rpcrequest(...)",
            "created_at": "2019-05-11T13:02:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/9981#issuecomment-491509313",
            "id": 491509313,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/9981",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTUwOTMxMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491509313/reactions"
            },
            "updated_at": "2019-05-11T13:02:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/491509313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/9981/comments",
    "created_at": "2019-05-07T08:51:32Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/9981/events",
    "html_url": "https://github.com/neovim/neovim/issues/9981",
    "id": 441115204,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "channels, RPC, msgpack",
            "id": 242522707,
            "name": "channels-rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/channels-rpc"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "redraw, layout, presentation",
            "id": 718084050,
            "name": "display",
            "node_id": "MDU6TGFiZWw3MTgwODQwNTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/display"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/9981/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWU0NDExMTUyMDQ=",
    "number": 9981,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/9981/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/9981/timeline",
    "title": "missing redraws when rpcrequest() is used in statusline expression",
    "updated_at": "2025-01-19T11:41:32Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/9981",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
        "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
        "followers_url": "https://api.github.com/users/KillTheMule/followers",
        "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
        "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/KillTheMule",
        "id": 4117685,
        "login": "KillTheMule",
        "node_id": "MDQ6VXNlcjQxMTc2ODU=",
        "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
        "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
        "repos_url": "https://api.github.com/users/KillTheMule/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/KillTheMule",
        "user_view_type": "public"
    }
}