{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "It would be useful to have either:\r\n1. SIGINT forwarding\r\n2. Subscribe to SIGINT on RPC\r\n\r\nEach have trade-offs, perhaps being strongly down to a language-by-language interface.\r\n\r\nThis would allow for the interruption of long-running commands. Much like the old-style python interface can do.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I think SIGINT forwarding is better. It is more powerful (can interrupt more things) and  the second option can be more or less emulated with signalfd.",
            "created_at": "2017-11-12T20:57:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-343767089",
            "id": 343767089,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc2NzA4OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/343767089/reactions"
            },
            "updated_at": "2017-11-12T20:57:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/343767089",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "There's also a suggestion, by @bfredl, that double tapping Ctrl-C could kill the underlying process and close the channel.",
            "created_at": "2017-11-12T21:13:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-343768222",
            "id": 343768222,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc2ODIyMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/343768222/reactions"
            },
            "updated_at": "2017-11-12T21:13:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/343768222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6136282?v=4",
                "events_url": "https://api.github.com/users/SevereOverfl0w/events{/privacy}",
                "followers_url": "https://api.github.com/users/SevereOverfl0w/followers",
                "following_url": "https://api.github.com/users/SevereOverfl0w/following{/other_user}",
                "gists_url": "https://api.github.com/users/SevereOverfl0w/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/SevereOverfl0w",
                "id": 6136282,
                "login": "SevereOverfl0w",
                "node_id": "MDQ6VXNlcjYxMzYyODI=",
                "organizations_url": "https://api.github.com/users/SevereOverfl0w/orgs",
                "received_events_url": "https://api.github.com/users/SevereOverfl0w/received_events",
                "repos_url": "https://api.github.com/users/SevereOverfl0w/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/SevereOverfl0w/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SevereOverfl0w/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/SevereOverfl0w",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "closing the channel might be enough, or at least give the process some time to clean up itself before actually killing it.",
            "created_at": "2017-11-12T21:14:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-343768352",
            "id": 343768352,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc2ODM1Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/343768352/reactions"
            },
            "updated_at": "2017-11-12T21:14:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/343768352",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Perhaps the process could be sent something like SIGTERM for the second Ctrl-C? Which, I believe, can be hooked to perform cleanup. `man kill` seems to suggest this is the case.",
            "created_at": "2017-11-12T21:49:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-343770839",
            "id": 343770839,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc3MDgzOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/343770839/reactions"
            },
            "updated_at": "2017-11-12T21:49:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/343770839",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6136282?v=4",
                "events_url": "https://api.github.com/users/SevereOverfl0w/events{/privacy}",
                "followers_url": "https://api.github.com/users/SevereOverfl0w/followers",
                "following_url": "https://api.github.com/users/SevereOverfl0w/following{/other_user}",
                "gists_url": "https://api.github.com/users/SevereOverfl0w/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/SevereOverfl0w",
                "id": 6136282,
                "login": "SevereOverfl0w",
                "node_id": "MDQ6VXNlcjYxMzYyODI=",
                "organizations_url": "https://api.github.com/users/SevereOverfl0w/orgs",
                "received_events_url": "https://api.github.com/users/SevereOverfl0w/received_events",
                "repos_url": "https://api.github.com/users/SevereOverfl0w/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/SevereOverfl0w/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SevereOverfl0w/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/SevereOverfl0w",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Aborting the request solved the immediate problem: nvim is responsive to the user again. Now the RPC state is out sync and therefore the simplest way is to close the RPC channel. But there is no need to kill the process right away. We shouldn't be more aggressive than necessary.",
            "created_at": "2017-11-12T22:08:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-343772135",
            "id": 343772135,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc3MjEzNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/343772135/reactions"
            },
            "updated_at": "2017-11-12T22:08:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/343772135",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure forwarding SIGINT to the plugin process expresses the right intention. When the user presses Ctrl-C in Neovim, they mean to say \"stop what you're doing and return control to me.\" This isn't the same as an intention to kill the plugin process. Sending a SIGINT in some sense requires knowledge about the plugin process -- knowledge that either it's fine to bring down when the user presses Ctrl-C, or knowledge that the process handles SIGINT. I don't think either of these is a safe assumption for Neovim to make. Non-trivial processes likely both (A) want to support the user aborting an RPC request without going down, and (B) want to go down upon receiving SIGINT.\r\n\r\nI think what should probably happen is a keyboard interrupt notification is asynchronously sent over the channel. The plugin can listen and decide how to respond. This already happens if during an rpcrequest the plugin sends a nested async notification after the user has pressed Ctrl-C - it will receive a notification back communicating that keyboard interrupt. But no proactive communication of the Ctrl-C to the plugin happens right now until the plugin next tries to talk to Neovim. In VCaml we are working around this by heartbeating async notifications.\r\n\r\nIf despite these reservations the plans for SIGINT move forward, can clients set a flag to opt out? I would be very sad if to write a Neovim plugin I needed to write a signal handler.",
            "created_at": "2021-05-05T03:00:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-832382594",
            "id": 832382594,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgzMjM4MjU5NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/832382594/reactions"
            },
            "updated_at": "2021-05-05T11:14:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/832382594",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/802511?v=4",
                "events_url": "https://api.github.com/users/ddickstein/events{/privacy}",
                "followers_url": "https://api.github.com/users/ddickstein/followers",
                "following_url": "https://api.github.com/users/ddickstein/following{/other_user}",
                "gists_url": "https://api.github.com/users/ddickstein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ddickstein",
                "id": 802511,
                "login": "ddickstein",
                "node_id": "MDQ6VXNlcjgwMjUxMQ==",
                "organizations_url": "https://api.github.com/users/ddickstein/orgs",
                "received_events_url": "https://api.github.com/users/ddickstein/received_events",
                "repos_url": "https://api.github.com/users/ddickstein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ddickstein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ddickstein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ddickstein",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ddickstein sure, closing the channel should only happen on the _second_ SIGINT, giving the process a chance to handle it cleanly and only interrupt the request (the host library returning an error unless the specific plugin handles it).\r\n\r\n> I think what should probably happen is a keyboard interrupt notification is asynchronously sent on the event bus. The plugin can listen and decide how to respond. [...]  would be very sad if to write a Neovim plugin I needed to write a signal handler.\r\n\r\nThe best mechanism might depend on the language. The problem with using socket IO is that if the process is blocked in a CPU loop not doing IO, it won't get the message from neovim..  Many runtime environments like cpython already converts the signal safely into into an ordinary exception of the language, which could be handled adequately by plugin code. Is the situation reverse in ocaml (no safe interrupt exceptions, but preemptive IO handling)?\r\n",
            "created_at": "2021-05-05T06:05:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-832435520",
            "id": 832435520,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgzMjQzNTUyMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/832435520/reactions"
            },
            "updated_at": "2021-05-05T06:05:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/832435520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ah you make an interesting point! So VCaml uses Async, and the logic for returning control to the user waits for either a keyboard interrupt or for the request to finish processing. So as long as the Async scheduler isn't being starved, it will be able to run the logic that detects the keyboard interrupt and returns control. But if there is a job w/ a long synchronous block of code, the other jobs in the queue will be stuck waiting until that job returns control to the scheduler. A blocking call from `rpcrequest` doesn't imply synchronous logic that blocks Async, but it's still something that could happen depending on how the code is written. Jobs that take a long time for other reasons, e.g., shelling out to some other program to run some command that takes a while, will not block the scheduler and therefore will not cause an issue.\r\n\r\nI am by no means an expert on signal handlers, but it [looks like](https://ocaml.janestreet.com/ocaml-core/latest/doc/core/Core__/Signal/Expert/index.html) these can be optionally handled by Async. If they are, I believe the signal handler runs as an ordinary Async job, which is nicer to reason about but has the same limitation re: starved scheduler. If they aren't, I think the signal handler is invoked whenever the signal is received in a separate thread, which has that preemptive behavior. The signal can be converted into a safe exception - here's an [example](https://ocaml.github.io/ocamlunix/signals.html#sec84) (this doesn't use the Core library, but same idea):\r\n\r\n```ocaml\r\nexception Break;;\r\nlet break _ = raise Break;;\r\n...\r\nlet main_loop () =\r\n  signal sigint (Signal_handle break);\r\n  while true do\r\n    try (* Read and evaluate user commands  *)\r\n    with Break -> (* Display \"stopped\" *)\r\n  done;;\r\n```\r\n\r\nAlso from that page, on OCaml's native signal handling:\r\n> In fact, OCaml does not treat signals in a strictly asynchronous fashion. On receiving a signal, OCaml records the receipt of the signal but the signal handling function will only be executed at certain checkpoints. These are frequent enough to provide the illusion of asynchronous execution. The checkpoints typically occur during allocations, loop controls, or interactions with the system (particularly system calls). OCaml guarantees that a program that does not loop, does not allocate, and does not interact with the system will not have its execution interleaved with that of a signal handler. In particular, storing an unallocated value (integer, boolean, etc. — but not a float!) in a reference cell cannot result in the race condition described above.\r\n\r\nAll of this said, I'm not sure I understand why the notification itself needs to be preemptive. It seems to me that Neovim should itself forcibly return from `rpcrequest` when the user presses Ctrl-C (maybe as though the RPC had returned a `Nil` response), but then just send a regular notification over RPC to announce that this has happened. I don't think Neovim should need to plead with plugins to release their grip.",
            "created_at": "2021-05-05T10:56:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-832597195",
            "id": 832597195,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgzMjU5NzE5NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/832597195/reactions"
            },
            "updated_at": "2021-05-05T11:10:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/832597195",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/802511?v=4",
                "events_url": "https://api.github.com/users/ddickstein/events{/privacy}",
                "followers_url": "https://api.github.com/users/ddickstein/followers",
                "following_url": "https://api.github.com/users/ddickstein/following{/other_user}",
                "gists_url": "https://api.github.com/users/ddickstein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ddickstein",
                "id": 802511,
                "login": "ddickstein",
                "node_id": "MDQ6VXNlcjgwMjUxMQ==",
                "organizations_url": "https://api.github.com/users/ddickstein/orgs",
                "received_events_url": "https://api.github.com/users/ddickstein/received_events",
                "repos_url": "https://api.github.com/users/ddickstein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ddickstein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ddickstein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ddickstein",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It seems to me that Neovim should itself forcibly return from rpcrequest when the user presses Ctrl-C (maybe as though the RPC had returned a Nil response), but then just send a regular notification over RPC to announce that this has happened. I don't think Neovim should need to plead with plugins to release their grip.\r\n\r\nBecause, within the limitations of the present msgpack-rpc protocol, it is tricky to do that while keeping RPC in a synchronized state, so for most clients this would entail closing the channel. The idea here is to give the __host__ a chance to handle the interrupt gracefully without needing the active cooperation of all plugins, and avoid forcibly closing the channel as long as the host cooperates. In case of a process getting stuck the second CTRL-C hit within the same rpcrequest will unconditionally abort the request.",
            "created_at": "2021-05-05T11:43:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-832622202",
            "id": 832622202,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgzMjYyMjIwMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/832622202/reactions"
            },
            "updated_at": "2021-05-05T11:43:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/832622202",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> within the limitations of the present msgpack-rpc protocol, it is tricky to do that while keeping RPC in a synchronized state, so for most clients this would entail closing the channel.\r\n\r\nCan you elaborate on these limitations? It seems to me that message type 2 (async notification) can be sent at any time from either party, so I'm not sure why sending one would cause the RPC to fall out of a synchronized state. And you'd only need to send the Ctrl-C to the particular client on which `rpcrequest` is blocking, so I don't think cross-plugin cooperation is needed.",
            "created_at": "2021-05-06T19:27:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-833800488",
            "id": 833800488,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzgwMDQ4OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/833800488/reactions"
            },
            "updated_at": "2021-05-06T19:27:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/833800488",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/802511?v=4",
                "events_url": "https://api.github.com/users/ddickstein/events{/privacy}",
                "followers_url": "https://api.github.com/users/ddickstein/followers",
                "following_url": "https://api.github.com/users/ddickstein/following{/other_user}",
                "gists_url": "https://api.github.com/users/ddickstein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ddickstein",
                "id": 802511,
                "login": "ddickstein",
                "node_id": "MDQ6VXNlcjgwMjUxMQ==",
                "organizations_url": "https://api.github.com/users/ddickstein/orgs",
                "received_events_url": "https://api.github.com/users/ddickstein/received_events",
                "repos_url": "https://api.github.com/users/ddickstein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ddickstein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ddickstein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ddickstein",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It seems to me that message type 2 (async notification) can be sent at any time from either party, so I'm not sure why sending one would cause the RPC to fall out of a synchronized state. \r\n\r\nI do not think I have claimed this either.\r\n\r\n> And you'd only need to send the Ctrl-C to the particular client on which rpcrequest is blocking, so I don't think cross-plugin cooperation is needed.\r\n\r\nThe Idea is that the host (or at least client library, in case of single-process plugins) provides reasonable defaults so reasonably written plugin code will do the right thing most of the time even when not actively keeping interrupts in mind all of the time. for instance in python a `KeyboardInterupt` exception is supposed to bubble up from the plugin code to the host which can handle it properly (unless the infamous unqualified `except:` footgun was used).\r\n",
            "created_at": "2021-05-06T19:53:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-833817105",
            "id": 833817105,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzgxNzEwNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/833817105/reactions"
            },
            "updated_at": "2021-05-06T19:53:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/833817105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ok. I think I accept the argument for preemptively alerting the plugin process, particularly for plugins that are written without an event loop that frequently polls its file descriptors, esp. so they don't issue further RPC requests to Neovim as part of processing the same request.\r\n\r\nI was talking about these designs with @dalyadickstein and she pointed out that there might also be surprises in a design with different key presses meaning different things - someone who presses ctrl-c once may not know pressing it a second time will help, and someone who presses it multiple times (e.g., in frustration or panic) may not expect the second press to have different semantics (more aggressive than just aborting the request in flight). Documentation mitigates this only somewhat.\r\n\r\nShe suggested a hybrid of the designs we've discussed here:\r\n\r\n- Send a SIGINT to the process on which we are waiting.\r\n- Control is always released to the user. If the process does not reply in a given time frame (probably something on the order of a hundred milliseconds - long enough for the process to send a response but still instantaneous for the human), fake a Nil response from the process to unblock and drop the process' response when it arrives (to keep the RPC state in sync).",
            "created_at": "2021-05-06T23:44:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/7546#issuecomment-833950104",
            "id": 833950104,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7546",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzk1MDEwNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/833950104/reactions"
            },
            "updated_at": "2021-05-06T23:44:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/833950104",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/802511?v=4",
                "events_url": "https://api.github.com/users/ddickstein/events{/privacy}",
                "followers_url": "https://api.github.com/users/ddickstein/followers",
                "following_url": "https://api.github.com/users/ddickstein/following{/other_user}",
                "gists_url": "https://api.github.com/users/ddickstein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ddickstein",
                "id": 802511,
                "login": "ddickstein",
                "node_id": "MDQ6VXNlcjgwMjUxMQ==",
                "organizations_url": "https://api.github.com/users/ddickstein/orgs",
                "received_events_url": "https://api.github.com/users/ddickstein/received_events",
                "repos_url": "https://api.github.com/users/ddickstein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ddickstein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ddickstein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ddickstein",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 12,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/7546/comments",
    "created_at": "2017-11-12T20:53:05Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/7546/events",
    "html_url": "https://github.com/neovim/neovim/issues/7546",
    "id": 273264120,
    "labels": [
        {
            "color": "c7def8",
            "default": false,
            "description": "user experience",
            "id": 151718455,
            "name": "ux",
            "node_id": "MDU6TGFiZWwxNTE3MTg0NTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ux"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "channels, RPC, msgpack",
            "id": 242522707,
            "name": "channels-rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/channels-rpc"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "plugins as RPC coprocesses (node.js, python, etc)",
            "id": 652698463,
            "name": "remote-plugin",
            "node_id": "MDU6TGFiZWw2NTI2OTg0NjM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/remote-plugin"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/7546/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWUyNzMyNjQxMjA=",
    "number": 7546,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/7546/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/7546/timeline",
    "title": "SIGINT forwarding for RPC / ctrl-c interrupt rpcrequest()",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:57:42Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/7546",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/6136282?v=4",
        "events_url": "https://api.github.com/users/SevereOverfl0w/events{/privacy}",
        "followers_url": "https://api.github.com/users/SevereOverfl0w/followers",
        "following_url": "https://api.github.com/users/SevereOverfl0w/following{/other_user}",
        "gists_url": "https://api.github.com/users/SevereOverfl0w/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/SevereOverfl0w",
        "id": 6136282,
        "login": "SevereOverfl0w",
        "node_id": "MDQ6VXNlcjYxMzYyODI=",
        "organizations_url": "https://api.github.com/users/SevereOverfl0w/orgs",
        "received_events_url": "https://api.github.com/users/SevereOverfl0w/received_events",
        "repos_url": "https://api.github.com/users/SevereOverfl0w/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/SevereOverfl0w/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SevereOverfl0w/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/SevereOverfl0w",
        "user_view_type": "public"
    }
}