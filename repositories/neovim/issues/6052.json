{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "There are several popular languages (Haskell, Python) and file formats (YAML, cabal) out there that are indentation sensitive and as far as I know `Vim` is not very good in supporting that when it comes to things like syntax highlighting.\r\nThe only approach that I'm aware of is doing backtracking with Vimscript which is tedious and error prone.\r\nI'm the main author of `haskell-vim` and I get quite a lot of feature requests that would need a way to figure out in which kind of block I am.\r\n\r\nA very handy thing would be something like `syn indent` that works like so:\r\n\r\nLet's say we want to define how `do` blocks in Haskell are being highlighted. They start with the keyword `do`.\r\n\r\n```viml\r\nsyn indent {group-name} start=\"\\<do\\>\" contains=…\r\n```\r\nIf that rule finds a match all the following lines indented relative to the match belong to that group.\r\n\r\nExample:\r\n\r\n```haskell\r\nfun x = do -- match\r\n  foo -- indented by 2 relative to the matched line, therefore part of the group\r\n  bar -- ditto\r\n\r\n-- not indented anymore, therefore not part of the group. \r\nbar x d = …\r\n```\r\n\r\nA way to tell that the group should ignore empty lines would also be handy so something like this could work:\r\n\r\n```haskell\r\nfun x = do --match\r\n   foo -- part of the group\r\n\r\n   bar -- also part of the group\r\n```\r\nMaybe there already is a way to do this with Neovim but if there isn't this would make writing plugins  for languages with significant whitespace a lot easier.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Indentation as a first-class concept in Vim would be useful for many things, e.g. navigation and an \"indent\" text-object.\r\n\r\n@ZyX-I Is the maintainer of YAML indent plugin, maybe he can comment on whether the current capabilities are sufficient.",
            "created_at": "2017-02-03T17:15:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-277306274",
            "id": 277306274,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzMwNjI3NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277306274/reactions"
            },
            "updated_at": "2017-02-03T17:15:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277306274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk I have not touched `:syn` internals enough and did not write many syntax scripts, but AFAIK properly supporting indentation-based languages is impossible. You may see that my YAML *syntax* script does not even attempt to do something like this. Indentation scripts are irrelevant.\r\n\r\n// And I would really like to see syntax based on calling functions rather then extending regex-based `:syn`. If properly implemented this should be both faster (needs to allow something that touches VimL least: maybe, new API function + #4971 + API event regarding changing text, #4971 is needed to avoid unnecessary allocations that should slow displaying syntax the most) and allow supporting *any* syntax correctly. And allow adding features like “highlighting C functions as functions and C macros as macros” without trying to jump above one’s head to properly implement this using `:syn` and VimL.",
            "created_at": "2017-02-03T21:09:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-277362956",
            "id": 277362956,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzM2Mjk1Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277362956/reactions"
            },
            "updated_at": "2017-02-03T21:10:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277362956",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I agree, indentation scripts are really painful to write, but I'm not sure what you are proposing here and how one would write indentation for a specific language for neovim using the approach you just described. Could you elaborate on that a little more? Having better control over indentation than one currently has with `:syn` would be really nice.",
            "created_at": "2017-02-03T21:27:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-277366772",
            "id": 277366772,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzM2Njc3Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277366772/reactions"
            },
            "updated_at": "2017-02-03T21:27:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277366772",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/151506?v=4",
                "events_url": "https://api.github.com/users/raichoo/events{/privacy}",
                "followers_url": "https://api.github.com/users/raichoo/followers",
                "following_url": "https://api.github.com/users/raichoo/following{/other_user}",
                "gists_url": "https://api.github.com/users/raichoo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/raichoo",
                "id": 151506,
                "login": "raichoo",
                "node_id": "MDQ6VXNlcjE1MTUwNg==",
                "organizations_url": "https://api.github.com/users/raichoo/orgs",
                "received_events_url": "https://api.github.com/users/raichoo/received_events",
                "repos_url": "https://api.github.com/users/raichoo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/raichoo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/raichoo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/raichoo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@raichoo Vim has no problems with writing indentation scripts, there is nothing to improve here. And `:syn` has no control over indentation, so I do not understand what you are asking. I did not propose anything for “writing indentation”.",
            "created_at": "2017-02-03T21:40:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-277369645",
            "id": 277369645,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzM2OTY0NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277369645/reactions"
            },
            "updated_at": "2017-02-03T21:40:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277369645",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ah sorry I didn't not make myself perfectly clear here. Yes, of course `:syn` is used to define syntax (or whatever the correct Vim terminology is here). That alone would help me a lot in terms of highlighting, let's say to allow different highlighting in different kinds of blocks (`let`, `do`, `where` just to name a few Haskell examples), I can already do that with regions but it's, as far as I know, impossible to do that with indented blocks.\r\nAlso: you can use that syntax information to gain more information during indentation using `synIDAttr`. I do that quite a lot in `haskell-vim` because different contexts may need different indentation behavior.\r\n\r\nI disagree with the statement that Vim has no problems when it comes to indentation. Nearly everyone I know who attempted to write a more sophisticated indentation Script in Vim gave up at some point because Vim features don't provide the needed features and reimplementig the needed features in VimL for every new plugin is a huge pain.\r\nI regularly have to turn down issues on `haskell-vim` by people asking me to add a different kind of indentation behavior to `do` or `let` blocks because I have no tools other than manual backtracking to find out if I'm in one of these blocks, and as I said before: that's tedious to implement, error-prone and slow. Adding a `:syn indent` feature or anything akin to that would me allow to use `synIDAttr` to figure out if I'm in such a block the same way I can use it right now to figure out if I'm in a region.",
            "created_at": "2017-02-03T22:06:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-277375395",
            "id": 277375395,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzM3NTM5NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277375395/reactions"
            },
            "updated_at": "2017-02-03T22:17:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277375395",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/151506?v=4",
                "events_url": "https://api.github.com/users/raichoo/events{/privacy}",
                "followers_url": "https://api.github.com/users/raichoo/followers",
                "following_url": "https://api.github.com/users/raichoo/following{/other_user}",
                "gists_url": "https://api.github.com/users/raichoo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/raichoo",
                "id": 151506,
                "login": "raichoo",
                "node_id": "MDQ6VXNlcjE1MTUwNg==",
                "organizations_url": "https://api.github.com/users/raichoo/orgs",
                "received_events_url": "https://api.github.com/users/raichoo/received_events",
                "repos_url": "https://api.github.com/users/raichoo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/raichoo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/raichoo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/raichoo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@raichoo About indentation: I actually remembered that there `&indentexpr` does not allow smart tabs (indent with tabs, align with spaces), but this is the only thing I can remember which is missing and I usually do not use tabs.\r\n\r\nI now understand what’s your problem with `:syn` and why @justinmk was mentioning indentation scripts, but I would want something more generic: allow syntax to be defined by functions which would return something like `[[[1, 1], [1, 7], 3], [[1, 6], [1, 7], 4], …]` (highlight first .. seventh byte of the first line with highlight group 3, sixth to seventh byte of the first line with highlight group 4, …): this should allow arbitrary highlighting which may be based also on such properties as “this is a file-local (static) function”, “this is an external function”, “this is a macro call”. Exact API does not need to be exactly the same as described, but it must be fast (this is why I used numbers for highlight groups and not more readable strings); better first check how IDEs cope with such things. “Arbitrary highlighting” like described here means that highlighting may and should be implemented based on syntax parsers actually used by compilers (if they export this somehow, of course) as opposed to trying to do syntax parsing based on rewriting parsers in regexes which do not cope well with some grammars. AFAIR there was an issue for this somewhere.",
            "created_at": "2017-02-03T23:14:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-277388762",
            "id": 277388762,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzM4ODc2Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277388762/reactions"
            },
            "updated_at": "2017-02-03T23:14:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277388762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "What you describe sounds like it could also enable things like semantic highlighting which is pretty much the \"holy grail\" I've been looking for for quite a while. Yes, reimplementing the parsers with regexes simply has too many limitations and I believe most plugin writers struggle with that a lot (at least I do).\r\nI'm not quite sure how using the parser of the compiler (if exposed at all) might help here though since most of them require a syntax correct file and don't really allow partially parsing a file to extract syntax information. So I'm not quite sure how the highlighting information is obtained other then reimplementing the parser yet again (in something that is hopefully more expressive and faster than VimL ^^) and maybe pulling tricks like building the derivative of the languages being parsed (to avoid parsing the whole file over and over again, when only a few bits at the and changed). But I that's another issue, I'm just trying to figure out where this might fit into the bigger picture.\r\nAnyway, I'm generally intrigued by the idea to have such fine grained control over highlighting and all the good things that come with that. For a lot of tasks however it sounds a bit like \"overkill\" when quickly hacking together something with `:syn` and regex might do the job. My proposal is aimed at being able to quickly write such a highlighter. For `haskell-vim` however I would certainly switch to an API that gives me the finer control if it is not too much of a pain to get the job done.",
            "created_at": "2017-02-03T23:45:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-277393876",
            "id": 277393876,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzM5Mzg3Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277393876/reactions"
            },
            "updated_at": "2017-02-03T23:45:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277393876",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/151506?v=4",
                "events_url": "https://api.github.com/users/raichoo/events{/privacy}",
                "followers_url": "https://api.github.com/users/raichoo/followers",
                "following_url": "https://api.github.com/users/raichoo/following{/other_user}",
                "gists_url": "https://api.github.com/users/raichoo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/raichoo",
                "id": 151506,
                "login": "raichoo",
                "node_id": "MDQ6VXNlcjE1MTUwNg==",
                "organizations_url": "https://api.github.com/users/raichoo/orgs",
                "received_events_url": "https://api.github.com/users/raichoo/received_events",
                "repos_url": "https://api.github.com/users/raichoo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/raichoo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/raichoo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/raichoo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@raichoo Some compilers are able to proceed after encountering syntax errors. And sometimes it is not impossible to push patches for such purposes (though I guess usually it is easier to do reimplementing as I have not heard about such initiatives). And there are languages where it is completely possible to use the strategy “take the grammar files from project and make use of them for constructing your syntax parser”.\r\n\r\nIn any case, even if you can’t reuse compiler’s parser directly for syntax highlighting you most likely will have to use it indirectly for semantic highlighting.",
            "created_at": "2017-02-03T23:58:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-277395848",
            "id": 277395848,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzM5NTg0OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277395848/reactions"
            },
            "updated_at": "2017-02-03T23:58:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277395848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`nvim_buf_add_highlight()` was added for this purpose. What is lacking from it? ",
            "created_at": "2017-02-04T01:05:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-277404351",
            "id": 277404351,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzQwNDM1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277404351/reactions"
            },
            "updated_at": "2017-02-04T01:05:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277404351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've played with `nvim_buf_add_highlight()` and even though it keeps the highlighting intact when lines are moved around, the same does not hold for column changes which IMHO makes it not very useful for writing highlighters for constantly changing files.\r\n\r\n![screenshot from 2017-02-04 09-58-07](https://cloud.githubusercontent.com/assets/151506/22617272/df09b910-eac0-11e6-9f9c-ea272bbfbe32.png)\r\n\r\n![screenshot from 2017-02-04 09-58-29](https://cloud.githubusercontent.com/assets/151506/22617273/e237c870-eac0-11e6-8f0c-414c39138484.png)\r\n\r\nThe `nvim_buf_*` operations all seem a bit too low level for my taste when it comes to writing rather highlevel plugins like highlighters. So there is a need for something built on top of that.",
            "created_at": "2017-02-04T09:04:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-277430225",
            "id": 277430225,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzQzMDIyNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277430225/reactions"
            },
            "updated_at": "2017-02-04T09:05:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/277430225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/151506?v=4",
                "events_url": "https://api.github.com/users/raichoo/events{/privacy}",
                "followers_url": "https://api.github.com/users/raichoo/followers",
                "following_url": "https://api.github.com/users/raichoo/following{/other_user}",
                "gists_url": "https://api.github.com/users/raichoo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/raichoo",
                "id": 151506,
                "login": "raichoo",
                "node_id": "MDQ6VXNlcjE1MTUwNg==",
                "organizations_url": "https://api.github.com/users/raichoo/orgs",
                "received_events_url": "https://api.github.com/users/raichoo/received_events",
                "repos_url": "https://api.github.com/users/raichoo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/raichoo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/raichoo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/raichoo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "https://github.com/neovim/neovim/issues/6052#issuecomment-277404351\r\n\r\ndoes it extend to the `synid()` type functions? that is one of the most powerful tools in indent scripts\r\n\r\n*edited*\r\n",
            "created_at": "2017-02-10T07:54:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-278880310",
            "id": 278880310,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODg4MDMxMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278880310/reactions"
            },
            "updated_at": "2017-02-10T08:33:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278880310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9332107?v=4",
                "events_url": "https://api.github.com/users/bounceme/events{/privacy}",
                "followers_url": "https://api.github.com/users/bounceme/followers",
                "following_url": "https://api.github.com/users/bounceme/following{/other_user}",
                "gists_url": "https://api.github.com/users/bounceme/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bounceme",
                "id": 9332107,
                "login": "bounceme",
                "node_id": "MDQ6VXNlcjkzMzIxMDc=",
                "organizations_url": "https://api.github.com/users/bounceme/orgs",
                "received_events_url": "https://api.github.com/users/bounceme/received_events",
                "repos_url": "https://api.github.com/users/bounceme/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bounceme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bounceme/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bounceme",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "oh. this about syntax based on indentation, not indenting. carry on. hah",
            "created_at": "2017-02-10T08:28:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-278885777",
            "id": 278885777,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODg4NTc3Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278885777/reactions"
            },
            "updated_at": "2017-02-10T08:28:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278885777",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9332107?v=4",
                "events_url": "https://api.github.com/users/bounceme/events{/privacy}",
                "followers_url": "https://api.github.com/users/bounceme/followers",
                "following_url": "https://api.github.com/users/bounceme/following{/other_user}",
                "gists_url": "https://api.github.com/users/bounceme/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bounceme",
                "id": 9332107,
                "login": "bounceme",
                "node_id": "MDQ6VXNlcjkzMzIxMDc=",
                "organizations_url": "https://api.github.com/users/bounceme/orgs",
                "received_events_url": "https://api.github.com/users/bounceme/received_events",
                "repos_url": "https://api.github.com/users/bounceme/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bounceme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bounceme/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bounceme",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@raichoo you can use `synstack()` as long as the syntax knows the start and end of each block. ",
            "created_at": "2017-02-10T08:31:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-278886212",
            "id": 278886212,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODg4NjIxMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278886212/reactions"
            },
            "updated_at": "2017-02-10T08:31:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278886212",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9332107?v=4",
                "events_url": "https://api.github.com/users/bounceme/events{/privacy}",
                "followers_url": "https://api.github.com/users/bounceme/followers",
                "following_url": "https://api.github.com/users/bounceme/following{/other_user}",
                "gists_url": "https://api.github.com/users/bounceme/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bounceme",
                "id": 9332107,
                "login": "bounceme",
                "node_id": "MDQ6VXNlcjkzMzIxMDc=",
                "organizations_url": "https://api.github.com/users/bounceme/orgs",
                "received_events_url": "https://api.github.com/users/bounceme/received_events",
                "repos_url": "https://api.github.com/users/bounceme/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bounceme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bounceme/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bounceme",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Indented blocks is something I tried to tackle with [braceless.vim](https://github.com/tweekmonster/braceless.vim).  It works pretty well but is a little heavy-handed with regex.  Since it was my first \"serious\" plugin, I went a little overboard with its features and it needs to be refactored.  But, I tried to make it generic enough to serve as a kind of framework for indented filetypes.\r\n\r\nEvery time I think about refactoring it, I come back to the thought that it would be best if Vim had a builtin PEG/BNF parser so it could actually understand the structure of certain filetypes.  I guess Haskell doesn't have such a grammar description, but in [Python's][1], indented bodies could be handled by finding `suite` symbols.  The problem is I have absolutely no idea how to even get started with it 😬\r\n\r\n[1]: https://github.com/python/cpython/blob/master/Grammar/Grammar",
            "created_at": "2017-02-10T14:04:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-278948990",
            "id": 278948990,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODk0ODk5MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278948990/reactions"
            },
            "updated_at": "2017-02-10T14:04:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278948990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111942?v=4",
                "events_url": "https://api.github.com/users/tweekmonster/events{/privacy}",
                "followers_url": "https://api.github.com/users/tweekmonster/followers",
                "following_url": "https://api.github.com/users/tweekmonster/following{/other_user}",
                "gists_url": "https://api.github.com/users/tweekmonster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tweekmonster",
                "id": 111942,
                "login": "tweekmonster",
                "node_id": "MDQ6VXNlcjExMTk0Mg==",
                "organizations_url": "https://api.github.com/users/tweekmonster/orgs",
                "received_events_url": "https://api.github.com/users/tweekmonster/received_events",
                "repos_url": "https://api.github.com/users/tweekmonster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tweekmonster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tweekmonster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tweekmonster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@tweekmonster [scintillua](https://foicica.com/scintillua/) has a bunch of PEG lexers already written. Even [vis editor](https://github.com/martanne/vis/tree/master/lua) uses them. Lua will be built-in to Nvim before the end of the month...\r\n\r\nThey are lexers, not parsers. But it's using LPEG so there's already something to work with.",
            "created_at": "2017-02-10T14:13:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-278951162",
            "id": 278951162,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODk1MTE2Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278951162/reactions"
            },
            "updated_at": "2017-02-10T14:13:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278951162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk That's pretty awesome!  I'll need to spruce up my Lua to tinker with it.\r\n\r\nThe lexers would still be good for simplifying syntax highlighting.  scintillua could make it possible to label text regions the way TextMate does, too.  Somewhat related article about how VSCode stores grammar tokens: https://code.visualstudio.com/blogs/2017/02/08/syntax-highlighting-optimizations",
            "created_at": "2017-02-10T15:19:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-278972240",
            "id": 278972240,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODk3MjI0MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278972240/reactions"
            },
            "updated_at": "2017-02-10T15:19:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/278972240",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111942?v=4",
                "events_url": "https://api.github.com/users/tweekmonster/events{/privacy}",
                "followers_url": "https://api.github.com/users/tweekmonster/followers",
                "following_url": "https://api.github.com/users/tweekmonster/following{/other_user}",
                "gists_url": "https://api.github.com/users/tweekmonster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tweekmonster",
                "id": 111942,
                "login": "tweekmonster",
                "node_id": "MDQ6VXNlcjExMTk0Mg==",
                "organizations_url": "https://api.github.com/users/tweekmonster/orgs",
                "received_events_url": "https://api.github.com/users/tweekmonster/received_events",
                "repos_url": "https://api.github.com/users/tweekmonster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tweekmonster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tweekmonster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tweekmonster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "If plugins switch to the new api for highlighting that will affect many plugins that use syntax information. Autocompletion , indent , tons of scripts in default runtime, etc.",
            "created_at": "2017-02-10T17:57:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-279017299",
            "id": 279017299,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTAxNzI5OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279017299/reactions"
            },
            "updated_at": "2017-02-10T17:57:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279017299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9332107?v=4",
                "events_url": "https://api.github.com/users/bounceme/events{/privacy}",
                "followers_url": "https://api.github.com/users/bounceme/followers",
                "following_url": "https://api.github.com/users/bounceme/following{/other_user}",
                "gists_url": "https://api.github.com/users/bounceme/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bounceme",
                "id": 9332107,
                "login": "bounceme",
                "node_id": "MDQ6VXNlcjkzMzIxMDc=",
                "organizations_url": "https://api.github.com/users/bounceme/orgs",
                "received_events_url": "https://api.github.com/users/bounceme/received_events",
                "repos_url": "https://api.github.com/users/bounceme/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bounceme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bounceme/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bounceme",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bounceme That's the whole point of my request, knowing where the block starts and where it ends. I'm already using `synstack()` in `haskell-vim` but I can't to this for blocks that are delimited by their indentation.\r\n\r\n@tweekmonster: There is a syntax reference for Haskell https://www.haskell.org/onlinereport/syntax-iso.html.",
            "created_at": "2017-02-10T18:09:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-279020560",
            "id": 279020560,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTAyMDU2MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279020560/reactions"
            },
            "updated_at": "2017-02-10T18:09:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279020560",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/151506?v=4",
                "events_url": "https://api.github.com/users/raichoo/events{/privacy}",
                "followers_url": "https://api.github.com/users/raichoo/followers",
                "following_url": "https://api.github.com/users/raichoo/following{/other_user}",
                "gists_url": "https://api.github.com/users/raichoo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/raichoo",
                "id": 151506,
                "login": "raichoo",
                "node_id": "MDQ6VXNlcjE1MTUwNg==",
                "organizations_url": "https://api.github.com/users/raichoo/orgs",
                "received_events_url": "https://api.github.com/users/raichoo/received_events",
                "repos_url": "https://api.github.com/users/raichoo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/raichoo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/raichoo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/raichoo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> If plugins switch to the new api for highlighting that will affect many plugins that use syntax information. Autocompletion , indent , tons of scripts in default runtime, etc.\r\n\r\n@bounceme Are you talking about my comment about simplifying syntax highlighting?  I wouldn't think so.  In my mind, it would be something like:\r\n\r\n```vim\r\nsyntax lex pythonFunction python.function\r\n```\r\n\r\nBesides, syntax-dependent matching has always been flaky in my experience.  Syntax group names aren't exactly codified and using a plugin for improved syntax will eventually break some plugin that only expected the built-in groups.\r\n\r\n> There is a syntax reference for Haskell \r\n\r\nI stand corrected!  Is there a loadable text version of it that's maintained?\r\n\r\n---\r\n\r\nI've been mulling over this issue a little.  Expanding on the example @raichoo first posted, It might be nice to define `syn-indent` as something like:\r\n\r\n```vim\r\nsyntax region indentDoBlock start=\"\\<do\\>\" skip=\"^\\s*$\" transparent indent=1\r\n```\r\n\r\nExcept `end=` is ignored since it would be inferred.  The end is found by scanning the subsequent lines for indentation that's >= `indent() + synindent`, while skipping lines that shouldn't be evaluated, and stopping at a line that has printable text and indentation < `indent() + synindent`.  It's probably not the best idea, but a companion function `synregion(group[, lnum, col])` could return the start and end of syntax group for scripting.  It'd make it easier to have operators that are based on the how the user sees the syntax.  Like `ci\"` could work the way you'd expect for multiline strings.\r\n\r\n@ZyX-I The biggest problem I had with `&indentexpr` (and `&foldexpr`) for indented languages is that there's no way to tell them to skip lines.  When I was working on indent/folding for Python, each line that's evaluated required scanning backwards to determine the correct indentation level for the current line.  It really slowed things down if a function body spanned 100 lines when using the `=` motion.  After finding the start of the indented block, it would be possible to scan forward to get the end of the indent block and return the indent levels of all lines involved in that single `&indentexpr` call.  In a Python script that has 5000 lines and no indentation, `&indentexpr` could only need one call.  The best way to deal with this currently is to cache the work for subsequent `&indentexpr` calls, but it still results in wasted time and requires cache management.",
            "created_at": "2017-02-11T18:18:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-279165071",
            "id": 279165071,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTE2NTA3MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279165071/reactions"
            },
            "updated_at": "2017-02-11T18:18:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279165071",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111942?v=4",
                "events_url": "https://api.github.com/users/tweekmonster/events{/privacy}",
                "followers_url": "https://api.github.com/users/tweekmonster/followers",
                "following_url": "https://api.github.com/users/tweekmonster/following{/other_user}",
                "gists_url": "https://api.github.com/users/tweekmonster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tweekmonster",
                "id": 111942,
                "login": "tweekmonster",
                "node_id": "MDQ6VXNlcjExMTk0Mg==",
                "organizations_url": "https://api.github.com/users/tweekmonster/orgs",
                "received_events_url": "https://api.github.com/users/tweekmonster/received_events",
                "repos_url": "https://api.github.com/users/tweekmonster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tweekmonster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tweekmonster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tweekmonster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I meant for `nvim_buf_add_highlight()` . my issue is that even if highlighting is semantically perfect using the `Matchaddpos` like function, no information will be provided to other vimscript which uses the conventional `synId()` and `synstack()` functions ",
            "created_at": "2017-02-11T19:13:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-279168683",
            "id": 279168683,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTE2ODY4Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279168683/reactions"
            },
            "updated_at": "2017-02-11T19:13:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279168683",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9332107?v=4",
                "events_url": "https://api.github.com/users/bounceme/events{/privacy}",
                "followers_url": "https://api.github.com/users/bounceme/followers",
                "following_url": "https://api.github.com/users/bounceme/following{/other_user}",
                "gists_url": "https://api.github.com/users/bounceme/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bounceme",
                "id": 9332107,
                "login": "bounceme",
                "node_id": "MDQ6VXNlcjkzMzIxMDc=",
                "organizations_url": "https://api.github.com/users/bounceme/orgs",
                "received_events_url": "https://api.github.com/users/bounceme/received_events",
                "repos_url": "https://api.github.com/users/bounceme/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bounceme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bounceme/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bounceme",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> @ZyX-I The biggest problem I had with &indentexpr (and &foldexpr) for indented languages is that there's no way to tell them to skip lines.\r\n\r\n`prevnonblank()` ? or :\r\n```\r\nif getline('.') is ''\r\n  return -1\r\nendif\r\n````",
            "created_at": "2017-02-12T18:34:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-279238031",
            "id": 279238031,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTIzODAzMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279238031/reactions"
            },
            "updated_at": "2017-02-12T18:34:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279238031",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9332107?v=4",
                "events_url": "https://api.github.com/users/bounceme/events{/privacy}",
                "followers_url": "https://api.github.com/users/bounceme/followers",
                "following_url": "https://api.github.com/users/bounceme/following{/other_user}",
                "gists_url": "https://api.github.com/users/bounceme/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bounceme",
                "id": 9332107,
                "login": "bounceme",
                "node_id": "MDQ6VXNlcjkzMzIxMDc=",
                "organizations_url": "https://api.github.com/users/bounceme/orgs",
                "received_events_url": "https://api.github.com/users/bounceme/received_events",
                "repos_url": "https://api.github.com/users/bounceme/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bounceme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bounceme/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bounceme",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> prevnonblank() ? or :\r\n\r\nNo, I'm not talking about skipping blank lines.  If the `&indentexpr` function is run on an entire script like this:\r\n\r\n```python\r\n   1. def test():\r\n   2.     # body start\r\n3-99.     # ...\r\n 100.     # body end\r\n```\r\n\r\nSince I can parse the function body as an indented block for operators, I can determine what the indent level is for lines 2-100 because of what's on line 1, but I can only return the indent level for the current line being evaluated.  `&indentexpr` is run on each line, and in each call the block is parsed scanning back to line 1 to determine the current line's indent level.  So, work is repeated on each line and taking longer as the line number increases.  Additionally, caching is a pain because there isn't an easy way to create a cache that's only for the current `&indentexpr` range.\r\n\r\nThis isn't a huge problem when it's called while editing with `&smartindent` enabled, but reformatting a large range becomes painfully slow.  It's the same problem with `&foldexpr`, but it leads to a worse experience since it's ran on an entire buffer when it's loaded.",
            "created_at": "2017-02-12T20:24:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-279245638",
            "id": 279245638,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTI0NTYzOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279245638/reactions"
            },
            "updated_at": "2017-02-12T20:24:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279245638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111942?v=4",
                "events_url": "https://api.github.com/users/tweekmonster/events{/privacy}",
                "followers_url": "https://api.github.com/users/tweekmonster/followers",
                "following_url": "https://api.github.com/users/tweekmonster/following{/other_user}",
                "gists_url": "https://api.github.com/users/tweekmonster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tweekmonster",
                "id": 111942,
                "login": "tweekmonster",
                "node_id": "MDQ6VXNlcjExMTk0Mg==",
                "organizations_url": "https://api.github.com/users/tweekmonster/orgs",
                "received_events_url": "https://api.github.com/users/tweekmonster/received_events",
                "repos_url": "https://api.github.com/users/tweekmonster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tweekmonster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tweekmonster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tweekmonster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yea, random access lexing would be very hard for that example, https://github.com/pangloss/vim-javascript/blob/master/indent/javascript.vim#L224 was how I did something similar. that works for when only one statement is expected in a braceless context though",
            "created_at": "2017-02-12T20:31:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/6052#issuecomment-279246313",
            "id": 279246313,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/6052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTI0NjMxMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279246313/reactions"
            },
            "updated_at": "2017-02-12T20:31:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/279246313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9332107?v=4",
                "events_url": "https://api.github.com/users/bounceme/events{/privacy}",
                "followers_url": "https://api.github.com/users/bounceme/followers",
                "following_url": "https://api.github.com/users/bounceme/following{/other_user}",
                "gists_url": "https://api.github.com/users/bounceme/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bounceme",
                "id": 9332107,
                "login": "bounceme",
                "node_id": "MDQ6VXNlcjkzMzIxMDc=",
                "organizations_url": "https://api.github.com/users/bounceme/orgs",
                "received_events_url": "https://api.github.com/users/bounceme/received_events",
                "repos_url": "https://api.github.com/users/bounceme/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bounceme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bounceme/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bounceme",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 23,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/6052/comments",
    "created_at": "2017-02-03T16:47:35Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/6052/events",
    "html_url": "https://github.com/neovim/neovim/issues/6052",
    "id": 205209447,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "regex syntax or non-regex parsing, lpeg, grammars",
            "id": 531600085,
            "name": "syntax",
            "node_id": "MDU6TGFiZWw1MzE2MDAwODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/syntax"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/6052/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 285,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 339,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-07-04T21:53:41Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWUyMDUyMDk0NDc=",
    "number": 6052,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/6052/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/6052/timeline",
    "title": "syntax: \"indent\" grouping",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:22Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/6052",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/151506?v=4",
        "events_url": "https://api.github.com/users/raichoo/events{/privacy}",
        "followers_url": "https://api.github.com/users/raichoo/followers",
        "following_url": "https://api.github.com/users/raichoo/following{/other_user}",
        "gists_url": "https://api.github.com/users/raichoo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/raichoo",
        "id": 151506,
        "login": "raichoo",
        "node_id": "MDQ6VXNlcjE1MTUwNg==",
        "organizations_url": "https://api.github.com/users/raichoo/orgs",
        "received_events_url": "https://api.github.com/users/raichoo/received_events",
        "repos_url": "https://api.github.com/users/raichoo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/raichoo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/raichoo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/raichoo",
        "user_view_type": "public"
    }
}