{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "# Problem\n\nTwo different (but related) goals:\n\n- Enhance shada as a general store for plugins to persist things like cached data, session settings, etc. https://github.com/neovim/neovim/issues/984#issuecomment-49879240\n- Standard/convenient mechanism to share state between Nvim peer instances.\n\n# Proposal\n\n- replace shada/viminfo with SQLite? http://www.sqlite.org/whentouse.html\n- or fix shada's concurrency problems...\n    - https://github.com/neovim/neovim/issues/8587\n\n# Related\n\n- `context.c`, `vim.with()` https://github.com/neovim/neovim/issues/19832",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "It seems good.  Many plugins have implemented original cache features(for example, neocomplete/neocomplcache, vimfiler, unite.vim, ctrlp.vim, neomru.vim etc).\n",
            "created_at": "2014-09-15T12:25:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-55583045",
            "id": 55583045,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTgzMDQ1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55583045/reactions"
            },
            "updated_at": "2014-09-15T12:25:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55583045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I stand by my previous [argument](https://github.com/neovim/neovim/pull/1130#issuecomment-55277812): Why add more C code when something like [this](https://gist.github.com/tarruda/d89adc85913a2b634ec1) would suffice?\n\n> Many plugins have implemented original cache features(for example, neocomplete/neocomplcache, vimfiler, unite.vim, ctrlp.vim, neomru.vim etc).\n\nI think that is a package management problem. If Nvim creates standards for dependency information, nvim-specific packages can simply declare dependency on a persistence plugin. \n\nFor very generic features such as persistence, we can bundle persistence plugins with nvim runtime, but I fear there will always be plugins that require extra features and will end up reimplementing packaged plugins \n",
            "created_at": "2014-09-15T12:30:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-55583490",
            "id": 55583490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTgzNDkw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55583490/reactions"
            },
            "updated_at": "2014-09-15T12:30:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55583490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "\n> For very generic features such as persistence, we can bundle persistence plugins with nvim runtime, but I fear there will always be plugins that require extra features and will end up reimplementing packaged plugins \n\nI do not think there is any need to _add_ this feature. It would be good to _enhance_ existing one: Vim is capable of storing some variable values in viminfo and sessions (stored variables are different). But this is hardly useful if you have more then one Vim instance or you want data to be saved immediately in case of crashes. Solving these two issues for viminfo in general would be good. I think that was already requested (in Vim it definitely was).\n",
            "created_at": "2014-09-15T16:00:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-55612325",
            "id": 55612325,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjEyMzI1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55612325/reactions"
            },
            "updated_at": "2025-03-29T14:39:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55612325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Vim is capable of storing some variable values in viminfo and sessions (stored variables are different). But this is hardly useful if you have more then one Vim instance or you want data to be saved immediately in case of crashes. Solving these two issues for viminfo in general would be good. I think that was already requested (in Vim it definitely was).\n\nIn that case I see a good opportunity for code removal. Perhaps we can reimplement viminfo by delegating to sqlite and not only provide a generic storage solution but also remove a lot of code.\n",
            "created_at": "2014-09-15T19:50:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-55647884",
            "id": 55647884,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjQ3ODg0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55647884/reactions"
            },
            "updated_at": "2014-09-15T19:50:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55647884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Using SQLite as a simple key-value store sounds dubious. On the other hand backends become easily switchable with `NvimPersistenceService`-like approach.\n",
            "created_at": "2014-09-16T15:06:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-55757217",
            "id": 55757217,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzU3MjE3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55757217/reactions"
            },
            "updated_at": "2014-09-16T15:06:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55757217",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4",
                "events_url": "https://api.github.com/users/nagisa/events{/privacy}",
                "followers_url": "https://api.github.com/users/nagisa/followers",
                "following_url": "https://api.github.com/users/nagisa/following{/other_user}",
                "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nagisa",
                "id": 679122,
                "login": "nagisa",
                "node_id": "MDQ6VXNlcjY3OTEyMg==",
                "organizations_url": "https://api.github.com/users/nagisa/orgs",
                "received_events_url": "https://api.github.com/users/nagisa/received_events",
                "repos_url": "https://api.github.com/users/nagisa/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nagisa",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@nagisa If it is used for viminfo it will not be “a simple key-value store”.\n\n> In that case I see a good opportunity for code removal. Perhaps we can reimplement viminfo by delegating to sqlite and not only provide a generic storage solution but also remove a lot of code.\n\nActually this problem has a whole lots of variants of fixing: check out how zsh deals with history. Basically you can (at exit = “at exit or when `:wviminfo` is called”)\n1. Simply replace history in the file with the new one at exit. This is current solution and I guess nearly nobody prefers to see it this way.\n2. Simply append the history to the file and do (not) forget to get rid of duplicate lines.\n3. Merge history at exit according to the time each item appeared. Requires storing these times (probably a good idea in any case) and doing something with `histadd()`/`histdel()` (I know at least one plugin that uses this for having separate history for specific `input()` prompt). Actually nearly the only sane thing that can be done with these specific functions is simply assigning time recorded when `histadd()` is called, but I would request a modification which will allow saving and restoring times (i.e. this function accepting a list of lists as argument: `histadd([['item1', 1257364], ['item2', 3642587]])` (iterating over a list and calling histadd() for each item is rather slow)). Also a function `histmerge()` to merge two such lists (`input()`-local history is stored separately) and a special flag for `histget()` to return a list of lists (calling it multiple times is not fun either BTW) (or just `histsave()` function).\n4. Same, but merge history immediately as item appears.\n5. Like 4., but replace instance history with merged one after merging (i.e. implement fully shared history, zsh has an option for this).\n\nSince last four solutions will likely have their adepts there is a need for a new option(s). (Maybe the first one also will, and it should be easy to implement.)\n\n---\n\nBut this is history. We can simply use zsh experience with it. Sharing variables consistenly and predictably is another problem:\n1. Should the value of the variable change when this value changes in the database?\n2. If two Nvim’s updated variable separately what should be stored in the database?\n\nI would propose the following variant:\n1. By default last write wins, variables are read at startup and never changed.\n2. All stored variables should have `changedtick` and `shared` fields: first is not used by default (but is incremented on each write), second determines whether Nvim should always use current value from the database.\n3. If one Nvim instance tries to write variable with to the database it is simply written if `changedtick` did not change or no merge handler registered for the variable in this Nvim instance.\n4. If `changedtick` appeared to change after the last read and write is going to happen and merge handler is registered for the variable it is called like this: `Handler(old_value, new_database_value, value_being_written)`. Its output is written to the database.\n\nThis variant is rather flexible, but immediately raises issues with synchronization (i.e. one needs to lock variable in the database when writing process starts up until `Handler` is called and unlock it on write or crash) and is harder to implement then just “always read value from database and immediately write it on request” or “read all values once and immediately write”.\n\n---\n\nI do not think that implementing sharing feature properly will result in less lines then we currently have. Though there probably should be a library solution.\n",
            "created_at": "2014-09-16T20:33:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-55808938",
            "id": 55808938,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODA4OTM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55808938/reactions"
            },
            "updated_at": "2014-09-16T20:33:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55808938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I do not think that implementing sharing feature properly will result in less lines then we currently have. Though there probably should be a library solution.\n\nIf we store no shared state in memory and simply talk to sqlite every time we need to read or update a value, there will be no need to implement the changedtick/shared logic you mentioned.\n- The filesystem is transparently providing shared memory\n- Concurrency between multiple processes is handled by sqlite: There's no possibility of conflicts since sqlite uses exclusive locks for writing, other processes wanting to read or write simply wait in a queue\n\nFrom the website: \"SQLite is designed to compete with fopen()\", which is exactly what vim does right now, and it's almost certain that using SQLite will result in less lines of code than what we currently have\n",
            "created_at": "2014-09-17T07:59:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-55861131",
            "id": 55861131,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODYxMTMx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55861131/reactions"
            },
            "updated_at": "2019-07-01T12:39:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55861131",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "On September 17, 2014 11:59:43 AM GMT+03:00, Thiago de Arruda notifications@github.com wrote:\n\n> > I do not think that implementing sharing feature properly will result\n> > in less lines then we currently have. Though there probably should be a\n> > library solution.\n> \n> If we store no shared state in memory and simply talk to sqlite every\n> time we need to read or update a value, there will be no need to\n> implement the changedtick/shared logic you mentioned.\n\nNo. This will only mean that plugins will have implement this on their own. And some plugins will behave in an unexpected fashion, because they do not expect their variables to change.\n\nSpecifically with the input()-local history stored in the viminfo variable it will mean that user will suddenly mention that he sees the string which he just entered in another Nvim instance and his string was gone.\n\nAlso note that the following code is buggy without support from the Nvim side:\n\n```\nif g:INPUT_CHANGEDTICK != saved_changedtick\n    let g:INPUT_HISTORY = histmerge(saved_history, g:INPUT_HISTORY)\n    let g:INPUT_CHANGEDTICK += 1\nendif\ncall s:clear_history('=')\ncall s:set_history('=', g:INPUT_HISTORY)\n```\n\n: g:INPUT_HISTORY may change after histmerge() started, but before it finished, resulting in some changes dropped.\n\n> - The filesystem is transparently providing shared memory\n> - Concurrency between multiple processes is handled by sqlite: There's\n>   no possibility of conflicts since sqlite uses exclusive locks for\n>   writing, other processes wanting to read or write simply wait in a\n>   queue\n> \n> From the website: \"SQLite is designed to compete with fopen()\", which\n> is exactly what vim does right now, and it's almost certain that using\n> SQLite will result in less lines of code than what we currently have\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/1180#issuecomment-55861131\n",
            "created_at": "2014-09-17T13:20:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-55891890",
            "id": 55891890,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODkxODkw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55891890/reactions"
            },
            "updated_at": "2014-09-17T13:20:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55891890",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "+1 for providing a simple consistent interface to plugins for persisted and shared data (no matter what backend solution is used). For example, in a python plugin this might be expressed like this:\n\n``` python\nwith vim.sharedstorage(\"myplugindata\",'rw') as state:\n    if 'history' in state:\n        append_deduplicate(state['history'],item)\n    else:\n        # state is emtpy dict if new storage\n        state['history'] = [item]\n```\n\nwhere the code inside the `with` block is an atomic update, and `state` is a dict of json-serializable (or similar) data.\n",
            "created_at": "2014-09-17T17:01:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-55925577",
            "id": 55925577,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTI1NTc3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55925577/reactions"
            },
            "updated_at": "2014-09-17T17:01:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55925577",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bfredl I was only thinking about enhancing existing solution. And that one uses ALL_UPPER variables only. Python has its own solutions and it is better to use them or use Nvim variables (_without_ namespaces or context managers) if they are sufficient. Otherwise we will end up having yet another all-in-one library, that can do any kind of things, but none of them can be done particularly good.\n\nSuggestion with merge functions is a simple fix for “I want to have tools for working with shared state from VimL, but I do not want to extend VimL and want to be rather compatible (`nvim#set_shared_status(varname, 'immediate'|'default')` and `nvim#set_merge_handler(varname, funcref)` can just be made no-op in Vim)”. Merge handlers with changed ticks seem to be the easiest to implement out of the set of flexible solutions.\n",
            "created_at": "2014-09-17T18:29:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-55938636",
            "id": 55938636,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTM4NjM2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55938636/reactions"
            },
            "updated_at": "2014-09-17T18:29:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55938636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "SQLite seems like overkill for a key/value store. Perhaps [Level DB](http://leveldb.org/) would be a better fit? Extremely small and designed for this precise job.\n",
            "created_at": "2014-10-08T20:10:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-58419264",
            "id": 58419264,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDE5MjY0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/58419264/reactions"
            },
            "updated_at": "2014-10-08T20:10:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/58419264",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/270831?v=4",
                "events_url": "https://api.github.com/users/sorentwo/events{/privacy}",
                "followers_url": "https://api.github.com/users/sorentwo/followers",
                "following_url": "https://api.github.com/users/sorentwo/following{/other_user}",
                "gists_url": "https://api.github.com/users/sorentwo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sorentwo",
                "id": 270831,
                "login": "sorentwo",
                "node_id": "MDQ6VXNlcjI3MDgzMQ==",
                "organizations_url": "https://api.github.com/users/sorentwo/orgs",
                "received_events_url": "https://api.github.com/users/sorentwo/received_events",
                "repos_url": "https://api.github.com/users/sorentwo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sorentwo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sorentwo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sorentwo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The bigger problem with using SQLite, regardless of what you want to store in it, is that you will run into locking problems. Even if you enable wal, there are still too many locking problems that occur during concurrent writing.\n",
            "created_at": "2014-10-15T10:56:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-59188985",
            "id": 59188985,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTg4OTg1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/59188985/reactions"
            },
            "updated_at": "2014-10-15T10:57:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/59188985",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7908?v=4",
                "events_url": "https://api.github.com/users/urandom/events{/privacy}",
                "followers_url": "https://api.github.com/users/urandom/followers",
                "following_url": "https://api.github.com/users/urandom/following{/other_user}",
                "gists_url": "https://api.github.com/users/urandom/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/urandom",
                "id": 7908,
                "login": "urandom",
                "node_id": "MDQ6VXNlcjc5MDg=",
                "organizations_url": "https://api.github.com/users/urandom/orgs",
                "received_events_url": "https://api.github.com/users/urandom/received_events",
                "repos_url": "https://api.github.com/users/urandom/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/urandom/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/urandom/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/urandom",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I do not think there is any need to _add_ this feature. It would be good to _enhance_ existing one: Vim is capable of storing some variable values in viminfo and sessions (stored variables are different). But this is hardly useful if you have more then one Vim instance or you want data to be saved immediately in case of crashes. Solving these two issues for viminfo in general would be good.\n> [...]\n> Sharing variables consistenly and predictably is another problem:\n> [...]\n> All stored variables should have `changedtick` and `shared` fields\n\n@ZyX-I Is your vision for shada compatible with this? I changed the issue title to reflect this.\n",
            "created_at": "2015-08-11T16:34:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-129958732",
            "id": 129958732,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTk1ODczMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/129958732/reactions"
            },
            "updated_at": "2019-07-01T12:41:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/129958732",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk You can add `changedtick`, `shared` or _whatever_ fields to stored variables in the future due to forward compatibility support scribed in the ShaDa standard, but ShaDa cannot really replace a shared database with _shared read-write access_. Main purpose was always _merging_ data from different NeoVim instances on their _exit_ (once), so that you can normally use more then one NeoVim. Also there is nothing like `changedtick` and `shared` fields now: in fact I _did not_ add any features to the `eval.c` that will allow merging the variables, so variables have the worst merging code in the ShaDa support code: this code simply dumps _all_ variables with needed names and then copies variables from existing ShaDa file, but only those that were not already dumped. Anything else needs _at least_ attaching timestamps to variable writes which I think should make eval.c even slower.\n\nSaving data immediately in case of crashes is irrelevant to ShaDa standard and is not in its support code. You may e.g. run `:wshada` on CursorHold and this is fine as long as two CursorHold events are unlikely to run at the same time. Otherwise you need to invent lockfiles or something like this. You can as well run `rshada` and `wshada` on CursorHold if you need some sharing. Note: simultaneous CursorHold’s are much more likely with plugins like Python-mode-klen (if they have not changed something): they, during or after the event run commands that move cursor in order to run CursorHold event once again after current one finished.\n",
            "created_at": "2015-08-11T16:49:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-129965020",
            "id": 129965020,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTk2NTAyMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/129965020/reactions"
            },
            "updated_at": "2015-08-11T16:49:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/129965020",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Otherwise you need to invent lockfiles or something like this\n\nWell, we have a IPC mechanism (sockets) that can allow all Neovim processes to communicate...\n",
            "created_at": "2015-08-11T17:02:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-129968902",
            "id": 129968902,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTk2ODkwMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/129968902/reactions"
            },
            "updated_at": "2015-08-11T17:02:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/129968902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk You may look at the universal variables support in fish. I do not know the details, but it now:\n1. Needs no fishd (universal variables used to use a daemon that managed them).\n2. Uses plain file.\n3. Does not have master fish.\n\n. Maybe something like this may be used to construct a plugin that shares variables using ShaDa files. But I did not investigate\n1. How fish instances know that variable was updated.\n2. How file writes are synchronized.\n\nI do not really understand how using sockets may solve the problem without bringing more (e.g. because to synchronize variables you used a P2P network between NeoVim instances).\n",
            "created_at": "2015-08-11T17:13:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-129975291",
            "id": 129975291,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTk3NTI5MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/129975291/reactions"
            },
            "updated_at": "2015-08-11T17:13:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/129975291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Are you planning to support P2P across a network? I think I saw you mention D-BUS, which is mainly designed for IPC on a single host AFAIK. One of nvim's appealing features is that the UI can be on a different host from the editor, and it's even possible for one UI instance to control multiple vims on multiple hosts. But users would expect things like clipboards to be synced on the host running the UI without relying on the editors and files they're editing all being on the same host. So I think there should be some way that remote UIs can interact directly with this sort of shared state.",
            "created_at": "2017-04-28T12:51:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-297989710",
            "id": 297989710,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5Nzk4OTcxMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/297989710/reactions"
            },
            "updated_at": "2019-07-01T12:46:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/297989710",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8783151?v=4",
                "events_url": "https://api.github.com/users/realh/events{/privacy}",
                "followers_url": "https://api.github.com/users/realh/followers",
                "following_url": "https://api.github.com/users/realh/following{/other_user}",
                "gists_url": "https://api.github.com/users/realh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/realh",
                "id": 8783151,
                "login": "realh",
                "node_id": "MDQ6VXNlcjg3ODMxNTE=",
                "organizations_url": "https://api.github.com/users/realh/orgs",
                "received_events_url": "https://api.github.com/users/realh/received_events",
                "repos_url": "https://api.github.com/users/realh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/realh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/realh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/realh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@realh UIs can, of course, connect to remote nvims across a network already, and local nvims can send commands to remote nvims. Whatever (network) connection used by the UI to communicate with a remote nvim can also be used by local nvims. If the client has any local nvim instances, one of them needs to be told about the remote connection, then its peer list will be broadcast to any other local nvims.\r\n\r\nFor receiving state from a remote nvim, local nvim would probably need to do some sort of polling.",
            "created_at": "2017-04-28T13:11:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/1180#issuecomment-297993794",
            "id": 297993794,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1180",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI5Nzk5Mzc5NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/297993794/reactions"
            },
            "updated_at": "2019-07-01T12:46:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/297993794",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 18,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/1180/comments",
    "created_at": "2014-09-15T06:51:15Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/1180/events",
    "html_url": "https://github.com/neovim/neovim/issues/1180",
    "id": 42745490,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "remote UI, --remote commands, p2p / peer-to-peer",
            "id": 2269137131,
            "name": "remote",
            "node_id": "MDU6TGFiZWwyMjY5MTM3MTMx",
            "url": "https://api.github.com/repos/neovim/neovim/labels/remote"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "save/restore editor state: shada, context, ctx, sessions, mksession",
            "id": 4449264023,
            "name": "editor-state",
            "node_id": "LA_kwDOAPphoM8AAAABCTJhlw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor-state"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/1180/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 707,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 637,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-03-31T13:15:01Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWU0Mjc0NTQ5MA==",
    "number": 1180,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/1180/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/1180/timeline",
    "title": "enhanced session/shada; shared (p2p) state",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-03-29T14:44:59Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/1180",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}