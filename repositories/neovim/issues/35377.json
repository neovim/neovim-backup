{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\n# I want to become contributor\n\nAnd here is the domain I want to help with. I saw builtin thing called `exrc` but it doesn't quite work for me. I want be able to dynamically execute some code when I open some project. So I decided to go with my own approach. It's pretty similar to `exrc` except I am sourcing those files manually. Not a big deal, since for me it's just:\n\n```\n:so ~/project/.nvim.lua\n```\n\nI primarily use those custom configs to make small, but annoying-to-do-everytime tweaks to my config. Like setting up `makeprg` and `errorformat` (can't be done via `compiler` because it's project-specific). Or redefining tabwidth without `.editorconfig` (since everyone in the team doesn't use `.editorconfig`). Or, finally, some tweaks to LSP.\n\nMy usual workflow is opening a tab per project and never leave nvim. I do not use multiplexers. So it is very important for such scripts to not pollute global namespace. I already know about `nvim_buf_create_user_command`, but this only works for buffers. I would like to see `nvim_tab_create_user_command` and I would like to contribute if that's something you see as a good idea. I do believe it will be useful for many people to be able to customize tab without polluting global namespace.\n\nAlso I don't know if there is a way to support tab-local options (like vim.opt_local). Addition of `tcd` for me a huge quality of life feature. I want to help with further extension of tab-local configurations.\n\n# Video Demo\n\nIt explains my workflow visually, so you have better idea:\n\nhttps://github.com/user-attachments/assets/deac0dc7-c0b2-40ff-b2b5-abeecd4d1f35",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> I don't know if there is a way to support tab-local options (like vim.opt_local)\n\nThere are tab-local variables (`vim.t`).\n\nNot clear what solution / expected outcome you are proposing.",
            "created_at": "2025-08-18T15:00:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/35377#issuecomment-3197292893",
            "id": 3197292893,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35377",
            "node_id": "IC_kwDOAPphoM6-ktFd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3197292893/reactions"
            },
            "updated_at": "2025-08-18T15:00:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3197292893",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > I don't know if there is a way to support tab-local options (like vim.opt_local)\n> \n> There are tab-local variables (`vim.t`).\n> \n> Not clear what solution / expected outcome you are proposing.\n\nOh, yeah, you are right. I completely forgot about that. But what about tab-local user commands? Is there a way to define one?",
            "created_at": "2025-08-18T15:10:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/35377#issuecomment-3197329769",
            "id": 3197329769,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35377",
            "node_id": "IC_kwDOAPphoM6-k2Fp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3197329769/reactions"
            },
            "updated_at": "2025-08-18T15:10:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3197329769",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46930374?v=4",
                "events_url": "https://api.github.com/users/y9san9/events{/privacy}",
                "followers_url": "https://api.github.com/users/y9san9/followers",
                "following_url": "https://api.github.com/users/y9san9/following{/other_user}",
                "gists_url": "https://api.github.com/users/y9san9/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/y9san9",
                "id": 46930374,
                "login": "y9san9",
                "node_id": "MDQ6VXNlcjQ2OTMwMzc0",
                "organizations_url": "https://api.github.com/users/y9san9/orgs",
                "received_events_url": "https://api.github.com/users/y9san9/received_events",
                "repos_url": "https://api.github.com/users/y9san9/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/y9san9/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/y9san9/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/y9san9",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "And something like:\n\n```lua\nvim.api.nvim_create_autocmd({ 'TabEnter', 'TabNew' }, {\n  callback = function ()\n    vim.api.nvim_create_user_command('MyTabCmd', function() end, {})\n  end\n})\n\nvim.api.nvim_create_autocmd('TabLeave', {\n  callback = function ()\n    vim.api.nvim_del_user_command('MyTabCommand')\n  end\n})\n```\n\nYou can ofc. extend it to check which tab you're in and stuff.",
            "created_at": "2025-08-19T09:46:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/35377#issuecomment-3200029638",
            "id": 3200029638,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35377",
            "node_id": "IC_kwDOAPphoM6-vJPG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3200029638/reactions"
            },
            "updated_at": "2025-08-19T09:46:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3200029638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Sorry, my response didn't reach you because of my Internet conditions.\n\nI see it's surely possible to emulate `nvim_tab_create_user_command` by this approach you suggested. But the same goes for already existing command `nvim_buf_create_user_command`. Don't you think that it will be much more convenient to have such a function builtin?\n\nAnd if you think it's a good idea, I can try to implement this and create a PR, so you don't need to waste time on this and you will have another contributor potentially for other stuff as well.",
            "created_at": "2025-08-20T10:29:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/35377#issuecomment-3205455667",
            "id": 3205455667,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35377",
            "node_id": "IC_kwDOAPphoM6_D18z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3205455667/reactions"
            },
            "updated_at": "2025-08-20T10:29:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3205455667",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46930374?v=4",
                "events_url": "https://api.github.com/users/y9san9/events{/privacy}",
                "followers_url": "https://api.github.com/users/y9san9/followers",
                "following_url": "https://api.github.com/users/y9san9/following{/other_user}",
                "gists_url": "https://api.github.com/users/y9san9/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/y9san9",
                "id": 46930374,
                "login": "y9san9",
                "node_id": "MDQ6VXNlcjQ2OTMwMzc0",
                "organizations_url": "https://api.github.com/users/y9san9/orgs",
                "received_events_url": "https://api.github.com/users/y9san9/received_events",
                "repos_url": "https://api.github.com/users/y9san9/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/y9san9/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/y9san9/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/y9san9",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Also from :h dev-api-name:\n\n> Do not add new nvim_buf/nvim_win/nvim_tabpage APIs, unless you are certain the concept will NEVER be applied to more than one \"scope\". That is, {topic} should be the TOPIC (\"ns\", \"extmark\", \"option\", …) that acts on the scope(s) (buf/win/tabpage/global), it should NOT be the scope. Instead the scope should be a parameter (typically manifest as mutually-exclusive buf/win/… flags like nvim_get_option_value(), or less commonly as a scope: string field like nvim_get_option_info2()).\n\nI think it's not a strong enough use case to add a new api function, but I leave that decision to the core team. ",
            "created_at": "2025-08-20T13:03:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/35377#issuecomment-3206251377",
            "id": 3206251377,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35377",
            "node_id": "IC_kwDOAPphoM6_G4Nx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3206251377/reactions"
            },
            "updated_at": "2025-08-20T13:12:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3206251377",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "\n@yochem Hello! Here is my implementation, but it suffers from 2 limitations that I can't solve:\n\n```lua\n-- Limitations:\n-- * Deleting this command is undefined behaviour\n-- * This implementation overrides existing global commands forever\nM.nvim_tabpage_create_user_command = function(name, command, options)\n    local tab = vim.api.nvim_get_current_tabpage()\n\n    vim.api.nvim_create_user_command(name, command, options)\n\n    local enterId = vim.api.nvim_create_autocmd('TabEnter', {\n        callback = function()\n            local enter = vim.api.nvim_get_current_tabpage()\n            if enter ~= tab then\n                return\n            end\n            vim.api.nvim_create_user_command(name, command, options)\n        end\n    })\n\n    local leaveTab = false\n\n    local leaveId = vim.api.nvim_create_autocmd('TabLeave', {\n        callback = function()\n            local leave = vim.api.nvim_get_current_tabpage()\n            leaveTab = leave == tab\n            if not leaveTab then\n                return\n            end\n            vim.api.nvim_del_user_command(name)\n        end\n    })\n\n    local closeId = nil\n\n    closeId = vim.api.nvim_create_autocmd('TabClosed', {\n        callback = function()\n            if not leaveTab then\n                return\n            end\n            vim.api.nvim_del_autocmd(enterId)\n            vim.api.nvim_del_autocmd(leaveId)\n            vim.api.nvim_del_autocmd(closeId)\n        end\n    })\nend\n```",
            "created_at": "2025-08-24T09:18:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/35377#issuecomment-3217965350",
            "id": 3217965350,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35377",
            "node_id": "IC_kwDOAPphoM6_zkEm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3217965350/reactions"
            },
            "updated_at": "2025-08-24T09:40:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3217965350",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46930374?v=4",
                "events_url": "https://api.github.com/users/y9san9/events{/privacy}",
                "followers_url": "https://api.github.com/users/y9san9/followers",
                "following_url": "https://api.github.com/users/y9san9/following{/other_user}",
                "gists_url": "https://api.github.com/users/y9san9/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/y9san9",
                "id": 46930374,
                "login": "y9san9",
                "node_id": "MDQ6VXNlcjQ2OTMwMzc0",
                "organizations_url": "https://api.github.com/users/y9san9/orgs",
                "received_events_url": "https://api.github.com/users/y9san9/received_events",
                "repos_url": "https://api.github.com/users/y9san9/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/y9san9/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/y9san9/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/y9san9",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "What if you define one single user command somewhere (e.g. in your vimrc), and then, in each of your `.nvim.lua`, tune only those internal parameters, i.e. reading `t:var` as mentioned, on `TabEnter,TabNew` for specialized behaviour? Doing so you can 1) have a persistent user command instead of managing it on the fly, 2) have a centralized place to reason about those variants for your projects, thus avoid [shotgun surgery](https://en.wikipedia.org/wiki/Shotgun_surgery) (say you have 10 projects that share the exact same `:UsrCmdFoo`, you need to update its implementation in 10 `.nvim.lua`), 3) extract it as a plugin and help people who need it. (the same result as being a contributor)\n\n> I do believe it will be useful for many people to be able to customize tab without polluting global namespace.\n\nNot sure how to cover this. On the other hand, let's say you've implemented this feature and get pollution-free namespace, but how do you avoid shotgun surgery? (in other words: Is \"polluting global namespace\" really a big problem? maybe I'm just fine with showing/seeing unused commands. You can also design those parameters to make them `<nop>` outside of the target tabpage)\n\nEdit: wording.",
            "created_at": "2025-09-08T20:33:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/35377#issuecomment-3267902975",
            "id": 3267902975,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35377",
            "node_id": "IC_kwDOAPphoM7CyD3_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3267902975/reactions"
            },
            "updated_at": "2025-09-09T06:07:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3267902975",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24765272?v=4",
                "events_url": "https://api.github.com/users/nyngwang/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyngwang/followers",
                "following_url": "https://api.github.com/users/nyngwang/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyngwang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyngwang",
                "id": 24765272,
                "login": "nyngwang",
                "node_id": "MDQ6VXNlcjI0NzY1Mjcy",
                "organizations_url": "https://api.github.com/users/nyngwang/orgs",
                "received_events_url": "https://api.github.com/users/nyngwang/received_events",
                "repos_url": "https://api.github.com/users/nyngwang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyngwang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyngwang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyngwang",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35377/comments",
    "created_at": "2025-08-18T06:49:10Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35377/events",
    "html_url": "https://github.com/neovim/neovim/issues/35377",
    "id": 3329411164,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "workspace/project concept, 'exrc'",
            "id": 8313009301,
            "name": "workspace-project",
            "node_id": "LA_kwDOAPphoM8AAAAB7350lQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/workspace-project"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35377/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 293,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 351,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-09-13T22:32:04Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM7Gcshc",
    "number": 35377,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35377/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35377/timeline",
    "title": "tab-local user commands (nvim_tab_create_user_command)",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-09-09T06:07:44Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35377",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/46930374?v=4",
        "events_url": "https://api.github.com/users/y9san9/events{/privacy}",
        "followers_url": "https://api.github.com/users/y9san9/followers",
        "following_url": "https://api.github.com/users/y9san9/following{/other_user}",
        "gists_url": "https://api.github.com/users/y9san9/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/y9san9",
        "id": 46930374,
        "login": "y9san9",
        "node_id": "MDQ6VXNlcjQ2OTMwMzc0",
        "organizations_url": "https://api.github.com/users/y9san9/orgs",
        "received_events_url": "https://api.github.com/users/y9san9/received_events",
        "repos_url": "https://api.github.com/users/y9san9/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/y9san9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/y9san9/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/y9san9",
        "user_view_type": "public"
    }
}