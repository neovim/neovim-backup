{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nIt took me a while to figure out what was happening here, but [snacks.nvim](https://github.com/folke/snacks.nvim/blob/main/lua/snacks/bigfile.lua#L38) adds a wildcard pattern to detect large files and set a `bigfile` filetype on it. \n\nI have a separate wildcard pattern in my config to assign the `clojure` filetype when a file has an appropriate shebang for babashka (eg: `#!/usr/bin/env bb`) so they don't _need_ to have a .clj extension.\n\nSince patterns are stored in `filetype.lua` in a map and then sorted based on that, and because `snacks.nvim` gets loaded *after* my personal configs, my wildcard pattern gets stepped on, and the file gets detected as type `bitbake` instead.\n\n### Steps to reproduce\n\n- Install `snacks.nvim` in whatever way preferred \n- Add another `.*` filetype pattern somewhere, eg:\n\n```lua\nvim.filetype.add({\n  pattern = {\n    [\".*\"] = {\n      function(_, bufnr)\n        local content = vim.api.nvim_buf_get_lines(bufnr, 0, 1, false)[1] or \"\"\n        if vim.startswith(content, \"#!/usr/bin/env bb\") then\n          return \"clojure\"\n        end\n      end,\n      { priority = -math.huge },\n    },\n  },\n})\n```\n\n- Notice that whichever pattern was loaded second \"wins.\" In my case, the pattern set above will not be respected and any file with the shebang being checked for will be detected as `bitbake`\n\n### Expected behavior\n\nSince the docs specifically recommend this approach for doing content-based matching, it'd be nice if both filetype detection patterns could work in harmony. \n\nAlternatively:\n- Add a way to add shebang-based filetype matches (eg `vim.filetype.add { shebang = { bb = 'clojure' } }` since that seems to exist in already in detect.luaâ€”although I'm not sure at what point it's picking up `bitbake` and whether this would be able to override that detection\n- I can set my pattern to eg `..*` which is distinct from `.*`. This works to get me unblocked for now but is very much a kludge\n\n\nThank you for your time!\n\n### Nvim version (nvim -v)\n\nTested on both v0.12.0-dev and v0.10.3\n\n### Vim (not Nvim) behaves the same?\n\nNo, this is nvim-specific\n\n### Operating system/version\n\nmacOS 15.4.1\n\n### Terminal name/version\n\niTerm2 3.5.11\n\n### $TERM environment variable\n\nxterm-256color\n\n### Installation\n\napt/brew",
    "closed_at": "2025-04-18T16:13:54Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This is a standard issue (plugins overriding config), with a standard solution: Put your customization under `after/`.\n\nIn this case, you can also play with `priority`.",
            "created_at": "2025-04-17T15:51:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/33515#issuecomment-2813400124",
            "id": 2813400124,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33515",
            "node_id": "IC_kwDOAPphoM6nsRQ8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2813400124/reactions"
            },
            "updated_at": "2025-04-17T15:52:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2813400124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Put your customization under after/.\n\nThis would, however, break the `snacks.nvim` functionality\n\n> In this case, you can also play with priority.\n\nI did try that, but due to the dict usage of `patterns` it has no effect.",
            "created_at": "2025-04-17T17:11:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/33515#issuecomment-2813583466",
            "id": 2813583466,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33515",
            "node_id": "IC_kwDOAPphoM6ns-Bq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2813583466/reactions"
            },
            "updated_at": "2025-04-17T17:11:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2813583466",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/816150?v=4",
                "events_url": "https://api.github.com/users/dhleong/events{/privacy}",
                "followers_url": "https://api.github.com/users/dhleong/followers",
                "following_url": "https://api.github.com/users/dhleong/following{/other_user}",
                "gists_url": "https://api.github.com/users/dhleong/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dhleong",
                "id": 816150,
                "login": "dhleong",
                "node_id": "MDQ6VXNlcjgxNjE1MA==",
                "organizations_url": "https://api.github.com/users/dhleong/orgs",
                "received_events_url": "https://api.github.com/users/dhleong/received_events",
                "repos_url": "https://api.github.com/users/dhleong/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dhleong/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dhleong/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dhleong",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This would, however, break the snacks.nvim functionality\n\nThen I would suggest opening an issue there.",
            "created_at": "2025-04-17T17:12:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/33515#issuecomment-2813585794",
            "id": 2813585794,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33515",
            "node_id": "IC_kwDOAPphoM6ns-mC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2813585794/reactions"
            },
            "updated_at": "2025-04-17T17:12:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2813585794",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "you can set a modeline",
            "created_at": "2025-04-17T18:39:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/33515#issuecomment-2813752062",
            "id": 2813752062,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33515",
            "node_id": "IC_kwDOAPphoM6ntnL-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2813752062/reactions"
            },
            "updated_at": "2025-04-18T16:14:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2813752062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/154880267?v=4",
                "events_url": "https://api.github.com/users/nenahp/events{/privacy}",
                "followers_url": "https://api.github.com/users/nenahp/followers",
                "following_url": "https://api.github.com/users/nenahp/following{/other_user}",
                "gists_url": "https://api.github.com/users/nenahp/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nenahp",
                "id": 154880267,
                "login": "nenahp",
                "node_id": "U_kgDOCTtJCw",
                "organizations_url": "https://api.github.com/users/nenahp/orgs",
                "received_events_url": "https://api.github.com/users/nenahp/received_events",
                "repos_url": "https://api.github.com/users/nenahp/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nenahp/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nenahp/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nenahp",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I have filed https://github.com/folke/snacks.nvim/issues/1761 but I did want to clarify: is what you're saying that it is *expected* and *intentional* behavior that _only one_ file content-based filetype definition may exist across _all_ plugins that a user might install _and_ their own vimrc, and that the neovim team is not interested in letting users or plugins extend the existing support for shebang-based filetype detection (or other content-based detection) with the `vim.filetypes.add` API?\n\nIt seems like a simple extension could look like:\n\n```lua\nvim.filetypes.add {\n  content = {\n    my_filetype = {\n      function(path, bufnr)\n        return true -- if bufnr is of type `my_filetype`\n        -- if we didn't want to wrap the function then asking implementors\n        -- to return the filetype here seems reasonable to me, too\n      end,\n      { priority = 0 },\n    },\n  },\n}\n```\n\nThese could be stored in a table similar to `pattern` and transformed and concatenated together when performing `sort_by_priority` (since that creates a list of tables and already transforms the input when doing so).\n\nAnd/or, allowing eg:\n\n```lua\nvim.filetypes.add {\n  hashbang = {\n    exe = 'my_filetype',\n  },\n}\n```\n\nto get merged into `vim.filetype.detect.patterns_hashbang` also seems reasonable to meâ€”and I just tested and confirmed that adding `bb = 'clojure'` to that table works a charm for my purposes.\n\nIf you're not opposed to either or both of these approaches I could put up a PR, but if not I'd be curious to learn why.\n\nThank you for your time!",
            "created_at": "2025-04-18T12:36:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/33515#issuecomment-2815369813",
            "id": 2815369813,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33515",
            "node_id": "IC_kwDOAPphoM6nzyJV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2815369813/reactions"
            },
            "updated_at": "2025-04-18T12:36:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2815369813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/816150?v=4",
                "events_url": "https://api.github.com/users/dhleong/events{/privacy}",
                "followers_url": "https://api.github.com/users/dhleong/followers",
                "following_url": "https://api.github.com/users/dhleong/following{/other_user}",
                "gists_url": "https://api.github.com/users/dhleong/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dhleong",
                "id": 816150,
                "login": "dhleong",
                "node_id": "MDQ6VXNlcjgxNjE1MA==",
                "organizations_url": "https://api.github.com/users/dhleong/orgs",
                "received_events_url": "https://api.github.com/users/dhleong/received_events",
                "repos_url": "https://api.github.com/users/dhleong/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dhleong/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dhleong/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dhleong",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "First, the filetype detection is based on (and strongly coupled with) Vim's approach even if the implementation is different, so we are not free to implement arbitrary logic (and are wary of adding complexity since this is a very performance-sensitive codepath). So, yes, _right now_ this is expected, and a strong argument is needed for changing this (which I haven't seen so far, but this of course doesn't mean it doesn't exist). The typical solution for such problems is to contribute such new logic to Vim (from which we'll then port it) so it can become part of the default lookup.",
            "created_at": "2025-04-18T12:41:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/33515#issuecomment-2815375801",
            "id": 2815375801,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33515",
            "node_id": "IC_kwDOAPphoM6nzzm5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2815375801/reactions"
            },
            "updated_at": "2025-04-18T12:43:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2815375801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33515/comments",
    "created_at": "2025-04-17T15:36:03Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33515/events",
    "html_url": "https://github.com/neovim/neovim/issues/33515",
    "id": 3002845157,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33515/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6y-8fl",
    "number": 33515,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33515/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33515/timeline",
    "title": "Multiple \"fallback match on contents\" filetype patterns can step on each other",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-18T16:14:59Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33515",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/816150?v=4",
        "events_url": "https://api.github.com/users/dhleong/events{/privacy}",
        "followers_url": "https://api.github.com/users/dhleong/followers",
        "following_url": "https://api.github.com/users/dhleong/following{/other_user}",
        "gists_url": "https://api.github.com/users/dhleong/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dhleong",
        "id": 816150,
        "login": "dhleong",
        "node_id": "MDQ6VXNlcjgxNjE1MA==",
        "organizations_url": "https://api.github.com/users/dhleong/orgs",
        "received_events_url": "https://api.github.com/users/dhleong/received_events",
        "repos_url": "https://api.github.com/users/dhleong/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dhleong/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dhleong/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dhleong",
        "user_view_type": "public"
    }
}