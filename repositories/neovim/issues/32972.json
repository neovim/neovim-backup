{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nWhen a completion item is provided as multi-line text, for example something like this:\n\nsuppose we are in a python file\n\n```python\ndef is_positive(a):\n    if a > 0:\n        |\n\n```\n\nwhere `|` represents the cursor position.\n\nAnd if the completion gives the result like this:\n\n\n```lua\nlocal text = [[return True\n    else:\n        return False]]\n{\nlabel = text,\ninsertText = text,\n}\n```\n\nhowever, after the user accept the result, it will look like this:\n\n```python\n def is_positive(a):\n    if a > 0:\n        return True\n            else:\n                return False\n\n\n\n\n```\n\nAs we can see, the indentation is automatically  adjusted based on the current line's indentation, and the original indentation of the text is not respected.\n\nI tried add `insertTextMode = 1` (aka `as-is` added in v3.16 spec) into the item list, but it does not help.\n\nThe scenario of multi-line completion item is that I am trying to provide LLM based completion (a plugin minuet-ai.nvim) using in-process LSP, and LLM usually returns multi-line text.\n\nFor languages where indentation doesn't matter, this is not a big deal,  we can reindent using `=` or use `lsp.buf.format()` to format the document. However for python, and other languages where indentation is part of the syntax, then indentation should not be messed up.\n\nIt is worth note that other completion plugin like `nvim-cmp` or `blink.cmp` can handle multi-line completion with no problem, because they treat the `insertText` as is, they don't adjust any indentation.\n\n### Steps to reproduce\n\nBelow is an example in-process lsp:\n\n`minimal.lua`\n\n```lua\nvim.o.completeopt = 'menu,menuone,noselect'\nvim.o.wildoptions = 'pum,tagfile,fuzzy'\n\nlocal M = {}\n\nMINIMAL = M\n\nfunction M.setup()\n    local name = 'minimal'\n    local config = {\n        name = name,\n        cmd = M.server,\n        on_attach = function(client, bufnr)\n            vim.lsp.completion.enable(true, client.id, bufnr, { autotrigger = true })\n        end,\n    }\n    local opts = {\n        bufnr = 0,\n        reuse_client = function(lsp_client, lsp_config)\n            return lsp_client.name == lsp_config.name\n        end,\n    }\n    vim.lsp.start(config, opts)\nend\n\nfunction M.server(dispatchers)\n    local id = 0\n    local closing = false\n\n    return {\n        request = function(method, params, callback)\n            if method == 'initialize' then\n                callback(nil, {\n                    capabilities = {\n                        completionProvider = {\n                            triggerCharacters = { '.' },\n                        },\n                    },\n                })\n            elseif method == 'textDocument/completion' then\n                callback(nil, M.completions(params))\n            elseif method == 'shutdown' then\n                callback(nil, nil)\n            end\n            id = id + 1\n            return true, id\n        end,\n        notify = function(method)\n            if method == 'exit' then\n                -- code 0 (success), signal 15 (SIGTERM)\n                dispatchers.on_exit(0, 15)\n            end\n            return true\n        end,\n        is_closing = function()\n            return closing\n        end,\n        terminate = function()\n            closing = true\n        end,\n    }\nend\n\nfunction M.completions(_)\n    local text = [[return True\n    else:\n        return False]]\n    return {\n        isIncomplete = false,\n        items = {\n            {\n                label = text,\n                insertText = text,\n                insertTextMode = 1,\n                kind = vim.lsp.protocol.CompletionItemKind.Text,\n            },\n        },\n    }\nend\n\nreturn M\n\n```\n\nBelow is an example python file, `text.py`:\n\n```python\ndef is_positive(a):\n    if a > 0:\n        |\n```\n\nwhere `|` represents cursor position\n\nstart process:\n\n1. `nvim -c 'luafile minimal.lua'`\n2. `:lua MINIMAL.setup()`\n3. try to trigger and then accept the completion.\n4. Get the wrong indentation\n\n\n### Expected behavior\n\nthe completion should respect the original indentation, aka\n\n```python\ndef is_positive(a):\n    if a > 0:\n        return True\n    else:\n        return False\n```\n\n### Nvim version (nvim -v)\n\nv0.11 commit g1369d86812\n\n### Vim (not Nvim) behaves the same?\n\nNo\n\n### Operating system/version\n\n10.15\n\n### Terminal name/version\n\nkitty\n\n### $TERM environment variable\n\nxterm-256color\n\n### Installation\n\ngithub nightly",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Lack of handling for [InsertTextMode](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#insertTextMode)\n\nI haven't tested it yet.\n```diff\ndiff --git a/runtime/lua/vim/lsp/completion.lua b/runtime/lua/vim/lsp/completion.lua\nindex 6aedac8fd9..e6929ce795 100644\n--- a/runtime/lua/vim/lsp/completion.lua\n+++ b/runtime/lua/vim/lsp/completion.lua\n@@ -609,7 +609,7 @@ local function on_complete_done()\n   local resolve_provider = (client.server_capabilities.completionProvider or {}).resolveProvider\n\n   local function clear_word()\n-    if not expand_snippet then\n+    if not expand_snippet and not completion_item.insertTextMode then\n       return nil\n     end\n\n@@ -661,6 +661,16 @@ local function on_complete_done()\n       end\n       apply_snippet_and_command()\n     end, bufnr)\n+  elseif completion_item.insertTextMode == protocol.InsertTextMode.asIs then\n+    clear_word()\n+    api.nvim_buf_set_text(\n+      0,\n+      Context.cursor[1] - 1,\n+      Context.cursor[2] - 1,\n+      Context.cursor[1] - 1,\n+      Context.cursor[2] - 1,\n+      vim.split(completion_item.insertText, '\\n')\n+    )\n   else\n     clear_word()\n     apply_snippet_and_command()\ndiff --git a/runtime/lua/vim/lsp/protocol.lua b/runtime/lua/vim/lsp/protocol.lua\nindex ececc41cee..9b6f74f9c0 100644\n--- a/runtime/lua/vim/lsp/protocol.lua\n+++ b/runtime/lua/vim/lsp/protocol.lua\n@@ -253,6 +253,28 @@ local constants = {\n     Snippet = 2,\n   },\n\n+  -- How whitespace and indentation is handled during completion\n+  -- item insertion.\n+  InsertTextMode = {\n+    -- The insertion or replace strings is taken as it is. If the\n+    -- value is multi line the lines below the cursor will be\n+    -- inserted using the indentation defined in the string value.\n...skipping...\n+    clear_word()\n+    api.nvim_buf_set_text(\n+      0,\n+      Context.cursor[1] - 1,\n+      Context.cursor[2] - 1,\n+      Context.cursor[1] - 1,\n+      Context.cursor[2] - 1,\n+      vim.split(completion_item.insertText, '\\n')\n+    )\n   else\n     clear_word()\n     apply_snippet_and_command()\ndiff --git a/runtime/lua/vim/lsp/protocol.lua b/runtime/lua/vim/lsp/protocol.lua\nindex ececc41cee..9b6f74f9c0 100644\n--- a/runtime/lua/vim/lsp/protocol.lua\n+++ b/runtime/lua/vim/lsp/protocol.lua\n@@ -253,6 +253,28 @@ local constants = {\n     Snippet = 2,\n   },\n\n+  -- How whitespace and indentation is handled during completion\n+  -- item insertion.\n+  InsertTextMode = {\n+    -- The insertion or replace strings is taken as it is. If the\n+    -- value is multi line the lines below the cursor will be\n+    -- inserted using the indentation defined in the string value.\n+    -- The client will not apply any kind of adjustments to the\n+    -- string.\n+    --\n+    asIs = 1,\n+\n+    -- The editor adjusts leading whitespace of new lines so that\n+    -- they match the indentation up to the cursor of the line for\n+    -- which the item is accepted.\n+    --\n+    -- Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n+    -- multi line completion item is indented using 2 tabs and all\n+    -- following lines inserted will be indented using 2 tabs as well.\n+    --\n+    adjustIndentation = 2,\n+  },\n+\n   -- A set of predefined code action kinds\n   CodeActionKind = {\n     -- Empty kind.\n(END)\n```\n",
            "created_at": "2025-03-19T08:46:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/32972#issuecomment-2735762124",
            "id": 2735762124,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32972",
            "node_id": "IC_kwDOAPphoM6jEGrM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2735762124/reactions"
            },
            "updated_at": "2025-03-19T08:54:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2735762124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I tried this patch and it does not work. In fact the if-else conditional branch for insert text mode equals \"as-is\" will never be activated:\n\n\n```lua\n  elseif completion_item.insertTextMode == protocol.InsertTextMode.asIs then\n    vim.notify 'insert text mode as is activated'\n    clear_word()\n```\n\nI will never see the notifications.\n\nIs it related to the default capabilities or default resolve provider settings?\n\nAs you see in my example, I only set the `completionProvider.triggerCharacters`, and the rest should be the neovim's defaults settings:\n\n```lua\n            if method == 'initialize' then\n                callback(nil, {\n                    capabilities = {\n                        completionProvider = {\n                            triggerCharacters = { '.' },\n                        },\n                    },\n                })\n```",
            "created_at": "2025-03-19T13:56:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/32972#issuecomment-2736744305",
            "id": 2736744305,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32972",
            "node_id": "IC_kwDOAPphoM6jH2dx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2736744305/reactions"
            },
            "updated_at": "2025-03-19T14:00:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2736744305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45728125?v=4",
                "events_url": "https://api.github.com/users/milanglacier/events{/privacy}",
                "followers_url": "https://api.github.com/users/milanglacier/followers",
                "following_url": "https://api.github.com/users/milanglacier/following{/other_user}",
                "gists_url": "https://api.github.com/users/milanglacier/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/milanglacier",
                "id": 45728125,
                "login": "milanglacier",
                "node_id": "MDQ6VXNlcjQ1NzI4MTI1",
                "organizations_url": "https://api.github.com/users/milanglacier/orgs",
                "received_events_url": "https://api.github.com/users/milanglacier/received_events",
                "repos_url": "https://api.github.com/users/milanglacier/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/milanglacier/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/milanglacier/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/milanglacier",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Maybe you could put it in an if branch at the beginning.",
            "created_at": "2025-03-20T06:25:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/32972#issuecomment-2739338251",
            "id": 2739338251,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32972",
            "node_id": "IC_kwDOAPphoM6jRvwL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2739338251/reactions"
            },
            "updated_at": "2025-03-20T06:25:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2739338251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32972/comments",
    "created_at": "2025-03-18T19:17:57Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32972/events",
    "html_url": "https://github.com/neovim/neovim/issues/32972",
    "id": 2929617334,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32972/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 706,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-03-23T23:17:47Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6unmm2",
    "number": 32972,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32972/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32972/timeline",
    "title": "LSP Completion: vim.lsp.completion doesn't respect the original `insertText` indentation, leading to unexpected indentation",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-03-20T06:25:28Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32972",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/45728125?v=4",
        "events_url": "https://api.github.com/users/milanglacier/events{/privacy}",
        "followers_url": "https://api.github.com/users/milanglacier/followers",
        "following_url": "https://api.github.com/users/milanglacier/following{/other_user}",
        "gists_url": "https://api.github.com/users/milanglacier/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/milanglacier",
        "id": 45728125,
        "login": "milanglacier",
        "node_id": "MDQ6VXNlcjQ1NzI4MTI1",
        "organizations_url": "https://api.github.com/users/milanglacier/orgs",
        "received_events_url": "https://api.github.com/users/milanglacier/received_events",
        "repos_url": "https://api.github.com/users/milanglacier/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/milanglacier/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/milanglacier/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/milanglacier",
        "user_view_type": "public"
    }
}