{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\n(follows up [earlier comment](https://github.com/neovim/neovim/issues/1008#issuecomment-3358370354).)\n\n#### #neovim_space:matrix.org discussion\n\nBelow is a brief summary of a long discussion that happened on matrix in the neovim room; most of it is paraphrased, not verbatim:\n```\n    vi6j │ bfredl, know why :w !antifennel - fails but works everywhere else?\n  bfredl ║ looks like antifennel abuses linux's kernel api:\n         ║ https://git.sr.ht/~technomancy/antifennel/tree/main/item/antifennel.lua#L64\n    ii14 │ use io.stdin fd instead of open(\"/dev/stdin\")\n    vi6j ║ the maintainer, technomancy, of fennel/antifennel wants to understand before changing it\n  bfredl │ /proc/[PID]/fd/[FD] is a kernel API for introspection and debugging\n    vi6j ║ how can I reproduce it in bash/python/etc\n    ii14 │ libuv uses socketpair(AF_UNIX). if anyone wants to reproduce without nvim, you can\n         │ probably use nodejs since it uses libuv too\n  bfredl ║ idk check  echo foo | ls -l /dev/stdin  and  echo foo | ls -l /proc/self/fd/o\n    vi6j │ okay, also technomancy wonders why this issue doesn't seem to exist outside of neovim\n  bfredl ║ io.stdin is mentioned in luaref \"to have the same meaning as in C\" at least\n    vi6j │ but if this were a problem generally, why wouldn't  echo '\"hi\"' | antifennel -  fail in\n         │ vim/shells? Do they manually create named pipes in /dev/pts?\n  bfredl ║ check  echo '\"hi\"' | ls -l /proc/self/fd/0  do you see \"pipe:[123456]\"?\n    ii14 │ try :set shelltemp; also see https://github.com/neovim/neovim/pull/33012 , and I feel\n         │ like it should use pipes not sockets\n    vi6j ║ bfredl, yes- well actually it's a socket: \"socket:[123456]\". This isn't documented in\n         │ :help 'shelltemp'\n    ii14 ║ fwiw, I don't see pipe/pipe2/uv_pipe\n    vi6j │ linux people say you can't open open a socket:\n         │ https://unix.stackexchange.com/questions/98958/linux-nuisance-dev-stdin-doesnt-work-with-sockets\n         │ I commented here: https://github.com/neovim/neovim/issues/1008\n         │ can nvim tell libuv to use pipe instead of socket for this?\n  bfredl ║ yes, uv_pipe_new can take an fd from pipe(). the uv_process code will need some\n         ║ restructuring but nothing too bad\n         ║ we would need to invoke pipe(&pair) ourselves and then pass the right end to libuv for writing\n    ii14 │ https://nodejs.org/api/child_process.html#child-process\n         │ literally the first example from here, except with ['-l', '/proc/self/fd/0'] as arguments for ls\n         │ it does say it's a socket\n```\n\n#### \"Succinct\" Explanation\n\nWith `noshelltemp`, `:[range]![filter]` `:[range]write [program]`, etc. will fail, if `filter`/`program` tries to open `/dev/stdin` as a file to read stdin.\n\nThe reason this fails is because libuv is using `socketpair`, and [sockets cannot be opened with `open(2)`](https://unix.stackexchange.com/questions/98958/linux-nuisance-dev-stdin-doesnt-work-with-sockets). This is corroborated by doing the following on linux:\n```vim\n:set noshelltemp\n:write !ls -l /proc/self/fd/0\n\" => lrwx------ 1 user user 64 Oct  1 01:23 /proc/self/fd/0 -> socket:[123456]\n```\n\nNote that `/dev/stdin` gets symlinked to `/proc/self/fd/0`. When `fd/0` is an anonymous pipe, there is no issue because pipes map cleanly onto linux's virtual filesystem and can be opened and re-opened with `open(2)`. However, when `fd/0` is an anonymous socket, this no longer works as shown by the above link.\n\nThe [new `noshelltemp` default](https://github.com/neovim/neovim/pull/33012) exacerbates this problem.\n\nI became aware of this trying to do `!ip` `antifennel -` in order to quickly transform lua into fennel, but the filtering failed because [antifennel tries to open `/dev/stdin -> /proc/self/fd/0 -> socket:[123456]`](https://git.sr.ht/~technomancy/antifennel/tree/d1b02bee8528e1ee9463c9504791ae0718585915/item/antifennel.lua#L64), which returns `ENXIO` because the kernel \"refuses\" to \"open the socket\". Below is a concise \"demo\" of how it fails:\n```vim\n:set noshelltemp\n:'{,'}!antifennel -\n\" Antifennel version 0.3.1.\n\" Usage: /home/vi/.local/bin/antifennel [--comments] LUA_FILENAME\n\" Compiles LUA_FILENAME to Fennel and prints output.\n\" \n\" shell returned 1\n:'{,'}write !antifennel -\n\" Antifennel version 0.3.1.\n\" Usage: /home/vi/.local/bin/antifennel [--comments] LUA_FILENAME\n\" Compiles LUA_FILENAME to Fennel and prints output.\n\" \n\" shell returned 1\n\n```\n\nWhereas, it will not fail in vim/bash/zsh/etc:\n```bash\n>> echo 'print(\"hi\")' | antifennel -\n(print :hi)\n```\n\n### Steps to reproduce\n\n```lua\n#!/usr/bin/env lua\n-- ./test.lua\nlocal f = io.open(\"/dev/stdin\")\nif f then\n  for line in f:lines() do print(line) end\n  f:close()\nelse\n  print(\"Unable to open /dev/stdin\")\nend\n```\n\n```vim\n:set noshelltemp\n:!chmod u+x ./test.lua\n:write !./test.lua\n\" => Unable to open /dev/stdin\n:set shelltemp\n:write !./test.lua\n\" => #!/usr/bin/env lua\n\" => local f = io.open(\"/dev/stdin\")\n\" => ... etc ...\n```\n\n### Expected behavior\n\n#### Suggestion\n\nI'm not very familliar with this, but it appears this will be resolved if you use unnamed pipes instead of unnamed sockets. You can probably pass a pipe to `uv_pipe_new` instead of letting libuv create a socketpair for you.\n\n### Nvim version (nvim -v)\n\nNVIM v0.12.0-dev-1264+g19ba589946\n\n### Vim (not Nvim) behaves the same?\n\nno, 9.1 1-1734\n\n### Operating system/version\n\narch\n\n### Terminal name/version\n\nst 0.9.2\n\n### $TERM environment variable\n\nst-256color\n\n### Installation\n\naur",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Maybe some POSIX spec somewhere says that `/dev/stdin` is something which is supposed to work and be kinda equivalent to `fdopen(dup(0), \"r\")`, but unfortunately `fopen(\"/dev/stdin\", \"r\")` is very much a dirtly lie on linux which might either\n\n1) fail loudly because you called down the wrath of the linux subsystem maintainers for subsystem which owns the object which backs `fd=0` (sockets have _rules_ for what you are allowed to do, you filthy swine!)\n2) **reopen** a real on-the-disk file which absolutely is not equivalent to `dup(fd=0)` as it forgets the seek position of the stdin fd\n3) succeed because you are lucky birthday boi and the handle just happened to be a tty (which has been blessed with a real file name) or a real, actual, honest-to-god `pipe(2)` which has been blessed with special case magic to make `fopen(\"/proc/self/fd/0\", \"r\")` behave exactly like `dup(fd=0)`. But woe you if you first use readlink() or realpath() and then fopen() on the result. \n\nRegarding libuv, we could force it to use a linux `pipe(2)` on linux. we would have to use `uv_pipe()` yourself and pass one end to the child process, and open the other one manually, something like this:\n\n```diff\ndiff --git a/src/nvim/event/libuv_proc.c b/src/nvim/event/libuv_proc.c\nindex b090367f92..4f7a1f0d58 100644\n--- a/src/nvim/event/libuv_proc.c\n+++ b/src/nvim/event/libuv_proc.c\n@@ -61,11 +61,18 @@ int libuv_proc_spawn(LibuvProc *uvproc)\n   }\n \n   if (!proc->in.closed) {\n-    uvproc->uvstdio[0].flags = UV_CREATE_PIPE | UV_READABLE_PIPE;\n+    uv_file the_pipe[2];\n+    int client_flags = 0;\n #ifdef MSWIN\n-    uvproc->uvstdio[0].flags |= proc->overlapped ? UV_OVERLAPPED_PIPE : 0;\n+    client_flags |= proc->overlapped ? UV_NONBLOCK_PIPE : 0;\n #endif\n-    uvproc->uvstdio[0].data.stream = (uv_stream_t *)(&proc->in.uv.pipe);\n+\n+    uv_pipe(the_pipe, client_flags, UV_NONBLOCK_PIPE);\n+\n+    uvproc->uvstdio[0].flags = UV_INHERIT_FD;\n+    uvproc->uvstdio[0].data.fd = the_pipe[0];\n+\n+    uv_pipe_open(&proc->in.uv.pipe, the_pipe[1]);\n   }\n \n   if (!proc->out.s.closed) {\n```\n\n",
            "created_at": "2025-10-02T08:30:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/35984#issuecomment-3359853431",
            "id": 3359853431,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35984",
            "node_id": "IC_kwDOAPphoM7IQ0t3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 2,
                "rocket": 3,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3359853431/reactions"
            },
            "updated_at": "2025-10-02T08:30:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3359853431",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@vi6jm IMO you should still bother antifennel to fix it on their side too. It's a rather trivial change for them to just use `io.stdin` instead. The issue can be fixed in neovim, but antifennel will remain broken in other environments -- Windows, Node, or anything that uses libuv naively. From Node's docs:\n\n> These are not actual Unix pipes and therefore the child process can not use them by their descriptor files, e.g. `/dev/fd/2` or `/dev/stdout`.",
            "created_at": "2025-10-02T16:03:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/35984#issuecomment-3362000527",
            "id": 3362000527,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35984",
            "node_id": "IC_kwDOAPphoM7IZA6P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3362000527/reactions"
            },
            "updated_at": "2025-10-02T16:03:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3362000527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "([fixed](https://git.sr.ht/~technomancy/antifennel/commit/84a31b6390cda58c27bba55c2673e5f85929d380#antifennel.lua) in antifennel)",
            "created_at": "2025-10-03T03:03:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/35984#issuecomment-3364004916",
            "id": 3364004916,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35984",
            "node_id": "IC_kwDOAPphoM7IgqQ0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3364004916/reactions"
            },
            "updated_at": "2025-10-03T03:03:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3364004916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/234989429?v=4",
                "events_url": "https://api.github.com/users/vi6jm/events{/privacy}",
                "followers_url": "https://api.github.com/users/vi6jm/followers",
                "following_url": "https://api.github.com/users/vi6jm/following{/other_user}",
                "gists_url": "https://api.github.com/users/vi6jm/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vi6jm",
                "id": 234989429,
                "login": "vi6jm",
                "node_id": "U_kgDODgGndQ",
                "organizations_url": "https://api.github.com/users/vi6jm/orgs",
                "received_events_url": "https://api.github.com/users/vi6jm/received_events",
                "repos_url": "https://api.github.com/users/vi6jm/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vi6jm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vi6jm/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vi6jm",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35984/comments",
    "created_at": "2025-10-02T01:43:12Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35984/events",
    "html_url": "https://github.com/neovim/neovim/issues/35984",
    "id": 3475689414,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "OS resources, pipes, streams",
            "id": 713599092,
            "name": "system",
            "node_id": "MDU6TGFiZWw3MTM1OTkwOTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/system"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "file metadata/attributes, filenames, path manipulation",
            "id": 3386070083,
            "name": "filesystem",
            "node_id": "LA_kwDOAPphoM7J01RD",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filesystem"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35984/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 746,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 637,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-10-05T18:26:43Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM7PKs_G",
    "number": 35984,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35984/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35984/timeline",
    "title": "'noshelltemp' default: issues with /dev/stdin and sockets",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-10-03T03:03:43Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35984",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/234989429?v=4",
        "events_url": "https://api.github.com/users/vi6jm/events{/privacy}",
        "followers_url": "https://api.github.com/users/vi6jm/followers",
        "following_url": "https://api.github.com/users/vi6jm/following{/other_user}",
        "gists_url": "https://api.github.com/users/vi6jm/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vi6jm",
        "id": 234989429,
        "login": "vi6jm",
        "node_id": "U_kgDODgGndQ",
        "organizations_url": "https://api.github.com/users/vi6jm/orgs",
        "received_events_url": "https://api.github.com/users/vi6jm/received_events",
        "repos_url": "https://api.github.com/users/vi6jm/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vi6jm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vi6jm/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vi6jm",
        "user_view_type": "public"
    }
}