{
    "active_lock_reason": "resolved",
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski",
            "user_view_type": "public"
        }
    ],
    "author_association": "MEMBER",
    "body": "In #34009 there were several suggestions about making `vim.pack.add()` more flexible. Either by introducing/updating fields in `opts` or plugin specification (`spec`). This issue is meant to discuss the best way to approach them. Here are suggestions:\n\n1. Allow skipping `:packadd` (even `:packadd!`) to only ensure that all plugins are installed in favor of manually loading them later. One way to do it is to allow `opts.load` as function that accepts a single resolved plugin spec and be responsible for loading into current session. Such plugins will still have `active=true` in `vim.pack.get()` output.\n\n2. Allow skipping installation confirmation. This can be done by adding `opts.confirm`. It can be only boolean or maybe also a function to perform confirm (if `load` is allowed to be function).\n\n3. Allow skipping automated installation of not presently installed plugins in favor of doing that manually later. Not sure about the best way to do that.\n\n4. More straightforward plugin freeze/pin/lock. There are several ways to do it:\n\n    - One way to do it is to allow `version = false` to mean \"use current state\". This works if plugin is already installed, but behavior during install is not (yet) really clear. To be fully specified requires lockfile support to have data about which commit to checkout during install. See [this comment](https://github.com/neovim/neovim/pull/34009#discussion_r2096143432) for details.\n\n    - Add boolean `spec.freeze` (or `spec.pin`) that will freeze/pin plugin from updates while still using `spec.version` during install.\n\n    - Do nothing and recommend specifying commit hash directly as `version`.\n\nMy suggestions:\n\n1. Allow callable `opts.load` with default \"`:packadd` + execute 'after/plugin/' files\".\n2. Allow `opts.confirm` that can be both boolean and callable (should block and return whether permission was granted).\n3. I like the current approach of \"block and install\" because it allows the code after it to assume that plugin is installed.\n4. Do nothing and suggest specifying commit hash. Can be seen in confirmation buffer or in future lockfile.",
    "closed_at": "2025-08-11T22:20:26Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Another suggestion here is to introduce something like `opts.convert_spec` (similar to `opts.convert` of `vim.lsp.completion.enable()`). It is a function that can be used to auto-transform plugin spec. Use cases:\n- Allow magic `src` infer. Like 'user/plugin' -> 'https://github.com/user/plugin'.\n- Allow setting default `version`. Like `vim.version.range('*')`.",
            "created_at": "2025-07-04T15:01:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/34770#issuecomment-3036603971",
            "id": 3036603971,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34770",
            "node_id": "IC_kwDOAPphoM60_uZD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3036603971/reactions"
            },
            "updated_at": "2025-07-04T15:01:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3036603971",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Allow skipping :packadd (even :packadd!) to only ensure that all plugins are installed in favor of manually loading them later. One way to do it is to allow opts.load as function that accepts a single resolved plugin spec and be responsible for loading into current session. Such plugins will still have active=true in vim.pack.get() output.\n\nAs long as we dont need to `function() end` to fully disable it because that is somewhat obnoxious... (still better than nothing I guess)\n\nThere needs to be a boolean option to turn it off IMO. I am very much against this trend of complecting lazy loading with downloading started by lazy.nvim and the builtin plugin manager would have been a great opportunity to like... not do that... But instead it overloaded the only built in tool for managing lazy loading.\n\nAdding a function that controls when that plugin loads means every call to vim.pack.add needs a function containing a whole mess of autocommands (most plugins can load on one of many triggers).\n\nIts a good feature to have the ability to provide a function for those who want it I guess, and there isnt really a penalty for adding it, but its really a shame that stuff got tied together like this.\n\nIf the plugin manager is not meant to manage lazy loading then it should not try to. Just a simple function like that for such a large topic is bad user experience.\n\nEdit: although, the annoyingness of `function() end` is somewhat alleviated by it being a once-per-invocation option rather than a once-per-spec option so I guess it is still OK.",
            "created_at": "2025-07-04T21:37:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/34770#issuecomment-3037282141",
            "id": 3037282141,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34770",
            "node_id": "IC_kwDOAPphoM61CT9d",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3037282141/reactions"
            },
            "updated_at": "2025-07-04T22:35:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3037282141",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> As long as we dont need to `function() end` to fully disable it because that is somewhat obnoxious... (still better than nothing I guess)\n> ...\n> Edit: although, the annoyingness of `function() end` is somewhat alleviated by it being a once-per-invocation option rather than a once-per-spec option so I guess it is still OK.\n\nYes, supplying `load = function() end` once per `vim.pack.add()` is exactly the proposed way to completely not load plugins. It very much fits the requirements and allowing function `load` opens up even more possibilities. Like indeed setting up `once` autocommands to `:packadd` plugins on event. It can be made as wrappers around `vim.pack.add()` for more convenience, like:\n\n```lua\nlocal ensure_installed = function(specs)\n  vim.pack.add(specs, { load = function() end })\nend\n\nlocal make_load_on_event = function(event)\n  local gr = vim.api.nvim_create_augroup('LoadOn' .. event, {})\n  return function(spec)\n    vim.api.nvim_create_autocmd(event, {\n      group = gr,\n      once = true,\n      callback = function() vim.pack.add({ spec.name }) end,\n    })\n  end\nend\n\nlocal add_on_event = function(event, specs)\n  vim.pack.add(specs, { load = make_load_on_event(event) })\nend\n```",
            "created_at": "2025-07-05T10:29:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/34770#issuecomment-3038716234",
            "id": 3038716234,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34770",
            "node_id": "IC_kwDOAPphoM61HyFK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3038716234/reactions"
            },
            "updated_at": "2025-07-05T10:29:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3038716234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Yes, supplying `load = function() end` once per `vim.pack.add()` is exactly the proposed way to completely not load plugins. It very much fits the requirements and allowing function `load` opens up even more possibilities. Like indeed setting up `once` autocommands to `:packadd` plugins on event. It can be made as wrappers around `vim.pack.add()` for more convenience, like:\n\nwould you be able to update plugins, that were previously installed, before running `vim.pack.add()` on them? it would seem like pretty normal behavior to want to update all your plugins even though they haven't lazy-loaded in the current session (e.g. language specific plugins).",
            "created_at": "2025-07-05T14:45:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/34770#issuecomment-3039037236",
            "id": 3039037236,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34770",
            "node_id": "IC_kwDOAPphoM61JAc0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3039037236/reactions"
            },
            "updated_at": "2025-07-05T14:45:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3039037236",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> would you be able to update plugins, that were previously installed, before running `vim.pack.add()` on them? it would seem like pretty normal behavior to want to update all your plugins even though they haven't lazy-loaded in the current session (e.g. language specific plugins).\n\nEven now it is possible to `vim.pack.update()` plugins that are not yet `vim.pack.add()`ed. Update can be performed on [any plugin managed by `vim.pack`](https://github.com/neovim/neovim/blob/887255362f60b62124144937b7679afc830ef445/runtime/doc/lua.txt#L2705-L2708) (i.e. if it was previously installed and not yet deleted), it is just the currently by default it is done only on those that were `vim.pack.add()`ed. The reason for that is because right now `vim.pack.update()` doesn't now to which `version` it needs to update. This is planned to be fixed after #34776, which will store on disk that data.",
            "created_at": "2025-07-05T15:18:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/34770#issuecomment-3039137034",
            "id": 3039137034,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34770",
            "node_id": "IC_kwDOAPphoM61JY0K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3039137034/reactions"
            },
            "updated_at": "2025-07-05T15:18:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3039137034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure if this counts as \"`vim.pack.add()`\" flexibility', but I was surprised that there is no \"post-add\" hook (to my knowledge). I.e. I have `require(plugin).setup(<opts>)` in separate files, and thought I could require those via something like:\n\n```lua\nvim.api.nvim_create_autocmd('PackChanged', {\n  callback = function (ev)\n    local name = ev.data.spec.name\n    pcall(require, 'myplugins.' .. name)\n  end\n})\n```\n\nBut `PackChanged` doesn't included \"being added to the session\". Current workaround is to have:\n\n```lua\nlocal function add(plugins)\n  vim.pack.add(plugins)\n  for _, plug in ipairs(plugins) do\n    local name = plug.name or plug.src\n    -- some name processing here...\n    pcall(require, 'plugins.' .. name)\n  end\nend\n\nadd({ <Spec1>, <Spec2>, ... })\n``` ",
            "created_at": "2025-07-06T20:05:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/34770#issuecomment-3042463911",
            "id": 3042463911,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34770",
            "node_id": "IC_kwDOAPphoM61WFCn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3042463911/reactions"
            },
            "updated_at": "2025-07-25T10:41:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3042463911",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But `PackChanged` doesn't included \"being added to the session\".\n\nYes, this was not added initially as already the present ones might be a bit too much.\n\n> Current workaround is to have:\n\nAnd indeed the solution here might be a suggestion to create wrappers. But adding `kind=add` to `PackChanged[Pre]` events is doable and might be reasonable. Just needs more careful design thoughts and decisions.",
            "created_at": "2025-07-06T20:38:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/34770#issuecomment-3042541222",
            "id": 3042541222,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34770",
            "node_id": "IC_kwDOAPphoM61WX6m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3042541222/reactions"
            },
            "updated_at": "2025-07-06T20:38:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3042541222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But adding `kind=add` to `PackChanged[Pre]` events is doable and might be reasonable. Just needs more careful design thoughts and decisions.\n\nOne thing I realized is that `kind=add` doesn't *quite* fit in the `PackChanged[Pre]` event, as it is for plugin changing its state. It should be either separate `PackLoad[Pre]` events (which seems reasonable) or `PackChanged` should be renamed to a more neutral \"related to `vim.pack`\" name (like `Pack`). Or no event at all.",
            "created_at": "2025-07-07T13:59:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/34770#issuecomment-3045313202",
            "id": 3045313202,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34770",
            "node_id": "IC_kwDOAPphoM61g8qy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3045313202/reactions"
            },
            "updated_at": "2025-07-07T13:59:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3045313202",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34770/comments",
    "created_at": "2025-07-04T13:16:59Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34770/events",
    "html_url": "https://github.com/neovim/neovim/issues/34770",
    "id": 3202724993,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "bfd4f2",
            "default": false,
            "description": "vim.pack, start/opt packages, 'packpath'",
            "id": 8889050758,
            "name": "packages",
            "node_id": "LA_kwDOAPphoM8AAAACEdQmhg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/packages"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34770/labels{/name}",
    "locked": true,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6-5bSB",
    "number": 34770,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34770/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34770/timeline",
    "title": "Make `vim.pack.add()` more flexible",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-08-11T22:21:01Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34770",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}