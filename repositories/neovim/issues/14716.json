{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "<!-- Before reporting: search existing issues and check the FAQ. -->\r\n\r\n- `nvim --version`:\r\n\r\n  ```\r\n  NVIM v0.4.4\r\n  Build type: Gentoo\r\n  Lua 5.1\r\n  Compilation: /usr/bin/x86_64-pc-linux-gnu-gcc -O2 -pipe -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wshadow -Wconversion -Wmissing-prototypes -Wimplicit-fallthrough -Wvla -fstack-protector-strong -fno-common -fdiagnostics-color=always -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -I/var/tmp/portage/app-editors/neovim-0.4.4-r100/work/neovim-0.4.4_build/config -I/var/tmp/portage/app-editors/neovim-0.4.4-r100/work/neovim-0.4.4/src -I/usr/include -I/var/tmp/portage/app-editors/neovim-0.4.4-r100/work/neovim-0.4.4_build/src/nvim/auto -I/var/tmp/portage/app-editors/neovim-0.4.4-r100/work/neovim-0.4.4_build/include\r\n  Compiled by portage@localhost\r\n\r\n  Features: +acl +iconv +tui\r\n  See \":help feature-compile\"\r\n\r\n     system vimrc file: \"/etc/vim/sysinit.vim\"\r\n    fall-back for $VIM: \"/usr/share/nvim\"\r\n\r\n  Run :checkhealth for more info\r\n  ```\r\n\r\n- Operating system/version: Gentoo Linux `x86_64`, up to date.\r\n- Terminal name/version: `kitty` 0.20.3 running `tmux` 3.1c\r\n- `$TERM`: `screen-256color`\r\n\r\n<!--\r\nIf this report is about different behaviour between Nvim and Vim, make sure to\r\nread `:h vim-differences` first. Otherwise remove the next line.\r\n-->\r\n[ ] `vim -u DEFAULTS` (version: 8.2) behaves differently\r\n\r\n`vim` version info:\r\n\r\n```\r\nVIM - Vi IMproved 8.2 (2019 Dec 12, compiled Jun  1 2021 22:57:11)\r\nIncluded patches: 1-814\r\nModified by Gentoo-8.2.0814-r100\r\nCompiled by gavin@localhost\r\nHuge version without GUI.  Features included (+) or not (-):\r\n+acl               -farsi             +mouse_sgr         +tag_binary\r\n+arabic            +file_in_path      -mouse_sysmouse    -tag_old_static\r\n+autocmd           +find_in_path      +mouse_urxvt       -tag_any_white\r\n+autochdir         +float             +mouse_xterm       -tcl\r\n-autoservername    +folding           +multi_byte        +termguicolors\r\n-balloon_eval      -footer            +multi_lang        -terminal\r\n+balloon_eval_term +fork()            -mzscheme          +terminfo\r\n-browse            +gettext           +netbeans_intg     +termresponse\r\n++builtin_terms    -hangul_input      +num64             +textobjects\r\n+byte_offset       +iconv             +packages          +textprop\r\n+channel           +insert_expand     +path_extra        +timers\r\n+cindent           +ipv6              -perl              +title\r\n+clientserver      +job               +persistent_undo   -toolbar\r\n+clipboard         +jumplist          +popupwin          +user_commands\r\n+cmdline_compl     +keymap            +postscript        +vartabs\r\n+cmdline_hist      +lambda            +printer           +vertsplit\r\n+cmdline_info      +langmap           +profile           +virtualedit\r\n+comments          +libcall           -python            +visual\r\n+conceal           +linebreak         -python3           +visualextra\r\n+cryptv            +lispindent        +quickfix          +viminfo\r\n-cscope            +listcmds          +reltime           +vreplace\r\n+cursorbind        +localmap          +rightleft         +wildignore\r\n+cursorshape       -lua               -ruby              +wildmenu\r\n+dialog_con        +menu              +scrollbind        +windows\r\n+diff              +mksession         +signs             +writebackup\r\n+digraphs          +modify_fname      +smartindent       +X11\r\n-dnd               +mouse             -sound             +xfontset\r\n-ebcdic            -mouseshape        +spell             -xim\r\n+emacs_tags        +mouse_dec         +startuptime       -xpm\r\n+eval              +mouse_gpm         +statusline        +xsmp_interact\r\n+ex_extra          -mouse_jsbterm     -sun_workshop      +xterm_clipboard\r\n+extra_search      +mouse_netterm     +syntax            -xterm_save\r\n   system vimrc file: \"/etc/vim/vimrc\"\r\n     user vimrc file: \"$HOME/.vimrc\"\r\n 2nd user vimrc file: \"~/.vim/vimrc\"\r\n      user exrc file: \"$HOME/.exrc\"\r\n       defaults file: \"$VIMRUNTIME/defaults.vim\"\r\n  fall-back for $VIM: \"/usr/share/vim\"\r\nCompilation: x86_64-pc-linux-gnu-gcc -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -pipe -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\r\nLinking: x86_64-pc-linux-gnu-gcc   -Wl,-O1 -L/usr/local/lib -Wl,--as-needed -o vim    -lSM -lICE -lXpm -lXt -lX11 -lXdmcp -lSM -lICE  -lm -ltinfo -lelf  -lacl -lattr -lgpm -ldl\r\n```\r\n\r\n### Steps to reproduce using `nvim -u NORC`\r\n\r\n```\r\nnvim -u NORC\r\n# Alternative for shell-related problems:\r\n# env -i TERM=ansi-256color \"$(which nvim)\"\r\n:set regexpengine=1\r\n:e <location_of_main.rst_in_Actual_Behavior_below>\r\n:570\r\no<BS>* Pointers should not be typed (\r\n```\r\n\r\n### Actual behaviour\r\n\r\nWhen opening the file that can be found at <https://git.yzena.com/Yzena/Yc/src/branch/master/docs/yvm/design/main.rst>, Neovim takes several seconds to render the file, eventually spitting out the message:\r\n\r\n```\r\n'redrawtime' exceeded, syntax highlighting disabled\r\n```\r\n\r\nIf you go down to the bottom of the file, just above the line:\r\n\r\n```\r\n.. toctree::\r\n```\r\n\r\non line 570, insert a new line, and type:\r\n\r\n```\r\n* Pointers should not be typed (\r\n```\r\n\r\nNeovim freezes when trying to type the `(`.\r\n\r\nWhen I profiled the problem with the procedure recommended [here](https://stackoverflow.com/questions/12213597/how-to-see-which-plugins-are-making-vim-slow/12216578#12216578), and when using the reproducer with `nvim -u NORC` above, I got the following in my `profile.log`:\r\n\r\n```\r\nFUNCTIONS SORTED ON SELF TIME\r\ncount  total (s)   self (s)  function\r\n   66            366.269548  <SNR>12_Highlight_Matching_Pair()\r\n  591              0.000869  RstFold#GetRstFold()\r\n   48              0.000693  <SNR>26_DefineOneInlineMarkup()\r\n    6   0.001034   0.000342  <SNR>26_DefineInlineMarkup()\r\n    1   0.000405   0.000326  <SNR>2_LoadFTPlugin()\r\n    1   0.028966   0.000116  <SNR>5_SynSet()\r\n    1   0.000102   0.000063  <SNR>3_LoadIndent()\r\n    1              0.000057  GetRSTIndent()\r\n    1              0.000030  <SNR>13_LocalBrowse()\r\n```\r\n\r\nwhich obviously shows `73_Highlight_Matching_Pair()` as the problem.\r\n\r\nWhen finding `Highlight_Matching_Pair()` in `profile.log`, I see this:\r\n\r\n```\r\nFUNCTION  <SNR>12_Highlight_Matching_Pair()\r\n    Defined: /usr/share/nvim/runtime/plugin/matchparen.vim line 39\r\nCalled 66 times\r\nTotal time: 366.269548\r\n Self time: 366.269548\r\n\r\ncount  total (s)   self (s)\r\n                              \" Remove any previous match.\r\n   66              0.000335   if exists('w:paren_hl_on') && w:paren_hl_on\r\n                                silent! call matchdelete(3)\r\n                                let w:paren_hl_on = 0\r\n   66              0.000058   endif\r\n                            \r\n                              \" Avoid that we remove the popup menu.\r\n                              \" Return when there are no colors (looks like the cursor jumps).\r\n   66              0.000207   if pumvisible() || (&t_Co < 8 && !has(\"gui_running\"))\r\n                                return\r\n   66              0.000023   endif\r\n                            \r\n                              \" Get the character under the cursor and check if it's in 'matchpairs'.\r\n   66              0.000153   let c_lnum = line('.')\r\n   66              0.000114   let c_col = col('.')\r\n   66              0.000060   let before = 0\r\n                            \r\n   66              0.000134   let text = getline(c_lnum)\r\n   66              0.000758   let matches = matchlist(text, '\\(.\\)\\=\\%'.c_col.'c\\(.\\=\\)')\r\n   66              0.000096   if empty(matches)\r\n                                let [c_before, c] = ['', '']\r\n   66              0.000036   else\r\n   66              0.000180     let [c_before, c] = matches[1:2]\r\n   66              0.000027   endif\r\n   66              0.000369   let plist = split(&matchpairs, '.\\zs[:,]')\r\n   66              0.000144   let i = index(plist, c)\r\n   66              0.000054   if i < 0\r\n                                \" not found, in Insert mode try character before the cursor\r\n   65              0.000166     if c_col > 1 && (mode() == 'i' || mode() == 'R')\r\n   62              0.000111       let before = strlen(c_before)\r\n   62              0.000060       let c = c_before\r\n   62              0.000097       let i = index(plist, c)\r\n   65              0.000026     endif\r\n   65              0.000046     if i < 0\r\n                                  \" not found, nothing to do\r\n   63              0.000042       return\r\n    2              0.000001     endif\r\n    3              0.000001   endif\r\n                            \r\n                              \" Figure out the arguments for searchpairpos().\r\n    3              0.000003   if i % 2 == 0\r\n    3              0.000003     let s_flags = 'nW'\r\n    3              0.000005     let c2 = plist[i + 1]\r\n                              else\r\n                                let s_flags = 'nbW'\r\n                                let c2 = c\r\n                                let c = plist[i - 1]\r\n    3              0.000001   endif\r\n    3              0.000003   if c == '['\r\n                                let c = '\\['\r\n                                let c2 = '\\]'\r\n    3              0.000001   endif\r\n                            \r\n                              \" Find the match.  When it was just before the cursor move it there for a\r\n                              \" moment.\r\n    3              0.000002   if before > 0\r\n    2              0.000006     let has_getcurpos = exists(\"*getcurpos\")\r\n    2              0.000002     if has_getcurpos\r\n                                  \" getcurpos() is more efficient but doesn't exist before 7.4.313.\r\n    2              0.000005       let save_cursor = getcurpos()\r\n                                else\r\n                                  let save_cursor = winsaveview()\r\n    2              0.000001     endif\r\n    2              0.000006     call cursor(c_lnum, c_col - before)\r\n    3              0.000001   endif\r\n                            \r\n    3              0.000017   if !has(\"syntax\") || !exists(\"g:syntax_on\")\r\n                                let s_skip = \"0\"\r\n    3              0.000001   else\r\n                                \" Build an expression that detects whether the current cursor position is\r\n                                \" in certain syntax types (string, comment, etc.), for use as\r\n                                \" searchpairpos()'s skip argument.\r\n                                \" We match \"escape\" for special items, such as lispEscapeSpecial.\r\n    3              0.000008     let s_skip = '!empty(filter(map(synstack(line(\".\"), col(\".\")), ''synIDattr(v:val, \"name\")''), ' . '''v:val =~? \"string\\\\|character\\\\|singlequote\\\\|escape\\\\|comment\"''))'\r\n                                \" If executing the expression determines that the cursor is currently in\r\n                                \" one of the syntax types, then we want searchpairpos() to find the pair\r\n                                \" within those syntax types (i.e., not skip).  Otherwise, the cursor is\r\n                                \" outside of the syntax types and s_skip should keep its value so we skip\r\n                                \" any matching pair inside the syntax types.\r\n                                \" Catch if this throws E363: pattern uses more memory than 'maxmempattern'.\r\n    3              0.000003     try\r\n    3              0.000820       execute 'if ' . s_skip . ' | let s_skip = \"0\" | endif'\r\n                                catch /^Vim\\%((\\a\\+)\\)\\=:E363/\r\n                                  \" We won't find anything, so skip searching, should keep Vim responsive.\r\n                                  return\r\n    3              0.000002     endtry\r\n    3              0.000001   endif\r\n                            \r\n                              \" Limit the search to lines visible in the window.\r\n    3              0.000007   let stoplinebottom = line('w$')\r\n    3              0.000007   let stoplinetop = line('w0')\r\n    3              0.000003   if i % 2 == 0\r\n    3              0.000004     let stopline = stoplinebottom\r\n                              else\r\n                                let stopline = stoplinetop\r\n    3              0.000001   endif\r\n                            \r\n                              \" Limit the search time to 300 msec to avoid a hang on very long lines.\r\n                              \" This fails when a timeout is not supported.\r\n    3              0.000006   if mode() == 'i' || mode() == 'R'\r\n    2              0.000007     let timeout = exists(\"b:matchparen_insert_timeout\") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout\r\n    1              0.000000   else\r\n    1              0.000003     let timeout = exists(\"b:matchparen_timeout\") ? b:matchparen_timeout : g:matchparen_timeout\r\n    3              0.000001   endif\r\n    3              0.000001   try\r\n    3            366.264369     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)\r\n                              catch /E118/\r\n                                \" Can't use the timeout, restrict the stopline a bit more to avoid taking\r\n                                \" a long time on closed folds and long lines.\r\n                                \" The \"viewable\" variables give a range in which we can scroll while\r\n                                \" keeping the cursor at the same position.\r\n                                \" adjustedScrolloff accounts for very large numbers of scrolloff.\r\n                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])\r\n                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])\r\n                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])\r\n                                \" one of these stoplines will be adjusted below, but the current values are\r\n                                \" minimal boundaries within the current window\r\n                                if i % 2 == 0\r\n                                  if has(\"byte_offset\") && has(\"syntax_items\") && &smc > 0\r\n                            \tlet stopbyte = min([line2byte(\"$\"), line2byte(\".\") + col(\".\") + &smc * 2])\r\n                            \tlet stopline = min([bottom_viewable, byte2line(stopbyte)])\r\n                                  else\r\n                            \tlet stopline = min([bottom_viewable, c_lnum + 100])\r\n                                  endif\r\n                                  let stoplinebottom = stopline\r\n                                else\r\n                                  if has(\"byte_offset\") && has(\"syntax_items\") && &smc > 0\r\n                            \tlet stopbyte = max([1, line2byte(\".\") + col(\".\") - &smc * 2])\r\n                            \tlet stopline = max([top_viewable, byte2line(stopbyte)])\r\n                                  else\r\n                            \tlet stopline = max([top_viewable, c_lnum - 100])\r\n                                  endif\r\n                                  let stoplinetop = stopline\r\n                                endif\r\n                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)\r\n    3              0.000002   endtry\r\n                            \r\n    3              0.000004   if before > 0\r\n    2              0.000002     if has_getcurpos\r\n    2              0.000008       call setpos('.', save_cursor)\r\n                                else\r\n                                  call winrestview(save_cursor)\r\n    2              0.000001     endif\r\n    3              0.000001   endif\r\n                            \r\n                              \" If a match is found setup match highlighting.\r\n    3              0.000004   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom \r\n                                if exists('*matchaddpos')\r\n                                  call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)\r\n                                else\r\n                                  exe '3match MatchParen /\\(\\%' . c_lnum . 'l\\%' . (c_col - before) . 'c\\)\\|\\(\\%' . m_lnum . 'l\\%' . m_col . 'c\\)/'\r\n                                endif\r\n                                let w:paren_hl_on = 1\r\n    3              0.000001   endif\r\n\r\n```\r\n\r\nSo it appears that `searchpairpos()` may be the problem.\r\n\r\nIn addition, editing RestructuredText files in Neovim just feels slow, and when profiling the slow editing, nothing really stands out.\r\n\r\n### Expected behaviour\r\n\r\nInstant, or near instant, editing of RestructuredText files.\r\n\r\n### Other\r\n\r\nI would love to help fix this, but I am not familiar enough with Neovim's code to help. If I can get some pointers, I can try to track it down further and fix it.",
    "closed_at": null,
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3172687?v=4",
        "events_url": "https://api.github.com/users/gavinhoward/events{/privacy}",
        "followers_url": "https://api.github.com/users/gavinhoward/followers",
        "following_url": "https://api.github.com/users/gavinhoward/following{/other_user}",
        "gists_url": "https://api.github.com/users/gavinhoward/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gavinhoward",
        "id": 3172687,
        "login": "gavinhoward",
        "node_id": "MDQ6VXNlcjMxNzI2ODc=",
        "organizations_url": "https://api.github.com/users/gavinhoward/orgs",
        "received_events_url": "https://api.github.com/users/gavinhoward/received_events",
        "repos_url": "https://api.github.com/users/gavinhoward/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gavinhoward/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gavinhoward/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gavinhoward",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": ">I would love to help fix this, but I am not familiar enough with Neovim's code to help. If I can get some pointers, I can try to track it down further and fix it.\r\n\r\nWhat I would do here is start by reproducing the bug on master (you can compile from source by following the instructions [here](https://github.com/neovim/neovim/wiki/Building-Neovim#quick-start)). Once you've confirmed that the bug still exists on master there are multiple paths:\r\n- Attempt to reproduce the bug with an old Vim. If you're able to do that, you'll be able to bisect Vim until you find the patch that fixed it. Would certainly help a lot.\r\n- Attempt to figure out what exactly in searchpairpos is taking time. You can use the [perf](http://www.brendangregg.com/perf.html) command to do that (e.g. `perf record --user-callchains --call-graph=dwarf ./nvim` and then `perf report -s sym --branch-history`). This might show you something that could be optimized.\r\n- Go through the list of unported Vim patches that seem related to searchpairpos (you can list unported patches by running `./scripts/vim-patch.sh -l` in the neovim repo) and see if one seems likely to fix the bug you're encountering.",
            "created_at": "2021-06-04T15:53:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/14716#issuecomment-854831771",
            "id": 854831771,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/14716",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDgzMTc3MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/854831771/reactions"
            },
            "updated_at": "2021-06-04T15:53:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/854831771",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4",
                "events_url": "https://api.github.com/users/glacambre/events{/privacy}",
                "followers_url": "https://api.github.com/users/glacambre/followers",
                "following_url": "https://api.github.com/users/glacambre/following{/other_user}",
                "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glacambre",
                "id": 11534587,
                "login": "glacambre",
                "node_id": "MDQ6VXNlcjExNTM0NTg3",
                "organizations_url": "https://api.github.com/users/glacambre/orgs",
                "received_events_url": "https://api.github.com/users/glacambre/received_events",
                "repos_url": "https://api.github.com/users/glacambre/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glacambre",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "A couple things.\r\n\r\nFirst, I made a mistake in my `vim` test. `vim` does *not* behave differently. I have updated my first comment accordingly.\r\n\r\nSecond, I actually ran `:help regexpengine=1`, and found out that `regexpengine=1` sets the old regex engine. The default is `0`, which selects the old or new automatically based on performance and capability (if I read it right).\r\n\r\nSo I guess technically, this isn't a bug, since the old engine probably isn't getting some love. And with the default, Neovim runs fine.\r\n\r\nI changed the title of this bug report to point future users in the right direction.\r\n\r\n**Future users**: if you run into this problem, you probably have `set regexpengine=1` in your `.config/nvim/init.vim`. Delete it, and Neovim should select the new, faster engine automatically.\r\n\r\nI am closing this report, but the maintainers are welcome to reopen it if they wish.",
            "created_at": "2021-06-04T17:11:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/14716#issuecomment-854882463",
            "id": 854882463,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/14716",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDg4MjQ2Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/854882463/reactions"
            },
            "updated_at": "2021-06-04T17:11:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/854882463",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3172687?v=4",
                "events_url": "https://api.github.com/users/gavinhoward/events{/privacy}",
                "followers_url": "https://api.github.com/users/gavinhoward/followers",
                "following_url": "https://api.github.com/users/gavinhoward/following{/other_user}",
                "gists_url": "https://api.github.com/users/gavinhoward/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gavinhoward",
                "id": 3172687,
                "login": "gavinhoward",
                "node_id": "MDQ6VXNlcjMxNzI2ODc=",
                "organizations_url": "https://api.github.com/users/gavinhoward/orgs",
                "received_events_url": "https://api.github.com/users/gavinhoward/received_events",
                "repos_url": "https://api.github.com/users/gavinhoward/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gavinhoward/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gavinhoward/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gavinhoward",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "We actually do care about regexp engine 1.  But it's actually the skip expression (meaning evaluating the syntax stack) that is so expensive. I wondered about it, because the searchpairpos() call is called with a timeout value. But that is not the problem here. Evaluating the syntax stack takes so long. Check the output of  `:syntime report` (see below). What helps is using `:unlet g:syntax_on` which will make the matparen plugin to use a skip expression of `0`.  I had a quick look at passing the timeout value into the `eval()` stack, but that is turns out to be very convoluted :/\r\n\r\nIt may also help to tune the `syn sync` from rules. \r\n\r\nPing @brammool and @marshallward, because the rstExDirective syntax region might be tuned (e.g. by adding an atom to force the regexp-engine 2):\r\n\r\n```\r\nexecute 'syn region rstExDirective contained matchgroup=rstDirective' .\r\n      \\ ' start=+' . s:ReferenceName . '::\\_s+' .\r\n      \\ ' skip=+^$+' .\r\n      \\ ' end=+^\\s\\@!+ contains=@rstCruft,rstLiteralBlock'\r\n```\r\n\r\nThe `^\\s\\@!` - That looks expensive :/\r\n\r\nFWIW, the output of `syntime report` on my development machine:\r\n```  TOTAL      COUNT  MATCH   SLOWEST     AVERAGE   NAME               PATTERN\r\n  5.480519   9      3       1.790491    0.608947  rstExDirective     [[:alnum:]]\\%([-_.:+]\\?[[:alnum:]]\\+\\)*::\\_s\r\n  0.364432   393    0       0.121854    0.000927  rstHyperlinkReference \\<[[:alnum:]]\\%([-_.:+]\\?[[:alnum:]]\\+\\)*__\\=\\ze\\%($\\|\\s\\|['\")\\]}>/:.,;!?\\\\-]\\)\r\n  0.007962   393    0       0.000090    0.000020  rstInlineInternalTargets \\%(^\\|\\s\\|\\%ua0\\|['\"([{</:]\\)\\zs_`[^[:space:]`] `\\ze\\%($\\|\\s\\|['\")\\]}>/:.,;!?\\\\-]\\)\r\n  0.007803   393    0       0.000070    0.000020  rstEmphasis        \\%(^\\|\\s\\|\\%ua0\\|['\"([{</:]\\)\\zs\\*[^[:space:]*] \\*\\ze\\%($\\|\\s\\|['\")\\]}>/:.,;!?\\\\-]\\)\r\n  0.007796   393    0       0.000093    0.000020  rstStrongEmphasis  \\%(^\\|\\s\\|\\%ua0\\|['\"([{</:]\\)\\zs\\*\\*[^[:space:]*] \\*\\*\\ze\\%($\\|\\s\\|['\")\\]}>/:.,;!?\\\\-]\\)\r\n  0.007736   393    0       0.000064    0.000020  rstInlineLiteral   \\%(^\\|\\s\\|\\%ua0\\|['\"([{</:]\\)\\zs``[^[:space:]`] ``\\ze\\%($\\|\\s\\|['\")\\]}>/:.,;!?\\\\-]\\)\r\n  0.007722   384    0       0.000075    0.000020  rstInterpretedTextOrHyperlinkReference \\%(^\\|\\s\\|\\%ua0\\|['\"([{</:]\\)\\zs`[^[:space:]`] `_\\{0,2}\\ze\\%($\\|\\s\\|['\")\\]}>/:.,;!?\\\\-]\\)\r\n  0.007702   393    0       0.000058    0.000020  rstSubstitutionReference \\%(^\\|\\s\\|\\%ua0\\|['\"([{</:]\\)\\zs|[^[:space:]|] |_\\{0,2}\\ze\\%($\\|\\s\\|['\")\\]}>/:.,;!?\\\\-]\\)\r\n  0.007394   393    0       0.000182    0.000019  rstSubstitutionReference \\%(^\\|\\s\\|\\%ua0\\|[/:]\\)\\zs|\\ze[^[:space:]|]\r\n  0.007262   393    0       0.000118    0.000018  rstInlineInternalTargets \\%(^\\|\\s\\|\\%ua0\\|[/:]\\)\\zs_`\\ze[^[:space:]`]\r\n  0.007258   399    6       0.000156    0.000018  rstInlineLiteral   \\%(^\\|\\s\\|\\%ua0\\|[/:]\\)\\zs``\\ze[^[:space:]`]\r\n  0.007203   393    0       0.000076    0.000018  rstEmphasis        \\%(^\\|\\s\\|\\%ua0\\|[/:]\\)\\zs\\*\\ze[^[:space:]*]\r\n  0.007172   384    0       0.000119    0.000019  rstInterpretedTextOrHyperlinkReference \\%(^\\|\\s\\|\\%ua0\\|[/:]\\)\\zs`\\ze[^[:space:]`]\r\n  0.007125   393    0       0.000061    0.000018  rstStrongEmphasis  \\%(^\\|\\s\\|\\%ua0\\|[/:]\\)\\zs\\*\\*\\ze[^[:space:]*]\r\n  0.003964   384    0       0.000039    0.000010  rstDirectivepython \\c\\%(sourcecode\\|code\\%(-block\\)\\=\\)::\\s\\+\\%(python\\)\\_s*\\n\\ze\\z(\\s\\+\\)\r\n  0.003791   384    0       0.000062    0.000010  rstDirectivecpp    \\c\\%(sourcecode\\|code\\%(-block\\)\\=\\)::\\s\\+\\%(cpp\\|c++\\)\\_s*\\n\\ze\\z(\\s\\+\\)\r\n  0.003786   384    0       0.000070    0.000010  rstDirectivevim    \\c\\%(sourcecode\\|code\\%(-block\\)\\=\\)::\\s\\+\\%(vim\\)\\_s*\\n\\ze\\z(\\s\\+\\)\r\n  0.003772   384    0       0.000085    0.000010  rstDirectivephp    \\c\\%(sourcecode\\|code\\%(-block\\)\\=\\)::\\s\\+\\%(php\\)\\_s*\\n\\ze\\z(\\s\\+\\)\r\n  0.003679   384    6       0.000052    0.000010  rstStandaloneHyperlink \\<\\%(\\%(\\%(https\\=\\|file\\|ftp\\|gopher\\)://\\|\\%(mailto\\|news\\):\\)[^[:space:]'\\\"<>]\\+\\|www[[:alnum:]_-]*\\.[[:alnum:]_-]\\+\\.[^[:space:]'\\\"<>]\\+\\)[[:alnum:]/]\r\n  0.003661   384    0       0.000043    0.000010  rstDirectivesh     \\c\\%(sourcecode\\|code\\%(-block\\)\\=\\)::\\s\\+\\%(sh\\)\\_s*\\n\\ze\\z(\\s\\+\\)\r\n  0.003650   384    0       0.000033    0.000010  rstDirectivejava   \\c\\%(sourcecode\\|code\\%(-block\\)\\=\\)::\\s\\+\\%(java\\)\\_s*\\n\\ze\\z(\\s\\+\\)\r\n  0.003649   384    0       0.000039    0.000010  rstDirectiveperl   \\c\\%(sourcecode\\|code\\%(-block\\)\\=\\)::\\s\\+\\%(perl\\)\\_s*\\n\\ze\\z(\\s\\+\\)\r\n  0.003644   384    0       0.000048    0.000009  rstDirectivelisp   \\c\\%(sourcecode\\|code\\%(-block\\)\\=\\)::\\s\\+\\%(lisp\\)\\_s*\\n\\ze\\z(\\s\\+\\)\r\n  0.003482   384    0       0.000041    0.000009  rstCitationReference \\%(\\s\\|^\\)\\[[[:alnum:]]\\%([-_.:+]\\?[[:alnum:]]\\+\\)*\\]_\\ze\\%($\\|\\s\\|['\")\\]}>/:.,;!?\\\\-]\\)\r\n  0.003399   393    0       0.000056    0.000009  rstFootnoteReference \\%(\\s\\|^\\)\\[\\%(\\d\\+\\|#\\%([[:alnum:]]\\%([-_.:+]\\?[[:alnum:]]\\+\\)*\\)\\=\\|\\*\\)\\]_\r\n  0.002163   393    3       0.000068    0.000006  rstLiteralBlock    \\(^\\z(\\s*\\).*\\)\\@<=::\\n\\s*\\n\r\n  0.001176   384    3       0.000058    0.000003  rstSections        \\v^%(([=`:.'\"~^_*+#-])\\1{2,}\\n)?.{3,}\\n([=`:.'\"~^_*+#-])\\2{2,}$\r\n  0.000298   393    0       0.000002    0.000001  rstInlineInternalTargets ’\\zs_`\\ze[^[:space:]’`]\r\n  0.000266   393    0       0.000002    0.000001  rstStrongEmphasis  ’\\zs\\*\\*\\ze[^[:space:]’*]\r\n```",
            "created_at": "2021-06-04T20:25:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/14716#issuecomment-854980238",
            "id": 854980238,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/14716",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDk4MDIzOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/854980238/reactions"
            },
            "updated_at": "2021-06-04T20:25:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/854980238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/244927?v=4",
                "events_url": "https://api.github.com/users/chrisbra/events{/privacy}",
                "followers_url": "https://api.github.com/users/chrisbra/followers",
                "following_url": "https://api.github.com/users/chrisbra/following{/other_user}",
                "gists_url": "https://api.github.com/users/chrisbra/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chrisbra",
                "id": 244927,
                "login": "chrisbra",
                "node_id": "MDQ6VXNlcjI0NDkyNw==",
                "organizations_url": "https://api.github.com/users/chrisbra/orgs",
                "received_events_url": "https://api.github.com/users/chrisbra/received_events",
                "repos_url": "https://api.github.com/users/chrisbra/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chrisbra/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chrisbra/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chrisbra",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "BTW: wondering if this:\r\n\r\n>  end=+^\\s\\@!+ contains=@rstCruft,rstLiteralBlock'\r\n\r\ncouldn't easily be written as `end=+^\\S\\|$'` not sure",
            "created_at": "2021-06-04T20:51:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/14716#issuecomment-854991429",
            "id": 854991429,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/14716",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDk5MTQyOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/854991429/reactions"
            },
            "updated_at": "2021-06-04T20:51:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/854991429",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/244927?v=4",
                "events_url": "https://api.github.com/users/chrisbra/events{/privacy}",
                "followers_url": "https://api.github.com/users/chrisbra/followers",
                "following_url": "https://api.github.com/users/chrisbra/following{/other_user}",
                "gists_url": "https://api.github.com/users/chrisbra/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chrisbra",
                "id": 244927,
                "login": "chrisbra",
                "node_id": "MDQ6VXNlcjI0NDkyNw==",
                "organizations_url": "https://api.github.com/users/chrisbra/orgs",
                "received_events_url": "https://api.github.com/users/chrisbra/received_events",
                "repos_url": "https://api.github.com/users/chrisbra/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chrisbra/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chrisbra/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chrisbra",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Okay. I will reopen this issue and investigate with `syntime`.",
            "created_at": "2021-06-04T22:06:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/14716#issuecomment-855031559",
            "id": 855031559,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/14716",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTAzMTU1OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/855031559/reactions"
            },
            "updated_at": "2021-06-04T22:06:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/855031559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3172687?v=4",
                "events_url": "https://api.github.com/users/gavinhoward/events{/privacy}",
                "followers_url": "https://api.github.com/users/gavinhoward/followers",
                "following_url": "https://api.github.com/users/gavinhoward/following{/other_user}",
                "gists_url": "https://api.github.com/users/gavinhoward/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gavinhoward",
                "id": 3172687,
                "login": "gavinhoward",
                "node_id": "MDQ6VXNlcjMxNzI2ODc=",
                "organizations_url": "https://api.github.com/users/gavinhoward/orgs",
                "received_events_url": "https://api.github.com/users/gavinhoward/received_events",
                "repos_url": "https://api.github.com/users/gavinhoward/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gavinhoward/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gavinhoward/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gavinhoward",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I think the `end=+^\\s\\@!+` must be from Nikolai's original implementation.\r\n\r\nMost of his regions were terminated by a block without leading whitespace, which was never strictly correct and has been gradually relaxed throughout other regions, so I would think that it could be replaced with something less expensive.",
            "created_at": "2021-06-05T01:17:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/14716#issuecomment-855161102",
            "id": 855161102,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/14716",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTE2MTEwMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/855161102/reactions"
            },
            "updated_at": "2021-06-05T01:17:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/855161102",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/462315?v=4",
                "events_url": "https://api.github.com/users/marshallward/events{/privacy}",
                "followers_url": "https://api.github.com/users/marshallward/followers",
                "following_url": "https://api.github.com/users/marshallward/following{/other_user}",
                "gists_url": "https://api.github.com/users/marshallward/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/marshallward",
                "id": 462315,
                "login": "marshallward",
                "node_id": "MDQ6VXNlcjQ2MjMxNQ==",
                "organizations_url": "https://api.github.com/users/marshallward/orgs",
                "received_events_url": "https://api.github.com/users/marshallward/received_events",
                "repos_url": "https://api.github.com/users/marshallward/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/marshallward/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/marshallward/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/marshallward",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/14716/comments",
    "created_at": "2021-06-03T19:27:44Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/14716/events",
    "html_url": "https://github.com/neovim/neovim/issues/14716",
    "id": 910789967,
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "wrong behavior inherited from vim",
            "id": 154310492,
            "name": "bug-vim",
            "node_id": "MDU6TGFiZWwxNTQzMTA0OTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-vim"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "regex syntax or non-regex parsing, lpeg, grammars",
            "id": 531600085,
            "name": "syntax",
            "node_id": "MDU6TGFiZWw1MzE2MDAwODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/syntax"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/14716/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWU5MTA3ODk5Njc=",
    "number": 14716,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/14716/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/14716/timeline",
    "title": "regexpengine=1 slow in RestructuredText Files",
    "updated_at": "2025-01-19T11:48:32Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/14716",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3172687?v=4",
        "events_url": "https://api.github.com/users/gavinhoward/events{/privacy}",
        "followers_url": "https://api.github.com/users/gavinhoward/followers",
        "following_url": "https://api.github.com/users/gavinhoward/following{/other_user}",
        "gists_url": "https://api.github.com/users/gavinhoward/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gavinhoward",
        "id": 3172687,
        "login": "gavinhoward",
        "node_id": "MDQ6VXNlcjMxNzI2ODc=",
        "organizations_url": "https://api.github.com/users/gavinhoward/orgs",
        "received_events_url": "https://api.github.com/users/gavinhoward/received_events",
        "repos_url": "https://api.github.com/users/gavinhoward/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gavinhoward/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gavinhoward/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gavinhoward",
        "user_view_type": "public"
    }
}