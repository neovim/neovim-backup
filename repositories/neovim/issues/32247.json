{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nI have an inkling that this might be your desired behavior, but I thought I'd create this anyways as it was reported to my extension [here](https://github.com/scalameta/nvim-metals/discussions/709) and I thought at least this would provide some clarity around the topic. The scenario is that if you have a workspace where diagnostics have already been reported, nothing changes and you simply do a `:e` you lose the diagnostics for that buffer and can't get them back until you trigger a compile or do something for the server to return them again. However, this doesn't seem to be what other clients I've tested do. I've tested this with both Zed and VS Code and if you send a `didClose` event and then open the file again the diagnostics are persisted. While uncommon, this can create some weird scenarios where you're navigating a large code base, close a buffer to not have a ton of them open, then re-open it later to expect to still see the same diagnostic because not state has changed... and it's just gone in Nvim. Is there a reason this is done? Like I said in the other clients I've tested this isn't the case. You re-open and if no state changes happened, you see your diagnostics.\n\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\n\nYou can reproduce this, but you'd need a few things installed\n\n- The Scala language server [Metals](https://scalameta.org/metals/) (most easily done with [cs install metals](https://get-coursier.io/)\n- set up an sbt project with the following structure:\n\n```\n├── build.sbt\n├── project\n│   ├── build.properties\n└── src\n    ├── main\n    │   └── scala\n    │       └── example\n    │           └── Hello.scala\n```\n\nInside of these files:\n\n`build.sbt`\n\n```scala\nThisBuild / scalaVersion     := \"2.13.16\"\nThisBuild / version          := \"0.1.0-SNAPSHOT\"\n\nlazy val root = (project in file(\".\"))\n  .settings(\n    name := \"Scala Seed Project\"\n  )\n```\n`build.properties`\n```scala\nsbt.version=1.10.7\n```\n`Hello.scala`\n```scala\npackage example\n\nobject Hello extends App {\n  val hello: String = 3\n}\n```\n\nThe minimal init file looks like this:\n\n```lua\nlocal pattern = 'scala'\nlocal cmd = {'metals'}\n-- Add files/folders here that indicate the root of a project\nlocal root_markers = {'build.sbt'}\n-- Change to table with settings if required\nlocal settings = vim.empty_dict()\n\nvim.api.nvim_create_autocmd('FileType', {\n  pattern = pattern,\n  callback = function(args)\n    local match = vim.fs.find(root_markers, { path = args.file, upward = true })[1]\n    local root_dir = match and vim.fn.fnamemodify(match, ':p:h') or nil\n    vim.lsp.start({\n      name = 'metals',\n      cmd = cmd,\n      root_dir = root_dir,\n      settings = settings\n    })\n  end\n})\n```\n\nOnce you open `Hello.scala` you should see Metals kick in and a single error appear under `3`. Then just do a `:e` and see the diagnostic disappear.\n\n### Expected behavior\n\nWhile in an LSP project I'd expect my workspace diagnostics to not just disappear because I closed and re-opened the file.\n\n### Nvim version (nvim -v)\n\nNVIM v0.10.4\n\n### Language server name/version\n\nmetals 1.5.1\n\n### Operating system/version\n\nMac OS but any has the same\n\n### Log file\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Just confirming that building locally with `NVIM v0.11.0-dev-1658+g216ec73972` I see the same behavior.",
            "created_at": "2025-01-29T19:22:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2622633932",
            "id": 2622633932,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6cUjfM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2622633932/reactions"
            },
            "updated_at": "2025-01-29T19:22:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2622633932",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13974112?v=4",
                "events_url": "https://api.github.com/users/ckipp01/events{/privacy}",
                "followers_url": "https://api.github.com/users/ckipp01/followers",
                "following_url": "https://api.github.com/users/ckipp01/following{/other_user}",
                "gists_url": "https://api.github.com/users/ckipp01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ckipp01",
                "id": 13974112,
                "login": "ckipp01",
                "node_id": "MDQ6VXNlcjEzOTc0MTEy",
                "organizations_url": "https://api.github.com/users/ckipp01/orgs",
                "received_events_url": "https://api.github.com/users/ckipp01/received_events",
                "repos_url": "https://api.github.com/users/ckipp01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ckipp01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ckipp01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ckipp01",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The title mentions \"closing a buffer\". In the repro steps, where/how are you closing it (`:bdelete`, `:bwipeout`, `:bunload`, `bufhidden=...`, ...?)?\n\n> if you have a workspace where diagnostics have already been reported, nothing changes and you simply do a `:e` you lose the diagnostics for that buffer and can't get them back until you trigger a compile or do something for the server to return them again.\n\nIf only a `:edit` clears the diagnostics,  that sounds even more problematic.\n\nIt's currently expected that `:edit` \"refreshes\" attached LSP clients, AFAIU. But I would also expect that to re-trigger diagnostics.",
            "created_at": "2025-01-30T10:17:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2624070032",
            "id": 2624070032,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6caCGQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624070032/reactions"
            },
            "updated_at": "2025-01-30T10:54:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624070032",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The title mentions \"closing a buffer\". In the repro steps, where/how are you closing it (:bdelete, :bwipeout, :bunload, bufhidden=..., ...?)?\n\nGood question, and I should have clarified. What I'm referring to here is in terms of LSP. So when I do a `:e` in the logs you can see the following:\n\n```\n[Trace - 11:24:40 AM] Received notification 'textDocument/didClose'\nParams: {\n  \"textDocument\": {\n    \"uri\": \"file:///Users/ckipp/Documents/scala-workspace/scala-seed-project/src/main/scala/example/Hello.scala\"\n  }\n}\n\n\n[Trace - 11:24:40 AM] Received notification 'textDocument/didOpen'\nParams: {\n  \"textDocument\": {\n    \"uri\": \"file:///Users/ckipp/Documents/scala-workspace/scala-seed-project/src/main/scala/example/Hello.scala\",\n    \"languageId\": \"scala\",\n    \"version\": 0,\n    \"text\": \"package example\\n\\nimport java.time.Instant\\nimport java.util.Locale\\n\\nobject Hello extends Greeting with App {\\n\\n  val now \\u003d Instant.now()\\n  val l \\u003d Locale.CANADA\\n\\n  println(\\\"hello with\\\")\\n}\\n\\ntrait Greeting {\\n  lazy val greeting: String \\u003d \\\"hello\\\\n\\\"\\n  def foo(): String \\u003d 3\\n}\\n\"\n  }\n}\n```\n\nSo with a `didClose` being sent and then also a `didOpen` being sent I'd expect the diagnostics to be persisted in the client irregardless of what's happening on the client side. I understand there is probably some nvim-specific differences of the things you mentioned so I took a quick look.\n\n- :bdelete, :bwipeout, :bunload -> surprisingly doing it this way, the diagnostics are persisted when I re-open the file\n- `:e` seems to be the problematic one\n\nIs this because it's detected as an edit and it assumes that because it was \"editing\" the diagnostics are stale? This could just be an odd edgecase, but if nothing was really editing and just a `:e` was triggered in the current buffer I wouldn't expect this.\n\n",
            "created_at": "2025-01-30T10:29:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2624099556",
            "id": 2624099556,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6caJTk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624099556/reactions"
            },
            "updated_at": "2025-01-30T10:29:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624099556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13974112?v=4",
                "events_url": "https://api.github.com/users/ckipp01/events{/privacy}",
                "followers_url": "https://api.github.com/users/ckipp01/followers",
                "following_url": "https://api.github.com/users/ckipp01/following{/other_user}",
                "gists_url": "https://api.github.com/users/ckipp01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ckipp01",
                "id": 13974112,
                "login": "ckipp01",
                "node_id": "MDQ6VXNlcjEzOTc0MTEy",
                "organizations_url": "https://api.github.com/users/ckipp01/orgs",
                "received_events_url": "https://api.github.com/users/ckipp01/received_events",
                "repos_url": "https://api.github.com/users/ckipp01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ckipp01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ckipp01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ckipp01",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It's currently expected that :edit \"refreshes\" attached LSP clients, AFAIU. But I would also expect that to re-trigger diagnostics.\n\nSo I guess this sort of makes sense, but with this understanding, when you do a `:e` it seems to trigger the `didClose` and `didOpen` which isn't enough to trigger diagnostics for an entire workspace again. At least that's not what I'm seeing with any other client. So again, I think it makes sense that it \"refreshes\", but then is it expected that a `didOpen` should trigger a `publishDiagnostics` from an LSP server? because again, that's not the behavior I'm seeing with other clients.",
            "created_at": "2025-01-30T10:33:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2624107968",
            "id": 2624107968,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6caLXA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624107968/reactions"
            },
            "updated_at": "2025-01-30T10:33:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624107968",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13974112?v=4",
                "events_url": "https://api.github.com/users/ckipp01/events{/privacy}",
                "followers_url": "https://api.github.com/users/ckipp01/followers",
                "following_url": "https://api.github.com/users/ckipp01/following{/other_user}",
                "gists_url": "https://api.github.com/users/ckipp01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ckipp01",
                "id": 13974112,
                "login": "ckipp01",
                "node_id": "MDQ6VXNlcjEzOTc0MTEy",
                "organizations_url": "https://api.github.com/users/ckipp01/orgs",
                "received_events_url": "https://api.github.com/users/ckipp01/received_events",
                "repos_url": "https://api.github.com/users/ckipp01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ckipp01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ckipp01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ckipp01",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> :bdelete, :bwipeout, :bunload -> surprisingly doing it this way, the diagnostics are persisted when I re-open the file\n\n\"persisted\", or restored? :)\n\nIt sounds like `:edit` needs to be fixed to \"restore\" (refresh?) diagnostics.\n\n\n\n> but then is it expected that a `didOpen` should trigger a `publishDiagnostics` from an LSP server? because again, that's not the behavior I'm seeing with other clients.\n\nI'm confused. Isn't `publishDiagnostics` the thing that's missing (and wanted)?",
            "created_at": "2025-01-30T10:34:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2624111683",
            "id": 2624111683,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6caMRD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624111683/reactions"
            },
            "updated_at": "2025-01-30T10:34:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624111683",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> \"persisted\", or restored? :)\n\n:D indeed\n\n> I'm confused. Isn't publishDiagnostics the thing that's missing (and wanted)?\n\nI think this is tricky to answer because different servers will handle this different based on the language. However if I look at the spec for `publishDiagnostics` I see\n\n> Diagnostics notifications are sent from the server to the client to signal results of validation runs.\n\nAt least in the case of Scala, just opening a file won't trigger a \"validation run\" if we equate that to anything on our side that produces diagnostics, aka a compilation request or a `didChange` event that we can do quick checks against. It's a bit hard here because in the LSP sense we always need to think about this in the context of a \"workspace\" so if nothing changes in the workspace and something is just opened or closed, then there is not state change in the workspace, meaning that there is really nothing that should produce a `publishDiagnostics` notification. I know I'm comparing other clients here to nvim, which can be like comparing apples to oranges, but I did test this in a couple others and from what I can tell none of the others I tested expect another `publishDiagnostics` here.\n\nSo I think the crux of this is answering the question: _Should a `didOpen` trigger a `publishDiagnostics` notification to be re-sent to the client_. I'm afraid that might be difficult to answer and dependent on the language/server. I know on our side (metals team), we don't treat a `didOpen` as something that will trigger diagnostics.",
            "created_at": "2025-01-30T10:44:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2624133822",
            "id": 2624133822,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6caRq-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624133822/reactions"
            },
            "updated_at": "2025-01-30T11:00:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624133822",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13974112?v=4",
                "events_url": "https://api.github.com/users/ckipp01/events{/privacy}",
                "followers_url": "https://api.github.com/users/ckipp01/followers",
                "following_url": "https://api.github.com/users/ckipp01/following{/other_user}",
                "gists_url": "https://api.github.com/users/ckipp01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ckipp01",
                "id": 13974112,
                "login": "ckipp01",
                "node_id": "MDQ6VXNlcjEzOTc0MTEy",
                "organizations_url": "https://api.github.com/users/ckipp01/orgs",
                "received_events_url": "https://api.github.com/users/ckipp01/received_events",
                "repos_url": "https://api.github.com/users/ckipp01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ckipp01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ckipp01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ckipp01",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> in the LSP sense we always need to think about this in the context of a \"workspace\" so if nothing changes in the workspace and something is just opened or closed, then there is not state change in the workspace ... none of the other [clients] expect another `publishDiagnostics` here.\n\nMakes sense, thanks!\n\n# Proposal\n\nIf Nvim is going to treat `:edit` as \"LSP refresh\" then it should find a way to force-request diagnostics (assuming that is possible).\n\nOr we should stop treating `:edit` as \"LSP refresh\". That is a hangover / workaround for an unreliable LSP client. It shouldn't be needed. User should opt-in to \"LSP refresh\" via `:LspRestart` or whatever.",
            "created_at": "2025-01-30T10:56:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2624161644",
            "id": 2624161644,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6caYds",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624161644/reactions"
            },
            "updated_at": "2025-01-30T10:56:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2624161644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Or we should stop treating `:edit` as \"LSP refresh\". That is a hangover / workaround for an unreliable LSP client. It shouldn't be needed. User should opt-in to \"LSP refresh\" via `:LspRestart` or whatever.\n\nI don't think this is a good choice because the behavior of Zed and vscode mentioned earlier will cause the closed buffer to still retain the previous diagnostics when reopened. Therefore, even if we solve this issue by this way, there will still be other issues, such as when a file is closed and then reopened, the diagnostics will still not refresh.\n\n> If Nvim is going to treat `:edit` as \"LSP refresh\" then it should find a way to force-request diagnostics (assuming that is possible).\n\nAFAIK, there is no direct way to request the LSP server to re-fetch diagnostics, although this might be achieved by sending an empty change, but it feels more like a workaround. Therefore, to fundamentally maintain consistency with vscode behavior, it may mean we have to save diagnostics. This is related to https://github.com/neovim/neovim/issues/31453.\n\nAs a reference, [the LSP specification describes the specific behavior of vscode](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_publishDiagnostics), which indeed saves diagnostics. I suspect this is due to the specific implementation of vscode and it's a requirement specifically added for vscode.",
            "created_at": "2025-02-11T11:32:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2650541334",
            "id": 2650541334,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6d_A0W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2650541334/reactions"
            },
            "updated_at": "2025-02-11T11:32:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2650541334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "After reading the comments at https://github.com/microsoft/vscode-languageserver-node/issues/684, I think this issue should be resolved by Metal LS. Based on my understanding, Metal LS must send a `publishDiagnostics` to vscode to clear diagnostics after receiving `didClose`. Therefore, \"clearing diagnostics after didClose\" should be the expected behavior, so Metal LS should not depend on having the client save diagnostics.",
            "created_at": "2025-02-11T12:43:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2650714056",
            "id": 2650714056,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6d_q_I",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2650714056/reactions"
            },
            "updated_at": "2025-02-11T12:43:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2650714056",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> After reading the comments at [microsoft/vscode-languageserver-node#684](https://github.com/microsoft/vscode-languageserver-node/issues/684),\n\nWhat's the key callout from that discussion (or the updated LSP spec)?",
            "created_at": "2025-02-11T13:24:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2650821679",
            "id": 2650821679,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6eAFQv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2650821679/reactions"
            },
            "updated_at": "2025-02-11T13:24:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2650821679",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Diagnostics should be cleared after `didClose`. The current LSP spec has flaws because this is how vscode implements it. They added the following content to the spec after this issue:\n\n> Please note that open / close events don't necessarily reflect what the user sees in the user interface. These events are ownership events. So with the current version of the specification it is possible that problems are not cleared although the file is not visible in the user interface since the client has not closed the file yet.",
            "created_at": "2025-02-11T15:14:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2651120608",
            "id": 2651120608,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6eBOPg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2651120608/reactions"
            },
            "updated_at": "2025-02-11T15:14:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2651120608",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Therefore, \"clearing diagnostics after didClose\" should be the expected behavior, so Metal LS should not depend on having the client save diagnostics.\n\nI guess this is a bit tricky then since it doesn't seem to be the behavior any of the other clients I tested with expect, since it just works ™ . This might be one of those things where so many people are doing it a different way and persisting the diagnostics that it all sort of just works. Because in theory we could make this change, but it wouldn't really solve the originally issue or mimic the behavior we're seeing in other editors where when you re-open the file, you still retain the diagnostics.\n\nEdit:\n\nAlso I found this as well in the spec which causes some confusion\n\n> Diagnostics are “owned” by the server so it is the server’s responsibility to clear them if necessary. The following rule is used for VS Code servers that generate diagnostics:\n\n> if a language is single file only (for example HTML) then diagnostics are cleared by the server when the file is closed.\nif a language has a project system (for example C#) diagnostics are not cleared when a file closes. When a project is opened all diagnostics for all files are recomputed (or read from a cache).\n\nIn this scenario Scala fits into the latter.",
            "created_at": "2025-02-13T07:55:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/32247#issuecomment-2655786120",
            "id": 2655786120,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32247",
            "node_id": "IC_kwDOAPphoM6eTBSI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2655786120/reactions"
            },
            "updated_at": "2025-02-13T08:34:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2655786120",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13974112?v=4",
                "events_url": "https://api.github.com/users/ckipp01/events{/privacy}",
                "followers_url": "https://api.github.com/users/ckipp01/followers",
                "following_url": "https://api.github.com/users/ckipp01/following{/other_user}",
                "gists_url": "https://api.github.com/users/ckipp01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ckipp01",
                "id": 13974112,
                "login": "ckipp01",
                "node_id": "MDQ6VXNlcjEzOTc0MTEy",
                "organizations_url": "https://api.github.com/users/ckipp01/orgs",
                "received_events_url": "https://api.github.com/users/ckipp01/received_events",
                "repos_url": "https://api.github.com/users/ckipp01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ckipp01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ckipp01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ckipp01",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 12,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32247/comments",
    "created_at": "2025-01-29T14:25:50Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32247/events",
    "html_url": "https://github.com/neovim/neovim/issues/32247",
    "id": 2818377612,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32247/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 696,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-02-17T18:55:16Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6n_QeM",
    "number": 32247,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32247/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32247/timeline",
    "title": "LSP: diagnostics for current buffer are cleared after :edit",
    "updated_at": "2025-02-13T08:34:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32247",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/13974112?v=4",
        "events_url": "https://api.github.com/users/ckipp01/events{/privacy}",
        "followers_url": "https://api.github.com/users/ckipp01/followers",
        "following_url": "https://api.github.com/users/ckipp01/following{/other_user}",
        "gists_url": "https://api.github.com/users/ckipp01/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ckipp01",
        "id": 13974112,
        "login": "ckipp01",
        "node_id": "MDQ6VXNlcjEzOTc0MTEy",
        "organizations_url": "https://api.github.com/users/ckipp01/orgs",
        "received_events_url": "https://api.github.com/users/ckipp01/received_events",
        "repos_url": "https://api.github.com/users/ckipp01/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ckipp01/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ckipp01/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ckipp01",
        "user_view_type": "public"
    }
}