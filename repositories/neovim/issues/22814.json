{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nThe idea is to trigger a ``SessionWritePre`` before writing the session file.\r\n\r\nA possible problem is to store a table as a global variable in a session file. To address this issue, the table must be serialized/deserialized as JSON, as far as I know, which only needs to be done once, before using the :mksession command. Since there is already a ``SessionLoadPost`` event, I thought about adding its counter part. I could create a pull request myself to implement this solution.\n\n### Expected behavior\n\nIt would trigger a ``SessionWritePre`` event before writing the session file after calling ``:mksession``.\r\n\r\nThis feature decouples the need to create custom wrappers around ``:mksession`` to preprocess the state before saving to a session file.\r\n\r\nBecause the change is both simple and lightweight, it is worth implementing it.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I think I can provide some advice because I wrote a [plugin](https://github.com/nyngwang/suave.lua) that can achieve the result without this event.\r\n\r\n`SessionLoadPost` exists because we don't know when it will finish. But apparently, we are the callers of `:mksession`, so we must know when it will get called. So I'm still thinking about the usefulness of adding this event since one can simply adding some codes before the line `vim.cmd('mksession dest')`.",
            "created_at": "2023-03-30T08:12:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/22814#issuecomment-1489881713",
            "id": 1489881713,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22814",
            "node_id": "IC_kwDOAPphoM5Yzcpx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1489881713/reactions"
            },
            "updated_at": "2023-03-30T08:15:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1489881713",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24765272?v=4",
                "events_url": "https://api.github.com/users/nyngwang/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyngwang/followers",
                "following_url": "https://api.github.com/users/nyngwang/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyngwang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyngwang",
                "id": 24765272,
                "login": "nyngwang",
                "node_id": "MDQ6VXNlcjI0NzY1Mjcy",
                "organizations_url": "https://api.github.com/users/nyngwang/orgs",
                "received_events_url": "https://api.github.com/users/nyngwang/received_events",
                "repos_url": "https://api.github.com/users/nyngwang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyngwang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyngwang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyngwang",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I think I can provide some advice because I wrote a [plugin](https://github.com/nyngwang/suave.lua) that can achieve the result without this event.\n> \n> `SessionLoadPost` exists because we don't know when it will finish. But apparently, we are the callers of `:mksession`, so we must know when it will get called. So I'm still thinking about the usefulness of adding this event since one can simply adding some codes before the line `vim.cmd('mksession dest')`.\n\nThe problem arises when we are not the callers of ``mksession``. Let's say we are using a session manager plugin, each session manager plugin might have their own pre hooks. With a standard event, other plugins and configs would be able to pre process with no dependencies.",
            "created_at": "2023-03-31T13:34:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/22814#issuecomment-1491935153",
            "id": 1491935153,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22814",
            "node_id": "IC_kwDOAPphoM5Y7R-x",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1491935153/reactions"
            },
            "updated_at": "2023-03-31T13:34:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1491935153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30515389?v=4",
                "events_url": "https://api.github.com/users/tiagovla/events{/privacy}",
                "followers_url": "https://api.github.com/users/tiagovla/followers",
                "following_url": "https://api.github.com/users/tiagovla/following{/other_user}",
                "gists_url": "https://api.github.com/users/tiagovla/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tiagovla",
                "id": 30515389,
                "login": "tiagovla",
                "node_id": "MDQ6VXNlcjMwNTE1Mzg5",
                "organizations_url": "https://api.github.com/users/tiagovla/orgs",
                "received_events_url": "https://api.github.com/users/tiagovla/received_events",
                "repos_url": "https://api.github.com/users/tiagovla/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tiagovla/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tiagovla/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tiagovla",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> we are the callers of :mksession, so we must know when it will get called. So I'm still thinking about the usefulness of adding this event since one can simply adding some codes before the line `vim.cmd('mksession dest')`\r\n\r\nUnfortunately this is not always true. Some people use session managers where `:mksession` is called automatically; this has [caused problems for barbar.nvim in the past](https://github.com/romgrk/barbar.nvim/issues/364).",
            "created_at": "2023-04-10T00:21:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/22814#issuecomment-1501251979",
            "id": 1501251979,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22814",
            "node_id": "IC_kwDOAPphoM5Ze0mL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1501251979/reactions"
            },
            "updated_at": "2023-04-10T20:02:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1501251979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36409591?v=4",
                "events_url": "https://api.github.com/users/Iron-E/events{/privacy}",
                "followers_url": "https://api.github.com/users/Iron-E/followers",
                "following_url": "https://api.github.com/users/Iron-E/following{/other_user}",
                "gists_url": "https://api.github.com/users/Iron-E/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Iron-E",
                "id": 36409591,
                "login": "Iron-E",
                "node_id": "MDQ6VXNlcjM2NDA5NTkx",
                "organizations_url": "https://api.github.com/users/Iron-E/orgs",
                "received_events_url": "https://api.github.com/users/Iron-E/received_events",
                "repos_url": "https://api.github.com/users/Iron-E/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Iron-E/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Iron-E/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Iron-E",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I just want to point out a thing: if the ordering of the callbacks matters, then this event won't be very useful by intuition. Since now you're providing this event from the upstream, people might wrongly conclude that this should be the only standard event to be used for their callbacks. Let me show you what it will look like:\r\n\r\nOriginally,\r\n\r\n```\r\n------------------------------------------------------------> Time sequence\r\nPlugin A: [a1, a2, a3]\r\nPlugin B:             [b1, b2, b3]\r\nPlugin C:                         [c1, c2, c3]\r\nuser:                                         [user1, user2]\r\n```\r\n\r\nSince each plugin author knows when he will call `:mksession`, it can just write some event-independent code that is guaranteed to be executed at once like a transaction and no overlapping will happen. This is what we want. (Cross-plugin bugs are very tricky to resolve, especially when it comes to `autocmd` event.)\r\n\r\nNow if everyone is trying to register their callbacks upon the only source `SessionWritePre`, it now looks like this: (I might be wrong, but my current understanding is that there will be only one queue)\r\n\r\n```\r\n------------------------------------------------------------> Time sequence\r\nPlugin A,B,C, user: [a1, b1, b2, a2, c1, user1, user2, c2, a3, b3, c3]\r\n```\r\n\r\nBecause upstream won't have the context&domain knowledge to know what order is required by each plugin, so interweaving of callbacks might happen.\r\n\r\nThe problem might be resolved if every plugin author only creates one single, large(and thus hard-to-maintain) meta-callback to enforce the ordering. This is why I predict that this event might not be very useful, at least I prefer to create many callbacks where each one is doing its job well. Anyway, if people all follow this *paradigm* then the result might look like this:\r\n\r\n```\r\n------------------------------------------------------------> Time sequence\r\nPlugin A,B,C, user: [[a1, a2, a3], [b1, b2, b3], user1, [c1, c2, c3], user2]\r\n```\r\n\r\n(apologize in advance if this reasoning might be incorrect. I just want to point out my concern after this feature might be merged. But if the ordering isn't an issue then I will be very happy to try it out.)",
            "created_at": "2023-04-10T17:44:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/22814#issuecomment-1502105791",
            "id": 1502105791,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22814",
            "node_id": "IC_kwDOAPphoM5ZiFC_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1502105791/reactions"
            },
            "updated_at": "2023-04-10T17:55:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1502105791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24765272?v=4",
                "events_url": "https://api.github.com/users/nyngwang/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyngwang/followers",
                "following_url": "https://api.github.com/users/nyngwang/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyngwang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyngwang",
                "id": 24765272,
                "login": "nyngwang",
                "node_id": "MDQ6VXNlcjI0NzY1Mjcy",
                "organizations_url": "https://api.github.com/users/nyngwang/orgs",
                "received_events_url": "https://api.github.com/users/nyngwang/received_events",
                "repos_url": "https://api.github.com/users/nyngwang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyngwang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyngwang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyngwang",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I just want to point out a thing: if the ordering of the callbacks matters, then this event won't be very useful by intuition. Since now you're providing this event from the upstream, people might wrongly conclude that this should be the only standard event to be used for their callbacks. Let me show you what it will look like:\r\n> \r\n> Originally,\r\n> \r\n> ```\r\n> ------------------------------------------------------------> Time sequence\r\n> Plugin A: [a1, a2, a3]\r\n> Plugin B:             [b1, b2, b3]\r\n> Plugin C:                         [c1, c2, c3]\r\n> user:                                         [user1, user2]\r\n> ```\r\n> \r\n> Since each plugin author knows when he will call `:mksession`, it can just write some event-independent code that is guaranteed to be executed at once like a transaction and no overlapping will happen. This is what we want. (Cross-plugin bugs are very tricky to resolve, especially when it comes to `autocmd` event.)\r\n> \r\n> Now if everyone is trying to register their callbacks upon the only source `SessionWritePre`, it now looks like this: (I might be wrong, but my current understanding is that there will be only one queue)\r\n> \r\n> ```\r\n> ------------------------------------------------------------> Time sequence\r\n> Plugin A,B,C, user: [a1, b1, b2, a2, c1, user1, user2, c2, a3, b3, c3]\r\n> ```\r\n> \r\n> Because upstream won't have the context&domain knowledge to know what order is required by each plugin, so interweaving of callbacks might happen.\r\n> \r\n> The problem might be resolved if every plugin author only creates one single, large(and thus hard-to-maintain) meta-callback to enforce the ordering. This is why I predict that this event might not be very useful, at least I prefer to create many callbacks where each one is doing its job well. Anyway, if people all follow this _paradigm_ then the result might look like this:\r\n> \r\n> ```\r\n> ------------------------------------------------------------> Time sequence\r\n> Plugin A,B,C, user: [[a1, a2, a3], [b1, b2, b3], user1, [c1, c2, c3], user2]\r\n> ```\r\n> \r\n> (apologize in advance if this reasoning might be incorrect. I just want to point out my concern after this feature might be merged. But if the ordering isn't an issue then I will be very happy to try it out.)\r\n\r\nThe ordering should not be an issue, but they should all happen in any order before saving the session file.",
            "created_at": "2023-04-10T18:17:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/22814#issuecomment-1502143188",
            "id": 1502143188,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22814",
            "node_id": "IC_kwDOAPphoM5ZiOLU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1502143188/reactions"
            },
            "updated_at": "2023-04-10T18:17:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1502143188",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30515389?v=4",
                "events_url": "https://api.github.com/users/tiagovla/events{/privacy}",
                "followers_url": "https://api.github.com/users/tiagovla/followers",
                "following_url": "https://api.github.com/users/tiagovla/following{/other_user}",
                "gists_url": "https://api.github.com/users/tiagovla/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tiagovla",
                "id": 30515389,
                "login": "tiagovla",
                "node_id": "MDQ6VXNlcjMwNTE1Mzg5",
                "organizations_url": "https://api.github.com/users/tiagovla/orgs",
                "received_events_url": "https://api.github.com/users/tiagovla/received_events",
                "repos_url": "https://api.github.com/users/tiagovla/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tiagovla/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tiagovla/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tiagovla",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I don't see any reason why writing just one `SessionWritePre` would be hard to do, if it was needed. Users could still take the approach of writing their own `:mksession` command if they need to add their own logic before a plugin's.\n\nThe complaints you raised about ordering are fair, but they apply to all autocommands. That's why this is a problem in the first place; in case `:mksession` executes in an event (that is not created by the user), plugin authors have to either:\n\n1. keep global variables synced at all times (lower performance).\n2. tell users to copy a snippet from the repo into their config (which might go out of date, have bugs, etc.)\n\nThis is because of the ordering problem you pointed out. That doesn't mean autocommands aren't useful though",
            "created_at": "2023-04-10T18:26:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/22814#issuecomment-1502152066",
            "id": 1502152066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22814",
            "node_id": "IC_kwDOAPphoM5ZiQWC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1502152066/reactions"
            },
            "updated_at": "2023-04-10T18:26:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1502152066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36409591?v=4",
                "events_url": "https://api.github.com/users/Iron-E/events{/privacy}",
                "followers_url": "https://api.github.com/users/Iron-E/followers",
                "following_url": "https://api.github.com/users/Iron-E/following{/other_user}",
                "gists_url": "https://api.github.com/users/Iron-E/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Iron-E",
                "id": 36409591,
                "login": "Iron-E",
                "node_id": "MDQ6VXNlcjM2NDA5NTkx",
                "organizations_url": "https://api.github.com/users/Iron-E/orgs",
                "received_events_url": "https://api.github.com/users/Iron-E/received_events",
                "repos_url": "https://api.github.com/users/Iron-E/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Iron-E/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Iron-E/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Iron-E",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> in case `:mksession` executes in an event (that is not created by the user), plugin authors have to either:\r\n\r\n@Iron-E Could you elaborate more on this part? I'm trying to understand your problem, but the current confusion in my mind is: Why the plugin author doesn't provide a pre-hook in the first place? E.g. I did this in my implementation:\r\n\r\nhttps://github.com/nyngwang/suave.lua/blob/main/lua/suave/init.lua#L65_L72\r\n\r\nand I did put the function that includes the call of `:mksession` into an autocmd:\r\n\r\nhttps://github.com/nyngwang/suave.lua/blob/main/lua/suave/utils/autocmd.lua#L25_L37\r\n\r\nLet's say `SessionWritePre` will be added, then how do I benefit from it?\r\n\r\n> This is because of the ordering problem you pointed out. That doesn't mean autocommands aren't useful though\r\n\r\nFair point, I was also thinking about that the problem I pointed out should apply to many autocmds, not just `SessionWritePre`, so my apologies. But I think I might not fully understand the two pain-points you have pointed out without an example.\r\n\r\nQuoted the words from OP:\r\n\r\n> To address this issue, the table must be serialized/deserialized as JSON, as far as I know, which only needs to be done once, before using the :mksession command\r\n\r\nDid you mean that all plugins are trying to share one single serialized JSON table, and you want to use `SessionWritePre` to avoid serializing many times from different plugins?",
            "created_at": "2023-04-11T05:11:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/22814#issuecomment-1502698175",
            "id": 1502698175,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22814",
            "node_id": "IC_kwDOAPphoM5ZkVq_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1502698175/reactions"
            },
            "updated_at": "2023-04-11T05:23:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1502698175",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24765272?v=4",
                "events_url": "https://api.github.com/users/nyngwang/events{/privacy}",
                "followers_url": "https://api.github.com/users/nyngwang/followers",
                "following_url": "https://api.github.com/users/nyngwang/following{/other_user}",
                "gists_url": "https://api.github.com/users/nyngwang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nyngwang",
                "id": 24765272,
                "login": "nyngwang",
                "node_id": "MDQ6VXNlcjI0NzY1Mjcy",
                "organizations_url": "https://api.github.com/users/nyngwang/orgs",
                "received_events_url": "https://api.github.com/users/nyngwang/received_events",
                "repos_url": "https://api.github.com/users/nyngwang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nyngwang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nyngwang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nyngwang",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Could you elaborate more on this part? I'm trying to understand your problem, but the current confusion in my mind is: Why the plugin author doesn't provide a pre-hook in the first place?\n\nYou have a point: session managers _should_ provide a hook for reading/writing. Though, I think the use-case is similar to the `LspAttach` event in this case, which exists even though `vim.lsp.start` provides an `on_attach` option. \n\nNow that `LspAttach` exists, plugins can set _themselves_ up for the user, rather than require that users maintain an ever-growing list of attachment hooks.\n\n> Did you mean that all plugins are trying to share one single serialized JSON table, and you want to use SessionWritePre to avoid serializing many times from different plugins?\n\nThat's close! It's not that all plugins want to share a dict, but that they want to avoid doing `nvim_set_var` more often than they have to. For context, some plugins right now have to do this to ensure session management works:\n\n```lua\naction_that_modifies_internal_state()\nvim.g.my_plugin_state = {…}\n```\n\n…and they have to do it every time something internal changes that would be saved in a session. In OP's case, doing `nvim_set_var` involves calling `vim.json.encode`, which slows things down further.\n\nCompare this to just setting the global variable one time on autocommand.",
            "created_at": "2023-04-24T00:18:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/22814#issuecomment-1519206697",
            "id": 1519206697,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22814",
            "node_id": "IC_kwDOAPphoM5ajUEp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1519206697/reactions"
            },
            "updated_at": "2023-04-24T00:18:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1519206697",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36409591?v=4",
                "events_url": "https://api.github.com/users/Iron-E/events{/privacy}",
                "followers_url": "https://api.github.com/users/Iron-E/followers",
                "following_url": "https://api.github.com/users/Iron-E/following{/other_user}",
                "gists_url": "https://api.github.com/users/Iron-E/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Iron-E",
                "id": 36409591,
                "login": "Iron-E",
                "node_id": "MDQ6VXNlcjM2NDA5NTkx",
                "organizations_url": "https://api.github.com/users/Iron-E/orgs",
                "received_events_url": "https://api.github.com/users/Iron-E/received_events",
                "repos_url": "https://api.github.com/users/Iron-E/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Iron-E/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Iron-E/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Iron-E",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/22814/comments",
    "created_at": "2023-03-29T17:52:41Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/22814/events",
    "html_url": "https://github.com/neovim/neovim/issues/22814",
    "id": 1646263708,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/22814/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5iH_2c",
    "number": 22814,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/22814/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/22814/timeline",
    "title": "add SessionWritePre event",
    "updated_at": "2025-01-17T15:31:16Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/22814",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/30515389?v=4",
        "events_url": "https://api.github.com/users/tiagovla/events{/privacy}",
        "followers_url": "https://api.github.com/users/tiagovla/followers",
        "following_url": "https://api.github.com/users/tiagovla/following{/other_user}",
        "gists_url": "https://api.github.com/users/tiagovla/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tiagovla",
        "id": 30515389,
        "login": "tiagovla",
        "node_id": "MDQ6VXNlcjMwNTE1Mzg5",
        "organizations_url": "https://api.github.com/users/tiagovla/orgs",
        "received_events_url": "https://api.github.com/users/tiagovla/received_events",
        "repos_url": "https://api.github.com/users/tiagovla/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tiagovla/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tiagovla/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tiagovla",
        "user_view_type": "public"
    }
}