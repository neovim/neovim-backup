{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nNeovim provides `dataSupprt` for codeActions and publishDiagnostics\n\n```\n\t/**\n\t * Whether code action supports the `data` property which is\n\t * preserved between a `textDocument/codeAction` and a\n\t * `codeAction/resolve` request.\n\t *\n\t * @since 3.16.0\n\t */\n\tdataSupport?: boolean;\n```\n\n```\n/**\n\t * A data entry field that is preserved on a code action between\n\t * a `textDocument/codeAction` and a `codeAction/resolve` request.\n\t *\n\t * @since 3.16.0\n\t */\n\tdata?: [LSPAny](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#lspAny);\n}\n```\n\n\nIn the example notice that `REALLY_IMPORTANT_PARAM` is missing from the resolve request.\n\nBecause we serialise converting null to lua nils, when we decode and re-encode we lose properties in the data object\n\n\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\n\n```lua\nlocal requests = {\n  ['initialize'] = function(_)\n    return {\n      --- @type lsp.ServerCapabilities\n      capabilities = {\n        codeActionProvider = {\n          resolveProvider = true,\n          codeActionKinds = { 'source' },\n        },\n      },\n    }\n  end,\n  ['shutdown'] = function(_) end,\n  ['textDocument/codeAction'] = function(_)\n    ---@type lsp.CodeAction[]\n    local action = {\n      {\n        title = 'Example Action',\n        kind = 'source',\n        data = {\n          something = 'this',\n          REALLY_IMPORTANT_PARAM = vim.NIL,\n          something_else = 'that',\n        },\n      },\n    }\n    --- NOTE: Force serde as in memory lsp doesnt go through rpc\n    local encoded = vim.json.encode(action)\n    local decoded = vim.json.decode(encoded, { luanil = { object = true } })\n    return decoded\n  end,\n  ['codeAction/resolve'] = function(params)\n    print(vim.inspect(params))\n\treturn {}\nretu\n  end,\n}\n\nlocal noops = {\n  ['initialized'] = true,\n}\n\nlocal function server()\n  local srv = {}\n  local closing = false\n\n  function srv.request(method, params, handler)\n    coroutine.wrap(function()\n      if requests[method] then\n        local response = requests[method](params)\n        handler(nil, response)\n      elseif method == 'exit' then\n        closing = true\n      else\n        vim.notify('Unhandled request: ' .. method)\n      end\n    end)()\n  end\n\n  function srv.notify(method, _params)\n    coroutine.wrap(function()\n      if method == 'exit' then\n        closing = true\n      elseif not noops[method] then\n        vim.notify('Unhandled notification: ' .. method)\n      end\n    end)()\n  end\n\n  function srv.is_closing()\n    return closing\n  end\n\n  function srv.terminate()\n    closing = true\n  end\n\n  return srv\nend\n\nvim.lsp.start({\n  name = 'serde_nil',\n  cmd = server,\n})\n```\n\nPerform a code action and see that the param is missing\n\n### Expected behavior\n\nData properties to be preserved as null is a valid LSPAny value\n\n```\n/**\n * The LSP any type\n *\n * @since 3.17.0\n */\nexport type LSPAny = LSPObject | LSPArray | string | integer | uinteger |\n\tdecimal | boolean | null;\n\n```\n\n### Nvim version (nvim -v)\n\n0.11\n\n### Language server name/version\n\nAny\n\n### Operating system/version\n\nN/A\n\n### Log file\n\n_No response_",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Currently we decode the messages using `luanil =  { object = true }`:\n\nhttps://github.com/neovim/neovim/blob/c24e6e66dd24a7920f48df7effe50c16527fe880/runtime/lua/vim/lsp/rpc.lua#L399\n\nSo far in all cases absent property and property with `null` value had equal semantics so it wasn't an issue and simplified the code in a lot of places.\n\nI wonder if we could lobby for an addition to the spec that for `data` null/absent should be treated the same.\nOtherwise we'd have to change the decode call, update the type generation to include `vim.NIL` as a value for all places where `null` is a valid value and then go through all the places where we currently rely on lua `nil` semantics and add explicit `vim.NIL` handling.\n\n(Or add a hack to re-decode it limited to relevant messages with different NIL handling)",
            "created_at": "2024-11-28T10:10:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/31368#issuecomment-2505732919",
            "id": 2505732919,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31368",
            "node_id": "IC_kwDOAPphoM6VWnM3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2505732919/reactions"
            },
            "updated_at": "2024-11-28T10:10:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2505732919",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I did think about the hack as the `vim.NIL` is only actively required in the `data` property. The issue that because `textDocument/codeAction` returns a `CodeAction[]` there would be some interaction required, which probably isn't ideal",
            "created_at": "2024-11-28T10:32:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/31368#issuecomment-2505785321",
            "id": 2505785321,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31368",
            "node_id": "IC_kwDOAPphoM6VWz_p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2505785321/reactions"
            },
            "updated_at": "2024-11-28T10:32:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2505785321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I also don't think that a change to spec would work. As the server can be written in any language. So you could have a required property where null is a valid value (the edge cases I am running in to)\n\nSemi-related discussion here: https://github.com/microsoft/language-server-protocol/issues/355",
            "created_at": "2024-11-28T16:45:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/31368#issuecomment-2506498746",
            "id": 2506498746,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31368",
            "node_id": "IC_kwDOAPphoM6VZiK6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2506498746/reactions"
            },
            "updated_at": "2024-11-29T13:06:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2506498746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31368/comments",
    "created_at": "2024-11-27T21:01:58Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31368/events",
    "html_url": "https://github.com/neovim/neovim/issues/31368",
    "id": 2699824334,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31368/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6g7AzO",
    "number": 31368,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31368/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31368/timeline",
    "title": "LSP: data properties will be removed if null",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:36:15Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31368",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
        "events_url": "https://api.github.com/users/tris203/events{/privacy}",
        "followers_url": "https://api.github.com/users/tris203/followers",
        "following_url": "https://api.github.com/users/tris203/following{/other_user}",
        "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tris203",
        "id": 18444302,
        "login": "tris203",
        "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
        "organizations_url": "https://api.github.com/users/tris203/orgs",
        "received_events_url": "https://api.github.com/users/tris203/received_events",
        "repos_url": "https://api.github.com/users/tris203/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tris203",
        "user_view_type": "public"
    }
}