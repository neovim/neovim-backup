{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "\n\n# Problem\n\nNo API to load images as bytes and disiplay them using e.g. kitty image protocol.\n\n# Expected behavior\n\n- `vim.ui.img` (is `vim.ui` the right place for this? or `vim.os`, or ...?)\n    - Could shell out to `imagemagick` CLI. For reference, https://github.com/3rd/image.nvim uses FFI but that seems unnecessary.\n    - `show`\n    - `load`\n\n# Related\n\n- https://github.com/neovim/neovim/issues/24164\n- https://github.com/neovim/neovim/issues/27119",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "@justinmk what kind of appetite is there for this and the related issues being resolved? Both in the terminal emulator and within neovim itself. I'd potentially be interested in tackling part of this given some of the usecases this would open up. Not sure where to discuss in detail.\n\nPersonally, I like how [timg](https://github.com/hzeller/timg/) abstracts the logic to support rendering images with different backends (kitty, iterm2, sixel, etc) and how it handles support for loading and scaling images. If only it offered a way to specify an x & y coordinate for the location of the image within the terminal, I'd argue for using it instead of `imagemagick` as the shell out option. It provides a clean codebase to see which libraries to bring in to load images, handle encoding/decoding, and rendering to terminals that support different protocols.\n\n### References for image protocols\n\n1. [iterm2 images](https://iterm2.com/documentation-images.html) seems the most straightforward to do. You move your cursor to some position and output a base64 encoded image. There's [even a script](https://iterm2.com/utilities/imgcat) that illustrates how to do this pretty easily with external tools like `base64`.\n2. [kitty images](https://sw.kovidgoyal.net/kitty/graphics-protocol/) are more complex, but still boil down to easy-to-understand escape codes. \n3. [sixel images](https://en.wikipedia.org/wiki/Sixel) seem more complex and the examples I can find like [timg's sixel canvas](https://github.com/hzeller/timg/blob/main/src/sixel-canvas.cc) make use of [libsixel](https://github.com/saitoha/libsixel)\n\n\ncc @3rd",
            "created_at": "2024-11-02T22:51:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2453217194",
            "id": 2453217194,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6SOR-q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 4,
                "heart": 9,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 13,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453217194/reactions"
            },
            "updated_at": "2024-11-02T23:06:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453217194",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Let's keep vterm out of this for now. Regarding protocol, I would focus on kitty for now; that has by far the widest adoption across terminals. (And we don't want to chase individual terminals. If one protocol won't do the job, it's not time for that feature yet.)",
            "created_at": "2024-11-02T22:54:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2453217750",
            "id": 2453217750,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6SOSHW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 3,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453217750/reactions"
            },
            "updated_at": "2024-11-02T22:54:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453217750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk @clason @3rd I read through a bit of the escape code logic for both kitty and iterm2 as well as looked to see how hologram.nvim and image.nvim applied the escape codes. My intent was to see what the minimum needed was to be able to show an image within neovim to figure out what you actually need to do. Here's an example for each terminal.\n\n### kitty example\n\n<details>\n\n<summary>kitty terminal gif</summary>\n\n![Image](https://github.com/user-attachments/assets/ed0e3d42-085e-47c9-a7e7-24a278b45172)\n\n</details>\n\n### iterm2 example\n\nThe kitty example does NOT work on wezterm, despite wezterm being mentioned as implementing most of the protocol. So not sure if it doesn't actually support chunked images or if it's something else, but wanted to highlight this given wezterm's and iterm2's penetration. See [wezterm tracker for kitty image protocol](https://github.com/wez/wezterm/issues/986).\n\ncc @wez\n\n<details>\n\n<summary>wezterm terminal gif</summary>\n\n![Image](https://github.com/user-attachments/assets/09883966-6645-4b11-9259-a542fd282eb1)\n\n</details>\n\n### Steps to create\n\n1. In order for the escape sequences to be sent, it seems like plugins like hologram.nvim and image.nvim grabbed the tty from the `/dev` path, which I'm assuming already limits them to Unix-like systems (i.e. Linux, MacOS, FreeBSD).\n\n    <details>\n\n    <summary>get_tty_name() function</summary>\n\n    ```lua\n    ---Retrieve the tty name used by the editor.\n    ---\n    ---E.g. /dev/ttys008\n    ---@return string|nil\n    local function get_tty_name()\n        -- Leverage tty, which reads the terminal name\n        local handle = io.popen(\"tty 2>/dev/null\")\n        if not handle then return nil end\n        local result = handle:read(\"*a\")\n        handle:close()\n        result = vim.fn.trim(result)\n        if result == \"\" then return nil end\n        return result\n    end\n    ```\n\n    </details>\n\n2. You can definitely implement base64 encoding and decoding purely in Lua, and I've seen the same source code (https://github.com/iskolbin/lbase64) passed around everywhere. For me, I just wrote a wrapper that works on MacOS to use `base64` to encode a PNG.\n\n    <details>\n\n    <summary>base64_encode_file() function</summary>\n\n    ```lua\n    local function base64_encode_file(file_path)\n        -- NOTE: Use -b 0 to ensure no newlines are contained by wrapping the content\n        local handle = assert(\n            io.popen(\"base64 -b 0 -i \" .. file_path, \"r\"),\n            \"failed to base64 encode\"\n        )\n        local result = handle:read(\"*a\")\n        handle:close()\n\n        return result\n    end\n    ```\n\n    </details>\n\n3. From there, we abstract writing to the tty device that can be used by any of the backends (i.e. kitty or iterm2):\n\n    <details>\n\n    <summary>write() function</summary>\n\n    ```lua\n    local TTY_NAME = assert(get_tty_name(), \"failed to read editor tty name\")\n\n    ---Writes data to the editor tty.\n    ---@param ... string|number\n    local function write(...)\n        local handle = io.open(TTY_NAME, \"w\")\n        if not handle then\n            error(\"failed to open \" .. TTY_NAME)\n        end\n        handle:write(...)\n        handle:close()\n    end\n    ```\n\n    </details>\n\n4. By default, the image seems to be placed wherever the cursor is, so we need to support moving the cursor and restoring its position in order to place the image at some specific point. When I looked at `image.nvim`, there was extra logic to account for some quirk of ssh + tmux, which I left commented out here:\n\n    <details>\n\n    <summary>move_cursor() and restore_cursor() functions</summary>\n\n    ```lua\n    local CODES = {\n        BEL = \"\\x07\", -- aka ^G\n        ESC = \"\\x1B\", -- aka ^[\n    }\n\n    local function move_cursor(x, y, save)\n        -- if is_SSH and utils.tmux.is_tmux then\n        --     -- When tmux is running over ssh, set-cursor sometimes doesn't actually get sent\n        --     -- I don't know why this fixes the issue...\n        --     utils.tmux.get_cursor_x()\n        --     utils.tmux.get_cursor_y()\n        -- end\n        if save then write(CODES.ESC .. \"[s\") end\n        write(CODES.ESC .. \"[\" .. y .. \";\" .. x .. \"H\")\n        vim.uv.sleep(1)\n    end\n\n    local function restore_cursor()\n        write(CODES.ESC .. \"[u\")\n    end\n    ```\n\n    </details>\n\n5. Finally, we've got a function that puts it together and sends either an `iterm2` or `kitty` escape sequence to display the image. Both support chunked streaming of images, although I only did that for kitty and not iterm2.\n\n    <details>\n\n    <summary>show() function</summary>\n\n    ```lua\n    ---@param opts? {data?:string, filename?:string, pixelation?:\"iterm2\"|\"kitty\"}\n    local function show(opts)\n        opts = opts or {}\n\n        local data = opts.data\n        if opts.filename then\n            data = base64_encode_file(opts.filename)\n        end\n\n        -- Exit early if nothing to show\n        if not data or string.len(data) == 0 then\n            print(\"NO DATA\")\n            return\n        end\n\n        local pixelation = opts.pixelation or \"iterm2\"\n\n        move_cursor(0, 0, true)\n\n        if pixelation == \"iterm2\" then\n            -- NOTE: We MUST mark as inline otherwise not rendered and put in a\n            --       downloads folder\n            write(CODES.ESC .. \"]1337\") -- Begin sequence\n            write(\";File=inline=1\")     -- Display image inline\n            write(\":\" .. data)          -- Transmit base64 data\n            write(CODES.BEL)            -- End sequence\n        elseif pixelation == \"kitty\" then\n            local CHUNK_SIZE = 4096\n            local pos = 1\n            local DATA_LEN = string.len(data)\n\n            -- For kitty, we need to write an image in chunks\n            --\n            --     Graphics codes are in this form:\n            --\n            --         <ESC>_G<control data>;<payload><ESC>\\\n            --\n            --     To stream data for a PNG, we specify the format `f=100`.\n            --\n            --     To simultaneously transmit and display an image, we use `a=T`.\n            --\n            --     Chunking data (such as from over a network) requires the\n            --     specification of `m=0|1`, where all chunks must have a\n            --     value of `1` except the very last chunk.\n            while pos <= DATA_LEN do\n                write(CODES.ESC .. \"_G\") -- Begin sequence\n\n                -- If at the beginning of our image, mark as a PNG to be\n                -- transmitted and displayed immediately\n                if pos == 1 then\n                    write(\"a=T,f=100,\")\n                end\n\n                -- Get our specific chunk of data and increment position\n                local chunk = data:sub(pos, pos + CHUNK_SIZE)\n                pos = pos + CHUNK_SIZE\n\n                -- If we are still sending chunks and not at the end\n                if pos <= DATA_LEN then\n                    write(\"m=1\")\n                end\n\n                -- If we have a chunk available, write it\n                if string.len(chunk) > 0 then\n                    write(\";\")\n                    write(chunk)\n                end\n\n                write(CODES.ESC .. \"\\\\\") -- End sequence\n            end\n        end\n\n        restore_cursor()\n    end\n    ```\n\n    </details>\n",
            "created_at": "2024-11-03T01:59:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2453258781",
            "id": 2453258781,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6SOcId",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 7,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453258781/reactions"
            },
            "updated_at": "2024-11-03T02:32:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453258781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> what kind of appetite is there for this and the related issues being resolved?\n\nHunger level 9000. \n\n> [timg](https://github.com/hzeller/timg/) ... If only it offered a way to specify an x & y coordinate for the location of the image\n\nHas anyone requested that, is there a tracking issue?\n\nThanks for mentioning timg and providing minimal proof of concept, that is hugely helpful. Looks like this won't require much code at all.\n\nP.S. nvim has `vim.base64` (for terminal features such as URL support and... images).",
            "created_at": "2024-11-03T16:25:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2453485516",
            "id": 2453485516,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6SPTfM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 13,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 13,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453485516/reactions"
            },
            "updated_at": "2024-11-03T16:27:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453485516",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Has anyone requested that, is there a tracking issue?\n\nNot that I'm aware of. There was an ask about turning timg into a library, where I mentioned neovim offhand in relation to this issue. \n\nhttps://github.com/hzeller/timg/issues/82\n\n> Thanks for mentioning timg and providing minimal proof of concept, that is hugely helpful. Looks like this won't require much code at all.\n\nI think the complexity comes from a handful of design decisions:\n\n1. Should the image persist (kitty) or move in line with neovim (iterm2)? I would think persisting is the desired effect for this example. \n2. Showing an image in absolute coordinates to the editor is a quick implementation. Where this is used in practice is embedding within buffers to display relative to other lines of text, which involves a lot of complexity to provide logic to wrap text around the image. \n3. Animations and videa streams are a different beast that I haven't familiarized myself with.\n\n> P.S. nvim has `vim.base64` (for terminal features such as URL support and... images).\n\nOh, cool. :) Nice to have that as an option! \n",
            "created_at": "2024-11-03T16:59:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2453496135",
            "id": 2453496135,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6SPWFH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453496135/reactions"
            },
            "updated_at": "2024-11-03T17:01:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453496135",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure how useful the Kitty protocol is for non-terminal UIs, like Neovide. \n\nWhile we haven't done anything yet, I have been looking at different ways of implementing image support, with the current design being very lightweight, see this https://github.com/neovide/neovide/issues/2088#issuecomment-2466919869\n\n> 1. The images are marked using https://neovim.io/doc/user/api.html#extmarks, with a Neovide specific namespace\n> 2. A table `neovide_multimedia` stores the actual image data, which can be an URL, a file, or embedded raw data. It also contains the mime type, and metadata like size, if the image should be scaled. The reason for calling the table. `neovide_multimedia` instead of `neovide_image`, is reserve future support for vector graphics, videos, sounds and so on.\n>\n> When Neovide encounters a supported extmark, it fetches the actual data from `neovide_multimedia` using the extmark id. \n\nThis could perhaps be extended to be more generic, and supported directly by Nvim, so that in terminal mode, it interprets the same extmarks and draws the images using the kitty protocol.",
            "created_at": "2024-11-10T21:19:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2466921753",
            "id": 2466921753,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TCj0Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466921753/reactions"
            },
            "updated_at": "2024-11-10T21:19:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466921753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The point of a protocol is that it covers more than one consumer. ",
            "created_at": "2024-11-10T21:24:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2466923328",
            "id": 2466923328,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TCkNA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466923328/reactions"
            },
            "updated_at": "2024-11-10T21:24:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466923328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The point of a protocol is that it covers more than one consumer.\n\nExactly, that's why I suggest to not use Kitty as the base.\n\nAnd I also mentioned how my proposal could be extended to support terminal UIs\n> This could perhaps be extended to be more generic, and supported directly by Nvim, so that in terminal mode, it interprets the same extmarks and draws the images using the kitty protocol.",
            "created_at": "2024-11-10T21:30:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2466934887",
            "id": 2466934887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TCnBn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466934887/reactions"
            },
            "updated_at": "2024-11-15T02:33:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466934887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, but Kitty is already a protocol, and supported by several terminals. That makes discouraging it in favor of a new vaporware \"protocol\" that is specific to _your_ GUI a hard sell.",
            "created_at": "2024-11-10T21:35:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2466936872",
            "id": 2466936872,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TCngo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466936872/reactions"
            },
            "updated_at": "2024-11-15T02:33:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466936872",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The major problem with Kitty is that it's purely meant for terminal applications and Nvim with its UI protocol is not a terminal application. \n\nFor example, it operates in screen/terminal coordinates, which makes it impossible to display images attached to scrolling buffers, or overlapping floating windows for example. We need something that is attached to buffers and windows.\n\nI'm not saying that you should ditch the Kitty protocol completely. It makes complete sense to emit it that in the TUI implementation. But to base the whole Nvim implementation on it and force external UIs to implement a parser does not sound like a good idea in my ears.\n\n",
            "created_at": "2024-11-10T21:53:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2466949873",
            "id": 2466949873,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TCqrx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 16,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 16,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466949873/reactions"
            },
            "updated_at": "2024-11-15T02:34:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466949873",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'll add my two cents as someone who's currently migrating from doom emacs to neovim. One workflow that I use all the time is writing org notes that generate images (via plantuml) and writing drivers/implementing specs which lends itself nicely to being able to open a pdf in a buffer next to the code as I'm writing it.\n\nUnderstandably the later use case (rendering pdfs) is probably much much more complex than the former (rendering pngs inline which itself may be a tall order).\n\nIt may be worth keeping these use cases in mind however since from my pov a largely textual gui front end like neovide seems to provide an interface not disimilar to the one that emacs's gui does.\n\nFor reference doom-emacs uses [pdf-tools](https://github.com/vedang/pdf-tools) for pdf rendering, and under the hood emacs uses [image.c](https://github.com/emacs-mirror/emacs/blob/master/src/image.c) to implement image support and it's used at the lisp level [here](https://github.com/emacs-mirror/emacs/tree/master/lisp/image)",
            "created_at": "2024-11-12T18:03:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2471225751",
            "id": 2471225751,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TS-mX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2471225751/reactions"
            },
            "updated_at": "2024-11-15T02:33:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2471225751",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13193444?v=4",
                "events_url": "https://api.github.com/users/ReggieMarr/events{/privacy}",
                "followers_url": "https://api.github.com/users/ReggieMarr/followers",
                "following_url": "https://api.github.com/users/ReggieMarr/following{/other_user}",
                "gists_url": "https://api.github.com/users/ReggieMarr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ReggieMarr",
                "id": 13193444,
                "login": "ReggieMarr",
                "node_id": "MDQ6VXNlcjEzMTkzNDQ0",
                "organizations_url": "https://api.github.com/users/ReggieMarr/orgs",
                "received_events_url": "https://api.github.com/users/ReggieMarr/received_events",
                "repos_url": "https://api.github.com/users/ReggieMarr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ReggieMarr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ReggieMarr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ReggieMarr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm not sure how useful the Kitty protocol is for non-terminal UIs, like Neovide.\n\nTrue. We could extend the Nvim UI protocol to emit an image, and probably just copy the general structure of how kitty does it. It is a bit awkward to think about invoking `timg` from the TUI layer though 🤔 ",
            "created_at": "2024-11-15T02:38:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2477837670",
            "id": 2477837670,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TsM1m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2477837670/reactions"
            },
            "updated_at": "2024-11-15T02:38:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2477837670",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "\n> It is a bit awkward to think about invoking `timg` from the TUI layer though 🤔 \n\nI'd just use timg code base as a starting point and abstract a backend that can swap between kitty and something else. Would let graphical implementations just need to provide their own implementation of low level image rendering. \n\nIf we can do the plumbing to figure out layout routing for placing images - do they wrap text? Anchor to buffers? Etc - and provide something like, \"render at line, col a portion of an image to fill a space of width, height\" it might be enough. \n\nI can whip something up that's quick and throw away to get a dialog started on concrete details if we want to go there. \n",
            "created_at": "2024-11-15T15:28:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2479168452",
            "id": 2479168452,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TxRvE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2479168452/reactions"
            },
            "updated_at": "2024-11-15T15:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2479168452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@chipsenkbeil \nOne reason why I was planning to use external marks for Neovide for this, was that they automatically have much of the functionality needed for anchoring and stuff like that. And empty virtual text could be used as a placeholder, so that the text flows correctly.  \n\nSo, I think that's one option to explore.",
            "created_at": "2024-11-15T16:44:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2479409494",
            "id": 2479409494,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TyMlW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2479409494/reactions"
            },
            "updated_at": "2024-11-15T16:44:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2479409494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "### Kitty Unicode Placeholders\n\nReading through kitty's protocol, it introduced the concept of a [unicode placeholder](https://sw.kovidgoyal.net/kitty/graphics-protocol/#unicode-placeholders) that lets kitty track and render images located using the unicode character, which in combination with an extmark and virtual text could (?) be a way to more easily inject and render the image without the need for complex image rendering management. I do wonder if it will work if you scroll the unicode out of view, or if that causes the image to disappear entirely.\n\n### Extmark + virtual text demo inbound\n\nSeparately, I've got a nearly-finished demo at home that leverages external marks and virtual text without the unicode placeholder idea above to make this work with a pluggable backend using kitty. Been traveling last couple of weeks for work, so when I get home next week I'll try to finish it up and share it here for discussion.\n\nI'll be curious on your thoughts, @fredizzimo, @clason, @justinmk \n\n### Can extmarks + virtual text do block wrapping?\n\nWhen fiddling with extmarks and virtual text, it didn't seem that I could create them in a way that has text wrap around some rectangular block. You can specify an `end_row` and `end_col`, configure virtual text to be `inline`, and provide a series of virtual lines; however, what I'm looking for is a way to create a gap where an image will be located where text will flow around it. Doesn't seem easy to do when dabbling, requiring me to create a bunch of individual extmarks with inline virtual text - one per line - and delete & recreate them whenever text is altered. Is there a better way to do this?\n\n![Image](https://github.com/user-attachments/assets/330e0b9e-999b-40b9-9ec0-cb5a0ddf9bba)\n![Image](https://github.com/user-attachments/assets/6bd5d080-753b-4208-9f42-d4c8febd9dad)\n![Image](https://github.com/user-attachments/assets/bfd653f7-8c4d-4a95-9d24-ec5eea72287b)\n",
            "created_at": "2024-11-20T23:48:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2489772460",
            "id": 2489772460,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6UZums",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2489772460/reactions"
            },
            "updated_at": "2024-11-20T23:48:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2489772460",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> introduced the concept of a [unicode placeholder](https://sw.kovidgoyal.net/kitty/graphics-protocol/#unicode-placeholders) that lets kitty track and render images located using the unicode character,\n\nSounds useful. I [hacked up a poc](https://github.com/justinmk/config/commit/a04f6fb619c9afbc0e8ea56d863700745cba32b8) based on your notes (thank you!) above (used it in my https://neovimconf.live/ talk) and it worked ok, but the cursor placement was weird (I could not figure out the kitty x/y offset fields, and related variants).\n\n> Can extmarks + virtual text do block wrapping?\n\nDo we need to care about that right now? Initially I think we only need absolute positioning (overlay). Then as a followup, whole-row image inserts (this can reuse our existing diff-mode/virtualtext logic):\n\n```\nline 1\nline 2\n[ image ]\nline 3\n...\n```",
            "created_at": "2024-11-21T00:00:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2489784041",
            "id": 2489784041,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6UZxbp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2489784041/reactions"
            },
            "updated_at": "2024-11-21T00:02:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2489784041",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Sounds useful. I [hacked up a poc](https://github.com/justinmk/config/commit/a04f6fb619c9afbc0e8ea56d863700745cba32b8) based on your notes (thank you!) above (used it in my https://neovimconf.live/ talk) and it worked ok, but the cursor placement was weird (I could not figure out the kitty x/y offset fields, and related variants).\n\nOh, great! I was just dabbling with the kitty extra parameters before I had to leave for a handful of work trips. I hadn't actually gotten the chance to view the majority of neovimconf yet, so look forwarding to seeing how you applied image rendering\n\n> Do we need to care about that right now? Initially I think we only need absolute positioning (overlay). Then as a followup, whole-row image inserts (this can reuse our existing diff-mode/virtualtext logic):\n\nI was planning to submit a stack of incremental changes to make it easier to review and accept bite-sized features. Whole-row inserts - if I understand how you're proposing - aren't difficult to do. I was looking for the next level of integration, though, which is inline images with wrapping text as an option.\n\nRegardless, I can send over pieces as PRs to iterate on if that's the direction we want to go, or we can continue discussing here first.",
            "created_at": "2024-11-21T00:46:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2489836427",
            "id": 2489836427,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6UZ-OL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 6,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2489836427/reactions"
            },
            "updated_at": "2024-11-21T00:46:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2489836427",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That sounds perfect.",
            "created_at": "2024-11-21T02:54:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2489961305",
            "id": 2489961305,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6UactZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2489961305/reactions"
            },
            "updated_at": "2024-11-21T02:54:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2489961305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@clason I wonder how you came to that conclusion that the kitty protocol is the widest adopted among terminal (emulators). Cause I would say that SIXEL is **BY FAR** the most supported by terminals & terminal emulators. (That might look a bit different for applications written [within the last seven years](https://github.com/kovidgoyal/kitty/issues/33#issuecomment-331687713) — that is harder to compare — but often applications use something that support multiple protocols. In fact, almost all but of the — partially once kitty-exclusive apps — that the kitty dev lists on his website support other protocols by now — even when not explicitly mentioning the others in some cases...)\nThe kitty website lists three other terminal emulators that support the kitty protocol: https://sw.kovidgoyal.net/kitty/graphics-protocol/\nWhile https://www.arewesixelyet.com — which is a bit outdated — lists way more.\nIn fact, I just went through every TE (& the few other things) listed one both sites and checked for support of mainly kitty or sixel protocol by reading READMEs and looking at issue and when I was unsure I grepped source code or run Kitty-Tetris (sorry iTerm2 protocol; still listed it if I noticed a support mention):\nShipping directly with support:\nkitty: kitty\nwayst: kitty & sixel (labelled experimental)\nwezterm: kitty & sixel\niTerm2: kitty & sixel &  iTerm2\nctx terminal: kitty & sixel & iTerm2\nkonsole: kitty & sixel & iTerm 2\nU++ (and \"reference\" Bobcat): sixel & iTerm2 & Jexer\nSwiftTerm (which is also an engine used by e.g. La Terminal): sixel & iTerm2\nMacTerm: sixel & iTerm2\nmintty: sixel & iTerm2\nrio: sixel & iTerm2\nxterm: sixel\nWindows Console: sixel\nWindows Terminal: sixel\nRLogin: sixel\nmlterm: sixel\nDomTerm: sixel\nfoot: sixel\nContour: sixel\nSyncTERM: sixel\nttyd: sixel\n\n\nVia addon:\nxterm.js (e.g. used in VS Code): sixel\n\nInactive development:\nExoterm: sixel\nToyterm: sixel\ndarktile: sixel\nEat: sixel (however, they acknowledge kitty as well?!)\nyaft (framebuffer terminal): sixel\n(And of course the terminals from the 80s)\n\nMultiplexers / \"workspaces\":\nZellij: sixel\ntmux: sixel, (kitty indirectly via -g allow-passthrough somehow)\n\nThere are also multiple forks and patches that add SIXEL support to some TEs. For kitty I'm only aware of a patch for st.\n\n",
            "created_at": "2024-11-28T02:22:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2505137135",
            "id": 2505137135,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6VUVvv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 10,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 10,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2505137135/reactions"
            },
            "updated_at": "2024-11-28T05:17:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2505137135",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32062480?v=4",
                "events_url": "https://api.github.com/users/schrmh/events{/privacy}",
                "followers_url": "https://api.github.com/users/schrmh/followers",
                "following_url": "https://api.github.com/users/schrmh/following{/other_user}",
                "gists_url": "https://api.github.com/users/schrmh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/schrmh",
                "id": 32062480,
                "login": "schrmh",
                "node_id": "MDQ6VXNlcjMyMDYyNDgw",
                "organizations_url": "https://api.github.com/users/schrmh/orgs",
                "received_events_url": "https://api.github.com/users/schrmh/received_events",
                "repos_url": "https://api.github.com/users/schrmh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/schrmh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/schrmh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/schrmh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I just want to add my two cents:\n\nTying the image API to a specific protocol seems like unnecessary coupling and bad design. Instead, the API itself should be able to work with multiple protocols, which could be used depending on the frontend.  Frontends should absolutely not have to implement their own parsers for terminal-specific protocols like sixel or Kitty, instead they should be able to use whatever they want to.",
            "created_at": "2024-11-28T23:13:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2506843056",
            "id": 2506843056,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6Va2Ow",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 12,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 12,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2506843056/reactions"
            },
            "updated_at": "2024-11-29T00:54:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2506843056",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51296839?v=4",
                "events_url": "https://api.github.com/users/AndreiSva/events{/privacy}",
                "followers_url": "https://api.github.com/users/AndreiSva/followers",
                "following_url": "https://api.github.com/users/AndreiSva/following{/other_user}",
                "gists_url": "https://api.github.com/users/AndreiSva/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AndreiSva",
                "id": 51296839,
                "login": "AndreiSva",
                "node_id": "MDQ6VXNlcjUxMjk2ODM5",
                "organizations_url": "https://api.github.com/users/AndreiSva/orgs",
                "received_events_url": "https://api.github.com/users/AndreiSva/received_events",
                "repos_url": "https://api.github.com/users/AndreiSva/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AndreiSva/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AndreiSva/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AndreiSva",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@schrmh @AndreiSva the implementation I'm submitting soon is abstract of underlying graphics protocol. I have iterm2 and kitty working, and also have some specification references for sixel ([#1](https://vt100.net/docs/vt3xx-gp/chapter14.html), [#2](https://www.digiater.nl/openvms/decus/vax90b1/krypton-nasa/all-about-sixels.text), [#3](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Sixel-Graphics)) to implement a pure-Lua backend.\n\nHowever, for the early PRs to review, I'll just be submitting with what I have as examples for @justinmk and others to review since I imagine there will be a lot of dialog on evolving my examples in a way that makes them more resilient to future backends.\n\nIn a private repo that I'll convert into PRs for neovim, I've got absolute image placement (not connected to buffers/windows) and backend detection (kitty? iterm2? sixel?) already implemented. The stages I imagine for this to roll out in review are\n\n1. Load an image from disk and/or wrap a base64 encoded image in a consistent type.\n    ```lua\n    -- Returns some image abstraction, which in my situation is just a wrapper around the base64-encoded bytes\n    --\n    -- This abstraction provides some friendly methods like iterating over chunks of bytes,\n    -- which is important especially when running within tmux/ssh\n    --\n    -- We can also implement caching here to prevent reloading an image multiple times\n    local image = vim.img.load(\"path/to/image.png\")\n    ```\n2. Display an image with absolute coordinates in the terminal.\n    ```lua\n    -- Display loaded image at absolute x, y with a width, height.\n    -- All of the options are technically optional per the implementation I've already written.\n    -- Defaults to current cursor position for x, y and the loaded image's cell width/height\n    --\n    -- I've also already implemented a crop parameter for kitty that supports displaying a portion\n    -- of the image using pixel coordinates, but we'll leave that out of here.\n    vim.img.show(image, { x = ..., y = ..., width = ..., height = ... })\n    ```\n3. Specify the backend to use when showing the image. This would also be how other frontends can supply their own backend to render images.\n    ```lua\n    -- Use the default graphics protocol detected by neovim for the current terminal\n    -- This could be kitty, iterm2, or sixel\n    vim.img.show(image, { ... })\n\n    -- Use the kitty graphics protocol to render the image\n    vim.img.show(image, { backend = \"kitty\" })\n\n    -- Use a custom backend represented by a Lua table implementing specific methods,\n    -- which can be used by other frontends to supply their own implementation\n    vim.img.show(image, { backend = {\n        ---@param image NvimImage\n        ---@param opts? NvimImageOpts\n        render = function(image, opts)\n            -- Opts contains the specifics to use when rendering the image, which may not\n            -- be supported by all backends. On first draft, this would include things like\n            --\n            -- 1. pos: {x, y} table (unit in cells) of top-left position of image in terminal, defaulting ot cursor\n            -- 2. size: {width, height} table (unit in cells) of size of image when placed in terminal\n            -- 3. crop: {x, y, width, height} table (unit in pixels) to determine partial image to show\n        end \n    })\n    ```\n4. Support detecting a preferred backend for different terminals. I've got this working after reverse engineering how `timg` does this. On the fence about including this, but seems like a good idea to let folks not have to worry about which backend to use. \n    ```lua\n    ---Detects and returns the default protocol supported, or `nil` if unknown.\n    ---@type \"iterm2\"|\"kitty\"|\"sixel\"|nil\n    local backend = vim.img.protocol()\n    ```\n5. Support image rendering that is tracked within a buffer. A protocol like kitty supports this via unicode placeholders; otherwise, I'm not sure how we'd do this with iterm2 or sixel. Regardless, more thought needs to be given to how neovim abstracts this. @fredizzimo's suggestion of using extmarks with virtual text seems most appropriate to me. Have neovim insert an extmark at the top-left position of the image, which will be used to track the image position. From there, backends can query to see what images to render and which are in frame?\n    ```lua\n    local buf = vim.api.nvim_get_current_buf()\n\n    -- Would use vim.api.nvim_buf_set_extmark() at the position\n    -- Do we set a `url` as a file url pointing to the image?\n    -- If not a file path, how do we associate a unique id tied to our loaded image so we can supply base64 bytes?\n    -- Do we set `ui_watched` on the extmark? I don't know what `win_extmark` events are.\n    vim.img.insert(buf, image, { ... })\n    ```\n6. For the image rendering within a buffer, we start by inserting virtual lines that match the height of the image so text flows above and below it. For a more advanced form, we'd need to be creative with virtual text and tracking to flow text around the image including the left and right sides. I'm assuming we'd need to create multiple, ephemeral virtual lines. On every redraw, we'd need to look up the image position and insert new ephemeral lines, which seems poor in performance. I tried to hack this to limited success.",
            "created_at": "2024-11-29T19:36:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2508473482",
            "id": 2508473482,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6VhESK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 11,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 12,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 24,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2508473482/reactions"
            },
            "updated_at": "2024-11-29T19:36:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2508473482",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "As a user of neovim I am very happy to see progress on this and I would just like to say that if you have any questions about the kitty protocol or if you have a feature request that would make your life easier, I will be happy to discuss. ",
            "created_at": "2024-11-30T03:42:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2508813975",
            "id": 2508813975,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6ViXaX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 8,
                "heart": 27,
                "hooray": 0,
                "laugh": 0,
                "rocket": 13,
                "total_count": 48,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2508813975/reactions"
            },
            "updated_at": "2024-11-30T03:42:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2508813975",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1308621?v=4",
                "events_url": "https://api.github.com/users/kovidgoyal/events{/privacy}",
                "followers_url": "https://api.github.com/users/kovidgoyal/followers",
                "following_url": "https://api.github.com/users/kovidgoyal/following{/other_user}",
                "gists_url": "https://api.github.com/users/kovidgoyal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kovidgoyal",
                "id": 1308621,
                "login": "kovidgoyal",
                "node_id": "MDQ6VXNlcjEzMDg2MjE=",
                "organizations_url": "https://api.github.com/users/kovidgoyal/orgs",
                "received_events_url": "https://api.github.com/users/kovidgoyal/received_events",
                "repos_url": "https://api.github.com/users/kovidgoyal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kovidgoyal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kovidgoyal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kovidgoyal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> As a user of neovim I am very happy to see progress on this and I would just like to say that if you have any questions about the kitty protocol or if you have a feature request that would make your life easier, I will be happy to discuss. \n\nI plan to tackle buffer-tracked images in a separate PR from the initial one. For the unicode placeholder approach, if the placeholder is scrolled out of view, does the entire image disappear as a consequence?\n\nThinking of scrolling down in a buffer where the top part of an image moves out of view.\n\nSeparately, I'm leveraging the flag to show the image immediately `a=T` instead of using an image I'd. Are there performance concerns? Best practices? We're using chunked images, if that matters.\n\nYou can see #31399 in how I've implemented kitty as a backend for absolute positioning. I also need to figure out when we clear images and how to do that with absolute positioning. \n\n### Supported pixel data formats\n\n~~Also, I've hardcoded `f=100`. Should we be detecting image types ourselves? The doc mentions 24, 32, 100 as options but I don't know what these are or how we'd determine.~~\n\n> The terminal emulator must understand pixel data in three formats, 24-bit RGB, 32-bit RGBA and PNG. This is specified using the f key in the control data. f=32 (which is the default) indicates 32-bit RGBA data and f=24 indicates 24-bit RGB data and f=100 indicates PNG data. The PNG format is supported both for convenience, and as a compact way of transmitting paletted images.\n",
            "created_at": "2024-11-30T16:26:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2509024797",
            "id": 2509024797,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6VjK4d",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509024797/reactions"
            },
            "updated_at": "2024-11-30T21:03:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509024797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "On Sat, Nov 30, 2024 at 08:26:37AM -0800, Chip Senkbeil wrote:\n> > As a user of neovim I am very happy to see progress on this and I would just like to say that if you have any questions about the kitty protocol or if you have a feature request that would make your life easier, I will be happy to discuss.\n>\n> I plan to tackle buffer-tracked images in a separate PR from the initial one. For the unicode placeholder approach, if the placeholder is scrolled out of view, does the entire image disappear as a consequence?\n\n\nNo, a partial image remains corresponding to the remaining characters.\n\n\n>\n> Thinking of scrolling down in a buffer where the top part of an image moves out of view.\n>\n> Separately, I'm leveraging the flag to show the image immediately `a=T` instead of using an image I'd. Are there performance concerns? Best practices? We're using chunked images, if that matters.\n\n\nNo performance implications or best practices here, do whatever works\nfor you. However, rather than using chunked images you should detect\nwhat transfer modes the terminal supports and use the most efficient\none. In the vast majority of cases nvim and the terminal will be running\non the same computer and so using shared memory or a file will be much\nfaster.\n\n\n>\n> Also, I've hardcoded `f=100`. Should we be detecting image types ourselves? The doc mentions 24, 32, 100 as options but I don't know what these are or how we'd determine.\n\n\nf=100 works with PNG format. For any other image format simply shell out\nto convert from imagemagick or use a library to convert it to RGBA data\nand transmit that.\n",
            "created_at": "2024-12-01T03:12:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2509544698",
            "id": 2509544698,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6VlJz6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509544698/reactions"
            },
            "updated_at": "2024-12-01T03:17:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2509544698",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1308621?v=4",
                "events_url": "https://api.github.com/users/kovidgoyal/events{/privacy}",
                "followers_url": "https://api.github.com/users/kovidgoyal/followers",
                "following_url": "https://api.github.com/users/kovidgoyal/following{/other_user}",
                "gists_url": "https://api.github.com/users/kovidgoyal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kovidgoyal",
                "id": 1308621,
                "login": "kovidgoyal",
                "node_id": "MDQ6VXNlcjEzMDg2MjE=",
                "organizations_url": "https://api.github.com/users/kovidgoyal/orgs",
                "received_events_url": "https://api.github.com/users/kovidgoyal/received_events",
                "repos_url": "https://api.github.com/users/kovidgoyal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kovidgoyal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kovidgoyal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kovidgoyal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I was trying to display some images in neovim and now I see this post. 🥳\n\nMy approach is similar to the discussion above:\nextmark + unicode placeholder as virtual text. \n\nSince the unicode characters must be colored in such a way so the image id is encoded in it. Using the escape control sequence we can do that easily:\n```\nprintf \"\\e[38;5;<image_id>m<unicode characters>\\e[39m\"\n```\n\nHowever I don't think we can do escape sequence coloring in extmark. \n\nThis got me stuck and I tried to use highlight group to color the unicode characters directly and see if Kitty can find the them but I failed to make it work. \n\nI'm interested how you guys would solve this problem?",
            "created_at": "2024-12-16T02:52:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2544432767",
            "id": 2544432767,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6XqPZ_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2544432767/reactions"
            },
            "updated_at": "2024-12-16T03:59:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2544432767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33592421?v=4",
                "events_url": "https://api.github.com/users/HuntFeng/events{/privacy}",
                "followers_url": "https://api.github.com/users/HuntFeng/followers",
                "following_url": "https://api.github.com/users/HuntFeng/following{/other_user}",
                "gists_url": "https://api.github.com/users/HuntFeng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HuntFeng",
                "id": 33592421,
                "login": "HuntFeng",
                "node_id": "MDQ6VXNlcjMzNTkyNDIx",
                "organizations_url": "https://api.github.com/users/HuntFeng/orgs",
                "received_events_url": "https://api.github.com/users/HuntFeng/received_events",
                "repos_url": "https://api.github.com/users/HuntFeng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HuntFeng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HuntFeng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HuntFeng",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Might be a bad idea, but fallback to image rendering with halfblocks (▄) should be considered.\n\nI've seen several libraries that support it along with several of the other protocols mentioned. I highly recommend building on work done by one of those libraries as much as possible.",
            "created_at": "2024-12-30T16:20:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2565679411",
            "id": 2565679411,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6Y7Skz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2565679411/reactions"
            },
            "updated_at": "2024-12-30T16:20:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2565679411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/22641188?v=4",
                "events_url": "https://api.github.com/users/Lazerbeak12345/events{/privacy}",
                "followers_url": "https://api.github.com/users/Lazerbeak12345/followers",
                "following_url": "https://api.github.com/users/Lazerbeak12345/following{/other_user}",
                "gists_url": "https://api.github.com/users/Lazerbeak12345/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Lazerbeak12345",
                "id": 22641188,
                "login": "Lazerbeak12345",
                "node_id": "MDQ6VXNlcjIyNjQxMTg4",
                "organizations_url": "https://api.github.com/users/Lazerbeak12345/orgs",
                "received_events_url": "https://api.github.com/users/Lazerbeak12345/received_events",
                "repos_url": "https://api.github.com/users/Lazerbeak12345/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Lazerbeak12345/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Lazerbeak12345/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Lazerbeak12345",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@Lazerbeak12345 you did not actually mention / link-to the library? In any case, we want to avoid adding new build-time dependencies. Or limit it to one best-in-class dependency, not multiple different ones. ",
            "created_at": "2024-12-30T17:20:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2565736853",
            "id": 2565736853,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6Y7gmV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2565736853/reactions"
            },
            "updated_at": "2024-12-30T17:20:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2565736853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 27,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30889/comments",
    "created_at": "2024-10-21T15:21:59Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30889/events",
    "html_url": "https://github.com/neovim/neovim/issues/30889",
    "id": 2602894677,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 144672485,
            "name": "provider",
            "node_id": "MDU6TGFiZWwxNDQ2NzI0ODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/provider"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30889/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 686,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 635,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-01-21T00:09:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6bJQVV",
    "number": 30889,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 60,
        "-1": 3,
        "confused": 0,
        "eyes": 18,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 81,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30889/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30889/timeline",
    "title": "image API",
    "updated_at": "2025-01-17T15:26:36Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30889",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}