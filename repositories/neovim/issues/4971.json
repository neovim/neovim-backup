{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "I recently came up with the idea which may speed up API functions: in place of obtaining and returning some intermediate type like Object make them all work with some kind of streams. Specifically all API function signatures should look like\n\n``` C\nvoid func(APIOutStream out, APIInStream in);\n```\n\nwhere\n\n``` C\ntypedef struct {\n  bool (*push_dictionary_start)(void *cookie, size_t len);\n  // …\n  // basically the current msgpack API: first push container start with length, then values\n  // values are pushed by one call, except for strings: sometimes it is more convenient to\n  // push them in parts to avoid unnecessary allocations.\n  bool (*push_string_start)(void *cookie, size_t len);\n  bool (*push_string_part)(void *cookie, size_t len, char *data);\n  bool (*push_string)(void *cookie, size_t len, char *data);\n  bool (*error_out)(void *cookie, Error err);\n  bool (*errorred)(void *cookie);\n  void *cookie;\n} APIOutStream;\n\ntypedef struct {\n  ObjectType (*next_object_type)(void *cookie, Error *err);\n  bool (*pull_dictionary_start)(void *cookie, size_t *ret_len, Error *err);\n  // …\n  bool (*pull_string)(void *cookie, size_t *ret_len, const char **ret_string, Error *err);\n  void *cookie;\n} APIInStream;\n```\n\nAPIOutStream structure is supposed to be used to\n1. Write msgpack values directly to the channel (which is OK as long as it is uses RBuffer).\n2. Directly construct VimL values (#4934).\n3. Directly construct lua values (#4411).\n\nAPIInStream is based on the same technique I previously discussed somewhere (AFAIR, gitter) with @tarruda: in place of pulling in the whole msgpack value, allocating a bunch of memory in process, pull this as needed, filling values placed on stack (and, e.g. `pull_string` may say that “returned string is usable as long as next stream function is not called”; to avoid alloctations though it may make sense to also pull string by parts, but unlike out stream this is going to be convenient almost never). So e.g. API function “id” (takes one argument and returns it) will look like (assuming recursion is OK)\n\n``` C\n#define WRITE(out, func, ...) \\\n  do { \\\n    APIOutStream out_ = (out); \\\n    if (!(out_.func(out_.cookie, __VA_ARGS__))) { \\\n      return; \\\n    } \\\n  } while (0)\n#define READ(out, in, func, err, ...) \\\n  do { \\\n    APIInStream in_ = (in); \\\n    APIOutStream out_ = (out); \\\n    if (!(in_.func(in_.cookie, __VA_ARGS__, &err))) { \\\n      out_.error_out(out_.cookie, err); \\\n      return; \\\n    } \\\n  } while (0)\nvoid api_id(APIOutStream out, APIInStream in)\n  API(Object, (Object))\n{\n  Error err;\n  switch (in.next_object_type(in.cookie, &err)) {\n    case kObjectTypeMissing: {\n      out.error_out(out.cookie, err);\n      return;\n    }\n    case kObjectTypeNil: {\n      if (!in.pull_nil(in.cookie, &err)) {\n        assert(false);\n      }\n      if (!out.push_nil(out.cookie)) {\n        return;\n      }\n      break;\n    }\n    case kObjectTypeString: {\n      size_t len;\n      const char *string;\n      READ(out, in, pull_string, err, &len, &string));\n      WRITE(out, push_string, len, sring);\n      break;\n    }\n    // …\n    case kObjectTypeDictionary: {\n      size_t len;\n      READ(out, in, pull_dictionary_start, err, &len));\n      WRITE(out, push_dictionary_start, len);\n      for (size_t i = 0; i < len * 2; i++) {  // len * 2: key + value\n        api_id(out, in);\n        if (out.errorred(out.cookie)) {\n          return;\n        }\n      }\n      break;\n    }\n  }\n}\n```\n\n(This example was created in order to demonstrate how API is used, most real API functions will not have that much code size bump, especially given that there will be helpers for typical operations like “get VimL value out of in stream”.)\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "It would make sense to use this for functions that might pass in unlimited large datastructures, but I still think we should allow API functions with \"simple\" signatures (a few Integers, bools and  strings, but maybe not arbitrary Object/Reference/etc) to be declared as they are right now as otherwise we will need to write a lot of boilerplate in places we now have very clear and readable code.\n",
            "created_at": "2016-06-26T20:22:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-228620598",
            "id": 228620598,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyMDU5OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228620598/reactions"
            },
            "updated_at": "2016-06-26T20:22:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228620598",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It might be too crazy but I wonder if we can't combine the approaches, consider `set_lines`:\n\n`void buffer_set_lines(Buffer buffer,Integer start,Integer end,Boolean strict_indexing, ApiInStreamTyped(ArrayOf(String)) replacement, Error *err)`\n\nwhere  streamed parameter/s/ must be _last_ (so the generated wrapper can unpack the automatic arguments from the msgpack stream first, and then pass the stream in). Note the validation of \"replacement\" here must be done by the implementation, the type is only for the api metadata.\n",
            "created_at": "2016-06-26T20:36:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-228621303",
            "id": 228621303,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyMTMwMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228621303/reactions"
            },
            "updated_at": "2016-06-26T20:36:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228621303",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bfredl There will not be much boilerplate:\n\n``` C\nvoid vim_change_directory(APIOutStream out, APIInStream in)\n{\n  Error err;\n  String dir;\n  READ(in, out, pull_string, &dir.size, &dir.data);\n  if (dir.size >= MAXPATHL) {\n    api_set_error(err, Validation, _(\"Directory string is too long\"));\n    out.errour_out(out.cookie, err);\n    return;\n  }\n\n  try_start();\n\n  if (vim_chdir((char_u *)dir.data)) {\n    if (!try_end(err)) {\n      api_set_error(err, Exception, _(\"Failed to change directory\"));\n      out.error_out(out.cookie, err);\n    }\n    return;\n  }\n\n  post_chdir(kCdScopeGlobal);\n  try_end(&err);\n  out.error_out(out.cookie, err);  // No-op if !err.set\n}\n```\n\nBasically (if current types are kept) each argument in simple functions is being replaced with one `READ(…)` line plus `Error err` line in each function. I added `out.error_out` after each `api_set_error`, but obviously that could be `api_error_out(out, Exception, _(\"Failed to change directory\"))` (BTW, why this thing is using `_`?! As long as there is single Exception/Validate/etc in place of unique error identifier one may need to do actions based on the error message; you may see that in Python errors are not translated).\n",
            "created_at": "2016-06-26T20:37:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-228621327",
            "id": 228621327,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyMTMyNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228621327/reactions"
            },
            "updated_at": "2016-06-26T20:37:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228621327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It might not be too much boilerplate but still I wonder why we can't just change the autogenerated wrappers to unpack from a stream instead of the `Array args`, expect for the specific api functions we really expect to handle a lot of data which will use the stream directly, instead of needing to  change them all.\n",
            "created_at": "2016-06-26T20:41:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-228621562",
            "id": 228621562,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyMTU2Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228621562/reactions"
            },
            "updated_at": "2016-06-26T20:41:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228621562",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> (BTW, why this thing is using `_`?!\n\nYes, that should be removed. API errors don't need localization.\n",
            "created_at": "2016-06-26T20:47:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-228621854",
            "id": 228621854,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyMTg1NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228621854/reactions"
            },
            "updated_at": "2016-06-26T20:47:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228621854",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk API client authors are either not affected at all, or it they will need to handle cases like “Neovim returned `[{\"foo\": \"bar\", \"func\": NIL, NIL: NIL, NIL: NIL}, NIL, NIL]Error(\"unable to pass funcref\")`”: depends on whether we dump the output to the channel immediately or delay until function finishes so `out.error_out()` errors may through output away (actually as a client author I would find those NILs rather inconvenient, also if first NIL is the `Error` entity; and this is going to break all existing clients).\n\nSimple API functions are not a problem for writers at all (also @bfredl’s suggestion is possible and makes it simpler, though I do not like the idea of having two variants of functions). Complex API functions is actually what will benefit the most.\n\n---\n\nNote though that in some cases of such “stream handling” (e.g. `replacement` @bfredl mentioned) API function will actually work like “delete all lines, append N strings, error out when encountered non-string in replacement on position N”. Validation is done “in process”, turning some functions into “garbage in -> garbage out”.\n\n---\n\nBTW, I got two new ideas for this:\n1. Actually keep String type because it is more convenient to read into String then into a pair of parameters.\n2. Add `pull_string_len(void *, size_t *)` and `pull_string_content(void *, char *buf)` (i.e. use preallocated buffer): `vim_change_directory` may clearly benefit from this.\n3. Add `out.everything_ok(out.cookie)` call: this tells dispatcher that from this point function will not ever call `out.error_out`, so too much bufferring is not needed. `buffer_get_lines` and all functions which return some typval_T will definitely benefit from this.\n",
            "created_at": "2016-06-26T21:00:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-228622537",
            "id": 228622537,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyMjUzNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228622537/reactions"
            },
            "updated_at": "2016-06-26T21:00:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228622537",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "set_lines should _in_ _principle_ be able to use undo mechanism (create new undo header regardless of `undolevel`, undo-and-forget on failure, merge with the current one on success) to be able to validation \"in process\" while retaining atomic semantics.\n\n>  I do not like the idea of having two variants of functions\n\nActually I'm considering _one_ variant of functions which could use either or (with restrictions) mix the two argument passing forms (which one could think is even worse of course), like the set_lines example above with unpacked \"prefix\" or taking auto-unpacked parameters but returning an object through a ApiOutStream. (though maybe we should require any function able to return an error to always use the \"stream\" interface, as they already use a similar interface to return the error). I would say it would be worth making the auto-generated dispatch a bit more complex if implementing API functions (which there will be many of) gets simpler.\n",
            "created_at": "2016-06-26T21:22:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-228623754",
            "id": 228623754,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyMzc1NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228623754/reactions"
            },
            "updated_at": "2016-06-26T21:22:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228623754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> APIInStream is based on the same technique I previously discussed somewhere (AFAIR, gitter) with @tarruda: in place of pulling in the whole msgpack value, allocating a bunch of memory in process, pull this as needed, filling values placed on stack\n\nIt should be noted that [libmpack](https://github.com/tarruda/libmpack) API was designed with such use case in mind: packing and unpacking arbitrarily large structures with a fixed amount of memory.\n\nThe main goal of the API was to allow direct conversion of msgpack streams to/from native data structures such as those found in languages like lua or python, but it could be adapted for usage and validation in C endpoints too. More specifically, the `mpack_parse` function can have an extra parameter that specifies the expected type:\n\n``` c\n/* unpacking code in the function, unpacked token must be a string */\nmpack_parse(&parser, &buf, &buflen, enter_cb, exit_cb, MPACK_TOKEN_STR);\n```\n\nIn the above example the `mpack_parse` call will check that the next token in `buf` is of type `MPACK_TOKEN_STR`, and if not, it can error out and possibly `longjmp` to validation handling code up in the stack.\n\n> It would make sense to use this for functions that might pass in unlimited large data structures, but I still think we should allow API functions with \"simple\" signatures\n\nAgreed. I can certainly see use cases for the lazy packing/unpacking technique suggested by @ZyX-I, (more specifically for doing efficient processing or transformation of large buffers), but for most cases I think the gained efficiency doesn't pay for the lost convenience of using C declarations as an automatic IDL that generates automatic validation code. Not to mention that it also abstracts the fact that calls can come from remote API clients and code running in the same process(Although the usefulness of this last point can be debated)\n",
            "created_at": "2016-06-26T21:44:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-228624861",
            "id": 228624861,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyNDg2MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228624861/reactions"
            },
            "updated_at": "2016-06-26T21:44:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228624861",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bfredl To be able to do validation “in process” it is enough to agree on “garbage in -> garbage out” semantics. Interaction with undo (BTW, does not #4915 need something like this as well? Some plugins may also need such temporary undo header.) will be a nice addition, but it is not absolutely required.\n\nAfter some thought mixed input does not look like a bad idea. Mixed output (separate Error and any return type other then void, as well as absense of `out` argument) does not make much sense, construct `out.push_integer(out.cookie, 1); return;` is the same single line as `return 1` if `return` is hidden inside a macros. What “streamed” part of output will look like will better be determined while writing the dispatcher update.\n",
            "created_at": "2016-06-26T21:46:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-228624974",
            "id": 228624974,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyNDk3NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228624974/reactions"
            },
            "updated_at": "2016-06-26T21:46:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228624974",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "#4915 happened to be simple enough as we start from a well-known state and only need to rollback the last header (well \"simple\" as in studying the code for quite some time and then adding the right 3 lines of code in the right place), though I'm not sure yet it is  correct with a concurrent set_lines from an async plugin or cmdline binding (but we should be able to assure it). \n\n> Mixed output does not make much sense\n\nDefinitely agree.\n",
            "created_at": "2016-06-26T22:01:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-228625651",
            "id": 228625651,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyNTY1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228625651/reactions"
            },
            "updated_at": "2016-06-26T22:01:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/228625651",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Lock mechanism  could achieve quasi-streaming without changing API (crude transactions, similar to [redis](https://redis.io/topics/transactions)): client can lock Nvim, then call API function(s) multiple times with big input split into fixed chunks. \r\n\r\nExample:\r\n\r\n```python\r\nnvim_lock()  # start transaction\r\nfor chunk in big_data:\r\n    nvim_paste(chunk)\r\nnvim_unlock()\r\n```\r\n\r\nAPI clients could abstract that pattern:\r\n\r\n```python\r\nnvim_stream('nvim_paste', big_data)\r\n```\r\n\r\nProblem: \r\n\r\n- Works nicely for `nvim_paste`, but cannot be easily abstracted for e.g. `nvim_buf_set_lines`, because the parameters (start/end line) must change for each chunk.\r\n- Timeout if client holds lock for too long?\r\n\r\nNotes:\r\n\r\n- This has overlap with `nvim_call_atomic` and `nvim_execute_lua`. Even [redis doc](https://redis.io/topics/transactions) mentions:\r\n  > A Redis **script** is transactional by definition, so everything you can do with a Redis transaction, you can also do with a script, and usually the script will be both simpler and faster. \r\n- But `nvim_call_atomic` and `nvim_execute_lua` do not make it possible to stream data in fixed-size chunks.",
            "created_at": "2019-07-19T13:16:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-513224480",
            "id": 513224480,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzIyNDQ4MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513224480/reactions"
            },
            "updated_at": "2019-07-19T13:16:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513224480",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think `nvim_lock()` and `nvim_unlock()` should be reasonable to implement. `nvim_lock()` implementation should send the reply directly but without returning from the handler. Then the handler should run the event loop with the channel private queue only, just like `rpcrequest()` wait for reply. Then it should break the loop and return only on `nvim_unlock()` (and `got_int`, I suppose).",
            "created_at": "2019-07-19T13:29:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-513229080",
            "id": 513229080,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzIyOTA4MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513229080/reactions"
            },
            "updated_at": "2019-07-19T13:29:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513229080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But nvim_call_atomic and nvim_execute_lua do not make it possible to stream data in fixed-size chunks.\r\n\r\nThis shouldn't be impossible in principle. What we need is something like `wait()` that the \"script\" can use, but it will process events from a specified channel only.",
            "created_at": "2019-07-19T13:32:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/4971#issuecomment-513229834",
            "id": 513229834,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/4971",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzIyOTgzNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513229834/reactions"
            },
            "updated_at": "2019-07-19T13:32:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513229834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 13,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/4971/comments",
    "created_at": "2016-06-26T20:10:27Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/4971/events",
    "html_url": "https://github.com/neovim/neovim/issues/4971",
    "id": 162344784,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "channels, RPC, msgpack",
            "id": 242522707,
            "name": "channels-rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/channels-rpc"
        },
        {
            "color": "BFDADC",
            "default": false,
            "description": "High-risk, potential for delicate/cascading effects",
            "id": 407247013,
            "name": "complexity:high",
            "node_id": "MDU6TGFiZWw0MDcyNDcwMTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/complexity:high"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/4971/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 297,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-01-20T17:56:23Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWUxNjIzNDQ3ODQ=",
    "number": 4971,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/4971/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/4971/timeline",
    "title": "API: stream interface",
    "updated_at": "2025-01-17T16:05:53Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/4971",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
        "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
        "followers_url": "https://api.github.com/users/ZyX-I/followers",
        "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ZyX-I",
        "id": 322097,
        "login": "ZyX-I",
        "node_id": "MDQ6VXNlcjMyMjA5Nw==",
        "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
        "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
        "repos_url": "https://api.github.com/users/ZyX-I/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ZyX-I",
        "user_view_type": "public"
    }
}