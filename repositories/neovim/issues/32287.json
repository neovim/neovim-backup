{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\nnvim-lspconfig has a `on_new_config` feature which is apparently not addressed by vim.lsp.config. The documentation for `on_new_config` is:\n\n> Function executed after a root directory is detected. Used to modify the server configuration (including `cmd` itself).\n\n\n### Expected behavior\n\nref https://github.com/neovim/nvim-lspconfig/pull/3597#issuecomment-2628425734\n\n> This could be another application for an autocmd that triggers just before the client starts. Or maybe could just be done in RTP.\n\nEdit: maybe `root_dir()` is already flexible enough?",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "The main requirement I gathered from that issue is that windows executables need to be mapped to another name. Arguably I think this should just be done in the config directly rather than using some hook to achieve it later on in the flow.",
            "created_at": "2025-02-01T20:34:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2629102714",
            "id": 2629102714,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6ctOx6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629102714/reactions"
            },
            "updated_at": "2025-02-01T20:34:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629102714",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yeah. For reference, see https://github.com/neovim/nvim-lspconfig/pull/3592#issuecomment-2619481770 for the apparent motivation for that Angular `on_new_config` handler (seems like something the LSP server should do...).\n\nI'd prefer that we avoid `on_new_config` (as a concept), but opened this to gather feedback on whether it is needed.",
            "created_at": "2025-02-01T21:21:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2629119486",
            "id": 2629119486,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6ctS3-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629119486/reactions"
            },
            "updated_at": "2025-02-01T21:22:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629119486",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "There are other use cases, i for one use the one provided by nvim-lspconfig to determine if a language server supports multiple workspaces to trigger didChangeConfiguration and also remember context about the new workspace folders seen, but maybe that is not applicable for the new api from core.",
            "created_at": "2025-02-02T13:34:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2629399232",
            "id": 2629399232,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6cuXLA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629399232/reactions"
            },
            "updated_at": "2025-02-02T14:18:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629399232",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "An actual example with real code would be useful. `vim.lsp.start` already has a `reuse_client` argument.",
            "created_at": "2025-02-02T13:47:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2629404065",
            "id": 2629404065,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6cuYWh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629404065/reactions"
            },
            "updated_at": "2025-02-02T13:47:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629404065",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This also sounds a lot like what we were discussing to resolve https://github.com/neovim/neovim/issues/32037\n\nAnd it also has similarity to `root_dir` supporting a string or function. Which depending on how ^ gets resolved we could revert and generalize(?)",
            "created_at": "2025-02-02T14:14:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2629413981",
            "id": 2629413981,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6cuaxd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629413981/reactions"
            },
            "updated_at": "2025-02-02T14:14:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629413981",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yes, so here is an example, edited my original comment, since it was not quite well defined, what it is useful for is to determine if a new workspace config is coming in, and the server supports multiple workspace folders to load the local config for the new workspace folder and trigger didChangeConfiguration, also remember for which workspace folders/directories the given client is registered for and so on, something like - https://github.com/tamago324/nlsp-settings.nvim/blob/6d3b9dba870d1b040c7ae3d52e3625b91c1f5c24/lua/nlspsettings.lua#L222. Then usually on subsequent DirChange events you do send didChangeConfiguration when you navigate between the workspace folders.\n\nDont know what is the feeling about handling some nuances of the multiple workspace folder support part of the spec, in core, but we have had this discussion in the past in the nvim-lspconfig repo. ",
            "created_at": "2025-02-02T14:17:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2629415054",
            "id": 2629415054,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6cubCO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629415054/reactions"
            },
            "updated_at": "2025-02-02T14:23:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629415054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
                "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
                "followers_url": "https://api.github.com/users/asmodeus812/followers",
                "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
                "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/asmodeus812",
                "id": 15955811,
                "login": "asmodeus812",
                "node_id": "MDQ6VXNlcjE1OTU1ODEx",
                "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
                "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
                "repos_url": "https://api.github.com/users/asmodeus812/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/asmodeus812",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> also has similarity to `root_dir` supporting a string or function. Which depending on how ^ gets resolved we could revert and generalize(?)\n\nYeah that sounds interesting. If we have a `on_new_config` concept, then dynamic `root_dir` should not be needed.",
            "created_at": "2025-02-02T14:36:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2629421986",
            "id": 2629421986,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6cucui",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629421986/reactions"
            },
            "updated_at": "2025-02-02T14:36:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629421986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I use it to load project specific configuration for LSPs that don't have their own configuration files.\n\nSomething like this \n```lua\nlocal function load_config(root_dir)\n    local path = Path:new(root_dir, \".nvimlsp\")\n    if path:exists() then\n        path = tostring(path)\n        local config = {}\n        local f, err = loadfile(path, \"bt\", config)\n        if f ~= nil then\n            f()\n            return config\n        else\n            print(err)\n        end\n    end\n    return nil\nend\n\nlocal function on_new_config(new_config, new_root_dir)\n    local project_options = load_config(new_root_dir)\n    if project_options then\n        local serveropts = project_options[new_config.name]\n        if serveropts ~= nil then\n            local new = vim.tbl_deep_extend(\"force\", new_config, serveropts)\n            for k, v in pairs(new) do\n                new_config[k] = v\n            end\n        end\n    end\nend\n```\n\n`exrc`, does not quite cut it for me since I usually have one nvim instance, with multiple projects open, one project per tab, with `:tcd` selecting the working directory. And I also often switch projects on the fly. ",
            "created_at": "2025-03-11T09:34:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2713345903",
            "id": 2713345903,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6hul9v",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2713345903/reactions"
            },
            "updated_at": "2025-03-11T09:36:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2713345903",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Don't mean to add any unnecessary noise, but as someone who does use `on_new_config` pretty regularly, I figured it would be useful to share the main pattern all of my uses seem to follow. All of the cases where I have used `on_new_config` seem to be dynamically building the command used to execute the language server. This is useful in a few places specifically:\n\n- Dynamically building the command line arguments passed to start the server\n  - some language servers use command line flags to pass in configuration files if they aren't super good at following the configuration options in the LSP spec\n  - cases where java is used to execute the language server there are a ton of flags for the jvm runtime that can be built dynamically to properly link libraries/configure memory requirements/etc.\n- Some languages with virtual environments you may want to detect in some way if there is a different location for the command binary and fill that in accordingly\n\nNot that this is necessarily an argument for or against `on_new_config`, there could be a better formalization that also covers cases like these",
            "created_at": "2025-03-12T14:44:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2718139220",
            "id": 2718139220,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6iA4NU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2718139220/reactions"
            },
            "updated_at": "2025-03-12T14:44:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2718139220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1591837?v=4",
                "events_url": "https://api.github.com/users/mehalter/events{/privacy}",
                "followers_url": "https://api.github.com/users/mehalter/followers",
                "following_url": "https://api.github.com/users/mehalter/following{/other_user}",
                "gists_url": "https://api.github.com/users/mehalter/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mehalter",
                "id": 1591837,
                "login": "mehalter",
                "node_id": "MDQ6VXNlcjE1OTE4Mzc=",
                "organizations_url": "https://api.github.com/users/mehalter/orgs",
                "received_events_url": "https://api.github.com/users/mehalter/received_events",
                "repos_url": "https://api.github.com/users/mehalter/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mehalter/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mehalter/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mehalter",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "As mentioned [here](https://github.com/neovim/neovim/issues/32287#issuecomment-2629404065) some concrete examples with real code would be helpful.",
            "created_at": "2025-03-12T16:19:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2718428544",
            "id": 2718428544,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6iB-2A",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2718428544/reactions"
            },
            "updated_at": "2025-03-12T16:19:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2718428544",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "One simple concrete example. The ccls language server can only be configured through `init_options`, so making changes in `on_attach` is to late. Different projects output `compile_commands.json` in different locations. So I use the code in my message above to configure it per project.",
            "created_at": "2025-03-12T19:55:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2718950505",
            "id": 2718950505,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6iD-Rp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2718950505/reactions"
            },
            "updated_at": "2025-03-12T19:55:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2718950505",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Bellow is how I used to use `on_new_config` with `nvim-lspconfig` before I switched to `vim.lsp`. I used it for changing to the closest `.venv` to a python file with `pyright`. I have a project that has submodules and each submodule needs its own set of packages and python versions. Maybe this is not an example for why we need `on_new_config` but it did take me a minute to figure out why my setup was not working and how to change it.\n\n```\non_new_config = function(client, dir)\n\n    -- Set python path to the first python executable found in the current directory or its parents\n    vim.api.nvim_create_autocmd({ \"BufEnter\" }, {\n      -- group = lsp_buffer_group,\n      buffer = vim.api.nvim_get_current_buf(),\n      callback = function()\n        local venv = vim.fs.root(dir, { '.venv', '.envrc', 'requirements.txt', 'pyproject.toml', 'ruff.toml', '.ruff.toml', '.git' })\n        local hits = vim.fs.find( { 'python' }, { limit = math.huge, path = venv } )\n        local result = vim.iter(hits)\n          :fold({ min_length = nil, min_str = nil },\n          function(acc, str)\n            if acc.min_length == nil or #str < acc.min_length then\n              acc.min_length = #str\n              acc.min_str = str\n            end\n            return acc\n          end)\n\n        if result.min_str == nil then\n          vim.notify( 'Could not find python path for ' .. dir, vim.log.levels.WARN )\n          return\n        end\n\n        client.settings.python = vim.tbl_deep_extend('force', client.settings.python, { pythonPath = result.min_str } )\n      end,\n    })\n  end,\n```\n\nI stopped using `nvim-lspconfig` in favor of `vim.lsp` and now I can do the same with `on_attach`. Full example bellow:\n\n```\n{\n  single_file_support = true,\n\n  filetypes = {\"python\"},\n  cmd = {\"pyright-langserver\", \"--stdio\"},\n\n  root_markers = {\".venv\", \"requirements.txt\", \"pyproject.toml\", \"ruff.toml\", \".ruff.toml\", \".git\"},\n\n  settings = {\n    pyright = {\n      disableOrganizeImports = true, -- Ruff\"s\n    },\n    python = {\n      analysis = {\n        ignore = {\"*\"}, -- Ruff\"s\n        autoSearchPaths = true,\n        diagnosticMode = \"openFilesOnly\",\n        useLibraryCodeForTypes = true,\n      }\n    }\n  },\n\n  on_attach = function(client, bufnr)\n    local function update_python_path()\n      local dir = vim.fn.expand(\"%:p:h\")\n      local root = vim.fs.find(\n        { \".venv\", \".envrc\", \"requirements.txt\", \"pyproject.toml\", \"ruff.toml\", \".ruff.toml\", \".git\" },\n        { path = dir, upward = true, stop = vim.fn.expand(\"~\"), limit = 1 }\n      )[1]\n\n      local hit = vim.fs.find(\n        { \"python\" },\n        { path = root, upward = false, type = \"link\", ignore = function(_, _) return false end, limit = 1 }\n      )[1]\n      or vim.fn.trim(vim.fn.system(\"which python\"))\n\n      client.config.settings.python = vim.tbl_deep_extend(\"force\", client.config.settings.python, { pythonPath = hit })\n\n      client.notify(\"workspace/didChangeConfiguration\", { settings = { python = client.config.settings.python } })\n    end\n\n    vim.api.nvim_create_autocmd(\"BufEnter\", { buffer = bufnr, callback = update_python_path })\n    update_python_path()\n  end,\n}\n\n```\n\nInterestingly, the first version that is based on `nvim-lspconfig` and `on_new_config` would append the newly found `.venv` as a workspace to the same pyright whereas the `vim.lsp` and `on_attach` spawns a new pyright for each `.venv`.",
            "created_at": "2025-03-16T08:48:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2727272011",
            "id": 2727272011,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6ijt5L",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2727272011/reactions"
            },
            "updated_at": "2025-04-18T16:05:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2727272011",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/83947853?v=4",
                "events_url": "https://api.github.com/users/DRKolev-code/events{/privacy}",
                "followers_url": "https://api.github.com/users/DRKolev-code/followers",
                "following_url": "https://api.github.com/users/DRKolev-code/following{/other_user}",
                "gists_url": "https://api.github.com/users/DRKolev-code/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DRKolev-code",
                "id": 83947853,
                "login": "DRKolev-code",
                "node_id": "MDQ6VXNlcjgzOTQ3ODUz",
                "organizations_url": "https://api.github.com/users/DRKolev-code/orgs",
                "received_events_url": "https://api.github.com/users/DRKolev-code/received_events",
                "repos_url": "https://api.github.com/users/DRKolev-code/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DRKolev-code/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DRKolev-code/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DRKolev-code",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Resolution\n\nAFAICT, all the above use-cases are already addressed:\n\n> other use cases ... to determine if a language server supports multiple workspaces to trigger didChangeConfiguration and also remember context about the new workspace folders seen\n\nIsn't that the use-case for [dynamic root_dir()](https://github.com/neovim/neovim/pull/33446#discussion_r2062720286) (which is already supported)?\n\n> Dynamically building the command line arguments passed to start the server\n\n`cmd` can be a function. However, we don't provide an example, and it's probably not as convenient as the `cmd:string[]` form. https://github.com/neovim/neovim/blob/52a4bc45488cb1f626b02be5512cd0301cd48cb8/runtime/doc/lsp.txt#L1306-L1307\n\n> languages with virtual environments you may want to detect in some way if there is a different location for the command binary\n\n`cmd` can be a function.\n\n> see [neovim/nvim-lspconfig#3592 (comment)](https://github.com/neovim/nvim-lspconfig/pull/3592#issuecomment-2619481770) for the apparent motivation for that Angular `on_new_config` handler\n\n`cmd` can be a function.\n\n> I use it to load project specific configuration for LSPs that don't have their own configuration files.\n\nDid you try `reuse_client:fun()` ? https://github.com/neovim/neovim/blob/07a207a5f16be98053a56cc0a20d182717deaf54/runtime/doc/lsp.txt#L711-L715\n\nOther ideas:\n\n- a `FileType` event handler can`vim.lsp.config('foo')` modify the config. \n- `:help 'exrc'` now mentions:\n  ```\n    To achieve project-local LSP configuration:\n    1. Enable 'exrc'.\n    2. Place LSP configs at \".nvim/lsp/*.lua\" in your project root.\n    3. Create \".nvim.lua\" in your project root directory with this line: >lua\n         vim.cmd[[set runtimepath+=.nvim]]\n  ```\n\n\n> The ccls language server can only be configured through `init_options`, so making changes in `on_attach` is to late\n\nDid you try `before_init` ?  https://github.com/neovim/neovim/blob/52a4bc45488cb1f626b02be5512cd0301cd48cb8/runtime/doc/lsp.txt#L1388-L1389",
            "created_at": "2025-04-27T23:09:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2833685314",
            "id": 2833685314,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6o5ptC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2833685314/reactions"
            },
            "updated_at": "2025-04-27T23:09:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2833685314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "A bit late, but I think I have a use case that is not covered without `on_new_config` (correct me I'm wrong, I'd be happy to be wrong here).\n\nI have a plugin that I've been working on for a while now: [devcontainers.nvim](https://github.com/jedrzejboczar/devcontainers.nvim). I've been using it for quite some time and it's working for me without any issues. The plugin allows to spawn LSP server inside a devcontainer while Neovim is running on the host (outside of container). It then wraps `config.cmd` by ([using its function form with RPC dispatchers](https://github.com/jedrzejboczar/devcontainers.nvim/blob/112f52fe966c795c6a095bc83b743dcfc5e56fcb/lua/devcontainers/lsp/rpc.lua#L275)) and performs URI path mapping between host and container in LSP messages. It uses LSP [metaModel.json](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#metaModel) (provided along LSP specification) to find all message types that container URIs and to find all places (\"paths\") in messages where URI can exist, this way it can efficiently and reliably translate the URIs. This is also described [here](https://github.com/jedrzejboczar/devcontainers.nvim?tab=readme-ov-file#-design).\n\nNow, I use `on_new_config` for multiple things, [here is the on_new_config implementation](https://github.com/jedrzejboczar/devcontainers.nvim/blob/112f52fe966c795c6a095bc83b743dcfc5e56fcb/lua/devcontainers/init.lua#L17). The most important \"feature\" of `on_new_config` is that it is running in a Lua coroutine. This way my plugin can check if the devcontainer is already running and [spawn it](https://github.com/jedrzejboczar/devcontainers.nvim/blob/112f52fe966c795c6a095bc83b743dcfc5e56fcb/lua/devcontainers/init.lua#L40) if needed. This delays start of LSP server until the container is ready.\n\nI would like to convert my plugin configuration to the new LSP config but I am not sure if it is possible to do without the `on_new_config` handler (specifically the part where we wait with LSP start until devcontainer is running).",
            "created_at": "2025-04-28T08:49:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2834486439",
            "id": 2834486439,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6o8tSn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2834486439/reactions"
            },
            "updated_at": "2025-04-28T08:49:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2834486439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/16623787?v=4",
                "events_url": "https://api.github.com/users/jedrzejboczar/events{/privacy}",
                "followers_url": "https://api.github.com/users/jedrzejboczar/followers",
                "following_url": "https://api.github.com/users/jedrzejboczar/following{/other_user}",
                "gists_url": "https://api.github.com/users/jedrzejboczar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jedrzejboczar",
                "id": 16623787,
                "login": "jedrzejboczar",
                "node_id": "MDQ6VXNlcjE2NjIzNzg3",
                "organizations_url": "https://api.github.com/users/jedrzejboczar/orgs",
                "received_events_url": "https://api.github.com/users/jedrzejboczar/received_events",
                "repos_url": "https://api.github.com/users/jedrzejboczar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jedrzejboczar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jedrzejboczar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jedrzejboczar",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The most important \"feature\" of `on_new_config` is that it is running in a Lua coroutine.\n\nShould we change any of the existing callbacks to be coroutines?\n\nWhy do we need both `before_init` and `on_new_config`? We could drop `before_init` and add `on_config`, just before https://github.com/neovim/neovim/blob/ce097c5091eab3550e1534fd111752577b5813ea/runtime/lua/vim/lsp.lua#L271\nthere literally seems to be no reason to have a separate `before_init` if we have `on_config`.",
            "created_at": "2025-04-28T12:05:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2835025148",
            "id": 2835025148,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6o-wz8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835025148/reactions"
            },
            "updated_at": "2025-04-28T12:05:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835025148",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Should we change any of the existing callbacks to be coroutines?\n\nNo. If any function needs to be async, then give it a callback argument. We've already done this for `root_dir`.",
            "created_at": "2025-04-28T12:52:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2835144514",
            "id": 2835144514,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6o_N9C",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835144514/reactions"
            },
            "updated_at": "2025-04-28T12:52:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835144514",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Instead of `on_config` and instead of adding some function argument to `vim.tbl_deep_extend`. Could we instead allow the whole configs to be passed as functions with callbacks.\n\n```diff\ndiff --git a/runtime/lua/vim/lsp.lua b/runtime/lua/vim/lsp.lua\nindex 544466a9fc..de1bac26f1 100644\n--- a/runtime/lua/vim/lsp.lua\n+++ b/runtime/lua/vim/lsp.lua\n@@ -358,7 +358,7 @@ end\n ---@since 13\n ---\n --- @param name string\n---- @param cfg vim.lsp.Config\n+--- @param cfg vim.lsp.Config|fun(config: vim.lsp.Config, callback: fun(config: vim.lsp.Config))\n --- @diagnostic disable-next-line:assign-type-mismatch\n function lsp.config(name, cfg)\n   local _, _ = name, cfg -- ignore unused\n```\n\nAnd do the same for `lsp/*`.\n\nThis would also resolve #33615 where some servers require dynamic commands.\n\nThe downside of this is that we'd never be able to save resolved configs as they are dynamic and thus `local cfg = vim.lsp.confg('foo')` will incur a much larger perf hit. Though might not be a problem in practice.",
            "created_at": "2025-04-28T12:56:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2835155023",
            "id": 2835155023,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6o_QhP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835155023/reactions"
            },
            "updated_at": "2025-04-28T13:00:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835155023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> downside of this is that we'd never be able to save resolved configs as they are dynamic\n\nYeah, also removes opportunity for serialization, auto-generated UIs, and makes troubleshooting harder. But that cost applies to all of these callback approaches.\n\n`on_config:fun()` essentially is equivalent to \"undefined behavior\". Your proposal isn't any worse than that... so +1 :)\n\nbtw, with your proposal, we could also remove `before_init`? It seems to have a very narrow use-case.",
            "created_at": "2025-04-28T13:08:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2835187868",
            "id": 2835187868,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6o_Yic",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835187868/reactions"
            },
            "updated_at": "2025-04-28T13:08:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835187868",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> btw, with your proposal, we could also remove before_init? It seems to have a very narrow use-case.\n\nYeah, we've never used `before_init` internally. For reference, it was added in #11430, so is a long hang over.",
            "created_at": "2025-04-28T13:33:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2835266279",
            "id": 2835266279,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6o_rrn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835266279/reactions"
            },
            "updated_at": "2025-04-28T13:33:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835266279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@lewis6991 sorry I'm having some trouble understanding `fun(config: vim.lsp.Config, callback: fun(config: vim.lsp.Config))` in https://github.com/neovim/neovim/issues/32287#issuecomment-2835155023. Could you explain what the parameters correspond to?",
            "created_at": "2025-05-05T04:22:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2849874040",
            "id": 2849874040,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6p3aB4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849874040/reactions"
            },
            "updated_at": "2025-05-05T04:22:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849874040",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`config` is the current value of the config as it is being accumulated. The callback must be called instead of returning the config.\n\n```lua\nreturn function(config, callback)\n  config.field = ...\n  callback(config)\nend)\n```",
            "created_at": "2025-05-05T08:41:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2850301908",
            "id": 2850301908,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6p5CfU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2850301908/reactions"
            },
            "updated_at": "2025-05-05T08:41:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2850301908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "In a semi-similar vein as @jedrzejboczar above, prior to Neovim 0.11 using `lspconfig`, I ran my language servers using `systemd-run -- <server> [args]`.\n\nhttps://github.com/tristan957/dotfiles/blob/6fe98e2228454972a5f5d9f590e8ff5bf4ffa117/neovim/.config/nvim/lua/plugins/lspconfig/init.lua#L18-L54\n\nhttps://github.com/tristan957/dotfiles/blob/6fe98e2228454972a5f5d9f590e8ff5bf4ffa117/neovim/.config/nvim/lua/plugins/lspconfig/init.lua#L94-L98\n\nhttps://github.com/tristan957/dotfiles/blob/6fe98e2228454972a5f5d9f590e8ff5bf4ffa117/neovim/.config/nvim/lua/tristan957/utils/systemd.lua#L3-L65\n\nIn Neovim 0.11, I can't seem to _easily_ do that. The benefit of the `lspconfig` approach was that I never had to be aware of the language server's command. I could just do it for all language servers, by just extending their commands. This is great for lazy people, like me. With the current way to configure language servers, I'm left with just copy/pasting the `cmd` field from all the configs. It doesn't help that the programmatic API for `lspconfig` is deprecated, which I think is for the best anyway.\n\nFor those who might be wondering why I would wrap language server commands using `systemd-run`, this has the benefit of viewing language server logs through `journalctl(1)` if Neovim ever gains the ability to allow users to configure where the logs go, and not to `vim.fn.stdpath(\"state\")/lsp.log`.\n\nI believe my use case would be covered by the proposal using the following code:\n\n```lua\nvim.lsp.config(\"*\", function(config, callback)\n  config.cmd = wrap_in_systemd_run(config.cmd)\n  callback(config)\nend)\n```\n\nI thought I would log my use case to help design considerations for when/if the proposal makes it to a release.",
            "created_at": "2025-05-28T00:40:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2914527762",
            "id": 2914527762,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6tuCoS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2914527762/reactions"
            },
            "updated_at": "2025-05-28T00:50:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2914527762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11936772?v=4",
                "events_url": "https://api.github.com/users/tristan957/events{/privacy}",
                "followers_url": "https://api.github.com/users/tristan957/followers",
                "following_url": "https://api.github.com/users/tristan957/following{/other_user}",
                "gists_url": "https://api.github.com/users/tristan957/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tristan957",
                "id": 11936772,
                "login": "tristan957",
                "node_id": "MDQ6VXNlcjExOTM2Nzcy",
                "organizations_url": "https://api.github.com/users/tristan957/orgs",
                "received_events_url": "https://api.github.com/users/tristan957/received_events",
                "repos_url": "https://api.github.com/users/tristan957/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tristan957/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tristan957/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tristan957",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "My use of `on_new_config` is primarily to change which lua version the lsp should be using for different projects. I work on a project using Lua 5.4 and use nvim which is LuaJIT. I also load `.luacheckrc` to apply its settings to the lsp. I don't see how to do that with the options given above.\n\n`fun(config: vim.lsp.Config, callback: fun(config: vim.lsp.Config))` would let you dynamically alter the config, but how do you know what code/project you're targeting? And would the config returned by that function be specific to that lsp or clobber settings for other lsp instances.\n\nThe `LspAttach` fires after the lsp starts, so isn't it too late to configure it?\n\nI have [extracted a long version](https://gist.github.com/idbrii/6e4d7addcc391992fafb38d7a80adacc) of my setup (was using something close to that on nvim-lspconfig@v0.1.8), but here's a brief version:\n\n```lua\nrequire 'lspconfig'.lua_ls.setup {\n  on_new_config = function(cfg, new_root_dir)\n    if new_root_dir:find(\"%pvim\") then\n      cfg.settings.Lua = {\n        runtime = {\n          version = 'LuaJIT',\n        },\n        workspace = {\n          checkThirdParty = false,\n          library = {\n            vim.env.VIMRUNTIME,  -- Make the server aware of Neovim runtime files\n          },\n        },\n        diagnostics = {\n          globals = {\n            'vim',\n          }\n        },\n      }\n    else\n      cfg.settings.Lua = {\n        runtime = {\n          version = 'Lua5.4',\n        },\n        workspace = {\n          checkThirdParty = false,\n          maxPreload = 100000,\n          ignoreDir = {\".git\", \".svn\", \".vs\"}\n        },\n      }\n    end\n  end,\n  settings = {\n    Lua = {}\n  },\n}\n```",
            "created_at": "2025-06-11T02:58:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2961101582",
            "id": 2961101582,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6wftMO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2961101582/reactions"
            },
            "updated_at": "2025-06-11T10:36:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2961101582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/43559?v=4",
                "events_url": "https://api.github.com/users/idbrii/events{/privacy}",
                "followers_url": "https://api.github.com/users/idbrii/followers",
                "following_url": "https://api.github.com/users/idbrii/following{/other_user}",
                "gists_url": "https://api.github.com/users/idbrii/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/idbrii",
                "id": 43559,
                "login": "idbrii",
                "node_id": "MDQ6VXNlcjQzNTU5",
                "organizations_url": "https://api.github.com/users/idbrii/orgs",
                "received_events_url": "https://api.github.com/users/idbrii/received_events",
                "repos_url": "https://api.github.com/users/idbrii/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/idbrii/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/idbrii/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/idbrii",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@idbrii While not exactly the same, I use `on_init` for this:\n\n```lua\non_init = function(client)\n\tlocal ok, workspace_folder = pcall(unpack, client.workspace_folders)\n\tif not ok then\n\t\treturn\n\tend\n\tlocal path = workspace_folder.name\n\tif\n\t\tvim.uv.fs_stat(vim.fs.joinpath(path, \".luarc.json\"))\n\t\tor vim.uv.fs_stat(vim.fs.joinpath(path, \".luarc.jsonc\"))\n\tthen\n\t\treturn\n\tend\n\n\tclient.config.settings.Lua =\n\t\t---@diagnostic disable-next-line: param-type-mismatch\n\t\tvim.tbl_deep_extend(\"force\", client.config.settings.Lua, {\n\t\t\truntime = { version = \"LuaJIT\" },\n\t\t\tworkspace = {\n\t\t\t\tcheckThirdParty = \"Disable\",\n\t\t\t\tlibrary = {\n\t\t\t\t\t\"${3rd}/luv/library\",\n\t\t\t\t\tunpack(vim.api.nvim_get_runtime_file(\"\", true)),\n\t\t\t\t},\n\t\t\t},\n\t\t})\nend,\n```",
            "created_at": "2025-06-11T03:16:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2961122957",
            "id": 2961122957,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6wfyaN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2961122957/reactions"
            },
            "updated_at": "2025-06-11T15:42:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2961122957",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1154912?v=4",
                "events_url": "https://api.github.com/users/heygarrett/events{/privacy}",
                "followers_url": "https://api.github.com/users/heygarrett/followers",
                "following_url": "https://api.github.com/users/heygarrett/following{/other_user}",
                "gists_url": "https://api.github.com/users/heygarrett/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/heygarrett",
                "id": 1154912,
                "login": "heygarrett",
                "node_id": "MDQ6VXNlcjExNTQ5MTI=",
                "organizations_url": "https://api.github.com/users/heygarrett/orgs",
                "received_events_url": "https://api.github.com/users/heygarrett/received_events",
                "repos_url": "https://api.github.com/users/heygarrett/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/heygarrett/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/heygarrett/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/heygarrett",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@heygarrett You're right. `on_init` works well. I was also digging around and found [the lua_ls docs](https://github.com/neovim/nvim-lspconfig/blob/master/lsp/lua_ls.lua#L16-L63) have something very close to your setup. Thanks for pointing that out!\n\nReplacing `on_new_config = function(cfg, new_root_dir)` with this worked well to migrate -- the rest of the function :\n```lua\n    on_init = function(client)\n        local cfg = client.settings\n        local new_root_dir = client.root_dir\n        if not new_root_dir then\n            -- File may not exist on disk. (fugitive diffs)\n            return\n        end\n```\n\nI previously had a comment \"We apply different config for different roots, so don't use on_init.\" which either means `on_init` behaved differently in lspconfig or I misunderstood how it worked. 🤷🏽 \n",
            "created_at": "2025-06-11T03:59:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2961170757",
            "id": 2961170757,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6wf-FF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2961170757/reactions"
            },
            "updated_at": "2025-06-11T03:59:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2961170757",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/43559?v=4",
                "events_url": "https://api.github.com/users/idbrii/events{/privacy}",
                "followers_url": "https://api.github.com/users/idbrii/followers",
                "following_url": "https://api.github.com/users/idbrii/following{/other_user}",
                "gists_url": "https://api.github.com/users/idbrii/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/idbrii",
                "id": 43559,
                "login": "idbrii",
                "node_id": "MDQ6VXNlcjQzNTU5",
                "organizations_url": "https://api.github.com/users/idbrii/orgs",
                "received_events_url": "https://api.github.com/users/idbrii/received_events",
                "repos_url": "https://api.github.com/users/idbrii/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/idbrii/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/idbrii/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/idbrii",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> My use of `on_new_config` is primarily to change which lua version the lsp should be using for different projects. I work on a project using Lua 5.4 and use nvim which is LuaJIT.\n\nWhy wouldn't you just put that info in `.luarc.json` for each project instead?",
            "created_at": "2025-06-11T06:19:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2961389731",
            "id": 2961389731,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6wgzij",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2961389731/reactions"
            },
            "updated_at": "2025-06-11T06:19:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2961389731",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/177685?v=4",
                "events_url": "https://api.github.com/users/lithammer/events{/privacy}",
                "followers_url": "https://api.github.com/users/lithammer/followers",
                "following_url": "https://api.github.com/users/lithammer/following{/other_user}",
                "gists_url": "https://api.github.com/users/lithammer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lithammer",
                "id": 177685,
                "login": "lithammer",
                "node_id": "MDQ6VXNlcjE3NzY4NQ==",
                "organizations_url": "https://api.github.com/users/lithammer/orgs",
                "received_events_url": "https://api.github.com/users/lithammer/received_events",
                "repos_url": "https://api.github.com/users/lithammer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lithammer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lithammer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lithammer",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I already have a .luacheckrc that specifies the lua version and a log of configuration, so I don't want to author two config files that specify the same information. (Tons of ignores, not just a version.) Ultimately, I want to write a generator to create luarc.json from luacheckrc because that makes it easier to support other editors/coworkers. But automatically reading luacheckrc works for any project using luacheck even if it's not setup for lua_ls.",
            "created_at": "2025-06-11T15:05:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2963195998",
            "id": 2963195998,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6wnshe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2963195998/reactions"
            },
            "updated_at": "2025-06-11T15:05:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2963195998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/43559?v=4",
                "events_url": "https://api.github.com/users/idbrii/events{/privacy}",
                "followers_url": "https://api.github.com/users/idbrii/followers",
                "following_url": "https://api.github.com/users/idbrii/following{/other_user}",
                "gists_url": "https://api.github.com/users/idbrii/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/idbrii",
                "id": 43559,
                "login": "idbrii",
                "node_id": "MDQ6VXNlcjQzNTU5",
                "organizations_url": "https://api.github.com/users/idbrii/orgs",
                "received_events_url": "https://api.github.com/users/idbrii/received_events",
                "repos_url": "https://api.github.com/users/idbrii/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/idbrii/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/idbrii/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/idbrii",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sorry @idbrii but your use case won't impact the decision here. You need to provide configuration files for the servers you use if they have them. We do not plan to implement a whole mechanism at the editor level to workaround users not wanting to create server specific configuration files.\n\nAny servers that don't have configuration files but define LSP settings should be lobbied to add them.",
            "created_at": "2025-06-11T15:53:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2963358344",
            "id": 2963358344,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6woUKI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2963358344/reactions"
            },
            "updated_at": "2025-06-11T15:53:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2963358344",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "With https://github.com/neovim/neovim/pull/34550, if `cmd` is defined as a function it now receives the resolved `config` as the 2nd arg.",
            "created_at": "2025-06-18T11:53:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-2983888609",
            "id": 2983888609,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM6x2obh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2983888609/reactions"
            },
            "updated_at": "2025-06-18T11:53:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2983888609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "After https://github.com/neovim/neovim/pull/34550 I was able to adapt [devcontainers.nvim](https://github.com/jedrzejboczar/devcontainers.nvim) to the new `vim.lsp.config` API.\n\nWhat I needed was to:\n1. Find root_dir dynamically\n2. Delay startup of LSP server until devcontainer is up (could take very long when `devcontainer up` builds the container)\n\nSolution to 1. is directly provided by https://github.com/neovim/neovim/pull/34550 - just take `config.root_dir` inside `cmd` function.\n\nTo solve 2. I made a stub RPC client that queues all requests/notifications until it is resolved - for me it was after `devcontainer up` finished - then it sends them all to LSP server and replaces itself with the actual RPC client. This approach seems to work well - the LSP client is not registered as attached until the \"initialize\" request is resolved, so user won't be able to use LSP until it's actually ready. The implementation can be found in [devcontainers.lsp.rpc.make_stub](https://github.com/jedrzejboczar/devcontainers.nvim/blob/e8e1446d38edfedbb226a18f265eaee92b106388/lua/devcontainers/lsp/rpc.lua#L245) if someone needs it (and [here](https://github.com/jedrzejboczar/devcontainers.nvim/blob/e8e1446d38edfedbb226a18f265eaee92b106388/lua/devcontainers/init.lua#L152) is the delayed resolve called from coroutine).\n",
            "created_at": "2025-08-01T19:49:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-3145611082",
            "id": 3145611082,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM67fjdK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3145611082/reactions"
            },
            "updated_at": "2025-08-01T19:49:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3145611082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/16623787?v=4",
                "events_url": "https://api.github.com/users/jedrzejboczar/events{/privacy}",
                "followers_url": "https://api.github.com/users/jedrzejboczar/followers",
                "following_url": "https://api.github.com/users/jedrzejboczar/following{/other_user}",
                "gists_url": "https://api.github.com/users/jedrzejboczar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jedrzejboczar",
                "id": 16623787,
                "login": "jedrzejboczar",
                "node_id": "MDQ6VXNlcjE2NjIzNzg3",
                "organizations_url": "https://api.github.com/users/jedrzejboczar/orgs",
                "received_events_url": "https://api.github.com/users/jedrzejboczar/received_events",
                "repos_url": "https://api.github.com/users/jedrzejboczar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jedrzejboczar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jedrzejboczar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jedrzejboczar",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Status\n\n- https://github.com/neovim/neovim/issues/32287#issuecomment-2833685314\n- https://github.com/neovim/neovim/issues/32287#issuecomment-2835155023\n- https://github.com/neovim/neovim/issues/32287#issuecomment-2835266279",
            "created_at": "2025-08-02T23:03:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/32287#issuecomment-3146824253",
            "id": 3146824253,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32287",
            "node_id": "IC_kwDOAPphoM67kLo9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3146824253/reactions"
            },
            "updated_at": "2025-08-02T23:03:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3146824253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 31,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32287/comments",
    "created_at": "2025-02-01T20:24:54Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32287/events",
    "html_url": "https://github.com/neovim/neovim/issues/32287",
    "id": 2825410849,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32287/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 104,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 71,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-08-03T18:12:44Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "I_kwDOAPphoM6oaFkh",
    "number": 32287,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32287/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32287/timeline",
    "title": "LSP: on_new_config for vim.lsp.config",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-08-02T23:03:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32287",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}