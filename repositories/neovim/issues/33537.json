{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nSee attached video. When I jump between tabstops, there's a weird cursor highlight and the cursor moves so slowly you can track it with your eye.\n\nI narrowed it down in a reproduction to Vim's statusline. I call out to the shell to get the git branch. The call itself is quick but somehow the two don't play well together.\n\nhttps://github.com/user-attachments/assets/28f13e72-04b5-430c-9d3c-26994818c5ed\n\n### Steps to reproduce\n\n(Search for the line marked with `XXX`. It shows where the issue is) \n<details>\n<summary>reproduction.lua</summary>\n\n```lua\nlocal _P = {}\n\nlocal _SNIPPET_AUGROUP = vim.api.nvim_create_augroup(\"CustomSnippetCompletion\", { clear = true })\n\n---@type table<string, _Snippet>\nlocal _TRIGGER_TO_SNIPPET_CACHE = {\n    [\"for\"] = [[\n        for ${1:item} in ${2:items}:\n            ${3:pass}\n    ]]\n}\n\n\n--- Check if `executable` is a command found on `$PATH`.\n---\n---@param executable string Some command. e.g. `\"git\"` or `\"/path/to/foo.exe\"`.\n---@return boolean # If found, return `true`.\n---\nfunction _P.exists_command(executable)\n    return vim.fn.executable(executable) == 1\nend\n\n---@return integer\n---    A 1-or-more column value that points to the user's \"completion trigger\n---    text\" begins on the line.\n---\nfunction _P.find_completion_start()\n    -- NOTE: We're being asked where the completion starts\n    local line = vim.fn.getline(\".\")\n    local column = vim.fn.col(\".\")\n    local start = column\n\n    while start > 1 and line:sub(start - 1, start - 1):match(\"[%w_]\") do\n        start = start - 1\n    end\n\n    return start\nend\n\n---@return integer\n---    A 1-or-more column value that points to the user's \"completion trigger\n---    text\" begins on the line.\n---@return string\n---    The user's completion trigger text.\n---\nfunction _P.get_completion_location()\n    local start_column = _P.find_completion_start()\n    local current_column = vim.fn.col(\".\")\n    local line = vim.fn.getline(\".\")\n    local base = line:sub(start_column, current_column - 1)\n\n    return start_column, base\nend\n\n\n--- Load snippets and show them, if possible.\nfunction _P.show_snippet_completion()\n\n    --- Remove the original trigger text (so we can replace it with the completed text).\n    ---\n    --- Important:\n    ---     This function assumes that\n    ---     1. We just triggered snippet completion.\n    ---     2. The cursor is located at the *end* of the trigger text.\n    ---\n    ---@param window integer The Vim window to affect.\n    ---@param start_column integer A 1-or-more Lua value.\n    ---\n    local function _delete_trigger_text(window, start_column)\n        local row, column = unpack(vim.api.nvim_win_get_cursor(window))\n        local line = vim.api.nvim_get_current_line()\n\n        line = line:sub(1, start_column) .. line:sub(column + 1)\n        vim.api.nvim_set_current_line(line)\n        vim.api.nvim_win_set_cursor(0, { row, start_column })\n    end\n\n    --- Expand the snippet found in `data`.\n    ---\n    ---@param _CompletionData\n    ---\n    local function _expand_snippet(data)\n        local snippet = _TRIGGER_TO_SNIPPET_CACHE[data.completed.word]\n\n        if not snippet then\n            return\n        end\n\n        vim.snippet.expand(snippet)\n    end\n\n    --- Delete the initial trigger text and expand the snippet\n    ---\n    ---@param start_column integer A 1-or-more Lua value where `callback` runs from.\n    ---@param callback fun(data: _CompletionData): nil Run this on-completion.\n    ---\n    local function _handle_complete_done(start_column, callback)\n        local completed = vim.v.completed_item\n\n        if not completed or completed.word == \"\" then\n            return\n        end\n\n        local window = 0  -- NOTE: The current window\n        _delete_trigger_text(window, start_column)\n\n        callback({completed=completed})\n    end\n\n    local start_column, _ = _P.get_completion_location()\n    local candidates = {\"for\"}\n\n    vim.fn.complete(start_column, candidates)\n\n    vim.api.nvim_create_autocmd(\"CompleteDone\", {\n        group = _SNIPPET_AUGROUP,\n        callback = function() _handle_complete_done(start_column - 1, _expand_snippet) end,\n        once = true,\n    })\nend\n\n--- XXX: This is the bad function. If you remove its contents, the issue goes away\n---@return string # Get the current Git branch.\nfunction get_git_branch_safe()\n    local command = {\"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\"}\n\n    if not _P.exists_command(command[1]) then\n        return \"<No git command>\"\n    end\n\n    local process = vim.system(command, {text=true}):wait()\n\n    if process.code ~= 0 then\n        return \"<Git command failed>\"\n    end\n\n    local branch = process.stdout:gsub(\"\\n\", \"\")\n\n    if branch == \"\" then\n        return \"<No git branch found>\"\n    end\n\n    return \"î‚  \" .. branch\nend\n\n\n---@return string # Get the position in the current file.\nfunction get_window_line_progress()\n    local current_line = vim.fn.line(\".\")\n    local total_lines = vim.fn.line(\"$\")\n\n    if current_line == 1 then\n        return \"Top\"\n    end\n\n    if current_line == total_lines then\n        return \"Bot\"\n    end\n\n    local percent = math.floor((current_line / total_lines) * 100)\n\n    return percent .. \"%\"\nend\n\ndo\n    vim.o.statusline = table.concat {\n        \" \",\n        \"%#StatusGit#\", \" %{v:lua.get_git_branch_safe()} \",\n        \"%#StatusGitAfter#\", \" \",\n        \"%=\",  -- Spacer\n        \"%#StatusPosition#\", \" Ln %l, Col %c \",\n        \"%#StatusProgress#\", \" [%{v:lua.get_window_line_progress()}] \",\n    }\nend\n\nvim.keymap.set({ \"i\", \"n\", \"s\" }, \"<C-j>\", function()\n   if vim.snippet.active({ direction = 1 }) then\n     return '<Cmd>lua vim.snippet.jump(1)<CR>'\n   else\n     return \"<C-j>\"\n   end\nend, { desc = 'Jump to the next snippet tabstop, if active.', expr = true, silent = true })\n\nvim.keymap.set({ \"i\", \"n\", \"s\" }, \"<C-k>\", function()\n   if vim.snippet.active({ direction = -1 }) then\n     return \"<Cmd>lua vim.snippet.jump(-1)<CR>\"\n   else\n     return \"<C-k>\"\n   end\nend, { desc = 'Jump to the previous snippet tabstop, if active.', expr = true, silent = true })\n\nvim.keymap.set(\"i\", \"<C-Space>\", _P.show_snippet_completion, { noremap = true })\n```\n</details>\n\n1. `nvim -u reproduction.lua`\n2. Type `for<C-space><C-y>`\n3. Step through the tabstops using `<C-j>` and `<C-k>`\n\n### Expected behavior\n\nFluid motion between the tabstops\n\n### Nvim version (nvim -v)\n\nNVIM v0.12.0-dev-93+g2d11b981bf\n\n### Vim (not Nvim) behaves the same?\n\nn/a\n\n### Operating system/version\n\nWindows WSL Ubuntu\n\n### Terminal name/version\n\nWezterm\n\n### $TERM environment variable\n\nscreen-256color\n\n### Installation\n\nbuild from repo",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33537/comments",
    "created_at": "2025-04-19T06:13:13Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33537/events",
    "html_url": "https://github.com/neovim/neovim/issues/33537",
    "id": 3006230655,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "redraw, layout, presentation",
            "id": 718084050,
            "name": "display",
            "node_id": "MDU6TGFiZWw3MTgwODQwNTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/display"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "tabline, winbar, statuscolumn",
            "id": 3385615828,
            "name": "statusline",
            "node_id": "LA_kwDOAPphoM7JzGXU",
            "url": "https://api.github.com/repos/neovim/neovim/labels/statusline"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 6207355257,
            "name": "snippet",
            "node_id": "LA_kwDOAPphoM8AAAABcfy5eQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/snippet"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33537/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6zL3B_",
    "number": 33537,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33537/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33537/timeline",
    "title": "Weird strobing with vim.snippet.jump + statusline",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-21T15:42:23Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33537",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10103049?v=4",
        "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}",
        "followers_url": "https://api.github.com/users/ColinKennedy/followers",
        "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}",
        "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ColinKennedy",
        "id": 10103049,
        "login": "ColinKennedy",
        "node_id": "MDQ6VXNlcjEwMTAzMDQ5",
        "organizations_url": "https://api.github.com/users/ColinKennedy/orgs",
        "received_events_url": "https://api.github.com/users/ColinKennedy/received_events",
        "repos_url": "https://api.github.com/users/ColinKennedy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ColinKennedy",
        "user_view_type": "public"
    }
}