{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\nUpdate: I might be misremembering something about the \"old\" behavior, so that can be disregarded, but I would still like an option for the described behavior. \r\n\r\nIn earlier versions of neovim `iter_captures` included all the captures caught from the \"parents\" of the captures on the line it was called on, when called on one line. (This is not very clear, I think the example is easier to follow.) But now it only includes the outermost capture and not the internal ones. (Looking back at this, I am not 100% sure that neovim used to behave exactly as I said here, but there has definitely been some change since the Fall of 2023.)\r\n\r\nFor example, in `rainbow-delimiters` most queries look something like\r\n```query\r\n(name\r\n  \"(\" @delimiter\r\n  \")\" @delimiter @sentinel) @container\r\n```\r\nor similar with `[]`, `{}`, etc. \r\n\r\nWhen capturing a change at the cursor (marked by `|`) in\r\n```lua\r\nlocal tmp = {\r\n  [1] = {1},\r\n  [2] = {\r\n    a = print(|)\r\n  },\r\n}\r\n```\r\nand updating highlighting via `iter_captures` on the cursor line (and not the whole tree), I now get capture names like this:\r\n```\r\ncontainer (from outer {})\r\ncontainer (from [2])\r\ncontainer (from inner {})\r\ncontainer (from print() )\r\ndelimiter \r\ndelimiter\r\nsentinel\r\n```\r\nwhere I used to get all `delimiter` and `sentinel` captures from the included `container` captures in the above. \r\n\r\nThe old captures with all `delimiter` and `sentinel` captures included (so the above would look like\r\n```\r\ncontainer -- from outer {}\r\ndelimiter -- {   from outer {}\r\n\r\ncontainer -- from [2]\r\ndelimiter -- [   from [2]\r\ndelimiter -- ]   from [2]\r\nsentinel  -- ]   from [2], which ends here\r\n\r\ncontainer -- from inner {}\r\ndelimiter -- {   from inner {}\r\n\r\ncontainer -- from () in print()\r\ndelimiter -- (   from ()\r\ndelimiter -- )   from ()\r\nsentinel  -- )   from (), which ends here\r\n\r\ndelimiter -- }   from inner {}\r\nsentinel  -- }   from inner {}, which ends here\r\n\r\ndelimiter -- }   from outer {}\r\nsentinel  -- }   from outer {}, which ends here\r\n```\r\n), were much easier to reason about when figuring out the nesting level.\r\n\r\n(Update: The above might not have actually been an old behavior for one line changes, but it is similar to the _current_ behavior when using `iter_captures` on the whole buffer, and it is a behavior I would like to be able to get.)\r\n\r\nWith the way captures are currently reported the only way to figure out nesting is by making assumptions that are not always true or try using a lot of ancestor checks in treesitter, but that affects the performance (or at least it did last I checked) and doesn't work as well, so it would be nice to have an option to include all the captures as above. \r\n\r\nNote: For a lot of situations, you might not want as much information as I am asking for, so I think it makes sense to keep an option in `opts` table deciding which way to use.\r\n\r\nAlso, I know that some work on `iter_captures` is already being done in #27274, so that PR might already fix this? I haven't fully looked into the details of what is causing my problem yet.\r\n\r\n### Expected behavior\r\n\r\nBe able to get all \"parent\" captures as you used to be able to do.\r\n\r\nNote: `iter_matches` already has an `opts` table, and thus `iter_captures` basically also has one too although the types don't reflect this currently. ",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "If you could please check on some of the old neovim versions to confirm if the behavior indeed has changed or not (and/or `git bisect`), that'd be greatly appreciated. The implementation of `iter_captures` hasn't been changed much since it was written early back in 2020, so I doubt it's a regression.\r\n\r\nAlso I find the examples (capture results) a bit difficult to read; e.g. they are so many `@sentinels` and one can get easily lost which node each of them is capturing --- if you could annotate the captures in the example, e.g. with either Range or \"token\" that'd also be very helpful (although it shouldn't be mandatory).\r\n\r\nBTW #27274 is trying to fix incorrect metadata for non-first captures, e.g. this would have effects only if predicates are involved. Can you show me the exact full patterns/query files (or a link to it) used in the example? Does it have predicates by any chance?\r\n\r\n",
            "created_at": "2024-02-01T21:27:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/27296#issuecomment-1922275628",
            "id": 1922275628,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27296",
            "node_id": "IC_kwDOAPphoM5yk5ks",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922275628/reactions"
            },
            "updated_at": "2024-02-01T21:28:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922275628",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> If you could please check on some of the old neovim versions to confirm if the behavior indeed has changed or not (and/or `git bisect`), that'd be greatly appreciated. The implementation of `iter_captures` hasn't been changed much since it was written early back in 2020, so I doubt it's a regression.\r\n\r\nI did try to find an older install (didn't go far enough back yet), but didn't immediately get the behavior I expected. What is the easiest way to get a neovim version from say September with the treesitter version from that time. If I just go back to an old commit, should everything be the exact same as back then, or do I need to be more careful with the dependencies?\r\n\r\nI was looking at the treesitter behavior of stuff like the above back then, and I am pretty sure that the behavior was slightly different, though it might be because of a tree-sitter change and not a neovim change? (Also, I could be misremembering of course, but I am still pretty sure there was some difference in behavior.) I did try to look through the neovim commits in the relevant files and couldn't find any change in `iter_captures` of note.\r\n\r\nAlso, even if I misremember, I would like the described option either way. It is more similar to how `iter_captures` works when called on the whole buffer.\r\n\r\n> Also I find the examples (capture results) a bit difficult to read; e.g. they are so many `@sentinels` and one can get easily lost which node each of them is capturing --- if you could annotate the captures in the example, e.g. with either Range or \"token\" that'd also be very helpful (although it shouldn't be mandatory).\r\n\r\nI have tried to annotate the last example better now. Is that more readable? Would you still like more details?\r\n\r\n> BTW #27274 is trying to fix incorrect metadata for non-first captures, e.g. this would have effects only if predicates are involved. Can you show me the exact full patterns/query files (or a link to it) used in the example? Does it have predicates by any chance?\r\n\r\nThese are the exact queries I usually use in Lua:\r\nhttps://github.com/HiPhish/rainbow-delimiters.nvim/blob/master/queries/lua/rainbow-blocks.scm\r\nThere are no predicates and I can reproduce the behavior with other queries too. ",
            "created_at": "2024-02-01T21:43:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/27296#issuecomment-1922299340",
            "id": 1922299340,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27296",
            "node_id": "IC_kwDOAPphoM5yk_XM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922299340/reactions"
            },
            "updated_at": "2024-02-01T22:01:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922299340",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
                "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
                "followers_url": "https://api.github.com/users/Danielkonge/followers",
                "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
                "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Danielkonge",
                "id": 7075380,
                "login": "Danielkonge",
                "node_id": "MDQ6VXNlcjcwNzUzODA=",
                "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
                "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
                "repos_url": "https://api.github.com/users/Danielkonge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Danielkonge",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks! They are now easier to read.\r\n\r\nOne minor nitpicking: \"parent\" captures sounds a bit misleading here, but I can get you meant. It would be more clear to say `iter_captures` (on a specific line) should return *all the matches*.\r\n\r\nActually I was able to reproduce the *bug* (?), or at least \"changes\" in the behavior.\r\n\r\nThe following snippet looks like to retrieve all the capture informations what you are looking for:\r\n```lua\r\nlocal code = [[\r\nlocal tmp = {\r\n  [1] = { 1 },\r\n  [2] = {\r\n    a = print(),\r\n  },\r\n}]]\r\n\r\nlocal parser = vim.treesitter.get_string_parser(code, 'lua', {}) ---@type LanguageTree\r\nlocal tree = parser:parse()[1] ---@type TSTree\r\nlocal root = tree:root() ---@type TSNode\r\n\r\nlocal query = [[\r\n  (arguments\r\n    \"(\" @delimiter\r\n    \")\" @delimiter @sentinel) @container\r\n\r\n  (parameters\r\n    \"(\" @delimiter\r\n    \")\" @delimiter @sentinel) @container\r\n\r\n  (parenthesized_expression\r\n    \"(\" @delimiter\r\n    \")\" @delimiter @sentinel) @container\r\n\r\n  (table_constructor\r\n    \"{\" @delimiter\r\n    \"}\" @delimiter @sentinel) @container\r\n\r\n  (bracket_index_expression\r\n    \"[\" @delimiter\r\n    \"]\" @delimiter @sentinel) @container\r\n\r\n  (field\r\n    \"[\" @delimiter\r\n    \"]\" @delimiter @sentinel) @container\r\n]]\r\nlocal ts_query = vim.treesitter.query.parse('lua', query)\r\n\r\nlocal row = 3 -- 3 is the row for the line 'print(|)'\r\nfor capture_id, node, metadata in ts_query:iter_captures(root, code, row, row + 1) do\r\n  local capture_name = ts_query.captures[capture_id]\r\n  local node_text = vim.treesitter.get_node_text(node, code, { metadata = metadata })\r\n  print(\r\n    string.format(\r\n      '@%-20s %-20s %s',\r\n      capture_name,\r\n      vim.split(node_text, '\\n')[1],\r\n      vim.inspect({ node:range() })\r\n    )\r\n  )\r\nend\r\n```\r\n\r\nThe code excerpt:\r\n```\r\n           111111\r\n 0123456789012345\r\n0local tmp = {\r\n1  [1] = { 1 },\r\n2  [2] = {\r\n3    a = print(),\r\n4  },\r\n5}\r\n```\r\n\r\nResult on NVIM 0.9.4 (as you can see, it includes all `@delimiter`'s):\r\n```\r\n@container            {                    { 0, 12, 5, 1 }\r\n@container            [2] = {              { 2, 2, 4, 3 }\r\n@delimiter            ]                    { 2, 4, 2, 5 }\r\n@sentinel             ]                    { 2, 4, 2, 5 }\r\n@container            {                    { 2, 8, 4, 3 }\r\n@container            ()                   { 3, 13, 3, 15 }\r\n@delimiter            (                    { 3, 13, 3, 14 }\r\n@delimiter            )                    { 3, 14, 3, 15 }\r\n@sentinel             )                    { 3, 14, 3, 15 }\r\n@delimiter            }                    { 4, 2, 4, 3 }\r\n@sentinel             }                    { 4, 2, 4, 3 }\r\n@delimiter            }                    { 5, 0, 5, 1 }\r\n@sentinel             }                    { 5, 0, 5, 1 }\r\n```\r\n\r\nResult on NVIM 0.10 master (05fd70f19):\r\n\r\n```\r\n@container            {                    { 0, 12, 5, 1 }\r\n@container            [2] = {              { 2, 2, 4, 3 }\r\n@container            {                    { 2, 8, 4, 3 }\r\n@container            ()                   { 3, 13, 3, 15 }\r\n@delimiter            (                    { 3, 13, 3, 14 }\r\n@delimiter            )                    { 3, 14, 3, 15 }\r\n@sentinel             )                    { 3, 14, 3, 15 }\r\n``` \r\n\r\nHaven't bisected but I guess #25188 is where the behavior is changed.",
            "created_at": "2024-02-01T22:29:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/27296#issuecomment-1922387261",
            "id": 1922387261,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27296",
            "node_id": "IC_kwDOAPphoM5ylU09",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922387261/reactions"
            },
            "updated_at": "2024-02-01T22:55:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922387261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Docs say:\r\n>  {start} and {stop} can be used to limit matches\r\n>   inside a row range (this is typically used with root node as the {node},\r\n>   i.e., to get syntax highlight matches in the current viewport). When\r\n>   omitted, the {start} and {stop} row values are used from the given node.\r\n\r\nI think when the requested query range is `[3, 4)`, i.e. on `row = 3` (lnum = 4), the iterator should yield the captures whose range *intersects* with the query range; the other delimiters e.g. `{4, 2, 4, 3}` may not be retrieved because it's not on row = 3. So I believe the **behavior is correct in NVIM 0.10** according to what's documented; in NVIM 0.9 additional entries were being returned, which was fine because it was mainly used for highlighting --- but it's not said that `iter_captures` should *only* enumerate the captures within in the query range `[{start}, {stop})`. Actually the behavior in NVIM 0.9 doesn't seem to align with what's said in the doc, so #25188 can be thought of as a *bugfix* and perf fix.\r\n\r\nSo this would be a wont-fix, but at least we can document this in `news.txt` --- or describe the behavior change in the docs of `Query:iter_matches()`? (I'm not sure about the latter, could be unnecessary).\r\n\r\nOn the rainbow-delimeter side, the plugin can query on the entire range of the current viewport rather than on a single line.\r\n\r\nOther core devs could confirm if my understanding is correct (/cc @lewis6991 @llllvvuu) or correct me if I was wrong.",
            "created_at": "2024-02-01T22:47:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/27296#issuecomment-1922422364",
            "id": 1922422364,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27296",
            "node_id": "IC_kwDOAPphoM5yldZc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922422364/reactions"
            },
            "updated_at": "2024-02-01T22:58:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922422364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Docs say:\r\n> \r\n> > {start} and {stop} can be used to limit matches\r\n> > inside a row range (this is typically used with root node as the {node},\r\n> > i.e., to get syntax highlight matches in the current viewport). When\r\n> > omitted, the {start} and {stop} row values are used from the given node.\r\n> \r\n> I think when the requested query range is `[3, 4)`, i.e. on `row = 3` (lnum = 4), the iterator should yield the captures whose range _intersects_ with the query range; the other delimiters e.g. `{4, 2, 4, 3}` may not be retrieved because it's not on row = 3. So I believe the **behavior is correct in NVIM 0.10** according to what's documented; in NVIM 0.9 additional entries were being returned, which was fine because it was mainly used for highlighting --- but it's not said that `iter_captures` should _only_ enumerate the captures within in the query range `[{start}, {stop})`. Actually the behavior in NVIM 0.9 doesn't seem to align with what's said in the doc, so #25188 can be thought of as a _bugfix_ and perf fix.\r\n\r\nI agree that the behavior of 0.10 is probably better for most use cases since it is a performance fix, but I do think it is a bit weird still that the `container` captures get included in the above if that is what the docs say.\r\n\r\n> So this would be a wont-fix, but at least we can document this in `news.txt` --- or describe the behavior change in the docs of `Query:iter_matches()`? (I'm not sure about the latter, could be unnecessary).\r\n\r\nIf I tried to add an `opts` table to `iter_captures` (it is basically there already because `iter_matches` has an `opts` table) with an option for the behavior I want, is that something you would be open to merging? (Also, with the current setup is such an option even a possibility? Or did something fundamentally change that made it hard to do that now?)\r\n\r\n> On the rainbow-delimeter side, the plugin can query on the entire range of the current viewport rather than on a single line.\r\n\r\n`rainbow-delimiters` does query on the entire range when reading the buffer the first time, but it would need a lot of extra work (and presumably lead to much worse performance) to query on the entire range on small changes, so I don't think that would be a good solution. \r\n\r\nE.g. in the very small example, I don't need `[1] = { 1 },` included in my captures to update highlighting on the line with a change. And in larger files this would be much worse with a lot of unneeded captures on every small change. Unless I am misunderstanding what you meant?\r\n",
            "created_at": "2024-02-01T23:20:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/27296#issuecomment-1922462604",
            "id": 1922462604,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27296",
            "node_id": "IC_kwDOAPphoM5ylnOM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922462604/reactions"
            },
            "updated_at": "2024-02-01T23:20:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922462604",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
                "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
                "followers_url": "https://api.github.com/users/Danielkonge/followers",
                "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
                "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Danielkonge",
                "id": 7075380,
                "login": "Danielkonge",
                "node_id": "MDQ6VXNlcjcwNzUzODA=",
                "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
                "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
                "repos_url": "https://api.github.com/users/Danielkonge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Danielkonge",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> but I do think it is a bit weird still that the container captures get included\r\n\r\nThe capture `@container` matched on the node `{ 0, 12, 5, 1 }` *intersects* with row = 3, so it's relevant; if it were used for highlighting, this node also matters for highlighting on the line being queried on. \r\n\r\n> If I tried to add an opts table to iter_captures\r\n\r\nAdding `opts` is absolutely fine. But what should such an option be called? If this can be justified and wouldn't be too niche for a specific callsite need, maybe yes. (Please see the last paragraph of this comment) However, given the current form of the API, I am not very sure why captures past the requested range should be returned.\r\n\r\n> E.g. in the very small example, I don't need [1] = { 1 }, included in my captures to update highlighting on the line with a change. And in larger files this would be much worse with a lot of unneeded captures on every small change. \r\n\r\nRequesting over the full range of the outermost container would also give *unnecessary* captures for your needs, like delimiters on the line `[1] = { 1 }`. So possible behaviors including what you'd want can be described like:\r\n\r\n- (1) Return all the captures whose matched node has a region intersecting with the request range/line (the current behavior of NVIM 0.10)\r\n- ~~(2) Return all the captures contained in a match whose associated node (i.e. the *outermost* node matched by the pattern) intersects with the requested range/line~~\r\n  - ~~But then shouldn't it also include `[1] = { 1 }` ?~~ ~~No, you're right: a match won't include other delimiters.~~ There are *multiple matches*, and the outermost node in the match would intersect.\r\n- (2) Return all the captures for a match, such that *any* of the captured nodes within the match intersects with the requested range/line <--- (I think this is precisely what is requested in this issue?).\r\n\r\nNote: (Glossary) \"match\" is a relation between a pattern and a set of nodes, i.e. `match = (pattern_id, { capture_id -> node(s) })`.\r\n\r\n\r\n<details>\r\n<summary> In this example, there are 6 matches in total, but only four of them have something to do with row = 3.</summary>\r\n\r\n```diff\r\n pattern = 6\r\n   @delimiter  : <node ]>                       { 1, 4, 1, 5 }\r\n   @sentinel   : <node ]>                       { 1, 4, 1, 5 }\r\n   @container  : <node field>                   { 1, 2, 1, 13 }\r\n pattern = 4\r\n   @delimiter  : <node }>                       { 1, 12, 1, 13 }\r\n   @sentinel   : <node }>                       { 1, 12, 1, 13 }\r\n   @container  : <node table_constructor>       { 1, 8, 1, 13 }\r\n+pattern = 6\r\n+  @delimiter  : <node ]>                       { 2, 4, 2, 5 }\r\n+  @sentinel   : <node ]>                       { 2, 4, 2, 5 }\r\n+  @container  : <node field>                   { 2, 2, 4, 3 }\r\n+pattern = 1\r\n+  @delimiter  : <node )>                       { 3, 14, 3, 15 }\r\n+  @sentinel   : <node )>                       { 3, 14, 3, 15 }\r\n+  @container  : <node arguments>               { 3, 13, 3, 15 }\r\n+pattern = 4\r\n+  @delimiter  : <node }>                       { 4, 2, 4, 3 }\r\n+  @sentinel   : <node }>                       { 4, 2, 4, 3 }\r\n+  @container  : <node table_constructor>       { 2, 8, 4, 3 }\r\n+pattern = 4\r\n+  @delimiter  : <node }>                       { 5, 0, 5, 1 }\r\n+  @sentinel   : <node }>                       { 5, 0, 5, 1 }\r\n+  @container  : <node table_constructor>       { 0, 12, 5, 1 }\r\n```\r\nwhere `iter_matches()` would return only the last four --- but it failed to return `@delimiter` (`{`, `[`, etc.) due to #17099.\r\n</details>\r\n\r\nPlease feel free to propose an API design as you'd wish!\r\n\r\nSpeaking of \"match\", this sounds like using the `iter_matches()` API would be a more natural fit for this use case, rather than adding another flag to `iter_captures()`, but yes, as you're already aware of, we are then blocked by #17099 and #24738 again...😂 (But you could use `delimiter.open` and `delimiter.close` ?)\r\n",
            "created_at": "2024-02-01T23:40:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/27296#issuecomment-1922489273",
            "id": 1922489273,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27296",
            "node_id": "IC_kwDOAPphoM5yltu5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922489273/reactions"
            },
            "updated_at": "2024-02-02T03:52:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922489273",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> confirm if my understanding is correct (/cc @lewis6991 @llllvvuu) or correct me if I was wrong.\r\n\r\nThe diagnosis seems right to me. I also agree that the new behavior aligns better with the docs but I'm sympathetic to the idea that the removal of unintended behavior is still considered a breaking change. I'd be happy to update `news.txt`.\r\n\r\nWhether to revert and/or to expose the old behavior in some form, I have no opinion here. Although my bias is of course to not fully revert outright.",
            "created_at": "2024-02-02T02:54:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/27296#issuecomment-1922700394",
            "id": 1922700394,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27296",
            "node_id": "IC_kwDOAPphoM5ymhRq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922700394/reactions"
            },
            "updated_at": "2024-02-02T02:55:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1922700394",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > but I do think it is a bit weird still that the container captures get included\r\n> \r\n> The capture `@container` matched on the node `{ 0, 12, 5, 1 }` _intersects_ with row = 3, so it's relevant; if it were used for highlighting, this node also matters for highlighting on the line being queried on.\r\n\r\nAh, I see. I didn't read that carefully enough. The current captured captures make sense then.\r\n \r\n> Adding `opts` is absolutely fine. But what should such an option be called? If this can be justified and wouldn't be too niche for a specific callsite need, maybe yes. (Please see the last paragraph of this comment) However, given the current form of the API, I am not very sure why captures past the requested range should be returned.\r\n\r\nI would have to think about it a bit more, but something like `include_match_captures` maybe? (And it would default to `false` since the current behavior is what most would want.)\r\n\r\n> Requesting over the full range of the outermost container would also give _unnecessary_ captures for your needs, like delimiters on the line `[1] = { 1 }`. So possible behaviors including what you'd want can be described like:\r\n> \r\n> * (1) Return all the captures whose matched node has a region intersecting with the request range/line (the current behavior of NVIM 0.10)\r\n> * ~(2) Return all the captures contained in a match whose associated node (i.e. the _outermost_ node matched by the pattern) intersects with the requested range/line~\r\n>   \r\n>   * ~But then shouldn't it also include `[1] = { 1 }` ?~ ~No, you're right: a match won't include other delimiters.~ There are _multiple matches_, and the outermost node in the match would intersect.\r\n> * (2) Return all the captures for a match, such that _any_ of the captured nodes within the match intersects with the requested range/line <--- (I think this is precisely what is requested in this issue?).\r\n\r\nI think (2) is what I want yes. \r\n\r\n> Note: (Glossary) \"match\" is a relation between a pattern and a set of nodes, i.e. `match = (pattern_id, { capture_id -> node(s) })`.\r\n> \r\n>  In this example, there are 6 matches in total, but only four of them have something to do with row = 3.\r\n> Please feel free to propose an API design as you'd wish!\r\n> \r\n> Speaking of \"match\", this sounds like using the `iter_matches()` API would be a more natural fit for this use case, rather than adding another flag to `iter_captures()`, but yes, as you're already aware of, we are then blocked by #17099 and #24738 again...😂 (But you could use `delimiter.open` and `delimiter.close` ?)\r\n\r\nI do think `iter_matches` could make sense if it had the expected behavior (i.e., something like #17099 or #24738), but it doesn't return captures in the order they show up in the parsed text, so instead of having `sentinel` captures, you need something like checking for ancestors with treesitter, and I am not sure it would work as well. (E.g., I think the `[2]` would be included as an ancestor of the `print()` line above.) Other than that I remember `iter_matches` performing slightly worse (because of all the checks for whether a node is an ancestor of another node), but it was only twice the runtime on a very large file, so not unworkable. ",
            "created_at": "2024-02-02T08:39:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/27296#issuecomment-1923332449",
            "id": 1923332449,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27296",
            "node_id": "IC_kwDOAPphoM5yo7lh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1923332449/reactions"
            },
            "updated_at": "2024-02-02T08:39:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1923332449",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
                "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
                "followers_url": "https://api.github.com/users/Danielkonge/followers",
                "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
                "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Danielkonge",
                "id": 7075380,
                "login": "Danielkonge",
                "node_id": "MDQ6VXNlcjcwNzUzODA=",
                "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
                "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
                "repos_url": "https://api.github.com/users/Danielkonge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Danielkonge",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Those issues are intended to be fixed, though, so it doesn't make sense to add a different API to paper over that.",
            "created_at": "2024-02-02T08:42:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/27296#issuecomment-1923336957",
            "id": 1923336957,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27296",
            "node_id": "IC_kwDOAPphoM5yo8r9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1923336957/reactions"
            },
            "updated_at": "2024-02-02T08:42:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1923336957",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Those issues are intended to be fixed, though, so it doesn't make sense to add a different API to paper over that.\r\n\r\nI assume you mean the `iter_matches` issues? If so, I am not sure that would fully give me what I would want, since `iter_matches` don't return captures in order (here I mean the order of the captured nodes in the text). Though looking at it again, other than a check for whether a given node is an ancestor, one could also do some calculation on the ranges (either way it will be more complicated than the current solution though). ",
            "created_at": "2024-02-02T13:49:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/27296#issuecomment-1923844286",
            "id": 1923844286,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27296",
            "node_id": "IC_kwDOAPphoM5yq4i-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1923844286/reactions"
            },
            "updated_at": "2024-02-02T13:49:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1923844286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
                "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
                "followers_url": "https://api.github.com/users/Danielkonge/followers",
                "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
                "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Danielkonge",
                "id": 7075380,
                "login": "Danielkonge",
                "node_id": "MDQ6VXNlcjcwNzUzODA=",
                "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
                "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
                "repos_url": "https://api.github.com/users/Danielkonge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Danielkonge",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27296/comments",
    "created_at": "2024-02-01T20:42:18Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/27296/events",
    "html_url": "https://github.com/neovim/neovim/issues/27296",
    "id": 2113444256,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "issue contains minimal reproducing steps",
            "id": 435851959,
            "name": "has:repro",
            "node_id": "MDU6TGFiZWw0MzU4NTE5NTk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:repro"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/27296/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM59-Jmg",
    "number": 27296,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/27296/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/27296/timeline",
    "title": "Treesitter:  Make `iter_captures` include all \"parent\" captures when called on one line",
    "updated_at": "2025-01-17T15:27:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/27296",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
        "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
        "followers_url": "https://api.github.com/users/Danielkonge/followers",
        "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
        "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Danielkonge",
        "id": 7075380,
        "login": "Danielkonge",
        "node_id": "MDQ6VXNlcjcwNzUzODA=",
        "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
        "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
        "repos_url": "https://api.github.com/users/Danielkonge/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Danielkonge",
        "user_view_type": "public"
    }
}