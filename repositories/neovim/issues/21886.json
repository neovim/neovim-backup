{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Describe the bug\n\nThe `screenstring()` executed inside child Neovim process through RPC returns incorrect results for Command line area (omits its content while working correctly for `showcmd` area).\r\n\r\nJudging by my GitHub Actions, it worked on commit 6134c1e8a but stopped working on f6929ea51.\r\n\r\nFrom my work on #19020 I remember that this Command line area is treated somewhat differently from the rest of the window. This is based on [these lines](https://github.com/neovim/neovim/blob/8a4285d5637c146a0ae606918a8e77063c6a5f0d/src/nvim/eval.c#L5354-L5357) but I am not sure how it could have gotten affected in the previous couple of days.\r\n\r\n@bfredl, sorry to mention you here to get your attention, but it seems you might have an idea of what is going on here. This breaks screenshot tests so it would be bad for this issue to get lost among others.\n\n### Steps to reproduce\n\n- Create 'init-child-screenstring.lua' with the following content:\r\n\r\n    <details>\r\n    <summary>init-child-screenstring.lua</summary>\r\n\r\n    ```lua\r\n    _G.new_child = function(nvim_executable)\r\n      -- Create new child process\r\n      local stdin = vim.loop.new_pipe()\r\n      local stdout = vim.loop.new_pipe()\r\n      local stderr = vim.loop.new_pipe()\r\n\r\n      local address = vim.fn.tempname()\r\n\r\n      vim.loop.spawn(nvim_executable or 'nvim', {\r\n        stdio = { stdin, stdout, stderr },\r\n        args = { '--clean', '--listen', address },\r\n      }, function() end)\r\n\r\n      -- Wait for Neovim to open\r\n      vim.loop.sleep(200)\r\n\r\n      -- Connect\r\n      local channel = vim.fn.sockconnect('pipe', address, { rpc = true })\r\n\r\n      -- Follow advice from https://github.com/neovim/neovim/issues/21630\r\n      stdin:close()\r\n      stdout:close()\r\n      stderr:close()\r\n\r\n      -- Create helper methods for easier demonstration\r\n      local child = { channel = channel }\r\n\r\n      -- Type keys (for initializing Visual mode)\r\n      child.type_keys = function(keys) vim.rpcrequest(channel, 'nvim_input', keys) end\r\n\r\n      -- Echo message in Command line area\r\n      child.echo = function(msg) vim.rpcrequest(channel, 'nvim_echo', { { msg } }, false, {}) end\r\n\r\n      -- Call `screenstring()` inside child process\r\n      child.screenstring = function(row, col)\r\n        return vim.rpcrequest(channel, 'nvim_exec_lua', 'return vim.fn.screenstring(...)', { row, col })\r\n      end\r\n\r\n      -- Main demo: print child process's last line (Command line with defaults)\r\n      child.print_last_line = function()\r\n        local n_lines = vim.rpcrequest(channel, 'nvim_get_option', 'lines')\r\n        local n_cols = vim.rpcrequest(channel, 'nvim_get_option', 'columns')\r\n        local last_line = {}\r\n        for i = 1, n_cols do\r\n          table.insert(last_line, child.screenstring(n_lines, i))\r\n        end\r\n\r\n        print(vim.inspect(table.concat(last_line)))\r\n      end\r\n\r\n      return child\r\n    end\r\n    ```\r\n\r\n    </details>\r\n\r\n    It is basically a creation-connection to full child process (following advice from #21630) and then a couple helper wrappers to get information from child process through RPC requests.\r\n\r\n- Assuming `nvim_nightly_g737` is the executable for latest nightly, run `nvim_nightly_g737 -u init-child-screenstring.lua`.\r\n- `:lua child = new_child('nvim_nightly_g737')`. This should create and connect to child process running latest nightly.\r\n- Execute one of the following:\r\n    - `:lua child.type_keys('V')` - this should initialize Visual linewise mode. When executed in non-child process it is followed by showing `-- VISUAL LINE --` in Command line.\r\n    - `:lua child.echo('Hello world!')` - this should show the message in Command line.\r\n- Execute `:lua child.print_last_line()`. For both of versions of previous step it prints content of Command line but **without messages at the start**.\n\n### Expected behavior\n\nPrints actual content of Command line:\r\n\r\n- The one starting with `-- VISUAL LINE --` if `child.type_keys('V')` was executed.\r\n- The one starting with `Hello world!` if `child.echo('Hello world!')` was executed.\r\n\r\nTo check the expected content, initiate child process with `:lua child = new_child('nvim')` (assuming `nvim` is an executable for commit earlier than 6134c1e8a (like 0.8.2).\n\n### Neovim version (nvim -v)\n\nNVIM v0.9.0-dev-737+g0aae7f386\n\n### Vim (not Nvim) behaves the same?\n\nNo (doesn't have this functionality)\n\n### Operating system/version\n\nEndeavourOS Linux x86_64 (6.1.6-arch1-1)\n\n### Terminal name/version\n\nst-0.9\n\n### $TERM environment variable\n\nst-256color\n\n### Installation\n\nappimage",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This happens because there is no UI (#21831), and messages are printed on stdout/stderr.\r\n`vim.rpcrequest(child.channel, 'nvim_ui_attach', 80, 24, {})` may be a solution, but it currently causes a crash. I've created a PR #21892 to fix the crash.",
            "created_at": "2023-01-19T01:51:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/21886#issuecomment-1396338875",
            "id": 1396338875,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21886",
            "node_id": "IC_kwDOAPphoM5TOnC7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1396338875/reactions"
            },
            "updated_at": "2023-01-19T05:17:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1396338875",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for clarification!\r\n\r\nJudging by the [changed definition of `use_builtin_ui`](https://github.com/neovim/neovim/blob/6e3890f4ce002ba308c09166b00e8ee86b6efa03/src/nvim/main.c#L289-L295), I hoped that removing `stdout:close()` and `stderr:close()` would make it work, but it doesn't :(",
            "created_at": "2023-01-19T08:26:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/21886#issuecomment-1396605138",
            "id": 1396605138,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21886",
            "node_id": "IC_kwDOAPphoM5TPoDS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1396605138/reactions"
            },
            "updated_at": "2023-01-19T08:26:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1396605138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You can also spawn another process to attach a UI:\r\n\r\n```diff\r\n--- a/init-child-screenstring.lua\r\n+++ b/init-child-screenstring.lua\r\n@@ -14,6 +14,10 @@ _G.new_child = function(nvim_executable)\r\n   -- Wait for Neovim to open\r\n   vim.loop.sleep(200)\r\n \r\n+  vim.loop.spawn(nvim_executable or 'nvim', {\r\n+    args = { '--remote-ui', '--server', address },\r\n+  }, function() end)\r\n+\r\n   -- Connect\r\n   local channel = vim.fn.sockconnect('pipe', address, { rpc = true })\r\n \r\n```",
            "created_at": "2023-01-21T05:27:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/21886#issuecomment-1399183528",
            "id": 1399183528,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21886",
            "node_id": "IC_kwDOAPphoM5TZdio",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1399183528/reactions"
            },
            "updated_at": "2023-01-21T05:37:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1399183528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> You can also spawn another process to attach a UI:\r\n\r\nThanks!\r\n\r\nThis indeed solves my use case **but** only locally. I can't get this working in GitHub Actions... I added check to see if UI is actually attached, and it seems not the case.\r\n\r\nHere is essentially what I added:\r\n\r\n```diff\r\n--- a/init-child-screenstring.lua\r\n+++ b/init-child-screenstring.lua\r\n@@ -22,6 +22,29 @@ _G.new_child = function(nvim_executable)\r\n   stdout:close()\r\n   stderr:close()\r\n\r\n+  -- Attach remote UI in case of Neovim>=0.9\r\n+  local has_09 = vim.rpcrequest(channel, 'nvim_exec_lua', [[return vim.fn.has('nvim-0.9') == 1]], {})\r\n+  if has_09 then\r\n+    vim.loop.spawn(nvim_executable or 'nvim', {\r\n+      args = { '--remote-ui', '--server', address },\r\n+    }, function() end)\r\n+\r\n+    -- Ensure that there is an attached UI\r\n+    local step = 10\r\n+    local is_success, uis = false, nil\r\n+    local i, max_tries = 0, 500\r\n+    repeat\r\n+      i = i + 1\r\n+      vim.loop.sleep(step)\r\n+      is_success, uis = pcall(vim.rpcrequest, channel, 'nvim_list_uis')\r\n+      if type(uis) == 'table' then is_success = #uis > 0 end\r\n+    until is_success or i >= max_tries\r\n+\r\n+    if not is_success then\r\n+      error('Can not connect remote UI')\r\n+    end\r\n+  end\r\n+\r\n   -- Create helper methods for easier demonstration\r\n   local child = { channel = channel }\r\n``` \r\n\r\nIt works locally, but not on CI (throws error \"Can not connect remote UI\").\r\n\r\nDo you have any idea why this might be the case?",
            "created_at": "2023-01-21T10:37:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/21886#issuecomment-1399225466",
            "id": 1399225466,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21886",
            "node_id": "IC_kwDOAPphoM5TZnx6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1399225466/reactions"
            },
            "updated_at": "2023-01-21T10:37:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1399225466",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Also, Is it reasonable to ask this to be added to 0.9 milestone? So as to have a more stable solution than this workaround. Having `echo`ed and other messages not appear in this situation while everything else does seems a bit strange.",
            "created_at": "2023-01-21T10:38:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/21886#issuecomment-1399225577",
            "id": 1399225577,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21886",
            "node_id": "IC_kwDOAPphoM5TZnzp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1399225577/reactions"
            },
            "updated_at": "2023-01-21T10:38:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1399225577",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Will using `termopen()` instead be a solution for you?\r\n```diff\r\n--- a/init-child-screenstring.lua\r\n+++ b/init-child-screenstring.lua\r\n@@ -1,15 +1,8 @@\r\n _G.new_child = function(nvim_executable)\r\n-  -- Create new child process\r\n-  local stdin = vim.loop.new_pipe()\r\n-  local stdout = vim.loop.new_pipe()\r\n-  local stderr = vim.loop.new_pipe()\r\n-\r\n   local address = vim.fn.tempname()\r\n \r\n-  vim.loop.spawn(nvim_executable or 'nvim', {\r\n-    stdio = { stdin, stdout, stderr },\r\n-    args = { '--clean', '--listen', address },\r\n-  }, function() end)\r\n+  -- Create new child process\r\n+  vim.fn.termopen({ nvim_executable or 'nvim', '--clean', '--listen', address })\r\n \r\n   -- Wait for Neovim to open\r\n   vim.loop.sleep(200)\r\n@@ -17,11 +10,6 @@ _G.new_child = function(nvim_executable)\r\n   -- Connect\r\n   local channel = vim.fn.sockconnect('pipe', address, { rpc = true })\r\n \r\n-  -- Follow advice from https://github.com/neovim/neovim/issues/21630\r\n-  stdin:close()\r\n-  stdout:close()\r\n-  stderr:close()\r\n-\r\n   -- Create helper methods for easier demonstration\r\n   local child = { channel = channel }\r\n \r\n```",
            "created_at": "2023-01-29T05:19:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/21886#issuecomment-1407565197",
            "id": 1407565197,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21886",
            "node_id": "IC_kwDOAPphoM5T5b2N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1407565197/reactions"
            },
            "updated_at": "2023-01-29T12:01:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1407565197",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Will using `termopen()` instead be a solution for you?\r\n\r\nThis is an interesting approach, didn't think about it. Thank you @zeertzjq for taking your time!\r\n\r\nI've just tested it in my main use case of 'mini.test' testing framework. Here are an [original (current) code](https://github.com/echasnovski/mini.nvim/blob/main/lua/mini/test.lua#L1058) and [commit with changes](https://github.com/echasnovski/mini.nvim/commit/cec4c616d5beccd19363b9eca15aed5b5ce778ee). Important note is that the child process opens and closes on **every test case**, which number is currently at 1825. So a lot. \r\n\r\nThe results are... mixed:\r\n- It *kind of works* locally with the following caveats:\r\n    - Main problem is that after some amount of executed test (can't say exact number, around 300-350 cases) it stops with errors like `ERR 2023-01-29T13:00:27.593 nvim.42386.0 open_log_file:210: failed to open $NVIM_LOG_FILE (Too many open files)` and `ERR 2023-01-29T13:00:27.593 nvim.42386.0 set_duplicating_descriptor:376: Failed to dup descriptor 1021: Too many open files`. So I am not able to execute all tests at once. This happens both when child processes are opened from both \"normal\" and headless Neovim instances.\r\n    - When executed inside \"normal\" Neovim instance, it leads to `TermOpen` events being triggered (with all their autocommands). Not a huge deal, but not good.\r\n    - I somehow disables all highlighting in opened buffers. Calling `:edit` inside every one fixes it, but not good.\r\n- Inside GitHub Actions CI it mostly seems to work. It runs inside headless Neovim instance, of course.\r\n\r\nSo, all in all, as a **very hacky workaround** this might be made working. However, it doesn't seem to be a good idea to ignore original issue of `screenstring()` returning incorrect results. Especially with #22018 coming to light.",
            "created_at": "2023-01-29T13:10:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/21886#issuecomment-1407659711",
            "id": 1407659711,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21886",
            "node_id": "IC_kwDOAPphoM5T5y6_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1407659711/reactions"
            },
            "updated_at": "2023-01-29T13:10:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1407659711",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Then you can try `jobstart()` with `pty = true`, which is similar to `termopen()`, and defaults to 80x24, but doesn't trigger `TermOpen` events.\r\n```diff\r\n--- a/init-child-screenstring.lua\r\n+++ b/init-child-screenstring.lua\r\n@@ -1,15 +1,8 @@\r\n _G.new_child = function(nvim_executable)\r\n-  -- Create new child process\r\n-  local stdin = vim.loop.new_pipe()\r\n-  local stdout = vim.loop.new_pipe()\r\n-  local stderr = vim.loop.new_pipe()\r\n-\r\n   local address = vim.fn.tempname()\r\n \r\n-  vim.loop.spawn(nvim_executable or 'nvim', {\r\n-    stdio = { stdin, stdout, stderr },\r\n-    args = { '--clean', '--listen', address },\r\n-  }, function() end)\r\n+  -- Create new child process\r\n+  vim.fn.jobstart({ nvim_executable or 'nvim', '--clean', '--listen', address }, { pty = true })\r\n \r\n   -- Wait for Neovim to open\r\n   vim.loop.sleep(200)\r\n@@ -17,11 +10,6 @@ _G.new_child = function(nvim_executable)\r\n   -- Connect\r\n   local channel = vim.fn.sockconnect('pipe', address, { rpc = true })\r\n \r\n-  -- Follow advice from https://github.com/neovim/neovim/issues/21630\r\n-  stdin:close()\r\n-  stdout:close()\r\n-  stderr:close()\r\n-\r\n   -- Create helper methods for easier demonstration\r\n   local child = { channel = channel }\r\n \r\n```",
            "created_at": "2023-01-29T14:17:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/21886#issuecomment-1407676023",
            "id": 1407676023,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21886",
            "node_id": "IC_kwDOAPphoM5T5253",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1407676023/reactions"
            },
            "updated_at": "2023-01-29T14:29:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1407676023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Then you can try `jobstart()` with `pty = true`, which is similar to `termopen()`, and defaults to 80x24, but doesn't trigger `TermOpen` events.\r\n\r\nYes, this is better. Issues with `TermOpen` and highlighting seems to be gone now. Thanks!\r\n\r\nI still can't test locally many cases in a row. It throws these kind of errors after around 300 (maybe 256-ish?) times of open-close child process (on both Neovim 0.8.2 and NVIM v0.9.0-dev-825+g843c9025a):\r\n\r\n`ERR 2023-01-29T17:11:27.952 nvim.89004.0 open_log_file:210: failed to open $NVIM_LOG_FILE (Too many open files):`\r\n`ERR 2023-01-29T17:11:27.952 nvim.89004.0 set_duplicating_descriptor:376: Failed to dup descriptor 1021: Too many open files`\r\n`Vim:E903: Process failed to start: too many open files: \"/tmp/.mount_nvimrUXvs0/usr/bin/nvim\"`\r\n\r\nFor reference, here is [the commit](https://github.com/echasnovski/mini.nvim/commit/142a5d66705535ea285b0a307e235591c2f9efca).\r\n\r\nI remember going down a rabbit whole when writing 'mini.test' framework that `vim.loop.spawn()` was the only solution that I could come up to work without issues. ",
            "created_at": "2023-01-29T17:30:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/21886#issuecomment-1407723329",
            "id": 1407723329,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21886",
            "node_id": "IC_kwDOAPphoM5T6CdB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1407723329/reactions"
            },
            "updated_at": "2023-01-29T17:30:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1407723329",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Then you can try `jobstart()` with `pty = true`, which is similar to `termopen()`, and defaults to 80x24, but doesn't trigger `TermOpen` events.\r\n> \r\n> ```diff\r\n> --- a/init-child-screenstring.lua\r\n> +++ b/init-child-screenstring.lua\r\n> @@ -1,15 +1,8 @@\r\n>  _G.new_child = function(nvim_executable)\r\n> -  -- Create new child process\r\n> -  local stdin = vim.loop.new_pipe()\r\n> -  local stdout = vim.loop.new_pipe()\r\n> -  local stderr = vim.loop.new_pipe()\r\n> -\r\n>    local address = vim.fn.tempname()\r\n>  \r\n> -  vim.loop.spawn(nvim_executable or 'nvim', {\r\n> -    stdio = { stdin, stdout, stderr },\r\n> -    args = { '--clean', '--listen', address },\r\n> -  }, function() end)\r\n> +  -- Create new child process\r\n> +  vim.fn.jobstart({ nvim_executable or 'nvim', '--clean', '--listen', address }, { pty = true })\r\n>  \r\n>    -- Wait for Neovim to open\r\n>    vim.loop.sleep(200)\r\n> @@ -17,11 +10,6 @@ _G.new_child = function(nvim_executable)\r\n>    -- Connect\r\n>    local channel = vim.fn.sockconnect('pipe', address, { rpc = true })\r\n>  \r\n> -  -- Follow advice from https://github.com/neovim/neovim/issues/21630\r\n> -  stdin:close()\r\n> -  stdout:close()\r\n> -  stderr:close()\r\n> -\r\n>    -- Create helper methods for easier demonstration\r\n>    local child = { channel = channel }\r\n>  \r\n> ```\r\n\r\nI've been testing this solution for some time now and it does seem to work and fix this issue.\r\n\r\nI don't have problem with this being close, but it still seems to not be a good behavior to have in an otherwise valid child process.",
            "created_at": "2023-02-04T13:08:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/21886#issuecomment-1416747363",
            "id": 1416747363,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21886",
            "node_id": "IC_kwDOAPphoM5Ucdlj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1416747363/reactions"
            },
            "updated_at": "2023-02-04T13:08:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1416747363",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/21886/comments",
    "created_at": "2023-01-18T17:15:19Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/21886/events",
    "html_url": "https://github.com/neovim/neovim/issues/21886",
    "id": 1538376097,
    "labels": [
        {
            "color": "f9d0c4",
            "default": false,
            "description": "wrong behavior that was introduced in a previous commit (please bisect)",
            "id": 619474658,
            "name": "bug-regression",
            "node_id": "MDU6TGFiZWw2MTk0NzQ2NTg=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-regression"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim startup sequence (`:h startup`)",
            "id": 870629450,
            "name": "startup",
            "node_id": "MDU6TGFiZWw4NzA2Mjk0NTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/startup"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "UI messages, log messages, errors, warnings, feedback",
            "id": 5637083595,
            "name": "messages",
            "node_id": "LA_kwDOAPphoM8AAAABT_8Ryw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/messages"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/21886/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 0,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 6,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-01-19T23:55:57Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "I_kwDOAPphoM5bscGh",
    "number": 21886,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/21886/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/21886/timeline",
    "title": "`screenstring()` doesn't work for Command line in child Neovim process",
    "updated_at": "2025-01-19T11:51:15Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/21886",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}