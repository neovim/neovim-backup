{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\n`vim.diagnostic.fromqflist` ignores lines that are `item.valid == 0` (see `getqflist`)\n\nA lot of qflists have messages that span multiple lines, which would look roughly like this:\n\n```\ncollection/src/Modelling/CdOd/Central.hs|496 col 80| error: [GHC-83865]\n||     • Couldn't match expected type: InstanceWithForm\n||                                       (FilePath\n||                                        -> SelectValidCdInstWithForm\n...\n```\n\ncalling `vim.diagnostic.fromqflist(vim.fn.getqflist)` would get you a diagnostic message like this:\n\n```\nerror: [GHC-83865]\n```\n\nonly the first line is kept, but often times, the remaing lines are useful as well\n\n### Expected behavior\n\n\"squash\" lines from invalid qflist items into the error message of the previous valid item, so that we get this diagnostic message instead:\n\n```\nerror: [GHC-83865]\n     • Couldn't match expected type: InstanceWithForm\n                                       (FilePath\n                                        -> SelectValidCdInstWithForm\n...\n```\n\nwe can add an optional flag for `vim.diagnostic.fromqflist()` to toggle this behavior.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "for reference, the function to do is something like this:\n\n```lua\nlocal function squash_qflist(list)\n  local squashed = {}\n  local strbuf = require('string.buffer')\n  local acc = list[1]\n  local desc = strbuf.new()\n  desc:put(acc.text)\n  for item in vim.iter(list):skip(1) do\n    if item.valid == 1 then\n      acc.text = desc:get()\n      table.insert(squashed, acc)\n\n      acc = item\n      desc:put(item.text)\n    else\n      desc:put(\"\\n\", item.text)\n    end\n  end\n  acc.text = desc:get()\n  table.insert(squashed, acc)\n  return squashed\nend\n\n-- call it like this: \nvim.diagnostic.fromqflist(squash_qflist(vim.fn.getqflist()))\n```",
            "created_at": "2025-09-05T11:55:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/35640#issuecomment-3258088019",
            "id": 3258088019,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35640",
            "node_id": "IC_kwDOAPphoM7CMnpT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3258088019/reactions"
            },
            "updated_at": "2025-09-05T11:55:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3258088019",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59727193?v=4",
                "events_url": "https://api.github.com/users/horriblename/events{/privacy}",
                "followers_url": "https://api.github.com/users/horriblename/followers",
                "following_url": "https://api.github.com/users/horriblename/following{/other_user}",
                "gists_url": "https://api.github.com/users/horriblename/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/horriblename",
                "id": 59727193,
                "login": "horriblename",
                "node_id": "MDQ6VXNlcjU5NzI3MTkz",
                "organizations_url": "https://api.github.com/users/horriblename/orgs",
                "received_events_url": "https://api.github.com/users/horriblename/received_events",
                "repos_url": "https://api.github.com/users/horriblename/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/horriblename/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/horriblename/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/horriblename",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> \"squash\" lines from invalid qflist items into the error message of the previous valid item\n\nCan you show what that would look like?\n\nIt vaguely sounds like a nice enhancement, but ideally Vim would do this and we merge their patch, since we have avoided forking quickfix thus far.  @yegappan did a lot of good work on quickfix, WDYT about this?",
            "created_at": "2025-09-06T20:56:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/35640#issuecomment-3263198551",
            "id": 3263198551,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35640",
            "node_id": "IC_kwDOAPphoM7CgHVX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3263198551/reactions"
            },
            "updated_at": "2025-09-06T20:57:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3263198551",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Can you show what that would look like?\n\nI've edited my issue to include the expected diagnostic message\n\n> we have avoided forking quickfix thus far\n\nMy suggestion was towards `vim.diagnostic.fromqflist` specifically, maybe add an optional flag to fromqflist to control this behavior, e.g. `vim.diagnostic.fromqflist(qflist, {merge_multiple_lines = true})`\n\nI don't really know what can be done on the quickfix side",
            "created_at": "2025-09-07T06:36:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/35640#issuecomment-3263531008",
            "id": 3263531008,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35640",
            "node_id": "IC_kwDOAPphoM7ChYgA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3263531008/reactions"
            },
            "updated_at": "2025-09-07T06:36:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3263531008",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59727193?v=4",
                "events_url": "https://api.github.com/users/horriblename/events{/privacy}",
                "followers_url": "https://api.github.com/users/horriblename/followers",
                "following_url": "https://api.github.com/users/horriblename/following{/other_user}",
                "gists_url": "https://api.github.com/users/horriblename/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/horriblename",
                "id": 59727193,
                "login": "horriblename",
                "node_id": "MDQ6VXNlcjU5NzI3MTkz",
                "organizations_url": "https://api.github.com/users/horriblename/orgs",
                "received_events_url": "https://api.github.com/users/horriblename/received_events",
                "repos_url": "https://api.github.com/users/horriblename/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/horriblename/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/horriblename/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/horriblename",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "have you checked the `quickfixtextfunc` option. ",
            "created_at": "2025-09-08T09:45:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/35640#issuecomment-3265469675",
            "id": 3265469675,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35640",
            "node_id": "IC_kwDOAPphoM7Coxzr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3265469675/reactions"
            },
            "updated_at": "2025-09-09T00:49:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3265469675",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> have you checked the `quickfixtextfunc` option.\n\nSo I tried using quickfixtextfunc to display multiline text but as far as I can tell it isn't possible. \n\nI would prefer quickfixtextfunc if it was possible since you would be able to use Cfilter to filter by text on multi-line entries. You wouldn't be able to use Cfilter if the multiple lines were created by adding an invalid entry for each consecutive line.\n\nIf someone does know how to use quickfixtextfunc to display multiple lines, please let me know. Newline characters always display as a `^@` for me and I couldn't figure out any sort of escaping logic to display as an actual new line.\n\nImo there are two options:\n1. ~~Create a PR to vim to allow quickfixtextfunc to return multiple lines for a single entry (prefered option)~~\n2. ~~Add invalid entries with the text set to each line of the diagnostic (easiest option)~~\n3. Let the user implement their own function/user commands to expand the quickfix list with each line of the entries message added as an invalid entry if they need that functionality. (see code snippet below)\n```lua\nlocal function expand_multiline_quickfix_text()\n    local entries = vim.fn.getqflist()\n\n    local expanded_entries = {}\n    local idx = 0\n    for _, entry in ipairs(entries) do\n        if\n            type(entry.user_data) == 'table'\n            and entry.user_data.is_multiline_display\n        then\n            --skip existing multiline dipslayed entries because we will\n            --regenerate them\n        elseif entry.text and string.find(entry.text, '\\n') ~= nil then\n            table.insert(expanded_entries, entry)\n            idx = idx + 1\n\n            local lines = vim.split(entry.text, '\\n')\n            for _, line in ipairs(lines) do\n                local text_entry = {\n                    text = line,\n                    valid = 0,\n                    user_data = {\n                        is_multiline_display = true,\n                        multiline_display_idx = idx,\n                    },\n                }\n                table.insert(expanded_entries, text_entry)\n            end\n            idx = idx + #lines\n        else\n            table.insert(expanded_entries, entry)\n            idx = idx + 1\n        end\n    end\n\n    vim.fn.setqflist({}, 'u', { items = expanded_entries })\nend\n```\n\nSide-Note: \n`vim.diagnostic.fromqflist` and `vim.diagnostic.toqflist` don't actually clip off the extra lines like OP seems to be saying. The default quickfixtextfunc just skips those newline characters when displaying the quickfix entry.\n\nEdited: I realized that @horriblename is asking for something different than I thought he was and added a new comment addressing that. However, I wanted to update this message since my opinion on the solution to what I originally thought this issue was about has changed. I strikedthrough option 1 and 2. Added option 3.\n",
            "created_at": "2025-10-04T16:11:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/35640#issuecomment-3368385193",
            "id": 3368385193,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35640",
            "node_id": "IC_kwDOAPphoM7IxXqp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3368385193/reactions"
            },
            "updated_at": "2025-10-07T11:48:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3368385193",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51029315?v=4",
                "events_url": "https://api.github.com/users/crwebb85/events{/privacy}",
                "followers_url": "https://api.github.com/users/crwebb85/followers",
                "following_url": "https://api.github.com/users/crwebb85/following{/other_user}",
                "gists_url": "https://api.github.com/users/crwebb85/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/crwebb85",
                "id": 51029315,
                "login": "crwebb85",
                "node_id": "MDQ6VXNlcjUxMDI5MzE1",
                "organizations_url": "https://api.github.com/users/crwebb85/orgs",
                "received_events_url": "https://api.github.com/users/crwebb85/received_events",
                "repos_url": "https://api.github.com/users/crwebb85/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/crwebb85/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/crwebb85/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/crwebb85",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I have a Grep which use `quicktextfunc` merge all results of file. similar there can split the items by newline and then merge them but need do some hack on diagnostic calback. \n\n<img width=\"1674\" height=\"620\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/2be68fc9-03a0-4b89-a679-e63df6f8e4fe\" />",
            "created_at": "2025-10-07T06:22:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/35640#issuecomment-3375384821",
            "id": 3375384821,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35640",
            "node_id": "IC_kwDOAPphoM7JMEj1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3375384821/reactions"
            },
            "updated_at": "2025-10-07T06:25:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3375384821",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Imo there are two options:\n \nOkay, I did a good bit of testing and I believe at least I misunderstood what @horriblename is asking.  It would be easier to tell if he updated this with his intend usecase for the feature request. I now believe he is not asking for the fixing clipped messages  in the quickfix list and diagnostics on newline characters. After testing I realized that the API just doesn't clip the messages. As a result, I believe my original comment is off topic. I also have reconsidered on my suggestions in that comment and no longer feel they are good features to have. I will add an edit to that message with why.\n\nI verified that the API doesn't do what I thought @horriblename was saying it did with the minimum.lua which showed that no clipping was occurring on the newlines.\n```lua\nlocal namespace = vim.api.nvim_create_namespace('my-test')\nvim.diagnostic.set(namespace, 0, {\n    {\n        lnum = 1,\n        col = 1,\n        message = 'This is a multiline message. \\n Hello from the new line',\n        source = 'mytest',\n        severity = vim.diagnostic.severity.INFO,\n    },\n})\n\nvim.diagnostic.setqflist()\nlocal diagnostics = vim.diagnostic.fromqflist(vim.fn.getqflist())\nvim.print(diagnostics)\n```\n\nWhat I now believe @horriblename is actually asking for can be explained with the following scenario. \n1. Populate the quickfix list with something like `:make` \n2. There should be valid lines and invalid lines in the quickfix list\n3. Do `vim.diagnostic.fromqflist(vim.fn.getqflist)` to create diagnostics from the make results\n4. Observe that the diagnostic messages don't include the context from the invalid quickfix lines below the valid line\n\nSince @horriblename didn't give a use case for the request, I may be putting words into his mouth but this seems like the most likely scenario given my testing.\n\nIf this is the use case then I believe it makes more since for users to implement their own logic to sanitize the quickfix list or use better errorformats to get the full context.\nThe code snippet @horriblename gave for `squash_qflist` seems pretty reasonable for the user to implement themselves if they need this functionality. \n\n",
            "created_at": "2025-10-07T11:34:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/35640#issuecomment-3376488044",
            "id": 3376488044,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35640",
            "node_id": "IC_kwDOAPphoM7JQR5s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3376488044/reactions"
            },
            "updated_at": "2025-10-07T11:34:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3376488044",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51029315?v=4",
                "events_url": "https://api.github.com/users/crwebb85/events{/privacy}",
                "followers_url": "https://api.github.com/users/crwebb85/followers",
                "following_url": "https://api.github.com/users/crwebb85/following{/other_user}",
                "gists_url": "https://api.github.com/users/crwebb85/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/crwebb85",
                "id": 51029315,
                "login": "crwebb85",
                "node_id": "MDQ6VXNlcjUxMDI5MzE1",
                "organizations_url": "https://api.github.com/users/crwebb85/orgs",
                "received_events_url": "https://api.github.com/users/crwebb85/received_events",
                "repos_url": "https://api.github.com/users/crwebb85/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/crwebb85/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/crwebb85/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/crwebb85",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "\n\n\n> What I now believe [@horriblename](https://github.com/horriblename) is actually asking for can be explained with the following scenario.\n> \n>     1. Populate the quickfix list with something like `:make`\n> \n>     2. There should be valid lines and invalid lines in the quickfix list\n> \n>     3. Do `vim.diagnostic.fromqflist(vim.fn.getqflist)` to create diagnostics from the make results\n> \n>     4. Observe that the diagnostic messages don't include the context from the invalid quickfix lines below the valid line\n\n\nyes that is what I'm referring to",
            "created_at": "2025-10-07T13:26:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/35640#issuecomment-3376891252",
            "id": 3376891252,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35640",
            "node_id": "IC_kwDOAPphoM7JR0V0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3376891252/reactions"
            },
            "updated_at": "2025-10-07T13:26:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3376891252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59727193?v=4",
                "events_url": "https://api.github.com/users/horriblename/events{/privacy}",
                "followers_url": "https://api.github.com/users/horriblename/followers",
                "following_url": "https://api.github.com/users/horriblename/following{/other_user}",
                "gists_url": "https://api.github.com/users/horriblename/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/horriblename",
                "id": 59727193,
                "login": "horriblename",
                "node_id": "MDQ6VXNlcjU5NzI3MTkz",
                "organizations_url": "https://api.github.com/users/horriblename/orgs",
                "received_events_url": "https://api.github.com/users/horriblename/received_events",
                "repos_url": "https://api.github.com/users/horriblename/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/horriblename/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/horriblename/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/horriblename",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> If this is the use case then I believe it makes more since for users to implement their own logic to sanitize the quickfix list or use better errorformats to get the full context.\n> The code snippet @horriblename gave for squash_qflist seems pretty reasonable for the user to implement themselves if they need this functionality.\n\nI now have the same opinion. I'm not really sure what the \"semantics\" of invalid qflist items are, i.e. is it assumed that any invalid qflist item is related to the item above? Are there compilers that output error messages like this:\n\n```\nerror: you did something wrong\n  you should do this or that\n\nerror raised in: /foo/bar.txt line 14\n```\n\nif there are any tools that provide error messages like this (seems very unintuitive to me but who knows), then my `squash_qflist` would attach the context to the wrong diagnostic item.\n\nUltimately, it doesn't seem like qflist items map that nicely to diagnostic items, the better approach is probably just use something like nvim-lint to process the error log into diagnostics, and then convert that to qflist.\n\nI was hoping that `:cfile` and friends could work nicely with diagnostics with minimal user configuration but it doesn't seem possible now",
            "created_at": "2025-10-07T13:47:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/35640#issuecomment-3376976428",
            "id": 3376976428,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35640",
            "node_id": "IC_kwDOAPphoM7JSJIs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3376976428/reactions"
            },
            "updated_at": "2025-10-07T13:47:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3376976428",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59727193?v=4",
                "events_url": "https://api.github.com/users/horriblename/events{/privacy}",
                "followers_url": "https://api.github.com/users/horriblename/followers",
                "following_url": "https://api.github.com/users/horriblename/following{/other_user}",
                "gists_url": "https://api.github.com/users/horriblename/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/horriblename",
                "id": 59727193,
                "login": "horriblename",
                "node_id": "MDQ6VXNlcjU5NzI3MTkz",
                "organizations_url": "https://api.github.com/users/horriblename/orgs",
                "received_events_url": "https://api.github.com/users/horriblename/received_events",
                "repos_url": "https://api.github.com/users/horriblename/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/horriblename/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/horriblename/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/horriblename",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "So commands like :make and i believe :cfile (although I haven't used the last one before) use vim.o.errorformat to parse the errors into quickfix items. Imo they are a pain to write robust errorformats but its typically easy to google common error formats for the languages and tool you use. For more complex things like stacktraces from test cases, I have been using the plugin overseer.nvim so that's also an option ",
            "created_at": "2025-10-07T18:43:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/35640#issuecomment-3378210493",
            "id": 3378210493,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35640",
            "node_id": "IC_kwDOAPphoM7JW2a9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3378210493/reactions"
            },
            "updated_at": "2025-10-07T18:43:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3378210493",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51029315?v=4",
                "events_url": "https://api.github.com/users/crwebb85/events{/privacy}",
                "followers_url": "https://api.github.com/users/crwebb85/followers",
                "following_url": "https://api.github.com/users/crwebb85/following{/other_user}",
                "gists_url": "https://api.github.com/users/crwebb85/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/crwebb85",
                "id": 51029315,
                "login": "crwebb85",
                "node_id": "MDQ6VXNlcjUxMDI5MzE1",
                "organizations_url": "https://api.github.com/users/crwebb85/orgs",
                "received_events_url": "https://api.github.com/users/crwebb85/received_events",
                "repos_url": "https://api.github.com/users/crwebb85/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/crwebb85/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/crwebb85/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/crwebb85",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35640/comments",
    "created_at": "2025-09-05T11:53:25Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35640/events",
    "html_url": "https://github.com/neovim/neovim/issues/35640",
    "id": 3387292793,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c7def8",
            "default": false,
            "description": "user experience",
            "id": 151718455,
            "name": "ux",
            "node_id": "MDU6TGFiZWwxNTE3MTg0NTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ux"
        },
        {
            "color": "BFDADC",
            "default": false,
            "description": "Low-risk, self-contained. Do NOT ask \"can I work on this\", just read CONTRIBUTING.md",
            "id": 407246773,
            "name": "complexity:low",
            "node_id": "MDU6TGFiZWw0MDcyNDY3NzM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/complexity:low"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 6937717172,
            "name": "quickfix",
            "node_id": "LA_kwDOAPphoM8AAAABnYUptA",
            "url": "https://api.github.com/repos/neovim/neovim/labels/quickfix"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35640/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 297,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 353,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-10-12T17:29:29Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM7J5fx5",
    "number": 35640,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35640/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35640/timeline",
    "title": "vim.diagnostic.fromqflist: squash qflist lines with `valid == 0`",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-10-07T18:43:39Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35640",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/59727193?v=4",
        "events_url": "https://api.github.com/users/horriblename/events{/privacy}",
        "followers_url": "https://api.github.com/users/horriblename/followers",
        "following_url": "https://api.github.com/users/horriblename/following{/other_user}",
        "gists_url": "https://api.github.com/users/horriblename/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/horriblename",
        "id": 59727193,
        "login": "horriblename",
        "node_id": "MDQ6VXNlcjU5NzI3MTkz",
        "organizations_url": "https://api.github.com/users/horriblename/orgs",
        "received_events_url": "https://api.github.com/users/horriblename/received_events",
        "repos_url": "https://api.github.com/users/horriblename/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/horriblename/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/horriblename/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/horriblename",
        "user_view_type": "public"
    }
}