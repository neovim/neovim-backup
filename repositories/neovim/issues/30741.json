{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nThis is about a implementing a compatibility layer to provide `vim`'s `popup` API.\n\nWithout the option to consume the keys, `vim.on_key()` is not suitable for implementing a `popup`'s  `filter`.\n\nWith `vim.on_key()` there's also\n```\n{key} is the key after mappings have been applied, and {typed} is the\nkey(s) before mappings are applied\n```\nWhich also interferes with correct operation of `popup`'s  `filter`, since it may need to see each key as it's entered, not multiple keys.  This is likely related to the following.\n\nThere's a `popup` option `mapping` \n```\nIf the filter consumes all the keys, set the \"mapping\" property to zero\nso that mappings do not get in the way\n```\nIn the `vim` code, in `vgetc()` there's a check for `popup_no_mapping` which is missing in the following `neovim` code\n```\n  if (mod_mask) {           // no mapping after modifier has been read\n    no_mapping++;\n```\n(But my analysis could be flawed, since `no_mapping` can be set in various ways)\n\n-----\n\nThis is related to #30504 and #30542.\n\n\n### Expected behavior\n\nSome things that comes to mind around `vim.on_key()`. Change the signature to\n```\non_key(fn: function?, ns_id: integer? [, {options}]): bool?\n```\n\n1. Use the return value to indicate if the key should be discarded and/or has been handled\n2. Add `allow_mapping` option to `vim.on_key()`, default `true`\n   For when the `mapping` property on the `popup` is active.\n3. Add `enable_return_value_controls_discard` option to `vim.on_key()`\n   Only needed if there's compatibility concerns around (1)?\n   Could also be useful to insure that `on_key` callbacks that do not have this set are invoked first.\n\nThere's some weirdness possible since, in `vgetc()`, the mappings are done before the callback is executed. So, depending on implementation, when `allow_mapping` is `false` then other uses of `vim.on_key()` might see different arguments than they would otherwise have seen.\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Is using `getchar()` or `getcharstr()` in a loop not feasible for this specific case?",
            "created_at": "2024-10-09T22:45:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2403553453",
            "id": 2403553453,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6PQ1Ct",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2403553453/reactions"
            },
            "updated_at": "2024-10-09T22:52:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2403553453",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Is using `getchar()` or `getcharstr()` not feasible for this specific case?\n\nWhen I first looked at this, `getchar()` seemed a poor fit. Could either hang waiting for a char (not sure where it hangs and what would be prevented). Could have a timer loop checking for an available character, then get it when available.\n\nBut after getting the character, is the idea to use `feedkeys()` to put it back if it is not one you want? Wouldn't this potentially re-order the keys?\n\n`getchar` feels very messy.\n\nThere's also the question of preventing mapping.",
            "created_at": "2024-10-09T23:00:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2403570603",
            "id": 2403570603,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6PQ5Or",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2403570603/reactions"
            },
            "updated_at": "2024-11-01T01:59:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2403570603",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hmm, `feedkeys()` does have an `'i'` option, which might avoid re-ordering. Will `getchar()` pick this up for a get/put loop? ",
            "created_at": "2024-10-09T23:06:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2403581430",
            "id": 2403581430,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6PQ732",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2403581430/reactions"
            },
            "updated_at": "2024-11-01T02:11:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2403581430",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Right, `getchar()` won't work.",
            "created_at": "2024-10-09T23:47:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2403630365",
            "id": 2403630365,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6PRH0d",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2403630365/reactions"
            },
            "updated_at": "2024-10-09T23:47:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2403630365",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Part of the work to implement \"multicursor\" support will be to \"atomize\" input so that its structure is exposed. That seems like a requirement for this, otherwise you end up re-implementing a mapping parser in `on_key` (which doesn't know if a key will resolve to a mapping / builtin normal command)?",
            "created_at": "2024-10-10T11:43:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2404867582",
            "id": 2404867582,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6PV13-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2404867582/reactions"
            },
            "updated_at": "2024-10-10T11:43:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2404867582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No, OP just wants:\n1. A way for `vim.on_key()` to consume a key\n2. A way temporarily disable all mappings",
            "created_at": "2024-10-10T12:39:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2404979918",
            "id": 2404979918,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6PWRTO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2404979918/reactions"
            },
            "updated_at": "2024-10-10T12:40:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2404979918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@zeertzjq This might not be directly related to multicursor but it contains relevant info. So please leave that label.",
            "created_at": "2024-10-13T20:05:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2409107573",
            "id": 2409107573,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6PmBB1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2409107573/reactions"
            },
            "updated_at": "2024-10-13T20:05:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2409107573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@zeertzjq Here's a diff patch that allows an `vim.on_key({fn}, {ns_id}, {options})` handler to specify options with`{may_discard=true}`. When `may_discard` is true and the handler returns true, the key is discarded. There might be problems with this patch; like how it's implemented and/or commented/annotated. It does let me test the concept. This does nothing about temporarily disabling mappings.\n\nIt was interesting to get a taste of \"C\"/lua interface.\n```diff\ndiff --git a/runtime/lua/vim/_editor.lua b/runtime/lua/vim/_editor.lua\n--- a/runtime/lua/vim/_editor.lua\n+++ b/runtime/lua/vim/_editor.lua\n@@ -649,7 +649,8 @@\n   end\n end\n \n-local on_key_cbs = {} --- @type table<integer,function>\n+                            -- TODO: following probably not correct\n+local on_key_cbs = {} --- @type table<integer,[function,options?]>\n \n --- Adds Lua function {fn} with namespace id {ns_id} as a listener to every,\n --- yes every, input key.\n@@ -672,12 +673,13 @@\n ---          namespace {ns_id} is removed.\n ---@param ns_id integer? Namespace ID. If nil or 0, generates and returns a\n ---                      new |nvim_create_namespace()| id.\n+---@param options table? may_discard=true if {fn} return controls {key} discard.\n ---\n ---@see |keytrans()|\n ---\n ---@return integer Namespace id associated with {fn}. Or count of all callbacks\n ---if on_key() is called without arguments.\n-function vim.on_key(fn, ns_id)\n+function vim.on_key(fn, ns_id, options)\n   if fn == nil and ns_id == nil then\n     return vim.tbl_count(on_key_cbs)\n   end\n@@ -685,13 +687,14 @@\n   vim.validate({\n     fn = { fn, 'c', true },\n     ns_id = { ns_id, 'n', true },\n+    options = { options, 't', true },\n   })\n \n   if ns_id == nil or ns_id == 0 then\n     ns_id = vim.api.nvim_create_namespace('')\n   end\n \n-  on_key_cbs[ns_id] = fn\n+  on_key_cbs[ns_id] = fn and { fn, options }\n   return ns_id\n end\n \n@@ -700,12 +703,21 @@\n function vim._on_key(buf, typed_buf)\n   local failed_ns_ids = {}\n   local failed_messages = {}\n+  local discard = false\n   for k, v in pairs(on_key_cbs) do\n-    local ok, err_msg = pcall(v, buf, typed_buf)\n+    -- Do something like this if only want to dispatch to 1 of may_discard callbacks;\n+    -- but only makes sense if may_discard callbacks are sorted like by zindex.\n+    -- if discard and v[2] and v2].may_discard then continue end\n+    local ok, discard_or_err_msg = pcall(v[1], buf, typed_buf)\n     if not ok then\n       vim.on_key(nil, k)\n       table.insert(failed_ns_ids, k)\n-      table.insert(failed_messages, err_msg)\n+      table.insert(failed_messages, discard_or_err_msg)\n+    elseif v[2] and v[2].may_discard  then\n+      if discard_or_err_msg == true then\n+        discard = true\n+        -- break;  -- TODO: deliver to all even if it eventually discards?\n+      end\n     end\n   end\n \n@@ -718,6 +730,7 @@\n       )\n     )\n   end\n+  return discard\n end\n \n --- Generates a list of possible completions for the string.\ndiff --git a/src/nvim/getchar.c b/src/nvim/getchar.c\n--- a/src/nvim/getchar.c\n+++ b/src/nvim/getchar.c\n@@ -1772,7 +1772,10 @@\n \n   // Execute Lua on_key callbacks.\n   kvi_push(on_key_buf, NUL);\n-  nlua_execute_on_key(c, on_key_buf.items);\n+  if (nlua_execute_on_key(c, on_key_buf.items)) {\n+    DLOG(\"on_key ignoring '%x'\", c);\n+    c = K_IGNORE;\n+  }\n   kvi_destroy(on_key_buf);\n   kvi_init(on_key_buf);\n \ndiff --git a/src/nvim/lua/executor.c b/src/nvim/lua/executor.c\n--- a/src/nvim/lua/executor.c\n+++ b/src/nvim/lua/executor.c\n@@ -2063,12 +2063,13 @@\n   return name;\n }\n \n-void nlua_execute_on_key(int c, char *typed_buf)\n+// @return true to discrd the key\n+bool nlua_execute_on_key(int c, char *typed_buf)\n {\n   static bool recursive = false;\n \n   if (recursive) {\n-    return;\n+    return false;\n   }\n   recursive = true;\n \n@@ -2097,9 +2098,15 @@\n \n   int save_got_int = got_int;\n   got_int = false;  // avoid interrupts when the key typed is Ctrl-C\n-  if (nlua_pcall(lstate, 2, 0)) {\n+  bool discard = false;\n+  if (nlua_pcall(lstate, 2, 1)) {\n     nlua_error(lstate,\n                _(\"Error executing  vim.on_key Lua callback: %.*s\"));\n+  } else {\n+    if (lua_isboolean(lstate, -1)) {\n+      discard = lua_toboolean(lstate, -1);\n+    }\n+    lua_pop(lstate, 1);\n   }\n   got_int |= save_got_int;\n \n@@ -2112,6 +2119,7 @@\n #endif\n \n   recursive = false;\n+  return discard;\n }\n \n // Sets the editor \"script context\" during Lua execution. Used by :verbose.\n```m.",
            "created_at": "2024-10-17T03:58:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2418447447",
            "id": 2418447447,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6QJpRX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2418447447/reactions"
            },
            "updated_at": "2024-11-01T01:58:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2418447447",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Even though the diff in the previous comment is not intended as a PR, I notice at least two things that may be wrong/incomplete.\n\nIn following, does options need to be copied? probably.\n```diff\n    -function vim.on_key(fn, ns_id)\n    +function vim.on_key(fn, ns_id, options)\n```\n\nIn the following, does \"nlua_error\" clean up everything?\nOr does the \"lua_pop(lstate, 1)\" need to be outside the else?\n```diff\n    -  if (nlua_pcall(lstate, 2, 0)) {\n    +  bool discard = false;\n    +  if (nlua_pcall(lstate, 2, 1)) {\n         nlua_error(lstate,\n                    _(\"Error executing  vim.on_key Lua callback: %.*s\"));\n    +  } else {\n    +    if (lua_isboolean(lstate, -1)) {\n    +      discard = lua_toboolean(lstate, -1);\n    +    }\n    +    lua_pop(lstate, 1);\n       }\n```\n",
            "created_at": "2024-10-18T16:11:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2422811388",
            "id": 2422811388,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6QaSr8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422811388/reactions"
            },
            "updated_at": "2024-11-01T01:59:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2422811388",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "About using `vim.on_key()` to work with, and possibly discard, mouse events. The mouse events come in as 3 character sequences. When looking at multi-click, for example double click left mouse comes in as\n```\n'<80><fc> <80><fd>,'\n```\nThe first sequence I'm interpreting as `<2Click>` and so this is\n```\n<2Click><LeftMouse>\n```\nIt looks there's a `?Click` sequence that precedes the usual mouse event. Agree?\n\nThese are the ones I'm seeing\n```\n\"<80><fc> \"  \"2Click\"  \"<2-^@>\"\n\"<80><fc>@\"  \"3Click\"  \"<3-^@>\"\n\"<80><fc>`\"  \"4Click\"  \"<4-^@>\"\n```\nThe third column is the outut of `keytrans()` (looks funny)\nIs the sequence platform independent?\n\nI'm assuming that any sequence that starts with \"<80>\" is a group of three.\n\nI haven't found any of this documented; am I missing something.\n",
            "created_at": "2024-10-24T02:44:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2434124822",
            "id": 2434124822,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6RFcwW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2434124822/reactions"
            },
            "updated_at": "2024-10-24T02:44:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2434124822",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If you use `keytrans()` on the 6-byte sequence, you'll see `<2-LeftMouse>`.",
            "created_at": "2024-10-24T03:32:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2434174483",
            "id": 2434174483,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6RFo4T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2434174483/reactions"
            },
            "updated_at": "2024-10-24T03:32:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2434174483",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "There's #30939 which handles \"consume the key\" but not \"prevent mapping\".",
            "created_at": "2024-10-24T22:12:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2436431534",
            "id": 2436431534,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6ROP6u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2436431534/reactions"
            },
            "updated_at": "2024-11-01T02:16:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2436431534",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk @zeertzjq With #30939 committed, this issue can focus on discussing \"prevent mapping\"; and, if needed, describing an implementation. The issue is described by the following from vim's doc.\n```\n\t\t\t\t\t\t\t*popup-mapping\nNormally the key is what results after any mapping, since the keys pass on as\nnormal input if the filter does not use it.  If the filter consumes all the\nkeys, set the \"mapping\" property to zero so that mappings do not get in the\nway.  This is default for |popup_menu()| and |popup_dialog()|.\n```\n\nFor popup compatibility `vim.on_key()` is used to handle a popup filter monitoring and discarding keys; as described above, if a filter wants and discards all keys things work much better if mappings can be disabled while working with the keys provided by `vim.on_key()`. It is suggested that `vim.on_key()` accept an option like `{mappings = boolean?}` which disables any mappings while the callback is in place.\n\nThere is concern that disabling mappings may be confusing. If it's used as recommended, \"If the filter consumes all the\nkeys\", the problem is avoided. The `vim.on_key()` docs should make this issue clear.\n(see https://github.com/neovim/neovim/pull/30939#discussion_r1823668602 for some discussion)\n\nIf there is agreement on this, or an alternate suggestion, I can look at fleshing out an implementation.",
            "created_at": "2024-11-01T02:51:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/30741#issuecomment-2451195906",
            "id": 2451195906,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30741",
            "node_id": "IC_kwDOAPphoM6SGkgC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451195906/reactions"
            },
            "updated_at": "2024-11-01T02:51:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451195906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 13,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30741/comments",
    "created_at": "2024-10-09T22:41:20Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30741/events",
    "html_url": "https://github.com/neovim/neovim/issues/30741",
    "id": 2577095796,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 396626349,
            "name": "input",
            "node_id": "MDU6TGFiZWwzOTY2MjYzNDk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/input"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1471818957,
            "name": "multicursor",
            "node_id": "MDU6TGFiZWwxNDcxODE4OTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/multicursor"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "key bindings, keycodes",
            "id": 3304938718,
            "name": "mappings",
            "node_id": "MDU6TGFiZWwzMzA0OTM4NzE4",
            "url": "https://api.github.com/repos/neovim/neovim/labels/mappings"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30741/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 285,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 339,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-07-04T21:53:41Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6Zm1x0",
    "number": 30741,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30741/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30741/timeline",
    "title": "vim.on_key() can prevent mapping (fixed: can consume the key)",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:45Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30741",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
        "events_url": "https://api.github.com/users/errael/events{/privacy}",
        "followers_url": "https://api.github.com/users/errael/followers",
        "following_url": "https://api.github.com/users/errael/following{/other_user}",
        "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/errael",
        "id": 20450427,
        "login": "errael",
        "node_id": "MDQ6VXNlcjIwNDUwNDI3",
        "organizations_url": "https://api.github.com/users/errael/orgs",
        "received_events_url": "https://api.github.com/users/errael/received_events",
        "repos_url": "https://api.github.com/users/errael/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/errael",
        "user_view_type": "public"
    }
}