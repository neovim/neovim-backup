{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nA user cannot partially accept inline completion (implemented in #33972)\n\nCurrent implementation is limited to accept the full completion content. This is not something that is mentioned in the LSP spec and is rather handled by the clients as the inline completion remains the same, unless completion content is exhausted and a new completion is requested. Many popular clients provide this functionality already:\n\nPlugins:\n* github/copilot.vim has `<Plug>(copilot-accept-word)` and `<Plug>(copilot-accept-line)`, [docs](https://github.com/github/copilot.vim/blob/f3d66c148aa60ad04c0a21d3e0a776459de09eb2/doc/copilot.txt#L172-L179)\n* zbirenbaum/copilot.lua has `require(\"copilot.suggestion\").accept_word()` and `require(\"copilot.suggestion\").accept_line()` in [readme](https://github.com/zbirenbaum/copilot.lua#suggestion)\n\nEditors and IDEs:\n* VS Code has `editor.action.inlineSuggest.acceptNextWord` - `cmd + right` and `editor.action.inlineSuggest.acceptNextLine`(no default shortcut)\n* Zed has `editor::AcceptPartialEditPrediction` - `ctrl + cmd + right` works as accept till end of word\n* IntelliJ IDEA has next word and next line accept shortcuts, see [their docs](https://www.jetbrains.com/help/idea/full-line-code-completion.html)\n\n\n### Expected behavior\n\nA user can partially accept the current inline completion item\n\n",
    "closed_at": "2025-08-25T13:21:03Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
        "events_url": "https://api.github.com/users/clason/events{/privacy}",
        "followers_url": "https://api.github.com/users/clason/followers",
        "following_url": "https://api.github.com/users/clason/following{/other_user}",
        "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/clason",
        "id": 2361214,
        "login": "clason",
        "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
        "organizations_url": "https://api.github.com/users/clason/orgs",
        "received_events_url": "https://api.github.com/users/clason/received_events",
        "repos_url": "https://api.github.com/users/clason/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/clason",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "If it's not the in the spec, we won't consider it. Simple as that.",
            "created_at": "2025-08-25T13:21:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/35476#issuecomment-3220247511",
            "id": 3220247511,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35476",
            "node_id": "IC_kwDOAPphoM6_8RPX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 2,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3220247511/reactions"
            },
            "updated_at": "2025-08-25T13:21:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3220247511",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> is rather handled by the clients \n\nThis is not accurate; it actually relies on a `textDocument/didPartiallyAcceptCompletion`, which is not in the LSP spec.",
            "created_at": "2025-08-25T13:50:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/35476#issuecomment-3220368393",
            "id": 3220368393,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35476",
            "node_id": "IC_kwDOAPphoM6_8uwJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3220368393/reactions"
            },
            "updated_at": "2025-08-25T13:50:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3220368393",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Using the newly merged pull request, I'm using this code to achieve this, it's a bit hacky but is doing the job until a plugin officially supports it or someone provides better code snippets:\n\n```lua\nlocal function accept_completion(item, mode)\n  local insert_text = item.insert_text\n  if type(insert_text) == \"string\" then\n    local range = item.range\n    if range then\n      local lines = vim.split(insert_text, \"\\n\")\n      local current_lines = vim.api.nvim_buf_get_text(\n        range.start.buf,\n        range.start.row,\n        range.start.col,\n        range.end_.row,\n        range.end_.col,\n        {}\n      )\n\n      if mode == \"word\" then\n        local row = 1\n        while row <= #lines and row <= #current_lines and lines[row] == current_lines[row] do\n          row = row + 1\n        end\n\n        local col = 1\n        while\n          row <= #lines\n          and col <= #lines[row]\n          and row <= #current_lines\n          and col <= #current_lines[row]\n          and lines[row][col] == current_lines[row][col]\n        do\n          col = col + 1\n        end\n\n        local word = string.match(lines[row]:sub(col), \"%s*[^%s]%w*\")\n        vim.print(\n          range.start.buf,\n          math.min(range.start.row + row - 1, range.end_.row),\n          row == #current_lines and math.min(range.start.col + col - 1, range.end_.col)\n          or math.min(col - 1, range.end_.col),\n          range.end_.row,\n          range.end_.col,\n          { word }\n        )\n\n        vim.api.nvim_buf_set_text(\n          range.start.buf,\n          math.min(range.start.row + row - 1, range.end_.row),\n          row <= #current_lines and (row == 1 and range.start.col + col - 1 or col - 1) or range.end_.col,\n          range.end_.row,\n          range.end_.col,\n          row <= #current_lines and { word } or { \"\", word }\n        )\n        local pos = item.range.start:to_cursor()\n        vim.api.nvim_win_set_cursor(vim.fn.bufwinid(range.start.buf), {\n          pos[1] + row - 1,\n          pos[2] + col - 1 + #lines[1] - 1,\n        })\n      else\n        vim.api.nvim_buf_set_text(\n          range.start.buf,\n          range.start.row,\n          range.start.col,\n          range.end_.row,\n          range.end_.col,\n          lines\n        )\n        local pos = item.range.start:to_cursor()\n        vim.api.nvim_win_set_cursor(vim.fn.bufwinid(range.start.buf), {\n          pos[1] + #lines - 1,\n          (#lines == 1 and pos[2] or 0) + #lines[#lines],\n        })\n      end\n    else\n      vim.api.nvim_paste(insert_text, false, 0)\n    end\n  elseif insert_text.kind == \"snippet\" then\n    vim.snippet.expand(insert_text.value)\n  end\n\n  -- Execute the command *after* inserting this completion.\n  if item.command then\n    local client = assert(vim.lsp.get_client_by_id(item.client_id))\n    client:exec_cmd(item.command, { bufnr = item.range.start.buf })\n  end\nend\n```\n\nyou can use it like this in the `LspAttach` autocmd:\n```lua\n    local opts = { noremap = true, silent = true, buffer = bufnr }\n\n    vim.keymap.set(\n      \"i\",\n      \"<c-x>\",\n      function()\n        local result = vim.lsp.inline_completion.get({\n          bufnr = bufnr,\n          on_accept = accept_completion,\n        })\n        if not result then\n          return \"<c-x>\"\n        end\n      end,\n      vim.tbl_extend(\"force\", opts, {\n        expr = true,\n        replace_keycodes = true,\n        desc = \"Get the current inline completion\",\n      })\n    )\n    vim.keymap.set(\n      \"i\",\n      \"<m-l>\",\n      function()\n        local result = vim.lsp.inline_completion.get({\n          bufnr = bufnr,\n          on_accept = function(item)\n            accept_completion(item, \"word\")\n          end,\n        })\n        if not result then\n          return \"<c-x>\"\n        end\n      end,\n      vim.tbl_extend(\"force\", opts, {\n        expr = true,\n        replace_keycodes = true,\n        desc = \"Get the current inline completion\",\n      })\n    )\n```\n\nSimple as that.™",
            "created_at": "2025-09-02T13:07:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/35476#issuecomment-3245265729",
            "id": 3245265729,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35476",
            "node_id": "IC_kwDOAPphoM7BbtNB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3245265729/reactions"
            },
            "updated_at": "2025-09-02T13:09:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3245265729",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1270688?v=4",
                "events_url": "https://api.github.com/users/sassanh/events{/privacy}",
                "followers_url": "https://api.github.com/users/sassanh/followers",
                "following_url": "https://api.github.com/users/sassanh/following{/other_user}",
                "gists_url": "https://api.github.com/users/sassanh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sassanh",
                "id": 1270688,
                "login": "sassanh",
                "node_id": "MDQ6VXNlcjEyNzA2ODg=",
                "organizations_url": "https://api.github.com/users/sassanh/orgs",
                "received_events_url": "https://api.github.com/users/sassanh/received_events",
                "repos_url": "https://api.github.com/users/sassanh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sassanh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sassanh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sassanh",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35476/comments",
    "created_at": "2025-08-25T13:17:52Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/35476/events",
    "html_url": "https://github.com/neovim/neovim/issues/35476",
    "id": 3351825191,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/35476/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM7HyMsn",
    "number": 35476,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/35476/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/35476/timeline",
    "title": "[lsp] inline_completion accept_word / accept_line",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-09-02T13:09:29Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/35476",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
        "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
        "followers_url": "https://api.github.com/users/antonk52/followers",
        "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
        "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/antonk52",
        "id": 5817809,
        "login": "antonk52",
        "node_id": "MDQ6VXNlcjU4MTc4MDk=",
        "organizations_url": "https://api.github.com/users/antonk52/orgs",
        "received_events_url": "https://api.github.com/users/antonk52/received_events",
        "repos_url": "https://api.github.com/users/antonk52/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/antonk52",
        "user_view_type": "public"
    }
}