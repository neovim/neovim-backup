{
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski",
            "user_view_type": "public"
        }
    ],
    "author_association": "MEMBER",
    "body": "Make `vim.pack` respect [packspec](https://github.com/neovim/packspec). I.e. if plugin contains 'pkg.json' file, `vim.pack` should install dependencies, verify Neovim version, etc.\n\nRequires finalized `packspec` specification and discussions about the scope.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I'm lukewarm on packspec, but if we are going to support \"dependencies\" then I'm zealous about it. I don't see any other way, except maybe luarocks.",
            "created_at": "2025-07-04T13:54:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3036359491",
            "id": 3036359491,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM60-ytD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3036359491/reactions"
            },
            "updated_at": "2025-07-04T13:54:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3036359491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, right now I find the following usages of 'pkg.json' which would be great to have `vim.pack` support:\n- Declare dependencies for `vim.pack` to automatically resolve and install/update. This will be hard but I think worth it at least in some simplified form.\n- Declare actions/hooks to be executed on install/update/delete.\n- Declare Neovim version constraints.\n- Declare plugin's name to be used during install. Like maybe 'plugin.nvim' wants to be named 'plugin'. Or for cases like [catppuccin/nvim](https://github.com/catppuccin/nvim) to not have the plugin named 'nvim'.",
            "created_at": "2025-07-04T14:01:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3036386809",
            "id": 3036386809,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM60-5X5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 6,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 12,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3036386809/reactions"
            },
            "updated_at": "2025-07-04T14:02:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3036386809",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Apologies in advance and feel free to mark this comment as off-topic if it's really worth it, but I genuinely have some concerns about adopting a custom format based-off json for plugin management. Wouldn't it be better to wait a bit and adopt Luarocks through Lux instead? Having something more robust with better UX/DX seems more cost-effective and would mean less code to maintain. It would also prevent repeating the same old mistake and ending up with a sort of decentralized MELPA...",
            "created_at": "2025-07-06T00:30:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3040481853",
            "id": 3040481853,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM61OhI9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 9,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 10,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3040481853/reactions"
            },
            "updated_at": "2025-07-06T00:30:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3040481853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36456999?v=4",
                "events_url": "https://api.github.com/users/NTBBloodbath/events{/privacy}",
                "followers_url": "https://api.github.com/users/NTBBloodbath/followers",
                "following_url": "https://api.github.com/users/NTBBloodbath/following{/other_user}",
                "gists_url": "https://api.github.com/users/NTBBloodbath/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NTBBloodbath",
                "id": 36456999,
                "login": "NTBBloodbath",
                "node_id": "MDQ6VXNlcjM2NDU2OTk5",
                "organizations_url": "https://api.github.com/users/NTBBloodbath/orgs",
                "received_events_url": "https://api.github.com/users/NTBBloodbath/received_events",
                "repos_url": "https://api.github.com/users/NTBBloodbath/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NTBBloodbath/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NTBBloodbath/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NTBBloodbath",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> have some concerns about adopting a custom format based-off json for plugin management. Wouldn't it be better to wait a bit and adopt Luarocks through Lux instead?\n\nThe purpose of packspec is to be a strict subset of NPM package.json, thus intentionally *not* a \"custom format\". It's also designed to be declarative (data-only), which allows \"roundtripping\" (e.g. `:packinstall` writes to the user's local packspec), and generating a UI from the data. Seems less feasible with turing-complete formats like rockspec. Happy to be proven wrong / does Lux help with that?\n\n> prevent repeating the same old mistake and ending up with a sort of decentralized MELPA...\n\nDecentralized is an intentional outcome, why is it a mistake? A centralized registry also [planned](https://github.com/neovim/neovim/issues/24221#issuecomment-1616009906) but surely we want to keep the door open for the decentralized, ad-hoc, URI-based way of specifying a dependency?",
            "created_at": "2025-07-06T14:39:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3041831100",
            "id": 3041831100,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM61Tqi8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3041831100/reactions"
            },
            "updated_at": "2025-07-06T14:40:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3041831100",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Seems less feasible with turing-complete formats like rockspec. Happy to be proven wrong / does Lux help with that?\n\nFor projects, Lux uses [a subset of the rockspec specification in a TOML format](https://nvim-neorocks.github.io/guides/lux-toml), which can be extended with a Lua `extra.rockspec` for more complex packages if needed. \nSo with Lux, you can edit the `lux.toml` using commands like `lx add`, `lx remove`, `lx pin`, ...\n\n> but surely we want to keep the door open for the decentralized, ad-hoc, URI-based way of specifying a dependency?\n\nTo add my two cents: (please correct me if I'm mistaken) transitive dependencies are a lot more challenging without a centralised registry.\nThe notion that \"upstream dependencies don't need to be 'compliant'\" is only true without transitive dependencies.\nFor instance, if a package depends on a luarocks library that doesn't additionally maintain a `pkg.json`, you won't pull its dependencies.\nAdditionally, you'll have to pull all packages (in a branch, sequentially) to fully resolve a dependency tree.",
            "created_at": "2025-07-07T22:24:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3046673741",
            "id": 3046673741,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM61mI1N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3046673741/reactions"
            },
            "updated_at": "2025-07-07T22:57:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3046673741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12857160?v=4",
                "events_url": "https://api.github.com/users/mrcjkb/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrcjkb/followers",
                "following_url": "https://api.github.com/users/mrcjkb/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrcjkb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrcjkb",
                "id": 12857160,
                "login": "mrcjkb",
                "node_id": "MDQ6VXNlcjEyODU3MTYw",
                "organizations_url": "https://api.github.com/users/mrcjkb/orgs",
                "received_events_url": "https://api.github.com/users/mrcjkb/received_events",
                "repos_url": "https://api.github.com/users/mrcjkb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrcjkb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrcjkb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrcjkb",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The notion that \"upstream dependencies don't need to be 'compliant'\" is only true without transitive dependencies.\n> For instance, if a package depends on a luarocks library that doesn't additionally maintain a `pkg.json`, you won't pull its dependencies.\n\nYes. A [real package manager](https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527) like luarocks/lux is a complex affair, presumably  we would need to ship lux/luarocks, or reimplement them. A \"dumb\" spec like packspec (pkg.json) avoids that and outsources most of the decisions to git.\n\nSo the way I see it, the door is open for some day pulling in the jungle of a \"real package manager\", while meanwhile having a low-cost answer that rides the current state of the vim/nvim package ecosystem.\n\nMeanwhile, `vim.pack` and [vim.net.request()](https://github.com/neovim/neovim/pull/34140) open the door for users (and maybe our `example_init.lua` mentioned in `:help nvim-quickstart`), to pull in Lux by adding 1 line to their config. \n\nMy sense is that we can gain a lot with a little by keeping things simple. If we want to consider shipping rockspec/`lux.toml`, that's a much bigger scope that is likely to stall. \n\nI could be proven wrong by a PR that implements the necessary parts in 1000 lines or so.\n\n> which can be extended with a Lua `extra.rockspec`\n\nThis would just need to be dropped, since I assume it brings in the entire scope of luarocks.",
            "created_at": "2025-07-08T00:03:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3046899998",
            "id": 3046899998,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM61nAEe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3046899998/reactions"
            },
            "updated_at": "2025-07-08T00:09:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3046899998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> since I assume it brings in the entire scope of luarocks.\n\nI'm not sure what you mean by this.\nYou can't `require` any modules in a Lua rockspec.\n\nWhat could potentially bring in the entire scope of luarocks are custom build backends, for which [there doesn't exist a well-defined API boundary](https://github.com/luarocks/luarocks/issues/1800#issuecomment-2949467298).\nLux solves this by installing luarocks (which is available on luarocks.org), shelling out to it for the build step and \"translating\" the built package in the install step.\n\nBut this is getting off-topic so let's discuss this another time/elsewhere if necessary 😅\n\n> If we want to consider shipping rockspec/lux.toml, that's a much bigger scope that is likely to stall.\n\nAgreed. I don't think Neovim itself should try to implement something of that scope. We're [working on a rewrite of rocks.nvim that uses a `lux.so` library](https://github.com/nvim-neorocks/rocks.nvim/pull/644) (lux compiled with lua bindings). When we're done with that, we'll have an idea of the LOC needed.",
            "created_at": "2025-07-08T05:46:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3047449235",
            "id": 3047449235,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM61pGKT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 5,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3047449235/reactions"
            },
            "updated_at": "2025-07-08T05:47:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3047449235",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12857160?v=4",
                "events_url": "https://api.github.com/users/mrcjkb/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrcjkb/followers",
                "following_url": "https://api.github.com/users/mrcjkb/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrcjkb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrcjkb",
                "id": 12857160,
                "login": "mrcjkb",
                "node_id": "MDQ6VXNlcjEyODU3MTYw",
                "organizations_url": "https://api.github.com/users/mrcjkb/orgs",
                "received_events_url": "https://api.github.com/users/mrcjkb/received_events",
                "repos_url": "https://api.github.com/users/mrcjkb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrcjkb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrcjkb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrcjkb",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> To add my two cents: (please correct me if I'm mistaken) transitive dependencies are a lot more challenging without a centralised registry.\n> The notion that \"upstream dependencies don't need to be 'compliant'\" is only true without transitive dependencies.\n> For instance, if a package depends on a luarocks library that doesn't additionally maintain a `pkg.json`, you won't pull its dependencies.\n\nYes, if some plugin doesn't have 'pkg.json', there is no way to read it to know plugin's dependencies. If plugin wants to depend on something that doesn't have 'pkg.json', then one way to work around that is for plugin maintainer to explicitly define all (transitive) dependencies for such cases. Or make a PR to add the support.\n\nAnd yes, it is not trivial to fully resolve transitive dependencies (during both install and update). Yet it is also not impossible to do relatively concisely at least in the way that covers 90% of use cases.\n\n---\n\nApart from dependencies, another important aspect is for plugin to define actions/hooks to be executed at specific events (install, update, delete). Quick scan of rockspec showed only `build` section, which has different purpose as far as I can tell.",
            "created_at": "2025-07-08T07:47:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3047757116",
            "id": 3047757116,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM61qRU8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3047757116/reactions"
            },
            "updated_at": "2025-07-08T07:47:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3047757116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "My 2cent, but if `vim.pack` support `packspec`, I hope there will be a command `:PackInit` or `:Pack init` that generates a `packspec` file in current directory, similar to what commands like `npm init` or `go mod init` do.",
            "created_at": "2025-07-08T09:39:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3048132390",
            "id": 3048132390,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM61rs8m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3048132390/reactions"
            },
            "updated_at": "2025-07-08T09:39:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3048132390",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> for plugin maintainer to explicitly define all (transitive) dependencies for such cases\n\nThat doesn't sound much more ergonomic (or less brittle) than users defining all transitive dependencies.\n\n> Or make a PR to add the support.\n\nMy concern in that regard is that I doubt library maintainers that already maintain rockspecs will be eager to maintain multiple sources of truth for dependencies (I wouldn't).\n\n> Yet it is also not impossible to do relatively concisely at least in the way that covers 90% of use cases.\n\nWith support for dependency resolution, it's likely that the complexity will increase in the future. \nAnd there's still the problem that the decentralised nature means you have to fetch the whole source of each transitive dependency sequentially.\n\n> another important aspect is for plugin to define actions/hooks to be executed at specific events (install, update, delete)\n\nThat doesn't look like it's covered [by the packspec either](https://packspec.org/spec.html)?\nHow would one implement that in a json spec? It sounds like a YAGNI to me.\nIf it's needed at runtime, wouldn't autocommands be simpler?\n\nAnyways, I'm not trying to persuade/dissuade anyone from implementing packspec. Just wanted to add some input based on my experience with package management in someone finds it useful.\n\nI'll unsubscribe from this issue now 😄 ",
            "created_at": "2025-07-08T10:57:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3048411067",
            "id": 3048411067,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM61sw-7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3048411067/reactions"
            },
            "updated_at": "2025-07-08T11:20:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3048411067",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12857160?v=4",
                "events_url": "https://api.github.com/users/mrcjkb/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrcjkb/followers",
                "following_url": "https://api.github.com/users/mrcjkb/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrcjkb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrcjkb",
                "id": 12857160,
                "login": "mrcjkb",
                "node_id": "MDQ6VXNlcjEyODU3MTYw",
                "organizations_url": "https://api.github.com/users/mrcjkb/orgs",
                "received_events_url": "https://api.github.com/users/mrcjkb/received_events",
                "repos_url": "https://api.github.com/users/mrcjkb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrcjkb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrcjkb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrcjkb",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Or make a PR to add the support.\n> \n> My concern in that regard is that I doubt library maintainers that already maintain rockspecs will be eager to maintain multiple sources of truth for dependencies (I wouldn't).\n\nI think the same logic applies to Luarocks vs Lux specific manifest/\"packspec\" files.\n\n> That doesn't look like it's covered [by the packspec either](https://packspec.org/spec.html)?\n\n[It is](https://github.com/neovim/packspec/issues/41#issuecomment-1616017735) (first item in \"Closed questions\").\n\n> If it's needed at runtime, wouldn't autocommands be simpler?\n\nThere is no robust way for a plugin to know in advance when event for *their* plugin is triggered, because users can decide to name it as the want. The only way seems to be to have dedicated scripts inside plugin itself and for plugin manager to execute them when agreed (pre-update, post-update, etc.).",
            "created_at": "2025-07-08T11:25:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3048510108",
            "id": 3048510108,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM61tJKc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3048510108/reactions"
            },
            "updated_at": "2025-07-08T11:25:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3048510108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I think the same logic applies to Luarocks vs Lux specific manifest/\"packspec\" files.\n\nIt doesn't. Lux understands the Lua rockspec format and generates a Lua rockspec when publishing.\n\n> It is (first item in \"Closed questions\").\n\nAh, you're talking about npm-style lifecycle scrips, which are mostly used to fill gaps in the build process (due to npm's lack of a standardised build phase).\nThe rockspec's extendable `build` backend spec does actually solve the main use cases for those.\nEither way, [it's not as if the luarocks maintainers aren't open to extending the rockspec format](https://github.com/luarocks/luarocks/blob/b45502ab0f1b7e1a02313036f115c213c8ee0ef9/src/luarocks/type/rockspec.lua#L130) if the need for something new arises.\n\nOn a related note, if packspec is meant to be used outside of the Neovim ecosystem (which I believe it is?), I strongly advise against encouraging arbitrary script execution for security reasons.",
            "created_at": "2025-07-09T06:25:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3051291847",
            "id": 3051291847,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM613wTH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3051291847/reactions"
            },
            "updated_at": "2025-07-09T06:45:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3051291847",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12857160?v=4",
                "events_url": "https://api.github.com/users/mrcjkb/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrcjkb/followers",
                "following_url": "https://api.github.com/users/mrcjkb/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrcjkb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrcjkb",
                "id": 12857160,
                "login": "mrcjkb",
                "node_id": "MDQ6VXNlcjEyODU3MTYw",
                "organizations_url": "https://api.github.com/users/mrcjkb/orgs",
                "received_events_url": "https://api.github.com/users/mrcjkb/received_events",
                "repos_url": "https://api.github.com/users/mrcjkb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrcjkb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrcjkb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrcjkb",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> On a related note, if packspec is meant to be used outside of the Neovim ecosystem (which I believe it is?), I strongly advise against encouraging arbitrary script execution for security reasons.\n\nIf taken on face value, this should apply to 'plugin/' scripts also, as they are fully equivalent to \"arbitrary scripts\" that execute far more frequently than on install/update/delete. Then the only viable alternative seems to be explicit `setup()` calls...",
            "created_at": "2025-07-09T07:33:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3051502174",
            "id": 3051502174,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM614jpe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 4,
                "confused": 2,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3051502174/reactions"
            },
            "updated_at": "2025-07-09T07:33:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3051502174",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> If taken on face value, this should apply to 'plugin/' scripts also\n\nNote the clause, \"if packspec is meant to be used outside of the Neovim ecosystem\"...\nThe security concerns arise when a package manager that implements such a spec needs to install packages with super user privileges.",
            "created_at": "2025-07-09T07:44:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3051541706",
            "id": 3051541706,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM614tTK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3051541706/reactions"
            },
            "updated_at": "2025-07-09T07:44:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3051541706",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12857160?v=4",
                "events_url": "https://api.github.com/users/mrcjkb/events{/privacy}",
                "followers_url": "https://api.github.com/users/mrcjkb/followers",
                "following_url": "https://api.github.com/users/mrcjkb/following{/other_user}",
                "gists_url": "https://api.github.com/users/mrcjkb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mrcjkb",
                "id": 12857160,
                "login": "mrcjkb",
                "node_id": "MDQ6VXNlcjEyODU3MTYw",
                "organizations_url": "https://api.github.com/users/mrcjkb/orgs",
                "received_events_url": "https://api.github.com/users/mrcjkb/received_events",
                "repos_url": "https://api.github.com/users/mrcjkb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mrcjkb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mrcjkb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mrcjkb",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> if packspec is meant to be used outside of the Neovim ecosystem\n> The security concerns arise when a package manager that implements such a spec needs to install packages with super user privileges.\n\nThis is already off-topic, but while `packspec` can be used outside Neovim ecosystem, hooks would be [\"ecosystem-defined\"](https://github.com/neovim/packspec/issues/42). For example, in case of [Neovim](https://github.com/neovim/packspec/issues/41#issuecomment-1616017735), each hook is a path to Lua file. So in other ecosystems, they could be something totally different.",
            "created_at": "2025-07-09T13:29:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3052684013",
            "id": 3052684013,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM619ELt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3052684013/reactions"
            },
            "updated_at": "2025-07-09T18:36:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3052684013",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "+1 for Luarocs/rockspec support through Lux. Many plugin developers still don't have a rockspec, despite Rocks.nvim gaining popularity and Lazy.nvim supporting luarocks for a while now. If, in addition to a rockspec, developers would also have to separately add a packspec, which just repeats the contents of the rockspec in a different format, it would create unnecessary fragmentation and complication. I think it's better to add some sort of `[X-Nvim]` extension to the rockspec format for things like hooks then to create an entirely new format that will create even more fragmentation",
            "created_at": "2025-07-28T00:55:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/34778#issuecomment-3124869007",
            "id": 3124869007,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34778",
            "node_id": "IC_kwDOAPphoM66QbeP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3124869007/reactions"
            },
            "updated_at": "2025-07-28T01:16:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3124869007",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/66178592?v=4",
                "events_url": "https://api.github.com/users/flexagoon/events{/privacy}",
                "followers_url": "https://api.github.com/users/flexagoon/followers",
                "following_url": "https://api.github.com/users/flexagoon/following{/other_user}",
                "gists_url": "https://api.github.com/users/flexagoon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/flexagoon",
                "id": 66178592,
                "login": "flexagoon",
                "node_id": "MDQ6VXNlcjY2MTc4NTky",
                "organizations_url": "https://api.github.com/users/flexagoon/orgs",
                "received_events_url": "https://api.github.com/users/flexagoon/received_events",
                "repos_url": "https://api.github.com/users/flexagoon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/flexagoon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flexagoon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/flexagoon",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 16,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34778/comments",
    "created_at": "2025-07-04T13:26:29Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34778/events",
    "html_url": "https://github.com/neovim/neovim/issues/34778",
    "id": 3202749896,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "bfd4f2",
            "default": false,
            "description": "vim.pack, start/opt packages, 'packpath'",
            "id": 8889050758,
            "name": "packages",
            "node_id": "LA_kwDOAPphoM8AAAACEdQmhg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/packages"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34778/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6-5hXI",
    "number": 34778,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 9,
        "-1": 7,
        "confused": 0,
        "eyes": 3,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 19,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34778/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34778/timeline",
    "title": "Add `packspec` support to `vim.pack`",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-28T01:16:14Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34778",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}