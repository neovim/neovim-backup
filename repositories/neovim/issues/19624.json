{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "related: https://github.com/neovim/neovim/issues/11312\n\n## Problem\n\nThere's no builtin abstraction for:\n\n- Representing a task.\n    - Example: `vim.system()` returns its own ad-hoc \"task\" that can be \"awaited\" via `:wait()`.\n- Orchestrating \"pipelines\" (quasi monads?) of work (\"tasks\") and handling errors.\n    - Example: shell-like task chains: `vim.fs.files():filter(..):map(function(f) vim.fs.delete(f) end)`\n    - See also `vim.iter`.\n\n## Expected behavior\n\n- \"Task\" abstraction:\n    - Maximally leveraging Lua coroutines + libuv. Only add concepts (\"task\", \"promise\") if absolutely needed.\n    - Coroutines (or tasks that wrap coroutines) can be nested. ([ref](https://gregorias.github.io/posts/using-coroutines-in-neovim-lua/#addendum-whats-wrong-with-plenary-async))\n    - Util to create an awaitable task from \"normal\" functions (cf. \"promisify\"?).\n        - Don't want to call `await` everywhere, that is a horrible consequence of the JS async/await model. Instead consider Go's `go` for opt-in concurrency.\n        - Can e.g. `vim.system()` be \"promisified\" without its knowledge? Or could it handle differently when it detects that it's in a coroutine? So `vim.system()` would be synchronous normally, but `vim.async(vim.system, ...):wait()` would be asynchronous.\n            - See `cb_to_co()` from [this article](https://gregorias.github.io/posts/using-coroutines-in-neovim-lua/#callbackcoroutine-conversion).\n    - Document (or generalize) [\"coroutine to callback\"](https://gregorias.github.io/posts/using-coroutines-in-neovim-lua/#coroutine-to-callback-conversion).\n- Structured concurrency:\n    - `await_all`, `await_any` (pseudo-names). See JS [Promise.all()](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise/all).\n    - Tasks can be _canceled_.\n    - Results (and failures) can be _aggregated_. (Can't do this with `jobwait()`!)\n    - Failures/errors can be handled (possibly canceling the rest of the task tree).\n\n## Implementations\n\n- https://github.com/lewis6991/async.nvim\n- https://github.com/nvim-neotest/nvim-nio \"enables async I/O through higher level abstractions and utilities around coroutines\"\n- https://github.com/kevinhwang91/promise-async\n- https://github.com/ms-jpq/lua-async-await\n\n## Related\n\n- https://github.com/sourcegraph/conc\n- https://github.com/bitfield/script (example of \"pipeline\" interface)\n- https://gregorias.github.io/posts/using-coroutines-in-neovim-lua/\n\n### notes from [reddit discussion](https://old.reddit.com/r/neovim/comments/1g8lutp/coroutine_tutorial_for_neovim_lua/lt0rp9m/)\n\n> Briefly speaking, without cancellability, a structured concurrency API can and should be based on fire-and-forget coroutine functions (fafcf). Anything else would likely either be reinventing the wheel or running into a non-composable mess that is currently Plenary’s async.\n> \n> With pure fafcfs, you can have most of your requirements: ability to chain, start concurrent computations, wait for completion of arbitrary “fafcfs.” It’d be quite a expressive and elegant system.\n> \n> As you notice, what’s missing is cancellability. That would require creating a special protocol that fafcfs need to conform to.\n>\n> After briefly looking at [async.nvim](https://github.com/lewis6991/async.nvim), it looks like it’s trying to build concurrency by stepping through chunks, which is kind of what Plenary’s async is trying to do.\n> \n> Ideally, I’d like to try to achieve cancellability without resorting to reimplementing an event loop and a scheduler in Lua. Perhaps fafcfs with a special protocol for indicating that it shouldn’t proceed would be enough.\n> \n> I believe that Neovim/Lua can take design hints from Python. In this regard, Lua fafcfs are [Python coroutines](https://docs.python.org/3/library/asyncio-task.html#awaitables). They can be nested freely. If you want to a cancellable computation, you need to use [Tasks](https://docs.python.org/3/library/asyncio-task.html#creating-tasks), which builds upon coroutines to provide a richer interface.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I believe the gold standard is https://github.com/nvim-lua/plenary.nvim#plenaryasync, but @lewis6991 [rolled his own for GitSigns](https://github.com/lewis6991/gitsigns.nvim/pull/479). Either could conceivably be upstreamed if deemed useful enough.",
            "created_at": "2022-08-02T11:43:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1202374136",
            "id": 1202374136,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5HqsX4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1202374136/reactions"
            },
            "updated_at": "2022-08-02T11:45:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1202374136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For context here's the complete implementation Gitsigns uses:\r\n\r\n```lua\r\nlocal co = coroutine\r\n\r\nlocal async_thread = {\r\n   threads = {},\r\n}\r\n\r\nlocal function threadtostring(x)\r\n   if jit then\r\n      return string.format('%p', x)\r\n   else\r\n      return tostring(x):match('thread: (.*)')\r\n   end\r\nend\r\n\r\nfunction async_thread.running()\r\n   local thread = co.running()\r\n   local id = threadtostring(thread)\r\n   return async_thread.threads[id]\r\nend\r\n\r\nfunction async_thread.create(fn)\r\n   local thread = co.create(fn)\r\n   local id = threadtostring(thread)\r\n   async_thread.threads[id] = true\r\n   return thread\r\nend\r\n\r\nfunction async_thread.finished(x)\r\n   if co.status(x) == 'dead' then\r\n      local id = threadtostring(x)\r\n      async_thread.threads[id] = nil\r\n      return true\r\n   end\r\n   return false\r\nend\r\n\r\nlocal function execute(async_fn, ...)\r\n   local thread = async_thread.create(async_fn)\r\n\r\n   local function step(...)\r\n      local ret = { co.resume(thread, ...) }\r\n      local stat, err_or_fn, nargs = unpack(ret)\r\n\r\n      if not stat then\r\n         error(string.format(\"The coroutine failed with this message: %s\\n%s\",\r\n         err_or_fn, debug.traceback(thread)))\r\n      end\r\n\r\n      if async_thread.finished(thread) then\r\n         return\r\n      end\r\n\r\n      assert(type(err_or_fn) == \"function\", \"type error :: expected func\")\r\n\r\n      local ret_fn = err_or_fn\r\n      local args = { select(4, unpack(ret)) }\r\n      args[nargs] = step\r\n      ret_fn(unpack(args, 1, nargs))\r\n   end\r\n\r\n   step(...)\r\nend\r\n\r\nlocal M = {}\r\n\r\nfunction M.wrap(func, argc)\r\n   return function(...)\r\n      if not async_thread.running() then\r\n         return func(...)\r\n      end\r\n      return co.yield(func, argc, ...)\r\n   end\r\nend\r\n\r\nfunction M.void(func)\r\n   return function(...)\r\n      if async_thread.running() then\r\n         return func(...)\r\n      end\r\n      execute(func, ...)\r\n   end\r\nend\r\n\r\nM.scheduler = M.wrap(vim.schedule, 1)\r\n\r\nreturn M\r\n```\r\n\r\nI basically just copy and paste this for all my plugins now.",
            "created_at": "2022-08-02T12:11:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1202405058",
            "id": 1202405058,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Hqz7C",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1202405058/reactions"
            },
            "updated_at": "2022-08-02T12:15:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1202405058",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I basically just copy and paste this for all my plugins now.\r\n\r\nThat's a good sign. Does it support cancellation? How does error handling look? How does it look to aggregate results?",
            "created_at": "2022-08-02T12:23:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1202418200",
            "id": 1202418200,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Hq3IY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1202418200/reactions"
            },
            "updated_at": "2022-08-02T12:23:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1202418200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> That's a good sign. Does it support cancellation? How does error handling look? How does it look to aggregate results?\r\n\r\nIt doesn't support issuing out several coroutines with any kind of join, so there is nothing to cancel or aggregate, the 95% usecase is for use with sequential system commands (via `vim.loop.spawn`). We could implement that kind of stuff, I just haven't found a situation yet where I've really needed it.\r\n\r\n> How does error handling look?\r\n\r\nHere's an example of injecting `error(\"I'm an error\")` mid-way through `setup()` in Gitsigns:\r\n```\r\nError executing vim.schedule lua callback: ...e/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua:67: The coroutine failed with this message: ...im/site/p\r\nack/packer/start/gitsigns.nvim/lua/gitsigns.lua:429: I'm an error\r\nstack traceback:\r\n        [C]: in function 'error'\r\n        ...im/site/pack/packer/start/gitsigns.nvim/lua/gitsigns.lua:429: in function <...im/site/pack/packer/start/gitsigns.nvim/lua/gitsigns.lua:393>\r\nstack traceback:\r\n        [C]: in function 'error'\r\n        ...e/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua:67: in function <...e/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua:62>\r\n```\r\n\r\nIt just issues out both stacktraces: one from the application code, and one from the async lib. I've found it useful enough that I don't feel the need to improve it.\r\n\r\n",
            "created_at": "2022-08-02T12:39:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1202444414",
            "id": 1202444414,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Hq9h-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1202444414/reactions"
            },
            "updated_at": "2022-08-02T12:39:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1202444414",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think this would be a great addition to the stdlib. I've been playing around with async implementations as well, and I'd like to bring forward some topics that I think are worth consideration:\r\n\r\n- How to handle situations where the callback that resumes execution is being invoked more than once.\r\n- Should callback signatures be standardized to allow easy translation between async <-> callback-style invocations? (e.g. `fun(..., callback: fun (err: any?, result: any?))`) For example:\r\n\r\n  ```lua\r\n  -- callback style\r\n  vim.fs.find(\".git\", function (err, path)\r\n    -- ...\r\n  end)\r\n  \r\n  -- async style\r\n  local a = vim.async\r\n  local async_find = a.syncify(vim.fs.find) -- this could perhaps even be done automatically by vim.fs.find if it sees that no callback is passed as last arg\r\n  local ok, path_or_err = pcall(async_find, \".git\")\r\n  ```\r\n- How to handle nested coroutines? Should the async coroutine forward yields to parent coroutines, on what criterion?\r\n- Should you be able to retrieve the result of an async function from a non-async context, e.g. through a callback?\r\n- How to handle multiple return values across async/sync boundaries (`return val1, val2`)?\r\n- Perhaps too early to even think about but I wanted to surface the idea anyway: Should user scripts perhaps be executed in a \"global\" async coroutine context? This would allow direct access to async primitives without users having to explicitly create async constructs.",
            "created_at": "2022-08-03T13:11:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1203931615",
            "id": 1203931615,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Hwonf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1203931615/reactions"
            },
            "updated_at": "2022-08-03T13:11:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1203931615",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6705160?v=4",
                "events_url": "https://api.github.com/users/williamboman/events{/privacy}",
                "followers_url": "https://api.github.com/users/williamboman/followers",
                "following_url": "https://api.github.com/users/williamboman/following{/other_user}",
                "gists_url": "https://api.github.com/users/williamboman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/williamboman",
                "id": 6705160,
                "login": "williamboman",
                "node_id": "MDQ6VXNlcjY3MDUxNjA=",
                "organizations_url": "https://api.github.com/users/williamboman/orgs",
                "received_events_url": "https://api.github.com/users/williamboman/received_events",
                "repos_url": "https://api.github.com/users/williamboman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/williamboman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/williamboman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/williamboman",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> How to handle situations where the callback that resumes execution is being invoked more than once.\r\n\r\nA closure could be created that can be called only once.\r\n\r\n> `fun(..., callback: fun (err: any?, result: any?))`\r\n> How to handle multiple return values across async/sync boundaries (`return val1, val2`)?\r\n\r\nMaybe instead it could be `ok: boolean, results: any...`.\r\n\r\n> How to handle nested coroutines? Should the async coroutine forward yields to parent coroutines, on what criterion?\r\n\r\nMaybe I'm missing something, but it should always resume the caller?\r\n\r\nedit: Okay, I get what you mean now, you're asking about suspending a nested coroutine. I think both behaviors should be supported, the standard way of using `coroutine.yield` directly, but also a way of suspending the entire call stack. I think this could be done by yielding a special constant, based on which the parent coroutine would decide whether to suspend or not, until it hits the main thread.",
            "created_at": "2022-08-03T22:37:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1204552742",
            "id": 1204552742,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5HzAQm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1204552742/reactions"
            },
            "updated_at": "2022-08-04T00:26:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1204552742",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What are the current patterns for queuing promises in Lua, that are being used in the wild for Nvim plugins (and Nvim core itself)? Are these good enough? Do we need any sugar in the Nvim lua stdlib to encourage these patterns?\r\n\r\nIn some of my plugins I started using the pattern norcalli mentioned in https://github.com/neovim/neovim/issues/11312#issuecomment-548042444:\r\n\r\n```\r\nlocal function send_request_sync(method, params)\r\n\tlocal co = coroutine.running()\r\n\tsend_request(method, params, function(...) coroutine.resume(co, ...) end)\r\n\treturn coroutine.yield()\r\nend\r\n```\r\n\r\nand found that it's both simple and effective in avoiding callback nesting.\r\n\r\nI think if we were to add some async/await or promise abstraction it would help to formulate the problem first, to help ensure we're solving the right thing.\r\nE.g. I can see how functionality to race two or more operations, cancellation or waiting for multiple operations can be useful and the LSP stuff in neovim could probably benefit for some of it. But if all it does is add some sugar over the coroutine pattern above then I'd say it's not worth it.\r\n",
            "created_at": "2022-08-04T07:23:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1204867814",
            "id": 1204867814,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5H0NLm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1204867814/reactions"
            },
            "updated_at": "2022-08-04T07:23:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1204867814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Perhaps ideas and implementation from https://github.com/kevinhwang91/promise-async can be useful.",
            "created_at": "2022-08-04T12:52:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1205215956",
            "id": 1205215956,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5H1iLU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1205215956/reactions"
            },
            "updated_at": "2022-08-04T12:52:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1205215956",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9699804?v=4",
                "events_url": "https://api.github.com/users/muniter/events{/privacy}",
                "followers_url": "https://api.github.com/users/muniter/followers",
                "following_url": "https://api.github.com/users/muniter/following{/other_user}",
                "gists_url": "https://api.github.com/users/muniter/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/muniter",
                "id": 9699804,
                "login": "muniter",
                "node_id": "MDQ6VXNlcjk2OTk4MDQ=",
                "organizations_url": "https://api.github.com/users/muniter/orgs",
                "received_events_url": "https://api.github.com/users/muniter/received_events",
                "repos_url": "https://api.github.com/users/muniter/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/muniter/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/muniter/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/muniter",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I've read something similar about Javascript: [A Study on Solving Callbacks with JavaScript Generators](https://archive.jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators), hope it might help.",
            "created_at": "2022-08-07T09:12:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1207364423",
            "id": 1207364423,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5H9utH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207364423/reactions"
            },
            "updated_at": "2022-08-07T09:12:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207364423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/37866106?v=4",
                "events_url": "https://api.github.com/users/Chromosore/events{/privacy}",
                "followers_url": "https://api.github.com/users/Chromosore/followers",
                "following_url": "https://api.github.com/users/Chromosore/following{/other_user}",
                "gists_url": "https://api.github.com/users/Chromosore/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Chromosore",
                "id": 37866106,
                "login": "Chromosore",
                "node_id": "MDQ6VXNlcjM3ODY2MTA2",
                "organizations_url": "https://api.github.com/users/Chromosore/orgs",
                "received_events_url": "https://api.github.com/users/Chromosore/received_events",
                "repos_url": "https://api.github.com/users/Chromosore/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Chromosore/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Chromosore/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Chromosore",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I am also implementing async-await for my plugin development. (I plan to use it primarily for sequencing code related to key mapping.)\r\n\r\nCurrently, I have not written the Promise.all equivalent, but will be able to add it easily.\r\n\r\nhttps://github.com/hrsh7th/nvim-kit/blob/main/lua/___plugin_name___/Async/init.spec.lua#L27",
            "created_at": "2022-08-22T06:48:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1221922598",
            "id": 1221922598,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5I1Q8m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1221922598/reactions"
            },
            "updated_at": "2022-08-22T06:48:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1221922598",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think if we were to add some async/await or promise abstraction it would help to formulate the problem first, to help ensure we're solving the right thing.\r\n> E.g. I can see how functionality to race two or more operations, cancellation or waiting for multiple operations can be useful and the LSP stuff in neovim could probably benefit for some of it. But if all it does is add some sugar over the coroutine pattern above then I'd say it's not worth it.\r\n\r\n@mfussenegger Absolutely. If there are patterns we can document without adding sugar, that is definitely preferred. So to close this, we can document those patterns. Or both: maybe we only need sugar for \"race two or more operations, cancellation or waiting for multiple operations\".",
            "created_at": "2022-08-23T15:01:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1224200245",
            "id": 1224200245,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5I99A1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1224200245/reactions"
            },
            "updated_at": "2022-08-23T15:01:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1224200245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Using @mfussenegger suggestion in https://github.com/neovim/neovim/issues/19624#issuecomment-1204867814 I've come up with a very simple and lean implementation with some necessary safety check boilerplate:\r\n\r\n```lua\r\nlocal M = {}\r\n\r\nfunction M.wrap(func, argc)\r\n  return function(...)\r\n    local co = coroutine.running()\r\n    if not co then\r\n      error('wrapped functions must be called in a coroutine')\r\n    end\r\n\r\n    local args = {...}\r\n    args[argc] = function(...)\r\n      if co == coroutine.running() then\r\n        error('callback called in same coroutine as calling function')\r\n      end\r\n      coroutine.resume(co, ...)\r\n    end\r\n    func(unpack(args, 1, argc))\r\n    return coroutine.yield()\r\n  end\r\nend\r\n\r\nfunction M.void(func)\r\n  return function(...)\r\n    if coroutine.running() then\r\n      return func(...)\r\n    else\r\n      return coroutine.wrap(func)(...)\r\n    end\r\n  end\r\nend\r\n\r\nM.scheduler = M.wrap(vim.schedule, 1)\r\n\r\nreturn M\r\n```\r\n\r\nExample usage:\r\n\r\n```lua\r\nlocal function foo(x, cb)\r\n  vim.schedule(function()\r\n    cb(x + 1)\r\n  end)\r\nend\r\n\r\nlocal afoo = wrap(foo, 2)\r\n\r\nlocal bar = void(function(x)\r\n  local a = afoo(x)\r\n  print('Hello', a)\r\nend)\r\n\r\nbar(3)\r\n```\r\n\r\nOutputs `Hello 4`",
            "created_at": "2022-08-24T14:27:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1225802391",
            "id": 1225802391,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5JEEKX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225802391/reactions"
            },
            "updated_at": "2022-08-24T14:30:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225802391",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Just chiming in: `packer` has another async/await implementation based on https://github.com/ms-jpq/lua-async-await, but I consider it to be messy and would love to rip it out in favor of a stdlib alternative. It has limited support for interrupting a sequence of jobs and aggregating results, but could be improved in its API, robustness to errors, etc.",
            "created_at": "2022-09-01T20:06:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1234725872",
            "id": 1234725872,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5JmGvw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1234725872/reactions"
            },
            "updated_at": "2022-09-01T20:06:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1234725872",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3729908?v=4",
                "events_url": "https://api.github.com/users/wbthomason/events{/privacy}",
                "followers_url": "https://api.github.com/users/wbthomason/followers",
                "following_url": "https://api.github.com/users/wbthomason/following{/other_user}",
                "gists_url": "https://api.github.com/users/wbthomason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wbthomason",
                "id": 3729908,
                "login": "wbthomason",
                "node_id": "MDQ6VXNlcjM3Mjk5MDg=",
                "organizations_url": "https://api.github.com/users/wbthomason/orgs",
                "received_events_url": "https://api.github.com/users/wbthomason/received_events",
                "repos_url": "https://api.github.com/users/wbthomason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wbthomason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wbthomason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wbthomason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I have a lot of experience with this because I implemented the async library in plenary. The first iteration was basically a direct copy of https://github.com/ms-jpq/lua-async-await. It was not the best design because there is no point for async await with thunks. It felt like the extra thunks were just there to mirror the syntax from `javascript` or `rust`. `await` was literally implemented like this:\r\n```lua\r\nfunction await(f)\r\n  f(nil)\r\nend\r\n```\r\nIt was also much harder to pass async functions to higher order functions.\r\n\r\nThe new version did not need `async` or `await`, and you can call functions just like normal synchronous functions. Furthermore, higher order functions that expect synchronous functions just work like normal. There is also no extra syntax for for loops\r\n```lua\r\n-- now iterators just work like normal\r\nfor entry in readdir() do\r\nend\r\n\r\n-- instead of\r\nlocal iter = await(readdir())\r\nwhile true do\r\n  local entry = await(iter())\r\n  if entry == nil then break end\r\nend\r\n```\r\n\r\nBack then I didn't realize that this was basically delimited continuations. Now, I think we should just implement algebraic effects using one-shot delimited continuations which is described in this [paper]( http://logic.cs.tsukuba.ac.jp/~sat/pdf/tfp2020-postsymposium.pdf) and implemented in [eff.lua](https://github.com/Nymphium/eff.lua). The issue with just using coroutines for converting callback based functions is that you don't get to use coroutines for anything else. With algebraic effects, you can have other effects in addition to async effects. Algebraic effects can implement  `Reader` (local configuration), `Exceptions`, `State` (local state), `Generators`, and more. Also, algebraic effects separate the effects from interpretation. For example, imagine some program using the file system effect, log effect, and read effect:\r\n\r\n```lua\r\nlocal handle = handler {\r\n  val = function(v) return v end,\r\n  [Log] = function(k, arg)\r\n    print(arg)\r\n    return k()\r\n  end,\r\n  [ReadFile] = function(k, path)\r\n    return k(fs.read_file(path))\r\n  end,\r\n  [Read] = function(k)\r\n    return k(config)\r\n  end\r\n}\r\nhandle(my_program)\r\n```\r\nIf you wanted to test your functions, you can change the interpretation to not use IO.\r\n```lua\r\nlocal vfs = {my_file = \"asdfasdf\", another_file = \"adfadsfdf\"}\r\nlocal logs = {}\r\n\r\n-- handle without IO!\r\nlocal handle = handler {\r\n  val = function(v) return v end,\r\n  [Log] = function(k, arg)\r\n    table.insert(logs, arg)\r\n    return k()\r\n  end,\r\n  [ReadFile] = function(k, path)\r\n    return k(vfs[path])\r\n  end,\r\n  [Read] = function(k)\r\n    return k(config)\r\n  end\r\n}\r\n```\r\nAsync could be implemented like this:\r\n```lua\r\nlocal handle = handler {\r\n  val = callback,\r\n  [Async] = function(k, fn, ...)\r\n    fn(k, ...)\r\n  end\r\n}\r\n```\r\nExceptions:\r\n```lua\r\nlocal handle = handler {\r\n  val = function(v) return v end,\r\n  [Exception] = function(k, e)\r\n    return e\r\n  end,\r\n}\r\n```\r\n",
            "created_at": "2022-10-16T22:38:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1280073248",
            "id": 1280073248,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5MTF4g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 3,
                "heart": 7,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 12,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1280073248/reactions"
            },
            "updated_at": "2022-10-16T22:38:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1280073248",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I implemented `AsyncTask` (which is almost like the JavaScript Promises interface, but always synchronous if possible).\r\n(The `always synchronous if possible` is needed to support feedkeys handling.)\r\n\r\nIf neovim core supports async-await, I'm wondering if neovim should introduce promsie like async primitives or not.\r\n\r\n- async-await\r\n    - https://github.com/hrsh7th/nvim-kit/blob/main/lua/___kit___/kit/Async/init.lua\r\n- Keymap module\r\n    - https://github.com/hrsh7th/nvim-kit/blob/main/lua/___kit___/kit/Vim/Keymap.spec.lua#L28\r\n- IO module\r\n    - https://github.com/hrsh7th/nvim-kit/blob/main/lua/___kit___/kit/IO/init.lua#L114\r\n- Convert callback style to Promise style\r\n    - https://github.com/hrsh7th/nvim-kit/blob/main/lua/___kit___/kit/IO/init.lua#L54",
            "created_at": "2022-12-02T04:13:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1334742185",
            "id": 1334742185,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Pjoyp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1334742185/reactions"
            },
            "updated_at": "2022-12-02T04:14:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1334742185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I found the interesting PR.\r\nhttps://github.com/luvit/luv/pull/618",
            "created_at": "2022-12-03T02:16:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1336015190",
            "id": 1336015190,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5PoflW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1336015190/reactions"
            },
            "updated_at": "2022-12-03T02:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1336015190",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@oberblastmeister I've taken a look at eff.lua, and it appears to be a completely generalized version of the current async library we're using. If you take eff.lua and the async implementation you mentioned and refactor enough, you get to the same async lib I implemented in gitsigns.\r\n\r\n It's quite interesting, but I'm not sure if we need something as generalized as that. The main need is for an async lib to better utilize libuv and all of it's callback based functions.\r\n\r\n> The issue with just using coroutines for converting callback based functions is that you don't get to use coroutines for anything else.\r\n\r\neff.lua uses coroutines in the exact same way the current async lib does, so not sure this is true.\r\n\r\n> I implemented `AsyncTask` (which is almost like the JavaScript Promises interface, but always synchronous if possible). (The `always synchronous if possible` is needed to support feedkeys handling.)\r\n> \r\n> If neovim core supports async-await, I'm wondering if neovim should introduce promsie like async primitives or not.\r\n> \r\n>     * async-await\r\n>       \r\n>       * [hrsh7th/nvim-kit@`main`/lua/___kit___/kit/Async/init.lua](https://github.com/hrsh7th/nvim-kit/blob/main/lua/___kit___/kit/Async/init.lua?rgh-link-date=2022-12-02T04%3A13%3A30Z)\r\n> \r\n>     * Keymap module\r\n>       \r\n>       * [hrsh7th/nvim-kit@`main`/lua/___kit___/kit/Vim/Keymap.spec.lua#L28](https://github.com/hrsh7th/nvim-kit/blob/main/lua/___kit___/kit/Vim/Keymap.spec.lua?rgh-link-date=2022-12-02T04%3A13%3A30Z#L28)\r\n> \r\n>     * IO module\r\n>       \r\n>       * [hrsh7th/nvim-kit@`main`/lua/___kit___/kit/IO/init.lua#L114](https://github.com/hrsh7th/nvim-kit/blob/main/lua/___kit___/kit/IO/init.lua?rgh-link-date=2022-12-02T04%3A13%3A30Z#L114)\r\n> \r\n>     * Convert callback style to Promise style\r\n>       \r\n>       * [hrsh7th/nvim-kit@`main`/lua/___kit___/kit/IO/init.lua#L54](https://github.com/hrsh7th/nvim-kit/blob/main/lua/___kit___/kit/IO/init.lua?rgh-link-date=2022-12-02T04%3A13%3A30Z#L54)\r\n\r\nIt looks like this implementation [creates a new coroutine](https://github.com/hrsh7th/nvim-kit/blob/main/lua/___kit___/kit/Async/init.lua#L23) for *every* async function. This is a big drawback compared to the plenary/gitsigns implementations that uses a single coroutine for each context. It also requires `await` which isn't needed in the other implementations.\r\n\r\nI've created https://github.com/lewis6991/async.nvim which I'm using as a reference for all the plugins I use async in. The library is small enough that (for now) it's ok to just vendor directly in plugins without needing it as a depedency.",
            "created_at": "2022-12-03T10:52:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1336133807",
            "id": 1336133807,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Po8iv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1336133807/reactions"
            },
            "updated_at": "2022-12-03T14:46:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1336133807",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes. My implementation creates a coroutine for each asynchronous operation.\r\nI did not think this would affect performance. I will investigate.\r\n\r\nI also wonder that \"it is the drawback that requires the call to await\".\r\n\r\nBecause I believe the difference is where and when to yield asynchronous primitives.\r\n\r\nFor example, look at the following example\r\n\r\n```lua\r\n-- Return just AsyncTask\r\nlocal function timeout_async(ms)\r\n  return AsyncTask.new(function(resolve))\r\n    vim.defer_fn(resolve, ms)\r\n  end)\r\nend\r\n\r\n-- Return AsyncTask if it is running in the main coroutine, otherwise yield.\r\nlocal function timeout(ms)\r\n  local task = timeout_async(ms)\r\n  if vim.async.in_context() then\r\n    return task:await()\r\n  end\r\n  return task\r\nend\r\n\r\nvim.async.run(function())\r\n  local s = uv.now()\r\n  timeout(200) -- does not need to `await` call.\r\n   assert.is_true(math.abs(uv.now() - s - 200) < 10)\r\nend)\r\n```\r\n\r\nIn this example, `timeout_async` just returns an AsyncTask, but `timeout` delegates resolution to any async coroutine context.\r\n\r\nI think it is a difficult question as to whether we should choose Promise, thunk, or another means as an asynchronous primitive.\r\nHowever, it seems natural to me to introduce some kind of asynchronous primitive.\r\n\r\nTo me, the Promise style  seem like a good choice, since there are many JavaScript users and they are easy to understand.\r\nAlso, it is easy to convert parallel waits instead of serial ones. e.g. `await Promise.all(tasks)`\r\n\r\nTranslated with www.DeepL.com/Translator (free version)",
            "created_at": "2022-12-03T15:06:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1336178281",
            "id": 1336178281,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5PpHZp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1336178281/reactions"
            },
            "updated_at": "2022-12-03T17:12:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1336178281",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the Promise style seem like a good choice, since there are many JavaScript users and they are easy to understand.\r\n\r\nComforting javascript users is not a goal, and should not be factored into any of the designs here. As a typescript/javascript user myself, I'm very skeptical that async/await is a good interface. We should focus on what feels right for a Lua + Nvim.\r\n\r\n> The main need is for an async lib to better utilize libuv and all of it's callback based functions.\r\n\r\nSince the introduce of `jobstart()`, long before libuv was exposed. Network tasks like LSP are another common use-case.\r\n\r\nSounds like https://github.com/lewis6991/async.nvim is informed by a lot of previous work, which is a good sign! Does it provide a way to cancel tasks, handle errors/cancellations, and aggregate results?",
            "created_at": "2022-12-04T01:51:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1336298582",
            "id": 1336298582,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5PpkxW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1336298582/reactions"
            },
            "updated_at": "2022-12-04T01:53:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1336298582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> As a typescript/javascript user myself, I'm very skeptical that async/await is a good interface. We should focus on what feels right for a Lua + Nvim.\r\n\r\nI've been using plenary's async module with neotest for a while now and have found the lack of an async/await syntax to be much more fitting with Lua's simplistic style of programming. IMO adding async/await would be clunky. \r\n\r\n> Sounds like https://github.com/lewis6991/async.nvim is informed by a lot of previous work, which is a good sign! Does it provide a way to cancel tasks, handle errors/cancellations, and aggregate results?\r\n\r\nI wanted to introduce the async usage to nvim-dap-ui which is similar to LSP, where it's currently using a lot of callbacks. I worked off of @lewis6991's implementation and added the ability to cancel tasks and handle errors rather than them just being raised to the user. His implementation already covers aggregating results. It's very similar to Python's asyncio Task class just because I didn't want to have to design the API much. Also added some flow control primitives.\r\n\r\nImplementation here https://github.com/rcarriga/nvim-dap-ui/blob/feat/new-api/lua/dapui/async/base.lua and some usage in tests https://github.com/rcarriga/nvim-dap-ui/blob/feat/new-api/tests/unit/async/base_spec.lua. Excuse the long namespaced names, it's just for generating documentation.",
            "created_at": "2022-12-30T18:21:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1368041312",
            "id": 1368041312,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Riqdg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1368041312/reactions"
            },
            "updated_at": "2022-12-30T18:21:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1368041312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thought I'd update as I've been having a bit of fun with this. I've done a fair bit of refactoring and adding of features in the last few days.\r\n\r\nThe main features are currently:\r\n1. Handling results and errors of [tasks](https://github.com/rcarriga/nvim-dap-ui/blob/feat/new-api/lua/dapui/async/tasks.lua) along with cancelling.\r\n2. Helper functions for coordinating tasks, including gathering results from a list of tasks and getting the result of the first task to complete (and cancelling the others).\r\n3. Async versions of many libuv functions, pretty much the same way plenary does it with the added bonus of all of the functions being typed with emmylua annotations so users will have full type inference.\r\n4. Creating a [fully documented and typed LSP client interface](https://github.com/rcarriga/nvim-dap-ui/blob/feat/new-api/lua/dapui/async/lsp-types.lua) which is generated by a script based off of the [LSP spec meta model](https://github.com/microsoft/vscode-languageserver-node/blob/main/protocol/metaModel.json)  and then implemented very simply with some metatables [here](https://github.com/rcarriga/nvim-dap-ui/blob/feat/new-api/lua/dapui/async/lsp.lua). \r\n5. Async primitives (queues, events and semaphores) which are often useful in async code, again based off of Python's asyncio modules.\r\n\r\nNot sure if it's the direction core would want to go with an async library, (e.g. the LSP client but I was doing something similar for the DAP specification and LSP was mentioned as a key reason for the async usage so thought I'd slap something together for it). I think it does demonstrate the advantages of a single library  by implementing broadly useful features and providing a stable, tested solution for async that can be used by anybody.\r\n\r\nHere is some sample usage of the LSP client. Open the script in the nvim-dap-ui branch to see the type checking/documentation with Lua LSP\r\n```lua\r\nlocal async = require(\"dapui\").async\r\n\r\nasync\r\n  .run(function()\r\n    local client = async.lsp.client(2)\r\n\r\n    -- Notifications usage\r\n    client.notify.textDocument_willSave({\r\n      reason = \"3\",\r\n      textDocument = {\r\n        uri = vim.uri_from_bufnr(0),\r\n      },\r\n    })\r\n\r\n    -- Request usage\r\n    local symbols = client.request.textDocument_documentSymbol(0, {\r\n      textDocument = { uri = vim.uri_from_bufnr(0) },\r\n    }, { timeout = 1000 })\r\n\r\n    return symbols\r\n  end)\r\n  .add_callback(function(task)\r\n    if task.error() then\r\n      vim.schedule_wrap(error)(task.error())\r\n    else\r\n      print(vim.inspect(task.result()))\r\n    end\r\n  end)\r\n```",
            "created_at": "2023-01-03T22:22:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370284512",
            "id": 1370284512,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RrOHg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370284512/reactions"
            },
            "updated_at": "2023-01-03T22:24:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370284512",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "What is the purpose of `add_callback`. Why can't that code be appended to the end of the async function?",
            "created_at": "2023-01-03T22:36:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370294507",
            "id": 1370294507,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RrQjr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370294507/reactions"
            },
            "updated_at": "2023-01-03T22:36:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370294507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "The `add_callback` usage is very arbitrary here. It's just to show result/error handling. I'd imagine the most common use case would be just for error handling. `add_callback` would be preferred over just wrapping everything in `pcall` because `pcall` won't catch errors outside of the coroutine such as cancellation.",
            "created_at": "2023-01-04T08:39:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370623263",
            "id": 1370623263,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Rsg0f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370623263/reactions"
            },
            "updated_at": "2023-01-04T08:39:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370623263",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "is `add_callback` more commonly called `then` ?",
            "created_at": "2023-01-04T08:51:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370632829",
            "id": 1370632829,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RsjJ9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370632829/reactions"
            },
            "updated_at": "2023-01-04T08:51:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370632829",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Ah yes that's true. Just named it based off of Python's [`add_done_callback`](https://docs.python.org/3.9/library/asyncio-task.html#asyncio.Task.add_done_callback), but I'd definitely prefer `then` :sweat_smile: \r\n\r\nEdit: One key difference though is that this doesn't return a new task, so you can't chain them together like JS Promises",
            "created_at": "2023-01-04T09:00:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370642416",
            "id": 1370642416,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Rslfw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370642416/reactions"
            },
            "updated_at": "2023-01-04T09:12:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370642416",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Edit: One key difference though is that this doesn't return a new task, so you can't chain them together like JS Promises\r\n\r\nany reason we wouldn't want that?",
            "created_at": "2023-01-04T09:44:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370699267",
            "id": 1370699267,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RszYD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370699267/reactions"
            },
            "updated_at": "2023-01-04T09:44:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370699267",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't know about @justinmk thoughts, but I would like any implementation included in core to be fairly lean and minimal.\r\n\r\nFor the features I have focused on, this includes:\r\n- [functions](https://github.com/lewis6991/async.nvim/blob/9bd4cbb69af3397b432c8274c36d30598b494c16/lua/async.lua#L61) for creating async contexts\r\n- [functions](https://github.com/lewis6991/async.nvim/blob/9bd4cbb69af3397b432c8274c36d30598b494c16/lua/async.lua#L89) for creating async functions from callback style functions (libuv)\r\n- [functions](https://github.com/lewis6991/async.nvim/blob/9bd4cbb69af3397b432c8274c36d30598b494c16/lua/async.lua#L104) for interleaving execution of multiple async functions (and aggregate the results).\r\n- Allow async functions to fully interact with non-async functions via passing arguments and returning results.\r\n- [Allow](https://github.com/lewis6991/async.nvim/blob/9bd4cbb69af3397b432c8274c36d30598b494c16/lua/async.lua#L89) async functions to run in a protected mode (like `pcall`) [WIP]\r\n- Overall, async functions appearing like normal functions as much as possible.\r\n\r\nAnd excludes:\r\n- treating async functions like first class objects (tasks with methods)\r\n- job cancellation: this can be done by providing custom callbacks to libuv functions instead of wrapping them directly\r\n- chaining: just create a parent async function instead\r\n\r\nMaybe we can revisit adding more advanced things in the future, but for now I think we should consider a minimum viable product that covers 95% of usecases with the least complexity.\r\n",
            "created_at": "2023-01-04T10:03:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370719216",
            "id": 1370719216,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Rs4Pw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370719216/reactions"
            },
            "updated_at": "2023-01-04T10:04:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370719216",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> any reason we wouldn't want that?\r\n\r\nNot particularly but I suppose the question would also be would we want it? Because we're only creating task objects for the top level async contexts instead of all async functions, I'm not sure there is a use case for chaining tasks. Happy to be wrong though! \r\n\r\n> I don't know about @justinmk thoughts, but I would like any implementation included in core to be fairly lean and minimal.\r\n\r\nTotally makes sense, for core I think just getting a single implementation that can be built upon by plugins would be the minimal goal so that there is no issue mixing async plugins. After that it's a lot more subjective and could be done in a plugin. There is some work going on to get common dependencies like plenary added to rockspec so that users won't even have to specify the dependencies (For example https://github.com/nvim-neotest/neotest/pull/185) which would make keeping most of this outside core even more logical.\r\n\r\n> - treating async functions like first class objects (tasks with methods)\r\n> - job cancellation: this can be done by providing custom callbacks to libuv functions instead of wrapping them directly\r\n\r\nI would question these exclusions. The task objects don't represent an async function but an entire async context (i.e. a running coroutine). Implementing error handling and cancelling outside of the core implementation reliably sounds like it would be difficult without manually wrapping async functions everywhere or users coupling their code to the core implementation (by using the coroutines directly) but I could definitely be missing something obvious.\r\n\r\nThe task objects are only some fairly minor changes over your base implementation. To me at least, they don't add much complexity in comparison to the payoff of being able to cancel, handle errors and get the traceback (useful for hung tasks).",
            "created_at": "2023-01-04T10:46:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370765563",
            "id": 1370765563,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RtDj7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370765563/reactions"
            },
            "updated_at": "2023-01-04T10:46:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370765563",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I would question these exclusions. The task objects don't represent an async function but an entire async context (i.e. a running coroutine). Implementing error handling and cancelling outside of the core implementation reliably sounds like it would be difficult without manually wrapping async functions everywhere or users coupling their code to the core implementation (by using the coroutines directly) but I could definitely be missing something obvious.\r\n\r\nMy opinion is completely based on the fact I've never needed these features. If I did, my instinct would be to construct things so I can get access to the underlying uv handle so I can explicitly call `close` to kill any jobs which may or may not call an exit callback. Or just not use the async lib at all. At the end of the day, the main motivation here is just to eliminate \"callback-hell\", but sometimes it isn't the worst solution depending on what you're trying to do.\r\n\r\n> The task objects are only some fairly minor changes over your base implementation. To me at least, they don't add much complexity in comparison to the payoff of being able to cancel, handle errors and get the traceback (useful for hung tasks).\r\n\r\nIf that's the case, then we can definitely consider them. (EDIT: ref https://github.com/rcarriga/nvim-dap-ui/blob/feat/new-api/lua/dapui/async/tasks.lua)",
            "created_at": "2023-01-04T11:24:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370803961",
            "id": 1370803961,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RtM75",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370803961/reactions"
            },
            "updated_at": "2023-01-04T11:30:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370803961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Implementing error handling and cancelling outside of the core implementation reliably sounds like it would be difficult without manually wrapping async functions everywhere or users coupling their code to the core implementation\r\n\r\nyeah, I see error handling and cancel as requirements. Doing that manually is unpleasant, it's one of the key features of a good concurrency interface.",
            "created_at": "2023-01-04T11:28:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370808252",
            "id": 1370808252,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RtN-8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370808252/reactions"
            },
            "updated_at": "2023-01-04T11:28:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370808252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Error handling is a slippery slope. We don't want to be implementing our own exception framework by setting a precedent here. A `pcall` like interface should be good enough.\r\n\r\nLooking at the implementation, cancel looks totally reasonable. Not sure about the 8 other methods though, quite OOP.",
            "created_at": "2023-01-04T11:36:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370819219",
            "id": 1370819219,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RtQqT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370819219/reactions"
            },
            "updated_at": "2023-01-04T11:36:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370819219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Looking at the implementation, cancel looks totally reasonable. Not sure about the 8 other methods though, quite OOP.\r\n\r\nYeah as I said the interface was basically copying python so OOP is right :sweat_smile:  It could be trimmed quite a bit if we wanted. For example something more `pcall`-like could be:\r\n```lua\r\n---@class Task\r\n---@field cancel fun(): nil Cancels the task\r\n---@field trace fun(): string|nil Get the current stack trace of the task (if running)\r\n\r\nlocal task = async.run(function() end, function(success, ...)\r\n  if not success then\r\n    local err, trace = ...\r\n    print(err .. \"\\n\" .. trace)\r\n    return\r\n  end\r\n  local result = ...\r\n  -- Do something with result\r\nend)\r\n```\r\nAdding the trace as an extra argument because once the coroutine dies, the `trace` function won't work.\r\n\r\nWe could even just return the cancel function directly but returning a table leaves it more open to extending in future. I think the trace function is useful. For example I'm using it in the tests to get useful tracebacks on timeouts which plenary's async library doesn't provide.\r\n\r\nAlso the above loses the ability to add multiple callbacks but not sure if it'd really be needed (I've not needed it so far)",
            "created_at": "2023-01-04T11:59:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370839683",
            "id": 1370839683,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RtVqD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370839683/reactions"
            },
            "updated_at": "2023-01-04T12:00:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370839683",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmm, I would try and tweak this to something like:\r\n\r\n```lua\r\nlocal async_fun = async.run(function() end)\r\n\r\n-- Called in an async context\r\nlocal success, result1_or_err, result2_or_trace = async.pcall(async_fun)\r\n-- You won't always care about the trace, or maybe not even the error so the typical use is\r\nlocal success, result = async.pcall(async_fun)  -- just like pcall\r\n\r\n-- Called outside an async context\r\nasync.pcall(async_fun, function(success, ...)\r\n  if not success then\r\n    local err, trace = ...\r\n    print(err .. \"\\n\" .. trace)\r\n    return\r\n  end\r\n  local result = ...\r\n  -- Do something with result\r\nend)\r\n```\r\n\r\nThat way a lot of these optional features are more opt-in and don't noise up the typical use case.",
            "created_at": "2023-01-04T13:06:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370908518",
            "id": 1370908518,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Rtmdm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370908518/reactions"
            },
            "updated_at": "2023-01-05T11:33:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370908518",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">> The issue with just using coroutines for converting callback based functions is that you don't get to use coroutines for anything else.\r\n\r\n> eff.lua uses coroutines in the exact same way the current async lib does, so not sure this is true.\r\n\r\n@lewis6991 I was just commenting about how you need some more logic if you want to use coroutines for anything other than async, for example generators.",
            "created_at": "2023-01-04T13:18:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370919783",
            "id": 1370919783,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RtpNn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370919783/reactions"
            },
            "updated_at": "2023-01-04T13:18:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370919783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think @rcarriga implementation covers this by keeping track of what coroutines are used for async.",
            "created_at": "2023-01-04T13:22:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370924043",
            "id": 1370924043,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RtqQL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370924043/reactions"
            },
            "updated_at": "2023-01-04T13:22:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370924043",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If you yield in a handler for generators, all your async stuff will be caught. Likewise, if you yield in a handler for async, all your generator stuff will be caught. I don't see how the implementation solves this. But, it depends on if we need support for other effects. If we only need async, then it is fine as is.",
            "created_at": "2023-01-04T14:08:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370973990",
            "id": 1370973990,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Rt2cm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370973990/reactions"
            },
            "updated_at": "2023-01-04T14:08:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370973990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If the generator is contained completely within an async function, it should work just fine as the yield will yield to the generators coroutine right? You can't however interleave them, this is just a limitation of using coroutines for async.",
            "created_at": "2023-01-04T14:12:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1370978678",
            "id": 1370978678,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Rt3l2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370978678/reactions"
            },
            "updated_at": "2023-01-04T14:45:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1370978678",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That is correct. ",
            "created_at": "2023-01-04T14:39:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1371011188",
            "id": 1371011188,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Rt_h0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1371011188/reactions"
            },
            "updated_at": "2023-01-04T14:39:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1371011188",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Just sharing my thoughts for this discussion.\r\n\r\nTo be upfront, I'm not a stickler for the explicit async-await style of JavaScript.\r\nBut I think it's a safe and understandable way.\r\n\r\nFor example, gitsigns.nvim case.\r\n\r\n[diff.tl](https://github.com/lewis6991/gitsigns.nvim/blob/main/teal/gitsigns/diff.tl#L4) looks like a normal function.\r\nBut in fact, it must be executed in an async-context, or else an error will be occur.\r\nThe reason is that `require('gitsigns.diff_int').run_diff` is an async-function and it's called in sync-style.\r\n\r\nIf we choose the `explicit await` style, the diff.tl will be the following form.\r\n\r\n```lua\r\nreturn function(a: {string}, b: {string}, linematch: boolean): {Hunk}\r\n  local diff_opts = config.diff_opts\r\n  local f: function({string}, {string}, string, boolean, integer): {Hunk}\r\n  if diff_opts.internal then\r\n    f = require('gitsigns.diff_int').run_diff\r\n  else\r\n    f = require('gitsigns.diff_ext').run_diff\r\n  end\r\n\r\n  local linematch0: integer\r\n  if linematch ~= false then\r\n    linematch0 = diff_opts.linematch\r\n  end\r\n  return f(a, b, diff_opts.algorithm, diff_opts.indent_heuristic, linematch0):await() -- HERE!\r\nend\r\n```\r\n\r\nIn this case, We are able to notice that `await is executed without async-context`.\r\nThis code still make error if the user that uses this function doesn't create async-context.\r\n\r\nSo I think it more readable to explicitly create the async-context at the point of the call when to use `await`.\r\n\r\n```lua\r\nreturn function(a: {string}, b: {string}, linematch: boolean): {Hunk}\r\n  return async.run(function() -- HERE!\r\n    local diff_opts = config.diff_opts\r\n    local f: function({string}, {string}, string, boolean, integer): {Hunk}\r\n    if diff_opts.internal then\r\n      f = require('gitsigns.diff_int').run_diff\r\n    else\r\n      f = require('gitsigns.diff_ext').run_diff\r\n    end\r\n\r\n    local linematch0: integer\r\n    if linematch ~= false then\r\n      linematch0 = diff_opts.linematch\r\n    end\r\n    return f(a, b, diff_opts.algorithm, diff_opts.indent_heuristic, linematch0):await() -- AND HERE!\r\n  end)\r\nend\r\n````\r\n\r\nIf we adopt this approach, `async.run` must return some async-primitive (like Promise).\r\nOtherwise, we will not be able to receive the result of executing this function in a sync-context.\r\n\r\nAlthough, it's still the reasonable decision that the user must create async-context if they call async-function.\r\n\r\n--- Edit\r\n\r\nOr, it can be a solution that the `async.run` accept a callback without returning the Promise.",
            "created_at": "2023-01-05T06:32:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1371834228",
            "id": 1371834228,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RxId0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1371834228/reactions"
            },
            "updated_at": "2023-01-05T12:11:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1371834228",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is the same [concern](https://github.com/nvim-lua/plenary.nvim/pull/148#discussion_r638916337) I shared when the 2nd version of plenary's async lib was being worked on. The resolution was that we should just be more strict on naming conventions and/or annotate the code better with things like `-- @async`.\r\n\r\nAdmittedly this isn't something I've been very strict with in Gitsigns, but mainly because almost everything needs to run in an async context as it runs jobs all over the place. In some places I've started adding `-- @async`.\r\n\r\nIn practice, it's not very different from things like `api-fast` or `textlock` which are in essence just other forms of context.",
            "created_at": "2023-01-05T09:50:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1371997984",
            "id": 1371997984,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Rxwcg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1371997984/reactions"
            },
            "updated_at": "2023-01-05T09:50:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1371997984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That was it.\r\n\r\nSimilar to the need to properly handle textlock and fast-event contexts. It's insightful.\r\n\r\nI agree that some sort of naming convention or having a dedicated place for async-functions might be a solution. (e.g.: vim.fs.async.open, vim.async.fs.open)\r\n\r\nIt simply became a matter of decision rather than problem for me.",
            "created_at": "2023-01-05T10:32:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372043308",
            "id": 1372043308,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Rx7gs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372043308/reactions"
            },
            "updated_at": "2023-01-05T10:36:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372043308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Lots of discussion here so bit of an info dump, apologies.\r\n\r\n> We could even just return the cancel function directly but returning a table leaves it more open to extending in future.\r\n\r\nNot sure what I was thinking here when I said this. We can just return a task ID and provide module level functions for the cancelling etc, which would probably fit much more with the rest of core's APIs.\r\n\r\n```lua\r\nlocal task_id = async.run(function() end)\r\nasync.cancel(task_id)\r\n```\r\n\r\n---\r\n\r\n\r\n> Hmm, I would try and tweak this to something like:\r\n\r\nI'm not sure overloading a `pcall` function would make the most sense. There's a a couple of points that stick out to me:\r\nPassing a task to pcall is a bit deceptive because the task is already running. It would also add a fair bit of boilerplate if making several calls and when adding arguments\r\n\r\n```lua\r\nlocal success, result1 = async.pcall(async.run(async_func_1))\r\n\r\nlocal success, result2 = async.pcall(async.run(function()\r\n  async_func_2(arg1)\r\nend))\r\n\r\nlocal function proxying_func(...)\r\n  local args = {...}\r\n  local success, result = async.pcall(async.run(function()\r\n    async_func_3(unpack(args))\r\n  end))\r\nend\r\n```\r\n\r\nIf we just pass async functions directly, which would be common in async contexts then we have to decide how to handle arguments\r\n\r\nWe could allow passing arguments\r\n```lua\r\nlocal success, result1 = async.pcall(async_func_1)\r\n\r\nlocal success, result2 = async.pcall(async_func_2, arg1)\r\n\r\nlocal function proxying_func(...)\r\n  local success, result = async.pcall(async_func_3, ...)\r\nend\r\n```\r\n\r\nWhich is great but if we want to allow calling it in a non async context then we'd either have to require the number of arguments to be provided or provide the callback before the arguments\r\n\r\n```lua\r\n-- Provide number of arguments\r\nasync.pcall(async_func_1, 0, function(success, result))\r\n    ...\r\nend)\r\n\r\nasync.pcall(async_func_2, 1, arg1, function(success ,result)\r\n    ...\r\nend)\r\n\r\n-- Provide callback before args\r\nasync.pcall(async_func_1, function(success, result))\r\n    ...\r\nend)\r\n\r\nasync.pcall(async_func_2, function(success ,result)\r\n    ...\r\nend, arg1)\r\n```\r\n\r\nBoth of which require changing the type signature in IMO a clunky way that would not play well with the LSP. Also might lead to some surprising behaviour when calling from an async context but trying to provide a callback.\r\n\r\nSorry to be so verbose on this, just wanted to illustrate my thoughts. I think keeping `pcall` as an async only function makes the API much simpler.\r\n\r\n---\r\n\r\n> The resolution was that we should just be more strict on naming conventions and/or annotate the code better with things like -- @async\r\n\r\nWill also add that the Lua LSP has an inline hint for `await` when calling functions marked as `async` so users can use that to see awaits easily. When https://github.com/neovim/neovim/pull/20130 is merged, it'll be an even better experience as they can be inline.",
            "created_at": "2023-01-05T11:18:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372090083",
            "id": 1372090083,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RyG7j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372090083/reactions"
            },
            "updated_at": "2023-01-05T11:18:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372090083",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm not sure overloading a pcall function would make the most sense. \r\n\r\nI never suggested this. I suggested defining a specific `async.pcall` function that specificly handles the context for protected calls.\r\n\r\n> We could allow passing arguments\r\n\r\nYes, we absolutely should. I kind of assumed this.\r\n\r\n> If we just pass async functions directly, which would be common in async contexts then we have to decide how to handle arguments\r\n\r\nThis is exactly what I meant. Sorry for not being clearer, I've edited my comment. I don't use anything like `async.run` and I wrap every single function, for me it's either `async.void` or `async.sync` (bad name I know).\r\n\r\n> Which is great but if we want to allow calling it in a non async context then we'd either have to require the number of arguments to be provided or provide the callback before the arguments\r\n\r\n`async.sync` and `async.wrap` require you to pass `argc`, so that's how we deal with that, and we wouldn't need to pass these to `pcall` (`async.run` will need `argc` too). Passing `argc` to the wrappers is important for details I won't go into and not something we can work around.\r\n\r\nThis is a problem for Sumneko which has bad support for generics.",
            "created_at": "2023-01-05T11:31:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372102993",
            "id": 1372102993,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RyKFR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372102993/reactions"
            },
            "updated_at": "2023-01-05T11:36:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372102993",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I never suggested this. I suggested defining a specific async.pcall function that specificly handles the context for protected calls.\r\n\r\nSorry didn't think you meant overloading the built-in (that would be pretty nuts), was referring to overloading `async.pcall` depending on if it's an async context or not :sweat_smile:\r\n\r\n> async.sync and async.wrap require you to pass argc, so that's how we deal with that, and we wouldn't need to pass these to pcall (async.run will need argc too). \r\n\r\nBut you're not necessarily passing a wrapped function to `async.pcall`, it could just be a function that calls a wrapped function internally. \r\n\r\n```lua\r\nlocal wrapped_func = async.wrap(function() return some_result end, 0)\r\n\r\nlocal function async_func1()\r\n    ...\r\n    return wrapped_func()\r\nend\r\n\r\nlocal function async_func2()\r\n    local success, some_result = async.pcall(async_func1)\r\nend\r\n\r\n```\r\nI can't think of any way that would be able to reliably handle both supplying a callback (because you might want to supply callback in an async context) and supplying arguments without passing argc when calling it (it's essentially the same problem as `wrap` right?). \r\n\r\nI think I'm missing the use case of allowing `async.pcall` with a callback versus using `async.run`. Is it that you'd expect `async.run` to raise the error to the user if one occurred?\r\n\r\n> Passing argc to the wrappers is important for details I won't go into and not something we can work around.\r\n\r\nI understand why argc is passed to the wrapped functions, wasn't suggesting we'd change that.\r\n\r\n> This is a problem for Sumneko which has bad support for generics.\r\n\r\nTotally true just thought it was worth mentioning anyway.",
            "created_at": "2023-01-05T12:08:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372136549",
            "id": 1372136549,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RySRl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372136549/reactions"
            },
            "updated_at": "2023-01-05T12:08:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372136549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But you're not necessarily passing a wrapped function to async.pcall, it could just be a function that calls a wrapped function internally.\r\n\r\nAh right I see. Hmm, ok may need to think about this some more, but personally, I'm not too fussed about providing a callback to pcall. If it really comes to it then we may just have to pack args in a table, or, passing the callback in a curried style:\r\n\r\n```lua\r\nasync.pcall(function(...) end)(...)(cb)\r\n```",
            "created_at": "2023-01-05T12:16:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372143831",
            "id": 1372143831,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RyUDX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372143831/reactions"
            },
            "updated_at": "2023-01-05T12:16:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372143831",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yeah that seems like it would be fairly simple but would it be needed? \r\n> I think I'm missing the use case of allowing async.pcall with a callback versus using async.run. Is it that you'd expect async.run to raise the error to the user if one occurred?",
            "created_at": "2023-01-05T14:08:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372259718",
            "id": 1372259718,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RywWG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372259718/reactions"
            },
            "updated_at": "2023-01-05T14:08:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372259718",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think so.",
            "created_at": "2023-01-05T14:17:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372271092",
            "id": 1372271092,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RyzH0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372271092/reactions"
            },
            "updated_at": "2023-01-05T14:17:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372271092",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think we need to consider `async-function` and `async-entrypoint` as two different things.\r\n\r\nIn the gitsigns.nvim example, `async-function` is `async.wrap(function() ... end)` and `async-entrypoint` is `async.void(function() ... end)`. \r\n\r\nThere is no problem with the rule that `async-function(async.wrap)` can only be executed from an async-context. (It's just a design decision).\r\n\r\nHowever, IMO, `async-entrypoint(async.void)` should provide the way to wait for the async completion.\r\n(If so, we need to intoroduce `callback`, `thunk`, `Promise` or `Channel` for that)\r\n\r\nIf `async-entrypoint` does not provide some some of the way, the user will not be able to wait for async-function.\r\n",
            "created_at": "2023-01-05T15:00:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372328759",
            "id": 1372328759,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RzBM3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372328759/reactions"
            },
            "updated_at": "2023-01-05T15:00:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372328759",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Gitsigns doesn't have a complete async implementation, just the things it needs. For a more complete implementation I'm using https://github.com/lewis6991/async.nvim as a staging area. It includes a couple more things:\r\n- `async.sync`: (like `void`) but is intended to return its results via a callback. It returns a function of the signature `function(..., callback(results))`, so it works very much like a raw libuv function.\r\n- `async.join`: to use with `async.sync` to run multiple functions concurrently.\r\n- (Missing) job cancellation\r\n- (Missing) `async.pcall`\r\n\r\n> However, IMO, async-entrypoint(async.void) should provide the way to wait for the async completion.\r\n\r\nHow do you mean wait? You mean wait synchronously by blocking? That should be a pretty easy addition using `async.sync` with something like `uv.new_check`.\r\n\r\n> If async-entrypoint does not provide some some of the way, the user will not be able to wait for async-function.\r\n\r\nDo they need to be able to wait? Can't a user just always provide a callback? I can't think of any situation where blocking the UI thread is a good idea.",
            "created_at": "2023-01-05T15:14:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372346255",
            "id": 1372346255,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RzFeP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372346255/reactions"
            },
            "updated_at": "2023-01-05T15:15:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372346255",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": ">  (If so, we need to intoroduce callback, thunk, Promise or Channel for that)\r\n\r\nI think @hrsh7th just means some way of getting the result which is what is handled by your `async.sync` or my `async.run` already so we're covered there :smile:\r\n\r\n",
            "created_at": "2023-01-05T15:29:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372366515",
            "id": 1372366515,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RzKaz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372366515/reactions"
            },
            "updated_at": "2023-01-05T15:29:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372366515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> How do you mean wait?\r\n\r\nThe `wait` means the `await`.\r\nIt can be achieve with `callback`, `thunk`, `Promise` etc.\r\n\r\n\r\nOh... I seems to mis-understanding the discussion...?\r\n\r\nI think `async.pcall` isn't needed if the `async-entrypoint` provide some async-primitives.\r\n(The `callback` can handle an error via `callback(err, res)` and also `Promise` can handle an error.)\r\n\r\nThe https://github.com/lewis6991/async.nvim seems to pass the arguments for the async-entrypoint.\r\n\r\n> You mean wait synchronously by blocking?\r\n\r\nNo. I don't want to include `blocking-sync` into the neovim core. (At least initialy).\r\n",
            "created_at": "2023-01-05T15:32:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372370798",
            "id": 1372370798,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RzLdu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372370798/reactions"
            },
            "updated_at": "2023-01-05T15:32:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372370798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think async.pcall isn't needed if the async-entrypoint provide some async-primitives.\r\n(The callback can handle an error via callback(err, res) and also Promise can handle an error.)\r\n\r\nThe idea is that `async.pcall` turns `callback(res)` into `callback(err, res)`.",
            "created_at": "2023-01-05T15:36:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1372375612",
            "id": 1372375612,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5RzMo8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372375612/reactions"
            },
            "updated_at": "2023-01-05T15:36:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1372375612",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've updated https://github.com/lewis6991/async.nvim so:\r\n\r\n- coroutines created by the async module are specially tracked so they can be lightly mixed with other coroutines.\r\n- `async.void` and `async.create` (formerly `async.sync`) now return a handle with the methods `cancel(cb)` and `is_cancelled()` which is analogous to luv's `handle:close(cb)` and `handle:is_closing()`. It also gets access to a `co` field which is the coroutine in case anybody wants that for any reason.\r\n\r\nTODO:\r\n- Add `async.pcall` (as discussed aboved)\r\n- Provide a way for cancelled tasks to perform any cleanup and/or free resources.\r\n\r\nOnce that is done, is there any disagreement in using this for an initial MVP?",
            "created_at": "2023-01-06T12:46:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1373578496",
            "id": 1373578496,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5R3yUA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1373578496/reactions"
            },
            "updated_at": "2023-01-06T12:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1373578496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@lewis6991 \r\nSome comments:\r\n- Why does `create` return a thunk? It should just run the async function in the coroutine\r\n- Why does `join` call the thunk with a callback? Are you supposed to give it a thunk the is returned from `create`?\r\n- ~What is [this](https://github.com/lewis6991/async.nvim/blob/main/lua/async.lua#L177) doing?~ Edit: it is for max number of concurrent tasks.\r\n  Why would that be useful?\r\n- Why are we checking if the coroutine is running? We should just do what the function says it is doing, instead of changing depending on the context which is very confusing. We should only check if the coroutine is running to provide error messages to the user",
            "created_at": "2023-01-06T16:00:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1373833578",
            "id": 1373833578,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5R4wlq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1373833578/reactions"
            },
            "updated_at": "2023-01-06T16:05:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1373833578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Why does create return a thunk?\r\n\r\nThis is just a design decision to allow you to create async functions as:\r\n\r\n```lua\r\nlocal my_async_func = async.create(function(a, b, c, callback)\r\n   ...\r\nend, 4)\r\n```\r\n\r\nWhen you create something, you don't just execute it. Similar to `coroutine.create`, `uv.new_timer`, etc.\r\n\r\nThis is how I've used this lib in all the various plugins I've created and how I think the lib should be typically used.\r\n\r\n> It should just run the async function in the coroutine\r\n\r\nThis is a subjective opinion without any reasoning. We can just as well create something like `async.run` if there's a real need. Not something I see myself using much.\r\n\r\n> Why does join call the thunk with a callback? Are you supposed to give it a thunk the is returned from create?\r\n\r\nYou are supposed to pass `join` a list of async functions above. The callback is needed so the user can wait on the result.\r\n\r\n```lua\r\nlocal main = async.create(function()\r\n   local results = async.join(math.huge, nil, {my_async_func1, my_async_func2})\r\n   -- do something with results\r\nend)\r\n```\r\n\r\n>What is this doing? Edit: it is for max number of concurrent tasks.\r\nWhy would that be useful?\r\n\r\nBecause some applications might not want to put too much strain on the event loop. I specifically wrote `join` to use in packer-v2, which has had many reports of issues when too many jobs are run in parallel.\r\n\r\nOn reflection, I think I will put the first two arguments to join in an `opts` field.\r\n\r\n> Why are we checking if the coroutine is running? We should just do what the function says it is doing, instead of changing depending on the context which is very confusing. We should only check if the coroutine is running to provide error messages to the user\r\n\r\nIt allows you to freely use functions wrapped in `async.create` in async contexts without creating more coroutines. Without it, it increases boilerplate.\r\n\r\n",
            "created_at": "2023-01-06T16:24:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1373862528",
            "id": 1373862528,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5R43qA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1373862528/reactions"
            },
            "updated_at": "2023-01-06T16:27:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1373862528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> You are supposed to pass join a list of async functions above. The callback is needed so the user can wait on the result.\r\n\r\nSo you need to pass functions to join that are returned by `create`?\r\nlike this `async.join({async.create(f1, 1), async.create(f2, 2), async.create(f3, 1)}, math.huge, nil)`? That's pretty verbose IMO. I think `join` should create the coroutines, instead of asking the user to do so. Otherwise, you have to `async.create` every function that you want to `join`, which is more verbose, especially when you need to specify argc for each one. That is how it works in `plenary.nvim`.\r\n\r\n> This is a subjective opinion without any reasoning. We can just as well create something like async.run if there's a real need. Not something I see myself using much.\r\n\r\nYes it is subjective, but I did this because most lua functions that run a closure in a context don't create a thunk. For example, `pcall`, `xpcall`, etc. If you want to create the thunk, you can do it yourself, `create` just does extra stuff that is not always needed. Though I see that `create` is useful when defining a plugin main.\r\n\r\n> It allows you to freely use functions wrapped in async.create in async contexts without creating more coroutines. Without it, it increases boilerplate.\r\n\r\nIf you want to run functions in async contexts, just run the inner closure! I don't see any boilerplate. However, having functions expect different arguments depending on the context is very confusing. I also don't think leaf async functions should fallback to accepting a callback, they should just fail when not called in the proper context.\r\n\r\nI also think we should try to remove the argc stuff. I think we can remove it as long as the callback is the first argument?\r\n",
            "created_at": "2023-01-06T17:40:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1373939452",
            "id": 1373939452,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5R5Kb8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1373939452/reactions"
            },
            "updated_at": "2023-01-06T17:41:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1373939452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> This is a subjective opinion without any reasoning. We can just as well create something like async.run if there's a real need. Not something I see myself using much.\r\n\r\nAs you said this is completely subjective but I would have the opposite opinion. I've never wanted to use something like `create`. Of course one could be written using the other so it's not a big deal but might be worth considering which is best provided out of the box (if the choice is only one).\r\n\r\n> Add async.pcall (as discussed aboved)\r\n\r\nAs one of the goals is to keep the core minimal, are you planning on keeping the `protected` argument for `wrap`? Seems like it's pretty niche, and could be implemented with `pcall` if desired.\r\n\r\n> Why are we checking if the coroutine is running? We should just do what the function says it is doing, instead of changing depending on the context which is very confusing.\r\n\r\nI agree with this. If I'm creating a new handle (by your naming) I'd expect it to create a new context (i.e. new coroutine). I don't think the core should try to be \"smart\". If an error occurs, the original async context also dies. This also means that if you're in an async function, you must block for all async calls made, it's not possible to start a task and not wait for it (and so actually `run` couldn't be written with `create`).\r\n\r\n> It allows you to freely use functions wrapped in async.create in async contexts without creating more coroutines. Without it, it increases boilerplate.\r\n\r\nI'd say this is a point towards not using `async.create`. Not defining functions wrapped with `create` leaves the user to decide how it's run.",
            "created_at": "2023-01-06T19:32:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1374039819",
            "id": 1374039819,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5R5i8L",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1374039819/reactions"
            },
            "updated_at": "2023-01-06T19:32:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1374039819",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> As one of the goals is to keep the core minimal, are you planning on keeping the protected argument for wrap? Seems like it's pretty niche, and could be implemented with pcall if desired.\r\n\r\nActually alternative idea is to add some extra logic to `wrap` to catch errors in wrapped functions and re-raise them in the coroutine that called them. That way no custom `pcall` is required, the built-in works as expected which I think would be a really nice addition\r\n\r\nImplementation: https://github.com/rcarriga/nvim-dap-ui/blob/45ca04234a585708763b790986f588fcfc55fe52/lua/dapui/async/tasks.lua#L133\r\n\r\nSome tests to demonstrate: https://github.com/rcarriga/nvim-dap-ui/blob/45ca04234a585708763b790986f588fcfc55fe52/tests/unit/async/tasks_spec.lua#L97-L113",
            "created_at": "2023-01-09T09:38:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1375337707",
            "id": 1375337707,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5R-fzr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375337707/reactions"
            },
            "updated_at": "2023-01-09T09:38:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375337707",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> So you need to pass functions to join that are returned by create?\r\n\r\nThat was the intention, but actually just passing a callback style function will work.\r\n\r\n> like this async.join({async.create(f1, 1), async.create(f2, 2), async.create(f3, 1)}, math.huge, nil)? That's pretty verbose IMO. \r\n\r\nThe expectation is to do:\r\n\r\n```lua\r\n\r\nlocal f1 = async.create(function(...) end), 1)\r\nlocal f2 = async.create(function(...) end), 2)\r\nlocal f3 = async.create(function(...) end), 1)\r\n\r\nasync.join({f1, f2, f3)\r\n```\r\n\r\nNote: `join()` only works because `async.create` returns a callback-style function.\r\n\r\nOne of the main benefits of `async.create` is that it just returns a callback-style function, which means it can be used internally and exposed to the user without any API-dependency on the assync lib as it just becomes an implementation detail.\r\n\r\n> If you want to run functions in async contexts, just run the inner closure! I don't see any boilerplate.\r\n\r\nThat requires you to create 2 versions of every function you want to run in both contexts. That was a problem I had in gitsigns, which was made worse by having a debounced version added to the mix. It simplified things a lot to just hide the async stuff, as it didn't matter.\r\n\r\n>  However, having functions expect different arguments depending on the context is very confusing. I also don't think leaf async functions should fallback to accepting a callback, they should just fail when not called in the proper context.\r\n\r\nTo me the whole point of the async lib is that the async aspect is almost completely abstracted away. Wrapping a function in `async.create` is basically like adding `-- @async`. I'm simply saying this function **will** run in an async context, whether one is provided or not.\r\n\r\nTo me, it's similar to luv's API where every async function as a sync version where the callback is passed as `nil`.\r\n\r\nFor functions that don't return anything, they only difference is that one is blocking; they both execute the function as normal, no pesky unnecessary runtime errors. When there are return values, non-async returns its data via a callback, whilst the other returns normally. I don't see this as a significant enough difference to consider it confusing. I'd rather minimize the potential for runtime errors.\r\n\r\nWe could make it an error to pass a callback in the async-context? That would cover a good fraction of erroneous use cases.\r\n\r\n> I also think we should try to remove the argc stuff. I think we can remove it as long as the callback is the first argument?\r\n\r\nThat would basically force every use of `wrap` to pass a closure, so I'm pretty against that. I've at least made `argc` optional (default to 0). We could extend that further and redefine `argc` as `callback_pos` so we can support arguments before **and** after the callback. Then it would be fully optional. Not sure if this would complicate things too much.\r\n\r\n> As one of the goals is to keep the core minimal, are you planning on keeping the protected argument for wrap? Seems like it's pretty niche, and could be implemented with pcall if desired.\r\n\r\nThis area is a bit unfinished, but ideally we should aim to remove the argument and pass it some other way.\r\n\r\n> I agree with this. If I'm creating a new handle (by your naming) I'd expect it to create a new context (i.e. new coroutine). I don't think the core should try to be \"smart\". If an error occurs, the original async context also dies. This also means that if you're in an async function, you must block for all async calls made, it's not possible to start a task and not wait for it (and so actually run couldn't be written with create).\r\n\r\n> I'd say this is a point towards not using async.create. Not defining functions wrapped with create leaves the user to decide how it's run.\r\n\r\nI'm trying to position the API as a little higher level to what It seems you're expecting, which is fine, maybe we can have both?\r\n\r\nIf we don't have `async.create` then we shouldn't have `async.wrap` either. If we follow this then we end up with:\r\n\r\n```lua\r\nfunction M.run(func, callback, ...)\r\n  return execute(func, callback, ...)\r\nend\r\n\r\n-- Note: We could detect the type of arg 1 here. If number, then treat as argc, \r\n-- else treat as func and set argc = 0. The Lua stdlib does this kind of thing in a few places.\r\nfunction M.wait(func, argc, ...)\r\n  return coroutine.yield(argc, func, ...)\r\nend\r\n```\r\n\r\nwhich is simpler than what I've got currently (though also a lot more limited).\r\n\r\nHowever, we can then build `create` and `wrap` on top of this.\r\n\r\nSo best of both worlds?\r\n\r\n> Actually alternative idea is to add some extra logic to wrap to catch errors in wrapped functions and re-raise them in the coroutine that called them. That way no custom pcall is required, the built-in works as expected which I think would be a really nice addition\r\n\r\nThis sounds like a good idea. I think it should work.\r\n\r\n\r\n",
            "created_at": "2023-01-09T11:19:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1375477574",
            "id": 1375477574,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5R_B9G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375477574/reactions"
            },
            "updated_at": "2023-01-09T11:19:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375477574",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Updated https://github.com/lewis6991/async.nvim with all feedback:\r\n\r\n- `protected` is gone. Used @rcarriga's implementation for re-raising errors in the coroutine.\r\n- added `async.run` and `async.wait` to act as low level functions that execute closures.\r\n  - additionally `async.wait` accepts an optional `argc` argument in the first position. Other Lua stdlib function use this kind of overloading (e.g. `debug.traceback`, `table.insert`) so I think it makes sense here.\r\n- added a `strict` argument to `async.create`, `async.void` and `async.wrap` so users can opt-in to hard erroring when thunks execute in the wrong context. (I hope this is a good enough compromise).",
            "created_at": "2023-01-09T13:31:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1375631555",
            "id": 1375631555,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5R_njD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375631555/reactions"
            },
            "updated_at": "2023-01-09T13:31:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375631555",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I'm trying to position the API as a little higher level to what It seems you're expecting, which is fine, maybe we can have both?\r\n\r\n> - protected is gone. Used @rcarriga's implementation for re-raising errors in the coroutine.\r\n> - added async.run and async.wait to act as low level functions that execute closures.\r\n        additionally async.wait accepts an optional argc argument in the first position. Other Lua stdlib function use this kind of overloading (e.g. debug.traceback, table.insert) so I think it makes sense here.\r\n> - added a strict argument to async.create, async.void and async.wrap so users can opt-in to hard erroring when thunks execute in the wrong context. (I hope this is a good enough compromise).\r\n\r\nAwesome! Having the lower level access makes it much more flexible, so I think being more opinionated in functions like `create` or `join` is totally fine.\r\n\r\n> Note: join() only works because async.create returns a callback-style function.\r\n\r\nThough I think that should be well documented, it's a pretty large caveat.",
            "created_at": "2023-01-09T14:19:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1375694652",
            "id": 1375694652,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5R_288",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375694652/reactions"
            },
            "updated_at": "2023-01-09T14:19:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1375694652",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> That would basically force every use of wrap to pass a closure, so I'm pretty against that.\r\n\r\nTo be clear, I am talking about the continuation that is given to `func`. If we make `wrap` (`wait`) defined as\r\n```lua\r\nfunction M.wait(func, ...)\r\n  return coroutine.yield(func, ...)\r\nend\r\n```\r\nIf `func` always takes the continuation as the first argument, then we do not need argc. So we should just define `wait = coroutine.yield`. Then, if you want to pass in a `func` that expects the continuation to be the last argument, you can just do\r\n```lua\r\nwait(function(k, arg1, arg2, arg3)\r\n  f(arg1, arg2, arg3, k)\r\nend)\r\n```\r\nYou could also define your own wrap that takes an `argc`.\r\n\r\n> If we don't have `async.create` then we shouldn't have `async.wrap` either.\r\n\r\nI completely agree! We should just have `run` and `wait`.\r\n\r\n> which is simpler than what I've got currently (though also a lot more limited).\r\n\r\nIt is definitely simpler, but it is not more limited. For example, you cannot define `run` using `create`, but you can do it the other way around. Therefore `run` is strictly more general.\r\n\r\n> I'm trying to position the API as a little higher level to what It seems you're expecting, which is fine, maybe we can have both?\r\n\r\nThis is neovim core, so I think we should focus on the fundamentals first.\r\n\r\n> However, we can then build `create` and `wrap` on top of this. So best of both worlds?\r\n\r\nYes, I think the best course of action is to add `run` and `wait`, because those functions will already make writing async code much easier. Those are the fundamental building blocks and other plugins can add their own abstractions over those, such as `create` etc. We can then add more functions back in as needed.",
            "created_at": "2023-01-27T01:54:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1405919766",
            "id": 1405919766,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5TzKIW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1405919766/reactions"
            },
            "updated_at": "2023-01-27T02:17:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1405919766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> If func always takes the continuation as the first argument, then we do not need argc. So we should just define wait = coroutine.yield. Then, if you want to pass in a func that expects the continuation to be the last argument, you can just do\r\n\r\nI don't really see the advantage of doing this, you're trading adding a single number parameter\r\n```lua\r\nwait(vim.loop.fs_open, 4)\r\n```\r\nfor writing a whole wrapper function\r\n```lua\r\nwait(function (callback, path, flags, mode)\r\n  vim.loop.fs_open(path, flags, mode, callback)\r\nend)\r\n```\r\nWhy is that better? Just simplifying the implementation a little doesn't seem worth it if almost every use has to write boilerplate (which is likely because callbacks are often the last argument)",
            "created_at": "2023-01-27T09:42:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1406257444",
            "id": 1406257444,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5T0ckk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1406257444/reactions"
            },
            "updated_at": "2023-01-27T09:42:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1406257444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24252670?v=4",
                "events_url": "https://api.github.com/users/rcarriga/events{/privacy}",
                "followers_url": "https://api.github.com/users/rcarriga/followers",
                "following_url": "https://api.github.com/users/rcarriga/following{/other_user}",
                "gists_url": "https://api.github.com/users/rcarriga/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rcarriga",
                "id": 24252670,
                "login": "rcarriga",
                "node_id": "MDQ6VXNlcjI0MjUyNjcw",
                "organizations_url": "https://api.github.com/users/rcarriga/orgs",
                "received_events_url": "https://api.github.com/users/rcarriga/received_events",
                "repos_url": "https://api.github.com/users/rcarriga/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rcarriga/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rcarriga/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rcarriga",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It is better because it is the simplest and most general function.\r\nThat's why I said\r\n> You could also define your own wrap that takes an argc.\r\n\r\nAlso, defining `wait` like that allows you to call `wait` on the fly with a closure without using `argc`, because it is basically just a control operation like `callcc` or something. You also avoid the overhead of doing an `unpack` and `pack`.\r\n",
            "created_at": "2023-01-27T13:57:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1406542572",
            "id": 1406542572,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5T1iLs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1406542572/reactions"
            },
            "updated_at": "2023-01-27T13:57:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1406542572",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It is better because it is the simplest and most general function.\r\n\r\nIf we want the simplest and most general then there's a stronger argument to just go with https://github.com/neovim/neovim/issues/19624#issuecomment-1204867814, and therefore we don't need to add anything to core! But that defeats the entire purpose here and I think we want to aim at a higher level.\r\n\r\nIf the suggested usage is going to force everyone to add a bunch of boilerplate and closures, then what's the point in adding anything to core? It's a low-cost, low benefit proposition. The point here is to standardize around well established patterns and reduce boilerplate, and respectfully I don't think they align with your suggestions, at least with the code I've seen.\r\n\r\n> call wait on the fly with a closure without using argc\r\n\r\nYeah, but then you need to provide a closure. This is objectively worse.\r\n\r\n> You also avoid the overhead of doing an unpack and pack.\r\n\r\nThat kind of overheads is negligible. Micro optimizing isn't a goal here and should not influence the API design unless the performance concerns are real.\r\n\r\n",
            "created_at": "2023-01-27T14:36:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1406588586",
            "id": 1406588586,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5T1taq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1406588586/reactions"
            },
            "updated_at": "2023-01-27T14:36:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1406588586",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> If we want the simplest and most general then there's a stronger argument to just go with https://github.com/neovim/neovim/issues/19624#issuecomment-1204867814, and therefore we don't need to add anything to core! But that defeats the entire purpose here and I think we want to aim at a higher level.\r\n\r\n> If the suggested usage is going to force everyone to add a bunch of boilerplate and closures, then what's the point in adding anything to core? It's a low-cost, low benefit proposition. The point here is to standardize around well established patterns and reduce boilerplate, and respectfully I don't think they align with your suggestions, at least with the code I've seen.\r\n\r\nI'm not saying we shouldn't have a high-level api, I am just saying that we should focus on the simplest and most general functions so that we can define the other functions *in terms* of those simple functions. We can still have `wrap`, `create`, etc, but they can be defined in terms of the low-level functions. You can't do it the other way around. That's what I am suggesting.\r\n\r\n> Yeah, but then you need to provide a closure. This is objectively worse.\r\n\r\nWhat do you mean? You have to provide a closure anyway. How is it objectively worse?",
            "created_at": "2023-01-27T14:58:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1406619323",
            "id": 1406619323,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5T1067",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1406619323/reactions"
            },
            "updated_at": "2023-01-27T14:58:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1406619323",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm not saying we shouldn't have a high-level api, I am just saying that we should focus on the simplest and most general functions so that we can define the other functions in terms of those simple functions.\r\n\r\nIf you look at https://github.com/lewis6991/async.nvim you'll see that's exactly what I've done.\r\n\r\nWe define `wait` which accepts `argc` as an optional first parameter. If not provided it is assumed to be 1, meaning the continuation is the first argument. I think this will allow you to use closures as you suggested.\r\n\r\nWe also define `create` which is implemented with `run`. Again `argc` is optional.\r\n\r\n> What do you mean? You have to provide a closure anyway. How is it objectively worse?\r\n\r\nWith `argc`:\r\n```lua\r\nlocal stat = async.wait(2, vim.loop.fs_stat, path)\r\n```\r\n\r\nWithout `argc`:\r\n```lua\r\nlocal stat = async.wait(function(callback, path)\r\n    vim.fs_stat(path, callback)\r\nend)\r\n```\r\n\r\nWith `async.wrap`:\r\n```lua\r\nlocal fs_stat = async.wrap(vim.loop.fs_stat, 2)\r\n\r\nlocal stat = fs_stat(path)\r\n```",
            "created_at": "2023-01-27T16:06:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1406704791",
            "id": 1406704791,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5T2JyX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1406704791/reactions"
            },
            "updated_at": "2023-01-27T16:07:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1406704791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ok, the optional `argc` argument looks good. The current code doesn't actually set `argc` to 1 if it is not provided though. \r\n\r\nEverything basically looks good to me. I only have two small comments left.\r\n1. I still think `join` is too verbose. Why can't it just create the coroutines itself without the user having to do that?\r\n2. I think we should do the optional `argc` for `create` also.",
            "created_at": "2023-01-27T22:32:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1407146894",
            "id": 1407146894,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5T31uO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1407146894/reactions"
            },
            "updated_at": "2023-01-27T22:32:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1407146894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Out of curiosity why was [promise-async](https://github.com/kevinhwang91/promise-async) not considered here? It implements async/await and full promises implementation with `promsie.all`, `promise.allSettled()`, `promise.race`, etc. and passes standard promise tests. I've been using it and prefer it to plenary's async barebones futures way.\r\n\r\nIn my opinion, the nvim solution shouldn't aim for simplicity but use established patterns and provide all the tools for async including synchronization, etc.\r\n\r\nHere's  [Semaphore and mutex with promise-async](https://github.com/kevinhwang91/nvim-fundo/tree/main/lua/fundo/lib) CondVar wouldn't be much work to implement. The author has also made [async vim.loop wrapper using promises](https://github.com/kevinhwang91/nvim-fundo/blob/main/lua/fundo/fs/uvwrapper.lua) which I use.\r\n\r\nYou don't need Neovim-specific knowledge to use `promise-async` since it's modelled after JS so the web is full of guides and patterns for it.\r\n\r\nI think `promise-async` would be a solid example for core with added functionality on top. Personally, I'll stick with it over any core implementation unless core features surpass those of `promise-async`\r\n\r\nPython async uses futures and tasks and asyncio/asyncfile, JS promises, so why should Neovim core not aim for the same level of  features and usability?",
            "created_at": "2023-03-06T02:57:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1455356917",
            "id": 1455356917,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5Wvvv1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1455356917/reactions"
            },
            "updated_at": "2024-01-25T00:27:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1455356917",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/16338335?v=4",
                "events_url": "https://api.github.com/users/wfjt/events{/privacy}",
                "followers_url": "https://api.github.com/users/wfjt/followers",
                "following_url": "https://api.github.com/users/wfjt/following{/other_user}",
                "gists_url": "https://api.github.com/users/wfjt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wfjt",
                "id": 16338335,
                "login": "wfjt",
                "node_id": "MDQ6VXNlcjE2MzM4MzM1",
                "organizations_url": "https://api.github.com/users/wfjt/orgs",
                "received_events_url": "https://api.github.com/users/wfjt/received_events",
                "repos_url": "https://api.github.com/users/wfjt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wfjt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wfjt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wfjt",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Some work was started on structured concurrency in lua (similar to Python's trio) [here](https://gist.github.com/belm0/4c6d11f47ccd31a231cde04616d6bb22) in case that approach might also be considered here",
            "created_at": "2023-09-16T09:20:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1722186304",
            "id": 1722186304,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5mpnpA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722186304/reactions"
            },
            "updated_at": "2023-09-16T09:20:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722186304",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/810762?v=4",
                "events_url": "https://api.github.com/users/svermeulen/events{/privacy}",
                "followers_url": "https://api.github.com/users/svermeulen/followers",
                "following_url": "https://api.github.com/users/svermeulen/following{/other_user}",
                "gists_url": "https://api.github.com/users/svermeulen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/svermeulen",
                "id": 810762,
                "login": "svermeulen",
                "node_id": "MDQ6VXNlcjgxMDc2Mg==",
                "organizations_url": "https://api.github.com/users/svermeulen/orgs",
                "received_events_url": "https://api.github.com/users/svermeulen/received_events",
                "repos_url": "https://api.github.com/users/svermeulen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/svermeulen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/svermeulen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/svermeulen",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I was inspired enough by the article I linked to above that I created a plugin to provide structured concurrency in neovim lua:  https://github.com/svermeulen/nvim-lusc",
            "created_at": "2023-10-17T10:14:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1766105873",
            "id": 1766105873,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5pRKMR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1766105873/reactions"
            },
            "updated_at": "2023-10-17T10:14:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1766105873",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/810762?v=4",
                "events_url": "https://api.github.com/users/svermeulen/events{/privacy}",
                "followers_url": "https://api.github.com/users/svermeulen/followers",
                "following_url": "https://api.github.com/users/svermeulen/following{/other_user}",
                "gists_url": "https://api.github.com/users/svermeulen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/svermeulen",
                "id": 810762,
                "login": "svermeulen",
                "node_id": "MDQ6VXNlcjgxMDc2Mg==",
                "organizations_url": "https://api.github.com/users/svermeulen/orgs",
                "received_events_url": "https://api.github.com/users/svermeulen/received_events",
                "repos_url": "https://api.github.com/users/svermeulen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/svermeulen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/svermeulen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/svermeulen",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Should we support `progress` related functions in this area?",
            "created_at": "2023-10-30T09:04:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1784759817",
            "id": 1784759817,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5qYUYJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1784759817/reactions"
            },
            "updated_at": "2023-10-30T09:04:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1784759817",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hello. I see there are bunch of cool implementations here. I'm just wondering if anyone has faced any issues using co-routines with asynchronous APIs, that is not a problem with using callbacks or promises approach?\r\n\r\nOther than error handling? Nested co-routines are weird since it's resumes the last yielded co-routines. Any issues related to that?  ",
            "created_at": "2023-11-23T17:35:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1824765320",
            "id": 1824765320,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5sw7WI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1824765320/reactions"
            },
            "updated_at": "2024-01-25T00:23:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1824765320",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18459807?v=4",
                "events_url": "https://api.github.com/users/s1n7ax/events{/privacy}",
                "followers_url": "https://api.github.com/users/s1n7ax/followers",
                "following_url": "https://api.github.com/users/s1n7ax/following{/other_user}",
                "gists_url": "https://api.github.com/users/s1n7ax/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/s1n7ax",
                "id": 18459807,
                "login": "s1n7ax",
                "node_id": "MDQ6VXNlcjE4NDU5ODA3",
                "organizations_url": "https://api.github.com/users/s1n7ax/orgs",
                "received_events_url": "https://api.github.com/users/s1n7ax/received_events",
                "repos_url": "https://api.github.com/users/s1n7ax/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/s1n7ax/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/s1n7ax/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/s1n7ax",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I have added Promise like error handling for https://github.com/ms-jpq/lua-async-await to handle LSP response type where the first value is the error. So no more assert checks on the response is needed. It's done in the `wait()` function too. So, if it's different, one can simply create a new wait function.\r\n\r\nhttps://github.com/nvim-java/lua-async-await\r\n\r\n```lua\r\nlocal function lsp_request(callback)\r\n  local timer = vim.loop.new_timer()\r\n\r\n  assert(timer)\r\n\r\n  timer:start(2000, 0, function()\r\n    -- First parameter is the error\r\n    callback('something went wrong', nil)\r\n  end)\r\nend\r\n\r\nlocal M = require('sync')\r\n\r\nlocal main = M.sync(function()\r\n  local response = M.wait_handle_error(M.wrap(lsp_request)())\r\nend)\r\n  .catch(function(err)\r\n    print('error occurred ', err)\r\n  end)\r\n  .run()\r\n```\r\n\r\nResult:\r\n\r\n```\r\nerror occurred  test6.lua:105: something went wrong\r\n```",
            "created_at": "2023-11-25T04:03:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1826207155",
            "id": 1826207155,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM5s2bWz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1826207155/reactions"
            },
            "updated_at": "2023-11-25T04:03:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1826207155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18459807?v=4",
                "events_url": "https://api.github.com/users/s1n7ax/events{/privacy}",
                "followers_url": "https://api.github.com/users/s1n7ax/followers",
                "following_url": "https://api.github.com/users/s1n7ax/following{/other_user}",
                "gists_url": "https://api.github.com/users/s1n7ax/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/s1n7ax",
                "id": 18459807,
                "login": "s1n7ax",
                "node_id": "MDQ6VXNlcjE4NDU5ODA3",
                "organizations_url": "https://api.github.com/users/s1n7ax/orgs",
                "received_events_url": "https://api.github.com/users/s1n7ax/received_events",
                "repos_url": "https://api.github.com/users/s1n7ax/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/s1n7ax/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/s1n7ax/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/s1n7ax",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "This is what I am currently using. \r\nhttps://gist.github.com/vurentjie/566a7158038ea6e044a4321c63cacde0 \r\n\r\nIt is very similar to some of the samples posted above in this thread, possibly because I also derived it from [/ms-jpq/lua-async-await](https://github.com/ms-jpq/lua-async-await) by breaking down all the calls and simplifying.\r\n\r\nThought I would just share it here as another example. It's very lean and probably does not cover everything. Currently I handle errors outside of this, either via `[p|xp]call()` or `error()` depending on the use case. ",
            "created_at": "2024-02-23T21:37:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-1962027572",
            "id": 1962027572,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM508io0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1962027572/reactions"
            },
            "updated_at": "2024-02-23T21:37:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1962027572",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/639806?v=4",
                "events_url": "https://api.github.com/users/vurentjie/events{/privacy}",
                "followers_url": "https://api.github.com/users/vurentjie/followers",
                "following_url": "https://api.github.com/users/vurentjie/following{/other_user}",
                "gists_url": "https://api.github.com/users/vurentjie/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vurentjie",
                "id": 639806,
                "login": "vurentjie",
                "node_id": "MDQ6VXNlcjYzOTgwNg==",
                "organizations_url": "https://api.github.com/users/vurentjie/orgs",
                "received_events_url": "https://api.github.com/users/vurentjie/received_events",
                "repos_url": "https://api.github.com/users/vurentjie/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vurentjie/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vurentjie/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vurentjie",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hi,\n\nI would like to present my design for structured concurrency in Neovim: [Coop.nvim](https://github.com/gregorias/coop.nvim). I believe it addresses all requirements you have listed out for such a framework + it’s as straightforward as such a framework could be ([How it works doc](https://github.com/gregorias/coop.nvim/blob/main/How%20it%20works.md)). I believe it provides an elegant approach to the subject.\n\nHere’s how Coop relates to the listed requirements:\n\n> Representing a task.\n> Orchestrating \"pipelines\" (quasi monads?) of work (\"tasks\") and handling errors.\n\n[See examples](https://github.com/gregorias/coop.nvim/blob/0e2082500707f2a143ff924ad36577c348148517/lua/coop/examples.lua#L72) for examples of handling errors, running tasks in parallel, and complex awaiting conditions.\n\n> Maximally leveraging Lua coroutines + libuv. Only add concepts (\"task\", \"promise\") if absolutely needed.\n\nYes,\n\n- the Task interface is an extension to Lua coroutines and implements parallel `create, resume, yield, status` functions with equivalent semantics.\n- Libuv functions are easily ported through generic wrappers: https://github.com/gregorias/coop.nvim/blob/main/lua/coop/uv.lua.\n- Only two concepts are added: a task and a future.\n\n> Coroutines (or tasks that wrap coroutines) can be nested. ([ref](https://gregorias.github.io/posts/using-coroutines-in-neovim-lua/#addendum-whats-wrong-with-plenary-async))\n\nTrue. In Coop you can freely nest task functions (a task function is a function that may call `task.yield`).\n\n> Util to create an awaitable task from \"normal\" functions (cf. \"promisify\"?).\n>  Example: vim.system() returns its own ad-hoc \"task\" that can be \"awaited\" via :wait().\n> Can e.g. vim.system() be \"promisified\" without its knowledge?\n\nCoop indeed “promisifies” `uv.spawn`. Coop’s implementation returns an awaitable future. [In tests you have an example of how it turns the callback interface from Neovim’s documentation into a synchronous one](https://github.com/gregorias/coop.nvim/blob/ff49c6d5a741e9e7b22366f5bedf43f7fcfd01c5/tests/coop/uv_spec.lua#L48-L84):\n\n```lua\nlocal stdin = vim.uv.new_pipe()\nlocal stdout = vim.uv.new_pipe()\nlocal stderr = vim.uv.new_pipe()\n\nlocal handle, pid, cat_future = uv.spawn(\"cat\", {\n\tstdio = { stdin, stdout, stderr },\n})\n\nlocal read_future = coop.Future.new()\nvim.uv.read_start(stdout, function(err, data)\n\tassert(not err, err)\n\tif data ~= nil and not read_future.done then\n\t\tread_future:complete(data)\n\tend\nend)\nvim.uv.write(stdin, \"Hello World\")\n\n-- Here we wrap the APIs into a task to use the synchronous looking interface.\nlocal task = coop.spawn(function()\n\t-- Wait for stdout to produce the data.\n\tlocal read_data = read_future:await()\n\tassert.are.same(\"Hello World\", read_data)\n\tlocal err_stdin_shutdown = uv.shutdown(stdin)\n\tassert.is.Nil(err_stdin_shutdown)\n\t-- Wait for the cat process to finish.\n\treturn cat_future:await()\nend)\n\n-- Wait for 200ms for the task finish.\nlocal exit_code, exit_sign = task:await(200, 2)\n```\n\n> Document (or generalize) [\"coroutine to callback\"](https://gregorias.github.io/posts/using-coroutines-in-neovim-lua/#coroutine-to-callback-conversion).\n\nCoop provides a generic converter callback to coroutine converter: `cb_to_tf` ([docs](https://github.com/gregorias/coop.nvim/blob/main/How%20it%20works.md#using-callbacks-to-build-coroutines).)\n\nThe generic conversion from a coroutine (a task) into a callback is done through [an await overload that accepts a callback](https://github.com/gregorias/coop.nvim/tree/main#:~:text=task.await(function(success%2C%20result)%20end)).\n\n> await_all, await_any (pseudo-names). See JS [Promise.all()](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise/all).\n> Results (and failures) can be aggregated. (Can't do this with jobwait()!)\n\nAll possible. For example, Coop provides an implementation of `as_completed`, an iterator that returns task results as they finish: [example](https://github.com/gregorias/coop.nvim/tree/main#:~:text=sort_with_time%20shows%20that%20Coop%20achieves%20true%20parallelism.%20It%20launches%20parallel%20timers%20with%20coop.spawn%20and%20uses%20a%20coop.control.as_completed%20to%20conveniently%20capture%20results%20as%20each%20timer%20completes.).\n\nTentative implementations of `await_all` and `await_any` are in [control.lua](https://github.com/gregorias/coop.nvim/blob/ff49c6d5a741e9e7b22366f5bedf43f7fcfd01c5/lua/coop/control.lua#L1-L68).\n\n> Tasks can be canceled.\n\n[True.](https://github.com/gregorias/coop.nvim/blob/main/How%20it%20works.md#cancellation)\n\n> Failures/errors can be handled\n\n[True.](https://github.com/gregorias/coop.nvim/blob/main/How%20it%20works.md#error-handling)\n\n> (possibly canceling the rest of the task tree).\n\nCoop doesn’t natively provide the task tree abstraction to keep with the Lua’s spirit of coroutines being standalone threads. Task trees can be implemented on top of Coop, because the programmer can intercept the `\"cancelled\"` error and `:cancel` subtasks.",
            "created_at": "2024-11-10T11:40:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-2466700118",
            "id": 2466700118,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM6TBttW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 12,
                "heart": 7,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 26,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466700118/reactions"
            },
            "updated_at": "2024-11-10T11:40:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466700118",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/722385?v=4",
                "events_url": "https://api.github.com/users/gregorias/events{/privacy}",
                "followers_url": "https://api.github.com/users/gregorias/followers",
                "following_url": "https://api.github.com/users/gregorias/following{/other_user}",
                "gists_url": "https://api.github.com/users/gregorias/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gregorias",
                "id": 722385,
                "login": "gregorias",
                "node_id": "MDQ6VXNlcjcyMjM4NQ==",
                "organizations_url": "https://api.github.com/users/gregorias/orgs",
                "received_events_url": "https://api.github.com/users/gregorias/received_events",
                "repos_url": "https://api.github.com/users/gregorias/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gregorias/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gregorias/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gregorias",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@gregorias Thanks for sharing, that looks very promising. ",
            "created_at": "2024-11-15T01:46:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-2477784579",
            "id": 2477784579,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM6Tr_4D",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 3,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2477784579/reactions"
            },
            "updated_at": "2024-11-15T01:46:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2477784579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I found out that Python's [toolz](https://toolz.readthedocs.io/en/latest/api.html#toolz.functoolz.pipe) library has a `pipe()` function that just take a value and then function(s) as argument. Is it something wanted in Nvim stdlib?",
            "created_at": "2025-04-22T17:08:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/19624#issuecomment-2821965585",
            "id": 2821965585,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19624",
            "node_id": "IC_kwDOAPphoM6oM8cR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2821965585/reactions"
            },
            "updated_at": "2025-04-22T18:02:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2821965585",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 78,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/19624/comments",
    "created_at": "2022-08-02T11:39:42Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/19624/events",
    "html_url": "https://github.com/neovim/neovim/issues/19624",
    "id": 1325723545,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4457150369,
            "name": "architecture",
            "node_id": "LA_kwDOAPphoM8AAAABCaq3oQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/architecture"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "futures/promises, async/await, concurrency, task pipelines",
            "id": 5683343649,
            "name": "async",
            "node_id": "LA_kwDOAPphoM8AAAABUsDxIQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/async"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/19624/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 712,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 638,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-04-28T12:13:30Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5PBO-Z",
    "number": 19624,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 9,
        "hooray": 24,
        "laugh": 0,
        "rocket": 0,
        "total_count": 36,
        "url": "https://api.github.com/repos/neovim/neovim/issues/19624/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/19624/timeline",
    "title": "Lua: structured concurrency, Promises, task pipelines",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-22T18:02:06Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/19624",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}