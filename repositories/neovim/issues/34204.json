{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nSession management in Neovim currently relies on the :mksession command, which generates a Vimscript file that re-establishes the saved workspace or session. This file is a Vimscript-based configuration script that can be difficult to interpret and maintain.\n\nAs a result, the underlying API for session management in Neovim is tightly coupled to this legacy behavior, offering limited flexibility or extensibility. While there exist plugins that enhance the session management experience, they typically act as wrappers around this core vim mechanism, rather than providing a modern, Lua-native solution.\n\n### Proposed Solution\n\nIntroduce a native Lua API for session management in Neovim to simplify the process of saving and restoring workspace state. This would provide a modern alternative to the current :mksession command, which outputs hard-to-read Vimscript files and is limited in flexibility.\n\nThe proposed API would primarily consist of two publicly accessible functions:\n\n - vim.session.write(filepath) – Serializes the current workspace (tabs, windows, buffers, positions, layout) into a Lua file at the specified path.\n - vim.session.read(filepath) – Reads a previously saved session file and restores the workspace state accordingly.\n\nA session file would contain structured Lua data representing (but not limited to): The current working directory, Open tabs, Each tab’s windows, including: File paths, Cursor positions, Split layout (horizontal/vertical), Window sizes, and Optional metadata \n\nThe structure of this saved lua file could contain a data structure that looks something along the lines of :\n```\nreturn {\n  cwd = \"/home/dev/folder\",\n  tabs = {\n    {\n      name = \"Tab 1\",\n      windows = {\n        [1] = {\n            cursor = { 177, 0 },\n            file = \"/home/dev/folder/file1.lua\",\n            root = true,\n            winsize = {\n              height = 25,\n              width = 106\n            }\n          },\n        [2] = {\n            cursor = { 177, 0 },\n            file = \"/home/dev/folder/file2.lua\",\n            split = \"vertical\",\n            split_from = 1,\n            winsize = {\n              height = 25,\n              width = 106\n            }\n          },\n        [3] = {\n            cursor = { 2, 0 },\n            file = \"/home/dev/folder/file3.lua\",\n            split = \"horizontal\",\n            split_from = 1,\n            winsize = {\n              height = 25,\n              width = 106\n            }\n          },\n        [4] = {\n            cursor = { 199, 0 },\n            file = \"/home/dev/folder/file4.lua\",\n            split = \"horizontal\",\n            split_from = 2,\n            winsize = {\n              height = 25,\n              width = 106\n            }\n          },\n      }\n    },\n  }\n}\n\n```\nThis could bring about the following benefits:\n - Improved Readability & Maintainability: Serve as a modern/nvims take on an existing Vim feature. There exist neovim APIs for almost all commands used within the currently saved :mksession vimscript file. Using plain Lua allows users and plugin developers to inspect, modify, or extend session files easily.\n - Future Extensibility: This foundation could be expanded to support project metadata, user-defined hooks, UI layouts, or integration with workspace-specific settings.\n - Plugin Interoperability: A well-defined Lua session format can be leveraged by ecosystem tools, making session management more consistent across plugins.\n\nThis could serve as a useful quality-of-life improvement, optionally bringing an often overlooked feature from other editors and IDEs into Neovim’s core functionality.\n\nI’d be more than happy to contribute and spend time working on implementing this if the idea seems to align with Neovim's goals and could be a considered a potential future feature for Neovim.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I'm in favor of throwing out the old Session.vim format entirely, which it looks like you are proposing. It's just too fragile, and has really poor error-handling.\n\nThis should be driven by the same mechanism as shada and/or [context.c](https://github.com/neovim/neovim/blob/d22fcf2917465aff029e781080dcc8c582c93f0e/src/nvim/context.c), where possible. There is no reason to have a bunch of different ways to save/restore editor state.\n\nIf you want to work on this, probably the first steps are to think about what's missing from `context.c` and/or shada and see if it makes sense to extend them.\n\nThere is a separate topic for shada: it has really bad race conditions which (apparently) can cause write conflicts: https://github.com/neovim/neovim/issues/8587 . We may need to revisit how we store shada (e.g. as a sqlite database), but that could be considered an \"output format\"  and doesn't necessarily change the story for sessions/views: they all route through the context.c and/or shada subsystem, but may be written to disk in different formats?",
            "created_at": "2025-05-27T12:42:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/34204#issuecomment-2912378597",
            "id": 2912378597,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34204",
            "node_id": "IC_kwDOAPphoM6tl17l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2912378597/reactions"
            },
            "updated_at": "2025-05-27T12:46:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2912378597",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This should be driven by the same mechanism as shada and/or [context.c](https://github.com/neovim/neovim/blob/d22fcf2917465aff029e781080dcc8c582c93f0e/src/nvim/context.c), where possible. There is no reason to have a bunch of different ways to save/restore editor state.\n\nHad a look at context.c and it seems like that existing mechanism could quite nicely fit in with trying to implement something like this.  \n\n> If you want to work on this, probably the first steps are to think about what's missing from `context.c` and/or shada and see if it makes sense to extend them.\n\nI think this could be done by adding a new context type (possibly called 'tabs' or 'UI' or something along those lines) which would structure data in a schema closely resembling that in the original post. I considered fragmenting this schema into seperate context types such as windows,  tabs etc, however I feel the former might be the overall cleaner solution.  Will be experimenting with both of this in code over the next week or so.\n\n> We may need to revisit how we store shada (e.g. as a sqlite database), but that could be considered an \"output format\" and doesn't necessarily change the story for sessions/views: they all route through the context.c and/or shada subsystem, but may be written to disk in different formats?\n\nI agree, i dont think the output format matters too much here, as long as the boilerplate is in place to enable this.\n\n",
            "created_at": "2025-05-28T23:22:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/34204#issuecomment-2917828887",
            "id": 2917828887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34204",
            "node_id": "IC_kwDOAPphoM6t6okX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2917828887/reactions"
            },
            "updated_at": "2025-05-28T23:22:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2917828887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/115141708?v=4",
                "events_url": "https://api.github.com/users/rijulkap/events{/privacy}",
                "followers_url": "https://api.github.com/users/rijulkap/followers",
                "following_url": "https://api.github.com/users/rijulkap/following{/other_user}",
                "gists_url": "https://api.github.com/users/rijulkap/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rijulkap",
                "id": 115141708,
                "login": "rijulkap",
                "node_id": "U_kgDOBtzsTA",
                "organizations_url": "https://api.github.com/users/rijulkap/orgs",
                "received_events_url": "https://api.github.com/users/rijulkap/received_events",
                "repos_url": "https://api.github.com/users/rijulkap/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rijulkap/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rijulkap/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rijulkap",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Another thing that *might* be worth taking into account here is potential `:restart` command (#33953, #32484). I.e. it could be extra convenient if the updated session approach is available for `:restart` to save+restore current buffers+layout.",
            "created_at": "2025-05-29T07:48:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/34204#issuecomment-2918605670",
            "id": 2918605670,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34204",
            "node_id": "IC_kwDOAPphoM6t9mNm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 4,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2918605670/reactions"
            },
            "updated_at": "2025-05-29T07:48:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2918605670",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Just mentioning could also potentially fix #32932 that I opened without needing to fix #31494.\n",
            "created_at": "2025-05-29T13:56:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/34204#issuecomment-2919494415",
            "id": 2919494415,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34204",
            "node_id": "IC_kwDOAPphoM6uA_MP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2919494415/reactions"
            },
            "updated_at": "2025-05-29T13:56:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2919494415",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/79522843?v=4",
                "events_url": "https://api.github.com/users/ymich9963/events{/privacy}",
                "followers_url": "https://api.github.com/users/ymich9963/followers",
                "following_url": "https://api.github.com/users/ymich9963/following{/other_user}",
                "gists_url": "https://api.github.com/users/ymich9963/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ymich9963",
                "id": 79522843,
                "login": "ymich9963",
                "node_id": "MDQ6VXNlcjc5NTIyODQz",
                "organizations_url": "https://api.github.com/users/ymich9963/orgs",
                "received_events_url": "https://api.github.com/users/ymich9963/received_events",
                "repos_url": "https://api.github.com/users/ymich9963/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ymich9963/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ymich9963/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ymich9963",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Another thing that _might_ be worth taking into account here is potential `:restart` command ([#33953](https://github.com/neovim/neovim/pull/33953), [#32484](https://github.com/neovim/neovim/issues/32484)). I.e. it could be extra convenient if the updated session approach is available for `:restart` to save+restore current buffers+layout.\n\nAbsolutely, we should capture this in the scope of this feature. By default sessions do not automatically update as changes are made to windows/buffers, but if you use a plugin like @echasnovski's `mini.sessions` which _does_ automatically update session files, `:restart` becomes _much_ more useful. So any rewrite to the \"sessions\" concept should be sure to automatically update sessions (with optional opt-out for users who want the old behavior for whatever reason).",
            "created_at": "2025-06-02T15:00:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/34204#issuecomment-2931148919",
            "id": 2931148919,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34204",
            "node_id": "IC_kwDOAPphoM6utch3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2931148919/reactions"
            },
            "updated_at": "2025-06-02T15:00:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2931148919",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> So any rewrite to the \"sessions\" concept should be sure to automatically update sessions (with optional opt-out for users who want the old behavior for whatever reason).\n\nThis potentially can be solved by [custom `VimLeave` / `VimEnter` one-line autocommands](https://github.com/neovim/neovim/pull/33953#issuecomment-2930441308). Or just update `:restart` to have this behavior while `:restart!` would not preserve current layout.",
            "created_at": "2025-06-02T15:06:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/34204#issuecomment-2931172217",
            "id": 2931172217,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34204",
            "node_id": "IC_kwDOAPphoM6utiN5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2931172217/reactions"
            },
            "updated_at": "2025-06-02T15:06:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2931172217",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34204/comments",
    "created_at": "2025-05-27T12:16:57Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34204/events",
    "html_url": "https://github.com/neovim/neovim/issues/34204",
    "id": 3093724775,
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "compatibility with Vim or older Neovim",
            "id": 109899712,
            "name": "compatibility",
            "node_id": "MDU6TGFiZWwxMDk4OTk3MTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/compatibility"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "save/restore editor state: shada, context, ctx, sessions, mksession",
            "id": 4449264023,
            "name": "editor-state",
            "node_id": "LA_kwDOAPphoM8AAAABCTJhlw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor-state"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34204/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 280,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 325,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-06-02T23:00:27Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM64Zn5n",
    "number": 34204,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34204/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34204/timeline",
    "title": "Sessions: adding lua implemention to replace :mksession",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-06-02T15:06:11Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34204",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/115141708?v=4",
        "events_url": "https://api.github.com/users/rijulkap/events{/privacy}",
        "followers_url": "https://api.github.com/users/rijulkap/followers",
        "following_url": "https://api.github.com/users/rijulkap/following{/other_user}",
        "gists_url": "https://api.github.com/users/rijulkap/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rijulkap",
        "id": 115141708,
        "login": "rijulkap",
        "node_id": "U_kgDOBtzsTA",
        "organizations_url": "https://api.github.com/users/rijulkap/orgs",
        "received_events_url": "https://api.github.com/users/rijulkap/received_events",
        "repos_url": "https://api.github.com/users/rijulkap/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rijulkap/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rijulkap/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rijulkap",
        "user_view_type": "public"
    }
}