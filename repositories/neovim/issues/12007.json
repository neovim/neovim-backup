{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "The change to default STDIN handling from #2087 is very welcome, but the current situation leaves a whole set of possible use cases.\r\n\r\nConsider a pattern like this:\r\n\r\n```\r\nfind -type d | while read dir; do (cd $dir && zsh -i); done\r\n```\r\n\r\nThis is greatly simplified from actual usage and obviously if I was _only_ trying to run Neovim just passing it a list of files would be better, but in cases where other activities need to be done semi-manually, I use this kind of loop frequently to open interactive shells in all the places that need work.\r\n\r\nNow if in that shell instance I run `nvim MYFILE`, it will open two buffers, one with whatever was remaining that `while read` hadn't read from STDIN yet, and one with the requested file. This is very obnoxious because it ruins the rest of the pipeline.\r\n\r\nA current work around is to only ever launch with `nvim MYFILE < /dev/null` so that the STDIN read by nvim is not any pending parent loop input but an empty one of its own.\r\n\r\nIt would be nice to be able to set an environment variable or pass a flag of some kind to suppress any attempt to read STDIN.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> Now if in that shell instance I run nvim MYFILE, it will open two buffers, one with whatever was remaining that while read hadn't read from STDIN yet, and one with the requested file. This is very obnoxious because it ruins the rest of the pipeline.\r\n\r\nHmm, but what does `zsh -i` do here? Is it using some trick to read from the controlling terminal (like using stderr as stdin), but it does not pass it on to its children? ",
            "created_at": "2020-03-12T11:24:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/12007#issuecomment-598135838",
            "id": 598135838,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12007",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODEzNTgzOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/598135838/reactions"
            },
            "updated_at": "2020-03-12T11:24:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/598135838",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bfredl In this case `zsh -i` does nothing special really, it just launches a new interactive shell. That's not the cause of the mixup I don't think because the same problem manifests if that step is not involved at all:\r\n\r\n```\r\necho \"a\\nb\" | while read file; do nvim $file; done\r\n```\r\n\r\nThis will not open up file a, then after closure open file b as expected, it will open up file a in a buffer, but then open up an unnamed buffer and read in \"b\" from STDIN.\r\n\r\nI would like one or both methods like this to work:\r\n\r\n```\r\n# Env method\r\nexport NVIM_NO_STDIN=true\r\necho \"a\\nb\" | while read file; do nvim $file; done\r\n\r\n# Arg method\r\necho \"a\\nb\" | while read file; do nvim --no-stdin $file; done\r\n```\r\n\r\nObviously this exact case isn't how you would use it because you could just pass both files `echo \"a\\nb\" | xargs nvim`, but this is a simplified example from more complex real world examples where it would actually be useful.",
            "created_at": "2020-03-12T14:29:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/12007#issuecomment-598218896",
            "id": 598218896,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12007",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODIxODg5Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/598218896/reactions"
            },
            "updated_at": "2020-03-12T14:30:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/598218896",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/173595?v=4",
                "events_url": "https://api.github.com/users/alerque/events{/privacy}",
                "followers_url": "https://api.github.com/users/alerque/followers",
                "following_url": "https://api.github.com/users/alerque/following{/other_user}",
                "gists_url": "https://api.github.com/users/alerque/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/alerque",
                "id": 173595,
                "login": "alerque",
                "node_id": "MDQ6VXNlcjE3MzU5NQ==",
                "organizations_url": "https://api.github.com/users/alerque/orgs",
                "received_events_url": "https://api.github.com/users/alerque/received_events",
                "repos_url": "https://api.github.com/users/alerque/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/alerque/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/alerque/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/alerque",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  In this case zsh -i does nothing special really, it just launches a new interactive shell. That's not the cause of the mixup I don't think because the same problem manifests if that step is not involved at all:\r\n\r\nBut the shell must do \"something special\" for you, because otherwise it would have exactly the same problem as nvim. Normally, a shell reads commands from stdin. When I try it `zsh` just hangs actually (100% CPU loop). \r\n\r\n`--no-stdin` is not much shorter than `< /dev/null` though. we probably want a short option if there be a point to it.",
            "created_at": "2020-03-12T14:59:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/12007#issuecomment-598235943",
            "id": 598235943,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12007",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODIzNTk0Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/598235943/reactions"
            },
            "updated_at": "2020-03-12T14:59:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/598235943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/12007/comments",
    "created_at": "2020-03-12T10:55:54Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/12007/events",
    "html_url": "https://github.com/neovim/neovim/issues/12007",
    "id": 579855250,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/12007/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1Nzk4NTUyNTA=",
    "number": 12007,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/12007/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/12007/timeline",
    "title": "Add flag and environment variable to _not_ touch STDIN",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-02T08:58:27Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/12007",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/173595?v=4",
        "events_url": "https://api.github.com/users/alerque/events{/privacy}",
        "followers_url": "https://api.github.com/users/alerque/followers",
        "following_url": "https://api.github.com/users/alerque/following{/other_user}",
        "gists_url": "https://api.github.com/users/alerque/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/alerque",
        "id": 173595,
        "login": "alerque",
        "node_id": "MDQ6VXNlcjE3MzU5NQ==",
        "organizations_url": "https://api.github.com/users/alerque/orgs",
        "received_events_url": "https://api.github.com/users/alerque/received_events",
        "repos_url": "https://api.github.com/users/alerque/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/alerque/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alerque/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/alerque",
        "user_view_type": "public"
    }
}