{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nThere are a number of plugins out there that are mapping things to the most common shortcuts, like `<CR>`, `<Tab>`, etc.\nAdding that kind of mapping to your own plugin or configuration, and have it work well with other plugins that do the same, is very complicated.\nFor example, we can see [this crazy workaround](https://github.com/hrsh7th/nvim-cmp/blob/main/lua/cmp/utils/keymap.lua) that nvim-cmp uses to be able to map these things. \n\nThere is same issue created a decade ago that got postponed due to other things being a priority: https://github.com/neovim/neovim/issues/159\n\nI tried searching something similar on Vim repo, but no luck.\n\n\n### Expected behavior\n\nIdeally, this would be something that would work for both Vim and Neovim, but that's probably not possible because of Vimscript and some other factors, so having a Neovim only solution would probably be sufficient for the most part.\n\nMy idea is to have a built-in function that looks something like this:\n```lua\n-- for example nvim-cmp adds this:\nvim.keymap.append('i', '<CR>', function()\n  if cmp.visible() then\n    -- Select the item and insert it, but do not add a line\n    cmp.accept()\n  end\n\n  -- Continue the chain\n  return true\nend, { priority = 2 })\n\n-- some autopairs plugin:\nvim.keymap.append('i', '<CR>', function()\n  if autopairs.should_expand() then\n    -- Do expanding logic\n    -- return false to stop the chain, since expanding logic already added a new line\n    return false\n  end\n\n  return true\nend, { priority = 3 })\n```\n\nBriefly:\n1. Mapping uses an `append` method on `vim.keymap` (`append` name is just an example)\n2. If it returns `true`, it means that the chain can continue\n3. If it returns `false`, mappings with lower priority are not executed, chain stops\n4. If none of the entries in the chain returns false, do the default mapping\n\nImplementation wise, it would be something like this (very simplified):\n1. First call to `append` creates a mapping for that mode+shortcut+buffer/global, and sets up a chain with that one callback\n2. Every other `append` with the same mode+shortcut+buffer/global just adds the new callback to the chain\n\nThere are a few of things that are not handled with this approach, like:\n1. Compatibility with Vim\n2. Handling `expr` mappings\n3. Handling non-callback mappings\n4. Buffer scoped/global mappings\n5. Same priority entries\n6. Possible duplicate entries, in case the code that adds the mapping is sourced multiple times\n\nAnd some of the possible workarounds for these:\n2. If having an `expr` mapping is needed, plugin creator (or whoever needs it) should handle that with `feedkeys` or however it suits them.\n    Or have the non-boolean value returned considered a `false`, where expr would be evaluated and chain would stop\n4. Probably just leave them separate as it is now and have buffer mapping have a priority over global mapping\n5. Throw an error if this happens, or show a warning and push the same entry one priority level below\n6. Allow setting an `id` for the mapping to prevent this\n\n\nAt this point, Neovim plugin ecosystem is big enough to have most of the vimscript plugins ported to Lua, so conflicts and forced overrides as we have them now could be resolved.\n\nIf this is something that Neovim team would agree to add to the core, I could start working on a PR.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I am fundamentally opposed to plugins overriding mappings. I believe that mappings should be defined by the user. Although `nvim-cmp` is making an effort to handle this well, it is not perfect. Would incorporating similar functionality into the core solve the problem?\n\nIf such a chaining handler is to be defined, I believe that users should be able to control the order of application.",
            "created_at": "2025-01-31T00:54:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2626043350",
            "id": 2626043350,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6chj3W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626043350/reactions"
            },
            "updated_at": "2025-01-31T00:57:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626043350",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\n\n\n> If it returns `false`, mappings with lower priority are not executed, chain stops\n\nIt's straightforward to implement this already as a plugin. Keymaps can bind to Lua functions after all.\n\nAFAICT unless all mappings onboard to this new scheme, it doesn't really gain anything. And if you are going to migrate all your mappings to this, then it's equivalent to doing it as a plugin.\n\n\n\n> There is same issue created a decade ago that got postponed due to other things being a priority: [#159](https://github.com/neovim/neovim/issues/159)\n\nThat's already supported by the relatively new `maparg()` function. Ergonomics enhanced by: https://github.com/neovim/neovim/pull/29464\n\n# Proposal\n\nSomewhere in the issues/PRs I have vaguely speculated about the concept of a mapping \"stack\". More generically, a \"scope stack\" (nested scopes). This would avoid needing to save/restore existing mappings in a given scope (global/buffer).\n\n- https://github.com/neovim/neovim/issues/32261#issuecomment-2635417146\n- https://github.com/neovim/neovim/issues/992#issuecomment-2577779050",
            "created_at": "2025-01-31T10:23:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2626858431",
            "id": 2626858431,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6ckq2_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626858431/reactions"
            },
            "updated_at": "2025-02-05T15:15:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626858431",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It's straightforward to implement this already as a plugin. Keymaps can bind to Lua functions after all.\n> AFAICT unless all mappings onboard to this new scheme, it doesn't really gain anything. \n\nI agree it can be done as a plugin. But then all the plugins that need this functionality needs to have a dependency on that plugin, and I doubt anyone would want to do that. If it's in the core, adoption should be much better.\n\n> And if you are going to migrate all your mappings to this, then it's equivalent to doing it as a plugin.\n\nI'd say this is more for the plugins, and not for the user. There's no point for me to have this in my configuration, if the plugin will override my mapping in the \"old\" way. Of course, the user could append to this if they want to.\n\n> That's already supported by the relatively new maparg() function. Ergonomics enhanced by: https://github.com/neovim/neovim/pull/29464\n\nI believe this solves only part of the problem. It simplifies figuring out the mappings that need to be fallback to, but handling the fallback is still on the plugin.\n\n> Somewhere in the issues/PRs I have vaguely speculated about the concept of a mapping \"stack\". More generically, a \"scope stack\" (nested scopes). This would avoid needing to save/restore existing mappings in a given scope (global/buffer).\n>Does that address your use case?\n\nI'm not sure, but probably. \nAs long as each plugin does not need to figure out the old mappings, trigger own if necessary, and do the fallback, I think the issue is solved.\n\nPlugins like nvim-cmp and blink.cmp (blink copied over the implementation) even sets up mappings on InsertEnter to ensure they get the priority. If everyone does this, it creates unnecesary complexity or potential issues.",
            "created_at": "2025-01-31T10:48:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2626910191",
            "id": 2626910191,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6ck3fv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626910191/reactions"
            },
            "updated_at": "2025-02-04T23:57:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626910191",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Plugins like nvim-cmp and blink.cmp (blink copied over the implementation) even sets up mappings on InsertEnter to ensure they get the priority. If everyone does this, it creates unnecesary complexity or potential issues.\n\nYikes. Yeah, that's not good. It's like bidding on z-index...",
            "created_at": "2025-01-31T17:23:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2627856946",
            "id": 2627856946,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6coeoy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627856946/reactions"
            },
            "updated_at": "2025-01-31T17:23:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627856946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "~~I think vimscript compatible also should be added, for example:~~\n\n~~`vim.keymap.set('n', 'Hello', function(opt) end, { nargs = '*', zindex = 10}`~~\n\n~~and~~\n\n~~`nnoremap <zindex=10> Hello :call Func()<Cr>`~~",
            "created_at": "2025-02-01T03:18:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2628736139",
            "id": 2628736139,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6cr1SL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628736139/reactions"
            },
            "updated_at": "2025-02-01T11:32:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628736139",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13142418?v=4",
                "events_url": "https://api.github.com/users/wsdjeg/events{/privacy}",
                "followers_url": "https://api.github.com/users/wsdjeg/followers",
                "following_url": "https://api.github.com/users/wsdjeg/following{/other_user}",
                "gists_url": "https://api.github.com/users/wsdjeg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wsdjeg",
                "id": 13142418,
                "login": "wsdjeg",
                "node_id": "MDQ6VXNlcjEzMTQyNDE4",
                "organizations_url": "https://api.github.com/users/wsdjeg/orgs",
                "received_events_url": "https://api.github.com/users/wsdjeg/received_events",
                "repos_url": "https://api.github.com/users/wsdjeg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wsdjeg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wsdjeg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wsdjeg",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "So, should I start working om PoC or this will be handled differently?",
            "created_at": "2025-02-04T08:27:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2633201712",
            "id": 2633201712,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6c83gw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2633201712/reactions"
            },
            "updated_at": "2025-02-04T23:57:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2633201712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If the PoC is small, then maybe it could help. But it's not clear to me what the goal is, yet. The original request here seems like a XY problem. \n\nUsing namespaces to define arbitrary scopes is something I think that is generally useful, so working towards that is probably productive. Even if it only applies to mappings initially (as opposed to other \"scopes\" applications, such as events, etc.)",
            "created_at": "2025-02-04T14:14:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2634094692",
            "id": 2634094692,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dARhk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2634094692/reactions"
            },
            "updated_at": "2025-02-05T00:07:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2634094692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Using namespaces to define arbitrary scopes is something I think that is generally useful, so working towards that is probably productive. Even if it only applies to mappings initially (as opposed to other \"scopes\" applications, such as events, etc.)\n\nCould you elaborate a bit more on this? I'm not sure how this addresses the issue. What is exactly scoped, and how?",
            "created_at": "2025-02-04T19:55:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2634930893",
            "id": 2634930893,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dDdrN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2634930893/reactions"
            },
            "updated_at": "2025-02-05T15:12:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2634930893",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Haven't thought deeply about it, but the idea is:\n\n- any script can declare a namespace via `nvim_create_namespace()`\n- namespaces can be \"stacked\"\n- the stack decides priority\n- the innermost item in the stack is the current \"scope\"\n- keymaps can be assigned to a namespace\n    - Nvim assigns the existing scopes (normal/visual/etc) to some default namespaces\n    - `vim.keymap.set(mode: string|number, ...)` accepts a namespace-id for the `mode` param\n\nYour example would look like:\n\n```lua\nlocal ns1 = vim.api.nvim_create_namespace('ns1')\nlocal ns2 = vim.api.nvim_create_namespace('ns2')\nvim.api.nvim__ns_set(ns1, { inherits=vim.ns.normal })\nvim.api.nvim__ns_set(ns2, { inherits=ns1 })\nvim.keymap.append(ns1, '<CR>', function() … end)\nvim.keymap.append(ns2, '<CR>', function() … end)\n```\n\n- if user inputs `<CR>` Nvim presents a menu of all the active mappings for that sequence.\n- plugin can clear/deactivate all mappings for a given scope: `nvim_clear_namespace(ns2)`\n- TODO:\n    - conflating modes (normal/visual/…) and scopes (buf/win/…), need to think about this.\n    - `inherits` might be the wrong model.",
            "created_at": "2025-02-05T00:10:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2635417146",
            "id": 2635417146,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dFUY6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2635417146/reactions"
            },
            "updated_at": "2025-02-05T00:11:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2635417146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> if user inputs <CR> Nvim presents a menu of all the active mappings for that sequence\n\nThis might solve some other issue, but it will drastically hinder the user experience for this issue. \n\nMost of the time these mappings need to be executed only if certain condition is met (pumvisible, expand autopair, expand the AI suggestion, etc.), and these are usually bound to shortcuts that are used often (<CR>, <Tab>, etc.), thus the need for executing multiple things with them. \n\nI don't see how could namespaces solve this issue.\n\nAn alternative is to allow scoping to certain context, where context would behave like a conditional, in a way. @Shougo mentioned same thing on the old issue https://github.com/neovim/neovim/issues/159#issuecomment-36115276 with the example how Sublime Text handles that.\n\n",
            "created_at": "2025-02-05T10:11:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2636292985",
            "id": 2636292985,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dIqN5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2636292985/reactions"
            },
            "updated_at": "2025-02-05T13:10:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2636292985",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Most of the time these mappings need to be executed only if certain condition is met (pumvisible, expand autopair, expand the AI suggestion, etc.),\n\nYou are describing a *mode*. The entire point of my (half-baked) proposal is to allow user-defined modes (by enhancing namespaces).\n\n> An alternative is to allow scoping to certain context, where context would behave like a conditional, in a way\n\nIn other words, a user-defined mode.",
            "created_at": "2025-02-05T13:10:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2636817699",
            "id": 2636817699,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dKqUj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2636817699/reactions"
            },
            "updated_at": "2025-02-05T13:12:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2636817699",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I agree with the idea of ​​considering this problem in two ways: \"layered key mappings\" and \"user-defined modes\".\n\nI also agree with justinmk's suggestion to use namespaces.\n\nThis allows plugins to provide submodes as namespaces, and users can just map them as normal.\n\n```\nlocal completion_engine = require('completion_engine')\n\nvim.keymap.set(completion_engine.mode, '<CR>', completion_engine.confirm);\n```\n\nThings I don't know yet\n\n- How can a plugin enable a mode?\n- How should the order be resolved when multiple modes are enabled at the same time?\n- How does `completion_engine.mode` relate to normal modes such as `i/n/x`?",
            "created_at": "2025-02-05T13:36:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2636874906",
            "id": 2636874906,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dK4Sa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2636874906/reactions"
            },
            "updated_at": "2025-02-05T13:36:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2636874906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> How can a plugin enable a mode?\n\n`nvim__ns_set(..., {enable=true})`, or maybe `nvim__ns_enable()`.\n\nOverlaps with:\n\n- https://github.com/neovim/neovim/issues/32329\n\n> How should the order be resolved when multiple modes are enabled at the same time?\n\n\"Innermost wins\". If mode B was just enabled, it takes precedence until deactivated or until another mode is activated. Like a \"stack\".\n\n> How does `completion_engine.mode` relate to normal modes such as `i/n/x`?\n\nWe probably don't need an answer for that, initially. Modes can be manually activated by plugins in `ModeChanged` handlers. There is an `inherits` (`parent`?) field in my above proposal, but again maybe it's only for ergonomics.",
            "created_at": "2025-02-05T15:09:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2637140122",
            "id": 2637140122,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dL5Ca",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2637140122/reactions"
            },
            "updated_at": "2025-02-05T15:11:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2637140122",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">> How can a plugin enable a mode?\n\n> nvim__ns_set(..., {enable=true}), or maybe nvim__ns_enable().\n\nHow would this exactly work? Owner of the namespace needs to dynamically enable/disable namespace depending on the context?\n\nFor example, if a completion plugin has own handler `completion.accept()` that needs to be triggered when `pumvisible() > 0`, and they want to bind `<CR>` to call that handler, they will need to hook into `TextChanged` event and toggle the namespace if `pumvisible() > 0`?\n \n\n",
            "created_at": "2025-02-05T16:02:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2637351527",
            "id": 2637351527,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dMspn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2637351527/reactions"
            },
            "updated_at": "2025-02-05T16:02:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2637351527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Owner of the namespace needs to dynamically enable/disable namespace depending on the context? ... For example, ... they will need to hook into `TextChanged` event and toggle the namespace if `pumvisible() > 0`?\n\nUser-defined \"anything\" means it is arbitrary. So I don't see any other way it could work :) Happy to hear other ideas though.",
            "created_at": "2025-02-05T16:05:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2637361053",
            "id": 2637361053,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dMu-d",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2637361053/reactions"
            },
            "updated_at": "2025-02-05T16:05:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2637361053",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> User-defined \"anything\" means it is arbitrary. So I don't see any other way it could work :) Happy to hear other ideas though.\n\nThat will work, just wanted to confirm that I understood it. It might create some overhead for certain situations to figure out the context, but it's an improvement nonetheless.\n\nBesides my initial suggestion, which is drastically simpler but less robust, I don't have any other idea.\n\nSince this feature is much more complex, I'll have to leave it to someone else. I'm not familiar with the lower level code, and my C skills are subpar.\n",
            "created_at": "2025-02-05T16:25:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2637415281",
            "id": 2637415281,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dM8Nx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2637415281/reactions"
            },
            "updated_at": "2025-02-05T16:25:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2637415281",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "A Lua-level implementation would likely be hacky, dealing with expr / nowait / recursive etc.\nIndeed, it looks like it would need to be implemented in the core.",
            "created_at": "2025-02-05T17:41:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2637603148",
            "id": 2637603148,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dNqFM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2637603148/reactions"
            },
            "updated_at": "2025-02-05T17:41:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2637603148",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This may be something @altermo is interested in.",
            "created_at": "2025-02-05T21:28:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2638064051",
            "id": 2638064051,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dPamz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2638064051/reactions"
            },
            "updated_at": "2025-02-05T21:28:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2638064051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think the user-defined submodes using namespaces are a good idea.\n\nApart from that, there are precedents for hierarchical mappings.\n\nhttps://github.com/hrsh7th/nvim-insx\nhttps://github.com/cohama/lexima.vim\n\nThese are plugins that provide logic to switch mappings depending on the context while in insert-mode.\n\nI don't think this should be provided as core, but it's worth considering.",
            "created_at": "2025-02-06T05:45:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2638890844",
            "id": 2638890844,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6dSkdc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2638890844/reactions"
            },
            "updated_at": "2025-02-06T05:45:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2638890844",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 19,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32261/comments",
    "created_at": "2025-01-30T17:38:37Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32261/events",
    "html_url": "https://github.com/neovim/neovim/issues/32261",
    "id": 2821431913,
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "key bindings",
            "id": 3304938718,
            "name": "mappings",
            "node_id": "MDU6TGFiZWwzMzA0OTM4NzE4",
            "url": "https://api.github.com/repos/neovim/neovim/labels/mappings"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "namespaces, user-defined scopes/modes",
            "id": 8080981599,
            "name": "namespaces-scopes",
            "node_id": "LA_kwDOAPphoM8AAAAB4an-Xw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/namespaces-scopes"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32261/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 261,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 303,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-02-06T07:38:20Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6oK6Jp",
    "number": 32261,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 2,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32261/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32261/timeline",
    "title": "Multiple handlers for single mapping",
    "updated_at": "2025-02-06T05:46:00Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32261",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
        "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
        "followers_url": "https://api.github.com/users/kristijanhusak/followers",
        "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
        "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/kristijanhusak",
        "id": 1782860,
        "login": "kristijanhusak",
        "node_id": "MDQ6VXNlcjE3ODI4NjA=",
        "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
        "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
        "repos_url": "https://api.github.com/users/kristijanhusak/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/kristijanhusak",
        "user_view_type": "public"
    }
}