{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nThere are a number of plugins out there that are mapping things to the most common shortcuts, like `<CR>`, `<Tab>`, etc.\nAdding that kind of mapping to your own plugin or configuration, and have it work well with other plugins that do the same, is very complicated.\nFor example, we can see [this crazy workaround](https://github.com/hrsh7th/nvim-cmp/blob/main/lua/cmp/utils/keymap.lua) that nvim-cmp uses to be able to map these things. \n\nThere is same issue created a decade ago that got postponed due to other things being a priority: https://github.com/neovim/neovim/issues/159\n\nI tried searching something similar on Vim repo, but no luck.\n\n\n### Expected behavior\n\nIdeally, this would be something that would work for both Vim and Neovim, but that's probably not possible because of Vimscript and some other factors, so having a Neovim only solution would probably be sufficient for the most part.\n\nMy idea is to have a built-in function that looks something like this:\n```lua\n-- for example nvim-cmp adds this:\nvim.keymap.append('i', '<CR>', function()\n  if cmp.visible() then\n    -- Select the item and insert it, but do not add a line\n    cmp.accept()\n  end\n\n  -- Continue the chain\n  return true\nend, { priority = 2 })\n\n-- some autopairs plugin:\nvim.keymap.append('i', '<CR>', function()\n  if autopairs.should_expand() then\n    -- Do expanding logic\n    -- return false to stop the chain, since expanding logic already added a new line\n    return false\n  end\n\n  return true\nend, { priority = 3 })\n```\n\nBriefly:\n1. Mapping uses an `append` method on `vim.keymap` (`append` name is just an example)\n2. If it returns `true`, it means that the chain can continue\n3. If it returns `false`, mappings with lower priority are not executed, chain stops\n4. If none of the entries in the chain returns false, do the default mapping\n\nImplementation wise, it would be something like this (very simplified):\n1. First call to `append` creates a mapping for that mode+shortcut+buffer/global, and sets up a chain with that one callback\n2. Every other `append` with the same mode+shortcut+buffer/global just adds the new callback to the chain\n\nThere are a few of things that are not handled with this approach, like:\n1. Compatibility with Vim\n2. Handling `expr` mappings\n3. Handling non-callback mappings\n4. Buffer scoped/global mappings\n5. Same priority entries\n6. Possible duplicate entries, in case the code that adds the mapping is sourced multiple times\n\nAnd some of the possible workarounds for these:\n2. If having an `expr` mapping is needed, plugin creator (or whoever needs it) should handle that with `feedkeys` or however it suits them.\n    Or have the non-boolean value returned considered a `false`, where expr would be evaluated and chain would stop\n4. Probably just leave them separate as it is now and have buffer mapping have a priority over global mapping\n5. Throw an error if this happens, or show a warning and push the same entry one priority level below\n6. Allow setting an `id` for the mapping to prevent this\n\n\nAt this point, Neovim plugin ecosystem is big enough to have most of the vimscript plugins ported to Lua, so conflicts and forced overrides as we have them now could be resolved.\n\nIf this is something that Neovim team would agree to add to the core, I could start working on a PR.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I am fundamentally opposed to plugins overriding mappings. I believe that mappings should be defined by the user. Although `nvim-cmp` is making an effort to handle this well, it is not perfect. Would incorporating similar functionality into the core solve the problem?\n\nIf such a chaining handler is to be defined, I believe that users should be able to control the order of application.",
            "created_at": "2025-01-31T00:54:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2626043350",
            "id": 2626043350,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6chj3W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626043350/reactions"
            },
            "updated_at": "2025-01-31T00:57:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626043350",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\n\n\n> If it returns `false`, mappings with lower priority are not executed, chain stops\n\nIt's straightforward to implement this already as a plugin. Keymaps can bind to Lua functions after all.\n\nAFAICT unless all mappings onboard to this new scheme, it doesn't really gain anything. And if you are going to migrate all your mappings to this, then it's equivalent to doing it as a plugin.\n\n\n\n> There is same issue created a decade ago that got postponed due to other things being a priority: [#159](https://github.com/neovim/neovim/issues/159)\n\nThat's already supported by the relatively new `maparg()` function. Ergonomics enhanced by: https://github.com/neovim/neovim/pull/29464\n\n# Proposal\n\nSomewhere in the issues/PRs I have vaguely speculated about the concept of a mapping \"stack\". More generically, a \"scope stack\" (nested scopes). This would avoid needing to save/restore existing mappings in a given scope (global/buffer).\n\nDoes that address your use case?",
            "created_at": "2025-01-31T10:23:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2626858431",
            "id": 2626858431,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6ckq2_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626858431/reactions"
            },
            "updated_at": "2025-01-31T10:23:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626858431",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It's straightforward to implement this already as a plugin. Keymaps can bind to Lua functions after all.\n> AFAICT unless all mappings onboard to this new scheme, it doesn't really gain anything. \n\nI agree it can be done as a plugin. But then all the plugins that need this functionality needs to have a dependency on that plugin, and I doubt anyone would want to do that. If it's in the core, adoption should be much better.\n\n> And if you are going to migrate all your mappings to this, then it's equivalent to doing it as a plugin.\n\nI'd say this is more for the plugins, and not for the user. There's no point for me to have this in my configuration, if the plugin will override my mapping in the \"old\" way. Of course, the user could append to this if they want to.\n\n> That's already supported by the relatively new maparg() function. Ergonomics enhanced by: https://github.com/neovim/neovim/pull/29464\n\nI believe this solves only part of the problem. It simplifies figuring out the mappings that need to be fallback to, but handling the fallback is still on the plugin.\n\n> Somewhere in the issues/PRs I have vaguely speculated about the concept of a mapping \"stack\". More generically, a \"scope stack\" (nested scopes). This would avoid needing to save/restore existing mappings in a given scope (global/buffer).\n>Does that address your use case?\n\nI'm not sure, but probably. \nAs long as each plugin does not need to figure out the old mappings, trigger own if necessary, and do the fallback, I think the issue is solved.\n\nPlugins like nvim-cmp and blink.cmp (blink copied over the implementation) even sets up mappings on InsertEnter to ensure they get the priority. If everyone does this, it creates unnecesary complexity or potential issues.",
            "created_at": "2025-01-31T10:48:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2626910191",
            "id": 2626910191,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6ck3fv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626910191/reactions"
            },
            "updated_at": "2025-01-31T10:49:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2626910191",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
                "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
                "followers_url": "https://api.github.com/users/kristijanhusak/followers",
                "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
                "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kristijanhusak",
                "id": 1782860,
                "login": "kristijanhusak",
                "node_id": "MDQ6VXNlcjE3ODI4NjA=",
                "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
                "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
                "repos_url": "https://api.github.com/users/kristijanhusak/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kristijanhusak",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Plugins like nvim-cmp and blink.cmp (blink copied over the implementation) even sets up mappings on InsertEnter to ensure they get the priority. If everyone does this, it creates unnecesary complexity or potential issues.\n\nYikes. Yeah, that's not good. It's like bidding on z-index...",
            "created_at": "2025-01-31T17:23:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2627856946",
            "id": 2627856946,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6coeoy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627856946/reactions"
            },
            "updated_at": "2025-01-31T17:23:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2627856946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "~~I think vimscript compatible also should be added, for example:~~\n\n~~`vim.keymap.set('n', 'Hello', function(opt) end, { nargs = '*', zindex = 10}`~~\n\n~~and~~\n\n~~`nnoremap <zindex=10> Hello :call Func()<Cr>`~~",
            "created_at": "2025-02-01T03:18:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/32261#issuecomment-2628736139",
            "id": 2628736139,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32261",
            "node_id": "IC_kwDOAPphoM6cr1SL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628736139/reactions"
            },
            "updated_at": "2025-02-01T11:32:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628736139",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13142418?v=4",
                "events_url": "https://api.github.com/users/wsdjeg/events{/privacy}",
                "followers_url": "https://api.github.com/users/wsdjeg/followers",
                "following_url": "https://api.github.com/users/wsdjeg/following{/other_user}",
                "gists_url": "https://api.github.com/users/wsdjeg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wsdjeg",
                "id": 13142418,
                "login": "wsdjeg",
                "node_id": "MDQ6VXNlcjEzMTQyNDE4",
                "organizations_url": "https://api.github.com/users/wsdjeg/orgs",
                "received_events_url": "https://api.github.com/users/wsdjeg/received_events",
                "repos_url": "https://api.github.com/users/wsdjeg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wsdjeg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wsdjeg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wsdjeg",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32261/comments",
    "created_at": "2025-01-30T17:38:37Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/32261/events",
    "html_url": "https://github.com/neovim/neovim/issues/32261",
    "id": 2821431913,
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "key bindings",
            "id": 3304938718,
            "name": "mappings",
            "node_id": "MDU6TGFiZWwzMzA0OTM4NzE4",
            "url": "https://api.github.com/repos/neovim/neovim/labels/mappings"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "namespaces, scopes",
            "id": 8080981599,
            "name": "namespaces-scopes",
            "node_id": "LA_kwDOAPphoM8AAAAB4an-Xw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/namespaces-scopes"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/32261/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 260,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 303,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-02-03T09:10:02Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6oK6Jp",
    "number": 32261,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/32261/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/32261/timeline",
    "title": "Multiple handlers for single mapping",
    "updated_at": "2025-02-01T11:32:37Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/32261",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1782860?v=4",
        "events_url": "https://api.github.com/users/kristijanhusak/events{/privacy}",
        "followers_url": "https://api.github.com/users/kristijanhusak/followers",
        "following_url": "https://api.github.com/users/kristijanhusak/following{/other_user}",
        "gists_url": "https://api.github.com/users/kristijanhusak/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/kristijanhusak",
        "id": 1782860,
        "login": "kristijanhusak",
        "node_id": "MDQ6VXNlcjE3ODI4NjA=",
        "organizations_url": "https://api.github.com/users/kristijanhusak/orgs",
        "received_events_url": "https://api.github.com/users/kristijanhusak/received_events",
        "repos_url": "https://api.github.com/users/kristijanhusak/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/kristijanhusak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kristijanhusak/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/kristijanhusak",
        "user_view_type": "public"
    }
}