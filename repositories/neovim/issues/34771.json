{
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski",
            "user_view_type": "public"
        }
    ],
    "author_association": "MEMBER",
    "body": "There are several areas where behavior of `vim.pack.add()` can be improved:\n\n1. Make it enforce plugin state on disk to be the one specified in plugin spec. I.e. enforce `spec.src` and `spec.version`. This allows a more straightforward switching to different branch/tag/version: edit 'init.lua' and `:restart`. Currently it requires extra step of `vim.pack.update()` (which needs internet connection) to \"sync\" plugin on disk with to have proper `version`.\n\n    To not affect startup performance, this requires having a persistent on-disk storage of the plugin state (to be able to even detect the value change).\n\n    The cost of this \"enforce state\" approach is that users can not see beforehand and confirm/deny which changes will be applied. They would still be present in the log file for inspection, though. Relevant discussion is [here](https://github.com/neovim/neovim/pull/34009#discussion_r2094170341).\n\n2. Decide how to treat several `vim.pack.add()` calls for the same plugin in the same session. Should it always force the state on disk or should it error for any second+ call for the same plugin (forcing to go \"edit init.lua and restart\" route)?",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> edit 'init.lua' and `:restart`. Currently it requires extra step of `vim.pack.update()`\n\nI wouldn't index much on this. Before we release Nvim 0.12, `:restart` will support arbitrary \"startup script\", so you can do `:restart lua vim.pack.update()` to run update() after restart. #34822\n\nDoes that change the urgency of this use-case?\n\n> this requires having a persistent on-disk storage of the plugin state\n\nIs there a risk of conflicts with other running Nvim instances? \n\n> 2\\. Decide how to treat several `vim.pack.add()` calls for the same plugin in the same session. Should it always force the state on disk or should it error for any second+ call\n\nerror",
            "created_at": "2025-07-06T23:28:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/34771#issuecomment-3043138460",
            "id": 3043138460,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34771",
            "node_id": "IC_kwDOAPphoM61Ypuc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043138460/reactions"
            },
            "updated_at": "2025-07-07T11:44:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043138460",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I wouldn't index much on this. Before we release Nvim 0.12, `:restart` will support arbitrary \"startup script\", so you can do `:restart lua vim.pack.update()` to run update() after restart.\n> \n> Does that change the urgency of this use-case?\n\nIt might, but the main problem here is that `vim.pack.update()` currently requires Internet access (as it's primary goal is to fetch and apply updates from source). So if the user decides to switch branch/tag/version, there should be Internet access. Which is not a huge deal in modern age, but not clean.\n\nThe original PR had `vim.pack.update()` include `opts.offline` for this kind of cases, but it was decided to wait with it. At least until there is more clarity with maybe `vim.pack.add()` being responsible for it (after there is lockfile support).\n\n> > this requires having a persistent on-disk storage of the plugin state\n> \n> Is there a risk of conflicts with other running Nvim instances?\n\nThere might be, yes. The same as with shada, swap files, and other similar mechanisms.\n\n> > 2. Decide how to treat several `vim.pack.add()` calls for the same plugin in the same session. Should it always force the state on disk or should it error for any second+ call\n> \n> error\n\nThis is the easiest solution, yes. It might not be that simple, though (as I've remembered now). The main use case for allowing several `vim.pack.add()` calls for the same plugin (name) in the same session is to allow a more modular configs with dependencies. Something like this:\n\n```lua\n-- File '~/.config/nvim/plugin/telescope.lua'\nvim.pack.add({\n  'https://github.com/nvim-lua/plenary.nvim',\n  'https://github.com/nvim-telescope/telescope.nvim',\n})\n\n-- File '~/.config/nvim/plugin/avante.lua'\nvim.pack.add({\n  'https://github.com/nvim-lua/plenary.nvim',\n  'https://github.com/yetone/avante.nvim',\n})\n```\n\nEach file here is made self-contained by including all dependencies. Additionally, in theory, there might be different version constraints for the same dependency: if they point to different branch/tag - error, if version ranges - use intersection.\n\nNow the behavior is that second+ call for the active plugin (i.e. which was previously `vim.pack.add()`ed) is just silently ignored. I.e. \"first call wins\" and no checks for `version` / `src` compatibility is done across different `vim.pack.add()` calls.",
            "created_at": "2025-07-07T08:35:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/34771#issuecomment-3043987557",
            "id": 3043987557,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34771",
            "node_id": "IC_kwDOAPphoM61b5Bl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043987557/reactions"
            },
            "updated_at": "2025-07-07T08:35:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043987557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Is there a risk of conflicts with other running Nvim instances?\n> \n> There might be, yes. The same as with shada, swap files,\n\nShould we use shada to store this vim.pack state? (shada has its own \"conflict\" issues, but we probably want to solve that once for shada rather than for many different state-persistence mechanisms)",
            "created_at": "2025-07-07T11:46:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/34771#issuecomment-3044672445",
            "id": 3044672445,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34771",
            "node_id": "IC_kwDOAPphoM61egO9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3044672445/reactions"
            },
            "updated_at": "2025-07-07T11:46:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3044672445",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Should we use shada to store this vim.pack state? (shada has its own \"conflict\" issues, but we probably want to solve that once for shada rather than for many different state-persistence mechanisms)\n\nIt might be doable, but I think will add avoidable friction at least initially. My thought is that it might be reasonable to store this kind of information (`src` and `version`) in the \"public\" lockfile together with explicit hash state, but not yet sure. I plan to discuss in #34776  the structure of how to store \"public\" and \"private\" persistent data, but can't express my thoughts concisely yet.",
            "created_at": "2025-07-07T11:52:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/34771#issuecomment-3044691543",
            "id": 3044691543,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34771",
            "node_id": "IC_kwDOAPphoM61ek5X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3044691543/reactions"
            },
            "updated_at": "2025-07-07T11:53:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3044691543",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34771/comments",
    "created_at": "2025-07-04T13:18:37Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/34771/events",
    "html_url": "https://github.com/neovim/neovim/issues/34771",
    "id": 3202729790,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "bfd4f2",
            "default": false,
            "description": "vim.pack, start/opt packages, 'packpath'",
            "id": 8889050758,
            "name": "packages",
            "node_id": "LA_kwDOAPphoM8AAAACEdQmhg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/packages"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/34771/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6-5cc-",
    "number": 34771,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/34771/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/34771/timeline",
    "title": "More strict behavior of `vim.pack.add()`",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-07-07T11:53:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/34771",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}