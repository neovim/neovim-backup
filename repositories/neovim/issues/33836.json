{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nI am working on a plugin that uses zig ffi to render information to a buffer. Internally, to prevent everything from becoming a mess, I store the characters as a grid of single-width cells that hold a character as a `u21`, then convert them back to `[]u8` when rendering to the buffer. Double width characters are stored in one cell, and the cell following them is blank. When converting a `[]const u8` that is passed from lua to the internal representation, I use nvim_strwidth to determine if a character is double-width. To do this, I wrote a small wrapper around nvim_strwidth that takes a `[]const u8` and converts it to nvim's `String` struct before passing it to `nvim_strwidth`. However, when calling this function on a slice of a string, it returns the length of the entire string rather than the slice. When I looked at the implementation, nvim_strwidth internally calls `mb_string2cells(const char*)` which does not take a length parameter and instead reads until a 0 byte. Since nvim_strwidth implicitly accepts a length parameter (via the String struct) it feels like nvim_strwidth should respect the string length. \n\nHere's some example code that demonstrates this bug being triggered, with a simplification of my zig wrapper code:\n```zig\npub const String = extern struct {\n    data: [*]allowzero const u8,\n    size: u64,\n    pub fn fromSlice(slice: []const u8) String {\n        return .{\n            .data = slice.ptr,\n            .size = slice.len,\n        };\n    }\n};\npub const ErrorType = enum(c_int) {\n    None = -1,\n    Exception,\n    Validation,\n};\npub const Error = extern struct {\n    type: ErrorType,\n    msg: [*]allowzero const u8,\n    pub const empty: Error = .{\n        .type = .None,\n        .msg = @ptrFromInt(0),\n    };\n};\npub const Integer = i64;\nextern fn nvim_strwidth(str: String, err: *Error) callconv(.C) Integer;\npub fn strwidth(str: []const u8) Integer {\n    var err: Error = .empty;\n\n    const ret = nvim_strwidth(String.fromSlice(str), &err);\n\n    return ret;\n}\n\npub fn triggerBug() void {\n    const str = \"asdf\";\n\n    // should be 1, but is actually 4\n    const width = strwidth(str[0..1]);\n}\n```\n\nThe `mb_string2cells_len(const char*, size_t)` function already exists so it should be fairly trivial to convert `nvim_strwidth` to use that. I could whip up a pr for that if y'all want. However, if this behavior of reading until a 0 byte is expected, I feel like there should be some documentation on that\n\n\n\n### Steps to reproduce\n\nCreate a file called bug.zig that contains the following:\n\n```zig\npub const String = extern struct {\n    data: [*]allowzero const u8,\n    size: u64,\n    pub fn fromSlice(slice: []const u8) String {\n        return .{\n            .data = slice.ptr,\n            .size = slice.len,\n        };\n    }\n};\npub const ErrorType = enum(c_int) {\n    None = -1,\n    Exception,\n    Validation,\n};\npub const Error = extern struct {\n    type: ErrorType,\n    msg: [*]allowzero const u8,\n    pub const empty: Error = .{\n        .type = .None,\n        .msg = @ptrFromInt(0),\n    };\n};\npub const Integer = i64;\nextern fn nvim_strwidth(str: String, err: *Error) callconv(.C) Integer;\npub fn strwidth(str: []const u8) Integer {\n    var err: Error = .empty;\n\n    const ret = nvim_strwidth(String.fromSlice(str), &err);\n\n    return ret;\n}\n\npub export fn triggerBug() c_int {\n    const str = \"asdf\";\n\n    // should be 1, but is actually 4\n    const width = strwidth(str[0..1]);\n    return @intCast(width);\n}\n```\n\nBuild it with `zig build-lib bug.zig -femit-bin=libbug.so -dynamic`\n\nCreate a lua file called bug.lua with the following contents:\n\n```lua\nlocal ffi = require(\"ffi\")\n\nffi.cdef([[\n    int triggerBug();\n]])\n\nlocal so = ffi.load(\"./libbug.so\")\n\nprint(so.triggerBug())\n```\n\nThen execute the lua file with `:so bug.lua`. The number 4 will be printed instead of the number 1\n\n### Expected behavior\n\nnvim_strwidth should respect the length field of the input String object\n\n### Nvim version (nvim -v)\n\nv0.12.0-dev-207+gac8ae1596c\n\n### Vim (not Nvim) behaves the same?\n\nvim does not have this api\n\n### Operating system/version\n\narch linux\n\n### Terminal name/version\n\nGhostty 1.1.3-arch1\n\n### $TERM environment variable\n\nscreen-256color\n\n### Installation\n\nThis is installed from the bob neovim version manager",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This was changed in 677d30d7966dd2766bbf20665791c568dacc427a",
            "created_at": "2025-05-04T05:58:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/33836#issuecomment-2849026780",
            "id": 2849026780,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33836",
            "node_id": "IC_kwDOAPphoM6p0LLc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849026780/reactions"
            },
            "updated_at": "2025-05-04T05:58:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849026780",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Do we actually still need `nvim_strwidth()`? I see its codepath (`mb_string2cells`) is much simpler than `f_strdisplaywidth`, I guess because `nvim_strwidth()` doesn't consider the current window, but doesn't that make it rather questionable? What \"display\" is it referring to?\n\nI guess the answer is, `mb_string2cells` is useful and not something scripts should have to reinvent. But the docs should clarify the difference of `nvim_strwidth` vs `strdisplaywidth`.",
            "created_at": "2025-05-04T12:31:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/33836#issuecomment-2849192372",
            "id": 2849192372,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33836",
            "node_id": "IC_kwDOAPphoM6p0zm0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849192372/reactions"
            },
            "updated_at": "2025-05-04T12:34:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849192372",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33836/comments",
    "created_at": "2025-05-04T05:35:54Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33836/events",
    "html_url": "https://github.com/neovim/neovim/issues/33836",
    "id": 3037791655,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33836/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM61EQWn",
    "number": 33836,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33836/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33836/timeline",
    "title": "API: nvim_strwidth does not respect the length of the input String parameter",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-05-04T12:34:38Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33836",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/98367120?v=4",
        "events_url": "https://api.github.com/users/CWood-sdf/events{/privacy}",
        "followers_url": "https://api.github.com/users/CWood-sdf/followers",
        "following_url": "https://api.github.com/users/CWood-sdf/following{/other_user}",
        "gists_url": "https://api.github.com/users/CWood-sdf/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/CWood-sdf",
        "id": 98367120,
        "login": "CWood-sdf",
        "node_id": "U_kgDOBdz2kA",
        "organizations_url": "https://api.github.com/users/CWood-sdf/orgs",
        "received_events_url": "https://api.github.com/users/CWood-sdf/received_events",
        "repos_url": "https://api.github.com/users/CWood-sdf/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/CWood-sdf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CWood-sdf/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/CWood-sdf",
        "user_view_type": "public"
    }
}