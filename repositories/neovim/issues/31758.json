{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nIt is possible to crash Neovim by using a `TSNode` (or a query cursor) of a tree that was edited afterwards.\n\nDetails: https://github.com/neovim/neovim/pull/31631#discussion_r1898103653\nTL;DR: \n1. Subtrees in tree-sitter are reference counted, but nodes and query cursors (which reference the subtree) do not contribute to the reference count.\n2. Parsing might free the old subtree.\n3. Some operation on nodes reference the subtree, and when it was freed, Neovim crashes.\n\nThis issue was submitted to tree-sitter, but closed: https://github.com/tree-sitter/tree-sitter/issues/4044#event-15776372680\n\n### Steps to reproduce\n\nminimal.lua:\n```lua\nlocal line = 'vim.api.nvim_win_set_cursor(0, { 1, 0 });'\nlocal lines = {}\nfor i = 1, 2000 do lines[i] = line end\n\nlocal lines2 = { 'local _ = \"' .. line }\nfor i = 2, 1999 do lines2[i] = line end\ntable.insert(lines2, line .. '\"')\n\nvim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\n\nvim.treesitter.start(0, 'lua')\nlocal parser = vim.treesitter.get_parser(0)\nparser:parse()\n\nlocal trees = {}\nfor k, tree in pairs(parser:trees()) do\n  trees[k] = tree:copy()\nend\n\nlocal nodes = {}\nlocal function add_all(node)\n  table.insert(nodes, node:child())\n  for child in node:iter_children() do\n    add_all(child)\n  end\nend\nadd_all(parser:parse(true)[1]:root())\n\nvim.api.nvim_buf_set_lines(0, 0, -1, true, lines2)\nparser:parse(true)\ntrees = nil\ncollectgarbage(\"collect\")\n\nvim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\nparser:parse()\ncollectgarbage(\"collect\")\n\nvim.keymap.set('n', 'a', function()\n  for _, node in ipairs(nodes) do\n    node:has_changes()\n  end\n  print('ended')\nend)\n```\n\n```shell\nnvim --clean -u minimal.lua\n```\n\nPressing `a` will crash neovim\n\n### Expected behavior\n\nNeovim should not crash, or the docs should mention that it is possible to crash.\n\n### Nvim version (nvim -v)\n\nNVIM v0.11.0-dev-1422+g35247b00a4\n\n### Vim (not Nvim) behaves the same?\n\nN/A\n\n### Operating system/version\n\nUbuntu 24.04\n\n### Terminal name/version\n\nXTerm(390)\n\n### $TERM environment variable\n\nxterm\n\n### Installation\n\nbuild from repo",
    "closed_at": "2025-06-06T14:35:55Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Possible solutions:\n\n1. Copy the tree before creating new Lua wrappers for nodes and query cursors (and store the copy internally). Nodes and cursors will use that tree. On GC, release the associated tree.\n\nEditing other trees will not affect the nodes that were created before. They will continue to work and return valid data, although from the old tree.\n\nCopying a tree doesn't seem to be that expensive (atomic increment for subtree + copying the included ranges). \nTree edits might get more expensive since when reference count is 1, the tree is modified in-place, and the nodes we allocated from that tree might not get garbage collected right away and still hold references to it.\n\n2. Have our own reference count and changetick for the tree. Nodes and cursors will keep that structure internally, and contribute to that reference count. \n\nOn every access, we check whether the tree has changed, and throw an error if it did.\n\nThis should perform better, and may be more desirable in some cases (why would the code use a node from a modified tree? ~This never worked correctly before~ It did, maybe. Original unmodified and copied trees are the same tree. So it is technically legal to copy a tree, get nodes from the original, modify the original, and still expect the nodes to work)",
            "created_at": "2024-12-28T18:33:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/31758#issuecomment-2564398456",
            "id": 2564398456,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31758",
            "node_id": "IC_kwDOAPphoM6Y2Z14",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564398456/reactions"
            },
            "updated_at": "2024-12-28T19:42:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564398456",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I also haven't figured out why we must copy the trees for it to crash:\n```lua\nlocal trees = {}\nfor k, tree in pairs(parser:trees()) do\n  trees[k] = tree:copy()\nend\n\n...\n\nparser:parse(true)\ntrees = nil\n```\n\nWithout copying, even if the entire structure of the new tree from `parse()` is completely different from that of the old tree (parts of the tree are also reference counted), all references to that old tree continue to work. As if there's a memory leak and old tree with all its nodes is not deallocated. But I didn't find a memory leak.",
            "created_at": "2024-12-28T18:45:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/31758#issuecomment-2564401107",
            "id": 2564401107,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31758",
            "node_id": "IC_kwDOAPphoM6Y2afT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564401107/reactions"
            },
            "updated_at": "2024-12-28T18:45:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564401107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@vanaigr looks like tree-sitter's `ts_tree_delete` is deleting some data without first checking that the reference count is at zero. The following repro crashes Neovim for me, instantly:\n\n```lua\nlocal parser = vim.treesitter.get_parser(0, 'lua')\nlocal tree = parser:parse()[1]\nlocal tree_copy = tree:copy()\ntree_copy:__gc()  -- Garbage collect (ts_tree_delete) the copied tree\nvim.schedule(function()\n  vim.cmd.normal('gcj')\nend)\n```\n\n```\nnvim minimal.lua --clean -u minimal.lua \n```",
            "created_at": "2024-12-29T00:14:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/31758#issuecomment-2564564436",
            "id": 2564564436,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31758",
            "node_id": "IC_kwDOAPphoM6Y3CXU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564564436/reactions"
            },
            "updated_at": "2024-12-29T00:31:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564564436",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Reproduction for https://github.com/neovim/neovim/issues/31758#issuecomment-2564564436\n\n(does it run without nvim-treesitter? It doesn't for me)\n\n<details>\n\nminimal.lua:\n```lua\nfor name, url in pairs {\n  nvim_treesitter = 'https://github.com/nvim-treesitter/nvim-treesitter.git',\n} do\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\n  if vim.fn.isdirectory(install_path) == 0 then\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\n  end\n  vim.opt.runtimepath:append(install_path)\nend\n\nrequire'nvim-treesitter.configs'.setup {\n  ensure_installed = { \"lua\" },\n}\n\nlocal line = 'vim.api.nvim_win_set_cursor(0, { 1, 0 });'\nlocal lines = {}\nfor i = 1, 2000 do lines[i] = line end\nvim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\n\nlocal parser = vim.treesitter.get_parser(0, 'lua')\nlocal tree = parser:parse()[1]\nlocal tree_copy = tree:copy()\ntree_copy:__gc()  -- Garbage collect (ts_tree_delete) the copied tree\nvim.schedule(function()\n  vim.cmd.normal('gcj')\nend)\n```\n\nversion:\n```console\nNVIM v0.11.0-dev-1423+g48c09ed4d9\nBuild type: Debug\nLuaJIT 2.1.1734355927\n```\n\nrun:\n```shell\nnvim --clean -u minimal.lua\n```\n\nStacktrace:\n\n![Image](https://github.com/user-attachments/assets/06a8ec0a-37de-445f-8771-bdc99e122ffa)\n\n</details>",
            "created_at": "2024-12-29T03:19:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/31758#issuecomment-2564598262",
            "id": 2564598262,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31758",
            "node_id": "IC_kwDOAPphoM6Y3Kn2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564598262/reactions"
            },
            "updated_at": "2024-12-29T04:06:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564598262",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> (does it run without nvim-treesitter? It doesn't for me)\n\nIf you happen to be using arch, they don't bundle the lua parser even though it is bundled typically (shipped from core anyway). So on arch it's too minimalistic and needs nvim-treesitter. Other distros maybe do the same. For me it works without `nvim-treesitter`, and even on small files (<10 lines)",
            "created_at": "2024-12-29T03:23:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/31758#issuecomment-2564598991",
            "id": 2564598991,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31758",
            "node_id": "IC_kwDOAPphoM6Y3KzP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564598991/reactions"
            },
            "updated_at": "2024-12-29T03:23:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564598991",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is it legal to call `__gc()`? Looks like it double frees.\nI guess when the script finishes execution, all unreferenced local variables are garbage collected. It doesn't crash if the tree copy is stored in `_G`.\n\n<details>\n\n```console\n(gdb) print &copy->included_range_count\n$2 = (unsigned int *) 0x555555cac718\n(gdb) watch *(unsigned int *) 0x555555cac718\nHardware watchpoint 3: *(unsigned int *) 0x555555cac718\n(gdb) break tree_gc\nBreakpoint 4 at 0x26109b: tree_gc. (2 locations)\n```\n(The address of the tree is `0x555555cac700`)\nThen it is freed the first time:\n\n```console\n(gdb) continue\nContinuing.\n\nThread 2.1 \"nvim\" hit Breakpoint 4, tree_gc (L=0x7ffff7bfa380) at /home/vanaigr/neovim2/src/nvim/lua/treesitter.c:790\n790       TSLuaTree *ud = luaL_checkudata(L, 1, TS_META_TREE);\n(gdb) next\n791       ts_tree_delete(ud->tree);\n(gdb) print *ud->tree\n$3 = {root = {data = {is_inline = false, visible = false, named = false, extra = false, has_changes = false, is_missing = true,\n      is_keyword = false, symbol = 110 'n', parse_state = 21964, padding_columns = 85 'U', padding_rows = 5 '\\005',\n      lookahead_bytes = 5 '\\005', padding_bytes = 0 '\\000', size_bytes = 0 '\\000'}, ptr = 0x555555cc6ea0},\n  language = 0x7ffff7ab8d20 <language>, included_ranges = 0x555555cb3510, included_range_count = 1}\n(gdb) print ud->tree\n$4 = (TSTree *) 0x555555cac700\n```\n\nThen we see the memory getting reused:\n\n```console\n(gdb) continue\nContinuing.\n\nThread 2.1 \"nvim\" hit Hardware watchpoint 3: *(unsigned int *) 0x555555cac718\n\nOld value = 1\nNew value = 1835627630\n__memmove_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:399\n399     ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S: No such file or directory.\n(gdb) continue\nContinuing.\n\nThread 2.1 \"nvim\" hit Hardware watchpoint 3: *(unsigned int *) 0x555555cac718\n\nOld value = 1835627630\nNew value = 1768316772\n__memmove_avx_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:397\n397     in ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S\n```\n\nThen it is freed again:\n\n```console\n(gdb) continue\nContinuing.\n\nThread 2.1 \"nvim\" hit Breakpoint 4, tree_gc (L=0x7ffff7bfa380) at /home/vanaigr/neovim2/src/nvim/lua/treesitter.c:790\n790       TSLuaTree *ud = luaL_checkudata(L, 1, TS_META_TREE);\n(gdb) next\n791       ts_tree_delete(ud->tree);\n(gdb) print ud->tree\n$5 = (TSTree *) 0x555555cac700\n(gdb) continue\nContinuing.\n```\n\nAnd then it crashes:\n\n```console\nThread 2.1 \"nvim\" received signal SIGSEGV, Segmentation fault.\n                                                              0x00007ffff7d273fe in __GI___libc_free (mem=0x616f6c5f64696410) at ./malloc/malloc.c:3368\n3368    ./malloc/malloc.c: No such file or directory.\n\n```\n\n</details>",
            "created_at": "2024-12-29T06:14:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/31758#issuecomment-2564626200",
            "id": 2564626200,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31758",
            "node_id": "IC_kwDOAPphoM6Y3RcY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564626200/reactions"
            },
            "updated_at": "2024-12-29T17:48:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564626200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If you happen to be using arch, they don't bundle the lua parser even though it is bundled typically (shipped from core anyway). So on arch it's too minimalistic and needs nvim-treesitter.\n\nThis means the arch build is _broken_, and you should complain to them. The (lua, vimdoc, markdown) parsers are a **mandatory** part of Nvim's runtime.",
            "created_at": "2024-12-29T09:37:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/31758#issuecomment-2564666840",
            "id": 2564666840,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31758",
            "node_id": "IC_kwDOAPphoM6Y3bXY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564666840/reactions"
            },
            "updated_at": "2024-12-29T09:37:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564666840",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I also haven't figured out why we must copy the trees for it to crash:\n\nOn https://github.com/neovim/neovim/issues/25254#issuecomment-2941884848 I made a reproduction of another crash with the same underline reason, and there I also need to make a copy of the tree, and I figured out why the copy was needed. But I would expect a crash may also happen with no copies of the tree, but may be harder to trigger.",
            "created_at": "2025-06-05T00:28:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/31758#issuecomment-2942192105",
            "id": 2942192105,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31758",
            "node_id": "IC_kwDOAPphoM6vXknp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2942192105/reactions"
            },
            "updated_at": "2025-06-05T00:28:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2942192105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51273772?v=4",
                "events_url": "https://api.github.com/users/Rodrigodd/events{/privacy}",
                "followers_url": "https://api.github.com/users/Rodrigodd/followers",
                "following_url": "https://api.github.com/users/Rodrigodd/following{/other_user}",
                "gists_url": "https://api.github.com/users/Rodrigodd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Rodrigodd",
                "id": 51273772,
                "login": "Rodrigodd",
                "node_id": "MDQ6VXNlcjUxMjczNzcy",
                "organizations_url": "https://api.github.com/users/Rodrigodd/orgs",
                "received_events_url": "https://api.github.com/users/Rodrigodd/received_events",
                "repos_url": "https://api.github.com/users/Rodrigodd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Rodrigodd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Rodrigodd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Rodrigodd",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> and I figured out why the copy was needed.\n\nHi. I looked through it but I couldn't find where you wrote about this.\n\n> But I would expect a crash may also happen with no copies of the tree, but may be harder to trigger.\n\nI remember my hypothesis was that without copying, newly created nodes would be allocated on top of old freed nodes, and that's why it wouldn't crash. But I remember creating a big file, taking one of the first and one of the last nodes, then removing all the content. But that still didn't crash, even though the memory should've been freed. And there were other attempts I don't remember.\n\nAlso, out of curiosity, what did you use to debug this? I used windbg with time travel debugging, and I gave up on figuring this out. ",
            "created_at": "2025-06-05T02:18:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/31758#issuecomment-2942531960",
            "id": 2942531960,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31758",
            "node_id": "IC_kwDOAPphoM6vY3l4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2942531960/reactions"
            },
            "updated_at": "2025-06-05T02:18:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2942531960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I looked through it but I couldn't find where you wrote about this.\n\nIt is in the coments of the code. In the bits about `ts_tree_copy` increasing a ref count, and later `ts_subtree_make_mut` checking the ref count was 1 or not.\n\n> Also, out of curiosity, what did you use to debug this? I used windbg with time travel debugging, and I gave up on figuring this out.\n\nrr (another time-travelling debugger) with conditional breakpoints. Basically I run until the crash, get the pointers for the tree, the node, the subtree, etc, and then I create conditional breakpoints for pertinent functions checking for those pointers in the break condition.\n\nAfter minimizing my repro a couple of times, and better understanding treesitter's memory management, I saw that I should look in the parent subtree of node.id.\n\nWhen I found a `ts_subtree_release` under `ts_tree_edit`, I figured out what the problem was.",
            "created_at": "2025-06-05T10:51:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/31758#issuecomment-2943708003",
            "id": 2943708003,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31758",
            "node_id": "IC_kwDOAPphoM6vdWtj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2943708003/reactions"
            },
            "updated_at": "2025-06-05T10:51:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2943708003",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/51273772?v=4",
                "events_url": "https://api.github.com/users/Rodrigodd/events{/privacy}",
                "followers_url": "https://api.github.com/users/Rodrigodd/followers",
                "following_url": "https://api.github.com/users/Rodrigodd/following{/other_user}",
                "gists_url": "https://api.github.com/users/Rodrigodd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Rodrigodd",
                "id": 51273772,
                "login": "Rodrigodd",
                "node_id": "MDQ6VXNlcjUxMjczNzcy",
                "organizations_url": "https://api.github.com/users/Rodrigodd/orgs",
                "received_events_url": "https://api.github.com/users/Rodrigodd/received_events",
                "repos_url": "https://api.github.com/users/Rodrigodd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Rodrigodd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Rodrigodd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Rodrigodd",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31758/comments",
    "created_at": "2024-12-28T18:21:23Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31758/events",
    "html_url": "https://github.com/neovim/neovim/issues/31758",
    "id": 2761825804,
    "labels": [
        {
            "color": "F9D0C4",
            "default": false,
            "description": "issue reporting a crash or segfault",
            "id": 435854234,
            "name": "bug-crash",
            "node_id": "MDU6TGFiZWw0MzU4NTQyMzQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-crash"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31758/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 15,
        "created_at": "2025-05-30T23:27:41Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
            "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
            "followers_url": "https://api.github.com/users/zeertzjq/followers",
            "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
            "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/zeertzjq",
            "id": 35768171,
            "login": "zeertzjq",
            "node_id": "MDQ6VXNlcjM1NzY4MTcx",
            "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
            "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
            "repos_url": "https://api.github.com/users/zeertzjq/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/zeertzjq",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/51",
        "id": 12988090,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/51/labels",
        "node_id": "MI_kwDOAPphoM4Axi66",
        "number": 51,
        "open_issues": 25,
        "state": "open",
        "title": "0.11.3",
        "updated_at": "2025-06-09T16:31:39Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/51"
    },
    "node_id": "I_kwDOAPphoM6knh4M",
    "number": 31758,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31758/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31758/timeline",
    "title": "Crash when using old `TSNode` after reparse",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-06-06T16:55:57Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31758",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
        "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vanaigr/followers",
        "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vanaigr",
        "id": 65824523,
        "login": "vanaigr",
        "node_id": "MDQ6VXNlcjY1ODI0NTIz",
        "organizations_url": "https://api.github.com/users/vanaigr/orgs",
        "received_events_url": "https://api.github.com/users/vanaigr/received_events",
        "repos_url": "https://api.github.com/users/vanaigr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vanaigr",
        "user_view_type": "public"
    }
}