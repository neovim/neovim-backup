{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nUsually we define mappings or something similar in on_attach callback or in a `LspAttach` callback. With the introduction of dynamic capabilities it's not enough, because `client.supports_method()` can return false for something that would be registered lately.\n\n### Expected behavior\n\nI think it would be convenient if there was an event like `LspRegisterCapability` and `LspUnregisterCapability`. User, plugins (maybe even core for setting default settings) can register callbacks for these events. There could be some de-duplication logic so that events are fired only when there are changes in effective capabilities (is it possible that the same server registers same capability twice?). Changed capability should be in the data table.\r\n\r\nIf two new autocommands are too much maybe it can be only one for any changes in capabilities (`LspUpdateCapability`?). It should include what really changed in the data table. Should it also fire when the client first attached to a buffer?\r\n\r\nAs alternative maybe `client/registerCapability` and `client/unregisterCapability` can run a callback from config parameter. Then user can do something like:\r\n\r\n```lua\r\nvim.lsp.handlers[\"client/registerCapability\"] = vim.lsp.with(\r\n  vim.lsp.handlers[\"client/registerCapability\"], {\r\n    callback = function()\r\n      -- do something\r\n    end,\r\n  }\r\n)\r\n```\r\n\r\nIt already can be done with something like:\r\n\r\n```lua\r\nlocal orig_handler = vim.lsp.handlers[\"client/registerCapability\"]\r\nvim.lsp.handlers[\"client/registerCapability\"] = function(err, result, ctx)\r\n  local result = orig_handler(err, result, ctx)\r\n  -- do something\r\n  return result\r\n)\r\n```\r\n\r\nBut it complicates things when multiple places want to add a callback. With autocommands completely separate callbacks can be defined or removed.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> It already can be done with something like:\r\n> \r\n> ```lua\r\n> local orig_handler = vim.lsp.handlers[\"client/registerCapability\"]\r\n> vim.lsp.handlers[\"client/registerCapability\"] = function(err, result, ctx) ...\r\n> ```\r\n> \r\n> But it complicates things when multiple places want to add a callback.\r\n\r\nhttps://github.com/neovim/neovim/pull/22598 should address this. \r\n\r\nIn general the Nvim [events model](https://github.com/neovim/neovim/issues/19156) is:\r\n\r\n- functions (which can be hooked into by [on_func()](https://github.com/neovim/neovim/pull/22598))\r\n- events (autocmds)",
            "created_at": "2023-07-02T09:25:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/24229#issuecomment-1616519685",
            "id": 1616519685,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24229",
            "node_id": "IC_kwDOAPphoM5gWiIF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1616519685/reactions"
            },
            "updated_at": "2023-07-02T09:26:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1616519685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> #22598 should address this.\r\n> \r\n> In general the Nvim [events model](https://github.com/neovim/neovim/issues/19156) is:\r\n> \r\n> * functions (which can be hooked into by [on_func()](https://github.com/neovim/neovim/pull/22598))\r\n> * events (autocmds)\r\n\r\n\r\nIt works but it is a bit tedious to have to deal with that in two places. You have to override the handler and you have to do it in a `LspAttach`. Before the introduction of the dynamic capabilities, it was enough to do it in one place.\r\n\r\n\r\nI think if we do introduce a `LspCapability`, it probably could or even should:\r\n\r\n- have one event type, with some event/data indicator if it's added/new\r\n- ~Normalize it, so that it is also fired _per_ static server capability during initialization.~ Also fire it once after initialisation,  so users can use `client.supports_method` in it and cover both static and dynamic capabilities \r\n\r\nSo instead of:\r\n\r\n\r\n```lua\r\nvim.lsp.handlers[\"client/registerCapability\"] = vim.lsp.with(\r\n  vim.lsp.handlers[\"client/registerCapability\"], {\r\n    callback = function()\r\n      -- do something\r\n    end,\r\n  }\r\n)\r\n\r\n\r\napi.nvim_create_autocmd('LspAttach', {\r\n  callback = function(args)\r\n    -- check client.server_capabilities and setup keymaps\r\n  end\r\n})\r\n```\r\n\r\n\r\nWe'd have something like:\r\n\r\n\r\n```lua\r\napi.nvim_create_autocmd('LspCapability', {\r\n  callback = function(args)\r\n    if (args.data....) then\r\n    end\r\n  end\r\n})\r\n```\r\n\r\nThat would cover both\r\n\r\n\r\n(I'm myself not really convinced if this is a good idea, but I also think that the status quo with the current solutions feels unsatisfying)\r\n",
            "created_at": "2023-07-05T16:54:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/24229#issuecomment-1622137616",
            "id": 1622137616,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24229",
            "node_id": "IC_kwDOAPphoM5gr9sQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1622137616/reactions"
            },
            "updated_at": "2023-07-06T12:02:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1622137616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24229/comments",
    "created_at": "2023-07-02T08:59:57Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24229/events",
    "html_url": "https://github.com/neovim/neovim/issues/24229",
    "id": 1784537409,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24229/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5qXeFB",
    "number": 24229,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24229/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24229/timeline",
    "title": "LSP events for dynamic capabilities",
    "updated_at": "2025-01-17T15:30:45Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24229",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1353637?v=4",
        "events_url": "https://api.github.com/users/stasjok/events{/privacy}",
        "followers_url": "https://api.github.com/users/stasjok/followers",
        "following_url": "https://api.github.com/users/stasjok/following{/other_user}",
        "gists_url": "https://api.github.com/users/stasjok/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/stasjok",
        "id": 1353637,
        "login": "stasjok",
        "node_id": "MDQ6VXNlcjEzNTM2Mzc=",
        "organizations_url": "https://api.github.com/users/stasjok/orgs",
        "received_events_url": "https://api.github.com/users/stasjok/received_events",
        "repos_url": "https://api.github.com/users/stasjok/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/stasjok/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stasjok/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/stasjok",
        "user_view_type": "public"
    }
}