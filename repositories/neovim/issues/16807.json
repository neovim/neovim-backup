{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Feature already in Vim?\r\n\r\n(No, this relates to the LSP client).\r\n\r\n### Feature description\r\n\r\nTL;DR: as a language server maintainer, it would be useful if the language server stderr stream was written to a temporary file. It's okay if this is optional.\r\n\r\nWithout this:\r\n - nvim users can't usefully report bugs against our server\r\n - it's painful to understand/debug server interactions with nvim\r\n\r\n---\r\n\r\nBackground: clangd and many other language servers produce detailed logs on stderr by default.\r\nThese logs have all critical information for investigating server behavior, e.g. protocol messages interleaved with internal state, crash dumps etc.\r\n\r\nWe require logs with bug reports, and provide [per-editor instructions](https://clangd.llvm.org/installation.html) for how to obtain them.\r\nHere's [an example bug](https://github.com/clangd/clangd/issues/859) investigated with the help of logs. \r\nViewing logs is also a critical part of development, long live printf debugging!\r\n\r\n---\r\n\r\nToday nvim sends the error stream to the lsp.log file in the following format:\r\n\r\n```\r\n[ERROR][2021-12-25 23:48:54] .../vim/lsp/rpc.lua:417\t\"rpc\"\t\"clangd\"\t\"stderr\"\t\"I[23:48:54.673] clangd version 14.0.0 (48d868493fa74025e7768afacdbbbd3ea9c82468)\\nI[23:48:54.673] Features: linux+grpc\\nI[23:48:54.673] PID: 27944\\nI[23:48:54.673] Working directory: /home/sammccall\\nI[23:48:54.673] argv[0]: clangd\\nI[23:48:54.673] argv[1]: --background-index\\n\"\r\n```\r\n\r\nThis isn't useful because:\r\n - it's hard to read due to the long prefixes and escaping\r\n - structure isn't visible because line boundaries aren't respected (lines are both combined and split)\r\n - it combines logs from several instances of the server, so:\r\n   - it's too hard to trace state if the instances are concurrent\r\n   - users don't know where to cut logs (it's *so* hard to get them to provide full logs aready)\r\n   - it's easy for users to leak details of private code into a bug report for an isolated example\r\n\r\n---\r\n\r\nWhat I'd like is for the stderr stream to be sent to a path created by tempname(), and for this path to be logged to lsp.log and/or available programmatically.\r\n\r\nThis means the file would be scoped to the lifetime of the editor - it would remain if clangd exits/crashes but be removed once the editor is closed.\r\n\r\nI've implemented this solution in my own vim LS-client from years ago and it works really well.\r\n\r\n(Passing a --log-file flag to the server isn't a great solution: between ensuring unique file paths, discoverability of the file paths, and giving the files the right lifetime, it's hard to get this right without editor cooperation)",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "> it's hard to read due to the long prefixes and escaping\r\n\r\nrequire('vim.lsp.log').set_format_func(vim.inspect) helps quite a bit, I've considered making it the default\r\n\r\n> structure isn't visible because line boundaries aren't respected (lines are both combined and split)\r\n    it combines logs from several instances of the server, so:\r\n        it's too hard to trace state if the instances are concurrent\r\n        users don't know where to cut logs (it's so hard to get them to provide full logs aready)\r\n        it's easy for users to leak details of private code into a bug report for an isolated example\r\n\r\nI'm a little wary of splitting the logs (I'm not saying no). It's pretty trivial to write a short lua script that will pull all [error] prefixed errors out of `lsp.log`, and you can ask your users to clear lsp.log before recording the issue.\r\n\r\n`lsp.log` was always meant to be a stopgap solution in favor of a namespaced logging api that has not materialized (which would be exportable).\r\n\r\nHow does vscode handle this? You work on coc-clangd and vscode-clangd, so I assume it is the temp file solution you suggested?\r\n",
            "created_at": "2021-12-27T15:22:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/16807#issuecomment-1001618856",
            "id": 1001618856,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16807",
            "node_id": "IC_kwDOAPphoM47s32o",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1001618856/reactions"
            },
            "updated_at": "2021-12-27T15:32:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1001618856",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
                "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
                "followers_url": "https://api.github.com/users/mjlbach/followers",
                "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
                "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mjlbach",
                "id": 13316262,
                "login": "mjlbach",
                "node_id": "MDQ6VXNlcjEzMzE2MjYy",
                "organizations_url": "https://api.github.com/users/mjlbach/orgs",
                "received_events_url": "https://api.github.com/users/mjlbach/received_events",
                "repos_url": "https://api.github.com/users/mjlbach/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mjlbach",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> How does vscode handle this? You work on coc-clangd and vscode-clangd, so I assume it is the temp file solution you suggested?\r\n\r\nVSCode lets you connect server output to a named \"output channel\", which is either an in-memory or on-disk buffer (I'm not sure), and it's nice and responsive. It's selectable in the output panel like this: ![](https://i.stack.imgur.com/Cpmqi.png)\r\n\r\ncoc.nvim buffers the output somewhere (again I'm not sure where) and you can show it with `:CocCommand workspace.showOutput`. (If I've had a long session with verbose, this tends to spin my CPU forever. I think they're sending the whole log content from node->vim over the IPC...)\r\n\r\n(coc-clangd and vscode-clangd are thin wrappers analogous to nvim-lspconfig, so they just follow the convention of the main editor/plugin. The client I mentioned working on was a separate standalone thing)\r\n\r\n> require('vim.lsp.log').set_format_func(vim.inspect) helps quite a bit, I've considered making it the default\r\n\r\nHmm, this doesn't seem to make much/any difference for me.\r\nThe issue here is that the stderr is \"just a string\" from lua's perspective, but it contains lots of formatting/line breaks which humans need but vim.inspect etc escapes.\r\n\r\nTo illustrate here's a gist with the raw stderr contents (as collected by coc) vs the logs produced by nvim: https://gist.github.com/sam-mccall/849e975aad3ee4015bbc2dd51aac68a4\r\n\r\n> It's pretty trivial to write a short lua script that will pull all [error] prefixed errors out of lsp.log, and you can ask your users to clear lsp.log before recording the issue.\r\n\r\nWe'd like users to be able to read the logs themselves, round-tripping *all* debugging through a project member who has to download the logs from the issue tracker, run them through a filtering script, and paste them back is a lot of toil/friction. Most of our project members aren't familiar with neovim or lua. Obtaining and running such a script to preprocess logs is beyond what I'd expect our users to do. (We ask them to pass `'-log=verbose`' to clangd, and only ~half do so).\r\n\r\n",
            "created_at": "2021-12-27T18:14:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/16807#issuecomment-1001686143",
            "id": 1001686143,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16807",
            "node_id": "IC_kwDOAPphoM47tIR_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1001686143/reactions"
            },
            "updated_at": "2021-12-27T18:14:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1001686143",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/548993?v=4",
                "events_url": "https://api.github.com/users/sam-mccall/events{/privacy}",
                "followers_url": "https://api.github.com/users/sam-mccall/followers",
                "following_url": "https://api.github.com/users/sam-mccall/following{/other_user}",
                "gists_url": "https://api.github.com/users/sam-mccall/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sam-mccall",
                "id": 548993,
                "login": "sam-mccall",
                "node_id": "MDQ6VXNlcjU0ODk5Mw==",
                "organizations_url": "https://api.github.com/users/sam-mccall/orgs",
                "received_events_url": "https://api.github.com/users/sam-mccall/received_events",
                "repos_url": "https://api.github.com/users/sam-mccall/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sam-mccall/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sam-mccall/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sam-mccall",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Today I got a message on startup:\r\n\r\n`LSP client log is large (1121 MB): /usr/local/google/home/sammccall/.cache/nvim/lsp.log`\r\n\r\nThe alert is nice, but having this file accumulate logs from all sessions forever means running clangd with `-log=verbose` isn't a good idea. (In other editors this is the standard setting for clangd devs & power-users that report bugs)",
            "created_at": "2022-01-13T09:08:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/16807#issuecomment-1011936614",
            "id": 1011936614,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16807",
            "node_id": "IC_kwDOAPphoM48UO1m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1011936614/reactions"
            },
            "updated_at": "2022-01-13T09:08:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1011936614",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/548993?v=4",
                "events_url": "https://api.github.com/users/sam-mccall/events{/privacy}",
                "followers_url": "https://api.github.com/users/sam-mccall/followers",
                "following_url": "https://api.github.com/users/sam-mccall/following{/other_user}",
                "gists_url": "https://api.github.com/users/sam-mccall/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sam-mccall",
                "id": 548993,
                "login": "sam-mccall",
                "node_id": "MDQ6VXNlcjU0ODk5Mw==",
                "organizations_url": "https://api.github.com/users/sam-mccall/orgs",
                "received_events_url": "https://api.github.com/users/sam-mccall/received_events",
                "repos_url": "https://api.github.com/users/sam-mccall/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sam-mccall/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sam-mccall/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sam-mccall",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I would also like it to be easier to view LSP logs. I work with the haskell-language-server, which uses quite a bit of memory and takes a few minutes to start up. Until it starts, code actions and other features don't work, but there's nothing in the nvim user interface that tells me that the language server isn't ready or when it gets ready, I just have to trial-and-error hope it works or `tail -f ~/.local/state/nvim/lsp.log` in another window.\r\n\r\nI'd love to have the LSP messages printed as Vim messages; is that possible?\r\n\r\n\r\n> `require('vim.lsp.log').set_format_func(vim.inspect)` helps quite a bit\r\n\r\nI've added this to my `init.lua` but it doesn't seem to change anything; what exactly is it supposed to do? I'm still seeing `\\n` and similar in log messages.",
            "created_at": "2022-11-10T16:58:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/16807#issuecomment-1310601555",
            "id": 1310601555,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16807",
            "node_id": "IC_kwDOAPphoM5OHjFT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1310601555/reactions"
            },
            "updated_at": "2022-11-10T16:58:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1310601555",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15312184?v=4",
                "events_url": "https://api.github.com/users/9999years/events{/privacy}",
                "followers_url": "https://api.github.com/users/9999years/followers",
                "following_url": "https://api.github.com/users/9999years/following{/other_user}",
                "gists_url": "https://api.github.com/users/9999years/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/9999years",
                "id": 15312184,
                "login": "9999years",
                "node_id": "MDQ6VXNlcjE1MzEyMTg0",
                "organizations_url": "https://api.github.com/users/9999years/orgs",
                "received_events_url": "https://api.github.com/users/9999years/received_events",
                "repos_url": "https://api.github.com/users/9999years/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/9999years/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/9999years/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/9999years",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Also, it looks like the value sent to the function set with `vim.lsp.log.set_format_func` is a pre-formatted string that already has the timestamp and log level interpolated. Both of those are superfluous when printing the message out; the user knows the current time already. We should pass some richer object into that function instead, perhaps.",
            "created_at": "2022-11-10T18:27:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/16807#issuecomment-1310727689",
            "id": 1310727689,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16807",
            "node_id": "IC_kwDOAPphoM5OIB4J",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1310727689/reactions"
            },
            "updated_at": "2022-11-10T18:27:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1310727689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15312184?v=4",
                "events_url": "https://api.github.com/users/9999years/events{/privacy}",
                "followers_url": "https://api.github.com/users/9999years/followers",
                "following_url": "https://api.github.com/users/9999years/following{/other_user}",
                "gists_url": "https://api.github.com/users/9999years/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/9999years",
                "id": 15312184,
                "login": "9999years",
                "node_id": "MDQ6VXNlcjE1MzEyMTg0",
                "organizations_url": "https://api.github.com/users/9999years/orgs",
                "received_events_url": "https://api.github.com/users/9999years/received_events",
                "repos_url": "https://api.github.com/users/9999years/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/9999years/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/9999years/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/9999years",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I was having something of an X/Y problem here: what I really wanted was to show language server progress information. I've [achieved this](https://github.com/9999years/dotfiles/commit/ae02a8c6d9df58098d543e3f3dd42a3595821bb5) with nvim-lualine/lualine.nvim and nvim-lua/lsp-status.nvim. I still think it would be good to have better LSP logging in nvim, though.",
            "created_at": "2022-11-14T15:02:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/16807#issuecomment-1313891242",
            "id": 1313891242,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16807",
            "node_id": "IC_kwDOAPphoM5OUGOq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1313891242/reactions"
            },
            "updated_at": "2022-11-14T15:02:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1313891242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15312184?v=4",
                "events_url": "https://api.github.com/users/9999years/events{/privacy}",
                "followers_url": "https://api.github.com/users/9999years/followers",
                "following_url": "https://api.github.com/users/9999years/following{/other_user}",
                "gists_url": "https://api.github.com/users/9999years/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/9999years",
                "id": 15312184,
                "login": "9999years",
                "node_id": "MDQ6VXNlcjE1MzEyMTg0",
                "organizations_url": "https://api.github.com/users/9999years/orgs",
                "received_events_url": "https://api.github.com/users/9999years/received_events",
                "repos_url": "https://api.github.com/users/9999years/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/9999years/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/9999years/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/9999years",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I struggled with this as well after migrating from coc.nvim to built-in lsp. I think the bottom line is there should be a \"named\" output/logging.\r\n\r\nFor example, we can introduce a new named logger apis:\r\n\r\n```lua\r\nlocal log = vim.lsp.log.namedLogger(lsp-client-id)\r\nlog.{debug,info,...}(...)\r\n```\r\n\r\nCurrent log interface can log to a `root` named logger.\r\n\r\nBy default, the loggers can log to a temporary buffer, which seems to be what coc.nvim does: https://github.com/neoclide/coc.nvim/blob/c5ffbb3c6b748d3359d99c4452ed74a80d293194/src/core/channels.ts#L35\r\n\r\nUser can configure the persistent log file directory. If such option exists, the buffers can persist to such directory with `{lsp-client-id}.log`, and maybe with `$NVIM_APPNAME` prefix.\r\n\r\n`nvim-lspconfig` can use the new named logger if it's available.\r\n\r\nWhat do you think? I can work on this if you agree.",
            "created_at": "2024-08-02T13:59:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/16807#issuecomment-2265463952",
            "id": 2265463952,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16807",
            "node_id": "IC_kwDOAPphoM6HCDyQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2265463952/reactions"
            },
            "updated_at": "2024-08-02T13:59:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2265463952",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/360983?v=4",
                "events_url": "https://api.github.com/users/jackielii/events{/privacy}",
                "followers_url": "https://api.github.com/users/jackielii/followers",
                "following_url": "https://api.github.com/users/jackielii/following{/other_user}",
                "gists_url": "https://api.github.com/users/jackielii/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jackielii",
                "id": 360983,
                "login": "jackielii",
                "node_id": "MDQ6VXNlcjM2MDk4Mw==",
                "organizations_url": "https://api.github.com/users/jackielii/orgs",
                "received_events_url": "https://api.github.com/users/jackielii/received_events",
                "repos_url": "https://api.github.com/users/jackielii/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jackielii/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jackielii/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jackielii",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "One use case that I would like to keep open for consideration. Today, I edited my config to spawn language servers with `systemd-run(1)`. With that and logging to stderr, I think you could use `journalctl` to view the language server logs.",
            "created_at": "2024-10-31T05:40:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/16807#issuecomment-2449045592",
            "id": 2449045592,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/16807",
            "node_id": "IC_kwDOAPphoM6R-XhY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2449045592/reactions"
            },
            "updated_at": "2024-10-31T05:40:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2449045592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11936772?v=4",
                "events_url": "https://api.github.com/users/tristan957/events{/privacy}",
                "followers_url": "https://api.github.com/users/tristan957/followers",
                "following_url": "https://api.github.com/users/tristan957/following{/other_user}",
                "gists_url": "https://api.github.com/users/tristan957/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tristan957",
                "id": 11936772,
                "login": "tristan957",
                "node_id": "MDQ6VXNlcjExOTM2Nzcy",
                "organizations_url": "https://api.github.com/users/tristan957/orgs",
                "received_events_url": "https://api.github.com/users/tristan957/received_events",
                "repos_url": "https://api.github.com/users/tristan957/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tristan957/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tristan957/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tristan957",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/16807/comments",
    "created_at": "2021-12-27T13:43:45Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/16807/events",
    "html_url": "https://github.com/neovim/neovim/issues/16807",
    "id": 1089253154,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/16807/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5A7K8i",
    "number": 16807,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 17,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 1,
        "rocket": 0,
        "total_count": 19,
        "url": "https://api.github.com/repos/neovim/neovim/issues/16807/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/16807/timeline",
    "title": "LSP: send language server stderr to a file",
    "updated_at": "2025-01-17T15:59:34Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/16807",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/548993?v=4",
        "events_url": "https://api.github.com/users/sam-mccall/events{/privacy}",
        "followers_url": "https://api.github.com/users/sam-mccall/followers",
        "following_url": "https://api.github.com/users/sam-mccall/following{/other_user}",
        "gists_url": "https://api.github.com/users/sam-mccall/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/sam-mccall",
        "id": 548993,
        "login": "sam-mccall",
        "node_id": "MDQ6VXNlcjU0ODk5Mw==",
        "organizations_url": "https://api.github.com/users/sam-mccall/orgs",
        "received_events_url": "https://api.github.com/users/sam-mccall/received_events",
        "repos_url": "https://api.github.com/users/sam-mccall/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/sam-mccall/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sam-mccall/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/sam-mccall",
        "user_view_type": "public"
    }
}