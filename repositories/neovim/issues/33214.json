{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\n'exrc' knows about project-local `.nvim.lua`, but for storing project-local data, Nvim and plugins have limited options:\n\n- write to the `.nvim.lua` file (raises questions about user expectations/flow)\n- create a parallel system in the user-global `stdpath()` locations\n\n### Expected behavior\n\n- Introduce the concept of a project-local `.nvim/` directory. \n    - Extend `:trust` to support this.\n- `stdpath('data', getcwd())` automatically finds `.nvim/data/` if it exists.\n- `stdpath('data', getcwd(), 'foo')` auto-creates the `.nvim/data/foo/` directory if it doesn't exist.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Would this be a full runtimepath? I.e., allow for project-level treesitter queries (and parsers)?",
            "created_at": "2025-03-31T10:33:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/33214#issuecomment-2765823594",
            "id": 2765823594,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33214",
            "node_id": "IC_kwDOAPphoM6k2x5q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2765823594/reactions"
            },
            "updated_at": "2025-03-31T10:33:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2765823594",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Open to discussion--I haven't thought deeply about this.",
            "created_at": "2025-03-31T11:29:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/33214#issuecomment-2765948254",
            "id": 2765948254,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33214",
            "node_id": "IC_kwDOAPphoM6k3QVe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2765948254/reactions"
            },
            "updated_at": "2025-03-31T11:29:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2765948254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This would open a dozen or more ways to run basically arbitrary code just by opening files (though I suppose that's already the case in some setups what with LSP and such...)\n\nIn my opinion, it should just be for config/data, at least by default.\n\nIf one wants to give it full vimruntime/runtimepath capabilities, one can easily do `vim.opt.runtimepath += vim.fn.getcwd() .. '/.nvim'` in `.nvim.lua`, which then has to go through the trust DB, and makes it pretty easy for the user to understand the ramifications of.\n\nOf course, the trust DB mechanism could be extended to show something like `Add <CWD>/.nvim to runtimepath? (Contains ftplugin, lua)`, but that will be a bunch more effort to implement for what can be accomplished with the above.",
            "created_at": "2025-04-03T08:57:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/33214#issuecomment-2774954050",
            "id": 2774954050,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33214",
            "node_id": "IC_kwDOAPphoM6lZnBC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2774954050/reactions"
            },
            "updated_at": "2025-04-03T08:58:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2774954050",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38919842?v=4",
                "events_url": "https://api.github.com/users/LunarLambda/events{/privacy}",
                "followers_url": "https://api.github.com/users/LunarLambda/followers",
                "following_url": "https://api.github.com/users/LunarLambda/following{/other_user}",
                "gists_url": "https://api.github.com/users/LunarLambda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/LunarLambda",
                "id": 38919842,
                "login": "LunarLambda",
                "node_id": "MDQ6VXNlcjM4OTE5ODQy",
                "organizations_url": "https://api.github.com/users/LunarLambda/orgs",
                "received_events_url": "https://api.github.com/users/LunarLambda/received_events",
                "repos_url": "https://api.github.com/users/LunarLambda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/LunarLambda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/LunarLambda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/LunarLambda",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the trust DB mechanism could be extended\n\nThat would be a requirement, yes.",
            "created_at": "2025-04-03T12:18:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/33214#issuecomment-2775607758",
            "id": 2775607758,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33214",
            "node_id": "IC_kwDOAPphoM6lcGnO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2775607758/reactions"
            },
            "updated_at": "2025-04-03T12:18:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2775607758",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Would this be a full runtimepath? I.e., allow for project-level treesitter queries (and parsers)?\n\nThis will make it really powerful (though possibly too powerful), but if we implement it this way, it can meet some very common needs, such as project-level LSP configuration.\n\nAlthough clangd and luals have their own LSP configuration files (.clangd.yaml, .luarc.json), there is still a considerable number of LSP servers designed toward vscode, which assume that users can configure their global/project-level configuration through `.vscode/settings.json`, and therefore do not have their own configuration files, so do some very well-implemented LSP servers like rust-analyze.\n\nThanks to the recently added `vim.lsp.config` and the `lsp/` directory, if we allow exrc to have the full capability of runtimepath, it means we can meet the needs of project-level LSP configuration through directories like `.nvim/lsp/rust-analyzer.lua`.\n\n[rustaceanvim](https://github.com/mrcjkb/rustaceanvim) is an excellent plugin designed for nvim that supports rust-analyzer, which already supports `vim.lsp.config`. Therefore, I think this approach can solve a major problem in LSP support, whether users are using their own LSP configurations or extending them with plugins, because we already have a \"standard way of LSP configuration\".",
            "created_at": "2025-04-04T03:04:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/33214#issuecomment-2777448924",
            "id": 2777448924,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33214",
            "node_id": "IC_kwDOAPphoM6ljIHc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2777448924/reactions"
            },
            "updated_at": "2025-04-04T03:04:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2777448924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Plugins don't have many options for this, but I've also not seen a need for this, and one isn't referenced, so this seems like a solution in search of a problem.\n\nThe proposed solution also requires a certain usage pattern of Nvim which only a fraction of the user base may subscribe too. The solution falls apart for any usage pattern where a nvim instance loads different files in different projects.",
            "created_at": "2025-04-23T18:00:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/33214#issuecomment-2825098837",
            "id": 2825098837,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33214",
            "node_id": "IC_kwDOAPphoM6oY5ZV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2825098837/reactions"
            },
            "updated_at": "2025-04-23T18:00:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2825098837",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> seems like a solution in search of a problem.\n\nWorkspace-local state is common, and Nvim itself already implements it for 'undodir', swapfiles, etc. Examples of plugins that need this are:\n\n- workspace-local LSP settings (`.nvim/lsp/`)\n- any AI-like plugin that wants to store \"rules\"\n\n> The solution falls apart for any usage pattern where a nvim instance loads different files in different projects.\n\n'exrc' could be changed to be buffer-relative or file-relative, similar to LSP root dirs. But that's not required for the initial idea here, which is to provide a standard interface (like `stdpath()`) for storing workspace-local state. Plugins have to reinvent that.",
            "created_at": "2025-04-23T19:44:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/33214#issuecomment-2825349088",
            "id": 2825349088,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33214",
            "node_id": "IC_kwDOAPphoM6oZ2fg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2825349088/reactions"
            },
            "updated_at": "2025-04-23T19:45:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2825349088",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33214/comments",
    "created_at": "2025-03-31T10:21:18Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/33214/events",
    "html_url": "https://github.com/neovim/neovim/issues/33214",
    "id": 2960088338,
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "workspace/project concept, 'exrc'",
            "id": 8313009301,
            "name": "workspace-project",
            "node_id": "LA_kwDOAPphoM8AAAAB7350lQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/workspace-project"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/33214/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6wb10S",
    "number": 33214,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/33214/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/33214/timeline",
    "title": "project-local `.nvim/` directory which acts like an extension of stdpath()",
    "type": {
        "color": "blue",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "A request, idea, or new functionality",
        "id": 597167,
        "is_enabled": true,
        "name": "Enhancement",
        "node_id": "IT_kwDOAGK_Pc4ACRyv",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-04-23T19:45:31Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/33214",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}