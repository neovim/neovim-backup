{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\n\nUsage of icons in modern terminal emulators seems to have come to a point of relatively widespread support. In particular, icons are mostly used for two purposes:\r\n- Indicate type of file in a way that is easier to skim.\r\n- Make more concise display of LSP items kind.\r\n\r\nHowever, currently there is no built-in support in Neovim. For example, there is no built-in way for users/plugins to get an icon for display purposes without installing special plugin icon provider.\n\n### Expected behavior\n\nThe purpose of this issue is mostly to be a discussion about acceptable approaches of adding more built-in support for icons.\r\n\r\nMy current ideas/suggestions:\r\n- Add 'buficon' (as 'icon' is already taken) buffer-local option which can be a source of truth for icon best representing a buffer. It then can be treated the same way as similarly purposed \"source of truth\" buffer-local options (like, for example, 'commentstring').\r\n- Export Lua function which can return an icon string based on an input data. Similarly to `vim.filetype.match()`.\r\n\r\nThe lowest friction design seems to be to tie icon to a filetype. This would require to maintain a single table mapping filetype to icon. Similarly to [how it is currently done in 'mini.icons'](https://github.com/echasnovski/mini.nvim/blob/657ef75b52a548090fb7906735517b7ddbf39e88/lua/mini/icons.lua#L861) (but glyph only). Then implementation can roughly be like:\r\n- `vim.filetype.get_icon = function(data) return icons[data.filetype] end`\r\n- Create an autocommand for `FileType` event that sets 'buficon' based on the output of `vim.filetype.get_icon()`.\r\n\r\n------\r\n\r\nPotential problems with overall idea of adding better built-in support for icons:\r\n- Actually deciding on requirements for potential code points. One approach is to prefer a single Nerd Fonts class and stick with it. Currently `nf-md-*` seems to have the widest range of available icon glyphs.\r\n- Dealing with potential changes in code points. I don't have a solid solution here except suggesting to treat this the same way how LSP protocol updates are currently treated.\r\n- Actually maintaining a table with \"filetype -> icon\" map. I can provide the initial table. Adding new entries can be as easy as \"Check if there is an icon *exactly* for the filetype; if no - use easily computed fallback\".",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I don't personally use filetype icons, but I am not opposed to the idea of providing better support/integration for plugins. However, the problems you listed are the exact problems I thought of and are non-trivial. Since icons _require_ a patched font, I'm also concerned about the possibility that we will receive more low-effort issues of the \"help icons aren't working\" variety, simply because the user hasn't set up their font properly. (We have a similar situation with terminal features, some of which also work only with specific terminals, and we get many issues of this nature already).\r\n\r\nI suppose as the author of mini.icons you're better equipped than I am to estimate what that issue load might look like.\r\n\r\n> Actually maintaining a table with \"filetype -> icon\" map\r\n\r\nMaintaining large databases is rote, tedious work, especially for filetypes (we already do this for filetype matching of course). Though if we clearly advertise it as \"best effort\"/\"community supported\", we can probably get away with a lower maintenance burden (although in that case, one might ask why it's included in core in the first place). The filetype runtime files fit into this category, but we piggy back on Vim's effort to maintain these so we don't adopt that maintenance burden ourselves (outside of porting updates).\r\n\r\n>Add 'buficon' (as 'icon' is already taken) buffer-local option which can be a source of truth for icon best representing a buffer. It then can be treated the same way as similarly purposed \"source of truth\" buffer-local options (like, for example, 'commentstring').\r\n\r\nIf we added such an option, could that option simply provide a codepoint or icon name. Then we would not need to maintain a filetype->icon table? At that point it's just a buffer-local option that is set in ftplugins, just like `'commentstring'`. That is much easier to distribute to the community (even moreso if we can get Vim on board as well).",
            "created_at": "2024-07-25T14:54:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/29854#issuecomment-2250567468",
            "id": 2250567468,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29854",
            "node_id": "IC_kwDOAPphoM6GJO8s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250567468/reactions"
            },
            "updated_at": "2024-07-25T14:54:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250567468",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Though if we clearly advertise it as \"best effort\"/\"community supported\", we can probably get away with a lower maintenance burden\r\n\r\nI would advise against this, since this would lower the perceived maintenance quality of Neovim in general. (It shouldn't, but alas; speaking from nvim-treesitter experience: you're always judged by your low water mark...)\r\n\r\n> At that point it's just a buffer-local option that is set in ftplugins, just like 'commentstring'. \r\n\r\nThat strikes me as a reasonable thing to add, but not specific to Neovim -- so I would also prefer for it to be brought up with Vim first to avoid the danger of them adding it later in an incompatible way. (Also see above re: runtime files being owned by Vim.)",
            "created_at": "2024-07-25T15:00:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/29854#issuecomment-2250596889",
            "id": 2250596889,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29854",
            "node_id": "IC_kwDOAPphoM6GJWIZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250596889/reactions"
            },
            "updated_at": "2024-07-25T15:00:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250596889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> ... I'm also concerned about the possibility that we will receive more low-effort issues of the \"help icons aren't working\" variety, simply because the user hasn't set up their font properly. (We have a similar situation with terminal features, some of which also work only with specific terminals, and we get many issues of this nature already).\r\n> \r\n> I suppose as the author of mini.icons you're better equipped than I am to estimate what that issue load might look like.\r\n\r\nI did not think about that. The best way to counter that is to add a \"NEEDS PATCHED FONT\" in description and hope it will have effect.\r\n\r\n> > Actually maintaining a table with \"filetype -> icon\" map\r\n> \r\n> Maintaining large databases is rote, tedious work, especially for filetypes (we already do this for filetype matching of course).\r\n\r\nSure, hence the proposed \"Check if there is an icon exactly for the filetype; if no - use easily computed fallback\" approach. Which can be automated and would require adding only icons which are specifically designed for the filetype/language.\r\n\r\n> If we added such an option, could that option simply provide a codepoint or icon name. Then we would not need to maintain a filetype->icon table? At that point it's just a buffer-local option that is set in ftplugins, just like `'commentstring'`. That is much easier to distribute to the community (even moreso if we can get Vim on board as well).\r\n\r\nThere would still be a need to maintain actual values in filetype plugins (as is done for 'commentstring'). The difference is that there is less to no decision making here.\r\n\r\nAnd I am not sure about providing anything else than actual icon string. As it will be most certainly used in this form by users. Having buffer-local option be a single codepoint (like 'f08b1' instead of '󰢱' Lua icon) will introduce friction for users. One benefit would be that it is (I'd argue slightly) easier to maintain as it would not require patched font to work with.\r\n\r\nOne thing to keep in mind for a more future-proof solution is that it might be a good idea to also allow a \"buffer icon\" to be a composed character, i.e. multiple code points.\r\n\r\n------\r\n\r\nAll in all, I am all for adding either buffer-local option or exported function.\r\n\r\nOne possible benefit of exported function is it doesn't necessarily require a buffer to get the information. However, maybe something like `vim.filetype.get_option(vim.filetype.match({...}), 'buficon')` would be good enough (albeit visibly slower on at least first call).",
            "created_at": "2024-07-25T15:43:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/29854#issuecomment-2250733821",
            "id": 2250733821,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29854",
            "node_id": "IC_kwDOAPphoM6GJ3j9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250733821/reactions"
            },
            "updated_at": "2024-07-25T15:43:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250733821",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Also, since it's not been mentioned so far: \r\n\r\n1. Neovim has no robust way of actually displaying icons, so this proposal boils down to \"Neovim should take care of maintaining the database so plugins don't have to\" -- which is a hard sell.\r\n2. The issue mentions LSP (completion/symbol) icons, but none of the proposals (can) address this use case; they only focus on filetype icons.\r\n\r\nSo while there may be some improvements that can be made in handling private area codepoints like nerdfont icons (which hopefully the ongoing utf8proc/mbyte.c effort will facilitate), I think the other suggestions are premature. (Any such discussion should also bring GUI developers to the table, as these would be the ones having to show them.)",
            "created_at": "2024-07-25T16:01:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/29854#issuecomment-2250804728",
            "id": 2250804728,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29854",
            "node_id": "IC_kwDOAPphoM6GKI34",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250804728/reactions"
            },
            "updated_at": "2024-07-25T16:01:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250804728",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> 1. Neovim has no robust way of actually displaying icons, so this proposal boils down to \"Neovim should take care of maintaining the database so plugins don't have to\" -- which is a hard sell.\r\n\r\nI don't really understand the first part of the argument. Icons are displayed as any regular string. User potentially not having the support for displaying *some* characters doesn't stop Neovim from having their support. For example, user's setup can have font that only supports ASCII symbols, yet Neovim doesn't stop at *only* supporting ASCII symbols in option values.\r\n\r\nThis proposal boils down to the title of \"Better built-in support for icons\". So that users can have better icon support out of the box. Determining *how exactly* is the goal of this issue.\r\n\r\n> 2\\. The issue mentions LSP (completion/symbol) icons, but none of the proposals (can) address this use case; they only focus on filetype icons.\r\n\r\nLSP is mentioned as it *is* one of the main use cases for icons. Solution to it was not mentioned because I currently don't have any good ideas/suggestions to remedy that. Determining if there is a good approach here is the goal of this issue. There is no contradiction here.",
            "created_at": "2024-07-25T17:33:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/29854#issuecomment-2251044852",
            "id": 2251044852,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29854",
            "node_id": "IC_kwDOAPphoM6GLDf0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2251044852/reactions"
            },
            "updated_at": "2024-07-25T17:33:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2251044852",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This proposal boils down to the title of \"Better built-in support for icons\".\r\n\r\nBut the proposal is much stronger, given that we have _no_ support for icons. So the first question is _whether_ we should add support for icons, in a form that aligns with our quality standards.",
            "created_at": "2024-07-25T17:37:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/29854#issuecomment-2251052346",
            "id": 2251052346,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29854",
            "node_id": "IC_kwDOAPphoM6GLFU6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2251052346/reactions"
            },
            "updated_at": "2024-07-25T17:37:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2251052346",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29854/comments",
    "created_at": "2024-07-25T14:19:44Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/29854/events",
    "html_url": "https://github.com/neovim/neovim/issues/29854",
    "id": 2430098178,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "issue needs attention from an expert, or PR proposes significant changes to architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/29854/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 264,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 307,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2025-02-23T21:55:55Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6Q2FsC",
    "number": 29854,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 3,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/29854/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/29854/timeline",
    "title": "improve built-in support for icons",
    "updated_at": "2025-02-20T21:50:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/29854",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}