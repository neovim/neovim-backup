{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "*(**Note:** all feedback is captured in this description + the first comment.)*\r\n\r\n---\r\n\r\nTo add some momentum to this effort, I suggest:\r\n\r\n1. Supporting ~~all Lua-supporting versions of Vim/Nvim~~ _all \"assets\" or \"artifacts\" of any kind_ in the spec should be a requirement. \r\n    - No need for Vim/Nvim to have a different package spec, plus this adds legitimacy and weight to the idea.\r\n    - No need for this spec to be specific to vim or text editors. What's needed is simply a way to define [artifacts that depend on other artifacts.](https://sink.io/jmk/artifact-system)\r\n1. Shrink the scope by at least 2x.\r\n    - ~~Only support one format, Lua (because it allows comments). Vim must be compiled with `+lua` or must have `lua` available on $PATH.~~\r\n    - Only support one format, JSON. Because:\r\n        - ubiquitous\r\n        - \"machine readable\" (sandboxed by design): can recursively download an entire dependency tree before executing any code, including hooks. Aggregators such as https://neovimcraft.com/ can consume it.\r\n        - Turing-complete formats invite endless special-case features (nvim-lspconfig is a [living example](https://github.com/neovim/nvim-lspconfig/pull/2595)).\r\n    - Remove any fields that are not immediately, obviously needed. \r\n        - **Remove any fields that are provided by git. _Git is a client requirement._**\r\n        - But keep anything that is needed to ensure forward-compatible enhancements.\r\n1. (optional) use identical field names from npm's `package.json`, where possible (assuming this reduces confusion rather than increasing it)\r\n1. Strict \"no side-effects\" requirement:  `pkg.json` should be totally sandboxed (evaluating it must have no side-effects, only input and output). ~~(Does [#7](https://github.com/nvim-lua/nvim-package-specification/issues/7) address this?)~~\r\n1. Transfer this repo to https://github.com/neovim/ ?\r\n\r\n# Client requirements\r\n\r\n- `git` (packages can live at any git URL)\r\n- json parser\r\n\r\n# Package server requirements\r\n\r\n- the package URL must be a `git` repo\r\n\r\n# Why NPM package.json?\r\n\r\nNPM is special because it's ubiquitous--and lots of discussion hasn't yielded a strong case for a novel format. Using things that are ubiquitous means you gain their tooling, docs, validators (and possibly even... infrastructure).\r\n\r\nnode and NPM aren't perfect, but that doesn't matter. Choosing to be a _subset_ of that ecosystem provides _optionality_: it's almost entirely upside with limited downside. We could also choose PHP's package format.\r\nThe point is to surf on something massive and immortal.\r\n\r\n# What about LuaRocks?\r\n\r\nI've advocated for LuaRocks as the Nvim plugin manager, but defining a ~~\"plugin spec\"~~ \"federated package spec\" also makes sense because:\r\n\r\n- There is no \"federated\" plugin spec (corrections welcome!). LuaRocks is a \"centralized\" approach.\r\n- LuaRocks + Nvim is starting to see real progress in the form of https://github.com/nvim-neorocks , but thus far has not gained momentum. A decentralized, lowest-common-denominator, \"infectious\" approach is high-leverage, while work continues on the centralized LuaRocks approach at its own pace.\r\n- There's no central _asset_ registry, just a bunch of URLs. \r\n    - Could have a central _list_ of plugins, but not assets.\r\n- We can do both, at low cost. `pkg.json` is a fairly \"cheap\" approach. LuaRocks\r\n- Luarocks itself is a somewhat complex dependency. Nvim removed it from its own build:\r\n    - \"luarocks is very slow, its servers unreliable, and its caching mechanism is straight up broken.\" [ref](https://github.com/neovim/neovim/pull/25070) [ref](https://github.com/neovim/neovim/commit/f30844008bdd313b03a19486159f571a067e68b9) \r\n\r\n# References\r\n\r\n- https://json-schema.org/\r\n- lazy.nvim [pkg.json impl](https://github.com/folke/lazy.nvim/pull/910/files#diff-eeb8f2e48ace6e2f4c40bf159b7f59e5eb1208e056a3f9f1b9cc6822ecb45371)",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "# Revised, minimal package spec: `pkg.json`\r\n\r\n```\r\n{\r\n  \"name\" : \"lspconfig\", // OPTIONAL cosmetic name, not used for resolution nor filesystem locations.\r\n  \"description\" : \"Quickstart configurations for the Nvim-lsp client\", // OPTIONAL\r\n  \"engines\": {\r\n      \"nvim\": \"^0.10.0\",\r\n      \"vim\": \"^9.1.0\"\r\n  },\r\n  \"repository\": { // REQUIRED\r\n      \"type\": \"git\", // reserved for future use\r\n      \"url\": \"https://github.com/neovim/nvim-lspconfig\"\r\n  },\r\n  \"dependencies\" : { // OPTIONAL\r\n    \"https://github.com/neovim/neovim\" : \"0.6.1\",\r\n    \"https://github.com/lewis6991/gitsigns.nvim\" : \"0.3\"\r\n  },\r\n}\r\n```\r\n\r\n- Dependencies (\"leaf nodes\") aren't required to have a `pkg.json` file. Only required for \"downstream\".\r\n    - `pkg.json` can declare a dependency on any random artifact fetchable by URL. The upstream dependency doesn't need a `pkg.json`.\r\n- Version specifiers in `dependencies` follow the [NPM version range spec](https://devhints.io/semver) ~~[cargo spec](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html)~~\r\n    - Supported by Nvim `vim.version.range()`.\r\n    - Extensions to npm version spec:\r\n        - `\"HEAD\"` means git HEAD. (npm version spec defines `\"\"` and `\"*\"` as latest stable version.)\r\n    - ~~Do NOT support \"Combined ranges\".~~\r\n    - Treat any string of length >=7 and lacking \".\" as a commit-id.\r\n    - Only support commit-id, tags, and HEAD.\r\n    - Tags must contain a non-alphanumeric char.\r\n- Out of scope:\r\n    - \"pack\" (creating a package)\r\n    - \"publish\" is out of scope, because `pkg.json` is decentralized. Publishing a package means pushing it to a git repo with a top-level `pkg.json`.\r\n    - \"uninstall\" https://docs.npmjs.com/cli/v9/using-npm/scripts#a-note-on-a-lack-of-npm-uninstall-scripts\r\n\r\n## Changes\r\n\r\n- renamed `packspec.json` to `pkg.json`  ~~`deps.json`~~ (to hint that it's basically a subset of NPM's `package.json`)\r\n- removed `\"version\" : \"0.1.2\",` because package version is provided by the `.git` repo info\r\n- removed `external_dependencies`\r\n- removed `specification_version`. The lack of a \"spec version\" field means the spec version is `1.0.0`. If breaking changes are ever needed then we could introduce a \"spec version\" field.\r\n- renamed `\"source\" : \"git:…\",` to `repository.url`\r\n- renamed `package` to `name` (to align with NPM)\r\n- changed the shape of `description` from object to string (to align with NPM)\r\n- changed `dependencies` shape to align with NPM. Except the keys are URLs.\r\n    - Leaves the door open for non-URL keys in the future.\r\n\r\n## Closed questions\r\n\r\n- Hooks and \"build-time\" tasks are defined in `scripts` ([lifecycle](https://docs.npmjs.com/cli/v9/using-npm/scripts#life-cycle-operation-order))\r\n    - Each `scripts` item is a path to a Lua file on the Nvim 'runtimepath'.\r\n        - Example `\"scripts.prepare\": \"lua/my_statusline/prepare.lua\"`\r\n    - Scripts are run from the root of the package folder, regardless of what the current working directory is.\r\n    - Predefined script names and lifecycle order:\r\n        - These all run after fetching and writing the package contents to the engine-defined package path, in order.\r\n        - `preinstall`\r\n        - `install`\r\n        - `postinstall`\r\n- Top-level application-defined \"metadata\" field (`client`, `user`, `metadata`, ...?) for use by clients (package managers)?\r\n    - `pkg.json` allows arbitrary application-defined fields, as `package.json` does.\r\n- \"Ecosystem-agnostic\" means that https://luarocks.org packages can't be consumed?\r\n    - If Nvim plugins can successfully use luarocks then `pkg.json` is redundant. `pkg.json` is only useful for ecosystems that don't have centralized package management.\r\n- Are git submodules/subtrees a viable solution for git-only dependency trees?\r\n    - https://stackoverflow.com/a/61961021/152142\r\n    - pro: avoids another package/deps format\r\n    - con:\r\n        - not easy for package authors to implement (run `git` commands instead of editing a json file)\r\n        - no `engines` field: how will aggregators build a package list?\r\n        - no support for non-git blobs\r\n- Does the lack of a `version` field mean that a manifest file always tracks HEAD of the git repo?\r\n    - The dependents declare what version they need, which must be available as a git tag in the dependency. Thus no need for `pkg.json` to repeat that information. The reason that `package.json` and other package formats need a `version` field is because they _don't_ require a `.git` repo to be present.\r\n- Should consumers of dependencies need to control how a dependency is resolved?\r\n    - `repository.type` is available for future use if we want to deal with that.\r\n- It'd be nice if the spec enforces globally unique names... Then `dependencies` could look like `{ \"dependencies\": { \"plenary.nvim\": \"1.0.0\" } }`\r\n    - Requiring URIs achieves that, without a central registry.\r\n- Should `name` be removed? Because `repository.url` already defines the \"name\" (which can be prettified in UIs).\r\n    - Defined `name` as OPTIONAL and strictly cosmetic (not used for programmatic decisions or filesystem paths).\r\n- `package.json` has an [`engines` field](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#engines) that declares what software can _run_ the package. Example:\r\n  ```\r\n  \"engines\": {\r\n      \"vscode\": \"^1.71.0\"\r\n  },\r\n- How to deal with dependencies moving to a new host? Should `pkg.json` support \"fallback\" URLs?\r\n    - The downstream must update its URLs.\r\n\r\n## Open questions\r\n\r\n- via @folke: most important to ideally be in the spec:\r\n    - ✅ dependencies\r\n    - ❓ metadata probably makes sense, NPM itself allows arbitrary fields in `package.json`\r\n    - ❓ build\r\n    - ❓whether the plugin needs/supports setup()\r\n    - ❓main module for the plugin (lazy currently figures that out automatically, but would be better to have this part of the spec)\r\n- Can `pkg.json` be a strict subset of NPM `package.json` ? The ability to validate it with https://www.npmjs.com/package/read-package-json is attractive...\r\n- Non-git dependencies (\"blobs\"): require version specifier to be object (instead of string):\r\n    - `\"https://www.leonerd.org.uk/code/libvterm/libvterm-0.3.2.tar.gz\": { \"type\": \"tar+gzip\", \"version\": \"…\" }`\r\n    - How can a package manager know the blob has been updated if there's no git info? (Answer: undefined.)\r\n- Naming conflict: what happens if `https://github.com/.../foo` and `https://sr.ht/.../foo` are in the dependency tree?\r\n  ```\r\n   .local/share/nvim/site/pack/github.com/start/\r\n   .local/share/nvim/site/pack/sr.ht/start/\r\n   ```\r\n\r\n\r\n# Strategy\r\n\r\n- [x] specify packspec (above)\r\n- [ ] specify ecosystem-agnostic client behavior (report conflicts, fetch things into `pack/` dir, update existing dir, ...)\r\n- [ ] specify what is undefined (i.e. owned by the per-ecosystem \"engine\", for example vim/nvim packages are fetched into 'packpath')",
            "created_at": "2023-07-01T17:46:00Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1616017735",
            "id": 1616017735,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5gUnlH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 8,
                "hooray": 0,
                "laugh": 0,
                "rocket": 6,
                "total_count": 14,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616017735/reactions"
            },
            "updated_at": "2024-02-18T16:00:17Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616017735",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> removed \"version\" : \"0.1.2\", because package version is provided by the .git repo info\r\n\r\nbased on tag/release ?\r\n\r\n> should name be removed? because repository.url already defines the \"name\" (which can be prettified in UIs)\r\n\r\nI think the `name` attribute can stay IMO",
            "created_at": "2023-07-01T20:50:52Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1616109259",
            "id": 1616109259,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5gU97L",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616109259/reactions"
            },
            "updated_at": "2023-07-01T20:51:02Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616109259",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/22576758?v=4",
                "events_url": "https://api.github.com/users/Sanix-Darker/events{/privacy}",
                "followers_url": "https://api.github.com/users/Sanix-Darker/followers",
                "following_url": "https://api.github.com/users/Sanix-Darker/following{/other_user}",
                "gists_url": "https://api.github.com/users/Sanix-Darker/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Sanix-Darker",
                "id": 22576758,
                "login": "Sanix-Darker",
                "node_id": "MDQ6VXNlcjIyNTc2NzU4",
                "organizations_url": "https://api.github.com/users/Sanix-Darker/orgs",
                "received_events_url": "https://api.github.com/users/Sanix-Darker/received_events",
                "repos_url": "https://api.github.com/users/Sanix-Darker/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Sanix-Darker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Sanix-Darker/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Sanix-Darker",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Should we perhaps have a way of describing why a dependency exists? What about optional dependencies? Should that be within scope for this package spec, and if so, how would it work?",
            "created_at": "2023-07-02T07:57:50Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1616431685",
            "id": 1616431685,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5gWMpF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616431685/reactions"
            },
            "updated_at": "2023-07-02T07:57:50Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616431685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Should we perhaps have a way of describing why a dependency exists? \r\n\r\nYou mean like pseudo \"comments\"? No, that doesn't sound like something needed in a minimal \"P0\" approach.\r\n\r\n> What about optional dependencies?\r\n\r\nWhy is that needed in the minimal, initial spec?",
            "created_at": "2023-07-02T08:25:55Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1616443625",
            "id": 1616443625,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5gWPjp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616443625/reactions"
            },
            "updated_at": "2023-07-02T08:25:55Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616443625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Should we perhaps have a way of describing why a dependency exists?\r\n> \r\n> You mean like pseudo \"comments\"? No, that doesn't sound like something needed in a minimal \"P0\" approach.\r\n\r\nMakes sense.\r\n\r\n> > What about optional dependencies?\r\n> \r\n> Why is that needed in the minimal, initial spec?\r\n\r\nI don't think it _is_ \"needed\", I was just asking if it _should_ be included or not, just in case the thought of optional deps may have slipped your mind.",
            "created_at": "2023-07-02T08:52:32Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1616472056",
            "id": 1616472056,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5gWWf4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616472056/reactions"
            },
            "updated_at": "2023-07-02T08:52:32Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616472056",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Cool! I'll add some of my thoughts, hope you don't mind;\r\n\r\n> * removed `\"version\" : \"0.1.2\",` because package version is provided by the `.git` repo info\r\n\r\nDoes this mean that a manifest file always tracks HEAD of the git repo? Given a manifest file as input, how would one know which version of the package it describes? I think the version number in the manifest file is very much needed, and should be the canonical version identifier. I also feel like the absence of the version number would violate the 4th principle?\r\n\r\n> * renamed `specification_version` to `specversion`\r\n\r\nI think excluding this field would help with overall ergonomics. If the spec starts out small with only fundamental requirements and additions are carefully considered I don't see the spec schema changing in such a way it'd require a spec version bump. Bumping the spec version should imo be a last resort. I think a strict non-breaking change policy would make sense. Consumers would simply check the presence of a field to enable that \"feature\".\r\n\r\n> * changed `dependencies` shape to align with NPM. Except the keys are URLs.\r\n>   \r\n>   * Leaves the door open for non-URL keys in the future.\r\n\r\nShould consumers of dependencies need to control how a dependency is resolved? I think it'd be nice if the spec enforces globally unique names instead which central registries would have to enforce. The dependency schema could then simply be:\r\n\r\n```json\r\n{\r\n  \"dependencies\": {\r\n    \"plenary.nvim\": \"1.0.0\"\r\n  }\r\n}\r\n```\r\n\r\nAs for describing version ranges, it looks like the suggested syntax employs npm's syntax, which I think is entirely proprietary to npm. I think cargo's approach is a bit simpler, where:\r\n\r\n```\r\n1.2.3  :=  >=1.2.3, <2.0.0\r\n1.2    :=  >=1.2.0, <2.0.0\r\n1      :=  >=1.0.0, <2.0.0\r\n0.2.3  :=  >=0.2.3, <0.3.0\r\n0.2    :=  >=0.2.0, <0.3.0\r\n0.0.3  :=  >=0.0.3, <0.0.4\r\n0.0    :=  >=0.0.0, <0.1.0\r\n0      :=  >=0.0.0, <1.0.0\r\n```\r\n\r\nI feel like this alone is enough? In the future it could be extended with the additional modifiers `~`, `^` and `*` (which have [different meaning](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) than in npm).\r\n\r\n> Dependencies aren't required to have a packspec.json file. That's only required for the \"leaf nodes\".\r\n\r\nI think the entire dependency tree should be \"packspec-enabled\". Having plugin dependencies is in my experience pretty rare (maybe only a contemporary consequence of the lack of a manifest file), and those who do tend to depend on plugins that are intended to be dependent on (e.g. `plenary`) - it'd be in everyone's interest for them to provide a manifest. Having this requirement could also act as a motivator for authors to include one. It's also a hygiene and stability factor as it'd hinder \"nonserious\" plugins from making their way into the package ecosystem - it's a good proxy for signaling stability.\r\n\r\nFinally I think it'd also be good to explicitly define which fields are required. I don't see it being mentioned here but I feel like there's an implication that some of them currently are?",
            "created_at": "2023-07-02T09:38:40Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1616535753",
            "id": 1616535753,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5gWmDJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616535753/reactions"
            },
            "updated_at": "2023-07-02T09:38:40Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616535753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6705160?v=4",
                "events_url": "https://api.github.com/users/williamboman/events{/privacy}",
                "followers_url": "https://api.github.com/users/williamboman/followers",
                "following_url": "https://api.github.com/users/williamboman/following{/other_user}",
                "gists_url": "https://api.github.com/users/williamboman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/williamboman",
                "id": 6705160,
                "login": "williamboman",
                "node_id": "MDQ6VXNlcjY3MDUxNjA=",
                "organizations_url": "https://api.github.com/users/williamboman/orgs",
                "received_events_url": "https://api.github.com/users/williamboman/received_events",
                "repos_url": "https://api.github.com/users/williamboman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/williamboman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/williamboman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/williamboman",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Great feedback!\r\n\r\n> > removed `\"version\" : \"0.1.2\",`\r\n> \r\n> Does this mean that a manifest file always tracks HEAD of the git repo?\r\n\r\n_(Added to \"Closed questions\")_ The dependents declare what version they need, which must be available as a git tag in the dependency. Thus there is no need for `packspec.json` to repeat that information. The reason that `package.json` and other package formats need a `version` field is because they _don't_ require a `.git` repo to be present.\r\n\r\n\r\n> excluding `specversion` field would help with overall ergonomics. ... Bumping the spec version should be a last resort.\r\n\r\nAgreed, updated spec. The absence of `specversion` means \"spec version 1.0\".\r\n\r\n> Should consumers of dependencies need to control how a dependency is resolved?\r\n\r\n_(Added to \"Closed questions\")_ `repository.type` is available for future use if we want to deal with that.\r\n\r\n> it'd be nice if the spec enforces globally unique names\r\n\r\n_(Added to \"Closed questions\")_ Requiring URIs achieves that.\r\n\r\n> globally unique names ... which central registries would have to enforce. The dependency schema could then simply be: `{ \"dependencies\": { \"plenary.nvim\": \"1.0.0\"`\r\n\r\n_(Added to \"Closed questions\")_ That looks nice but it makes the protocol more complicated and less \"distributed\".",
            "created_at": "2023-07-02T10:52:36Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1616597912",
            "id": 1616597912,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5gW1OY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616597912/reactions"
            },
            "updated_at": "2023-07-02T10:54:27Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616597912",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> As for describing version ranges, it looks like the suggested syntax employs npm's syntax, which I think is entirely proprietary to npm. I think cargo's approach is a bit simpler\r\n\r\nGood idea, updated spec.\r\n\r\n> I think the entire dependency tree should be \"packspec-enabled\". Having plugin dependencies is in my experience pretty rare\r\n\r\n- Why shouldn't I be able to depend on random artifacts available at a git URL? E.g. I have a key bindings plugin that depends on fugitive, I don't care if fugitive doesn't have a `packspec.json`.\r\n- This spec extends to anything available from a URL, not just vim plugins.\r\n\r\n> It's also a hygiene and stability factor as it'd hinder \"nonserious\" plugins from making their way into the package ecosystem - it's a good proxy for signaling stability.\r\n\r\nThat just isn't a goal (and it's the \"RMS\" approach to software 😏: cathedral instead of crazy, infectious bazaar) .  The original scope was to be able to declare and resolve dependencies. Not anything else.\r\n",
            "created_at": "2023-07-02T11:04:57Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1616600915",
            "id": 1616600915,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5gW19T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616600915/reactions"
            },
            "updated_at": "2023-07-02T11:12:45Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616600915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Those git urls `git://github.com/neovim/neovim.git` are not valid.\r\nShould be just `https` or any other git supported url format.",
            "created_at": "2023-07-02T18:08:14Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1616756362",
            "id": 1616756362,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5gXb6K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616756362/reactions"
            },
            "updated_at": "2023-07-04T14:12:18Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1616756362",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> * `scripts` and \"build-time\" tasks ([lifecycle](https://docs.npmjs.com/cli/v9/using-npm/scripts#life-cycle-operation-order))\r\n>     * Scripts must be array of strings (unlike npm package.json).\r\n>     * Scripts are run from the root of the package folder, regardless of what the current working directory is.\r\n>       * Predefined script names and lifecycle order:\r\n>         * These all run after fetching and writing the package contents to the engine-defined package path, in order.\r\n>         * `preinstall`\r\n>         * `install`\r\n>         * `postinstall`\r\n\r\nOn the topic on uninstall scripts: Is it sure that we don't want that?\r\nClean uninstall would be a really cool feature.\r\n\r\nFor example for something like `mason` automatically removing all installed lsp-binaries would be nice.\r\n\r\n> * \"uninstall\" https://docs.npmjs.com/cli/v9/using-npm/scripts#a-note-on-a-lack-of-npm-uninstall-scripts\r\n\r\nI read this and am not sure, why it would be necessary to give context for uninstall.\r\nLike there isn't context given for install, so why should it be needed for uninstall.\r\n\r\nI tried research on the exact reasons why it was removed for npm, but haven't really found anything.\r\n\r\n---\r\n\r\n> * Version specifiers in `dependencies` follow the [NPM version range spec](https://devhints.io/semver) ~[cargo spec](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html)~\r\n> * Supported by Nvim `vim.version.range()`.\r\n> * Extensions to npm version spec:\r\n>   * `\"HEAD\"` means git HEAD. (npm version spec defines `\"\"` and `\"*\"` as latest stable version.)\r\n> * ~Do NOT support \"Combined ranges\".~\r\n> * Treat any string of length >=7 and lacking \".\" as a commit-id.\r\n> * Only support commit-id, tags, and HEAD.\r\n> * Tags must contain a non-alphanumeric char.\r\n\r\nWouldn't it be better if there was a more explicit way to define\r\nnon-semver dependency versions?\r\nLike if it's just a string it is interpreted as either semver or HEAD.\r\nIf there is an object it depends on the keys used.\r\n\r\n```json\r\n{\r\n  ...\r\n  \"dependencies\" : { // OPTIONAL\r\n    ...\r\n    \"<dependency-url>\" : {\r\n        \"branch\": \"<branch-name>\"\r\n    },\r\n    \"<dependency-url>\" : {\r\n        \"tag\": \"<tag-name>\"\r\n    },\r\n    \"<dependency-url>\" : {\r\n        \"ref\": \"<commit-id>\"\r\n    },\r\n    \"<dependency-url>\" : { // This is equivalent to the normal \"<dependency>\": \"<semver>\"\r\n        \"version\": \"<semver>\"\r\n    },\r\n  },\r\n}\r\n```\r\n\r\nAnother idea would be to support optional dependencies that can be\r\ninstalled to support additional features.\r\n\r\n```json\r\n{\r\n  ...\r\n  \"dependencies\" : { // OPTIONAL\r\n    ...\r\n    \"<dependency-url>\" : {\r\n        \"version\": \"<semver>\",\r\n        \"optional\": true,\r\n        // OPTIONAL\r\n        \"description\": \"Optional textual description describing the features enabled by using the optional dependency\"\r\n    },\r\n  },\r\n}\r\n```\r\n\r\nOther ideas:\r\n\r\n- path dependencies?\r\n    - though that is likely better solved on the package manager layer\r\n- OS specific dependencies?\r\n    - this could be handled by the dependency via install script.\r\n      That way there doesn't have to be a list of OSes and other\r\n      architecture features.",
            "created_at": "2023-07-11T08:31:38Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1630387427",
            "id": 1630387427,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5hLbzj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1630387427/reactions"
            },
            "updated_at": "2023-07-11T09:00:54Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1630387427",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/106187091?v=4",
                "events_url": "https://api.github.com/users/titaniumtraveler/events{/privacy}",
                "followers_url": "https://api.github.com/users/titaniumtraveler/followers",
                "following_url": "https://api.github.com/users/titaniumtraveler/following{/other_user}",
                "gists_url": "https://api.github.com/users/titaniumtraveler/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/titaniumtraveler",
                "id": 106187091,
                "login": "titaniumtraveler",
                "node_id": "U_kgDOBlRJUw",
                "organizations_url": "https://api.github.com/users/titaniumtraveler/orgs",
                "received_events_url": "https://api.github.com/users/titaniumtraveler/received_events",
                "repos_url": "https://api.github.com/users/titaniumtraveler/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/titaniumtraveler/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/titaniumtraveler/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/titaniumtraveler",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> On the topic on uninstall scripts: Is it sure that we don't want that?\r\n\r\nYes\r\n\r\n> Clean uninstall would be a really cool feature.\r\n\r\nIt would. And yet...\r\n\r\n> optional dependencies\r\n\r\nWhy do people keep mentioning this? What in the world is an \"optional\" dependency? Either it's a dependency or it isn't.\r\n\r\n> path dependencies? ... OS specific dependencies?\r\n\r\nOut of scope. Out of scope. Can wait until v2. Can wait until v2.",
            "created_at": "2023-07-11T08:58:12Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1630431973",
            "id": 1630431973,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5hLmrl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1630431973/reactions"
            },
            "updated_at": "2023-07-11T17:06:55Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1630431973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > optional dependencies\r\n> \r\n> Why do people keep mentioning this? What in the world is an \"optional\" dependency? Either it's a dependency or it isn't.\r\n\r\nI mean lots of package managers support optional dependencies.\r\nIn my experience it's often a way to make integrations with other\r\npackages more discoverable.\r\n\r\nLike it works without the dependency, but has additional features if the\r\ndependency is added.",
            "created_at": "2023-07-11T09:13:04Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1630455553",
            "id": 1630455553,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5hLscB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1630455553/reactions"
            },
            "updated_at": "2023-07-11T09:13:04Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1630455553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/106187091?v=4",
                "events_url": "https://api.github.com/users/titaniumtraveler/events{/privacy}",
                "followers_url": "https://api.github.com/users/titaniumtraveler/followers",
                "following_url": "https://api.github.com/users/titaniumtraveler/following{/other_user}",
                "gists_url": "https://api.github.com/users/titaniumtraveler/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/titaniumtraveler",
                "id": 106187091,
                "login": "titaniumtraveler",
                "node_id": "U_kgDOBlRJUw",
                "organizations_url": "https://api.github.com/users/titaniumtraveler/orgs",
                "received_events_url": "https://api.github.com/users/titaniumtraveler/received_events",
                "repos_url": "https://api.github.com/users/titaniumtraveler/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/titaniumtraveler/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/titaniumtraveler/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/titaniumtraveler",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > > optional dependencies\r\n> > \r\n> > \r\n> > Why do people keep mentioning this? What in the world is an \"optional\" dependency? Either it's a dependency or it isn't.\r\n> \r\n> I mean lots of package managers support optional dependencies. In my experience it's often a way to make integrations with other packages more discoverable.\r\n> \r\n> Like it works without the dependency, but has additional features if the dependency is added.\r\n\r\nNot needed for v1 imo, could be looked into for v2 though.",
            "created_at": "2023-07-11T09:15:55Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1630459643",
            "id": 1630459643,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5hLtb7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1630459643/reactions"
            },
            "updated_at": "2023-07-11T17:07:04Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1630459643",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Via https://twitter.com/oilsforunix/status/1680957458431213569 : \r\n\r\n> I have been lightly working on almost exactly this, many notes on [https://oilshell.zulipchat.com](https://t.co/qk22EV4Iri) (please join). Working name is \"Silo\" for dumb artifacts; \"medo\"/meadow for git-versioned trees.  It's a \"meta\" package manager because it invokes containerized apt, pip, etc.",
            "created_at": "2023-07-17T15:13:34Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1638353276",
            "id": 1638353276,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5hp0l8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1638353276/reactions"
            },
            "updated_at": "2023-07-17T15:13:34Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1638353276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> ❓ metadata probably makes sense, NPM itself allows arbitrary fields in package.json\r\n\r\nI think having a metadata field reserved for client defined data is a pretty good idea. Especially when considering that this spec is likely to change in the future and breaking old packages because they used fields that collide with fields that were added in new versions would be bad.\r\n\r\nAlso validation and deserialization is much easier if you know what to expect.",
            "created_at": "2023-08-25T08:24:02Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1692966202",
            "id": 1692966202,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5k6J06",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1692966202/reactions"
            },
            "updated_at": "2023-08-25T08:25:03Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1692966202",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/106187091?v=4",
                "events_url": "https://api.github.com/users/titaniumtraveler/events{/privacy}",
                "followers_url": "https://api.github.com/users/titaniumtraveler/followers",
                "following_url": "https://api.github.com/users/titaniumtraveler/following{/other_user}",
                "gists_url": "https://api.github.com/users/titaniumtraveler/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/titaniumtraveler",
                "id": 106187091,
                "login": "titaniumtraveler",
                "node_id": "U_kgDOBlRJUw",
                "organizations_url": "https://api.github.com/users/titaniumtraveler/orgs",
                "received_events_url": "https://api.github.com/users/titaniumtraveler/received_events",
                "repos_url": "https://api.github.com/users/titaniumtraveler/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/titaniumtraveler/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/titaniumtraveler/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/titaniumtraveler",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> whether the plugin needs/supports setup()\n\nVSCode handles this in the package.json. actually we could rip off quite a few of their [contribution points](https://code.visualstudio.com/api/references/contribution-points) although the rest of them have less obvious value.\n\n`configuration` and `configurationDefaults` maps most cleanly to `vim.g` instead of `setup()`. I guess `setup()` could be a bool on top of that.\n\nContribution points can be used for anything lua_ls annotations are currently used for (completions, hover, diagnostics, vimdoc) plus:\n- configuration UI (more generally, UI-driven plugin experience like VSCode's extensions tab)\n- enhancement of web view on neovimcraft/dotfyle\n- document `vim.g`\n- detecting multiple plugins use the same `vim.g` option name\n- behavioral hack to encourage people to document their options\n- probably more things I missed\n\nTechnically lua_ls annotations could also be contorted to do some of the above (not sure about `vim.g` or vimscript support) although the annotated `setup()` \"standard\" is too tacit I think. But if contribution points were added to the spec then I imagine someone would make a generator. Similar to how you can go schema-first or code-first in GraphQL and OpenAPI. (But schema-first is the way 😤)",
            "created_at": "2023-10-21T22:15:40Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-1773934439",
            "id": 1773934439,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM5pvBdn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1773934439/reactions"
            },
            "updated_at": "2023-10-21T23:00:37Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/1773934439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> whether the plugin needs/supports setup()\n>❓main module for the plugin (lazy currently figures that out automatically, but would be better to have this part of the spec)\n\nI think lazy.nvim only needs them to configure plugins for users, so what about the config field defines the the format of configuration command? Like `\"vim.g.foo_config = %s\"`, `\"require'bar'.setup(%s)\"`?",
            "created_at": "2025-03-29T00:50:44Z",
            "html_url": "https://github.com/neovim/packspec/issues/41#issuecomment-2762950353",
            "id": 2762950353,
            "issue_url": "https://api.github.com/repos/neovim/packspec/issues/41",
            "node_id": "IC_kwDOGzG0uM6kr0bR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/packspec/issues/comments/2762950353/reactions"
            },
            "updated_at": "2025-03-29T15:16:55Z",
            "url": "https://api.github.com/repos/neovim/packspec/issues/comments/2762950353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 17,
    "comments_url": "https://api.github.com/repos/neovim/packspec/issues/41/comments",
    "created_at": "2023-07-01T16:31:51Z",
    "events_url": "https://api.github.com/repos/neovim/packspec/issues/41/events",
    "html_url": "https://github.com/neovim/packspec/issues/41",
    "id": 1784067831,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/packspec/issues/41/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOGzG0uM5qVrb3",
    "number": 41,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 19,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 19,
        "url": "https://api.github.com/repos/neovim/packspec/issues/41/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/packspec",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/packspec/issues/41/timeline",
    "title": "Pivot to \"federated package spec\" (ecosystem-agnostic dependency spec)",
    "type": null,
    "updated_at": "2025-03-29T15:16:57Z",
    "url": "https://api.github.com/repos/neovim/packspec/issues/41",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}