{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3753/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753/commits"
        },
        "html": {
            "href": "https://github.com/neovim/nvim-lspconfig/pull/3753"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3753"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/statuses/b75bdd800f5d28e3bfabcb2162424e2f0bb78c99"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/nvim-lspconfig/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/nvim-lspconfig/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/nvim-lspconfig/branches{/branch}",
            "clone_url": "https://github.com/neovim/nvim-lspconfig.git",
            "collaborators_url": "https://api.github.com/repos/neovim/nvim-lspconfig/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/nvim-lspconfig/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/nvim-lspconfig/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/nvim-lspconfig/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/nvim-lspconfig/contributors",
            "created_at": "2019-11-13T17:12:28Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/deployments",
            "description": "Quickstart configs for Nvim LSP",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/nvim-lspconfig/downloads",
            "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/events",
            "fork": false,
            "forks": 2189,
            "forks_count": 2189,
            "forks_url": "https://api.github.com/repos/neovim/nvim-lspconfig/forks",
            "full_name": "neovim/nvim-lspconfig",
            "git_commits_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/tags{/sha}",
            "git_url": "git://github.com/neovim/nvim-lspconfig.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "",
            "hooks_url": "https://api.github.com/repos/neovim/nvim-lspconfig/hooks",
            "html_url": "https://github.com/neovim/nvim-lspconfig",
            "id": 221512407,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/nvim-lspconfig/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels{/name}",
            "language": "Lua",
            "languages_url": "https://api.github.com/repos/neovim/nvim-lspconfig/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/neovim/nvim-lspconfig/merges",
            "milestones_url": "https://api.github.com/repos/neovim/nvim-lspconfig/milestones{/number}",
            "mirror_url": null,
            "name": "nvim-lspconfig",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMjE1MTI0MDc=",
            "notifications_url": "https://api.github.com/repos/neovim/nvim-lspconfig/notifications{?since,all,participating}",
            "open_issues": 34,
            "open_issues_count": 34,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls{/number}",
            "pushed_at": "2025-04-28T13:13:29Z",
            "releases_url": "https://api.github.com/repos/neovim/nvim-lspconfig/releases{/id}",
            "size": 5730,
            "ssh_url": "git@github.com:neovim/nvim-lspconfig.git",
            "stargazers_count": 11751,
            "stargazers_url": "https://api.github.com/repos/neovim/nvim-lspconfig/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/nvim-lspconfig/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/nvim-lspconfig/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/nvim-lspconfig/subscription",
            "svn_url": "https://github.com/neovim/nvim-lspconfig",
            "tags_url": "https://api.github.com/repos/neovim/nvim-lspconfig/tags",
            "teams_url": "https://api.github.com/repos/neovim/nvim-lspconfig/teams",
            "topics": [
                "language-server",
                "language-server-protocol",
                "lsp",
                "neovim",
                "nvim",
                "plugin",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/trees{/sha}",
            "updated_at": "2025-04-29T01:26:21Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig",
            "visibility": "public",
            "watchers": 11751,
            "watchers_count": 11751,
            "web_commit_signoff_required": false
        },
        "sha": "8b0f47d851ee5343d38fe194a06ad16b9b9bd086",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": null,
    "closed_at": "2025-04-25T18:41:41Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052357982"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052357982"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "While it is probably nice for `rzls.nvim`, I don't feel like this should exist in a minimal config for `nvim-lspconfig`",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T13:00:27Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052357982",
            "id": 2052357982,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856VH9e",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 45,
            "original_position": 45,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052357982/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052357982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052359294"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052359294"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "IMO, `cmd` should not be set by default, and should instead be set explicitly by the user. I think an example should be using `--stdio` flag for starting up the server",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T13:01:45Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052359294",
            "id": 2052359294,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856VIR-",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052359294/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052359294",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052360543"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052360543"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`nvim-lspconfig` should not set inlay hint or semantic tokens to true/false IMO, so this can just be removed",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T13:03:15Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052360543",
            "id": 2052360543,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856VIlf",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 113,
            "original_position": 113,
            "original_start_line": 105,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052360543/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052360543",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052363001"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052363001"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This should also just be removed IMO. I have some config for turning it off/on in the plugin because filewatching can be very slow. However, I don't think `nvim-lspconfig` should have any of this",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T13:05:03Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir\n+    end\n+  end,\n+  capabilities = {\n+      -- HACK: Enable filewatching to later just not watch any files\n+      -- This is to not make the server watch files and make everything super slow in certain situations\n+      workspace = {\n+          didChangeWatchedFiles = {\n+              dynamicRegistration = true,\n+              -- enable file watcher capabilities for lsp clients\n+              relativePatternSupport = true,\n+          },\n+      },",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052363001",
            "id": 2052363001,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856VJL5",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 155,
            "original_position": 155,
            "original_start_line": 149,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052363001/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052363001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052365323"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052365323"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is a hack, since neovim has this turned off (probably because there is something that is not supported), but this is required for diagnostics to appear. I am not sure if there are any downsides to \"hack\" this, but I haven't noticed any problems with this",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T13:06:52Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir\n+    end\n+  end,\n+  capabilities = {\n+      -- HACK: Enable filewatching to later just not watch any files\n+      -- This is to not make the server watch files and make everything super slow in certain situations\n+      workspace = {\n+          didChangeWatchedFiles = {\n+              dynamicRegistration = true,\n+              -- enable file watcher capabilities for lsp clients\n+              relativePatternSupport = true,\n+          },\n+      },\n+      -- HACK: Doesn't show any diagnostics if we do not set this to true\n+      textDocument = {\n+          diagnostic = {\n+              dynamicRegistration = true,\n+          },\n+      },",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052365323",
            "id": 2052365323,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856VJwL",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 152,
            "original_position": 161,
            "original_start_line": 157,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052365323/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052365323",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052366589"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052366589"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is strictly not required and also sort of a hack, but diagnostics will not appear immediately if we are not refreshing here. I have not investigated why though. I personally don't have anything against this being here",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T13:08:24Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052366589",
            "id": 2052366589,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856VKD9",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": 39,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052366589/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052366589",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052367401"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052367401"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The title for `vim.notify` calls should at least be the same for all calls if we should have it",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T13:09:25Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052367401",
            "id": 2052367401,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856VKQp",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 59,
            "original_position": 59,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052367401/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052367401",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052369861"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052369861"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I am not sure about changing root_dir in `on_attach`. I don't know if it will have any effect",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T13:11:50Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052369861",
            "id": 2052369861,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856VK3F",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 143,
            "original_position": 143,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052369861/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052369861",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052537699"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052537699"
                }
            },
            "author_association": "MEMBER",
            "body": "Sounds related to discussion in https://github.com/neovim/neovim/issues/33391\r\n\r\nThis is fine for now.",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T14:57:10Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052537699",
            "id": 2052537699,
            "in_reply_to_id": 2052366589,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856Vz1j",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": 39,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781475832,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052537699/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-21T14:57:10Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052537699",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052538814"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052538814"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe try  `before_init`  instead of on_attach",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T14:58:00Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052538814",
            "id": 2052538814,
            "in_reply_to_id": 2052369861,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856V0G-",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 143,
            "original_position": 143,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781477599,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052538814/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T14:58:33Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052538814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052556761"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052556761"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think instead we can just use `on_init`, and just search in the current `root_dir` for a sln or a csproj file, because the root_markers should already have found a root_dir. `before_init` is also too early to send out the notify about opening a solution or project that is required. So something like this should work:\r\n```lua\r\n    on_init = {\r\n        function(client)\r\n            local root_dir = client.config.root_dir\r\n\r\n            for entry, type in vim.fs.dir(root_dir) do\r\n                if type == \"file\" and vim.endswith(entry, \".sln\") then\r\n                    on_init_sln(client, entry)\r\n                end\r\n            end\r\n\r\n            for entry, type in vim.fs.dir(root_dir) do\r\n                if type == \"file\" and vim.endswith(entry, \".csproj\") then\r\n                    on_init_project(client, { entry })\r\n                end\r\n            end\r\n        end\r\n    }\r\n```\r\n\r\nLooping twice to prefer a solution if we found both",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T15:08:51Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052556761",
            "id": 2052556761,
            "in_reply_to_id": 2052369861,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856V4fZ",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 143,
            "original_position": 143,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781505909,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052556761/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T15:08:52Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052556761",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052652192"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052652192"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "But we should maybe either wait for this: https://github.com/neovim/neovim/pull/33485 or use `root_dir` with a function that searches for `.sln` first, and _then_ search for `.csproj`, because the current way `root_markers` work will pretty much always find a .csproj file before finding a solution file, and that will not make it very useful, since you pretty much always want to attach to a solution if it exists",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-21T16:00:03Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052652192",
            "id": 2052652192,
            "in_reply_to_id": 2052369861,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856WPyg",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 143,
            "original_position": 143,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2781671082,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052652192/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T16:00:03Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052652192",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2053955707"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053955707"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "agree, will remove it",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-22T11:53:29Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2053955707",
            "id": 2053955707,
            "in_reply_to_id": 2052357982,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856bOB7",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 45,
            "original_position": 45,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2783843564,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053955707/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-22T11:53:29Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053955707",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
                "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
                "followers_url": "https://api.github.com/users/616b2f/followers",
                "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
                "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/616b2f",
                "id": 7147208,
                "login": "616b2f",
                "node_id": "MDQ6VXNlcjcxNDcyMDg=",
                "organizations_url": "https://api.github.com/users/616b2f/orgs",
                "received_events_url": "https://api.github.com/users/616b2f/received_events",
                "repos_url": "https://api.github.com/users/616b2f/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/616b2f",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2053963100"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053963100"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I do think it would make sense to have a default `cmd`  and using `--stdio` here make sense, as it's simpler to handle here.\r\n\r\nSaid that, it's tricky here to define a proper default `cmd`, because there is no common executable name that can be used here, I need to have another look on how the server is distributed, as there are platform specific nuget packages and some which are platform independent (which contain only `.dll` files that have to be called with `dotnet` command).",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-22T11:58:29Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2053963100",
            "id": 2053963100,
            "in_reply_to_id": 2052359294,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856bP1c",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2783855775,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053963100/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-22T11:58:51Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053963100",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
                "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
                "followers_url": "https://api.github.com/users/616b2f/followers",
                "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
                "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/616b2f",
                "id": 7147208,
                "login": "616b2f",
                "node_id": "MDQ6VXNlcjcxNDcyMDg=",
                "organizations_url": "https://api.github.com/users/616b2f/orgs",
                "received_events_url": "https://api.github.com/users/616b2f/received_events",
                "repos_url": "https://api.github.com/users/616b2f/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/616b2f",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2053966314"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053966314"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Said that, it's tricky here to define a proper default cmd, because there is no common executable name that can be used here, I need to have another look on how the server is distributed, as there are platform specific nuget packages and some which are platform independent (which contain only .dll files that have to be called with dotnet command).\n\nExactly, that is why I don't think it makes sense to have a default cmd value, and instead have docs on an example",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-22T12:00:31Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2053966314",
            "id": 2053966314,
            "in_reply_to_id": 2052359294,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856bQnq",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2783860798,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053966314/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-22T12:00:31Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053966314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2053974480"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053974480"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "agree, this is my preferred config sneaked in here :), will remove.",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-22T12:05:52Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2053974480",
            "id": 2053974480,
            "in_reply_to_id": 2052360543,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856bSnQ",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 113,
            "original_position": 113,
            "original_start_line": 105,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2783874235,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053974480/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-22T12:05:52Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2053974480",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
                "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
                "followers_url": "https://api.github.com/users/616b2f/followers",
                "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
                "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/616b2f",
                "id": 7147208,
                "login": "616b2f",
                "node_id": "MDQ6VXNlcjcxNDcyMDg=",
                "organizations_url": "https://api.github.com/users/616b2f/orgs",
                "received_events_url": "https://api.github.com/users/616b2f/received_events",
                "repos_url": "https://api.github.com/users/616b2f/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/616b2f",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2054616835"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2054616835"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I have to test this, as the current `on_attach` worked and I had an issue with jump to dependent nuget package sources where I added a workaround, not sure if this would still work with `on_init`, also the referenced issue could be a good addition, it may make sense to wait till it merged.",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-22T18:14:44Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2054616835",
            "id": 2054616835,
            "in_reply_to_id": 2052369861,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856dvcD",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 143,
            "original_position": 143,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2784941719,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2054616835/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-22T18:14:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2054616835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
                "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
                "followers_url": "https://api.github.com/users/616b2f/followers",
                "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
                "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/616b2f",
                "id": 7147208,
                "login": "616b2f",
                "node_id": "MDQ6VXNlcjcxNDcyMDg=",
                "organizations_url": "https://api.github.com/users/616b2f/orgs",
                "received_events_url": "https://api.github.com/users/616b2f/received_events",
                "repos_url": "https://api.github.com/users/616b2f/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/616b2f",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2054654611"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2054654611"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I personally had issues to setup `omnisharp` back then because there was no default `cmd` and having something that works for some people and can be used as an example to write your own `cmd` is IMO better then having only something documented which should only theoretically work, but this is only my very personal opinion.\r\n\r\nI just checked and in the platform specific nuget packages there are `Microsoft.CodeAnalysis.LanguageServer.exe` (for windows) and `Microsoft.CodeAnalysis.LanguageServer` (for linux and macos) executables in the `/content/LanguageServer` dir. So this could be used instead, so if the user put it in the path it can be picked up properly.\r\n\r\nTry to test this also and adjust here after that.",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-22T18:30:24Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2054654611",
            "id": 2054654611,
            "in_reply_to_id": 2052359294,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856d4qT",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2785002073,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2054654611/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-22T18:31:38Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2054654611",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
                "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
                "followers_url": "https://api.github.com/users/616b2f/followers",
                "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
                "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/616b2f",
                "id": 7147208,
                "login": "616b2f",
                "node_id": "MDQ6VXNlcjcxNDcyMDg=",
                "organizations_url": "https://api.github.com/users/616b2f/orgs",
                "received_events_url": "https://api.github.com/users/616b2f/received_events",
                "repos_url": "https://api.github.com/users/616b2f/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/616b2f",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2056358457"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056358457"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This can be removed in favor of some proper documentation with `---@brief`",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-23T15:45:30Z",
            "diff_hunk": "@@ -0,0 +1,161 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2056358457",
            "id": 2056358457,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856kYo5",
            "original_commit_id": "f29d5391faa22a95694173a91cb8e8ff0755a524",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2787820889,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056358457/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-23T15:55:39Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056358457",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2056374361"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056374361"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yeah I sort of agree with it being cumbersome to setup without a default cmd, but when there is bad support in package managers for this server (I haven't seen a single one have it), it is also annoying having to add things to path\n\nI don't have any big objections to this if others think it should be there. There at least needs to be documentation on how to install it and how to make the default cmd work",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-23T15:52:35Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2056374361",
            "id": 2056374361,
            "in_reply_to_id": 2052359294,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856kchZ",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2787820889,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056374361/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-23T15:55:39Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056374361",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2056380929"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056380929"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You can use `client:notify` and then not pass an empty function as last argument here and for the `project/open`\n\n```lua\nclient:notify(\"solution/open\", {\n    solution = vim.uri_from_fname(solution),\n})\n```",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-23T15:55:25Z",
            "diff_hunk": "@@ -0,0 +1,161 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify('Initializing: ' .. target, vim.log.levels.INFO, { title = 'roslyn_ls' })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request('solution/open', {",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2056380929",
            "id": 2056380929,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856keIB",
            "original_commit_id": "f29d5391faa22a95694173a91cb8e8ff0755a524",
            "original_line": 13,
            "original_position": 13,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2787820889,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056380929/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-23T15:55:39Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056380929",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2057633908"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2057633908"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is where I hope we can merge https://github.com/williamboman/mason.nvim/pull/1781 in future, I use this currently in combination with this package definition https://github.com/616b2f/mason-registry/blob/main/packages/roslyn/package.yaml.\r\n\r\nOther alternative is to compile from source, or download and extract nuget files manually, none of which is convenient IMO.\r\n\r\nI will try to write something up in the documentation part",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-24T06:25:24Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2057633908",
            "id": 2057633908,
            "in_reply_to_id": 2052359294,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856pQB0",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2789861459,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2057633908/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-24T06:25:24Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2057633908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
                "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
                "followers_url": "https://api.github.com/users/616b2f/followers",
                "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
                "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/616b2f",
                "id": 7147208,
                "login": "616b2f",
                "node_id": "MDQ6VXNlcjcxNDcyMDg=",
                "organizations_url": "https://api.github.com/users/616b2f/orgs",
                "received_events_url": "https://api.github.com/users/616b2f/received_events",
                "repos_url": "https://api.github.com/users/616b2f/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/616b2f",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2058382609"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2058382609"
                }
            },
            "author_association": "MEMBER",
            "body": "If you are trying to conditionally enable the LS, `root_dir` function is the right approach: https://github.com/neovim/neovim/issues/32037#issuecomment-2825599872\r\n\r\nSimply don't call the callback if the LS should not be enabled for a buffer.",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-24T13:02:22Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2058382609",
            "id": 2058382609,
            "in_reply_to_id": 2052369861,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856sG0R",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 143,
            "original_position": 143,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2791094480,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2058382609/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-24T13:02:23Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2058382609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2060527915"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2060527915"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- https://github.com/dotnet/roslyn\r\n```\r\n\r\nfor all lines in this comment",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-25T16:14:01Z",
            "diff_hunk": "@@ -0,0 +1,186 @@\n+---@brief\n+---\n+-- https://github.com/dotnet/roslyn",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2060527915",
            "id": 2060527915,
            "line": null,
            "node_id": "PRRC_kwDODTQC18560Skr",
            "original_commit_id": "aa72e36e39ccc4d8a5d313d79d0d7d832bb81c85",
            "original_line": 3,
            "original_position": 3,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2794643184,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2060527915/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T16:14:01Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2060527915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2060538856"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2060538856"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\n-- - if you chose `neutral` nuget version, then you have to change the `cmd` like so:\n```\n",
            "commit_id": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
            "created_at": "2025-04-25T16:21:01Z",
            "diff_hunk": "@@ -0,0 +1,186 @@\n+---@brief\n+---\n+-- https://github.com/dotnet/roslyn\n+--\n+-- To install the server, compile from source or download as nuget package.\n+-- Go to `https://dev.azure.com/azure-public/vside/_artifacts/feed/vs-impl/NuGet/Microsoft.CodeAnalysis.LanguageServer.<platform>/overview`\n+-- replace `<platform>` with one of the following `linux-x64`, `osx-x64`, `win-x64`, `neutral` (for more info on the download location see https://github.com/dotnet/roslyn/issues/71474#issuecomment-2177303207).\n+-- Download and extract it (nuget's are zip files).\n+-- - if you shose `neutral` nuget version, then you have to change the `cmd` like so:",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2060538856",
            "id": 2060538856,
            "line": null,
            "node_id": "PRRC_kwDODTQC18560VPo",
            "original_commit_id": "aa72e36e39ccc4d8a5d313d79d0d7d832bb81c85",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": null,
            "pull_request_review_id": 2794672060,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2060538856/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T16:22:39Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2060538856",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "try rebasing. the lint CI is failing because this pr branch is out of date",
            "created_at": "2025-04-23T21:50:40Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#issuecomment-2825575082",
            "id": 2825575082,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3753",
            "node_id": "IC_kwDODTQC186oatqq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2825575082/reactions"
            },
            "updated_at": "2025-04-23T21:50:40Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2825575082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> There are of course things to make solution resolution better, but this looks good to me as a minimal config that fits this repo\r\n\r\nYes sure, we can also improve in future when we encounter actual issues or have some meaningful improvements regarding speed or reliability.",
            "created_at": "2025-04-25T18:20:39Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#issuecomment-2831114184",
            "id": 2831114184,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3753",
            "node_id": "IC_kwDODTQC186ov1_I",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2831114184/reactions"
            },
            "updated_at": "2025-04-25T18:20:39Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2831114184",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
                "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
                "followers_url": "https://api.github.com/users/616b2f/followers",
                "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
                "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/616b2f",
                "id": 7147208,
                "login": "616b2f",
                "node_id": "MDQ6VXNlcjcxNDcyMDg=",
                "organizations_url": "https://api.github.com/users/616b2f/orgs",
                "received_events_url": "https://api.github.com/users/616b2f/received_events",
                "repos_url": "https://api.github.com/users/616b2f/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/616b2f",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3753/comments",
    "commits_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753/commits",
    "created_at": "2025-04-21T12:42:58Z",
    "diff_url": "https://github.com/neovim/nvim-lspconfig/pull/3753.diff",
    "draft": false,
    "head": {
        "label": "616b2f:feature/roslyn_ls",
        "ref": "feature/roslyn_ls",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/branches{/branch}",
            "clone_url": "https://github.com/616b2f/nvim-lspconfig.git",
            "collaborators_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/comments{/number}",
            "commits_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/commits{/sha}",
            "compare_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/contributors",
            "created_at": "2025-04-13T17:29:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/deployments",
            "description": "Quickstart configs for Nvim LSP",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/downloads",
            "events_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/forks",
            "full_name": "616b2f/nvim-lspconfig",
            "git_commits_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/git/tags{/sha}",
            "git_url": "git://github.com/616b2f/nvim-lspconfig.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "",
            "hooks_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/hooks",
            "html_url": "https://github.com/616b2f/nvim-lspconfig",
            "id": 965681087,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/issues{/number}",
            "keys_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/labels{/name}",
            "language": "Lua",
            "languages_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/merges",
            "milestones_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/milestones{/number}",
            "mirror_url": null,
            "name": "nvim-lspconfig",
            "node_id": "R_kgDOOY8fvw",
            "notifications_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
                "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
                "followers_url": "https://api.github.com/users/616b2f/followers",
                "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
                "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/616b2f",
                "id": 7147208,
                "login": "616b2f",
                "node_id": "MDQ6VXNlcjcxNDcyMDg=",
                "organizations_url": "https://api.github.com/users/616b2f/orgs",
                "received_events_url": "https://api.github.com/users/616b2f/received_events",
                "repos_url": "https://api.github.com/users/616b2f/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/616b2f",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/pulls{/number}",
            "pushed_at": "2025-04-26T04:42:10Z",
            "releases_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/releases{/id}",
            "size": 5538,
            "ssh_url": "git@github.com:616b2f/nvim-lspconfig.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/stargazers",
            "statuses_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/subscribers",
            "subscription_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/subscription",
            "svn_url": "https://github.com/616b2f/nvim-lspconfig",
            "tags_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/tags",
            "teams_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/git/trees{/sha}",
            "updated_at": "2025-04-26T04:42:14Z",
            "url": "https://api.github.com/repos/616b2f/nvim-lspconfig",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
            "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
            "followers_url": "https://api.github.com/users/616b2f/followers",
            "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
            "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/616b2f",
            "id": 7147208,
            "login": "616b2f",
            "node_id": "MDQ6VXNlcjcxNDcyMDg=",
            "organizations_url": "https://api.github.com/users/616b2f/orgs",
            "received_events_url": "https://api.github.com/users/616b2f/received_events",
            "repos_url": "https://api.github.com/users/616b2f/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/616b2f",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753",
    "id": 2471195450,
    "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3753",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "5ac30b9943d34cf429cded937717df9404b68314",
    "merged_at": "2025-04-25T18:41:41Z",
    "milestone": null,
    "node_id": "PR_kwDODTQC186TS3M6",
    "number": 3753,
    "patch_url": "https://github.com/neovim/nvim-lspconfig/pull/3753.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
            "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
            "followers_url": "https://api.github.com/users/glepnir/followers",
            "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
            "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/glepnir",
            "id": 41671631,
            "login": "glepnir",
            "node_id": "MDQ6VXNlcjQxNjcxNjMx",
            "organizations_url": "https://api.github.com/users/glepnir/orgs",
            "received_events_url": "https://api.github.com/users/glepnir/received_events",
            "repos_url": "https://api.github.com/users/glepnir/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/glepnir",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/nvim-lspconfig/statuses/b75bdd800f5d28e3bfabcb2162424e2f0bb78c99",
    "title": "feat(roslyn_ls): add initial config as `vim.lsp.config`",
    "updated_at": "2025-04-25T19:12:41Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
        "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
        "followers_url": "https://api.github.com/users/616b2f/followers",
        "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
        "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/616b2f",
        "id": 7147208,
        "login": "616b2f",
        "node_id": "MDQ6VXNlcjcxNDcyMDg=",
        "organizations_url": "https://api.github.com/users/616b2f/orgs",
        "received_events_url": "https://api.github.com/users/616b2f/received_events",
        "repos_url": "https://api.github.com/users/616b2f/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/616b2f",
        "user_view_type": "public"
    }
}