{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3753/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753/commits"
        },
        "html": {
            "href": "https://github.com/neovim/nvim-lspconfig/pull/3753"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3753"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/statuses/a08132d11864ddd5c95afdbf7b448cf5cf4a1e62"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/nvim-lspconfig/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/nvim-lspconfig/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/nvim-lspconfig/branches{/branch}",
            "clone_url": "https://github.com/neovim/nvim-lspconfig.git",
            "collaborators_url": "https://api.github.com/repos/neovim/nvim-lspconfig/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/nvim-lspconfig/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/nvim-lspconfig/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/nvim-lspconfig/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/nvim-lspconfig/contributors",
            "created_at": "2019-11-13T17:12:28Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/deployments",
            "description": "Quickstart configs for Nvim LSP",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/nvim-lspconfig/downloads",
            "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/events",
            "fork": false,
            "forks": 2177,
            "forks_count": 2177,
            "forks_url": "https://api.github.com/repos/neovim/nvim-lspconfig/forks",
            "full_name": "neovim/nvim-lspconfig",
            "git_commits_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/tags{/sha}",
            "git_url": "git://github.com/neovim/nvim-lspconfig.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "",
            "hooks_url": "https://api.github.com/repos/neovim/nvim-lspconfig/hooks",
            "html_url": "https://github.com/neovim/nvim-lspconfig",
            "id": 221512407,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/nvim-lspconfig/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels{/name}",
            "language": "Lua",
            "languages_url": "https://api.github.com/repos/neovim/nvim-lspconfig/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/neovim/nvim-lspconfig/merges",
            "milestones_url": "https://api.github.com/repos/neovim/nvim-lspconfig/milestones{/number}",
            "mirror_url": null,
            "name": "nvim-lspconfig",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMjE1MTI0MDc=",
            "notifications_url": "https://api.github.com/repos/neovim/nvim-lspconfig/notifications{?since,all,participating}",
            "open_issues": 47,
            "open_issues_count": 47,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls{/number}",
            "pushed_at": "2025-04-21T20:43:11Z",
            "releases_url": "https://api.github.com/repos/neovim/nvim-lspconfig/releases{/id}",
            "size": 5368,
            "ssh_url": "git@github.com:neovim/nvim-lspconfig.git",
            "stargazers_count": 11711,
            "stargazers_url": "https://api.github.com/repos/neovim/nvim-lspconfig/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/nvim-lspconfig/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/nvim-lspconfig/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/nvim-lspconfig/subscription",
            "svn_url": "https://github.com/neovim/nvim-lspconfig",
            "tags_url": "https://api.github.com/repos/neovim/nvim-lspconfig/tags",
            "teams_url": "https://api.github.com/repos/neovim/nvim-lspconfig/teams",
            "topics": [
                "language-server",
                "language-server-protocol",
                "lsp",
                "neovim",
                "nvim",
                "plugin",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/trees{/sha}",
            "updated_at": "2025-04-22T02:28:38Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig",
            "visibility": "public",
            "watchers": 11711,
            "watchers_count": 11711,
            "web_commit_signoff_required": false
        },
        "sha": "32b6a6449aaba11461fffbb596dd6310af79eea4",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": null,
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052357982"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052357982"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "While it is probably nice for `rzls.nvim`, I don't feel like this should exist in a minimal config for `nvim-lspconfig`",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T13:00:27Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052357982",
            "id": 2052357982,
            "line": 45,
            "node_id": "PRRC_kwDODTQC1856VH9e",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 45,
            "original_position": 45,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": 45,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052357982/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052357982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052359294"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052359294"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "IMO, `cmd` should not be set by default, and should instead be set explicitly by the user. I think an example should be using `--stdio` flag for starting up the server",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T13:01:45Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052359294",
            "id": 2052359294,
            "line": 86,
            "node_id": "PRRC_kwDODTQC1856VIR-",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": 86,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052359294/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052359294",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052360543"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052360543"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`nvim-lspconfig` should not set inlay hint or semantic tokens to true/false IMO, so this can just be removed",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T13:03:15Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052360543",
            "id": 2052360543,
            "line": 113,
            "node_id": "PRRC_kwDODTQC1856VIlf",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 113,
            "original_position": 113,
            "original_start_line": 105,
            "path": "lsp/roslyn_ls.lua",
            "position": 113,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052360543/reactions"
            },
            "side": "RIGHT",
            "start_line": 105,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052360543",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052363001"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052363001"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This should also just be removed IMO. I have some config for turning it off/on in the plugin because filewatching can be very slow. However, I don't think `nvim-lspconfig` should have any of this",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T13:05:03Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir\n+    end\n+  end,\n+  capabilities = {\n+      -- HACK: Enable filewatching to later just not watch any files\n+      -- This is to not make the server watch files and make everything super slow in certain situations\n+      workspace = {\n+          didChangeWatchedFiles = {\n+              dynamicRegistration = true,\n+              -- enable file watcher capabilities for lsp clients\n+              relativePatternSupport = true,\n+          },\n+      },",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052363001",
            "id": 2052363001,
            "line": 155,
            "node_id": "PRRC_kwDODTQC1856VJL5",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 155,
            "original_position": 155,
            "original_start_line": 149,
            "path": "lsp/roslyn_ls.lua",
            "position": 155,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052363001/reactions"
            },
            "side": "RIGHT",
            "start_line": 149,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052363001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052365323"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052365323"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is a hack, since neovim has this turned off (probably because there is something that is not supported), but this is required for diagnostics to appear. I am not sure if there are any downsides to \"hack\" this, but I haven't noticed any problems with this",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T13:06:52Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir\n+    end\n+  end,\n+  capabilities = {\n+      -- HACK: Enable filewatching to later just not watch any files\n+      -- This is to not make the server watch files and make everything super slow in certain situations\n+      workspace = {\n+          didChangeWatchedFiles = {\n+              dynamicRegistration = true,\n+              -- enable file watcher capabilities for lsp clients\n+              relativePatternSupport = true,\n+          },\n+      },\n+      -- HACK: Doesn't show any diagnostics if we do not set this to true\n+      textDocument = {\n+          diagnostic = {\n+              dynamicRegistration = true,\n+          },\n+      },",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052365323",
            "id": 2052365323,
            "line": 161,
            "node_id": "PRRC_kwDODTQC1856VJwL",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 161,
            "original_position": 161,
            "original_start_line": 157,
            "path": "lsp/roslyn_ls.lua",
            "position": 161,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052365323/reactions"
            },
            "side": "RIGHT",
            "start_line": 157,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052365323",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052366589"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052366589"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is strictly not required and also sort of a hack, but diagnostics will not appear immediately if we are not refreshing here. I have not investigated why though. I personally don't have anything against this being here",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T13:08:24Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052366589",
            "id": 2052366589,
            "line": 42,
            "node_id": "PRRC_kwDODTQC1856VKD9",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": 39,
            "path": "lsp/roslyn_ls.lua",
            "position": 42,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052366589/reactions"
            },
            "side": "RIGHT",
            "start_line": 39,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052366589",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052367401"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052367401"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The title for `vim.notify` calls should at least be the same for all calls if we should have it",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T13:09:25Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052367401",
            "id": 2052367401,
            "line": 59,
            "node_id": "PRRC_kwDODTQC1856VKQp",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 59,
            "original_position": 59,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": 59,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052367401/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052367401",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052369861"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052369861"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I am not sure about changing root_dir in `on_attach`. I don't know if it will have any effect",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T13:11:50Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052369861",
            "id": 2052369861,
            "line": 143,
            "node_id": "PRRC_kwDODTQC1856VK3F",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 143,
            "original_position": 143,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": 143,
            "pull_request_review_id": 2781195067,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052369861/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T13:19:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052369861",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052537699"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052537699"
                }
            },
            "author_association": "MEMBER",
            "body": "Sounds related to discussion in https://github.com/neovim/neovim/issues/33391\r\n\r\nThis is fine for now.",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T14:57:10Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052537699",
            "id": 2052537699,
            "in_reply_to_id": 2052366589,
            "line": 42,
            "node_id": "PRRC_kwDODTQC1856Vz1j",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": 39,
            "path": "lsp/roslyn_ls.lua",
            "position": 42,
            "pull_request_review_id": 2781475832,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052537699/reactions"
            },
            "side": "RIGHT",
            "start_line": 39,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-21T14:57:10Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052537699",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052538814"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052538814"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe try  `before_init`  instead of on_attach",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T14:58:00Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052538814",
            "id": 2052538814,
            "in_reply_to_id": 2052369861,
            "line": 143,
            "node_id": "PRRC_kwDODTQC1856V0G-",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 143,
            "original_position": 143,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": 143,
            "pull_request_review_id": 2781477599,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052538814/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T14:58:33Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052538814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052556761"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052556761"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think instead we can just use `on_init`, and just search in the current `root_dir` for a sln or a csproj file, because the root_markers should already have found a root_dir. `before_init` is also too early to send out the notify about opening a solution or project that is required. So something like this should work:\r\n```lua\r\n    on_init = {\r\n        function(client)\r\n            local root_dir = client.config.root_dir\r\n\r\n            for entry, type in vim.fs.dir(root_dir) do\r\n                if type == \"file\" and vim.endswith(entry, \".sln\") then\r\n                    on_init_sln(client, entry)\r\n                end\r\n            end\r\n\r\n            for entry, type in vim.fs.dir(root_dir) do\r\n                if type == \"file\" and vim.endswith(entry, \".csproj\") then\r\n                    on_init_project(client, { entry })\r\n                end\r\n            end\r\n        end\r\n    }\r\n```\r\n\r\nLooping twice to prefer a solution if we found both",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T15:08:51Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052556761",
            "id": 2052556761,
            "in_reply_to_id": 2052369861,
            "line": 143,
            "node_id": "PRRC_kwDODTQC1856V4fZ",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 143,
            "original_position": 143,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": 143,
            "pull_request_review_id": 2781505909,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052556761/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T15:08:52Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052556761",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052652192"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052652192"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "But we should maybe either wait for this: https://github.com/neovim/neovim/pull/33485 or use `root_dir` with a function that searches for `.sln` first, and _then_ search for `.csproj`, because the current way `root_markers` work will pretty much always find a .csproj file before finding a solution file, and that will not make it very useful, since you pretty much always want to attach to a solution if it exists",
            "commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "created_at": "2025-04-21T16:00:03Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+--- borrowed some source from: https://github.com/seblj/roslyn.nvim\n+-- config that activates keymaps and enables snippet support\n+---comment\n+\n+local uv = vim.uv\n+local fs = vim.fs\n+\n+---@param client vim.lsp.Client\n+---@param target string\n+local function on_init_sln(client, target)\n+  vim.notify(\"Initializing: \" .. target, vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"solution/open\", {\n+      solution = vim.uri_from_fname(target),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+---@param client vim.lsp.Client\n+---@param project_files string[]\n+local function on_init_project(client, project_files)\n+  vim.notify(\"Initializing: projects\", vim.log.levels.INFO, { title = \"roslyn-ls\" })\n+  ---@diagnostic disable-next-line: param-type-mismatch\n+  client:request(\"project/open\", {\n+      projects = vim.tbl_map(function(file)\n+          return vim.uri_from_fname(file)\n+      end, project_files),\n+  },\n+  function (err, result, context)\n+  end)\n+end\n+\n+local function roslyn_handlers()\n+  return {\n+        [\"workspace/projectInitializationComplete\"] = function(_, _, ctx)\n+            vim.notify(\"Roslyn project initialization complete\", vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+\n+            local buffers = vim.lsp.get_buffers_by_client_id(ctx.client_id)\n+            for _, buf in ipairs(buffers) do\n+                vim.lsp.util._refresh(\"textDocument/diagnostic\", { bufnr = buf })\n+            end\n+\n+            ---NOTE: This is used by rzls.nvim for init\n+            vim.api.nvim_exec_autocmds(\"User\", { pattern = \"RoslynInitialized\", modeline = false })\n+        end,\n+        [\"workspace/_roslyn_projectHasUnresolvedDependencies\"] = function()\n+            vim.notify(\"Detected missing dependencies. Run dotnet restore command.\", vim.log.levels.ERROR, {\n+                title = \"roslyn.nvim\",\n+            })\n+            return vim.NIL\n+        end,\n+        [\"workspace/_roslyn_projectNeedsRestore\"] = function(_, result, ctx)\n+            local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n+\n+            ---@diagnostic disable-next-line: param-type-mismatch\n+            client:request(\"workspace/_roslyn_restore\", result, function(err, response)\n+                if err then\n+                    vim.notify(err.message, vim.log.levels.ERROR, { title = \"roslyn.nvim\" })\n+                end\n+                if response then\n+                    for _, v in ipairs(response) do\n+                        vim.notify(v.message, vim.log.levels.INFO, { title = \"roslyn.nvim\" })\n+                    end\n+                end\n+            end)\n+\n+            return vim.NIL\n+        end,\n+        [\"razor/provideDynamicFileInfo\"] = function(_, _, _)\n+            vim.notify(\n+                \"Razor is not supported.\\nPlease use https://github.com/tris203/rzls.nvim\",\n+                vim.log.levels.WARN,\n+                { title = \"roslyn.nvim\" }\n+            )\n+            return vim.NIL\n+        end,\n+    }\n+end\n+\n+---@type vim.lsp.ClientConfig\n+return {\n+  name = \"roslyn_ls\",\n+  offset_encoding = 'utf-8',\n+  ---@param dispatchers vim.lsp.rpc.Dispatchers\n+  cmd = function (dispatchers)\n+    local pipe_name = \"/tmp/422df9c8340645ba8966061884b388aa.sock\"\n+    vim.system({\n+        \"roslyn_ls\", -- or provide the location of dll manually \"dotnet\", \"Microsoft.CodeAnalysis.LanguageServer.dll\",\n+        \"--logLevel\",\n+        \"Trace\",\n+        \"--extensionLogDirectory\", -- this property is required by the server\n+        fs.joinpath(uv.os_tmpdir(), 'roslyn_ls/logs'),\n+        \"--pipe\",\n+        pipe_name\n+      })\n+    uv.sleep(1500)\n+    return vim.lsp.rpc.connect(pipe_name)(dispatchers)\n+  end,\n+  filetypes = { \"cs\" },\n+  root_markers = { '.sln', '.csproj' },\n+  handlers = roslyn_handlers(),\n+  on_attach = function (client, bufnr)\n+    -- enable inlay hints if LSP server supports it\n+    if client.supports_method(\"textDocument/inlayHint\") then\n+      vim.lsp.inlay_hint.enable(true, { bufnr=bufnr })\n+    end\n+\n+    -- enable semantic tokens highligting hints\n+    if client.supports_method(\"textDocument/semanticTokens\") then\n+      client.server_capabilities.semanticTokensProvider = true\n+    end\n+\n+    local bufname = vim.api.nvim_buf_get_name(bufnr)\n+    -- don't try to find sln or csproj for files from libraries\n+    -- outside of the project\n+    if not bufname:match(\"^\" .. fs.joinpath(\"/tmp/MetadataAsSource/\")) then\n+      -- try find solutions root first\n+      local root_dir = nil\n+      root_dir = fs.root(bufnr, function (name, path)\n+        local match = name:match(\"%.sln$\") ~= nil\n+        if match then\n+          local sln_file = fs.joinpath(path, name)\n+          on_init_sln(client, sln_file)\n+        end\n+        return match\n+      end)\n+\n+      if not root_dir then\n+        -- try find solutions root first\n+        root_dir = fs.root(bufnr, function (name, path)\n+          local match = name:match(\"%.csproj$\") ~= nil\n+          if match then\n+            local csproj_file = fs.joinpath(path, name)\n+            on_init_project(client, {csproj_file})\n+          end\n+          return match\n+        end)\n+      end\n+\n+      assert(root_dir, \"no solution and no csproj found\")\n+\n+      client.root_dir = root_dir",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753#discussion_r2052652192",
            "id": 2052652192,
            "in_reply_to_id": 2052369861,
            "line": 143,
            "node_id": "PRRC_kwDODTQC1856WPyg",
            "original_commit_id": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
            "original_line": 143,
            "original_position": 143,
            "original_start_line": null,
            "path": "lsp/roslyn_ls.lua",
            "position": 143,
            "pull_request_review_id": 2781671082,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052652192/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-21T16:00:03Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2052652192",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3753/comments",
    "commits_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753/commits",
    "created_at": "2025-04-21T12:42:58Z",
    "diff_url": "https://github.com/neovim/nvim-lspconfig/pull/3753.diff",
    "draft": true,
    "head": {
        "label": "616b2f:feature/roslyn_ls",
        "ref": "feature/roslyn_ls",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/branches{/branch}",
            "clone_url": "https://github.com/616b2f/nvim-lspconfig.git",
            "collaborators_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/comments{/number}",
            "commits_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/commits{/sha}",
            "compare_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/contributors",
            "created_at": "2025-04-13T17:29:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/deployments",
            "description": "Quickstart configs for Nvim LSP",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/downloads",
            "events_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/forks",
            "full_name": "616b2f/nvim-lspconfig",
            "git_commits_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/git/tags{/sha}",
            "git_url": "git://github.com/616b2f/nvim-lspconfig.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "",
            "hooks_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/hooks",
            "html_url": "https://github.com/616b2f/nvim-lspconfig",
            "id": 965681087,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/issues{/number}",
            "keys_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/labels{/name}",
            "language": "Lua",
            "languages_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/merges",
            "milestones_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/milestones{/number}",
            "mirror_url": null,
            "name": "nvim-lspconfig",
            "node_id": "R_kgDOOY8fvw",
            "notifications_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
                "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
                "followers_url": "https://api.github.com/users/616b2f/followers",
                "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
                "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/616b2f",
                "id": 7147208,
                "login": "616b2f",
                "node_id": "MDQ6VXNlcjcxNDcyMDg=",
                "organizations_url": "https://api.github.com/users/616b2f/orgs",
                "received_events_url": "https://api.github.com/users/616b2f/received_events",
                "repos_url": "https://api.github.com/users/616b2f/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/616b2f",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/pulls{/number}",
            "pushed_at": "2025-04-21T12:41:05Z",
            "releases_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/releases{/id}",
            "size": 4961,
            "ssh_url": "git@github.com:616b2f/nvim-lspconfig.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/stargazers",
            "statuses_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/subscribers",
            "subscription_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/subscription",
            "svn_url": "https://github.com/616b2f/nvim-lspconfig",
            "tags_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/tags",
            "teams_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/616b2f/nvim-lspconfig/git/trees{/sha}",
            "updated_at": "2025-04-15T17:48:16Z",
            "url": "https://api.github.com/repos/616b2f/nvim-lspconfig",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
            "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
            "followers_url": "https://api.github.com/users/616b2f/followers",
            "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
            "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/616b2f",
            "id": 7147208,
            "login": "616b2f",
            "node_id": "MDQ6VXNlcjcxNDcyMDg=",
            "organizations_url": "https://api.github.com/users/616b2f/orgs",
            "received_events_url": "https://api.github.com/users/616b2f/received_events",
            "repos_url": "https://api.github.com/users/616b2f/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/616b2f",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3753",
    "id": 2471195450,
    "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3753",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "b201ea93958edb5a938875a14a0266e08541e5fc",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDODTQC186TS3M6",
    "number": 3753,
    "patch_url": "https://github.com/neovim/nvim-lspconfig/pull/3753.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/nvim-lspconfig/statuses/a08132d11864ddd5c95afdbf7b448cf5cf4a1e62",
    "title": "feat(roslyn_ls): add initial config as `vim.lsp.config`",
    "updated_at": "2025-04-21T16:00:03Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3753",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7147208?v=4",
        "events_url": "https://api.github.com/users/616b2f/events{/privacy}",
        "followers_url": "https://api.github.com/users/616b2f/followers",
        "following_url": "https://api.github.com/users/616b2f/following{/other_user}",
        "gists_url": "https://api.github.com/users/616b2f/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/616b2f",
        "id": 7147208,
        "login": "616b2f",
        "node_id": "MDQ6VXNlcjcxNDcyMDg=",
        "organizations_url": "https://api.github.com/users/616b2f/orgs",
        "received_events_url": "https://api.github.com/users/616b2f/received_events",
        "repos_url": "https://api.github.com/users/616b2f/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/616b2f/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/616b2f/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/616b2f",
        "user_view_type": "public"
    }
}