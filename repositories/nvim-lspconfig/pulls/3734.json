{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734/commits"
        },
        "html": {
            "href": "https://github.com/neovim/nvim-lspconfig/pull/3734"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/nvim-lspconfig/statuses/950e3d69092080a3d4d74e9d2515541afe56bfab"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/nvim-lspconfig/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/nvim-lspconfig/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/nvim-lspconfig/branches{/branch}",
            "clone_url": "https://github.com/neovim/nvim-lspconfig.git",
            "collaborators_url": "https://api.github.com/repos/neovim/nvim-lspconfig/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/nvim-lspconfig/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/nvim-lspconfig/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/nvim-lspconfig/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/nvim-lspconfig/contributors",
            "created_at": "2019-11-13T17:12:28Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/deployments",
            "description": "Quickstart configs for Nvim LSP",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/nvim-lspconfig/downloads",
            "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/events",
            "fork": false,
            "forks": 2196,
            "forks_count": 2196,
            "forks_url": "https://api.github.com/repos/neovim/nvim-lspconfig/forks",
            "full_name": "neovim/nvim-lspconfig",
            "git_commits_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/tags{/sha}",
            "git_url": "git://github.com/neovim/nvim-lspconfig.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": true,
            "homepage": "",
            "hooks_url": "https://api.github.com/repos/neovim/nvim-lspconfig/hooks",
            "html_url": "https://github.com/neovim/nvim-lspconfig",
            "id": 221512407,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/nvim-lspconfig/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels{/name}",
            "language": "Lua",
            "languages_url": "https://api.github.com/repos/neovim/nvim-lspconfig/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/neovim/nvim-lspconfig/merges",
            "milestones_url": "https://api.github.com/repos/neovim/nvim-lspconfig/milestones{/number}",
            "mirror_url": null,
            "name": "nvim-lspconfig",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMjE1MTI0MDc=",
            "notifications_url": "https://api.github.com/repos/neovim/nvim-lspconfig/notifications{?since,all,participating}",
            "open_issues": 22,
            "open_issues_count": 22,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls{/number}",
            "pushed_at": "2025-05-04T21:11:27Z",
            "releases_url": "https://api.github.com/repos/neovim/nvim-lspconfig/releases{/id}",
            "size": 5894,
            "ssh_url": "git@github.com:neovim/nvim-lspconfig.git",
            "stargazers_count": 11810,
            "stargazers_url": "https://api.github.com/repos/neovim/nvim-lspconfig/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/nvim-lspconfig/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/nvim-lspconfig/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/nvim-lspconfig/subscription",
            "svn_url": "https://github.com/neovim/nvim-lspconfig",
            "tags_url": "https://api.github.com/repos/neovim/nvim-lspconfig/tags",
            "teams_url": "https://api.github.com/repos/neovim/nvim-lspconfig/teams",
            "topics": [
                "language-server",
                "language-server-protocol",
                "lsp",
                "neovim",
                "nvim",
                "plugin",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/nvim-lspconfig/git/trees{/sha}",
            "updated_at": "2025-05-06T02:02:43Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig",
            "visibility": "public",
            "watchers": 11810,
            "watchers_count": 11810,
            "web_commit_signoff_required": false
        },
        "sha": "94d0fec9135719e046903bbbbf8f39e3d3436d4e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "fix #3714\r\nfix #2216\r\n\r\nThings to note:\r\n\r\n- `LspStart` starts the selected LSP and attaches to every buffer which has the right filetype. Should I only attach it to the current buffer?\r\n\r\n- `LspStop` stops the selected LSP.\r\n\r\n- `LspRestart` restart the selected LSPs, but I don't get how and why it used a timer.\r\n\r\n- Should we add `LspEnable`? Maybe in a future PR.\r\n\r\nEDIT:\r\n\r\nShould I add checks for neovim 0.11?\r\n\r\nSomething like:\r\n```lua\r\n  if not has_eleven then\r\n    error('nvim-lspconfig 2.x only supports vim.lsp.config. If you dont want to migrate, pin to nvim-lspconfig 1.x')\r\n  end\r\n```",
    "closed_at": "2025-05-04T20:18:24Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3734#discussion_r2056054179"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056054179"
                }
            },
            "author_association": "MEMBER",
            "body": " Nvim 0.11+, `LspStop` can do this, to \"disable\" the configs :\r\n\r\n    vim.lsp.enable(..., false)\r\n\r\nRequested in https://github.com/neovim/nvim-lspconfig/issues/2216",
            "commit_id": "950e3d69092080a3d4d74e9d2515541afe56bfab",
            "created_at": "2025-04-23T13:25:46Z",
            "diff_hunk": "@@ -3,129 +3,129 @@ if vim.g.lspconfig ~= nil then\n end\n vim.g.lspconfig = 1\n \n-local api, lsp = vim.api, vim.lsp\n-local util = require('lspconfig.util')\n-\n-local completion_sort = function(items)\n-  table.sort(items)\n-  return items\n+local complete_client = function(arg)\n+  return vim\n+    .iter(vim.lsp.get_clients())\n+    :map(function(client)\n+      return client.name\n+    end)\n+    :filter(function(name)\n+      return name:sub(1, #arg) == arg\n+    end)\n+    :totable()\n end\n \n-local lsp_complete_configured_servers = function(arg)\n-  return completion_sort(vim.tbl_filter(function(s)\n-    return s:sub(1, #arg) == arg\n-  end, util.available_servers()))\n+local complete_config = function(arg)\n+  return vim\n+    .iter(vim.tbl_keys(vim.lsp._enabled_configs))\n+    :filter(function(name)\n+      return name:sub(1, #arg) == arg\n+    end)\n+    :totable()\n end\n \n-local lsp_get_active_clients = function(arg)\n-  local clients = vim.tbl_map(function(client)\n-    return ('%s'):format(client.name)\n-  end, util.get_managed_clients())\n+-- Called from plugin/lspconfig.vim because it requires knowing that the last\n+-- script in scriptnames to be executed is lspconfig.\n+vim.api.nvim_create_user_command('LspInfo', ':checkhealth vim.lsp', { desc = 'Alias to `:checkhealth vim.lsp`' })\n \n-  return completion_sort(vim.tbl_filter(function(s)\n-    return s:sub(1, #arg) == arg\n-  end, clients))\n-end\n+vim.api.nvim_create_user_command('LspStart', function(info)\n+  local config = vim.lsp.config[info.args]\n+  local buffers_to_attach = {}\n \n----@return vim.lsp.Client[] clients\n-local get_clients_from_cmd_args = function(arg)\n-  local result = {}\n-  local managed_clients = util.get_managed_clients()\n-  local clients = {}\n-  for _, client in pairs(managed_clients) do\n-    clients[client.name] = client\n+  if config == nil then\n+    vim.notify((\"Invalid server name '%s'\"):format(info.args))\n+    return\n   end\n \n-  local err_msg = ''\n-  arg = arg:gsub('[%a-_]+', function(name)\n-    if clients[name] then\n-      return clients[name].id\n+  for _, bufnr in ipairs(vim.api.nvim_list_bufs()) do\n+    local filetype = vim.api.nvim_get_option_value('filetype', { buf = bufnr })\n+    if vim.tbl_contains(config.filetypes, filetype) then\n+      buffers_to_attach[#buffers_to_attach + 1] = bufnr\n     end\n-    err_msg = err_msg .. ('config \"%s\" not found\\n'):format(name)\n-    return ''\n-  end)\n-  for id in (arg or ''):gmatch '(%d+)' do\n-    local client = lsp.get_client_by_id(assert(tonumber(id)))\n-    if client == nil then\n-      err_msg = err_msg .. ('client id \"%s\" not found\\n'):format(id)\n-    end\n-    result[#result + 1] = client\n-  end\n-\n-  if err_msg ~= '' then\n-    vim.notify(('nvim-lspconfig:\\n%s'):format(err_msg:sub(1, -2)), vim.log.levels.WARN)\n-    return result\n-  end\n-\n-  if #result == 0 then\n-    return managed_clients\n   end\n-  return result\n-end\n \n--- Called from plugin/lspconfig.vim because it requires knowing that the last\n--- script in scriptnames to be executed is lspconfig.\n-api.nvim_create_user_command('LspInfo', ':checkhealth vim.lsp', { desc = 'Alias to `:checkhealth vim.lsp`' })\n-\n-api.nvim_create_user_command('LspStart', function(info)\n-  local server_name = string.len(info.args) > 0 and info.args or nil\n-  if server_name then\n-    local config = require('lspconfig.configs')[server_name]\n-    if config then\n-      config.launch()\n-      return\n+  for _, bufnr in ipairs(buffers_to_attach) do\n+    if type(config.root_dir) == 'function' then\n+      ---@param root_dir string\n+      config.root_dir(bufnr, function(root_dir)\n+        config.root_dir = root_dir\n+        vim.schedule(function()\n+          vim.lsp.start(config, {\n+            bufnr = bufnr,\n+            reuse_client = config.reuse_client,\n+            _root_markers = config.root_markers,\n+          })\n+        end)\n+      end)\n+    else\n+      vim.lsp.start(config, {\n+        bufnr = bufnr,\n+        reuse_client = config.reuse_client,\n+        _root_markers = config.root_markers,\n+      })\n     end\n   end\n-\n-  local matching_configs = util.get_config_by_ft(vim.bo.filetype)\n-  for _, config in ipairs(matching_configs) do\n-    config.launch()\n-  end\n end, {\n   desc = 'Manually launches a language server',\n   nargs = '?',\n-  complete = lsp_complete_configured_servers,\n+  complete = complete_config,\n })\n \n-api.nvim_create_user_command('LspRestart', function(info)\n+vim.api.nvim_create_user_command('LspRestart', function(info)\n+  local clients = vim\n+    .iter(info.fargs)\n+    :map(function(name)\n+      local client = vim.lsp.get_clients({ name = name })[1]\n+      if client == nil then\n+        vim.notify((\"Invalid server name '%s'\"):format(name))\n+      end\n+      return client\n+    end)\n+    :totable()\n+\n   local detach_clients = {}\n-  for _, client in ipairs(get_clients_from_cmd_args(info.args)) do\n-    -- Can remove diagnostic disabling when changing to client:stop() in nvim 0.11+\n-    --- @diagnostic disable: missing-parameter\n-    client.stop()\n-    if vim.tbl_count(client.attached_buffers) > 0 then\n-      detach_clients[client.name] = { client, lsp.get_buffers_by_client_id(client.id) }\n-    end\n+  for _, client in ipairs(clients) do\n+    detach_clients[vim.lsp.config[client.name]] = vim.lsp.get_buffers_by_client_id(client.id)\n+    client:stop()\n   end\n+\n   local timer = assert(vim.uv.new_timer())\n   timer:start(\n     500,\n-    100,\n+    0,\n     vim.schedule_wrap(function()\n-      for client_name, tuple in pairs(detach_clients) do\n-        if require('lspconfig.configs')[client_name] then\n-          local client, attached_buffers = unpack(tuple)\n-          if client.is_stopped() then\n-            for _, buf in pairs(attached_buffers) do\n-              require('lspconfig.configs')[client_name].launch(buf)\n-            end\n-            detach_clients[client_name] = nil\n+      for config, buffers in pairs(detach_clients) do\n+        for _, bufnr in ipairs(buffers) do\n+          if type(config.root_dir) == 'function' then\n+            ---@param root_dir string\n+            config.root_dir(bufnr, function(root_dir)\n+              config.root_dir = root_dir\n+              vim.schedule(function()\n+                vim.lsp.start(config, {\n+                  bufnr = bufnr,\n+                  reuse_client = config.reuse_client,\n+                  _root_markers = config.root_markers,\n+                })\n+              end)\n+            end)\n+          else\n+            vim.lsp.start(config, {\n+              bufnr = bufnr,\n+              reuse_client = config.reuse_client,\n+              _root_markers = config.root_markers,\n+            })\n           end\n         end\n       end\n-\n-      if next(detach_clients) == nil and not timer:is_closing() then\n-        timer:close()\n-      end\n     end)\n   )\n end, {\n   desc = 'Manually restart the given language client(s)',\n-  nargs = '?',\n-  complete = lsp_get_active_clients,\n+  nargs = '*',\n+  complete = complete_client,\n })\n \n-api.nvim_create_user_command('LspStop', function(info)\n+vim.api.nvim_create_user_command('LspStop', function(info)",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#discussion_r2056054179",
            "id": 2056054179,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856jOWj",
            "original_commit_id": "63962b49ecd27097eecf9709e0d7333f3b286bda",
            "original_line": 128,
            "original_position": 216,
            "original_start_line": null,
            "path": "plugin/lspconfig.lua",
            "position": null,
            "pull_request_review_id": 2787314902,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056054179/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-23T13:26:44Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056054179",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3734#discussion_r2056158474"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056158474"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I'll add it. Should I re-enable the config in `LspStart`?",
            "commit_id": "950e3d69092080a3d4d74e9d2515541afe56bfab",
            "created_at": "2025-04-23T14:12:17Z",
            "diff_hunk": "@@ -3,129 +3,129 @@ if vim.g.lspconfig ~= nil then\n end\n vim.g.lspconfig = 1\n \n-local api, lsp = vim.api, vim.lsp\n-local util = require('lspconfig.util')\n-\n-local completion_sort = function(items)\n-  table.sort(items)\n-  return items\n+local complete_client = function(arg)\n+  return vim\n+    .iter(vim.lsp.get_clients())\n+    :map(function(client)\n+      return client.name\n+    end)\n+    :filter(function(name)\n+      return name:sub(1, #arg) == arg\n+    end)\n+    :totable()\n end\n \n-local lsp_complete_configured_servers = function(arg)\n-  return completion_sort(vim.tbl_filter(function(s)\n-    return s:sub(1, #arg) == arg\n-  end, util.available_servers()))\n+local complete_config = function(arg)\n+  return vim\n+    .iter(vim.tbl_keys(vim.lsp._enabled_configs))\n+    :filter(function(name)\n+      return name:sub(1, #arg) == arg\n+    end)\n+    :totable()\n end\n \n-local lsp_get_active_clients = function(arg)\n-  local clients = vim.tbl_map(function(client)\n-    return ('%s'):format(client.name)\n-  end, util.get_managed_clients())\n+-- Called from plugin/lspconfig.vim because it requires knowing that the last\n+-- script in scriptnames to be executed is lspconfig.\n+vim.api.nvim_create_user_command('LspInfo', ':checkhealth vim.lsp', { desc = 'Alias to `:checkhealth vim.lsp`' })\n \n-  return completion_sort(vim.tbl_filter(function(s)\n-    return s:sub(1, #arg) == arg\n-  end, clients))\n-end\n+vim.api.nvim_create_user_command('LspStart', function(info)\n+  local config = vim.lsp.config[info.args]\n+  local buffers_to_attach = {}\n \n----@return vim.lsp.Client[] clients\n-local get_clients_from_cmd_args = function(arg)\n-  local result = {}\n-  local managed_clients = util.get_managed_clients()\n-  local clients = {}\n-  for _, client in pairs(managed_clients) do\n-    clients[client.name] = client\n+  if config == nil then\n+    vim.notify((\"Invalid server name '%s'\"):format(info.args))\n+    return\n   end\n \n-  local err_msg = ''\n-  arg = arg:gsub('[%a-_]+', function(name)\n-    if clients[name] then\n-      return clients[name].id\n+  for _, bufnr in ipairs(vim.api.nvim_list_bufs()) do\n+    local filetype = vim.api.nvim_get_option_value('filetype', { buf = bufnr })\n+    if vim.tbl_contains(config.filetypes, filetype) then\n+      buffers_to_attach[#buffers_to_attach + 1] = bufnr\n     end\n-    err_msg = err_msg .. ('config \"%s\" not found\\n'):format(name)\n-    return ''\n-  end)\n-  for id in (arg or ''):gmatch '(%d+)' do\n-    local client = lsp.get_client_by_id(assert(tonumber(id)))\n-    if client == nil then\n-      err_msg = err_msg .. ('client id \"%s\" not found\\n'):format(id)\n-    end\n-    result[#result + 1] = client\n-  end\n-\n-  if err_msg ~= '' then\n-    vim.notify(('nvim-lspconfig:\\n%s'):format(err_msg:sub(1, -2)), vim.log.levels.WARN)\n-    return result\n-  end\n-\n-  if #result == 0 then\n-    return managed_clients\n   end\n-  return result\n-end\n \n--- Called from plugin/lspconfig.vim because it requires knowing that the last\n--- script in scriptnames to be executed is lspconfig.\n-api.nvim_create_user_command('LspInfo', ':checkhealth vim.lsp', { desc = 'Alias to `:checkhealth vim.lsp`' })\n-\n-api.nvim_create_user_command('LspStart', function(info)\n-  local server_name = string.len(info.args) > 0 and info.args or nil\n-  if server_name then\n-    local config = require('lspconfig.configs')[server_name]\n-    if config then\n-      config.launch()\n-      return\n+  for _, bufnr in ipairs(buffers_to_attach) do\n+    if type(config.root_dir) == 'function' then\n+      ---@param root_dir string\n+      config.root_dir(bufnr, function(root_dir)\n+        config.root_dir = root_dir\n+        vim.schedule(function()\n+          vim.lsp.start(config, {\n+            bufnr = bufnr,\n+            reuse_client = config.reuse_client,\n+            _root_markers = config.root_markers,\n+          })\n+        end)\n+      end)\n+    else\n+      vim.lsp.start(config, {\n+        bufnr = bufnr,\n+        reuse_client = config.reuse_client,\n+        _root_markers = config.root_markers,\n+      })\n     end\n   end\n-\n-  local matching_configs = util.get_config_by_ft(vim.bo.filetype)\n-  for _, config in ipairs(matching_configs) do\n-    config.launch()\n-  end\n end, {\n   desc = 'Manually launches a language server',\n   nargs = '?',\n-  complete = lsp_complete_configured_servers,\n+  complete = complete_config,\n })\n \n-api.nvim_create_user_command('LspRestart', function(info)\n+vim.api.nvim_create_user_command('LspRestart', function(info)\n+  local clients = vim\n+    .iter(info.fargs)\n+    :map(function(name)\n+      local client = vim.lsp.get_clients({ name = name })[1]\n+      if client == nil then\n+        vim.notify((\"Invalid server name '%s'\"):format(name))\n+      end\n+      return client\n+    end)\n+    :totable()\n+\n   local detach_clients = {}\n-  for _, client in ipairs(get_clients_from_cmd_args(info.args)) do\n-    -- Can remove diagnostic disabling when changing to client:stop() in nvim 0.11+\n-    --- @diagnostic disable: missing-parameter\n-    client.stop()\n-    if vim.tbl_count(client.attached_buffers) > 0 then\n-      detach_clients[client.name] = { client, lsp.get_buffers_by_client_id(client.id) }\n-    end\n+  for _, client in ipairs(clients) do\n+    detach_clients[vim.lsp.config[client.name]] = vim.lsp.get_buffers_by_client_id(client.id)\n+    client:stop()\n   end\n+\n   local timer = assert(vim.uv.new_timer())\n   timer:start(\n     500,\n-    100,\n+    0,\n     vim.schedule_wrap(function()\n-      for client_name, tuple in pairs(detach_clients) do\n-        if require('lspconfig.configs')[client_name] then\n-          local client, attached_buffers = unpack(tuple)\n-          if client.is_stopped() then\n-            for _, buf in pairs(attached_buffers) do\n-              require('lspconfig.configs')[client_name].launch(buf)\n-            end\n-            detach_clients[client_name] = nil\n+      for config, buffers in pairs(detach_clients) do\n+        for _, bufnr in ipairs(buffers) do\n+          if type(config.root_dir) == 'function' then\n+            ---@param root_dir string\n+            config.root_dir(bufnr, function(root_dir)\n+              config.root_dir = root_dir\n+              vim.schedule(function()\n+                vim.lsp.start(config, {\n+                  bufnr = bufnr,\n+                  reuse_client = config.reuse_client,\n+                  _root_markers = config.root_markers,\n+                })\n+              end)\n+            end)\n+          else\n+            vim.lsp.start(config, {\n+              bufnr = bufnr,\n+              reuse_client = config.reuse_client,\n+              _root_markers = config.root_markers,\n+            })\n           end\n         end\n       end\n-\n-      if next(detach_clients) == nil and not timer:is_closing() then\n-        timer:close()\n-      end\n     end)\n   )\n end, {\n   desc = 'Manually restart the given language client(s)',\n-  nargs = '?',\n-  complete = lsp_get_active_clients,\n+  nargs = '*',\n+  complete = complete_client,\n })\n \n-api.nvim_create_user_command('LspStop', function(info)\n+vim.api.nvim_create_user_command('LspStop', function(info)",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#discussion_r2056158474",
            "id": 2056158474,
            "in_reply_to_id": 2056054179,
            "line": null,
            "node_id": "PRRC_kwDODTQC1856jn0K",
            "original_commit_id": "63962b49ecd27097eecf9709e0d7333f3b286bda",
            "original_line": 128,
            "original_position": 216,
            "original_start_line": null,
            "path": "plugin/lspconfig.lua",
            "position": null,
            "pull_request_review_id": 2787496564,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056158474/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-23T14:12:17Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2056158474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59364991?v=4",
                "events_url": "https://api.github.com/users/TheRealLorenz/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheRealLorenz/followers",
                "following_url": "https://api.github.com/users/TheRealLorenz/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheRealLorenz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheRealLorenz",
                "id": 59364991,
                "login": "TheRealLorenz",
                "node_id": "MDQ6VXNlcjU5MzY0OTkx",
                "organizations_url": "https://api.github.com/users/TheRealLorenz/orgs",
                "received_events_url": "https://api.github.com/users/TheRealLorenz/received_events",
                "repos_url": "https://api.github.com/users/TheRealLorenz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheRealLorenz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheRealLorenz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheRealLorenz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/nvim-lspconfig/pull/3734#discussion_r2070096767"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2070096767"
                }
            },
            "author_association": "MEMBER",
            "body": "> Should I re-enable the config in `LspStart`?\r\n\r\nWith https://github.com/neovim/neovim/pull/33702 (Nvim 0.11.2+), `vim.lsp.enable()` will take care of that.",
            "commit_id": "950e3d69092080a3d4d74e9d2515541afe56bfab",
            "created_at": "2025-05-01T09:36:48Z",
            "diff_hunk": "@@ -3,129 +3,129 @@ if vim.g.lspconfig ~= nil then\n end\n vim.g.lspconfig = 1\n \n-local api, lsp = vim.api, vim.lsp\n-local util = require('lspconfig.util')\n-\n-local completion_sort = function(items)\n-  table.sort(items)\n-  return items\n+local complete_client = function(arg)\n+  return vim\n+    .iter(vim.lsp.get_clients())\n+    :map(function(client)\n+      return client.name\n+    end)\n+    :filter(function(name)\n+      return name:sub(1, #arg) == arg\n+    end)\n+    :totable()\n end\n \n-local lsp_complete_configured_servers = function(arg)\n-  return completion_sort(vim.tbl_filter(function(s)\n-    return s:sub(1, #arg) == arg\n-  end, util.available_servers()))\n+local complete_config = function(arg)\n+  return vim\n+    .iter(vim.tbl_keys(vim.lsp._enabled_configs))\n+    :filter(function(name)\n+      return name:sub(1, #arg) == arg\n+    end)\n+    :totable()\n end\n \n-local lsp_get_active_clients = function(arg)\n-  local clients = vim.tbl_map(function(client)\n-    return ('%s'):format(client.name)\n-  end, util.get_managed_clients())\n+-- Called from plugin/lspconfig.vim because it requires knowing that the last\n+-- script in scriptnames to be executed is lspconfig.\n+vim.api.nvim_create_user_command('LspInfo', ':checkhealth vim.lsp', { desc = 'Alias to `:checkhealth vim.lsp`' })\n \n-  return completion_sort(vim.tbl_filter(function(s)\n-    return s:sub(1, #arg) == arg\n-  end, clients))\n-end\n+vim.api.nvim_create_user_command('LspStart', function(info)\n+  local config = vim.lsp.config[info.args]\n+  local buffers_to_attach = {}\n \n----@return vim.lsp.Client[] clients\n-local get_clients_from_cmd_args = function(arg)\n-  local result = {}\n-  local managed_clients = util.get_managed_clients()\n-  local clients = {}\n-  for _, client in pairs(managed_clients) do\n-    clients[client.name] = client\n+  if config == nil then\n+    vim.notify((\"Invalid server name '%s'\"):format(info.args))\n+    return\n   end\n \n-  local err_msg = ''\n-  arg = arg:gsub('[%a-_]+', function(name)\n-    if clients[name] then\n-      return clients[name].id\n+  for _, bufnr in ipairs(vim.api.nvim_list_bufs()) do\n+    local filetype = vim.api.nvim_get_option_value('filetype', { buf = bufnr })\n+    if vim.tbl_contains(config.filetypes, filetype) then\n+      buffers_to_attach[#buffers_to_attach + 1] = bufnr\n     end\n-    err_msg = err_msg .. ('config \"%s\" not found\\n'):format(name)\n-    return ''\n-  end)\n-  for id in (arg or ''):gmatch '(%d+)' do\n-    local client = lsp.get_client_by_id(assert(tonumber(id)))\n-    if client == nil then\n-      err_msg = err_msg .. ('client id \"%s\" not found\\n'):format(id)\n-    end\n-    result[#result + 1] = client\n-  end\n-\n-  if err_msg ~= '' then\n-    vim.notify(('nvim-lspconfig:\\n%s'):format(err_msg:sub(1, -2)), vim.log.levels.WARN)\n-    return result\n-  end\n-\n-  if #result == 0 then\n-    return managed_clients\n   end\n-  return result\n-end\n \n--- Called from plugin/lspconfig.vim because it requires knowing that the last\n--- script in scriptnames to be executed is lspconfig.\n-api.nvim_create_user_command('LspInfo', ':checkhealth vim.lsp', { desc = 'Alias to `:checkhealth vim.lsp`' })\n-\n-api.nvim_create_user_command('LspStart', function(info)\n-  local server_name = string.len(info.args) > 0 and info.args or nil\n-  if server_name then\n-    local config = require('lspconfig.configs')[server_name]\n-    if config then\n-      config.launch()\n-      return\n+  for _, bufnr in ipairs(buffers_to_attach) do\n+    if type(config.root_dir) == 'function' then\n+      ---@param root_dir string\n+      config.root_dir(bufnr, function(root_dir)\n+        config.root_dir = root_dir\n+        vim.schedule(function()\n+          vim.lsp.start(config, {\n+            bufnr = bufnr,\n+            reuse_client = config.reuse_client,\n+            _root_markers = config.root_markers,\n+          })\n+        end)\n+      end)\n+    else\n+      vim.lsp.start(config, {\n+        bufnr = bufnr,\n+        reuse_client = config.reuse_client,\n+        _root_markers = config.root_markers,\n+      })\n     end\n   end\n-\n-  local matching_configs = util.get_config_by_ft(vim.bo.filetype)\n-  for _, config in ipairs(matching_configs) do\n-    config.launch()\n-  end\n end, {\n   desc = 'Manually launches a language server',\n   nargs = '?',\n-  complete = lsp_complete_configured_servers,\n+  complete = complete_config,\n })\n \n-api.nvim_create_user_command('LspRestart', function(info)\n+vim.api.nvim_create_user_command('LspRestart', function(info)\n+  local clients = vim\n+    .iter(info.fargs)\n+    :map(function(name)\n+      local client = vim.lsp.get_clients({ name = name })[1]\n+      if client == nil then\n+        vim.notify((\"Invalid server name '%s'\"):format(name))\n+      end\n+      return client\n+    end)\n+    :totable()\n+\n   local detach_clients = {}\n-  for _, client in ipairs(get_clients_from_cmd_args(info.args)) do\n-    -- Can remove diagnostic disabling when changing to client:stop() in nvim 0.11+\n-    --- @diagnostic disable: missing-parameter\n-    client.stop()\n-    if vim.tbl_count(client.attached_buffers) > 0 then\n-      detach_clients[client.name] = { client, lsp.get_buffers_by_client_id(client.id) }\n-    end\n+  for _, client in ipairs(clients) do\n+    detach_clients[vim.lsp.config[client.name]] = vim.lsp.get_buffers_by_client_id(client.id)\n+    client:stop()\n   end\n+\n   local timer = assert(vim.uv.new_timer())\n   timer:start(\n     500,\n-    100,\n+    0,\n     vim.schedule_wrap(function()\n-      for client_name, tuple in pairs(detach_clients) do\n-        if require('lspconfig.configs')[client_name] then\n-          local client, attached_buffers = unpack(tuple)\n-          if client.is_stopped() then\n-            for _, buf in pairs(attached_buffers) do\n-              require('lspconfig.configs')[client_name].launch(buf)\n-            end\n-            detach_clients[client_name] = nil\n+      for config, buffers in pairs(detach_clients) do\n+        for _, bufnr in ipairs(buffers) do\n+          if type(config.root_dir) == 'function' then\n+            ---@param root_dir string\n+            config.root_dir(bufnr, function(root_dir)\n+              config.root_dir = root_dir\n+              vim.schedule(function()\n+                vim.lsp.start(config, {\n+                  bufnr = bufnr,\n+                  reuse_client = config.reuse_client,\n+                  _root_markers = config.root_markers,\n+                })\n+              end)\n+            end)\n+          else\n+            vim.lsp.start(config, {\n+              bufnr = bufnr,\n+              reuse_client = config.reuse_client,\n+              _root_markers = config.root_markers,\n+            })\n           end\n         end\n       end\n-\n-      if next(detach_clients) == nil and not timer:is_closing() then\n-        timer:close()\n-      end\n     end)\n   )\n end, {\n   desc = 'Manually restart the given language client(s)',\n-  nargs = '?',\n-  complete = lsp_get_active_clients,\n+  nargs = '*',\n+  complete = complete_client,\n })\n \n-api.nvim_create_user_command('LspStop', function(info)\n+vim.api.nvim_create_user_command('LspStop', function(info)",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#discussion_r2070096767",
            "id": 2070096767,
            "in_reply_to_id": 2056054179,
            "line": null,
            "node_id": "PRRC_kwDODTQC1857Yyt_",
            "original_commit_id": "63962b49ecd27097eecf9709e0d7333f3b286bda",
            "original_line": 128,
            "original_position": 216,
            "original_start_line": null,
            "path": "plugin/lspconfig.lua",
            "position": null,
            "pull_request_review_id": 2809527296,
            "pull_request_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2070096767/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-01T09:36:48Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments/2070096767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I don't think `LspStart` and `LspRestart` will work when `root_dir` is a function with this. I think you must do something like this:\r\n\r\n```lua\r\nif type(config.root_dir) == 'function' then\r\n  ---@param root_dir string\r\n  config.root_dir(bufnr, function(root_dir)\r\n    config.root_dir = root_dir\r\n    vim.schedule(function()\r\n      vim.lsp.start(config, {\r\n        bufnr = bufnr,\r\n        reuse_client = config.reuse_client,\r\n        _root_markers = config.root_markers,\r\n      })\r\n    end)\r\n  end)\r\nelse\r\n  vim.lsp.start(config, {\r\n    bufnr = bufnr,\r\n    reuse_client = config.reuse_client,\r\n    _root_markers = config.root_markers,\r\n  })\r\nend\r\n```\r\n\r\nInspiration taken from neovim source code, in `lsp_enable_callback` function in `vim/lsp.lua`",
            "created_at": "2025-04-18T13:25:30Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2815447734",
            "id": 2815447734,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186n0FK2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2815447734/reactions"
            },
            "updated_at": "2025-04-18T13:25:30Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2815447734",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblyng/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblyng/followers",
                "following_url": "https://api.github.com/users/seblyng/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblyng/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblyng",
                "id": 5160701,
                "login": "seblyng",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblyng/orgs",
                "received_events_url": "https://api.github.com/users/seblyng/received_events",
                "repos_url": "https://api.github.com/users/seblyng/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblyng/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblyng/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblyng",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I don't think `LspStart` and `LspRestart` will work when `root_dir` is a function with this. I think you must do something like this:\r\n> \r\n> ```lua\r\n> if type(config.root_dir) == 'function' then\r\n>   ---@param root_dir string\r\n>   config.root_dir(bufnr, function(root_dir)\r\n>     config.root_dir = root_dir\r\n>     vim.schedule(function()\r\n>       vim.lsp.start(config, {\r\n>         bufnr = bufnr,\r\n>         reuse_client = config.reuse_client,\r\n>         _root_markers = config.root_markers,\r\n>       })\r\n>     end)\r\n>   end)\r\n> else\r\n>   vim.lsp.start(config, {\r\n>     bufnr = bufnr,\r\n>     reuse_client = config.reuse_client,\r\n>     _root_markers = config.root_markers,\r\n>   })\r\n> end\r\n> ```\r\n> \r\n> Inspiration taken from neovim source code, in `lsp_enable_callback` function in `vim/lsp.lua`\r\n\r\nThank you, I totally missed that. The `vim.lsp` API is a little but cumbersome as for now.",
            "created_at": "2025-04-18T13:54:17Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2815493664",
            "id": 2815493664,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186n0QYg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2815493664/reactions"
            },
            "updated_at": "2025-05-04T20:16:12Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2815493664",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59364991?v=4",
                "events_url": "https://api.github.com/users/TheRealLorenz/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheRealLorenz/followers",
                "following_url": "https://api.github.com/users/TheRealLorenz/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheRealLorenz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheRealLorenz",
                "id": 59364991,
                "login": "TheRealLorenz",
                "node_id": "MDQ6VXNlcjU5MzY0OTkx",
                "organizations_url": "https://api.github.com/users/TheRealLorenz/orgs",
                "received_events_url": "https://api.github.com/users/TheRealLorenz/received_events",
                "repos_url": "https://api.github.com/users/TheRealLorenz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheRealLorenz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheRealLorenz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheRealLorenz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Opened a PR at https://github.com/neovim/neovim/pull/33578 to make `:LspStart` less ugly.",
            "created_at": "2025-04-22T14:39:47Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2821559960",
            "id": 2821559960,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186oLZaY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2821559960/reactions"
            },
            "updated_at": "2025-04-22T14:39:47Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2821559960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59364991?v=4",
                "events_url": "https://api.github.com/users/TheRealLorenz/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheRealLorenz/followers",
                "following_url": "https://api.github.com/users/TheRealLorenz/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheRealLorenz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheRealLorenz",
                "id": 59364991,
                "login": "TheRealLorenz",
                "node_id": "MDQ6VXNlcjU5MzY0OTkx",
                "organizations_url": "https://api.github.com/users/TheRealLorenz/orgs",
                "received_events_url": "https://api.github.com/users/TheRealLorenz/received_events",
                "repos_url": "https://api.github.com/users/TheRealLorenz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheRealLorenz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheRealLorenz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheRealLorenz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk On further thinking, probably these commands do not suit `vim.lsp` quite well (at least semantically).\r\n\r\nWe could use `LspEnable` (with optional ++now), `LspDisable`, `LspStart` and `LspStop` \"systemctl-like\"\n\nEDIT: or we could have enable + start as LspStart and disable + stop as LspStop",
            "created_at": "2025-04-23T14:22:44Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2824490893",
            "id": 2824490893,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186oWk-N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2824490893/reactions"
            },
            "updated_at": "2025-04-23T14:52:03Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2824490893",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59364991?v=4",
                "events_url": "https://api.github.com/users/TheRealLorenz/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheRealLorenz/followers",
                "following_url": "https://api.github.com/users/TheRealLorenz/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheRealLorenz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheRealLorenz",
                "id": 59364991,
                "login": "TheRealLorenz",
                "node_id": "MDQ6VXNlcjU5MzY0OTkx",
                "organizations_url": "https://api.github.com/users/TheRealLorenz/orgs",
                "received_events_url": "https://api.github.com/users/TheRealLorenz/received_events",
                "repos_url": "https://api.github.com/users/TheRealLorenz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheRealLorenz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheRealLorenz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheRealLorenz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "What's the current situation of this after https://github.com/neovim/neovim/pull/33702? @justinmk \r\n\r\nIt should simplify logic as:\r\n\r\n`:LspStart xxx` as `vim.lsp.enable(xxx)`\r\n`:LspStop xxx` as `vim.lsp.enable(xxx, false)`\r\n`:LspRestart xxx` as `vim.lsp.enable(xxx, false); vim.lsp.enable(xxx)`\r\n\r\nProbably it would be useful to rename the commands when (and if) they're upstreamed to neovim core.",
            "created_at": "2025-05-01T09:24:21Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2844462021",
            "id": 2844462021,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186piwvF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844462021/reactions"
            },
            "updated_at": "2025-05-01T09:24:21Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844462021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59364991?v=4",
                "events_url": "https://api.github.com/users/TheRealLorenz/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheRealLorenz/followers",
                "following_url": "https://api.github.com/users/TheRealLorenz/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheRealLorenz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheRealLorenz",
                "id": 59364991,
                "login": "TheRealLorenz",
                "node_id": "MDQ6VXNlcjU5MzY0OTkx",
                "organizations_url": "https://api.github.com/users/TheRealLorenz/orgs",
                "received_events_url": "https://api.github.com/users/TheRealLorenz/received_events",
                "repos_url": "https://api.github.com/users/TheRealLorenz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheRealLorenz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheRealLorenz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheRealLorenz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It should simplify logic as:\r\n\r\nyes, exactly 👍 \r\n\r\n\r\n\r\n> rename the commands when (and if) they're upstreamed to neovim core.\r\n\r\nyeah, most likely the upstreamed form will be `:Lsp <subcommand>`",
            "created_at": "2025-05-01T09:37:59Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2844546449",
            "id": 2844546449,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186pjFWR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844546449/reactions"
            },
            "updated_at": "2025-05-01T09:37:59Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844546449",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It probably makes sense to add a `if vim.fn.has('nvim-0.11.2') == 1` section  starting here: https://github.com/neovim/nvim-lspconfig/blob/94d0fec9135719e046903bbbbf8f39e3d3436d4e/plugin/lspconfig.lua#L68\r\n\r\n which defines the commands for Nvim 0.11.2+, and then `return` early. Then the old code below that, can just stay as it is.",
            "created_at": "2025-05-01T09:42:04Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2844552837",
            "id": 2844552837,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186pjG6F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844552837/reactions"
            },
            "updated_at": "2025-05-01T09:44:04Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844552837",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is there a way to provide completion for `:LspStart` ? I didn't find one as the configs are lazily resolved on request if I'm correct.",
            "created_at": "2025-05-01T10:39:16Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2844622770",
            "id": 2844622770,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186pjX-y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844622770/reactions"
            },
            "updated_at": "2025-05-01T10:39:16Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844622770",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59364991?v=4",
                "events_url": "https://api.github.com/users/TheRealLorenz/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheRealLorenz/followers",
                "following_url": "https://api.github.com/users/TheRealLorenz/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheRealLorenz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheRealLorenz",
                "id": 59364991,
                "login": "TheRealLorenz",
                "node_id": "MDQ6VXNlcjU5MzY0OTkx",
                "organizations_url": "https://api.github.com/users/TheRealLorenz/orgs",
                "received_events_url": "https://api.github.com/users/TheRealLorenz/received_events",
                "repos_url": "https://api.github.com/users/TheRealLorenz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheRealLorenz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheRealLorenz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheRealLorenz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> provide completion for `:LspStart` ? I didn't find one as the configs are lazily resolved on request if I'm correct.\r\n\r\noh, we could copy the logic from here: https://github.com/neovim/neovim/blob/97a6259442526e33a73201557b1cb74ccdb64eef/runtime/lua/vim/lsp.lua#L443-L454",
            "created_at": "2025-05-01T10:43:46Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2844628137",
            "id": 2844628137,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186pjZSp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844628137/reactions"
            },
            "updated_at": "2025-05-01T10:43:46Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844628137",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > provide completion for `:LspStart` ? I didn't find one as the configs are lazily resolved on request if I'm correct.\r\n> \r\n> oh, we could copy the logic from here: https://github.com/neovim/neovim/blob/97a6259442526e33a73201557b1cb74ccdb64eef/runtime/lua/vim/lsp.lua#L443-L454\r\n\r\nThat would be fine for getting configs under `lsp/` but wouldn't cover configs defined by the user in his dotfiles as `vim.lsp.config('foo', {})`, am I right?",
            "created_at": "2025-05-01T11:04:24Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2844650896",
            "id": 2844650896,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186pje2Q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844650896/reactions"
            },
            "updated_at": "2025-05-01T11:04:24Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844650896",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59364991?v=4",
                "events_url": "https://api.github.com/users/TheRealLorenz/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheRealLorenz/followers",
                "following_url": "https://api.github.com/users/TheRealLorenz/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheRealLorenz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheRealLorenz",
                "id": 59364991,
                "login": "TheRealLorenz",
                "node_id": "MDQ6VXNlcjU5MzY0OTkx",
                "organizations_url": "https://api.github.com/users/TheRealLorenz/orgs",
                "received_events_url": "https://api.github.com/users/TheRealLorenz/received_events",
                "repos_url": "https://api.github.com/users/TheRealLorenz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheRealLorenz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheRealLorenz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheRealLorenz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> wouldn't cover configs defined by the user in his dotfiles as `vim.lsp.config('foo', {})`, am I right?\r\n\r\nright, but we can think about that later.",
            "created_at": "2025-05-01T12:35:25Z",
            "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734#issuecomment-2844756606",
            "id": 2844756606,
            "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
            "node_id": "IC_kwDODTQC186pj4p-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844756606/reactions"
            },
            "updated_at": "2025-05-01T12:35:25Z",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/comments/2844756606",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734/comments",
    "commits_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734/commits",
    "created_at": "2025-04-16T09:56:44Z",
    "diff_url": "https://github.com/neovim/nvim-lspconfig/pull/3734.diff",
    "draft": false,
    "head": {
        "label": "TheRealLorenz:feature/migrate-builtin-commands",
        "ref": "feature/migrate-builtin-commands",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/branches{/branch}",
            "clone_url": "https://github.com/TheRealLorenz/nvim-lspconfig.git",
            "collaborators_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/comments{/number}",
            "commits_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/commits{/sha}",
            "compare_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/contributors",
            "created_at": "2025-03-21T14:59:55Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/deployments",
            "description": "Quickstart configs for Nvim LSP",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/downloads",
            "events_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/forks",
            "full_name": "TheRealLorenz/nvim-lspconfig",
            "git_commits_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/git/tags{/sha}",
            "git_url": "git://github.com/TheRealLorenz/nvim-lspconfig.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "",
            "hooks_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/hooks",
            "html_url": "https://github.com/TheRealLorenz/nvim-lspconfig",
            "id": 952604409,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/issues{/number}",
            "keys_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/labels{/name}",
            "language": "Lua",
            "languages_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/languages",
            "license": {
                "key": "apache-2.0",
                "name": "Apache License 2.0",
                "node_id": "MDc6TGljZW5zZTI=",
                "spdx_id": "Apache-2.0",
                "url": "https://api.github.com/licenses/apache-2.0"
            },
            "merges_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/merges",
            "milestones_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/milestones{/number}",
            "mirror_url": null,
            "name": "nvim-lspconfig",
            "node_id": "R_kgDOOMeW-Q",
            "notifications_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59364991?v=4",
                "events_url": "https://api.github.com/users/TheRealLorenz/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheRealLorenz/followers",
                "following_url": "https://api.github.com/users/TheRealLorenz/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheRealLorenz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheRealLorenz",
                "id": 59364991,
                "login": "TheRealLorenz",
                "node_id": "MDQ6VXNlcjU5MzY0OTkx",
                "organizations_url": "https://api.github.com/users/TheRealLorenz/orgs",
                "received_events_url": "https://api.github.com/users/TheRealLorenz/received_events",
                "repos_url": "https://api.github.com/users/TheRealLorenz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheRealLorenz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheRealLorenz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheRealLorenz",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/pulls{/number}",
            "pushed_at": "2025-05-01T13:17:28Z",
            "releases_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/releases{/id}",
            "size": 5792,
            "ssh_url": "git@github.com:TheRealLorenz/nvim-lspconfig.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/stargazers",
            "statuses_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/subscribers",
            "subscription_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/subscription",
            "svn_url": "https://github.com/TheRealLorenz/nvim-lspconfig",
            "tags_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/tags",
            "teams_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig/git/trees{/sha}",
            "updated_at": "2025-05-01T13:07:18Z",
            "url": "https://api.github.com/repos/TheRealLorenz/nvim-lspconfig",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "950e3d69092080a3d4d74e9d2515541afe56bfab",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/59364991?v=4",
            "events_url": "https://api.github.com/users/TheRealLorenz/events{/privacy}",
            "followers_url": "https://api.github.com/users/TheRealLorenz/followers",
            "following_url": "https://api.github.com/users/TheRealLorenz/following{/other_user}",
            "gists_url": "https://api.github.com/users/TheRealLorenz/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/TheRealLorenz",
            "id": 59364991,
            "login": "TheRealLorenz",
            "node_id": "MDQ6VXNlcjU5MzY0OTkx",
            "organizations_url": "https://api.github.com/users/TheRealLorenz/orgs",
            "received_events_url": "https://api.github.com/users/TheRealLorenz/received_events",
            "repos_url": "https://api.github.com/users/TheRealLorenz/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/TheRealLorenz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TheRealLorenz/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/TheRealLorenz",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/nvim-lspconfig/pull/3734",
    "id": 2463098885,
    "issue_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3734",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "e4d1c8bf9077ecf617ce18f27738658a7d76ac95",
    "merged_at": "2025-05-04T20:18:24Z",
    "milestone": null,
    "node_id": "PR_kwDODTQC186Sz-gF",
    "number": 3734,
    "patch_url": "https://github.com/neovim/nvim-lspconfig/pull/3734.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
            "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
            "followers_url": "https://api.github.com/users/glepnir/followers",
            "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
            "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/glepnir",
            "id": 41671631,
            "login": "glepnir",
            "node_id": "MDQ6VXNlcjQxNjcxNjMx",
            "organizations_url": "https://api.github.com/users/glepnir/orgs",
            "received_events_url": "https://api.github.com/users/glepnir/received_events",
            "repos_url": "https://api.github.com/users/glepnir/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/glepnir",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/nvim-lspconfig/statuses/950e3d69092080a3d4d74e9d2515541afe56bfab",
    "title": "Feature: migrate builtin commands",
    "updated_at": "2025-05-04T20:18:24Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/pulls/3734",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/59364991?v=4",
        "events_url": "https://api.github.com/users/TheRealLorenz/events{/privacy}",
        "followers_url": "https://api.github.com/users/TheRealLorenz/followers",
        "following_url": "https://api.github.com/users/TheRealLorenz/following{/other_user}",
        "gists_url": "https://api.github.com/users/TheRealLorenz/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/TheRealLorenz",
        "id": 59364991,
        "login": "TheRealLorenz",
        "node_id": "MDQ6VXNlcjU5MzY0OTkx",
        "organizations_url": "https://api.github.com/users/TheRealLorenz/orgs",
        "received_events_url": "https://api.github.com/users/TheRealLorenz/received_events",
        "repos_url": "https://api.github.com/users/TheRealLorenz/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/TheRealLorenz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/TheRealLorenz/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/TheRealLorenz",
        "user_view_type": "public"
    }
}