{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Description\n\n...gram Files/Neovim/share/nvim/runtime/lua/vim/lsp/rpc.lua:800: Spawning language server with cmd: `{ \"yaml-language-server\", \"--stdio\" }` failed. The language server is either not installed, missing from PATH, or not executable.\n\nmy file lsp-config.lua:\nreturn {\n  \"neovim/nvim-lspconfig\",\n  event = { \"BufReadPre\", \"BufNewFile\" },\n  dependencies = {\n    \"hrsh7th/cmp-nvim-lsp\",\n    { \"antosha417/nvim-lsp-file-operations\", config = true },\n    { \"folke/neodev.nvim\", opts = {} },\n  },\n  config = function()\n    -- import lspconfig plugin\n    local lspconfig = require(\"lspconfig\")\n\n    -- import mason_lspconfig plugin\n    local mason_lspconfig = require(\"mason-lspconfig\")\n\n    -- import cmp-nvim-lsp plugin\n    local cmp_nvim_lsp = require(\"cmp_nvim_lsp\")\n\n    local keymap = vim.keymap -- for conciseness\n\n    vim.api.nvim_create_autocmd(\"LspAttach\", {\n      group = vim.api.nvim_create_augroup(\"UserLspConfig\", {}),\n      callback = function(ev)\n        -- Buffer local mappings.\n        -- See `:help vim.lsp.*` for documentation on any of the below functions\n        local opts = { buffer = ev.buf, silent = true }\n\n        -- set keybinds\n        opts.desc = \"Show LSP references\"\n        keymap.set(\"n\", \"gR\", \"<cmd>Telescope lsp_references<CR>\", opts) -- show definition, references\n\n        opts.desc = \"Go to declaration\"\n        keymap.set(\"n\", \"gD\", vim.lsp.buf.declaration, opts) -- go to declaration\n\n        opts.desc = \"Show LSP definitions\"\n        keymap.set(\"n\", \"gd\", \"<cmd>Telescope lsp_definitions<CR>\", opts) -- show lsp definitions\n\n        opts.desc = \"Show LSP implementations\"\n        keymap.set(\"n\", \"gi\", \"<cmd>Telescope lsp_implementations<CR>\", opts) -- show lsp implementations\n\n        opts.desc = \"Show LSP type definitions\"\n        keymap.set(\"n\", \"gt\", \"<cmd>Telescope lsp_type_definitions<CR>\", opts) -- show lsp type definitions\n\n        opts.desc = \"See available code actions\"\n        keymap.set({ \"n\", \"v\" }, \"<leader>ca\", vim.lsp.buf.code_action, opts) -- see available code actions, in visual mode will apply to selection\n\n        opts.desc = \"Smart rename\"\n        keymap.set(\"n\", \"<leader>rn\", vim.lsp.buf.rename, opts) -- smart rename\n\n        opts.desc = \"Show buffer diagnostics\"\n        keymap.set(\"n\", \"<leader>D\", \"<cmd>Telescope diagnostics bufnr=0<CR>\", opts) -- show  diagnostics for file\n\n        opts.desc = \"Show line diagnostics\"\n        keymap.set(\"n\", \"<leader>d\", vim.diagnostic.open_float, opts) -- show diagnostics for line\n\n        opts.desc = \"Go to previous diagnostic\"\n        keymap.set(\"n\", \"[d\", vim.diagnostic.goto_prev, opts) -- jump to previous diagnostic in buffer\n\n        opts.desc = \"Go to next diagnostic\"\n        keymap.set(\"n\", \"]d\", vim.diagnostic.goto_next, opts) -- jump to next diagnostic in buffer\n\n        opts.desc = \"Show documentation for what is under cursor\"\n        keymap.set(\"n\", \"K\", vim.lsp.buf.hover, opts) -- show documentation for what is under cursor\n\n        opts.desc = \"Restart LSP\"\n        keymap.set(\"n\", \"<leader>rs\", \":LspRestart<CR>\", opts) -- mapping to restart lsp if necessary\n      end,\n    })\n\n    -- used to enable autocompletion (assign to every lsp server config)\n    local capabilities = cmp_nvim_lsp.default_capabilities()\n\n    vim.lsp.handlers[\"textDocument/publishDiagnostics\"] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {\n      underline = true,\n      update_in_insert = false,\n      virtual_text = { spacing = 4, prefix = \" \" },\n      severity_sort = true,\n    })\n    -- Change the Diagnostic symbols in the sign column (gutter)\n    -- (not in youtube nvim video)\n    local signs = { Error = \" \", Warn = \" \", Hint = \"󰠠 \", Info = \" \" }\n    for type, icon in pairs(signs) do\n      local hl = \"DiagnosticSign\" .. type\n      vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = \"\" })\n    end\n\n    vim.diagnostic.config({\n      virtual_text = {\n        prefix = \" \",\n      },\n      update_in_insert = true,\n      float = {\n        source = \"always\", -- Or \"if_many\"\n      },\n    })\n\n    mason_lspconfig.setup_handlers({\n      -- default handler for installed servers\n      function(server_name)\n        lspconfig[server_name].setup({\n          capabilities = capabilities,\n        })\n      end,\n      [\"svelte\"] = function()\n        -- configure svelte server\n        lspconfig[\"svelte\"].setup({\n          capabilities = capabilities,\n          on_attach = function(client, bufnr)\n            vim.api.nvim_create_autocmd(\"BufWritePost\", {\n              pattern = { \"*.js\", \"*.ts\" },\n              callback = function(ctx)\n                -- Here use ctx.match instead of ctx.file\n                client.notify(\"$/onDidChangeTsOrJsFile\", { uri = ctx.match })\n              end,\n            })\n          end,\n        })\n      end,\n      [\"dockerls\"] = function()\n        -- configure docker language server\n        lspconfig[\"dockerls\"].setup({\n          capabilities = capabilities,\n          settings = {\n            docker = {\n              languageserver = {\n                formatter = {\n                  ignoreMultilineInstructions = true,\n                },\n              },\n            },\n          },\n        })\n      end,\n      [\"docker_compose_language_service\"] = function()\n        -- configure docker compose language server\n        lspconfig[\"docker_compose_language_service\"].setup({\n          capabilities = capabilities,\n          settings = {\n            docker = {\n              languageserver = {\n                formatter = {\n                  ignoreMultilineInstructions = true,\n                },\n              },\n            },\n          },\n        })\n      end,\n      [\"yamlls\"] = function()\n        -- configure yaml language server\n        lspconfig[\"yamlls\"].setup({\n          capabilities = capabilities,\n          settings = {\n            yaml = {\n              schemas = {\n                [\"https://raw.githubusercontent.com/quantumblacklabs/kedro/develop/static/jsonschema/kedro-catalog-0.17.json\"] = \"conf/**/*catalog*\",\n                [\"https://json.schemastore.org/github-workflow.json\"] = \"/.github/workflows/*\",\n              },\n            },\n          },\n        })\n      end,\n      [\"jinja_lsp\"] = function()\n        -- configure jinja language server\n        lspconfig[\"jinja_lsp\"].setup({\n          capabilities = capabilities,\n          filetypes = { \"jinja\", \"rust\", \"jinja.html\", \"html\" },\n          args = {\n            \"--indent=2\",\n          }\n        })\n      end,\n      [\"graphql\"] = function()\n        -- configure graphql language server\n        lspconfig[\"graphql\"].setup({\n          capabilities = capabilities,\n          filetypes = { \"graphql\", \"gql\", \"svelte\", \"typescriptreact\", \"javascriptreact\" },\n        })\n      end,\n      -- [\"ruff_lsp\"] = function()\n      --   -- configure ruff language server\n      --   lspconfig[\"ruff_lsp\"].setup({\n      --     capabilities = capabilities,\n      --     init_options = {\n      --       settings = {\n      --         args = {\n      --           \"--select=E,T201\",\n      --           \"--line-length=120\",\n      --         },\n      --       },\n      --     },\n      --   })\n      -- end,\n      [\"ruff\"] = function()\n        -- configure ruff language server\n        lspconfig[\"ruff\"].setup({\n          capabilities = capabilities,\n          init_options = {\n            settings = {\n              lint = {\n                select = {\"E\",\"T201\"},\n              },\n                lineLength = 120,\n              },\n            },\n          })\n      end,\n      [\"pyright\"] = function()\n        -- configure pyright language server\n        lspconfig[\"pyright\"].setup({\n          capabilities = capabilities,\n          settings = {\n            python = {\n              analysis = {\n                typeCheckingMode = \"basic\",\n                autoSearchPaths = true,\n                useLibraryCodeForTypes = true,\n              }\n            }\n          }\n        })\n      end,\n      -- [\"pylsp\"] = function()\n      --   -- configure pylsp language server\n      --   lspconfig[\"pylsp\"].setup({\n      --     capabilities = capabilities,\n      --     settings = {\n      --       pylsp = {\n      --         plugins = {\n      --           pycodestyle = {\n      --             ignore = { \"W391\", \"E501\", \"E265\" },\n      --             maxLineLength = 120,\n      --           },\n      --         },\n      --       },\n      --     },\n      --   })\n      -- end,\n      [\"html\"] = function()\n        -- configure html server\n        lspconfig[\"html\"].setup({\n          capabilities = capabilities,\n          filetypes = { \"html\", \"css\", \"templ\" },\n        })\n      end,\n      [\"emmet_ls\"] = function()\n        -- configure emmet language server\n        lspconfig[\"emmet_ls\"].setup({\n          capabilities = capabilities,\n          filetypes = { \"html\", \"typescriptreact\", \"javascriptreact\", \"css\", \"sass\", \"scss\", \"less\", \"svelte\" },\n          init_options = {\n            html = {\n              options = {\n                -- For possible options, see: https://github.com/emmetio/emmet/blob/master/src/config.ts#L79\n                [\"bem.enabled\"] = true,\n              },\n            },\n          },\n        })\n      end,\n      [\"emmet_language_server\"] = function()\n        -- configure emmet language server\n        lspconfig[\"emmet_language_server\"].setup({\n          capabilities = capabilities,\n        })\n      end,\n      [\"lua_ls\"] = function()\n        -- configure lua server (with special settings)\n        lspconfig[\"lua_ls\"].setup({\n          capabilities = capabilities,\n          settings = {\n            Lua = {\n              -- make the language server recognize \"vim\" global\n              diagnostics = {\n                globals = { \"vim\" },\n              },\n              completion = {\n                callSnippet = \"Replace\",\n              },\n            },\n          },\n        })\n      end,\n    })\n  end,\n}\nfile mason:\nreturn {\n  \"williamboman/mason.nvim\",\n  dependencies = {\n    \"williamboman/mason-lspconfig.nvim\",\n    \"WhoIsSethDaniel/mason-tool-installer.nvim\",\n  },\n  config = function()\n    -- import mason\n    local mason = require(\"mason\")\n\n    -- import mason-lspconfig\n    local mason_lspconfig = require(\"mason-lspconfig\")\n\n    local mason_tool_installer = require(\"mason-tool-installer\")\n\n    -- enable mason and configure icons\n    mason.setup({\n      ui = {\n        icons = {\n          package_installed = \"✓\",\n          package_pending = \"➜\",\n          package_uninstalled = \"✗\",\n        },\n      },\n      log_level = vim.log.levels.DEBUG,\n    })\n    mason_lspconfig.setup({\n      -- list of servers for mason to install\n      ensure_installed = {\n        \"ts_ls\",\n        \"html\",\n        \"cssls\",\n        \"tailwindcss\",\n        \"svelte\",\n        \"lua_ls\",\n        \"graphql\",\n        \"emmet_ls\",\n        \"prismals\",\n        \"yamlls\",\n        \"pyright\",\n        -- \"ruff_lsp\",\n        \"ruff\",\n      },\n    })\n\n\n    mason_tool_installer.setup({\n      ensure_installed = {\n        \"prettier\", -- prettier formatter\n        \"stylua\", -- lua formatter\n        \"isort\", -- python formatter\n        \"black\", -- python formatter\n        \"ruff\",\n        \"pylint\",\n        \"mypy\",\n        \"eslint_d\",\n      },\n    })\n  end,\n}\nWhen switching to version 2.0, the error does not occur. I have not yet figured out the reason.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3801/comments",
    "created_at": "2025-04-28T16:17:13Z",
    "events_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3801/events",
    "html_url": "https://github.com/neovim/nvim-lspconfig/issues/3801",
    "id": 3025474992,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "Something isn't working",
            "id": 1674892761,
            "name": "bug",
            "node_id": "MDU6TGFiZWwxNjc0ODkyNzYx",
            "url": "https://api.github.com/repos/neovim/nvim-lspconfig/labels/bug"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3801/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDODTQC1860VRWw",
    "number": 3801,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3801/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/nvim-lspconfig",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3801/timeline",
    "title": "Bug in version 2.1.0 - Spawning language server with cmd: `{ \"yaml-language-server\", \"--stdio\" }` failed.",
    "type": null,
    "updated_at": "2025-04-28T16:17:13Z",
    "url": "https://api.github.com/repos/neovim/nvim-lspconfig/issues/3801",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/133758633?v=4",
        "events_url": "https://api.github.com/users/Barmaley0/events{/privacy}",
        "followers_url": "https://api.github.com/users/Barmaley0/followers",
        "following_url": "https://api.github.com/users/Barmaley0/following{/other_user}",
        "gists_url": "https://api.github.com/users/Barmaley0/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Barmaley0",
        "id": 133758633,
        "login": "Barmaley0",
        "node_id": "U_kgDOB_j-qQ",
        "organizations_url": "https://api.github.com/users/Barmaley0/orgs",
        "received_events_url": "https://api.github.com/users/Barmaley0/received_events",
        "repos_url": "https://api.github.com/users/Barmaley0/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Barmaley0/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Barmaley0/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Barmaley0",
        "user_view_type": "public"
    }
}